// This file is auto-generated, don't edit it. Thanks.
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AIAgentConfig struct {
	AsrConfig                *AIAgentConfigAsrConfig           `json:"AsrConfig,omitempty" xml:"AsrConfig,omitempty" type:"Struct"`
	AvatarConfig             *AIAgentConfigAvatarConfig        `json:"AvatarConfig,omitempty" xml:"AvatarConfig,omitempty" type:"Struct"`
	AvatarUrl                *string                           `json:"AvatarUrl,omitempty" xml:"AvatarUrl,omitempty"`
	AvatarUrlType            *string                           `json:"AvatarUrlType,omitempty" xml:"AvatarUrlType,omitempty"`
	EnableIntelligentSegment *bool                             `json:"EnableIntelligentSegment,omitempty" xml:"EnableIntelligentSegment,omitempty"`
	EnablePushToTalk         *bool                             `json:"EnablePushToTalk,omitempty" xml:"EnablePushToTalk,omitempty"`
	ExperimentalConfig       *string                           `json:"ExperimentalConfig,omitempty" xml:"ExperimentalConfig,omitempty"`
	GracefulShutdown         *bool                             `json:"GracefulShutdown,omitempty" xml:"GracefulShutdown,omitempty"`
	Greeting                 *string                           `json:"Greeting,omitempty" xml:"Greeting,omitempty"`
	InterruptConfig          *AIAgentConfigInterruptConfig     `json:"InterruptConfig,omitempty" xml:"InterruptConfig,omitempty" type:"Struct"`
	LlmConfig                *AIAgentConfigLlmConfig           `json:"LlmConfig,omitempty" xml:"LlmConfig,omitempty" type:"Struct"`
	MaxIdleTime              *int32                            `json:"MaxIdleTime,omitempty" xml:"MaxIdleTime,omitempty"`
	TtsConfig                *AIAgentConfigTtsConfig           `json:"TtsConfig,omitempty" xml:"TtsConfig,omitempty" type:"Struct"`
	TurnDetectionConfig      *AIAgentConfigTurnDetectionConfig `json:"TurnDetectionConfig,omitempty" xml:"TurnDetectionConfig,omitempty" type:"Struct"`
	UserOfflineTimeout       *int32                            `json:"UserOfflineTimeout,omitempty" xml:"UserOfflineTimeout,omitempty"`
	UserOnlineTimeout        *int32                            `json:"UserOnlineTimeout,omitempty" xml:"UserOnlineTimeout,omitempty"`
	VcrConfig                *AIAgentConfigVcrConfig           `json:"VcrConfig,omitempty" xml:"VcrConfig,omitempty" type:"Struct"`
	VoiceprintConfig         *AIAgentConfigVoiceprintConfig    `json:"VoiceprintConfig,omitempty" xml:"VoiceprintConfig,omitempty" type:"Struct"`
	Volume                   *int64                            `json:"Volume,omitempty" xml:"Volume,omitempty"`
	WakeUpQuery              *string                           `json:"WakeUpQuery,omitempty" xml:"WakeUpQuery,omitempty"`
	WorkflowOverrideParams   *string                           `json:"WorkflowOverrideParams,omitempty" xml:"WorkflowOverrideParams,omitempty"`
}

func (s AIAgentConfig) String() string {
	return tea.Prettify(s)
}

func (s AIAgentConfig) GoString() string {
	return s.String()
}

func (s *AIAgentConfig) SetAsrConfig(v *AIAgentConfigAsrConfig) *AIAgentConfig {
	s.AsrConfig = v
	return s
}

func (s *AIAgentConfig) SetAvatarConfig(v *AIAgentConfigAvatarConfig) *AIAgentConfig {
	s.AvatarConfig = v
	return s
}

func (s *AIAgentConfig) SetAvatarUrl(v string) *AIAgentConfig {
	s.AvatarUrl = &v
	return s
}

func (s *AIAgentConfig) SetAvatarUrlType(v string) *AIAgentConfig {
	s.AvatarUrlType = &v
	return s
}

func (s *AIAgentConfig) SetEnableIntelligentSegment(v bool) *AIAgentConfig {
	s.EnableIntelligentSegment = &v
	return s
}

func (s *AIAgentConfig) SetEnablePushToTalk(v bool) *AIAgentConfig {
	s.EnablePushToTalk = &v
	return s
}

func (s *AIAgentConfig) SetExperimentalConfig(v string) *AIAgentConfig {
	s.ExperimentalConfig = &v
	return s
}

func (s *AIAgentConfig) SetGracefulShutdown(v bool) *AIAgentConfig {
	s.GracefulShutdown = &v
	return s
}

func (s *AIAgentConfig) SetGreeting(v string) *AIAgentConfig {
	s.Greeting = &v
	return s
}

func (s *AIAgentConfig) SetInterruptConfig(v *AIAgentConfigInterruptConfig) *AIAgentConfig {
	s.InterruptConfig = v
	return s
}

func (s *AIAgentConfig) SetLlmConfig(v *AIAgentConfigLlmConfig) *AIAgentConfig {
	s.LlmConfig = v
	return s
}

func (s *AIAgentConfig) SetMaxIdleTime(v int32) *AIAgentConfig {
	s.MaxIdleTime = &v
	return s
}

func (s *AIAgentConfig) SetTtsConfig(v *AIAgentConfigTtsConfig) *AIAgentConfig {
	s.TtsConfig = v
	return s
}

func (s *AIAgentConfig) SetTurnDetectionConfig(v *AIAgentConfigTurnDetectionConfig) *AIAgentConfig {
	s.TurnDetectionConfig = v
	return s
}

func (s *AIAgentConfig) SetUserOfflineTimeout(v int32) *AIAgentConfig {
	s.UserOfflineTimeout = &v
	return s
}

func (s *AIAgentConfig) SetUserOnlineTimeout(v int32) *AIAgentConfig {
	s.UserOnlineTimeout = &v
	return s
}

func (s *AIAgentConfig) SetVcrConfig(v *AIAgentConfigVcrConfig) *AIAgentConfig {
	s.VcrConfig = v
	return s
}

func (s *AIAgentConfig) SetVoiceprintConfig(v *AIAgentConfigVoiceprintConfig) *AIAgentConfig {
	s.VoiceprintConfig = v
	return s
}

func (s *AIAgentConfig) SetVolume(v int64) *AIAgentConfig {
	s.Volume = &v
	return s
}

func (s *AIAgentConfig) SetWakeUpQuery(v string) *AIAgentConfig {
	s.WakeUpQuery = &v
	return s
}

func (s *AIAgentConfig) SetWorkflowOverrideParams(v string) *AIAgentConfig {
	s.WorkflowOverrideParams = &v
	return s
}

type AIAgentConfigAsrConfig struct {
	AsrHotWords   []*string `json:"AsrHotWords,omitempty" xml:"AsrHotWords,omitempty" type:"Repeated"`
	AsrLanguageId *string   `json:"AsrLanguageId,omitempty" xml:"AsrLanguageId,omitempty"`
	AsrMaxSilence *int32    `json:"AsrMaxSilence,omitempty" xml:"AsrMaxSilence,omitempty"`
	CustomParams  *string   `json:"CustomParams,omitempty" xml:"CustomParams,omitempty"`
	VadLevel      *int32    `json:"VadLevel,omitempty" xml:"VadLevel,omitempty"`
}

func (s AIAgentConfigAsrConfig) String() string {
	return tea.Prettify(s)
}

func (s AIAgentConfigAsrConfig) GoString() string {
	return s.String()
}

func (s *AIAgentConfigAsrConfig) SetAsrHotWords(v []*string) *AIAgentConfigAsrConfig {
	s.AsrHotWords = v
	return s
}

func (s *AIAgentConfigAsrConfig) SetAsrLanguageId(v string) *AIAgentConfigAsrConfig {
	s.AsrLanguageId = &v
	return s
}

func (s *AIAgentConfigAsrConfig) SetAsrMaxSilence(v int32) *AIAgentConfigAsrConfig {
	s.AsrMaxSilence = &v
	return s
}

func (s *AIAgentConfigAsrConfig) SetCustomParams(v string) *AIAgentConfigAsrConfig {
	s.CustomParams = &v
	return s
}

func (s *AIAgentConfigAsrConfig) SetVadLevel(v int32) *AIAgentConfigAsrConfig {
	s.VadLevel = &v
	return s
}

type AIAgentConfigAvatarConfig struct {
	AvatarId *string `json:"AvatarId,omitempty" xml:"AvatarId,omitempty"`
}

func (s AIAgentConfigAvatarConfig) String() string {
	return tea.Prettify(s)
}

func (s AIAgentConfigAvatarConfig) GoString() string {
	return s.String()
}

func (s *AIAgentConfigAvatarConfig) SetAvatarId(v string) *AIAgentConfigAvatarConfig {
	s.AvatarId = &v
	return s
}

type AIAgentConfigInterruptConfig struct {
	EnableVoiceInterrupt *bool     `json:"EnableVoiceInterrupt,omitempty" xml:"EnableVoiceInterrupt,omitempty"`
	InterruptWords       []*string `json:"InterruptWords,omitempty" xml:"InterruptWords,omitempty" type:"Repeated"`
}

func (s AIAgentConfigInterruptConfig) String() string {
	return tea.Prettify(s)
}

func (s AIAgentConfigInterruptConfig) GoString() string {
	return s.String()
}

func (s *AIAgentConfigInterruptConfig) SetEnableVoiceInterrupt(v bool) *AIAgentConfigInterruptConfig {
	s.EnableVoiceInterrupt = &v
	return s
}

func (s *AIAgentConfigInterruptConfig) SetInterruptWords(v []*string) *AIAgentConfigInterruptConfig {
	s.InterruptWords = v
	return s
}

type AIAgentConfigLlmConfig struct {
	BailianAppParams *string                             `json:"BailianAppParams,omitempty" xml:"BailianAppParams,omitempty"`
	LlmHistory       []*AIAgentConfigLlmConfigLlmHistory `json:"LlmHistory,omitempty" xml:"LlmHistory,omitempty" type:"Repeated"`
	LlmHistoryLimit  *int32                              `json:"LlmHistoryLimit,omitempty" xml:"LlmHistoryLimit,omitempty"`
	LlmSystemPrompt  *string                             `json:"LlmSystemPrompt,omitempty" xml:"LlmSystemPrompt,omitempty"`
}

func (s AIAgentConfigLlmConfig) String() string {
	return tea.Prettify(s)
}

func (s AIAgentConfigLlmConfig) GoString() string {
	return s.String()
}

func (s *AIAgentConfigLlmConfig) SetBailianAppParams(v string) *AIAgentConfigLlmConfig {
	s.BailianAppParams = &v
	return s
}

func (s *AIAgentConfigLlmConfig) SetLlmHistory(v []*AIAgentConfigLlmConfigLlmHistory) *AIAgentConfigLlmConfig {
	s.LlmHistory = v
	return s
}

func (s *AIAgentConfigLlmConfig) SetLlmHistoryLimit(v int32) *AIAgentConfigLlmConfig {
	s.LlmHistoryLimit = &v
	return s
}

func (s *AIAgentConfigLlmConfig) SetLlmSystemPrompt(v string) *AIAgentConfigLlmConfig {
	s.LlmSystemPrompt = &v
	return s
}

type AIAgentConfigLlmConfigLlmHistory struct {
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	Role    *string `json:"Role,omitempty" xml:"Role,omitempty"`
}

func (s AIAgentConfigLlmConfigLlmHistory) String() string {
	return tea.Prettify(s)
}

func (s AIAgentConfigLlmConfigLlmHistory) GoString() string {
	return s.String()
}

func (s *AIAgentConfigLlmConfigLlmHistory) SetContent(v string) *AIAgentConfigLlmConfigLlmHistory {
	s.Content = &v
	return s
}

func (s *AIAgentConfigLlmConfigLlmHistory) SetRole(v string) *AIAgentConfigLlmConfigLlmHistory {
	s.Role = &v
	return s
}

type AIAgentConfigTtsConfig struct {
	PronunciationRules []*AIAgentConfigTtsConfigPronunciationRules `json:"PronunciationRules,omitempty" xml:"PronunciationRules,omitempty" type:"Repeated"`
	VoiceId            *string                                     `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
	VoiceIdList        []*string                                   `json:"VoiceIdList,omitempty" xml:"VoiceIdList,omitempty" type:"Repeated"`
}

func (s AIAgentConfigTtsConfig) String() string {
	return tea.Prettify(s)
}

func (s AIAgentConfigTtsConfig) GoString() string {
	return s.String()
}

func (s *AIAgentConfigTtsConfig) SetPronunciationRules(v []*AIAgentConfigTtsConfigPronunciationRules) *AIAgentConfigTtsConfig {
	s.PronunciationRules = v
	return s
}

func (s *AIAgentConfigTtsConfig) SetVoiceId(v string) *AIAgentConfigTtsConfig {
	s.VoiceId = &v
	return s
}

func (s *AIAgentConfigTtsConfig) SetVoiceIdList(v []*string) *AIAgentConfigTtsConfig {
	s.VoiceIdList = v
	return s
}

type AIAgentConfigTtsConfigPronunciationRules struct {
	Pronunciation *string `json:"Pronunciation,omitempty" xml:"Pronunciation,omitempty"`
	Type          *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Word          *string `json:"Word,omitempty" xml:"Word,omitempty"`
}

func (s AIAgentConfigTtsConfigPronunciationRules) String() string {
	return tea.Prettify(s)
}

func (s AIAgentConfigTtsConfigPronunciationRules) GoString() string {
	return s.String()
}

func (s *AIAgentConfigTtsConfigPronunciationRules) SetPronunciation(v string) *AIAgentConfigTtsConfigPronunciationRules {
	s.Pronunciation = &v
	return s
}

func (s *AIAgentConfigTtsConfigPronunciationRules) SetType(v string) *AIAgentConfigTtsConfigPronunciationRules {
	s.Type = &v
	return s
}

func (s *AIAgentConfigTtsConfigPronunciationRules) SetWord(v string) *AIAgentConfigTtsConfigPronunciationRules {
	s.Word = &v
	return s
}

type AIAgentConfigTurnDetectionConfig struct {
	Mode                 *string   `json:"Mode,omitempty" xml:"Mode,omitempty"`
	SemanticWaitDuration *int32    `json:"SemanticWaitDuration,omitempty" xml:"SemanticWaitDuration,omitempty"`
	TurnEndWords         []*string `json:"TurnEndWords,omitempty" xml:"TurnEndWords,omitempty" type:"Repeated"`
}

func (s AIAgentConfigTurnDetectionConfig) String() string {
	return tea.Prettify(s)
}

func (s AIAgentConfigTurnDetectionConfig) GoString() string {
	return s.String()
}

func (s *AIAgentConfigTurnDetectionConfig) SetMode(v string) *AIAgentConfigTurnDetectionConfig {
	s.Mode = &v
	return s
}

func (s *AIAgentConfigTurnDetectionConfig) SetSemanticWaitDuration(v int32) *AIAgentConfigTurnDetectionConfig {
	s.SemanticWaitDuration = &v
	return s
}

func (s *AIAgentConfigTurnDetectionConfig) SetTurnEndWords(v []*string) *AIAgentConfigTurnDetectionConfig {
	s.TurnEndWords = v
	return s
}

type AIAgentConfigVcrConfig struct {
	Equipment          *AIAgentConfigVcrConfigEquipment          `json:"Equipment,omitempty" xml:"Equipment,omitempty" type:"Struct"`
	HeadMotion         *AIAgentConfigVcrConfigHeadMotion         `json:"HeadMotion,omitempty" xml:"HeadMotion,omitempty" type:"Struct"`
	InvalidFrameMotion *AIAgentConfigVcrConfigInvalidFrameMotion `json:"InvalidFrameMotion,omitempty" xml:"InvalidFrameMotion,omitempty" type:"Struct"`
	PeopleCount        *AIAgentConfigVcrConfigPeopleCount        `json:"PeopleCount,omitempty" xml:"PeopleCount,omitempty" type:"Struct"`
	StillFrameMotion   *AIAgentConfigVcrConfigStillFrameMotion   `json:"StillFrameMotion,omitempty" xml:"StillFrameMotion,omitempty" type:"Struct"`
}

func (s AIAgentConfigVcrConfig) String() string {
	return tea.Prettify(s)
}

func (s AIAgentConfigVcrConfig) GoString() string {
	return s.String()
}

func (s *AIAgentConfigVcrConfig) SetEquipment(v *AIAgentConfigVcrConfigEquipment) *AIAgentConfigVcrConfig {
	s.Equipment = v
	return s
}

func (s *AIAgentConfigVcrConfig) SetHeadMotion(v *AIAgentConfigVcrConfigHeadMotion) *AIAgentConfigVcrConfig {
	s.HeadMotion = v
	return s
}

func (s *AIAgentConfigVcrConfig) SetInvalidFrameMotion(v *AIAgentConfigVcrConfigInvalidFrameMotion) *AIAgentConfigVcrConfig {
	s.InvalidFrameMotion = v
	return s
}

func (s *AIAgentConfigVcrConfig) SetPeopleCount(v *AIAgentConfigVcrConfigPeopleCount) *AIAgentConfigVcrConfig {
	s.PeopleCount = v
	return s
}

func (s *AIAgentConfigVcrConfig) SetStillFrameMotion(v *AIAgentConfigVcrConfigStillFrameMotion) *AIAgentConfigVcrConfig {
	s.StillFrameMotion = v
	return s
}

type AIAgentConfigVcrConfigEquipment struct {
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
}

func (s AIAgentConfigVcrConfigEquipment) String() string {
	return tea.Prettify(s)
}

func (s AIAgentConfigVcrConfigEquipment) GoString() string {
	return s.String()
}

func (s *AIAgentConfigVcrConfigEquipment) SetEnabled(v bool) *AIAgentConfigVcrConfigEquipment {
	s.Enabled = &v
	return s
}

type AIAgentConfigVcrConfigHeadMotion struct {
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
}

func (s AIAgentConfigVcrConfigHeadMotion) String() string {
	return tea.Prettify(s)
}

func (s AIAgentConfigVcrConfigHeadMotion) GoString() string {
	return s.String()
}

func (s *AIAgentConfigVcrConfigHeadMotion) SetEnabled(v bool) *AIAgentConfigVcrConfigHeadMotion {
	s.Enabled = &v
	return s
}

type AIAgentConfigVcrConfigInvalidFrameMotion struct {
	CallbackDelay *int32 `json:"CallbackDelay,omitempty" xml:"CallbackDelay,omitempty"`
	Enabled       *bool  `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
}

func (s AIAgentConfigVcrConfigInvalidFrameMotion) String() string {
	return tea.Prettify(s)
}

func (s AIAgentConfigVcrConfigInvalidFrameMotion) GoString() string {
	return s.String()
}

func (s *AIAgentConfigVcrConfigInvalidFrameMotion) SetCallbackDelay(v int32) *AIAgentConfigVcrConfigInvalidFrameMotion {
	s.CallbackDelay = &v
	return s
}

func (s *AIAgentConfigVcrConfigInvalidFrameMotion) SetEnabled(v bool) *AIAgentConfigVcrConfigInvalidFrameMotion {
	s.Enabled = &v
	return s
}

type AIAgentConfigVcrConfigPeopleCount struct {
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
}

func (s AIAgentConfigVcrConfigPeopleCount) String() string {
	return tea.Prettify(s)
}

func (s AIAgentConfigVcrConfigPeopleCount) GoString() string {
	return s.String()
}

func (s *AIAgentConfigVcrConfigPeopleCount) SetEnabled(v bool) *AIAgentConfigVcrConfigPeopleCount {
	s.Enabled = &v
	return s
}

type AIAgentConfigVcrConfigStillFrameMotion struct {
	CallbackDelay *int32 `json:"CallbackDelay,omitempty" xml:"CallbackDelay,omitempty"`
	Enabled       *bool  `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
}

func (s AIAgentConfigVcrConfigStillFrameMotion) String() string {
	return tea.Prettify(s)
}

func (s AIAgentConfigVcrConfigStillFrameMotion) GoString() string {
	return s.String()
}

func (s *AIAgentConfigVcrConfigStillFrameMotion) SetCallbackDelay(v int32) *AIAgentConfigVcrConfigStillFrameMotion {
	s.CallbackDelay = &v
	return s
}

func (s *AIAgentConfigVcrConfigStillFrameMotion) SetEnabled(v bool) *AIAgentConfigVcrConfigStillFrameMotion {
	s.Enabled = &v
	return s
}

type AIAgentConfigVoiceprintConfig struct {
	UseVoiceprint *bool   `json:"UseVoiceprint,omitempty" xml:"UseVoiceprint,omitempty"`
	VoiceprintId  *string `json:"VoiceprintId,omitempty" xml:"VoiceprintId,omitempty"`
}

func (s AIAgentConfigVoiceprintConfig) String() string {
	return tea.Prettify(s)
}

func (s AIAgentConfigVoiceprintConfig) GoString() string {
	return s.String()
}

func (s *AIAgentConfigVoiceprintConfig) SetUseVoiceprint(v bool) *AIAgentConfigVoiceprintConfig {
	s.UseVoiceprint = &v
	return s
}

func (s *AIAgentConfigVoiceprintConfig) SetVoiceprintId(v string) *AIAgentConfigVoiceprintConfig {
	s.VoiceprintId = &v
	return s
}

type AIAgentOutboundCallConfig struct {
	AsrConfig                *AIAgentOutboundCallConfigAsrConfig           `json:"AsrConfig,omitempty" xml:"AsrConfig,omitempty" type:"Struct"`
	EnableIntelligentSegment *bool                                         `json:"EnableIntelligentSegment,omitempty" xml:"EnableIntelligentSegment,omitempty"`
	Greeting                 *string                                       `json:"Greeting,omitempty" xml:"Greeting,omitempty"`
	GreetingDelay            *int32                                        `json:"GreetingDelay,omitempty" xml:"GreetingDelay,omitempty"`
	InterruptConfig          *AIAgentOutboundCallConfigInterruptConfig     `json:"InterruptConfig,omitempty" xml:"InterruptConfig,omitempty" type:"Struct"`
	LlmConfig                *AIAgentOutboundCallConfigLlmConfig           `json:"LlmConfig,omitempty" xml:"LlmConfig,omitempty" type:"Struct"`
	TtsConfig                *AIAgentOutboundCallConfigTtsConfig           `json:"TtsConfig,omitempty" xml:"TtsConfig,omitempty" type:"Struct"`
	TurnDetectionConfig      *AIAgentOutboundCallConfigTurnDetectionConfig `json:"TurnDetectionConfig,omitempty" xml:"TurnDetectionConfig,omitempty" type:"Struct"`
}

func (s AIAgentOutboundCallConfig) String() string {
	return tea.Prettify(s)
}

func (s AIAgentOutboundCallConfig) GoString() string {
	return s.String()
}

func (s *AIAgentOutboundCallConfig) SetAsrConfig(v *AIAgentOutboundCallConfigAsrConfig) *AIAgentOutboundCallConfig {
	s.AsrConfig = v
	return s
}

func (s *AIAgentOutboundCallConfig) SetEnableIntelligentSegment(v bool) *AIAgentOutboundCallConfig {
	s.EnableIntelligentSegment = &v
	return s
}

func (s *AIAgentOutboundCallConfig) SetGreeting(v string) *AIAgentOutboundCallConfig {
	s.Greeting = &v
	return s
}

func (s *AIAgentOutboundCallConfig) SetGreetingDelay(v int32) *AIAgentOutboundCallConfig {
	s.GreetingDelay = &v
	return s
}

func (s *AIAgentOutboundCallConfig) SetInterruptConfig(v *AIAgentOutboundCallConfigInterruptConfig) *AIAgentOutboundCallConfig {
	s.InterruptConfig = v
	return s
}

func (s *AIAgentOutboundCallConfig) SetLlmConfig(v *AIAgentOutboundCallConfigLlmConfig) *AIAgentOutboundCallConfig {
	s.LlmConfig = v
	return s
}

func (s *AIAgentOutboundCallConfig) SetTtsConfig(v *AIAgentOutboundCallConfigTtsConfig) *AIAgentOutboundCallConfig {
	s.TtsConfig = v
	return s
}

func (s *AIAgentOutboundCallConfig) SetTurnDetectionConfig(v *AIAgentOutboundCallConfigTurnDetectionConfig) *AIAgentOutboundCallConfig {
	s.TurnDetectionConfig = v
	return s
}

type AIAgentOutboundCallConfigAsrConfig struct {
	AsrHotWords   []*string `json:"AsrHotWords,omitempty" xml:"AsrHotWords,omitempty" type:"Repeated"`
	AsrLanguageId *string   `json:"AsrLanguageId,omitempty" xml:"AsrLanguageId,omitempty"`
	AsrMaxSilence *int32    `json:"AsrMaxSilence,omitempty" xml:"AsrMaxSilence,omitempty"`
	CustomParams  *string   `json:"CustomParams,omitempty" xml:"CustomParams,omitempty"`
	VadLevel      *int32    `json:"VadLevel,omitempty" xml:"VadLevel,omitempty"`
}

func (s AIAgentOutboundCallConfigAsrConfig) String() string {
	return tea.Prettify(s)
}

func (s AIAgentOutboundCallConfigAsrConfig) GoString() string {
	return s.String()
}

func (s *AIAgentOutboundCallConfigAsrConfig) SetAsrHotWords(v []*string) *AIAgentOutboundCallConfigAsrConfig {
	s.AsrHotWords = v
	return s
}

func (s *AIAgentOutboundCallConfigAsrConfig) SetAsrLanguageId(v string) *AIAgentOutboundCallConfigAsrConfig {
	s.AsrLanguageId = &v
	return s
}

func (s *AIAgentOutboundCallConfigAsrConfig) SetAsrMaxSilence(v int32) *AIAgentOutboundCallConfigAsrConfig {
	s.AsrMaxSilence = &v
	return s
}

func (s *AIAgentOutboundCallConfigAsrConfig) SetCustomParams(v string) *AIAgentOutboundCallConfigAsrConfig {
	s.CustomParams = &v
	return s
}

func (s *AIAgentOutboundCallConfigAsrConfig) SetVadLevel(v int32) *AIAgentOutboundCallConfigAsrConfig {
	s.VadLevel = &v
	return s
}

type AIAgentOutboundCallConfigInterruptConfig struct {
	EnableVoiceInterrupt *bool     `json:"EnableVoiceInterrupt,omitempty" xml:"EnableVoiceInterrupt,omitempty"`
	InterruptWords       []*string `json:"InterruptWords,omitempty" xml:"InterruptWords,omitempty" type:"Repeated"`
}

func (s AIAgentOutboundCallConfigInterruptConfig) String() string {
	return tea.Prettify(s)
}

func (s AIAgentOutboundCallConfigInterruptConfig) GoString() string {
	return s.String()
}

func (s *AIAgentOutboundCallConfigInterruptConfig) SetEnableVoiceInterrupt(v bool) *AIAgentOutboundCallConfigInterruptConfig {
	s.EnableVoiceInterrupt = &v
	return s
}

func (s *AIAgentOutboundCallConfigInterruptConfig) SetInterruptWords(v []*string) *AIAgentOutboundCallConfigInterruptConfig {
	s.InterruptWords = v
	return s
}

type AIAgentOutboundCallConfigLlmConfig struct {
	BailianAppParams *string                                         `json:"BailianAppParams,omitempty" xml:"BailianAppParams,omitempty"`
	LlmHistory       []*AIAgentOutboundCallConfigLlmConfigLlmHistory `json:"LlmHistory,omitempty" xml:"LlmHistory,omitempty" type:"Repeated"`
	LlmHistoryLimit  *int32                                          `json:"LlmHistoryLimit,omitempty" xml:"LlmHistoryLimit,omitempty"`
	LlmSystemPrompt  *string                                         `json:"LlmSystemPrompt,omitempty" xml:"LlmSystemPrompt,omitempty"`
}

func (s AIAgentOutboundCallConfigLlmConfig) String() string {
	return tea.Prettify(s)
}

func (s AIAgentOutboundCallConfigLlmConfig) GoString() string {
	return s.String()
}

func (s *AIAgentOutboundCallConfigLlmConfig) SetBailianAppParams(v string) *AIAgentOutboundCallConfigLlmConfig {
	s.BailianAppParams = &v
	return s
}

func (s *AIAgentOutboundCallConfigLlmConfig) SetLlmHistory(v []*AIAgentOutboundCallConfigLlmConfigLlmHistory) *AIAgentOutboundCallConfigLlmConfig {
	s.LlmHistory = v
	return s
}

func (s *AIAgentOutboundCallConfigLlmConfig) SetLlmHistoryLimit(v int32) *AIAgentOutboundCallConfigLlmConfig {
	s.LlmHistoryLimit = &v
	return s
}

func (s *AIAgentOutboundCallConfigLlmConfig) SetLlmSystemPrompt(v string) *AIAgentOutboundCallConfigLlmConfig {
	s.LlmSystemPrompt = &v
	return s
}

type AIAgentOutboundCallConfigLlmConfigLlmHistory struct {
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	Role    *string `json:"Role,omitempty" xml:"Role,omitempty"`
}

func (s AIAgentOutboundCallConfigLlmConfigLlmHistory) String() string {
	return tea.Prettify(s)
}

func (s AIAgentOutboundCallConfigLlmConfigLlmHistory) GoString() string {
	return s.String()
}

func (s *AIAgentOutboundCallConfigLlmConfigLlmHistory) SetContent(v string) *AIAgentOutboundCallConfigLlmConfigLlmHistory {
	s.Content = &v
	return s
}

func (s *AIAgentOutboundCallConfigLlmConfigLlmHistory) SetRole(v string) *AIAgentOutboundCallConfigLlmConfigLlmHistory {
	s.Role = &v
	return s
}

type AIAgentOutboundCallConfigTtsConfig struct {
	PronunciationRules []*AIAgentOutboundCallConfigTtsConfigPronunciationRules `json:"PronunciationRules,omitempty" xml:"PronunciationRules,omitempty" type:"Repeated"`
	VoiceId            *string                                                 `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
	VoiceIdList        []*string                                               `json:"VoiceIdList,omitempty" xml:"VoiceIdList,omitempty" type:"Repeated"`
}

func (s AIAgentOutboundCallConfigTtsConfig) String() string {
	return tea.Prettify(s)
}

func (s AIAgentOutboundCallConfigTtsConfig) GoString() string {
	return s.String()
}

func (s *AIAgentOutboundCallConfigTtsConfig) SetPronunciationRules(v []*AIAgentOutboundCallConfigTtsConfigPronunciationRules) *AIAgentOutboundCallConfigTtsConfig {
	s.PronunciationRules = v
	return s
}

func (s *AIAgentOutboundCallConfigTtsConfig) SetVoiceId(v string) *AIAgentOutboundCallConfigTtsConfig {
	s.VoiceId = &v
	return s
}

func (s *AIAgentOutboundCallConfigTtsConfig) SetVoiceIdList(v []*string) *AIAgentOutboundCallConfigTtsConfig {
	s.VoiceIdList = v
	return s
}

type AIAgentOutboundCallConfigTtsConfigPronunciationRules struct {
	Pronunciation *string `json:"Pronunciation,omitempty" xml:"Pronunciation,omitempty"`
	Type          *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Word          *string `json:"Word,omitempty" xml:"Word,omitempty"`
}

func (s AIAgentOutboundCallConfigTtsConfigPronunciationRules) String() string {
	return tea.Prettify(s)
}

func (s AIAgentOutboundCallConfigTtsConfigPronunciationRules) GoString() string {
	return s.String()
}

func (s *AIAgentOutboundCallConfigTtsConfigPronunciationRules) SetPronunciation(v string) *AIAgentOutboundCallConfigTtsConfigPronunciationRules {
	s.Pronunciation = &v
	return s
}

func (s *AIAgentOutboundCallConfigTtsConfigPronunciationRules) SetType(v string) *AIAgentOutboundCallConfigTtsConfigPronunciationRules {
	s.Type = &v
	return s
}

func (s *AIAgentOutboundCallConfigTtsConfigPronunciationRules) SetWord(v string) *AIAgentOutboundCallConfigTtsConfigPronunciationRules {
	s.Word = &v
	return s
}

type AIAgentOutboundCallConfigTurnDetectionConfig struct {
	Mode                 *string   `json:"Mode,omitempty" xml:"Mode,omitempty"`
	SemanticWaitDuration *int32    `json:"SemanticWaitDuration,omitempty" xml:"SemanticWaitDuration,omitempty"`
	TurnEndWords         []*string `json:"TurnEndWords,omitempty" xml:"TurnEndWords,omitempty" type:"Repeated"`
}

func (s AIAgentOutboundCallConfigTurnDetectionConfig) String() string {
	return tea.Prettify(s)
}

func (s AIAgentOutboundCallConfigTurnDetectionConfig) GoString() string {
	return s.String()
}

func (s *AIAgentOutboundCallConfigTurnDetectionConfig) SetMode(v string) *AIAgentOutboundCallConfigTurnDetectionConfig {
	s.Mode = &v
	return s
}

func (s *AIAgentOutboundCallConfigTurnDetectionConfig) SetSemanticWaitDuration(v int32) *AIAgentOutboundCallConfigTurnDetectionConfig {
	s.SemanticWaitDuration = &v
	return s
}

func (s *AIAgentOutboundCallConfigTurnDetectionConfig) SetTurnEndWords(v []*string) *AIAgentOutboundCallConfigTurnDetectionConfig {
	s.TurnEndWords = v
	return s
}

type AIAgentRuntimeConfig struct {
	AgentUserId *string `json:"AgentUserId,omitempty" xml:"AgentUserId,omitempty"`
	AuthToken   *string `json:"AuthToken,omitempty" xml:"AuthToken,omitempty"`
	// Deprecated
	AvatarChat3D *AIAgentRuntimeConfigAvatarChat3D `json:"AvatarChat3D,omitempty" xml:"AvatarChat3D,omitempty" type:"Struct"`
	ChannelId    *string                           `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// Deprecated
	VisionChat *AIAgentRuntimeConfigVisionChat `json:"VisionChat,omitempty" xml:"VisionChat,omitempty" type:"Struct"`
	// Deprecated
	VoiceChat *AIAgentRuntimeConfigVoiceChat `json:"VoiceChat,omitempty" xml:"VoiceChat,omitempty" type:"Struct"`
}

func (s AIAgentRuntimeConfig) String() string {
	return tea.Prettify(s)
}

func (s AIAgentRuntimeConfig) GoString() string {
	return s.String()
}

func (s *AIAgentRuntimeConfig) SetAgentUserId(v string) *AIAgentRuntimeConfig {
	s.AgentUserId = &v
	return s
}

func (s *AIAgentRuntimeConfig) SetAuthToken(v string) *AIAgentRuntimeConfig {
	s.AuthToken = &v
	return s
}

func (s *AIAgentRuntimeConfig) SetAvatarChat3D(v *AIAgentRuntimeConfigAvatarChat3D) *AIAgentRuntimeConfig {
	s.AvatarChat3D = v
	return s
}

func (s *AIAgentRuntimeConfig) SetChannelId(v string) *AIAgentRuntimeConfig {
	s.ChannelId = &v
	return s
}

func (s *AIAgentRuntimeConfig) SetVisionChat(v *AIAgentRuntimeConfigVisionChat) *AIAgentRuntimeConfig {
	s.VisionChat = v
	return s
}

func (s *AIAgentRuntimeConfig) SetVoiceChat(v *AIAgentRuntimeConfigVoiceChat) *AIAgentRuntimeConfig {
	s.VoiceChat = v
	return s
}

type AIAgentRuntimeConfigAvatarChat3D struct {
	AgentUserId *string `json:"AgentUserId,omitempty" xml:"AgentUserId,omitempty"`
	AuthToken   *string `json:"AuthToken,omitempty" xml:"AuthToken,omitempty"`
	ChannelId   *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
}

func (s AIAgentRuntimeConfigAvatarChat3D) String() string {
	return tea.Prettify(s)
}

func (s AIAgentRuntimeConfigAvatarChat3D) GoString() string {
	return s.String()
}

func (s *AIAgentRuntimeConfigAvatarChat3D) SetAgentUserId(v string) *AIAgentRuntimeConfigAvatarChat3D {
	s.AgentUserId = &v
	return s
}

func (s *AIAgentRuntimeConfigAvatarChat3D) SetAuthToken(v string) *AIAgentRuntimeConfigAvatarChat3D {
	s.AuthToken = &v
	return s
}

func (s *AIAgentRuntimeConfigAvatarChat3D) SetChannelId(v string) *AIAgentRuntimeConfigAvatarChat3D {
	s.ChannelId = &v
	return s
}

type AIAgentRuntimeConfigVisionChat struct {
	AgentUserId *string `json:"AgentUserId,omitempty" xml:"AgentUserId,omitempty"`
	AuthToken   *string `json:"AuthToken,omitempty" xml:"AuthToken,omitempty"`
	ChannelId   *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
}

func (s AIAgentRuntimeConfigVisionChat) String() string {
	return tea.Prettify(s)
}

func (s AIAgentRuntimeConfigVisionChat) GoString() string {
	return s.String()
}

func (s *AIAgentRuntimeConfigVisionChat) SetAgentUserId(v string) *AIAgentRuntimeConfigVisionChat {
	s.AgentUserId = &v
	return s
}

func (s *AIAgentRuntimeConfigVisionChat) SetAuthToken(v string) *AIAgentRuntimeConfigVisionChat {
	s.AuthToken = &v
	return s
}

func (s *AIAgentRuntimeConfigVisionChat) SetChannelId(v string) *AIAgentRuntimeConfigVisionChat {
	s.ChannelId = &v
	return s
}

type AIAgentRuntimeConfigVoiceChat struct {
	AgentUserId *string `json:"AgentUserId,omitempty" xml:"AgentUserId,omitempty"`
	AuthToken   *string `json:"AuthToken,omitempty" xml:"AuthToken,omitempty"`
	ChannelId   *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
}

func (s AIAgentRuntimeConfigVoiceChat) String() string {
	return tea.Prettify(s)
}

func (s AIAgentRuntimeConfigVoiceChat) GoString() string {
	return s.String()
}

func (s *AIAgentRuntimeConfigVoiceChat) SetAgentUserId(v string) *AIAgentRuntimeConfigVoiceChat {
	s.AgentUserId = &v
	return s
}

func (s *AIAgentRuntimeConfigVoiceChat) SetAuthToken(v string) *AIAgentRuntimeConfigVoiceChat {
	s.AuthToken = &v
	return s
}

func (s *AIAgentRuntimeConfigVoiceChat) SetChannelId(v string) *AIAgentRuntimeConfigVoiceChat {
	s.ChannelId = &v
	return s
}

type AIAgentTemplateConfig struct {
	AvatarChat3D *AIAgentTemplateConfigAvatarChat3D `json:"AvatarChat3D,omitempty" xml:"AvatarChat3D,omitempty" type:"Struct"`
	VisionChat   *AIAgentTemplateConfigVisionChat   `json:"VisionChat,omitempty" xml:"VisionChat,omitempty" type:"Struct"`
	VoiceChat    *AIAgentTemplateConfigVoiceChat    `json:"VoiceChat,omitempty" xml:"VoiceChat,omitempty" type:"Struct"`
}

func (s AIAgentTemplateConfig) String() string {
	return tea.Prettify(s)
}

func (s AIAgentTemplateConfig) GoString() string {
	return s.String()
}

func (s *AIAgentTemplateConfig) SetAvatarChat3D(v *AIAgentTemplateConfigAvatarChat3D) *AIAgentTemplateConfig {
	s.AvatarChat3D = v
	return s
}

func (s *AIAgentTemplateConfig) SetVisionChat(v *AIAgentTemplateConfigVisionChat) *AIAgentTemplateConfig {
	s.VisionChat = v
	return s
}

func (s *AIAgentTemplateConfig) SetVoiceChat(v *AIAgentTemplateConfigVoiceChat) *AIAgentTemplateConfig {
	s.VoiceChat = v
	return s
}

type AIAgentTemplateConfigAvatarChat3D struct {
	AsrHotWords              []*string                                      `json:"AsrHotWords,omitempty" xml:"AsrHotWords,omitempty" type:"Repeated"`
	AsrLanguageId            *string                                        `json:"AsrLanguageId,omitempty" xml:"AsrLanguageId,omitempty"`
	AsrMaxSilence            *int32                                         `json:"AsrMaxSilence,omitempty" xml:"AsrMaxSilence,omitempty"`
	AvatarId                 *string                                        `json:"AvatarId,omitempty" xml:"AvatarId,omitempty"`
	BailianAppParams         *string                                        `json:"BailianAppParams,omitempty" xml:"BailianAppParams,omitempty"`
	CharBreak                *bool                                          `json:"CharBreak,omitempty" xml:"CharBreak,omitempty"`
	EnableIntelligentSegment *bool                                          `json:"EnableIntelligentSegment,omitempty" xml:"EnableIntelligentSegment,omitempty"`
	EnablePushToTalk         *bool                                          `json:"EnablePushToTalk,omitempty" xml:"EnablePushToTalk,omitempty"`
	EnableVoiceInterrupt     *bool                                          `json:"EnableVoiceInterrupt,omitempty" xml:"EnableVoiceInterrupt,omitempty"`
	GracefulShutdown         *bool                                          `json:"GracefulShutdown,omitempty" xml:"GracefulShutdown,omitempty"`
	Greeting                 *string                                        `json:"Greeting,omitempty" xml:"Greeting,omitempty"`
	InterruptWords           []*string                                      `json:"InterruptWords,omitempty" xml:"InterruptWords,omitempty" type:"Repeated"`
	LlmHistory               []*AIAgentTemplateConfigAvatarChat3DLlmHistory `json:"LlmHistory,omitempty" xml:"LlmHistory,omitempty" type:"Repeated"`
	LlmHistoryLimit          *int32                                         `json:"LlmHistoryLimit,omitempty" xml:"LlmHistoryLimit,omitempty"`
	LlmSystemPrompt          *string                                        `json:"LlmSystemPrompt,omitempty" xml:"LlmSystemPrompt,omitempty"`
	MaxIdleTime              *int32                                         `json:"MaxIdleTime,omitempty" xml:"MaxIdleTime,omitempty"`
	UseVoiceprint            *bool                                          `json:"UseVoiceprint,omitempty" xml:"UseVoiceprint,omitempty"`
	UserOfflineTimeout       *int32                                         `json:"UserOfflineTimeout,omitempty" xml:"UserOfflineTimeout,omitempty"`
	UserOnlineTimeout        *int32                                         `json:"UserOnlineTimeout,omitempty" xml:"UserOnlineTimeout,omitempty"`
	VadLevel                 *int32                                         `json:"VadLevel,omitempty" xml:"VadLevel,omitempty"`
	VoiceId                  *string                                        `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
	VoiceIdList              []*string                                      `json:"VoiceIdList,omitempty" xml:"VoiceIdList,omitempty" type:"Repeated"`
	VoiceprintId             *string                                        `json:"VoiceprintId,omitempty" xml:"VoiceprintId,omitempty"`
	Volume                   *int64                                         `json:"Volume,omitempty" xml:"Volume,omitempty"`
	WakeUpQuery              *string                                        `json:"WakeUpQuery,omitempty" xml:"WakeUpQuery,omitempty"`
	WorkflowOverrideParams   *string                                        `json:"WorkflowOverrideParams,omitempty" xml:"WorkflowOverrideParams,omitempty"`
}

func (s AIAgentTemplateConfigAvatarChat3D) String() string {
	return tea.Prettify(s)
}

func (s AIAgentTemplateConfigAvatarChat3D) GoString() string {
	return s.String()
}

func (s *AIAgentTemplateConfigAvatarChat3D) SetAsrHotWords(v []*string) *AIAgentTemplateConfigAvatarChat3D {
	s.AsrHotWords = v
	return s
}

func (s *AIAgentTemplateConfigAvatarChat3D) SetAsrLanguageId(v string) *AIAgentTemplateConfigAvatarChat3D {
	s.AsrLanguageId = &v
	return s
}

func (s *AIAgentTemplateConfigAvatarChat3D) SetAsrMaxSilence(v int32) *AIAgentTemplateConfigAvatarChat3D {
	s.AsrMaxSilence = &v
	return s
}

func (s *AIAgentTemplateConfigAvatarChat3D) SetAvatarId(v string) *AIAgentTemplateConfigAvatarChat3D {
	s.AvatarId = &v
	return s
}

func (s *AIAgentTemplateConfigAvatarChat3D) SetBailianAppParams(v string) *AIAgentTemplateConfigAvatarChat3D {
	s.BailianAppParams = &v
	return s
}

func (s *AIAgentTemplateConfigAvatarChat3D) SetCharBreak(v bool) *AIAgentTemplateConfigAvatarChat3D {
	s.CharBreak = &v
	return s
}

func (s *AIAgentTemplateConfigAvatarChat3D) SetEnableIntelligentSegment(v bool) *AIAgentTemplateConfigAvatarChat3D {
	s.EnableIntelligentSegment = &v
	return s
}

func (s *AIAgentTemplateConfigAvatarChat3D) SetEnablePushToTalk(v bool) *AIAgentTemplateConfigAvatarChat3D {
	s.EnablePushToTalk = &v
	return s
}

func (s *AIAgentTemplateConfigAvatarChat3D) SetEnableVoiceInterrupt(v bool) *AIAgentTemplateConfigAvatarChat3D {
	s.EnableVoiceInterrupt = &v
	return s
}

func (s *AIAgentTemplateConfigAvatarChat3D) SetGracefulShutdown(v bool) *AIAgentTemplateConfigAvatarChat3D {
	s.GracefulShutdown = &v
	return s
}

func (s *AIAgentTemplateConfigAvatarChat3D) SetGreeting(v string) *AIAgentTemplateConfigAvatarChat3D {
	s.Greeting = &v
	return s
}

func (s *AIAgentTemplateConfigAvatarChat3D) SetInterruptWords(v []*string) *AIAgentTemplateConfigAvatarChat3D {
	s.InterruptWords = v
	return s
}

func (s *AIAgentTemplateConfigAvatarChat3D) SetLlmHistory(v []*AIAgentTemplateConfigAvatarChat3DLlmHistory) *AIAgentTemplateConfigAvatarChat3D {
	s.LlmHistory = v
	return s
}

func (s *AIAgentTemplateConfigAvatarChat3D) SetLlmHistoryLimit(v int32) *AIAgentTemplateConfigAvatarChat3D {
	s.LlmHistoryLimit = &v
	return s
}

func (s *AIAgentTemplateConfigAvatarChat3D) SetLlmSystemPrompt(v string) *AIAgentTemplateConfigAvatarChat3D {
	s.LlmSystemPrompt = &v
	return s
}

func (s *AIAgentTemplateConfigAvatarChat3D) SetMaxIdleTime(v int32) *AIAgentTemplateConfigAvatarChat3D {
	s.MaxIdleTime = &v
	return s
}

func (s *AIAgentTemplateConfigAvatarChat3D) SetUseVoiceprint(v bool) *AIAgentTemplateConfigAvatarChat3D {
	s.UseVoiceprint = &v
	return s
}

func (s *AIAgentTemplateConfigAvatarChat3D) SetUserOfflineTimeout(v int32) *AIAgentTemplateConfigAvatarChat3D {
	s.UserOfflineTimeout = &v
	return s
}

func (s *AIAgentTemplateConfigAvatarChat3D) SetUserOnlineTimeout(v int32) *AIAgentTemplateConfigAvatarChat3D {
	s.UserOnlineTimeout = &v
	return s
}

func (s *AIAgentTemplateConfigAvatarChat3D) SetVadLevel(v int32) *AIAgentTemplateConfigAvatarChat3D {
	s.VadLevel = &v
	return s
}

func (s *AIAgentTemplateConfigAvatarChat3D) SetVoiceId(v string) *AIAgentTemplateConfigAvatarChat3D {
	s.VoiceId = &v
	return s
}

func (s *AIAgentTemplateConfigAvatarChat3D) SetVoiceIdList(v []*string) *AIAgentTemplateConfigAvatarChat3D {
	s.VoiceIdList = v
	return s
}

func (s *AIAgentTemplateConfigAvatarChat3D) SetVoiceprintId(v string) *AIAgentTemplateConfigAvatarChat3D {
	s.VoiceprintId = &v
	return s
}

func (s *AIAgentTemplateConfigAvatarChat3D) SetVolume(v int64) *AIAgentTemplateConfigAvatarChat3D {
	s.Volume = &v
	return s
}

func (s *AIAgentTemplateConfigAvatarChat3D) SetWakeUpQuery(v string) *AIAgentTemplateConfigAvatarChat3D {
	s.WakeUpQuery = &v
	return s
}

func (s *AIAgentTemplateConfigAvatarChat3D) SetWorkflowOverrideParams(v string) *AIAgentTemplateConfigAvatarChat3D {
	s.WorkflowOverrideParams = &v
	return s
}

type AIAgentTemplateConfigAvatarChat3DLlmHistory struct {
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	Role    *string `json:"Role,omitempty" xml:"Role,omitempty"`
}

func (s AIAgentTemplateConfigAvatarChat3DLlmHistory) String() string {
	return tea.Prettify(s)
}

func (s AIAgentTemplateConfigAvatarChat3DLlmHistory) GoString() string {
	return s.String()
}

func (s *AIAgentTemplateConfigAvatarChat3DLlmHistory) SetContent(v string) *AIAgentTemplateConfigAvatarChat3DLlmHistory {
	s.Content = &v
	return s
}

func (s *AIAgentTemplateConfigAvatarChat3DLlmHistory) SetRole(v string) *AIAgentTemplateConfigAvatarChat3DLlmHistory {
	s.Role = &v
	return s
}

type AIAgentTemplateConfigVisionChat struct {
	AsrHotWords              []*string                                    `json:"AsrHotWords,omitempty" xml:"AsrHotWords,omitempty" type:"Repeated"`
	AsrLanguageId            *string                                      `json:"AsrLanguageId,omitempty" xml:"AsrLanguageId,omitempty"`
	AsrMaxSilence            *int32                                       `json:"AsrMaxSilence,omitempty" xml:"AsrMaxSilence,omitempty"`
	BailianAppParams         *string                                      `json:"BailianAppParams,omitempty" xml:"BailianAppParams,omitempty"`
	CharBreak                *bool                                        `json:"CharBreak,omitempty" xml:"CharBreak,omitempty"`
	EnableIntelligentSegment *bool                                        `json:"EnableIntelligentSegment,omitempty" xml:"EnableIntelligentSegment,omitempty"`
	EnablePushToTalk         *bool                                        `json:"EnablePushToTalk,omitempty" xml:"EnablePushToTalk,omitempty"`
	EnableVoiceInterrupt     *bool                                        `json:"EnableVoiceInterrupt,omitempty" xml:"EnableVoiceInterrupt,omitempty"`
	GracefulShutdown         *bool                                        `json:"GracefulShutdown,omitempty" xml:"GracefulShutdown,omitempty"`
	Greeting                 *string                                      `json:"Greeting,omitempty" xml:"Greeting,omitempty"`
	InterruptWords           []*string                                    `json:"InterruptWords,omitempty" xml:"InterruptWords,omitempty" type:"Repeated"`
	LlmHistory               []*AIAgentTemplateConfigVisionChatLlmHistory `json:"LlmHistory,omitempty" xml:"LlmHistory,omitempty" type:"Repeated"`
	LlmHistoryLimit          *int32                                       `json:"LlmHistoryLimit,omitempty" xml:"LlmHistoryLimit,omitempty"`
	LlmSystemPrompt          *string                                      `json:"LlmSystemPrompt,omitempty" xml:"LlmSystemPrompt,omitempty"`
	MaxIdleTime              *int32                                       `json:"MaxIdleTime,omitempty" xml:"MaxIdleTime,omitempty"`
	UseVoiceprint            *bool                                        `json:"UseVoiceprint,omitempty" xml:"UseVoiceprint,omitempty"`
	UserOfflineTimeout       *int32                                       `json:"UserOfflineTimeout,omitempty" xml:"UserOfflineTimeout,omitempty"`
	UserOnlineTimeout        *int32                                       `json:"UserOnlineTimeout,omitempty" xml:"UserOnlineTimeout,omitempty"`
	VadLevel                 *int32                                       `json:"VadLevel,omitempty" xml:"VadLevel,omitempty"`
	VoiceId                  *string                                      `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
	VoiceIdList              []*string                                    `json:"VoiceIdList,omitempty" xml:"VoiceIdList,omitempty" type:"Repeated"`
	VoiceprintId             *string                                      `json:"VoiceprintId,omitempty" xml:"VoiceprintId,omitempty"`
	Volume                   *int64                                       `json:"Volume,omitempty" xml:"Volume,omitempty"`
	WakeUpQuery              *string                                      `json:"WakeUpQuery,omitempty" xml:"WakeUpQuery,omitempty"`
	WorkflowOverrideParams   *string                                      `json:"WorkflowOverrideParams,omitempty" xml:"WorkflowOverrideParams,omitempty"`
}

func (s AIAgentTemplateConfigVisionChat) String() string {
	return tea.Prettify(s)
}

func (s AIAgentTemplateConfigVisionChat) GoString() string {
	return s.String()
}

func (s *AIAgentTemplateConfigVisionChat) SetAsrHotWords(v []*string) *AIAgentTemplateConfigVisionChat {
	s.AsrHotWords = v
	return s
}

func (s *AIAgentTemplateConfigVisionChat) SetAsrLanguageId(v string) *AIAgentTemplateConfigVisionChat {
	s.AsrLanguageId = &v
	return s
}

func (s *AIAgentTemplateConfigVisionChat) SetAsrMaxSilence(v int32) *AIAgentTemplateConfigVisionChat {
	s.AsrMaxSilence = &v
	return s
}

func (s *AIAgentTemplateConfigVisionChat) SetBailianAppParams(v string) *AIAgentTemplateConfigVisionChat {
	s.BailianAppParams = &v
	return s
}

func (s *AIAgentTemplateConfigVisionChat) SetCharBreak(v bool) *AIAgentTemplateConfigVisionChat {
	s.CharBreak = &v
	return s
}

func (s *AIAgentTemplateConfigVisionChat) SetEnableIntelligentSegment(v bool) *AIAgentTemplateConfigVisionChat {
	s.EnableIntelligentSegment = &v
	return s
}

func (s *AIAgentTemplateConfigVisionChat) SetEnablePushToTalk(v bool) *AIAgentTemplateConfigVisionChat {
	s.EnablePushToTalk = &v
	return s
}

func (s *AIAgentTemplateConfigVisionChat) SetEnableVoiceInterrupt(v bool) *AIAgentTemplateConfigVisionChat {
	s.EnableVoiceInterrupt = &v
	return s
}

func (s *AIAgentTemplateConfigVisionChat) SetGracefulShutdown(v bool) *AIAgentTemplateConfigVisionChat {
	s.GracefulShutdown = &v
	return s
}

func (s *AIAgentTemplateConfigVisionChat) SetGreeting(v string) *AIAgentTemplateConfigVisionChat {
	s.Greeting = &v
	return s
}

func (s *AIAgentTemplateConfigVisionChat) SetInterruptWords(v []*string) *AIAgentTemplateConfigVisionChat {
	s.InterruptWords = v
	return s
}

func (s *AIAgentTemplateConfigVisionChat) SetLlmHistory(v []*AIAgentTemplateConfigVisionChatLlmHistory) *AIAgentTemplateConfigVisionChat {
	s.LlmHistory = v
	return s
}

func (s *AIAgentTemplateConfigVisionChat) SetLlmHistoryLimit(v int32) *AIAgentTemplateConfigVisionChat {
	s.LlmHistoryLimit = &v
	return s
}

func (s *AIAgentTemplateConfigVisionChat) SetLlmSystemPrompt(v string) *AIAgentTemplateConfigVisionChat {
	s.LlmSystemPrompt = &v
	return s
}

func (s *AIAgentTemplateConfigVisionChat) SetMaxIdleTime(v int32) *AIAgentTemplateConfigVisionChat {
	s.MaxIdleTime = &v
	return s
}

func (s *AIAgentTemplateConfigVisionChat) SetUseVoiceprint(v bool) *AIAgentTemplateConfigVisionChat {
	s.UseVoiceprint = &v
	return s
}

func (s *AIAgentTemplateConfigVisionChat) SetUserOfflineTimeout(v int32) *AIAgentTemplateConfigVisionChat {
	s.UserOfflineTimeout = &v
	return s
}

func (s *AIAgentTemplateConfigVisionChat) SetUserOnlineTimeout(v int32) *AIAgentTemplateConfigVisionChat {
	s.UserOnlineTimeout = &v
	return s
}

func (s *AIAgentTemplateConfigVisionChat) SetVadLevel(v int32) *AIAgentTemplateConfigVisionChat {
	s.VadLevel = &v
	return s
}

func (s *AIAgentTemplateConfigVisionChat) SetVoiceId(v string) *AIAgentTemplateConfigVisionChat {
	s.VoiceId = &v
	return s
}

func (s *AIAgentTemplateConfigVisionChat) SetVoiceIdList(v []*string) *AIAgentTemplateConfigVisionChat {
	s.VoiceIdList = v
	return s
}

func (s *AIAgentTemplateConfigVisionChat) SetVoiceprintId(v string) *AIAgentTemplateConfigVisionChat {
	s.VoiceprintId = &v
	return s
}

func (s *AIAgentTemplateConfigVisionChat) SetVolume(v int64) *AIAgentTemplateConfigVisionChat {
	s.Volume = &v
	return s
}

func (s *AIAgentTemplateConfigVisionChat) SetWakeUpQuery(v string) *AIAgentTemplateConfigVisionChat {
	s.WakeUpQuery = &v
	return s
}

func (s *AIAgentTemplateConfigVisionChat) SetWorkflowOverrideParams(v string) *AIAgentTemplateConfigVisionChat {
	s.WorkflowOverrideParams = &v
	return s
}

type AIAgentTemplateConfigVisionChatLlmHistory struct {
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	Role    *string `json:"Role,omitempty" xml:"Role,omitempty"`
}

func (s AIAgentTemplateConfigVisionChatLlmHistory) String() string {
	return tea.Prettify(s)
}

func (s AIAgentTemplateConfigVisionChatLlmHistory) GoString() string {
	return s.String()
}

func (s *AIAgentTemplateConfigVisionChatLlmHistory) SetContent(v string) *AIAgentTemplateConfigVisionChatLlmHistory {
	s.Content = &v
	return s
}

func (s *AIAgentTemplateConfigVisionChatLlmHistory) SetRole(v string) *AIAgentTemplateConfigVisionChatLlmHistory {
	s.Role = &v
	return s
}

type AIAgentTemplateConfigVoiceChat struct {
	AsrHotWords              []*string                                   `json:"AsrHotWords,omitempty" xml:"AsrHotWords,omitempty" type:"Repeated"`
	AsrLanguageId            *string                                     `json:"AsrLanguageId,omitempty" xml:"AsrLanguageId,omitempty"`
	AsrMaxSilence            *int32                                      `json:"AsrMaxSilence,omitempty" xml:"AsrMaxSilence,omitempty"`
	AvatarUrl                *string                                     `json:"AvatarUrl,omitempty" xml:"AvatarUrl,omitempty"`
	AvatarUrlType            *string                                     `json:"AvatarUrlType,omitempty" xml:"AvatarUrlType,omitempty"`
	BailianAppParams         *string                                     `json:"BailianAppParams,omitempty" xml:"BailianAppParams,omitempty"`
	CharBreak                *bool                                       `json:"CharBreak,omitempty" xml:"CharBreak,omitempty"`
	EnableIntelligentSegment *bool                                       `json:"EnableIntelligentSegment,omitempty" xml:"EnableIntelligentSegment,omitempty"`
	EnablePushToTalk         *bool                                       `json:"EnablePushToTalk,omitempty" xml:"EnablePushToTalk,omitempty"`
	EnableVoiceInterrupt     *bool                                       `json:"EnableVoiceInterrupt,omitempty" xml:"EnableVoiceInterrupt,omitempty"`
	GracefulShutdown         *bool                                       `json:"GracefulShutdown,omitempty" xml:"GracefulShutdown,omitempty"`
	Greeting                 *string                                     `json:"Greeting,omitempty" xml:"Greeting,omitempty"`
	InterruptWords           []*string                                   `json:"InterruptWords,omitempty" xml:"InterruptWords,omitempty" type:"Repeated"`
	LlmHistory               []*AIAgentTemplateConfigVoiceChatLlmHistory `json:"LlmHistory,omitempty" xml:"LlmHistory,omitempty" type:"Repeated"`
	LlmHistoryLimit          *int32                                      `json:"LlmHistoryLimit,omitempty" xml:"LlmHistoryLimit,omitempty"`
	LlmSystemPrompt          *string                                     `json:"LlmSystemPrompt,omitempty" xml:"LlmSystemPrompt,omitempty"`
	MaxIdleTime              *int32                                      `json:"MaxIdleTime,omitempty" xml:"MaxIdleTime,omitempty"`
	UseVoiceprint            *bool                                       `json:"UseVoiceprint,omitempty" xml:"UseVoiceprint,omitempty"`
	UserOfflineTimeout       *int32                                      `json:"UserOfflineTimeout,omitempty" xml:"UserOfflineTimeout,omitempty"`
	UserOnlineTimeout        *int32                                      `json:"UserOnlineTimeout,omitempty" xml:"UserOnlineTimeout,omitempty"`
	VadLevel                 *int32                                      `json:"VadLevel,omitempty" xml:"VadLevel,omitempty"`
	VoiceId                  *string                                     `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
	VoiceIdList              []*string                                   `json:"VoiceIdList,omitempty" xml:"VoiceIdList,omitempty" type:"Repeated"`
	VoiceprintId             *string                                     `json:"VoiceprintId,omitempty" xml:"VoiceprintId,omitempty"`
	Volume                   *int64                                      `json:"Volume,omitempty" xml:"Volume,omitempty"`
	WakeUpQuery              *string                                     `json:"WakeUpQuery,omitempty" xml:"WakeUpQuery,omitempty"`
	WorkflowOverrideParams   *string                                     `json:"WorkflowOverrideParams,omitempty" xml:"WorkflowOverrideParams,omitempty"`
}

func (s AIAgentTemplateConfigVoiceChat) String() string {
	return tea.Prettify(s)
}

func (s AIAgentTemplateConfigVoiceChat) GoString() string {
	return s.String()
}

func (s *AIAgentTemplateConfigVoiceChat) SetAsrHotWords(v []*string) *AIAgentTemplateConfigVoiceChat {
	s.AsrHotWords = v
	return s
}

func (s *AIAgentTemplateConfigVoiceChat) SetAsrLanguageId(v string) *AIAgentTemplateConfigVoiceChat {
	s.AsrLanguageId = &v
	return s
}

func (s *AIAgentTemplateConfigVoiceChat) SetAsrMaxSilence(v int32) *AIAgentTemplateConfigVoiceChat {
	s.AsrMaxSilence = &v
	return s
}

func (s *AIAgentTemplateConfigVoiceChat) SetAvatarUrl(v string) *AIAgentTemplateConfigVoiceChat {
	s.AvatarUrl = &v
	return s
}

func (s *AIAgentTemplateConfigVoiceChat) SetAvatarUrlType(v string) *AIAgentTemplateConfigVoiceChat {
	s.AvatarUrlType = &v
	return s
}

func (s *AIAgentTemplateConfigVoiceChat) SetBailianAppParams(v string) *AIAgentTemplateConfigVoiceChat {
	s.BailianAppParams = &v
	return s
}

func (s *AIAgentTemplateConfigVoiceChat) SetCharBreak(v bool) *AIAgentTemplateConfigVoiceChat {
	s.CharBreak = &v
	return s
}

func (s *AIAgentTemplateConfigVoiceChat) SetEnableIntelligentSegment(v bool) *AIAgentTemplateConfigVoiceChat {
	s.EnableIntelligentSegment = &v
	return s
}

func (s *AIAgentTemplateConfigVoiceChat) SetEnablePushToTalk(v bool) *AIAgentTemplateConfigVoiceChat {
	s.EnablePushToTalk = &v
	return s
}

func (s *AIAgentTemplateConfigVoiceChat) SetEnableVoiceInterrupt(v bool) *AIAgentTemplateConfigVoiceChat {
	s.EnableVoiceInterrupt = &v
	return s
}

func (s *AIAgentTemplateConfigVoiceChat) SetGracefulShutdown(v bool) *AIAgentTemplateConfigVoiceChat {
	s.GracefulShutdown = &v
	return s
}

func (s *AIAgentTemplateConfigVoiceChat) SetGreeting(v string) *AIAgentTemplateConfigVoiceChat {
	s.Greeting = &v
	return s
}

func (s *AIAgentTemplateConfigVoiceChat) SetInterruptWords(v []*string) *AIAgentTemplateConfigVoiceChat {
	s.InterruptWords = v
	return s
}

func (s *AIAgentTemplateConfigVoiceChat) SetLlmHistory(v []*AIAgentTemplateConfigVoiceChatLlmHistory) *AIAgentTemplateConfigVoiceChat {
	s.LlmHistory = v
	return s
}

func (s *AIAgentTemplateConfigVoiceChat) SetLlmHistoryLimit(v int32) *AIAgentTemplateConfigVoiceChat {
	s.LlmHistoryLimit = &v
	return s
}

func (s *AIAgentTemplateConfigVoiceChat) SetLlmSystemPrompt(v string) *AIAgentTemplateConfigVoiceChat {
	s.LlmSystemPrompt = &v
	return s
}

func (s *AIAgentTemplateConfigVoiceChat) SetMaxIdleTime(v int32) *AIAgentTemplateConfigVoiceChat {
	s.MaxIdleTime = &v
	return s
}

func (s *AIAgentTemplateConfigVoiceChat) SetUseVoiceprint(v bool) *AIAgentTemplateConfigVoiceChat {
	s.UseVoiceprint = &v
	return s
}

func (s *AIAgentTemplateConfigVoiceChat) SetUserOfflineTimeout(v int32) *AIAgentTemplateConfigVoiceChat {
	s.UserOfflineTimeout = &v
	return s
}

func (s *AIAgentTemplateConfigVoiceChat) SetUserOnlineTimeout(v int32) *AIAgentTemplateConfigVoiceChat {
	s.UserOnlineTimeout = &v
	return s
}

func (s *AIAgentTemplateConfigVoiceChat) SetVadLevel(v int32) *AIAgentTemplateConfigVoiceChat {
	s.VadLevel = &v
	return s
}

func (s *AIAgentTemplateConfigVoiceChat) SetVoiceId(v string) *AIAgentTemplateConfigVoiceChat {
	s.VoiceId = &v
	return s
}

func (s *AIAgentTemplateConfigVoiceChat) SetVoiceIdList(v []*string) *AIAgentTemplateConfigVoiceChat {
	s.VoiceIdList = v
	return s
}

func (s *AIAgentTemplateConfigVoiceChat) SetVoiceprintId(v string) *AIAgentTemplateConfigVoiceChat {
	s.VoiceprintId = &v
	return s
}

func (s *AIAgentTemplateConfigVoiceChat) SetVolume(v int64) *AIAgentTemplateConfigVoiceChat {
	s.Volume = &v
	return s
}

func (s *AIAgentTemplateConfigVoiceChat) SetWakeUpQuery(v string) *AIAgentTemplateConfigVoiceChat {
	s.WakeUpQuery = &v
	return s
}

func (s *AIAgentTemplateConfigVoiceChat) SetWorkflowOverrideParams(v string) *AIAgentTemplateConfigVoiceChat {
	s.WorkflowOverrideParams = &v
	return s
}

type AIAgentTemplateConfigVoiceChatLlmHistory struct {
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	Role    *string `json:"Role,omitempty" xml:"Role,omitempty"`
}

func (s AIAgentTemplateConfigVoiceChatLlmHistory) String() string {
	return tea.Prettify(s)
}

func (s AIAgentTemplateConfigVoiceChatLlmHistory) GoString() string {
	return s.String()
}

func (s *AIAgentTemplateConfigVoiceChatLlmHistory) SetContent(v string) *AIAgentTemplateConfigVoiceChatLlmHistory {
	s.Content = &v
	return s
}

func (s *AIAgentTemplateConfigVoiceChatLlmHistory) SetRole(v string) *AIAgentTemplateConfigVoiceChatLlmHistory {
	s.Role = &v
	return s
}

type AppInfoDTO struct {
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// example:
	//
	// 1-普通应用，2-内嵌SDK.
	AppType   *int32                 `json:"AppType,omitempty" xml:"AppType,omitempty"`
	GmtCreate *string                `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	ItemId    *string                `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
	Platforms []*AppInfoDTOPlatforms `json:"Platforms,omitempty" xml:"Platforms,omitempty" type:"Repeated"`
	UserId    *int64                 `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s AppInfoDTO) String() string {
	return tea.Prettify(s)
}

func (s AppInfoDTO) GoString() string {
	return s.String()
}

func (s *AppInfoDTO) SetAppName(v string) *AppInfoDTO {
	s.AppName = &v
	return s
}

func (s *AppInfoDTO) SetAppType(v int32) *AppInfoDTO {
	s.AppType = &v
	return s
}

func (s *AppInfoDTO) SetGmtCreate(v string) *AppInfoDTO {
	s.GmtCreate = &v
	return s
}

func (s *AppInfoDTO) SetItemId(v string) *AppInfoDTO {
	s.ItemId = &v
	return s
}

func (s *AppInfoDTO) SetPlatforms(v []*AppInfoDTOPlatforms) *AppInfoDTO {
	s.Platforms = v
	return s
}

func (s *AppInfoDTO) SetUserId(v int64) *AppInfoDTO {
	s.UserId = &v
	return s
}

type AppInfoDTOPlatforms struct {
	ItemId         *string   `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
	LicenseItemIds []*string `json:"LicenseItemIds,omitempty" xml:"LicenseItemIds,omitempty" type:"Repeated"`
	PkgName        *string   `json:"PkgName,omitempty" xml:"PkgName,omitempty"`
	PkgSignature   *string   `json:"PkgSignature,omitempty" xml:"PkgSignature,omitempty"`
	PlatformType   *int64    `json:"PlatformType,omitempty" xml:"PlatformType,omitempty"`
	Type           *int64    `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AppInfoDTOPlatforms) String() string {
	return tea.Prettify(s)
}

func (s AppInfoDTOPlatforms) GoString() string {
	return s.String()
}

func (s *AppInfoDTOPlatforms) SetItemId(v string) *AppInfoDTOPlatforms {
	s.ItemId = &v
	return s
}

func (s *AppInfoDTOPlatforms) SetLicenseItemIds(v []*string) *AppInfoDTOPlatforms {
	s.LicenseItemIds = v
	return s
}

func (s *AppInfoDTOPlatforms) SetPkgName(v string) *AppInfoDTOPlatforms {
	s.PkgName = &v
	return s
}

func (s *AppInfoDTOPlatforms) SetPkgSignature(v string) *AppInfoDTOPlatforms {
	s.PkgSignature = &v
	return s
}

func (s *AppInfoDTOPlatforms) SetPlatformType(v int64) *AppInfoDTOPlatforms {
	s.PlatformType = &v
	return s
}

func (s *AppInfoDTOPlatforms) SetType(v int64) *AppInfoDTOPlatforms {
	s.Type = &v
	return s
}

type Channel struct {
	AccessPolicy             *bool                      `json:"AccessPolicy,omitempty" xml:"AccessPolicy,omitempty"`
	AccessToken              *string                    `json:"AccessToken,omitempty" xml:"AccessToken,omitempty"`
	Arn                      *string                    `json:"Arn,omitempty" xml:"Arn,omitempty"`
	ChannelName              *string                    `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	ChannelTier              *string                    `json:"ChannelTier,omitempty" xml:"ChannelTier,omitempty"`
	FillerSourceLocationName *string                    `json:"FillerSourceLocationName,omitempty" xml:"FillerSourceLocationName,omitempty"`
	FillerSourceName         *string                    `json:"FillerSourceName,omitempty" xml:"FillerSourceName,omitempty"`
	GmtCreate                *string                    `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified              *string                    `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	OutPutConfigList         []*ChannelOutPutConfigList `json:"OutPutConfigList,omitempty" xml:"OutPutConfigList,omitempty" type:"Repeated"`
	PlaybackMode             *string                    `json:"PlaybackMode,omitempty" xml:"PlaybackMode,omitempty"`
	State                    *int32                     `json:"State,omitempty" xml:"State,omitempty"`
}

func (s Channel) String() string {
	return tea.Prettify(s)
}

func (s Channel) GoString() string {
	return s.String()
}

func (s *Channel) SetAccessPolicy(v bool) *Channel {
	s.AccessPolicy = &v
	return s
}

func (s *Channel) SetAccessToken(v string) *Channel {
	s.AccessToken = &v
	return s
}

func (s *Channel) SetArn(v string) *Channel {
	s.Arn = &v
	return s
}

func (s *Channel) SetChannelName(v string) *Channel {
	s.ChannelName = &v
	return s
}

func (s *Channel) SetChannelTier(v string) *Channel {
	s.ChannelTier = &v
	return s
}

func (s *Channel) SetFillerSourceLocationName(v string) *Channel {
	s.FillerSourceLocationName = &v
	return s
}

func (s *Channel) SetFillerSourceName(v string) *Channel {
	s.FillerSourceName = &v
	return s
}

func (s *Channel) SetGmtCreate(v string) *Channel {
	s.GmtCreate = &v
	return s
}

func (s *Channel) SetGmtModified(v string) *Channel {
	s.GmtModified = &v
	return s
}

func (s *Channel) SetOutPutConfigList(v []*ChannelOutPutConfigList) *Channel {
	s.OutPutConfigList = v
	return s
}

func (s *Channel) SetPlaybackMode(v string) *Channel {
	s.PlaybackMode = &v
	return s
}

func (s *Channel) SetState(v int32) *Channel {
	s.State = &v
	return s
}

type ChannelOutPutConfigList struct {
	ChannelName      *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	Format           *string `json:"Format,omitempty" xml:"Format,omitempty"`
	ManifestName     *string `json:"ManifestName,omitempty" xml:"ManifestName,omitempty"`
	ManifestSettings *string `json:"ManifestSettings,omitempty" xml:"ManifestSettings,omitempty"`
	PlaybackUrl      *string `json:"PlaybackUrl,omitempty" xml:"PlaybackUrl,omitempty"`
	SourceGroupName  *string `json:"SourceGroupName,omitempty" xml:"SourceGroupName,omitempty"`
}

func (s ChannelOutPutConfigList) String() string {
	return tea.Prettify(s)
}

func (s ChannelOutPutConfigList) GoString() string {
	return s.String()
}

func (s *ChannelOutPutConfigList) SetChannelName(v string) *ChannelOutPutConfigList {
	s.ChannelName = &v
	return s
}

func (s *ChannelOutPutConfigList) SetFormat(v string) *ChannelOutPutConfigList {
	s.Format = &v
	return s
}

func (s *ChannelOutPutConfigList) SetManifestName(v string) *ChannelOutPutConfigList {
	s.ManifestName = &v
	return s
}

func (s *ChannelOutPutConfigList) SetManifestSettings(v string) *ChannelOutPutConfigList {
	s.ManifestSettings = &v
	return s
}

func (s *ChannelOutPutConfigList) SetPlaybackUrl(v string) *ChannelOutPutConfigList {
	s.PlaybackUrl = &v
	return s
}

func (s *ChannelOutPutConfigList) SetSourceGroupName(v string) *ChannelOutPutConfigList {
	s.SourceGroupName = &v
	return s
}

type ChannelAssemblyChannel struct {
	AccessPolicy             *bool                                     `json:"AccessPolicy,omitempty" xml:"AccessPolicy,omitempty"`
	AccessToken              *string                                   `json:"AccessToken,omitempty" xml:"AccessToken,omitempty"`
	Arn                      *string                                   `json:"Arn,omitempty" xml:"Arn,omitempty"`
	ChannelName              *string                                   `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	ChannelTier              *string                                   `json:"ChannelTier,omitempty" xml:"ChannelTier,omitempty"`
	FillerSourceLocationName *string                                   `json:"FillerSourceLocationName,omitempty" xml:"FillerSourceLocationName,omitempty"`
	FillerSourceName         *string                                   `json:"FillerSourceName,omitempty" xml:"FillerSourceName,omitempty"`
	GmtCreate                *string                                   `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified              *string                                   `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	OutPutConfigList         []*ChannelAssemblyChannelOutPutConfigList `json:"OutPutConfigList,omitempty" xml:"OutPutConfigList,omitempty" type:"Repeated"`
	PlaybackMode             *string                                   `json:"PlaybackMode,omitempty" xml:"PlaybackMode,omitempty"`
	State                    *int32                                    `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ChannelAssemblyChannel) String() string {
	return tea.Prettify(s)
}

func (s ChannelAssemblyChannel) GoString() string {
	return s.String()
}

func (s *ChannelAssemblyChannel) SetAccessPolicy(v bool) *ChannelAssemblyChannel {
	s.AccessPolicy = &v
	return s
}

func (s *ChannelAssemblyChannel) SetAccessToken(v string) *ChannelAssemblyChannel {
	s.AccessToken = &v
	return s
}

func (s *ChannelAssemblyChannel) SetArn(v string) *ChannelAssemblyChannel {
	s.Arn = &v
	return s
}

func (s *ChannelAssemblyChannel) SetChannelName(v string) *ChannelAssemblyChannel {
	s.ChannelName = &v
	return s
}

func (s *ChannelAssemblyChannel) SetChannelTier(v string) *ChannelAssemblyChannel {
	s.ChannelTier = &v
	return s
}

func (s *ChannelAssemblyChannel) SetFillerSourceLocationName(v string) *ChannelAssemblyChannel {
	s.FillerSourceLocationName = &v
	return s
}

func (s *ChannelAssemblyChannel) SetFillerSourceName(v string) *ChannelAssemblyChannel {
	s.FillerSourceName = &v
	return s
}

func (s *ChannelAssemblyChannel) SetGmtCreate(v string) *ChannelAssemblyChannel {
	s.GmtCreate = &v
	return s
}

func (s *ChannelAssemblyChannel) SetGmtModified(v string) *ChannelAssemblyChannel {
	s.GmtModified = &v
	return s
}

func (s *ChannelAssemblyChannel) SetOutPutConfigList(v []*ChannelAssemblyChannelOutPutConfigList) *ChannelAssemblyChannel {
	s.OutPutConfigList = v
	return s
}

func (s *ChannelAssemblyChannel) SetPlaybackMode(v string) *ChannelAssemblyChannel {
	s.PlaybackMode = &v
	return s
}

func (s *ChannelAssemblyChannel) SetState(v int32) *ChannelAssemblyChannel {
	s.State = &v
	return s
}

type ChannelAssemblyChannelOutPutConfigList struct {
	ChannelName      *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	Format           *string `json:"Format,omitempty" xml:"Format,omitempty"`
	ManifestName     *string `json:"ManifestName,omitempty" xml:"ManifestName,omitempty"`
	ManifestSettings *string `json:"ManifestSettings,omitempty" xml:"ManifestSettings,omitempty"`
	PlaybackUrl      *string `json:"PlaybackUrl,omitempty" xml:"PlaybackUrl,omitempty"`
	SourceGroupName  *string `json:"SourceGroupName,omitempty" xml:"SourceGroupName,omitempty"`
}

func (s ChannelAssemblyChannelOutPutConfigList) String() string {
	return tea.Prettify(s)
}

func (s ChannelAssemblyChannelOutPutConfigList) GoString() string {
	return s.String()
}

func (s *ChannelAssemblyChannelOutPutConfigList) SetChannelName(v string) *ChannelAssemblyChannelOutPutConfigList {
	s.ChannelName = &v
	return s
}

func (s *ChannelAssemblyChannelOutPutConfigList) SetFormat(v string) *ChannelAssemblyChannelOutPutConfigList {
	s.Format = &v
	return s
}

func (s *ChannelAssemblyChannelOutPutConfigList) SetManifestName(v string) *ChannelAssemblyChannelOutPutConfigList {
	s.ManifestName = &v
	return s
}

func (s *ChannelAssemblyChannelOutPutConfigList) SetManifestSettings(v string) *ChannelAssemblyChannelOutPutConfigList {
	s.ManifestSettings = &v
	return s
}

func (s *ChannelAssemblyChannelOutPutConfigList) SetPlaybackUrl(v string) *ChannelAssemblyChannelOutPutConfigList {
	s.PlaybackUrl = &v
	return s
}

func (s *ChannelAssemblyChannelOutPutConfigList) SetSourceGroupName(v string) *ChannelAssemblyChannelOutPutConfigList {
	s.SourceGroupName = &v
	return s
}

type ChannelAssemblyProgram struct {
	AdBreaks           []*ChannelAssemblyProgramAdBreaks `json:"AdBreaks,omitempty" xml:"AdBreaks,omitempty" type:"Repeated"`
	Arn                *string                           `json:"Arn,omitempty" xml:"Arn,omitempty"`
	ChannelName        *string                           `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	ClipRange          *string                           `json:"ClipRange,omitempty" xml:"ClipRange,omitempty"`
	GmtCreate          *string                           `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified        *string                           `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	ProgramName        *string                           `json:"ProgramName,omitempty" xml:"ProgramName,omitempty"`
	SourceLocationName *string                           `json:"SourceLocationName,omitempty" xml:"SourceLocationName,omitempty"`
	SourceName         *string                           `json:"SourceName,omitempty" xml:"SourceName,omitempty"`
	SourceType         *string                           `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	Transition         *string                           `json:"Transition,omitempty" xml:"Transition,omitempty"`
}

func (s ChannelAssemblyProgram) String() string {
	return tea.Prettify(s)
}

func (s ChannelAssemblyProgram) GoString() string {
	return s.String()
}

func (s *ChannelAssemblyProgram) SetAdBreaks(v []*ChannelAssemblyProgramAdBreaks) *ChannelAssemblyProgram {
	s.AdBreaks = v
	return s
}

func (s *ChannelAssemblyProgram) SetArn(v string) *ChannelAssemblyProgram {
	s.Arn = &v
	return s
}

func (s *ChannelAssemblyProgram) SetChannelName(v string) *ChannelAssemblyProgram {
	s.ChannelName = &v
	return s
}

func (s *ChannelAssemblyProgram) SetClipRange(v string) *ChannelAssemblyProgram {
	s.ClipRange = &v
	return s
}

func (s *ChannelAssemblyProgram) SetGmtCreate(v string) *ChannelAssemblyProgram {
	s.GmtCreate = &v
	return s
}

func (s *ChannelAssemblyProgram) SetGmtModified(v string) *ChannelAssemblyProgram {
	s.GmtModified = &v
	return s
}

func (s *ChannelAssemblyProgram) SetProgramName(v string) *ChannelAssemblyProgram {
	s.ProgramName = &v
	return s
}

func (s *ChannelAssemblyProgram) SetSourceLocationName(v string) *ChannelAssemblyProgram {
	s.SourceLocationName = &v
	return s
}

func (s *ChannelAssemblyProgram) SetSourceName(v string) *ChannelAssemblyProgram {
	s.SourceName = &v
	return s
}

func (s *ChannelAssemblyProgram) SetSourceType(v string) *ChannelAssemblyProgram {
	s.SourceType = &v
	return s
}

func (s *ChannelAssemblyProgram) SetTransition(v string) *ChannelAssemblyProgram {
	s.Transition = &v
	return s
}

type ChannelAssemblyProgramAdBreaks struct {
	ChannelName          *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	MessageType          *string `json:"MessageType,omitempty" xml:"MessageType,omitempty"`
	OffsetMillis         *int64  `json:"OffsetMillis,omitempty" xml:"OffsetMillis,omitempty"`
	ProgramName          *string `json:"ProgramName,omitempty" xml:"ProgramName,omitempty"`
	SourceLocationName   *string `json:"SourceLocationName,omitempty" xml:"SourceLocationName,omitempty"`
	SourceName           *string `json:"SourceName,omitempty" xml:"SourceName,omitempty"`
	SpliceInsertSettings *string `json:"SpliceInsertSettings,omitempty" xml:"SpliceInsertSettings,omitempty"`
	TimeSignalSettings   *string `json:"TimeSignalSettings,omitempty" xml:"TimeSignalSettings,omitempty"`
}

func (s ChannelAssemblyProgramAdBreaks) String() string {
	return tea.Prettify(s)
}

func (s ChannelAssemblyProgramAdBreaks) GoString() string {
	return s.String()
}

func (s *ChannelAssemblyProgramAdBreaks) SetChannelName(v string) *ChannelAssemblyProgramAdBreaks {
	s.ChannelName = &v
	return s
}

func (s *ChannelAssemblyProgramAdBreaks) SetMessageType(v string) *ChannelAssemblyProgramAdBreaks {
	s.MessageType = &v
	return s
}

func (s *ChannelAssemblyProgramAdBreaks) SetOffsetMillis(v int64) *ChannelAssemblyProgramAdBreaks {
	s.OffsetMillis = &v
	return s
}

func (s *ChannelAssemblyProgramAdBreaks) SetProgramName(v string) *ChannelAssemblyProgramAdBreaks {
	s.ProgramName = &v
	return s
}

func (s *ChannelAssemblyProgramAdBreaks) SetSourceLocationName(v string) *ChannelAssemblyProgramAdBreaks {
	s.SourceLocationName = &v
	return s
}

func (s *ChannelAssemblyProgramAdBreaks) SetSourceName(v string) *ChannelAssemblyProgramAdBreaks {
	s.SourceName = &v
	return s
}

func (s *ChannelAssemblyProgramAdBreaks) SetSpliceInsertSettings(v string) *ChannelAssemblyProgramAdBreaks {
	s.SpliceInsertSettings = &v
	return s
}

func (s *ChannelAssemblyProgramAdBreaks) SetTimeSignalSettings(v string) *ChannelAssemblyProgramAdBreaks {
	s.TimeSignalSettings = &v
	return s
}

type ChannelAssemblyScheduleData struct {
	AdBreaks                   []*ChannelAssemblyScheduleDataAdBreaks `json:"AdBreaks,omitempty" xml:"AdBreaks,omitempty" type:"Repeated"`
	ApproximateDurationSeconds *int64                                 `json:"ApproximateDurationSeconds,omitempty" xml:"ApproximateDurationSeconds,omitempty"`
	ApproximateStartTime       *string                                `json:"ApproximateStartTime,omitempty" xml:"ApproximateStartTime,omitempty"`
	EntryType                  *string                                `json:"EntryType,omitempty" xml:"EntryType,omitempty"`
	ProgramName                *string                                `json:"ProgramName,omitempty" xml:"ProgramName,omitempty"`
	SourceLocationName         *string                                `json:"SourceLocationName,omitempty" xml:"SourceLocationName,omitempty"`
	SourceName                 *string                                `json:"SourceName,omitempty" xml:"SourceName,omitempty"`
	SourceType                 *string                                `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
}

func (s ChannelAssemblyScheduleData) String() string {
	return tea.Prettify(s)
}

func (s ChannelAssemblyScheduleData) GoString() string {
	return s.String()
}

func (s *ChannelAssemblyScheduleData) SetAdBreaks(v []*ChannelAssemblyScheduleDataAdBreaks) *ChannelAssemblyScheduleData {
	s.AdBreaks = v
	return s
}

func (s *ChannelAssemblyScheduleData) SetApproximateDurationSeconds(v int64) *ChannelAssemblyScheduleData {
	s.ApproximateDurationSeconds = &v
	return s
}

func (s *ChannelAssemblyScheduleData) SetApproximateStartTime(v string) *ChannelAssemblyScheduleData {
	s.ApproximateStartTime = &v
	return s
}

func (s *ChannelAssemblyScheduleData) SetEntryType(v string) *ChannelAssemblyScheduleData {
	s.EntryType = &v
	return s
}

func (s *ChannelAssemblyScheduleData) SetProgramName(v string) *ChannelAssemblyScheduleData {
	s.ProgramName = &v
	return s
}

func (s *ChannelAssemblyScheduleData) SetSourceLocationName(v string) *ChannelAssemblyScheduleData {
	s.SourceLocationName = &v
	return s
}

func (s *ChannelAssemblyScheduleData) SetSourceName(v string) *ChannelAssemblyScheduleData {
	s.SourceName = &v
	return s
}

func (s *ChannelAssemblyScheduleData) SetSourceType(v string) *ChannelAssemblyScheduleData {
	s.SourceType = &v
	return s
}

type ChannelAssemblyScheduleDataAdBreaks struct {
	MessageType          *string `json:"MessageType,omitempty" xml:"MessageType,omitempty"`
	OffsetMillis         *string `json:"OffsetMillis,omitempty" xml:"OffsetMillis,omitempty"`
	SourceLocationName   *string `json:"SourceLocationName,omitempty" xml:"SourceLocationName,omitempty"`
	SourceName           *string `json:"SourceName,omitempty" xml:"SourceName,omitempty"`
	SpliceInsertSettings *string `json:"SpliceInsertSettings,omitempty" xml:"SpliceInsertSettings,omitempty"`
	TimeSignalSettings   *string `json:"TimeSignalSettings,omitempty" xml:"TimeSignalSettings,omitempty"`
}

func (s ChannelAssemblyScheduleDataAdBreaks) String() string {
	return tea.Prettify(s)
}

func (s ChannelAssemblyScheduleDataAdBreaks) GoString() string {
	return s.String()
}

func (s *ChannelAssemblyScheduleDataAdBreaks) SetMessageType(v string) *ChannelAssemblyScheduleDataAdBreaks {
	s.MessageType = &v
	return s
}

func (s *ChannelAssemblyScheduleDataAdBreaks) SetOffsetMillis(v string) *ChannelAssemblyScheduleDataAdBreaks {
	s.OffsetMillis = &v
	return s
}

func (s *ChannelAssemblyScheduleDataAdBreaks) SetSourceLocationName(v string) *ChannelAssemblyScheduleDataAdBreaks {
	s.SourceLocationName = &v
	return s
}

func (s *ChannelAssemblyScheduleDataAdBreaks) SetSourceName(v string) *ChannelAssemblyScheduleDataAdBreaks {
	s.SourceName = &v
	return s
}

func (s *ChannelAssemblyScheduleDataAdBreaks) SetSpliceInsertSettings(v string) *ChannelAssemblyScheduleDataAdBreaks {
	s.SpliceInsertSettings = &v
	return s
}

func (s *ChannelAssemblyScheduleDataAdBreaks) SetTimeSignalSettings(v string) *ChannelAssemblyScheduleDataAdBreaks {
	s.TimeSignalSettings = &v
	return s
}

type ChannelAssemblySource struct {
	Arn                       *string `json:"Arn,omitempty" xml:"Arn,omitempty"`
	GmtCreate                 *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified               *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	HttpPackageConfigurations *string `json:"HttpPackageConfigurations,omitempty" xml:"HttpPackageConfigurations,omitempty"`
	SourceLocationName        *string `json:"SourceLocationName,omitempty" xml:"SourceLocationName,omitempty"`
	SourceName                *string `json:"SourceName,omitempty" xml:"SourceName,omitempty"`
	SourceType                *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	State                     *int32  `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ChannelAssemblySource) String() string {
	return tea.Prettify(s)
}

func (s ChannelAssemblySource) GoString() string {
	return s.String()
}

func (s *ChannelAssemblySource) SetArn(v string) *ChannelAssemblySource {
	s.Arn = &v
	return s
}

func (s *ChannelAssemblySource) SetGmtCreate(v string) *ChannelAssemblySource {
	s.GmtCreate = &v
	return s
}

func (s *ChannelAssemblySource) SetGmtModified(v string) *ChannelAssemblySource {
	s.GmtModified = &v
	return s
}

func (s *ChannelAssemblySource) SetHttpPackageConfigurations(v string) *ChannelAssemblySource {
	s.HttpPackageConfigurations = &v
	return s
}

func (s *ChannelAssemblySource) SetSourceLocationName(v string) *ChannelAssemblySource {
	s.SourceLocationName = &v
	return s
}

func (s *ChannelAssemblySource) SetSourceName(v string) *ChannelAssemblySource {
	s.SourceName = &v
	return s
}

func (s *ChannelAssemblySource) SetSourceType(v string) *ChannelAssemblySource {
	s.SourceType = &v
	return s
}

func (s *ChannelAssemblySource) SetState(v int32) *ChannelAssemblySource {
	s.State = &v
	return s
}

type ChannelAssemblySourceLocation struct {
	Arn                           *string `json:"Arn,omitempty" xml:"Arn,omitempty"`
	BaseUrl                       *string `json:"BaseUrl,omitempty" xml:"BaseUrl,omitempty"`
	GmtCreate                     *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified                   *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	SegmentDeliveryConfigurations *string `json:"SegmentDeliveryConfigurations,omitempty" xml:"SegmentDeliveryConfigurations,omitempty"`
	SourceLocationName            *string `json:"SourceLocationName,omitempty" xml:"SourceLocationName,omitempty"`
	State                         *int32  `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ChannelAssemblySourceLocation) String() string {
	return tea.Prettify(s)
}

func (s ChannelAssemblySourceLocation) GoString() string {
	return s.String()
}

func (s *ChannelAssemblySourceLocation) SetArn(v string) *ChannelAssemblySourceLocation {
	s.Arn = &v
	return s
}

func (s *ChannelAssemblySourceLocation) SetBaseUrl(v string) *ChannelAssemblySourceLocation {
	s.BaseUrl = &v
	return s
}

func (s *ChannelAssemblySourceLocation) SetGmtCreate(v string) *ChannelAssemblySourceLocation {
	s.GmtCreate = &v
	return s
}

func (s *ChannelAssemblySourceLocation) SetGmtModified(v string) *ChannelAssemblySourceLocation {
	s.GmtModified = &v
	return s
}

func (s *ChannelAssemblySourceLocation) SetSegmentDeliveryConfigurations(v string) *ChannelAssemblySourceLocation {
	s.SegmentDeliveryConfigurations = &v
	return s
}

func (s *ChannelAssemblySourceLocation) SetSourceLocationName(v string) *ChannelAssemblySourceLocation {
	s.SourceLocationName = &v
	return s
}

func (s *ChannelAssemblySourceLocation) SetState(v int32) *ChannelAssemblySourceLocation {
	s.State = &v
	return s
}

type Hotword struct {
	// example:
	//
	// en
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// hello
	Text                    *string                `json:"Text,omitempty" xml:"Text,omitempty"`
	TranspositionResultList []*TranspositionResult `json:"TranspositionResultList,omitempty" xml:"TranspositionResultList,omitempty" type:"Repeated"`
	Weight                  *int32                 `json:"Weight,omitempty" xml:"Weight,omitempty"`
}

func (s Hotword) String() string {
	return tea.Prettify(s)
}

func (s Hotword) GoString() string {
	return s.String()
}

func (s *Hotword) SetLanguage(v string) *Hotword {
	s.Language = &v
	return s
}

func (s *Hotword) SetText(v string) *Hotword {
	s.Text = &v
	return s
}

func (s *Hotword) SetTranspositionResultList(v []*TranspositionResult) *Hotword {
	s.TranspositionResultList = v
	return s
}

func (s *Hotword) SetWeight(v int32) *Hotword {
	s.Weight = &v
	return s
}

type LicenseInstanceAppDTO struct {
	AppId            *string                                `json:"AppId,omitempty" xml:"AppId,omitempty"`
	BeginOn          *string                                `json:"BeginOn,omitempty" xml:"BeginOn,omitempty"`
	ContractNo       *string                                `json:"ContractNo,omitempty" xml:"ContractNo,omitempty"`
	CreationTime     *string                                `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	ExpiredOn        *string                                `json:"ExpiredOn,omitempty" xml:"ExpiredOn,omitempty"`
	InstanceId       *string                                `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ItemId           *string                                `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
	LicenseConfigs   []*LicenseInstanceAppDTOLicenseConfigs `json:"LicenseConfigs,omitempty" xml:"LicenseConfigs,omitempty" type:"Repeated"`
	ModificationTime *string                                `json:"ModificationTime,omitempty" xml:"ModificationTime,omitempty"`
	Status           *string                                `json:"Status,omitempty" xml:"Status,omitempty"`
	UserId           *int64                                 `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s LicenseInstanceAppDTO) String() string {
	return tea.Prettify(s)
}

func (s LicenseInstanceAppDTO) GoString() string {
	return s.String()
}

func (s *LicenseInstanceAppDTO) SetAppId(v string) *LicenseInstanceAppDTO {
	s.AppId = &v
	return s
}

func (s *LicenseInstanceAppDTO) SetBeginOn(v string) *LicenseInstanceAppDTO {
	s.BeginOn = &v
	return s
}

func (s *LicenseInstanceAppDTO) SetContractNo(v string) *LicenseInstanceAppDTO {
	s.ContractNo = &v
	return s
}

func (s *LicenseInstanceAppDTO) SetCreationTime(v string) *LicenseInstanceAppDTO {
	s.CreationTime = &v
	return s
}

func (s *LicenseInstanceAppDTO) SetExpiredOn(v string) *LicenseInstanceAppDTO {
	s.ExpiredOn = &v
	return s
}

func (s *LicenseInstanceAppDTO) SetInstanceId(v string) *LicenseInstanceAppDTO {
	s.InstanceId = &v
	return s
}

func (s *LicenseInstanceAppDTO) SetItemId(v string) *LicenseInstanceAppDTO {
	s.ItemId = &v
	return s
}

func (s *LicenseInstanceAppDTO) SetLicenseConfigs(v []*LicenseInstanceAppDTOLicenseConfigs) *LicenseInstanceAppDTO {
	s.LicenseConfigs = v
	return s
}

func (s *LicenseInstanceAppDTO) SetModificationTime(v string) *LicenseInstanceAppDTO {
	s.ModificationTime = &v
	return s
}

func (s *LicenseInstanceAppDTO) SetStatus(v string) *LicenseInstanceAppDTO {
	s.Status = &v
	return s
}

func (s *LicenseInstanceAppDTO) SetUserId(v int64) *LicenseInstanceAppDTO {
	s.UserId = &v
	return s
}

type LicenseInstanceAppDTOLicenseConfigs struct {
	BusinessType    *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	FeatureIds      *string `json:"FeatureIds,omitempty" xml:"FeatureIds,omitempty"`
	IsTrial         *bool   `json:"IsTrial,omitempty" xml:"IsTrial,omitempty"`
	SdkId           *int32  `json:"SdkId,omitempty" xml:"SdkId,omitempty"`
	SdkName         *string `json:"SdkName,omitempty" xml:"SdkName,omitempty"`
	Subscription    *string `json:"Subscription,omitempty" xml:"Subscription,omitempty"`
	SubscriptionImp *string `json:"SubscriptionImp,omitempty" xml:"SubscriptionImp,omitempty"`
	SubscriptionPkg *string `json:"SubscriptionPkg,omitempty" xml:"SubscriptionPkg,omitempty"`
}

func (s LicenseInstanceAppDTOLicenseConfigs) String() string {
	return tea.Prettify(s)
}

func (s LicenseInstanceAppDTOLicenseConfigs) GoString() string {
	return s.String()
}

func (s *LicenseInstanceAppDTOLicenseConfigs) SetBusinessType(v string) *LicenseInstanceAppDTOLicenseConfigs {
	s.BusinessType = &v
	return s
}

func (s *LicenseInstanceAppDTOLicenseConfigs) SetFeatureIds(v string) *LicenseInstanceAppDTOLicenseConfigs {
	s.FeatureIds = &v
	return s
}

func (s *LicenseInstanceAppDTOLicenseConfigs) SetIsTrial(v bool) *LicenseInstanceAppDTOLicenseConfigs {
	s.IsTrial = &v
	return s
}

func (s *LicenseInstanceAppDTOLicenseConfigs) SetSdkId(v int32) *LicenseInstanceAppDTOLicenseConfigs {
	s.SdkId = &v
	return s
}

func (s *LicenseInstanceAppDTOLicenseConfigs) SetSdkName(v string) *LicenseInstanceAppDTOLicenseConfigs {
	s.SdkName = &v
	return s
}

func (s *LicenseInstanceAppDTOLicenseConfigs) SetSubscription(v string) *LicenseInstanceAppDTOLicenseConfigs {
	s.Subscription = &v
	return s
}

func (s *LicenseInstanceAppDTOLicenseConfigs) SetSubscriptionImp(v string) *LicenseInstanceAppDTOLicenseConfigs {
	s.SubscriptionImp = &v
	return s
}

func (s *LicenseInstanceAppDTOLicenseConfigs) SetSubscriptionPkg(v string) *LicenseInstanceAppDTOLicenseConfigs {
	s.SubscriptionPkg = &v
	return s
}

type LiveManifestConfig struct {
	AdMarkers             *string `json:"AdMarkers,omitempty" xml:"AdMarkers,omitempty"`
	DateTimeInterval      *int32  `json:"DateTimeInterval,omitempty" xml:"DateTimeInterval,omitempty"`
	ManifestDuration      *int32  `json:"ManifestDuration,omitempty" xml:"ManifestDuration,omitempty"`
	MaxVideoBitrate       *int32  `json:"MaxVideoBitrate,omitempty" xml:"MaxVideoBitrate,omitempty"`
	MinBufferTime         *int32  `json:"MinBufferTime,omitempty" xml:"MinBufferTime,omitempty"`
	MinUpdatePeriod       *int32  `json:"MinUpdatePeriod,omitempty" xml:"MinUpdatePeriod,omitempty"`
	MinVideoBitrate       *int32  `json:"MinVideoBitrate,omitempty" xml:"MinVideoBitrate,omitempty"`
	PresentationDelay     *int32  `json:"PresentationDelay,omitempty" xml:"PresentationDelay,omitempty"`
	SegmentCount          *int32  `json:"SegmentCount,omitempty" xml:"SegmentCount,omitempty"`
	SegmentTemplateFormat *string `json:"SegmentTemplateFormat,omitempty" xml:"SegmentTemplateFormat,omitempty"`
	StreamOrder           *string `json:"StreamOrder,omitempty" xml:"StreamOrder,omitempty"`
}

func (s LiveManifestConfig) String() string {
	return tea.Prettify(s)
}

func (s LiveManifestConfig) GoString() string {
	return s.String()
}

func (s *LiveManifestConfig) SetAdMarkers(v string) *LiveManifestConfig {
	s.AdMarkers = &v
	return s
}

func (s *LiveManifestConfig) SetDateTimeInterval(v int32) *LiveManifestConfig {
	s.DateTimeInterval = &v
	return s
}

func (s *LiveManifestConfig) SetManifestDuration(v int32) *LiveManifestConfig {
	s.ManifestDuration = &v
	return s
}

func (s *LiveManifestConfig) SetMaxVideoBitrate(v int32) *LiveManifestConfig {
	s.MaxVideoBitrate = &v
	return s
}

func (s *LiveManifestConfig) SetMinBufferTime(v int32) *LiveManifestConfig {
	s.MinBufferTime = &v
	return s
}

func (s *LiveManifestConfig) SetMinUpdatePeriod(v int32) *LiveManifestConfig {
	s.MinUpdatePeriod = &v
	return s
}

func (s *LiveManifestConfig) SetMinVideoBitrate(v int32) *LiveManifestConfig {
	s.MinVideoBitrate = &v
	return s
}

func (s *LiveManifestConfig) SetPresentationDelay(v int32) *LiveManifestConfig {
	s.PresentationDelay = &v
	return s
}

func (s *LiveManifestConfig) SetSegmentCount(v int32) *LiveManifestConfig {
	s.SegmentCount = &v
	return s
}

func (s *LiveManifestConfig) SetSegmentTemplateFormat(v string) *LiveManifestConfig {
	s.SegmentTemplateFormat = &v
	return s
}

func (s *LiveManifestConfig) SetStreamOrder(v string) *LiveManifestConfig {
	s.StreamOrder = &v
	return s
}

type LivePackagingConfig struct {
	DrmConfig               *LivePackagingConfigDrmConfig `json:"DrmConfig,omitempty" xml:"DrmConfig,omitempty" type:"Struct"`
	LiveManifestConfigs     []*LiveManifestConfig         `json:"LiveManifestConfigs,omitempty" xml:"LiveManifestConfigs,omitempty" type:"Repeated"`
	SegmentDuration         *int32                        `json:"SegmentDuration,omitempty" xml:"SegmentDuration,omitempty"`
	UseAudioRenditionGroups *bool                         `json:"UseAudioRenditionGroups,omitempty" xml:"UseAudioRenditionGroups,omitempty"`
}

func (s LivePackagingConfig) String() string {
	return tea.Prettify(s)
}

func (s LivePackagingConfig) GoString() string {
	return s.String()
}

func (s *LivePackagingConfig) SetDrmConfig(v *LivePackagingConfigDrmConfig) *LivePackagingConfig {
	s.DrmConfig = v
	return s
}

func (s *LivePackagingConfig) SetLiveManifestConfigs(v []*LiveManifestConfig) *LivePackagingConfig {
	s.LiveManifestConfigs = v
	return s
}

func (s *LivePackagingConfig) SetSegmentDuration(v int32) *LivePackagingConfig {
	s.SegmentDuration = &v
	return s
}

func (s *LivePackagingConfig) SetUseAudioRenditionGroups(v bool) *LivePackagingConfig {
	s.UseAudioRenditionGroups = &v
	return s
}

type LivePackagingConfigDrmConfig struct {
	ContentId        *string   `json:"ContentId,omitempty" xml:"ContentId,omitempty"`
	EncryptionMethod *string   `json:"EncryptionMethod,omitempty" xml:"EncryptionMethod,omitempty"`
	IV               *string   `json:"IV,omitempty" xml:"IV,omitempty"`
	RotatePeriod     *int32    `json:"RotatePeriod,omitempty" xml:"RotatePeriod,omitempty"`
	SystemIds        []*string `json:"SystemIds,omitempty" xml:"SystemIds,omitempty" type:"Repeated"`
	Url              *string   `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s LivePackagingConfigDrmConfig) String() string {
	return tea.Prettify(s)
}

func (s LivePackagingConfigDrmConfig) GoString() string {
	return s.String()
}

func (s *LivePackagingConfigDrmConfig) SetContentId(v string) *LivePackagingConfigDrmConfig {
	s.ContentId = &v
	return s
}

func (s *LivePackagingConfigDrmConfig) SetEncryptionMethod(v string) *LivePackagingConfigDrmConfig {
	s.EncryptionMethod = &v
	return s
}

func (s *LivePackagingConfigDrmConfig) SetIV(v string) *LivePackagingConfigDrmConfig {
	s.IV = &v
	return s
}

func (s *LivePackagingConfigDrmConfig) SetRotatePeriod(v int32) *LivePackagingConfigDrmConfig {
	s.RotatePeriod = &v
	return s
}

func (s *LivePackagingConfigDrmConfig) SetSystemIds(v []*string) *LivePackagingConfigDrmConfig {
	s.SystemIds = v
	return s
}

func (s *LivePackagingConfigDrmConfig) SetUrl(v string) *LivePackagingConfigDrmConfig {
	s.Url = &v
	return s
}

type MediaConvertAudio struct {
	Bitrate    *int64  `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Channels   *int64  `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Codec      *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Profile    *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Remove     *bool   `json:"Remove,omitempty" xml:"Remove,omitempty"`
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
}

func (s MediaConvertAudio) String() string {
	return tea.Prettify(s)
}

func (s MediaConvertAudio) GoString() string {
	return s.String()
}

func (s *MediaConvertAudio) SetBitrate(v int64) *MediaConvertAudio {
	s.Bitrate = &v
	return s
}

func (s *MediaConvertAudio) SetChannels(v int64) *MediaConvertAudio {
	s.Channels = &v
	return s
}

func (s *MediaConvertAudio) SetCodec(v string) *MediaConvertAudio {
	s.Codec = &v
	return s
}

func (s *MediaConvertAudio) SetProfile(v string) *MediaConvertAudio {
	s.Profile = &v
	return s
}

func (s *MediaConvertAudio) SetRemove(v bool) *MediaConvertAudio {
	s.Remove = &v
	return s
}

func (s *MediaConvertAudio) SetSamplerate(v string) *MediaConvertAudio {
	s.Samplerate = &v
	return s
}

type MediaConvertInput struct {
	InputFile *MediaObject `json:"InputFile,omitempty" xml:"InputFile,omitempty"`
	Name      *string      `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s MediaConvertInput) String() string {
	return tea.Prettify(s)
}

func (s MediaConvertInput) GoString() string {
	return s.String()
}

func (s *MediaConvertInput) SetInputFile(v *MediaObject) *MediaConvertInput {
	s.InputFile = v
	return s
}

func (s *MediaConvertInput) SetName(v string) *MediaConvertInput {
	s.Name = &v
	return s
}

type MediaConvertJob struct {
	ClientToken        *string                          `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Code               *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Config             *MediaConvertJobConfig           `json:"Config,omitempty" xml:"Config,omitempty" type:"Struct"`
	CreateTime         *string                          `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	FinishTime         *string                          `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	JobId              *string                          `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Message            *string                          `json:"Message,omitempty" xml:"Message,omitempty"`
	OutputDetails      []*MediaConvertOutputDetail      `json:"OutputDetails,omitempty" xml:"OutputDetails,omitempty" type:"Repeated"`
	OutputGroupDetails []*MediaConvertOutputGroupDetail `json:"OutputGroupDetails,omitempty" xml:"OutputGroupDetails,omitempty" type:"Repeated"`
	Percent            *int32                           `json:"Percent,omitempty" xml:"Percent,omitempty"`
	PipelineId         *string                          `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	RequestId          *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	State              *string                          `json:"State,omitempty" xml:"State,omitempty"`
	UserData           *string                          `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s MediaConvertJob) String() string {
	return tea.Prettify(s)
}

func (s MediaConvertJob) GoString() string {
	return s.String()
}

func (s *MediaConvertJob) SetClientToken(v string) *MediaConvertJob {
	s.ClientToken = &v
	return s
}

func (s *MediaConvertJob) SetCode(v string) *MediaConvertJob {
	s.Code = &v
	return s
}

func (s *MediaConvertJob) SetConfig(v *MediaConvertJobConfig) *MediaConvertJob {
	s.Config = v
	return s
}

func (s *MediaConvertJob) SetCreateTime(v string) *MediaConvertJob {
	s.CreateTime = &v
	return s
}

func (s *MediaConvertJob) SetFinishTime(v string) *MediaConvertJob {
	s.FinishTime = &v
	return s
}

func (s *MediaConvertJob) SetJobId(v string) *MediaConvertJob {
	s.JobId = &v
	return s
}

func (s *MediaConvertJob) SetMessage(v string) *MediaConvertJob {
	s.Message = &v
	return s
}

func (s *MediaConvertJob) SetOutputDetails(v []*MediaConvertOutputDetail) *MediaConvertJob {
	s.OutputDetails = v
	return s
}

func (s *MediaConvertJob) SetOutputGroupDetails(v []*MediaConvertOutputGroupDetail) *MediaConvertJob {
	s.OutputGroupDetails = v
	return s
}

func (s *MediaConvertJob) SetPercent(v int32) *MediaConvertJob {
	s.Percent = &v
	return s
}

func (s *MediaConvertJob) SetPipelineId(v string) *MediaConvertJob {
	s.PipelineId = &v
	return s
}

func (s *MediaConvertJob) SetRequestId(v string) *MediaConvertJob {
	s.RequestId = &v
	return s
}

func (s *MediaConvertJob) SetState(v string) *MediaConvertJob {
	s.State = &v
	return s
}

func (s *MediaConvertJob) SetUserData(v string) *MediaConvertJob {
	s.UserData = &v
	return s
}

type MediaConvertJobConfig struct {
	Inputs       []*MediaConvertInput       `json:"Inputs,omitempty" xml:"Inputs,omitempty" type:"Repeated"`
	JobName      *string                    `json:"JobName,omitempty" xml:"JobName,omitempty"`
	OutputGroups []*MediaConvertOutputGroup `json:"OutputGroups,omitempty" xml:"OutputGroups,omitempty" type:"Repeated"`
	Outputs      []*MediaConvertOutput      `json:"Outputs,omitempty" xml:"Outputs,omitempty" type:"Repeated"`
}

func (s MediaConvertJobConfig) String() string {
	return tea.Prettify(s)
}

func (s MediaConvertJobConfig) GoString() string {
	return s.String()
}

func (s *MediaConvertJobConfig) SetInputs(v []*MediaConvertInput) *MediaConvertJobConfig {
	s.Inputs = v
	return s
}

func (s *MediaConvertJobConfig) SetJobName(v string) *MediaConvertJobConfig {
	s.JobName = &v
	return s
}

func (s *MediaConvertJobConfig) SetOutputGroups(v []*MediaConvertOutputGroup) *MediaConvertJobConfig {
	s.OutputGroups = v
	return s
}

func (s *MediaConvertJobConfig) SetOutputs(v []*MediaConvertOutput) *MediaConvertJobConfig {
	s.Outputs = v
	return s
}

type MediaConvertJobWithoutDetail struct {
	ClientToken *string                             `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Code        *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Config      *MediaConvertJobWithoutDetailConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Struct"`
	CreateTime  *string                             `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	FinishTime  *string                             `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	JobId       *string                             `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Message     *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	PipelineId  *string                             `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	RequestId   *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	State       *string                             `json:"State,omitempty" xml:"State,omitempty"`
	UserData    *string                             `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s MediaConvertJobWithoutDetail) String() string {
	return tea.Prettify(s)
}

func (s MediaConvertJobWithoutDetail) GoString() string {
	return s.String()
}

func (s *MediaConvertJobWithoutDetail) SetClientToken(v string) *MediaConvertJobWithoutDetail {
	s.ClientToken = &v
	return s
}

func (s *MediaConvertJobWithoutDetail) SetCode(v string) *MediaConvertJobWithoutDetail {
	s.Code = &v
	return s
}

func (s *MediaConvertJobWithoutDetail) SetConfig(v *MediaConvertJobWithoutDetailConfig) *MediaConvertJobWithoutDetail {
	s.Config = v
	return s
}

func (s *MediaConvertJobWithoutDetail) SetCreateTime(v string) *MediaConvertJobWithoutDetail {
	s.CreateTime = &v
	return s
}

func (s *MediaConvertJobWithoutDetail) SetFinishTime(v string) *MediaConvertJobWithoutDetail {
	s.FinishTime = &v
	return s
}

func (s *MediaConvertJobWithoutDetail) SetJobId(v string) *MediaConvertJobWithoutDetail {
	s.JobId = &v
	return s
}

func (s *MediaConvertJobWithoutDetail) SetMessage(v string) *MediaConvertJobWithoutDetail {
	s.Message = &v
	return s
}

func (s *MediaConvertJobWithoutDetail) SetPipelineId(v string) *MediaConvertJobWithoutDetail {
	s.PipelineId = &v
	return s
}

func (s *MediaConvertJobWithoutDetail) SetRequestId(v string) *MediaConvertJobWithoutDetail {
	s.RequestId = &v
	return s
}

func (s *MediaConvertJobWithoutDetail) SetState(v string) *MediaConvertJobWithoutDetail {
	s.State = &v
	return s
}

func (s *MediaConvertJobWithoutDetail) SetUserData(v string) *MediaConvertJobWithoutDetail {
	s.UserData = &v
	return s
}

type MediaConvertJobWithoutDetailConfig struct {
	Inputs       []*MediaConvertInput       `json:"Inputs,omitempty" xml:"Inputs,omitempty" type:"Repeated"`
	JobName      *string                    `json:"JobName,omitempty" xml:"JobName,omitempty"`
	OutputGroups []*MediaConvertOutputGroup `json:"OutputGroups,omitempty" xml:"OutputGroups,omitempty" type:"Repeated"`
	Outputs      []*MediaConvertOutput      `json:"Outputs,omitempty" xml:"Outputs,omitempty" type:"Repeated"`
}

func (s MediaConvertJobWithoutDetailConfig) String() string {
	return tea.Prettify(s)
}

func (s MediaConvertJobWithoutDetailConfig) GoString() string {
	return s.String()
}

func (s *MediaConvertJobWithoutDetailConfig) SetInputs(v []*MediaConvertInput) *MediaConvertJobWithoutDetailConfig {
	s.Inputs = v
	return s
}

func (s *MediaConvertJobWithoutDetailConfig) SetJobName(v string) *MediaConvertJobWithoutDetailConfig {
	s.JobName = &v
	return s
}

func (s *MediaConvertJobWithoutDetailConfig) SetOutputGroups(v []*MediaConvertOutputGroup) *MediaConvertJobWithoutDetailConfig {
	s.OutputGroups = v
	return s
}

func (s *MediaConvertJobWithoutDetailConfig) SetOutputs(v []*MediaConvertOutput) *MediaConvertJobWithoutDetailConfig {
	s.Outputs = v
	return s
}

type MediaConvertMuxConfig struct {
	Segment *MediaConvertSegment `json:"Segment,omitempty" xml:"Segment,omitempty"`
}

func (s MediaConvertMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s MediaConvertMuxConfig) GoString() string {
	return s.String()
}

func (s *MediaConvertMuxConfig) SetSegment(v *MediaConvertSegment) *MediaConvertMuxConfig {
	s.Segment = v
	return s
}

type MediaConvertOutput struct {
	Features       *string      `json:"Features,omitempty" xml:"Features,omitempty"`
	Name           *string      `json:"Name,omitempty" xml:"Name,omitempty"`
	OutputFile     *MediaObject `json:"OutputFile,omitempty" xml:"OutputFile,omitempty"`
	OverrideParams *string      `json:"OverrideParams,omitempty" xml:"OverrideParams,omitempty"`
	Priority       *int32       `json:"Priority,omitempty" xml:"Priority,omitempty"`
	TemplateId     *string      `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s MediaConvertOutput) String() string {
	return tea.Prettify(s)
}

func (s MediaConvertOutput) GoString() string {
	return s.String()
}

func (s *MediaConvertOutput) SetFeatures(v string) *MediaConvertOutput {
	s.Features = &v
	return s
}

func (s *MediaConvertOutput) SetName(v string) *MediaConvertOutput {
	s.Name = &v
	return s
}

func (s *MediaConvertOutput) SetOutputFile(v *MediaObject) *MediaConvertOutput {
	s.OutputFile = v
	return s
}

func (s *MediaConvertOutput) SetOverrideParams(v string) *MediaConvertOutput {
	s.OverrideParams = &v
	return s
}

func (s *MediaConvertOutput) SetPriority(v int32) *MediaConvertOutput {
	s.Priority = &v
	return s
}

func (s *MediaConvertOutput) SetTemplateId(v string) *MediaConvertOutput {
	s.TemplateId = &v
	return s
}

type MediaConvertOutputDetail struct {
	Code       *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	CreateTime *string                         `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	FinishTime *string                         `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Message    *string                         `json:"Message,omitempty" xml:"Message,omitempty"`
	Name       *string                         `json:"Name,omitempty" xml:"Name,omitempty"`
	Result     *MediaConvertOutputDetailResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Status     *string                         `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId     *string                         `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s MediaConvertOutputDetail) String() string {
	return tea.Prettify(s)
}

func (s MediaConvertOutputDetail) GoString() string {
	return s.String()
}

func (s *MediaConvertOutputDetail) SetCode(v string) *MediaConvertOutputDetail {
	s.Code = &v
	return s
}

func (s *MediaConvertOutputDetail) SetCreateTime(v string) *MediaConvertOutputDetail {
	s.CreateTime = &v
	return s
}

func (s *MediaConvertOutputDetail) SetFinishTime(v string) *MediaConvertOutputDetail {
	s.FinishTime = &v
	return s
}

func (s *MediaConvertOutputDetail) SetMessage(v string) *MediaConvertOutputDetail {
	s.Message = &v
	return s
}

func (s *MediaConvertOutputDetail) SetName(v string) *MediaConvertOutputDetail {
	s.Name = &v
	return s
}

func (s *MediaConvertOutputDetail) SetResult(v *MediaConvertOutputDetailResult) *MediaConvertOutputDetail {
	s.Result = v
	return s
}

func (s *MediaConvertOutputDetail) SetStatus(v string) *MediaConvertOutputDetail {
	s.Status = &v
	return s
}

func (s *MediaConvertOutputDetail) SetTaskId(v string) *MediaConvertOutputDetail {
	s.TaskId = &v
	return s
}

type MediaConvertOutputDetailResult struct {
	OutFileMeta *MediaConvertOutputDetailFileMeta         `json:"OutFileMeta,omitempty" xml:"OutFileMeta,omitempty"`
	OutputFile  *MediaConvertOutputDetailResultOutputFile `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
}

func (s MediaConvertOutputDetailResult) String() string {
	return tea.Prettify(s)
}

func (s MediaConvertOutputDetailResult) GoString() string {
	return s.String()
}

func (s *MediaConvertOutputDetailResult) SetOutFileMeta(v *MediaConvertOutputDetailFileMeta) *MediaConvertOutputDetailResult {
	s.OutFileMeta = v
	return s
}

func (s *MediaConvertOutputDetailResult) SetOutputFile(v *MediaConvertOutputDetailResultOutputFile) *MediaConvertOutputDetailResult {
	s.OutputFile = v
	return s
}

type MediaConvertOutputDetailResultOutputFile struct {
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	Type  *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Url   *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s MediaConvertOutputDetailResultOutputFile) String() string {
	return tea.Prettify(s)
}

func (s MediaConvertOutputDetailResultOutputFile) GoString() string {
	return s.String()
}

func (s *MediaConvertOutputDetailResultOutputFile) SetMedia(v string) *MediaConvertOutputDetailResultOutputFile {
	s.Media = &v
	return s
}

func (s *MediaConvertOutputDetailResultOutputFile) SetType(v string) *MediaConvertOutputDetailResultOutputFile {
	s.Type = &v
	return s
}

func (s *MediaConvertOutputDetailResultOutputFile) SetUrl(v string) *MediaConvertOutputDetailResultOutputFile {
	s.Url = &v
	return s
}

type MediaConvertOutputDetailFileMeta struct {
	AudioStreamInfoList []*MediaConvertOutputDetailFileMetaAudioStreamInfoList `json:"AudioStreamInfoList,omitempty" xml:"AudioStreamInfoList,omitempty" type:"Repeated"`
	FileBasicInfo       *MediaConvertOutputDetailFileMetaFileBasicInfo         `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
	VideoStreamInfoList []*MediaConvertOutputDetailFileMetaVideoStreamInfoList `json:"VideoStreamInfoList,omitempty" xml:"VideoStreamInfoList,omitempty" type:"Repeated"`
}

func (s MediaConvertOutputDetailFileMeta) String() string {
	return tea.Prettify(s)
}

func (s MediaConvertOutputDetailFileMeta) GoString() string {
	return s.String()
}

func (s *MediaConvertOutputDetailFileMeta) SetAudioStreamInfoList(v []*MediaConvertOutputDetailFileMetaAudioStreamInfoList) *MediaConvertOutputDetailFileMeta {
	s.AudioStreamInfoList = v
	return s
}

func (s *MediaConvertOutputDetailFileMeta) SetFileBasicInfo(v *MediaConvertOutputDetailFileMetaFileBasicInfo) *MediaConvertOutputDetailFileMeta {
	s.FileBasicInfo = v
	return s
}

func (s *MediaConvertOutputDetailFileMeta) SetVideoStreamInfoList(v []*MediaConvertOutputDetailFileMetaVideoStreamInfoList) *MediaConvertOutputDetailFileMeta {
	s.VideoStreamInfoList = v
	return s
}

type MediaConvertOutputDetailFileMetaAudioStreamInfoList struct {
	// example:
	//
	// 0.f
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// stereo
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// example:
	//
	// AAC (Advanced Audio Coding)
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// example:
	//
	// aac
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// example:
	//
	// 0x000f
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// example:
	//
	// [15][0][0][0]
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// example:
	//
	// 1/44100
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// example:
	//
	// 403.039989
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 1
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// cn
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// example:
	//
	// fltp
	SampleFmt *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	// example:
	//
	// 44100
	SampleRate *string `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
	// example:
	//
	// 1.473556
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 1/90000
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s MediaConvertOutputDetailFileMetaAudioStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s MediaConvertOutputDetailFileMetaAudioStreamInfoList) GoString() string {
	return s.String()
}

func (s *MediaConvertOutputDetailFileMetaAudioStreamInfoList) SetBitrate(v string) *MediaConvertOutputDetailFileMetaAudioStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaAudioStreamInfoList) SetChannelLayout(v string) *MediaConvertOutputDetailFileMetaAudioStreamInfoList {
	s.ChannelLayout = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaAudioStreamInfoList) SetChannels(v string) *MediaConvertOutputDetailFileMetaAudioStreamInfoList {
	s.Channels = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaAudioStreamInfoList) SetCodecLongName(v string) *MediaConvertOutputDetailFileMetaAudioStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaAudioStreamInfoList) SetCodecName(v string) *MediaConvertOutputDetailFileMetaAudioStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaAudioStreamInfoList) SetCodecTag(v string) *MediaConvertOutputDetailFileMetaAudioStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaAudioStreamInfoList) SetCodecTagString(v string) *MediaConvertOutputDetailFileMetaAudioStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaAudioStreamInfoList) SetCodecTimeBase(v string) *MediaConvertOutputDetailFileMetaAudioStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaAudioStreamInfoList) SetDuration(v string) *MediaConvertOutputDetailFileMetaAudioStreamInfoList {
	s.Duration = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaAudioStreamInfoList) SetIndex(v string) *MediaConvertOutputDetailFileMetaAudioStreamInfoList {
	s.Index = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaAudioStreamInfoList) SetLang(v string) *MediaConvertOutputDetailFileMetaAudioStreamInfoList {
	s.Lang = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaAudioStreamInfoList) SetSampleFmt(v string) *MediaConvertOutputDetailFileMetaAudioStreamInfoList {
	s.SampleFmt = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaAudioStreamInfoList) SetSampleRate(v string) *MediaConvertOutputDetailFileMetaAudioStreamInfoList {
	s.SampleRate = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaAudioStreamInfoList) SetStartTime(v string) *MediaConvertOutputDetailFileMetaAudioStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaAudioStreamInfoList) SetTimebase(v string) *MediaConvertOutputDetailFileMetaAudioStreamInfoList {
	s.Timebase = &v
	return s
}

type MediaConvertOutputDetailFileMetaFileBasicInfo struct {
	// example:
	//
	// 888.563
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 403.039999
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// file.m3u8
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// 31737
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// example:
	//
	// http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// hls,applehttp
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// example:
	//
	// 478
	Height  *string `json:"Height,omitempty" xml:"Height,omitempty"`
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// 848
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s MediaConvertOutputDetailFileMetaFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s MediaConvertOutputDetailFileMetaFileBasicInfo) GoString() string {
	return s.String()
}

func (s *MediaConvertOutputDetailFileMetaFileBasicInfo) SetBitrate(v string) *MediaConvertOutputDetailFileMetaFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaFileBasicInfo) SetDuration(v string) *MediaConvertOutputDetailFileMetaFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaFileBasicInfo) SetFileName(v string) *MediaConvertOutputDetailFileMetaFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaFileBasicInfo) SetFileSize(v string) *MediaConvertOutputDetailFileMetaFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaFileBasicInfo) SetFileStatus(v string) *MediaConvertOutputDetailFileMetaFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaFileBasicInfo) SetFileType(v string) *MediaConvertOutputDetailFileMetaFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaFileBasicInfo) SetFileUrl(v string) *MediaConvertOutputDetailFileMetaFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaFileBasicInfo) SetFormatName(v string) *MediaConvertOutputDetailFileMetaFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaFileBasicInfo) SetHeight(v string) *MediaConvertOutputDetailFileMetaFileBasicInfo {
	s.Height = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaFileBasicInfo) SetMediaId(v string) *MediaConvertOutputDetailFileMetaFileBasicInfo {
	s.MediaId = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaFileBasicInfo) SetRegion(v string) *MediaConvertOutputDetailFileMetaFileBasicInfo {
	s.Region = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaFileBasicInfo) SetWidth(v string) *MediaConvertOutputDetailFileMetaFileBasicInfo {
	s.Width = &v
	return s
}

type MediaConvertOutputDetailFileMetaVideoStreamInfoList struct {
	// example:
	//
	// 25.0
	AvgFps *string `json:"Avg_fps,omitempty" xml:"Avg_fps,omitempty"`
	// example:
	//
	// 888.563
	BitRate *string `json:"Bit_rate,omitempty" xml:"Bit_rate,omitempty"`
	// example:
	//
	// H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10
	CodecLongName *string `json:"Codec_long_name,omitempty" xml:"Codec_long_name,omitempty"`
	// example:
	//
	// h264
	CodecName *string `json:"Codec_name,omitempty" xml:"Codec_name,omitempty"`
	// example:
	//
	// 0x001b
	CodecTag *string `json:"Codec_tag,omitempty" xml:"Codec_tag,omitempty"`
	// example:
	//
	// [27][0][0][0]
	CodecTagString *string `json:"Codec_tag_string,omitempty" xml:"Codec_tag_string,omitempty"`
	CodecTimeBase  *string `json:"Codec_time_base,omitempty" xml:"Codec_time_base,omitempty"`
	// example:
	//
	// 16:9
	Dar *string `json:"Dar,omitempty" xml:"Dar,omitempty"`
	// example:
	//
	// 403.039989
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 25.0
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 2
	HasBFrames *string `json:"Has_b_frames,omitempty" xml:"Has_b_frames,omitempty"`
	// example:
	//
	// 478
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 0
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// cn
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// example:
	//
	// 31
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// example:
	//
	// 10040
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// example:
	//
	// High
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// 0
	Rotate *string `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	// example:
	//
	// 478:477
	Sar *string `json:"Sar,omitempty" xml:"Sar,omitempty"`
	// example:
	//
	// 1.473556
	StartTime *string `json:"Start_time,omitempty" xml:"Start_time,omitempty"`
	// example:
	//
	// 1/90000
	TimeBase *string `json:"Time_base,omitempty" xml:"Time_base,omitempty"`
	// example:
	//
	// 848
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s MediaConvertOutputDetailFileMetaVideoStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s MediaConvertOutputDetailFileMetaVideoStreamInfoList) GoString() string {
	return s.String()
}

func (s *MediaConvertOutputDetailFileMetaVideoStreamInfoList) SetAvgFps(v string) *MediaConvertOutputDetailFileMetaVideoStreamInfoList {
	s.AvgFps = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaVideoStreamInfoList) SetBitRate(v string) *MediaConvertOutputDetailFileMetaVideoStreamInfoList {
	s.BitRate = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaVideoStreamInfoList) SetCodecLongName(v string) *MediaConvertOutputDetailFileMetaVideoStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaVideoStreamInfoList) SetCodecName(v string) *MediaConvertOutputDetailFileMetaVideoStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaVideoStreamInfoList) SetCodecTag(v string) *MediaConvertOutputDetailFileMetaVideoStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaVideoStreamInfoList) SetCodecTagString(v string) *MediaConvertOutputDetailFileMetaVideoStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaVideoStreamInfoList) SetCodecTimeBase(v string) *MediaConvertOutputDetailFileMetaVideoStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaVideoStreamInfoList) SetDar(v string) *MediaConvertOutputDetailFileMetaVideoStreamInfoList {
	s.Dar = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaVideoStreamInfoList) SetDuration(v string) *MediaConvertOutputDetailFileMetaVideoStreamInfoList {
	s.Duration = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaVideoStreamInfoList) SetFps(v string) *MediaConvertOutputDetailFileMetaVideoStreamInfoList {
	s.Fps = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaVideoStreamInfoList) SetHasBFrames(v string) *MediaConvertOutputDetailFileMetaVideoStreamInfoList {
	s.HasBFrames = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaVideoStreamInfoList) SetHeight(v string) *MediaConvertOutputDetailFileMetaVideoStreamInfoList {
	s.Height = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaVideoStreamInfoList) SetIndex(v string) *MediaConvertOutputDetailFileMetaVideoStreamInfoList {
	s.Index = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaVideoStreamInfoList) SetLang(v string) *MediaConvertOutputDetailFileMetaVideoStreamInfoList {
	s.Lang = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaVideoStreamInfoList) SetLevel(v string) *MediaConvertOutputDetailFileMetaVideoStreamInfoList {
	s.Level = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaVideoStreamInfoList) SetNumFrames(v string) *MediaConvertOutputDetailFileMetaVideoStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaVideoStreamInfoList) SetPixFmt(v string) *MediaConvertOutputDetailFileMetaVideoStreamInfoList {
	s.PixFmt = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaVideoStreamInfoList) SetProfile(v string) *MediaConvertOutputDetailFileMetaVideoStreamInfoList {
	s.Profile = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaVideoStreamInfoList) SetRotate(v string) *MediaConvertOutputDetailFileMetaVideoStreamInfoList {
	s.Rotate = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaVideoStreamInfoList) SetSar(v string) *MediaConvertOutputDetailFileMetaVideoStreamInfoList {
	s.Sar = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaVideoStreamInfoList) SetStartTime(v string) *MediaConvertOutputDetailFileMetaVideoStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaVideoStreamInfoList) SetTimeBase(v string) *MediaConvertOutputDetailFileMetaVideoStreamInfoList {
	s.TimeBase = &v
	return s
}

func (s *MediaConvertOutputDetailFileMetaVideoStreamInfoList) SetWidth(v string) *MediaConvertOutputDetailFileMetaVideoStreamInfoList {
	s.Width = &v
	return s
}

type MediaConvertOutputGroup struct {
	GroupConfig *MediaConvertOutputGroupConfig   `json:"GroupConfig,omitempty" xml:"GroupConfig,omitempty"`
	Name        *string                          `json:"Name,omitempty" xml:"Name,omitempty"`
	Outputs     []*MediaConvertOutputGroupOutput `json:"Outputs,omitempty" xml:"Outputs,omitempty" type:"Repeated"`
}

func (s MediaConvertOutputGroup) String() string {
	return tea.Prettify(s)
}

func (s MediaConvertOutputGroup) GoString() string {
	return s.String()
}

func (s *MediaConvertOutputGroup) SetGroupConfig(v *MediaConvertOutputGroupConfig) *MediaConvertOutputGroup {
	s.GroupConfig = v
	return s
}

func (s *MediaConvertOutputGroup) SetName(v string) *MediaConvertOutputGroup {
	s.Name = &v
	return s
}

func (s *MediaConvertOutputGroup) SetOutputs(v []*MediaConvertOutputGroupOutput) *MediaConvertOutputGroup {
	s.Outputs = v
	return s
}

type MediaConvertOutputGroupConfig struct {
	ManifestName   *string      `json:"ManifestName,omitempty" xml:"ManifestName,omitempty"`
	OutputFileBase *MediaObject `json:"OutputFileBase,omitempty" xml:"OutputFileBase,omitempty"`
	Type           *string      `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s MediaConvertOutputGroupConfig) String() string {
	return tea.Prettify(s)
}

func (s MediaConvertOutputGroupConfig) GoString() string {
	return s.String()
}

func (s *MediaConvertOutputGroupConfig) SetManifestName(v string) *MediaConvertOutputGroupConfig {
	s.ManifestName = &v
	return s
}

func (s *MediaConvertOutputGroupConfig) SetOutputFileBase(v *MediaObject) *MediaConvertOutputGroupConfig {
	s.OutputFileBase = v
	return s
}

func (s *MediaConvertOutputGroupConfig) SetType(v string) *MediaConvertOutputGroupConfig {
	s.Type = &v
	return s
}

type MediaConvertOutputGroupDetail struct {
	Code       *string                     `json:"Code,omitempty" xml:"Code,omitempty"`
	CreateTime *string                     `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	FinishTime *string                     `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Message    *string                     `json:"Message,omitempty" xml:"Message,omitempty"`
	Name       *string                     `json:"Name,omitempty" xml:"Name,omitempty"`
	Outputs    []*MediaConvertOutputDetail `json:"Outputs,omitempty" xml:"Outputs,omitempty" type:"Repeated"`
	Status     *string                     `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId     *string                     `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s MediaConvertOutputGroupDetail) String() string {
	return tea.Prettify(s)
}

func (s MediaConvertOutputGroupDetail) GoString() string {
	return s.String()
}

func (s *MediaConvertOutputGroupDetail) SetCode(v string) *MediaConvertOutputGroupDetail {
	s.Code = &v
	return s
}

func (s *MediaConvertOutputGroupDetail) SetCreateTime(v string) *MediaConvertOutputGroupDetail {
	s.CreateTime = &v
	return s
}

func (s *MediaConvertOutputGroupDetail) SetFinishTime(v string) *MediaConvertOutputGroupDetail {
	s.FinishTime = &v
	return s
}

func (s *MediaConvertOutputGroupDetail) SetMessage(v string) *MediaConvertOutputGroupDetail {
	s.Message = &v
	return s
}

func (s *MediaConvertOutputGroupDetail) SetName(v string) *MediaConvertOutputGroupDetail {
	s.Name = &v
	return s
}

func (s *MediaConvertOutputGroupDetail) SetOutputs(v []*MediaConvertOutputDetail) *MediaConvertOutputGroupDetail {
	s.Outputs = v
	return s
}

func (s *MediaConvertOutputGroupDetail) SetStatus(v string) *MediaConvertOutputGroupDetail {
	s.Status = &v
	return s
}

func (s *MediaConvertOutputGroupDetail) SetTaskId(v string) *MediaConvertOutputGroupDetail {
	s.TaskId = &v
	return s
}

type MediaConvertOutputGroupOutput struct {
	Features       *string `json:"Features,omitempty" xml:"Features,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OutputFileName *string `json:"OutputFileName,omitempty" xml:"OutputFileName,omitempty"`
	OverrideParams *string `json:"OverrideParams,omitempty" xml:"OverrideParams,omitempty"`
	Priority       *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	TemplateId     *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s MediaConvertOutputGroupOutput) String() string {
	return tea.Prettify(s)
}

func (s MediaConvertOutputGroupOutput) GoString() string {
	return s.String()
}

func (s *MediaConvertOutputGroupOutput) SetFeatures(v string) *MediaConvertOutputGroupOutput {
	s.Features = &v
	return s
}

func (s *MediaConvertOutputGroupOutput) SetName(v string) *MediaConvertOutputGroupOutput {
	s.Name = &v
	return s
}

func (s *MediaConvertOutputGroupOutput) SetOutputFileName(v string) *MediaConvertOutputGroupOutput {
	s.OutputFileName = &v
	return s
}

func (s *MediaConvertOutputGroupOutput) SetOverrideParams(v string) *MediaConvertOutputGroupOutput {
	s.OverrideParams = &v
	return s
}

func (s *MediaConvertOutputGroupOutput) SetPriority(v int32) *MediaConvertOutputGroupOutput {
	s.Priority = &v
	return s
}

func (s *MediaConvertOutputGroupOutput) SetTemplateId(v string) *MediaConvertOutputGroupOutput {
	s.TemplateId = &v
	return s
}

type MediaConvertSegment struct {
	Duration     *int32  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	ForceSegTime *string `json:"ForceSegTime,omitempty" xml:"ForceSegTime,omitempty"`
}

func (s MediaConvertSegment) String() string {
	return tea.Prettify(s)
}

func (s MediaConvertSegment) GoString() string {
	return s.String()
}

func (s *MediaConvertSegment) SetDuration(v int32) *MediaConvertSegment {
	s.Duration = &v
	return s
}

func (s *MediaConvertSegment) SetForceSegTime(v string) *MediaConvertSegment {
	s.ForceSegTime = &v
	return s
}

type MediaConvertTransConfig struct {
	AdjDarMethod            *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	IsCheckAudioBitrate     *bool   `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	IsCheckAudioBitrateFail *bool   `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
	IsCheckReso             *bool   `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	IsCheckResoFail         *bool   `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	IsCheckVideoBitrate     *bool   `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	IsCheckVideoBitrateFail *bool   `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	TransMode               *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
}

func (s MediaConvertTransConfig) String() string {
	return tea.Prettify(s)
}

func (s MediaConvertTransConfig) GoString() string {
	return s.String()
}

func (s *MediaConvertTransConfig) SetAdjDarMethod(v string) *MediaConvertTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *MediaConvertTransConfig) SetIsCheckAudioBitrate(v bool) *MediaConvertTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *MediaConvertTransConfig) SetIsCheckAudioBitrateFail(v bool) *MediaConvertTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

func (s *MediaConvertTransConfig) SetIsCheckReso(v bool) *MediaConvertTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *MediaConvertTransConfig) SetIsCheckResoFail(v bool) *MediaConvertTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *MediaConvertTransConfig) SetIsCheckVideoBitrate(v bool) *MediaConvertTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *MediaConvertTransConfig) SetIsCheckVideoBitrateFail(v bool) *MediaConvertTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *MediaConvertTransConfig) SetTransMode(v string) *MediaConvertTransConfig {
	s.TransMode = &v
	return s
}

type MediaConvertVideo struct {
	Bitrate       *int32      `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Bufsize       *int32      `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	Codec         *string     `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Crf           interface{} `json:"Crf,omitempty" xml:"Crf,omitempty"`
	Crop          *string     `json:"Crop,omitempty" xml:"Crop,omitempty"`
	Fps           interface{} `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Gop           interface{} `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Height        *int32      `json:"Height,omitempty" xml:"Height,omitempty"`
	LongShortMode *bool       `json:"LongShortMode,omitempty" xml:"LongShortMode,omitempty"`
	MaxFps        interface{} `json:"MaxFps,omitempty" xml:"MaxFps,omitempty"`
	Maxrate       *int32      `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	Pad           *string     `json:"Pad,omitempty" xml:"Pad,omitempty"`
	Profile       *string     `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Qscale        *int32      `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Remove        *bool       `json:"Remove,omitempty" xml:"Remove,omitempty"`
	ScanMode      *string     `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	Width         *int32      `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s MediaConvertVideo) String() string {
	return tea.Prettify(s)
}

func (s MediaConvertVideo) GoString() string {
	return s.String()
}

func (s *MediaConvertVideo) SetBitrate(v int32) *MediaConvertVideo {
	s.Bitrate = &v
	return s
}

func (s *MediaConvertVideo) SetBufsize(v int32) *MediaConvertVideo {
	s.Bufsize = &v
	return s
}

func (s *MediaConvertVideo) SetCodec(v string) *MediaConvertVideo {
	s.Codec = &v
	return s
}

func (s *MediaConvertVideo) SetCrf(v interface{}) *MediaConvertVideo {
	s.Crf = v
	return s
}

func (s *MediaConvertVideo) SetCrop(v string) *MediaConvertVideo {
	s.Crop = &v
	return s
}

func (s *MediaConvertVideo) SetFps(v interface{}) *MediaConvertVideo {
	s.Fps = v
	return s
}

func (s *MediaConvertVideo) SetGop(v interface{}) *MediaConvertVideo {
	s.Gop = v
	return s
}

func (s *MediaConvertVideo) SetHeight(v int32) *MediaConvertVideo {
	s.Height = &v
	return s
}

func (s *MediaConvertVideo) SetLongShortMode(v bool) *MediaConvertVideo {
	s.LongShortMode = &v
	return s
}

func (s *MediaConvertVideo) SetMaxFps(v interface{}) *MediaConvertVideo {
	s.MaxFps = v
	return s
}

func (s *MediaConvertVideo) SetMaxrate(v int32) *MediaConvertVideo {
	s.Maxrate = &v
	return s
}

func (s *MediaConvertVideo) SetPad(v string) *MediaConvertVideo {
	s.Pad = &v
	return s
}

func (s *MediaConvertVideo) SetProfile(v string) *MediaConvertVideo {
	s.Profile = &v
	return s
}

func (s *MediaConvertVideo) SetQscale(v int32) *MediaConvertVideo {
	s.Qscale = &v
	return s
}

func (s *MediaConvertVideo) SetRemove(v bool) *MediaConvertVideo {
	s.Remove = &v
	return s
}

func (s *MediaConvertVideo) SetScanMode(v string) *MediaConvertVideo {
	s.ScanMode = &v
	return s
}

func (s *MediaConvertVideo) SetWidth(v int32) *MediaConvertVideo {
	s.Width = &v
	return s
}

type MediaConvertVolume struct {
	IntegratedLoudnessTarget *int32  `json:"IntegratedLoudnessTarget,omitempty" xml:"IntegratedLoudnessTarget,omitempty"`
	Level                    *int32  `json:"Level,omitempty" xml:"Level,omitempty"`
	LoudnessRangeTarget      *int32  `json:"LoudnessRangeTarget,omitempty" xml:"LoudnessRangeTarget,omitempty"`
	Method                   *string `json:"Method,omitempty" xml:"Method,omitempty"`
	TruePeak                 *int32  `json:"TruePeak,omitempty" xml:"TruePeak,omitempty"`
}

func (s MediaConvertVolume) String() string {
	return tea.Prettify(s)
}

func (s MediaConvertVolume) GoString() string {
	return s.String()
}

func (s *MediaConvertVolume) SetIntegratedLoudnessTarget(v int32) *MediaConvertVolume {
	s.IntegratedLoudnessTarget = &v
	return s
}

func (s *MediaConvertVolume) SetLevel(v int32) *MediaConvertVolume {
	s.Level = &v
	return s
}

func (s *MediaConvertVolume) SetLoudnessRangeTarget(v int32) *MediaConvertVolume {
	s.LoudnessRangeTarget = &v
	return s
}

func (s *MediaConvertVolume) SetMethod(v string) *MediaConvertVolume {
	s.Method = &v
	return s
}

func (s *MediaConvertVolume) SetTruePeak(v int32) *MediaConvertVolume {
	s.TruePeak = &v
	return s
}

type MediaObject struct {
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	Type  *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Url   *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s MediaObject) String() string {
	return tea.Prettify(s)
}

func (s MediaObject) GoString() string {
	return s.String()
}

func (s *MediaObject) SetMedia(v string) *MediaObject {
	s.Media = &v
	return s
}

func (s *MediaObject) SetType(v string) *MediaObject {
	s.Type = &v
	return s
}

func (s *MediaObject) SetUrl(v string) *MediaObject {
	s.Url = &v
	return s
}

type Program struct {
	AdBreaks           []*ProgramAdBreaks `json:"AdBreaks,omitempty" xml:"AdBreaks,omitempty" type:"Repeated"`
	Arn                *string            `json:"Arn,omitempty" xml:"Arn,omitempty"`
	ChannelName        *string            `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	ClipRange          *string            `json:"ClipRange,omitempty" xml:"ClipRange,omitempty"`
	GmtCreate          *string            `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified        *string            `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	ProgramName        *string            `json:"ProgramName,omitempty" xml:"ProgramName,omitempty"`
	SourceLocationName *string            `json:"SourceLocationName,omitempty" xml:"SourceLocationName,omitempty"`
	SourceName         *string            `json:"SourceName,omitempty" xml:"SourceName,omitempty"`
	SourceType         *string            `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	Transition         *string            `json:"Transition,omitempty" xml:"Transition,omitempty"`
}

func (s Program) String() string {
	return tea.Prettify(s)
}

func (s Program) GoString() string {
	return s.String()
}

func (s *Program) SetAdBreaks(v []*ProgramAdBreaks) *Program {
	s.AdBreaks = v
	return s
}

func (s *Program) SetArn(v string) *Program {
	s.Arn = &v
	return s
}

func (s *Program) SetChannelName(v string) *Program {
	s.ChannelName = &v
	return s
}

func (s *Program) SetClipRange(v string) *Program {
	s.ClipRange = &v
	return s
}

func (s *Program) SetGmtCreate(v string) *Program {
	s.GmtCreate = &v
	return s
}

func (s *Program) SetGmtModified(v string) *Program {
	s.GmtModified = &v
	return s
}

func (s *Program) SetProgramName(v string) *Program {
	s.ProgramName = &v
	return s
}

func (s *Program) SetSourceLocationName(v string) *Program {
	s.SourceLocationName = &v
	return s
}

func (s *Program) SetSourceName(v string) *Program {
	s.SourceName = &v
	return s
}

func (s *Program) SetSourceType(v string) *Program {
	s.SourceType = &v
	return s
}

func (s *Program) SetTransition(v string) *Program {
	s.Transition = &v
	return s
}

type ProgramAdBreaks struct {
	ChannelName          *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	MessageType          *string `json:"MessageType,omitempty" xml:"MessageType,omitempty"`
	OffsetMillis         *int64  `json:"OffsetMillis,omitempty" xml:"OffsetMillis,omitempty"`
	ProgramName          *string `json:"ProgramName,omitempty" xml:"ProgramName,omitempty"`
	SourceLocationName   *string `json:"SourceLocationName,omitempty" xml:"SourceLocationName,omitempty"`
	SourceName           *string `json:"SourceName,omitempty" xml:"SourceName,omitempty"`
	SpliceInsertSettings *string `json:"SpliceInsertSettings,omitempty" xml:"SpliceInsertSettings,omitempty"`
	TimeSignalSettings   *string `json:"TimeSignalSettings,omitempty" xml:"TimeSignalSettings,omitempty"`
}

func (s ProgramAdBreaks) String() string {
	return tea.Prettify(s)
}

func (s ProgramAdBreaks) GoString() string {
	return s.String()
}

func (s *ProgramAdBreaks) SetChannelName(v string) *ProgramAdBreaks {
	s.ChannelName = &v
	return s
}

func (s *ProgramAdBreaks) SetMessageType(v string) *ProgramAdBreaks {
	s.MessageType = &v
	return s
}

func (s *ProgramAdBreaks) SetOffsetMillis(v int64) *ProgramAdBreaks {
	s.OffsetMillis = &v
	return s
}

func (s *ProgramAdBreaks) SetProgramName(v string) *ProgramAdBreaks {
	s.ProgramName = &v
	return s
}

func (s *ProgramAdBreaks) SetSourceLocationName(v string) *ProgramAdBreaks {
	s.SourceLocationName = &v
	return s
}

func (s *ProgramAdBreaks) SetSourceName(v string) *ProgramAdBreaks {
	s.SourceName = &v
	return s
}

func (s *ProgramAdBreaks) SetSpliceInsertSettings(v string) *ProgramAdBreaks {
	s.SpliceInsertSettings = &v
	return s
}

func (s *ProgramAdBreaks) SetTimeSignalSettings(v string) *ProgramAdBreaks {
	s.TimeSignalSettings = &v
	return s
}

type ScheduleData struct {
	AdBreaks                   []*ScheduleDataAdBreaks `json:"AdBreaks,omitempty" xml:"AdBreaks,omitempty" type:"Repeated"`
	ApproximateDurationSeconds *int64                  `json:"ApproximateDurationSeconds,omitempty" xml:"ApproximateDurationSeconds,omitempty"`
	ApproximateStartTime       *string                 `json:"ApproximateStartTime,omitempty" xml:"ApproximateStartTime,omitempty"`
	EntryType                  *string                 `json:"EntryType,omitempty" xml:"EntryType,omitempty"`
	ProgramName                *string                 `json:"ProgramName,omitempty" xml:"ProgramName,omitempty"`
	SourceLocationName         *string                 `json:"SourceLocationName,omitempty" xml:"SourceLocationName,omitempty"`
	SourceName                 *string                 `json:"SourceName,omitempty" xml:"SourceName,omitempty"`
	SourceType                 *string                 `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
}

func (s ScheduleData) String() string {
	return tea.Prettify(s)
}

func (s ScheduleData) GoString() string {
	return s.String()
}

func (s *ScheduleData) SetAdBreaks(v []*ScheduleDataAdBreaks) *ScheduleData {
	s.AdBreaks = v
	return s
}

func (s *ScheduleData) SetApproximateDurationSeconds(v int64) *ScheduleData {
	s.ApproximateDurationSeconds = &v
	return s
}

func (s *ScheduleData) SetApproximateStartTime(v string) *ScheduleData {
	s.ApproximateStartTime = &v
	return s
}

func (s *ScheduleData) SetEntryType(v string) *ScheduleData {
	s.EntryType = &v
	return s
}

func (s *ScheduleData) SetProgramName(v string) *ScheduleData {
	s.ProgramName = &v
	return s
}

func (s *ScheduleData) SetSourceLocationName(v string) *ScheduleData {
	s.SourceLocationName = &v
	return s
}

func (s *ScheduleData) SetSourceName(v string) *ScheduleData {
	s.SourceName = &v
	return s
}

func (s *ScheduleData) SetSourceType(v string) *ScheduleData {
	s.SourceType = &v
	return s
}

type ScheduleDataAdBreaks struct {
	MessageType          *string `json:"MessageType,omitempty" xml:"MessageType,omitempty"`
	OffsetMillis         *string `json:"OffsetMillis,omitempty" xml:"OffsetMillis,omitempty"`
	SourceLocationName   *string `json:"SourceLocationName,omitempty" xml:"SourceLocationName,omitempty"`
	SourceName           *string `json:"SourceName,omitempty" xml:"SourceName,omitempty"`
	SpliceInsertSettings *string `json:"SpliceInsertSettings,omitempty" xml:"SpliceInsertSettings,omitempty"`
	TimeSignalSettings   *string `json:"TimeSignalSettings,omitempty" xml:"TimeSignalSettings,omitempty"`
}

func (s ScheduleDataAdBreaks) String() string {
	return tea.Prettify(s)
}

func (s ScheduleDataAdBreaks) GoString() string {
	return s.String()
}

func (s *ScheduleDataAdBreaks) SetMessageType(v string) *ScheduleDataAdBreaks {
	s.MessageType = &v
	return s
}

func (s *ScheduleDataAdBreaks) SetOffsetMillis(v string) *ScheduleDataAdBreaks {
	s.OffsetMillis = &v
	return s
}

func (s *ScheduleDataAdBreaks) SetSourceLocationName(v string) *ScheduleDataAdBreaks {
	s.SourceLocationName = &v
	return s
}

func (s *ScheduleDataAdBreaks) SetSourceName(v string) *ScheduleDataAdBreaks {
	s.SourceName = &v
	return s
}

func (s *ScheduleDataAdBreaks) SetSpliceInsertSettings(v string) *ScheduleDataAdBreaks {
	s.SpliceInsertSettings = &v
	return s
}

func (s *ScheduleDataAdBreaks) SetTimeSignalSettings(v string) *ScheduleDataAdBreaks {
	s.TimeSignalSettings = &v
	return s
}

type Source struct {
	Arn                       *string `json:"Arn,omitempty" xml:"Arn,omitempty"`
	GmtCreate                 *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified               *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	HttpPackageConfigurations *string `json:"HttpPackageConfigurations,omitempty" xml:"HttpPackageConfigurations,omitempty"`
	SourceLocationName        *string `json:"SourceLocationName,omitempty" xml:"SourceLocationName,omitempty"`
	SourceName                *string `json:"SourceName,omitempty" xml:"SourceName,omitempty"`
	SourceType                *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	State                     *int32  `json:"State,omitempty" xml:"State,omitempty"`
}

func (s Source) String() string {
	return tea.Prettify(s)
}

func (s Source) GoString() string {
	return s.String()
}

func (s *Source) SetArn(v string) *Source {
	s.Arn = &v
	return s
}

func (s *Source) SetGmtCreate(v string) *Source {
	s.GmtCreate = &v
	return s
}

func (s *Source) SetGmtModified(v string) *Source {
	s.GmtModified = &v
	return s
}

func (s *Source) SetHttpPackageConfigurations(v string) *Source {
	s.HttpPackageConfigurations = &v
	return s
}

func (s *Source) SetSourceLocationName(v string) *Source {
	s.SourceLocationName = &v
	return s
}

func (s *Source) SetSourceName(v string) *Source {
	s.SourceName = &v
	return s
}

func (s *Source) SetSourceType(v string) *Source {
	s.SourceType = &v
	return s
}

func (s *Source) SetState(v int32) *Source {
	s.State = &v
	return s
}

type SourceLocation struct {
	Arn                           *string `json:"Arn,omitempty" xml:"Arn,omitempty"`
	BaseUrl                       *string `json:"BaseUrl,omitempty" xml:"BaseUrl,omitempty"`
	GmtCreate                     *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified                   *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	SegmentDeliveryConfigurations *string `json:"SegmentDeliveryConfigurations,omitempty" xml:"SegmentDeliveryConfigurations,omitempty"`
	SourceLocationName            *string `json:"SourceLocationName,omitempty" xml:"SourceLocationName,omitempty"`
	State                         *int32  `json:"State,omitempty" xml:"State,omitempty"`
}

func (s SourceLocation) String() string {
	return tea.Prettify(s)
}

func (s SourceLocation) GoString() string {
	return s.String()
}

func (s *SourceLocation) SetArn(v string) *SourceLocation {
	s.Arn = &v
	return s
}

func (s *SourceLocation) SetBaseUrl(v string) *SourceLocation {
	s.BaseUrl = &v
	return s
}

func (s *SourceLocation) SetGmtCreate(v string) *SourceLocation {
	s.GmtCreate = &v
	return s
}

func (s *SourceLocation) SetGmtModified(v string) *SourceLocation {
	s.GmtModified = &v
	return s
}

func (s *SourceLocation) SetSegmentDeliveryConfigurations(v string) *SourceLocation {
	s.SegmentDeliveryConfigurations = &v
	return s
}

func (s *SourceLocation) SetSourceLocationName(v string) *SourceLocation {
	s.SourceLocationName = &v
	return s
}

func (s *SourceLocation) SetState(v int32) *SourceLocation {
	s.State = &v
	return s
}

type TranspositionResult struct {
	// example:
	//
	// zh
	TargetLanguage *string `json:"TargetLanguage,omitempty" xml:"TargetLanguage,omitempty"`
	// example:
	//
	// 你好
	TranslatedText *string `json:"TranslatedText,omitempty" xml:"TranslatedText,omitempty"`
}

func (s TranspositionResult) String() string {
	return tea.Prettify(s)
}

func (s TranspositionResult) GoString() string {
	return s.String()
}

func (s *TranspositionResult) SetTargetLanguage(v string) *TranspositionResult {
	s.TargetLanguage = &v
	return s
}

func (s *TranspositionResult) SetTranslatedText(v string) *TranspositionResult {
	s.TranslatedText = &v
	return s
}

type VodPackagingAsset struct {
	AssetName  *string                 `json:"AssetName,omitempty" xml:"AssetName,omitempty"`
	ContentId  *string                 `json:"ContentId,omitempty" xml:"ContentId,omitempty"`
	CreateTime *string                 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	GroupName  *string                 `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	Input      *VodPackagingAssetInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
}

func (s VodPackagingAsset) String() string {
	return tea.Prettify(s)
}

func (s VodPackagingAsset) GoString() string {
	return s.String()
}

func (s *VodPackagingAsset) SetAssetName(v string) *VodPackagingAsset {
	s.AssetName = &v
	return s
}

func (s *VodPackagingAsset) SetContentId(v string) *VodPackagingAsset {
	s.ContentId = &v
	return s
}

func (s *VodPackagingAsset) SetCreateTime(v string) *VodPackagingAsset {
	s.CreateTime = &v
	return s
}

func (s *VodPackagingAsset) SetGroupName(v string) *VodPackagingAsset {
	s.GroupName = &v
	return s
}

func (s *VodPackagingAsset) SetInput(v *VodPackagingAssetInput) *VodPackagingAsset {
	s.Input = v
	return s
}

type VodPackagingAssetInput struct {
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	Type  *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s VodPackagingAssetInput) String() string {
	return tea.Prettify(s)
}

func (s VodPackagingAssetInput) GoString() string {
	return s.String()
}

func (s *VodPackagingAssetInput) SetMedia(v string) *VodPackagingAssetInput {
	s.Media = &v
	return s
}

func (s *VodPackagingAssetInput) SetType(v string) *VodPackagingAssetInput {
	s.Type = &v
	return s
}

type VodPackagingConfig struct {
	DrmProvider     *VodPackagingConfigDrmProvider     `json:"DrmProvider,omitempty" xml:"DrmProvider,omitempty" type:"Struct"`
	ManifestName    *string                            `json:"ManifestName,omitempty" xml:"ManifestName,omitempty"`
	SegmentDuration *int64                             `json:"SegmentDuration,omitempty" xml:"SegmentDuration,omitempty"`
	StreamSelection *VodPackagingConfigStreamSelection `json:"StreamSelection,omitempty" xml:"StreamSelection,omitempty" type:"Struct"`
}

func (s VodPackagingConfig) String() string {
	return tea.Prettify(s)
}

func (s VodPackagingConfig) GoString() string {
	return s.String()
}

func (s *VodPackagingConfig) SetDrmProvider(v *VodPackagingConfigDrmProvider) *VodPackagingConfig {
	s.DrmProvider = v
	return s
}

func (s *VodPackagingConfig) SetManifestName(v string) *VodPackagingConfig {
	s.ManifestName = &v
	return s
}

func (s *VodPackagingConfig) SetSegmentDuration(v int64) *VodPackagingConfig {
	s.SegmentDuration = &v
	return s
}

func (s *VodPackagingConfig) SetStreamSelection(v *VodPackagingConfigStreamSelection) *VodPackagingConfig {
	s.StreamSelection = v
	return s
}

type VodPackagingConfigDrmProvider struct {
	EncryptionMethod *string   `json:"EncryptionMethod,omitempty" xml:"EncryptionMethod,omitempty"`
	IV               *string   `json:"IV,omitempty" xml:"IV,omitempty"`
	SystemIds        []*string `json:"SystemIds,omitempty" xml:"SystemIds,omitempty" type:"Repeated"`
	Url              *string   `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s VodPackagingConfigDrmProvider) String() string {
	return tea.Prettify(s)
}

func (s VodPackagingConfigDrmProvider) GoString() string {
	return s.String()
}

func (s *VodPackagingConfigDrmProvider) SetEncryptionMethod(v string) *VodPackagingConfigDrmProvider {
	s.EncryptionMethod = &v
	return s
}

func (s *VodPackagingConfigDrmProvider) SetIV(v string) *VodPackagingConfigDrmProvider {
	s.IV = &v
	return s
}

func (s *VodPackagingConfigDrmProvider) SetSystemIds(v []*string) *VodPackagingConfigDrmProvider {
	s.SystemIds = v
	return s
}

func (s *VodPackagingConfigDrmProvider) SetUrl(v string) *VodPackagingConfigDrmProvider {
	s.Url = &v
	return s
}

type VodPackagingConfigStreamSelection struct {
	MaxVideoBitsPerSecond *int64  `json:"MaxVideoBitsPerSecond,omitempty" xml:"MaxVideoBitsPerSecond,omitempty"`
	MinVideoBitsPerSecond *int64  `json:"MinVideoBitsPerSecond,omitempty" xml:"MinVideoBitsPerSecond,omitempty"`
	StreamOrder           *string `json:"StreamOrder,omitempty" xml:"StreamOrder,omitempty"`
}

func (s VodPackagingConfigStreamSelection) String() string {
	return tea.Prettify(s)
}

func (s VodPackagingConfigStreamSelection) GoString() string {
	return s.String()
}

func (s *VodPackagingConfigStreamSelection) SetMaxVideoBitsPerSecond(v int64) *VodPackagingConfigStreamSelection {
	s.MaxVideoBitsPerSecond = &v
	return s
}

func (s *VodPackagingConfigStreamSelection) SetMinVideoBitsPerSecond(v int64) *VodPackagingConfigStreamSelection {
	s.MinVideoBitsPerSecond = &v
	return s
}

func (s *VodPackagingConfigStreamSelection) SetStreamOrder(v string) *VodPackagingConfigStreamSelection {
	s.StreamOrder = &v
	return s
}

type VodPackagingConfiguration struct {
	ConfigurationName *string             `json:"ConfigurationName,omitempty" xml:"ConfigurationName,omitempty"`
	CreateTime        *string             `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description       *string             `json:"Description,omitempty" xml:"Description,omitempty"`
	GroupName         *string             `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	PackageConfig     *VodPackagingConfig `json:"PackageConfig,omitempty" xml:"PackageConfig,omitempty"`
	Protocol          *string             `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
}

func (s VodPackagingConfiguration) String() string {
	return tea.Prettify(s)
}

func (s VodPackagingConfiguration) GoString() string {
	return s.String()
}

func (s *VodPackagingConfiguration) SetConfigurationName(v string) *VodPackagingConfiguration {
	s.ConfigurationName = &v
	return s
}

func (s *VodPackagingConfiguration) SetCreateTime(v string) *VodPackagingConfiguration {
	s.CreateTime = &v
	return s
}

func (s *VodPackagingConfiguration) SetDescription(v string) *VodPackagingConfiguration {
	s.Description = &v
	return s
}

func (s *VodPackagingConfiguration) SetGroupName(v string) *VodPackagingConfiguration {
	s.GroupName = &v
	return s
}

func (s *VodPackagingConfiguration) SetPackageConfig(v *VodPackagingConfig) *VodPackagingConfiguration {
	s.PackageConfig = v
	return s
}

func (s *VodPackagingConfiguration) SetProtocol(v string) *VodPackagingConfiguration {
	s.Protocol = &v
	return s
}

type VodPackagingGroup struct {
	ApproximateAssetCount *int64  `json:"ApproximateAssetCount,omitempty" xml:"ApproximateAssetCount,omitempty"`
	ConfigurationCount    *int64  `json:"ConfigurationCount,omitempty" xml:"ConfigurationCount,omitempty"`
	CreateTime            *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description           *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DomainName            *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	GroupName             *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s VodPackagingGroup) String() string {
	return tea.Prettify(s)
}

func (s VodPackagingGroup) GoString() string {
	return s.String()
}

func (s *VodPackagingGroup) SetApproximateAssetCount(v int64) *VodPackagingGroup {
	s.ApproximateAssetCount = &v
	return s
}

func (s *VodPackagingGroup) SetConfigurationCount(v int64) *VodPackagingGroup {
	s.ConfigurationCount = &v
	return s
}

func (s *VodPackagingGroup) SetCreateTime(v string) *VodPackagingGroup {
	s.CreateTime = &v
	return s
}

func (s *VodPackagingGroup) SetDescription(v string) *VodPackagingGroup {
	s.Description = &v
	return s
}

func (s *VodPackagingGroup) SetDomainName(v string) *VodPackagingGroup {
	s.DomainName = &v
	return s
}

func (s *VodPackagingGroup) SetGroupName(v string) *VodPackagingGroup {
	s.GroupName = &v
	return s
}

type AddAdInsertionRequest struct {
	// Specifies whether to enable ad marker passthrough. Default value: OFF.
	//
	// Valid values:
	//
	// 	- OFF: Disable.
	//
	// 	- ON: Enable.
	//
	// example:
	//
	// ON
	AdMarkerPassthrough *string `json:"AdMarkerPassthrough,omitempty" xml:"AdMarkerPassthrough,omitempty"`
	// The request URL of the ad decision server (ADS). HTTP and HTTPS are supported. The maximum length is 2,048 characters.
	//
	// This parameter is required.
	//
	// example:
	//
	// http://ads.com/ad1?param1=[palyer_params.p1]
	AdsUrl *string `json:"AdsUrl,omitempty" xml:"AdsUrl,omitempty"`
	// The CDN prefix for ad segments. HTTP and HTTPS are supported. The maximum length is 512 characters.
	//
	// example:
	//
	// http://cdn.com/
	CdnAdSegmentUrlPrefix *string `json:"CdnAdSegmentUrlPrefix,omitempty" xml:"CdnAdSegmentUrlPrefix,omitempty"`
	// The CDN prefix for content segments. HTTP and HTTPS are supported. The maximum length is 512 characters.
	//
	// example:
	//
	// http://cdn.com/
	CdnContentSegmentUrlPrefix *string `json:"CdnContentSegmentUrlPrefix,omitempty" xml:"CdnContentSegmentUrlPrefix,omitempty"`
	// The idempotency key that is used to avoid repeated submission. The value can be up to 200 characters in length.
	//
	// example:
	//
	// ****0311a423d11a5f7dee713535****
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// A JSON string that specifies the player parameter variables and aliases. You can add up to 20 player_params.{name} entries. The name field can be up to 150 characters in length. Each player parameter can include up to 50 key-value pairs. A key can be up to 150 characters long, and a value can be up to 500 characters. Example: { "player_params.{name}": { "{key}": "{value}" } }
	//
	// example:
	//
	// { "player_params.p1": { "1": "abc" } }
	ConfigAliases *string `json:"ConfigAliases,omitempty" xml:"ConfigAliases,omitempty"`
	// The URL prefix for the source content. HTTP and HTTPS are supported. The maximum length is 512 characters.
	//
	// This parameter is required.
	//
	// example:
	//
	// https://source.com/
	ContentUrlPrefix *string `json:"ContentUrlPrefix,omitempty" xml:"ContentUrlPrefix,omitempty"`
	// The name of the configuration. The name must be unique and can be up to 128 characters in length. Letters, digits, underscores (_), and hyphens (-) are supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// my_ad
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// Specifies the maximum duration of underfilled time allowed in an ad break. Unit: seconds. Default value: 8 seconds.
	//
	// example:
	//
	// 5
	PersonalizationThreshold *int32 `json:"PersonalizationThreshold,omitempty" xml:"PersonalizationThreshold,omitempty"`
	// The HTTP or HTTPS URL of the slate ad. Only MP4 format is supported. The maximum length is 2,048 characters.
	//
	// example:
	//
	// http://storage.com/slate1.mp4
	SlateAdUrl *string `json:"SlateAdUrl,omitempty" xml:"SlateAdUrl,omitempty"`
}

func (s AddAdInsertionRequest) String() string {
	return tea.Prettify(s)
}

func (s AddAdInsertionRequest) GoString() string {
	return s.String()
}

func (s *AddAdInsertionRequest) SetAdMarkerPassthrough(v string) *AddAdInsertionRequest {
	s.AdMarkerPassthrough = &v
	return s
}

func (s *AddAdInsertionRequest) SetAdsUrl(v string) *AddAdInsertionRequest {
	s.AdsUrl = &v
	return s
}

func (s *AddAdInsertionRequest) SetCdnAdSegmentUrlPrefix(v string) *AddAdInsertionRequest {
	s.CdnAdSegmentUrlPrefix = &v
	return s
}

func (s *AddAdInsertionRequest) SetCdnContentSegmentUrlPrefix(v string) *AddAdInsertionRequest {
	s.CdnContentSegmentUrlPrefix = &v
	return s
}

func (s *AddAdInsertionRequest) SetClientToken(v string) *AddAdInsertionRequest {
	s.ClientToken = &v
	return s
}

func (s *AddAdInsertionRequest) SetConfigAliases(v string) *AddAdInsertionRequest {
	s.ConfigAliases = &v
	return s
}

func (s *AddAdInsertionRequest) SetContentUrlPrefix(v string) *AddAdInsertionRequest {
	s.ContentUrlPrefix = &v
	return s
}

func (s *AddAdInsertionRequest) SetName(v string) *AddAdInsertionRequest {
	s.Name = &v
	return s
}

func (s *AddAdInsertionRequest) SetPersonalizationThreshold(v int32) *AddAdInsertionRequest {
	s.PersonalizationThreshold = &v
	return s
}

func (s *AddAdInsertionRequest) SetSlateAdUrl(v string) *AddAdInsertionRequest {
	s.SlateAdUrl = &v
	return s
}

type AddAdInsertionResponseBody struct {
	// The ad insertion configuration.
	Config *AddAdInsertionResponseBodyConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddAdInsertionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddAdInsertionResponseBody) GoString() string {
	return s.String()
}

func (s *AddAdInsertionResponseBody) SetConfig(v *AddAdInsertionResponseBodyConfig) *AddAdInsertionResponseBody {
	s.Config = v
	return s
}

func (s *AddAdInsertionResponseBody) SetRequestId(v string) *AddAdInsertionResponseBody {
	s.RequestId = &v
	return s
}

type AddAdInsertionResponseBodyConfig struct {
	// Indicates whether ad marker passthrough is enabled.
	//
	// example:
	//
	// ON
	AdMarkerPassthrough *string `json:"AdMarkerPassthrough,omitempty" xml:"AdMarkerPassthrough,omitempty"`
	// The request URL of ADS.
	//
	// example:
	//
	// http://ads.com/ad1?param1=[palyer_params.p1]
	AdsUrl *string `json:"AdsUrl,omitempty" xml:"AdsUrl,omitempty"`
	// The CDN configurations.
	CdnConfig *AddAdInsertionResponseBodyConfigCdnConfig `json:"CdnConfig,omitempty" xml:"CdnConfig,omitempty" type:"Struct"`
	// The player parameter variables and aliases.
	//
	// example:
	//
	// { "player_params.p1": { "1": "abc" } }
	ConfigAliases *string `json:"ConfigAliases,omitempty" xml:"ConfigAliases,omitempty"`
	// The URL prefix for the source content.
	//
	// example:
	//
	// https://source.com/
	ContentUrlPrefix *string `json:"ContentUrlPrefix,omitempty" xml:"ContentUrlPrefix,omitempty"`
	// The time when the configuration was created.
	//
	// example:
	//
	// 2024-06-13T08:26:09Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the configuration was last modified.
	//
	// example:
	//
	// 2024-06-13T08:26:09Z
	LastModified *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	// The playback endpoint configuration.
	ManifestEndpointConfig *AddAdInsertionResponseBodyConfigManifestEndpointConfig `json:"ManifestEndpointConfig,omitempty" xml:"ManifestEndpointConfig,omitempty" type:"Struct"`
	// The name of the ad insertion configuration.
	//
	// example:
	//
	// my_ad
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The personalization threshold.
	//
	// example:
	//
	// 5
	PersonalizationThreshold *int32 `json:"PersonalizationThreshold,omitempty" xml:"PersonalizationThreshold,omitempty"`
	// The URL of the slate ad.
	//
	// example:
	//
	// http://storage.com/slate1.mp4
	SlateAdUrl *string `json:"SlateAdUrl,omitempty" xml:"SlateAdUrl,omitempty"`
}

func (s AddAdInsertionResponseBodyConfig) String() string {
	return tea.Prettify(s)
}

func (s AddAdInsertionResponseBodyConfig) GoString() string {
	return s.String()
}

func (s *AddAdInsertionResponseBodyConfig) SetAdMarkerPassthrough(v string) *AddAdInsertionResponseBodyConfig {
	s.AdMarkerPassthrough = &v
	return s
}

func (s *AddAdInsertionResponseBodyConfig) SetAdsUrl(v string) *AddAdInsertionResponseBodyConfig {
	s.AdsUrl = &v
	return s
}

func (s *AddAdInsertionResponseBodyConfig) SetCdnConfig(v *AddAdInsertionResponseBodyConfigCdnConfig) *AddAdInsertionResponseBodyConfig {
	s.CdnConfig = v
	return s
}

func (s *AddAdInsertionResponseBodyConfig) SetConfigAliases(v string) *AddAdInsertionResponseBodyConfig {
	s.ConfigAliases = &v
	return s
}

func (s *AddAdInsertionResponseBodyConfig) SetContentUrlPrefix(v string) *AddAdInsertionResponseBodyConfig {
	s.ContentUrlPrefix = &v
	return s
}

func (s *AddAdInsertionResponseBodyConfig) SetCreateTime(v string) *AddAdInsertionResponseBodyConfig {
	s.CreateTime = &v
	return s
}

func (s *AddAdInsertionResponseBodyConfig) SetLastModified(v string) *AddAdInsertionResponseBodyConfig {
	s.LastModified = &v
	return s
}

func (s *AddAdInsertionResponseBodyConfig) SetManifestEndpointConfig(v *AddAdInsertionResponseBodyConfigManifestEndpointConfig) *AddAdInsertionResponseBodyConfig {
	s.ManifestEndpointConfig = v
	return s
}

func (s *AddAdInsertionResponseBodyConfig) SetName(v string) *AddAdInsertionResponseBodyConfig {
	s.Name = &v
	return s
}

func (s *AddAdInsertionResponseBodyConfig) SetPersonalizationThreshold(v int32) *AddAdInsertionResponseBodyConfig {
	s.PersonalizationThreshold = &v
	return s
}

func (s *AddAdInsertionResponseBodyConfig) SetSlateAdUrl(v string) *AddAdInsertionResponseBodyConfig {
	s.SlateAdUrl = &v
	return s
}

type AddAdInsertionResponseBodyConfigCdnConfig struct {
	// The CDN prefix for ad segments.
	//
	// example:
	//
	// http://cdn.com/
	AdSegmentUrlPrefix *string `json:"AdSegmentUrlPrefix,omitempty" xml:"AdSegmentUrlPrefix,omitempty"`
	// The CDN prefix for content segments.
	//
	// example:
	//
	// http://cdn.com/
	ContentSegmentUrlPrefix *string `json:"ContentSegmentUrlPrefix,omitempty" xml:"ContentSegmentUrlPrefix,omitempty"`
}

func (s AddAdInsertionResponseBodyConfigCdnConfig) String() string {
	return tea.Prettify(s)
}

func (s AddAdInsertionResponseBodyConfigCdnConfig) GoString() string {
	return s.String()
}

func (s *AddAdInsertionResponseBodyConfigCdnConfig) SetAdSegmentUrlPrefix(v string) *AddAdInsertionResponseBodyConfigCdnConfig {
	s.AdSegmentUrlPrefix = &v
	return s
}

func (s *AddAdInsertionResponseBodyConfigCdnConfig) SetContentSegmentUrlPrefix(v string) *AddAdInsertionResponseBodyConfigCdnConfig {
	s.ContentSegmentUrlPrefix = &v
	return s
}

type AddAdInsertionResponseBodyConfigManifestEndpointConfig struct {
	// DASH清单播放端点前缀
	DashPrefix *string `json:"DashPrefix,omitempty" xml:"DashPrefix,omitempty"`
	// The prefix of the playback endpoint for HLS manifests.
	HlsPrefix *string `json:"HlsPrefix,omitempty" xml:"HlsPrefix,omitempty"`
}

func (s AddAdInsertionResponseBodyConfigManifestEndpointConfig) String() string {
	return tea.Prettify(s)
}

func (s AddAdInsertionResponseBodyConfigManifestEndpointConfig) GoString() string {
	return s.String()
}

func (s *AddAdInsertionResponseBodyConfigManifestEndpointConfig) SetDashPrefix(v string) *AddAdInsertionResponseBodyConfigManifestEndpointConfig {
	s.DashPrefix = &v
	return s
}

func (s *AddAdInsertionResponseBodyConfigManifestEndpointConfig) SetHlsPrefix(v string) *AddAdInsertionResponseBodyConfigManifestEndpointConfig {
	s.HlsPrefix = &v
	return s
}

type AddAdInsertionResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddAdInsertionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddAdInsertionResponse) String() string {
	return tea.Prettify(s)
}

func (s AddAdInsertionResponse) GoString() string {
	return s.String()
}

func (s *AddAdInsertionResponse) SetHeaders(v map[string]*string) *AddAdInsertionResponse {
	s.Headers = v
	return s
}

func (s *AddAdInsertionResponse) SetStatusCode(v int32) *AddAdInsertionResponse {
	s.StatusCode = &v
	return s
}

func (s *AddAdInsertionResponse) SetBody(v *AddAdInsertionResponseBody) *AddAdInsertionResponse {
	s.Body = v
	return s
}

type AddCategoryRequest struct {
	// The category name.
	//
	// 	- The value can be up to 64 bytes in length.
	//
	// 	- The value must be encoded in UTF-8.
	//
	// This parameter is required.
	CateName *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	// The ID of the parent category.
	//
	// example:
	//
	// 5
	ParentId *int64 `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// The type of the category. Valid values:
	//
	// 	- default: audio, video, and image files. This is the default value.
	//
	// 	- material: short video materials.
	//
	// example:
	//
	// default
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AddCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCategoryRequest) GoString() string {
	return s.String()
}

func (s *AddCategoryRequest) SetCateName(v string) *AddCategoryRequest {
	s.CateName = &v
	return s
}

func (s *AddCategoryRequest) SetParentId(v int64) *AddCategoryRequest {
	s.ParentId = &v
	return s
}

func (s *AddCategoryRequest) SetType(v string) *AddCategoryRequest {
	s.Type = &v
	return s
}

type AddCategoryResponseBody struct {
	// The information about the category.
	Category *AddCategoryResponseBodyCategory `json:"Category,omitempty" xml:"Category,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ****63E8B7C7-4812-46AD-0FA56029AC86****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *AddCategoryResponseBody) SetCategory(v *AddCategoryResponseBodyCategory) *AddCategoryResponseBody {
	s.Category = v
	return s
}

func (s *AddCategoryResponseBody) SetRequestId(v string) *AddCategoryResponseBody {
	s.RequestId = &v
	return s
}

type AddCategoryResponseBodyCategory struct {
	// The ID of the created category.
	//
	// example:
	//
	// 45
	CateId *int64 `json:"CateId,omitempty" xml:"CateId,omitempty"`
	// The category name.
	CateName *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	// The level of the category. A value of **0*	- indicates a level-1 category, a value of **1*	- indicates a level-2 category, and a value of **2*	- indicates a level-3 category.
	//
	// example:
	//
	// 0
	Level *int64 `json:"Level,omitempty" xml:"Level,omitempty"`
	// The ID of the parent category. By default, if ParentId is left empty or less than 1, -1 is returned, which indicates that the created category is the root directory.
	//
	// example:
	//
	// -1
	ParentId *int64 `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// The type of the category. Valid values:
	//
	// 	- **default**: audio, video, and image files. This is the default value.
	//
	// 	- **material**: short video materials.
	//
	// example:
	//
	// default
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AddCategoryResponseBodyCategory) String() string {
	return tea.Prettify(s)
}

func (s AddCategoryResponseBodyCategory) GoString() string {
	return s.String()
}

func (s *AddCategoryResponseBodyCategory) SetCateId(v int64) *AddCategoryResponseBodyCategory {
	s.CateId = &v
	return s
}

func (s *AddCategoryResponseBodyCategory) SetCateName(v string) *AddCategoryResponseBodyCategory {
	s.CateName = &v
	return s
}

func (s *AddCategoryResponseBodyCategory) SetLevel(v int64) *AddCategoryResponseBodyCategory {
	s.Level = &v
	return s
}

func (s *AddCategoryResponseBodyCategory) SetParentId(v int64) *AddCategoryResponseBodyCategory {
	s.ParentId = &v
	return s
}

func (s *AddCategoryResponseBodyCategory) SetType(v string) *AddCategoryResponseBodyCategory {
	s.Type = &v
	return s
}

type AddCategoryResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCategoryResponse) GoString() string {
	return s.String()
}

func (s *AddCategoryResponse) SetHeaders(v map[string]*string) *AddCategoryResponse {
	s.Headers = v
	return s
}

func (s *AddCategoryResponse) SetStatusCode(v int32) *AddCategoryResponse {
	s.StatusCode = &v
	return s
}

func (s *AddCategoryResponse) SetBody(v *AddCategoryResponseBody) *AddCategoryResponse {
	s.Body = v
	return s
}

type AddEditingProjectMaterialsRequest struct {
	// The material ID. Separate multiple material IDs with commas (,). Each type supports up to 10 material IDs. The following material types are supported:
	//
	// 	- video
	//
	// 	- audio
	//
	// 	- image
	//
	// 	- liveStream
	//
	// 	- editingProject
	//
	// This parameter is required.
	//
	// example:
	//
	// {"video":"*****2e057304fcd9b145c5cafc*****", "image":"****8021a8d493da643c8acd98*****,*****cb6307a4edea614d8b3f3c*****", "liveStream": "[{\\"appName\\":\\"testrecord\\",\\"domainName\\":\\"test.alivecdn.com\\",\\"liveUrl\\":\\"rtmp://test.alivecdn.com/testrecord/teststream\\",\\"streamName\\":\\"teststream\\"}]", "editingProject": "*****9b145c5cafc2e057304fcd*****"}
	MaterialMaps *string `json:"MaterialMaps,omitempty" xml:"MaterialMaps,omitempty"`
	// The ID of the online editing project.
	//
	// This parameter is required.
	//
	// example:
	//
	// *****b2101cb318c*****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s AddEditingProjectMaterialsRequest) String() string {
	return tea.Prettify(s)
}

func (s AddEditingProjectMaterialsRequest) GoString() string {
	return s.String()
}

func (s *AddEditingProjectMaterialsRequest) SetMaterialMaps(v string) *AddEditingProjectMaterialsRequest {
	s.MaterialMaps = &v
	return s
}

func (s *AddEditingProjectMaterialsRequest) SetProjectId(v string) *AddEditingProjectMaterialsRequest {
	s.ProjectId = &v
	return s
}

type AddEditingProjectMaterialsResponseBody struct {
	// The materials associated with the live stream.
	LiveMaterials []*AddEditingProjectMaterialsResponseBodyLiveMaterials `json:"LiveMaterials,omitempty" xml:"LiveMaterials,omitempty" type:"Repeated"`
	// The media assets that meet the specified conditions.
	MediaInfos []*AddEditingProjectMaterialsResponseBodyMediaInfos `json:"MediaInfos,omitempty" xml:"MediaInfos,omitempty" type:"Repeated"`
	// The ID of the online editing project.
	//
	// example:
	//
	// *****67ae06542b9b93e0d1c387*****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The materials associated with the editing project. A live stream editing project will be associated with a regular editing project after the live streaming ends.
	//
	// example:
	//
	// *****9b145c5cafc2e057304fcd*****
	ProjectMaterials []*string `json:"ProjectMaterials,omitempty" xml:"ProjectMaterials,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// *****ACB-44F2-5F2D-88D7-1283E70*****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddEditingProjectMaterialsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddEditingProjectMaterialsResponseBody) GoString() string {
	return s.String()
}

func (s *AddEditingProjectMaterialsResponseBody) SetLiveMaterials(v []*AddEditingProjectMaterialsResponseBodyLiveMaterials) *AddEditingProjectMaterialsResponseBody {
	s.LiveMaterials = v
	return s
}

func (s *AddEditingProjectMaterialsResponseBody) SetMediaInfos(v []*AddEditingProjectMaterialsResponseBodyMediaInfos) *AddEditingProjectMaterialsResponseBody {
	s.MediaInfos = v
	return s
}

func (s *AddEditingProjectMaterialsResponseBody) SetProjectId(v string) *AddEditingProjectMaterialsResponseBody {
	s.ProjectId = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBody) SetProjectMaterials(v []*string) *AddEditingProjectMaterialsResponseBody {
	s.ProjectMaterials = v
	return s
}

func (s *AddEditingProjectMaterialsResponseBody) SetRequestId(v string) *AddEditingProjectMaterialsResponseBody {
	s.RequestId = &v
	return s
}

type AddEditingProjectMaterialsResponseBodyLiveMaterials struct {
	// The application name of the live stream.
	//
	// example:
	//
	// testrecord
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The domain name of the live stream.
	//
	// example:
	//
	// test.alivecdn.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The URL of the live stream.
	//
	// example:
	//
	// rtmp://test.alivecdn.com/testrecord/teststream
	LiveUrl *string `json:"LiveUrl,omitempty" xml:"LiveUrl,omitempty"`
	// The name of the live stream.
	//
	// example:
	//
	// teststream
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s AddEditingProjectMaterialsResponseBodyLiveMaterials) String() string {
	return tea.Prettify(s)
}

func (s AddEditingProjectMaterialsResponseBodyLiveMaterials) GoString() string {
	return s.String()
}

func (s *AddEditingProjectMaterialsResponseBodyLiveMaterials) SetAppName(v string) *AddEditingProjectMaterialsResponseBodyLiveMaterials {
	s.AppName = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyLiveMaterials) SetDomainName(v string) *AddEditingProjectMaterialsResponseBodyLiveMaterials {
	s.DomainName = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyLiveMaterials) SetLiveUrl(v string) *AddEditingProjectMaterialsResponseBodyLiveMaterials {
	s.LiveUrl = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyLiveMaterials) SetStreamName(v string) *AddEditingProjectMaterialsResponseBodyLiveMaterials {
	s.StreamName = &v
	return s
}

type AddEditingProjectMaterialsResponseBodyMediaInfos struct {
	// FileInfos
	FileInfoList []*AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoList `json:"FileInfoList,omitempty" xml:"FileInfoList,omitempty" type:"Repeated"`
	// The basic information of the media assets.
	MediaBasicInfo *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// The ID of the media asset.
	//
	// example:
	//
	// *****5cb2e35433198daae94a72*****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s AddEditingProjectMaterialsResponseBodyMediaInfos) String() string {
	return tea.Prettify(s)
}

func (s AddEditingProjectMaterialsResponseBodyMediaInfos) GoString() string {
	return s.String()
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfos) SetFileInfoList(v []*AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoList) *AddEditingProjectMaterialsResponseBodyMediaInfos {
	s.FileInfoList = v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfos) SetMediaBasicInfo(v *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) *AddEditingProjectMaterialsResponseBodyMediaInfos {
	s.MediaBasicInfo = v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfos) SetMediaId(v string) *AddEditingProjectMaterialsResponseBodyMediaInfos {
	s.MediaId = &v
	return s
}

type AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoList struct {
	// The basic information of the file, including the duration and size.
	FileBasicInfo *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
}

func (s AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoList) GoString() string {
	return s.String()
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoList) SetFileBasicInfo(v *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoList {
	s.FileBasicInfo = v
	return s
}

type AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo struct {
	// The bitrate.
	//
	// example:
	//
	// 1132.68
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The duration.
	//
	// example:
	//
	// 216.206667
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The file name.
	//
	// example:
	//
	// example.mp4
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The file size. Unit: bytes.
	//
	// example:
	//
	// 30611502
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// The file status.
	//
	// \\-Uploading
	//
	// \\-Normal
	//
	// \\-UploadFail
	//
	// \\-Disable
	//
	// \\-Deleted
	//
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// The file type.
	//
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// The Object Storage Service (OSS) URL of the file.
	//
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// The container format.
	//
	// example:
	//
	// mov,mp4,m4a,3gp,3g2,mj2
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// The height.
	//
	// example:
	//
	// 540
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The region in which the file resides.
	//
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The width.
	//
	// example:
	//
	// 960
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) GoString() string {
	return s.String()
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetBitrate(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetDuration(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileName(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileSize(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileStatus(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileType(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileUrl(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFormatName(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetHeight(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Height = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetRegion(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Region = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetWidth(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Width = &v
	return s
}

type AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo struct {
	// The business type of the media asset.
	//
	// example:
	//
	// general
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// The category of the media asset.
	//
	// example:
	//
	// audio
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The thumbnail URL of the media asset.
	//
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// The time when the media asset was created.
	//
	// example:
	//
	// 2020-12-23T03:32:59Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the media asset was deleted.
	//
	// example:
	//
	// 2020-12-23T03:32:59Z
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	// The description of the media asset.
	//
	// example:
	//
	// sample_description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The URL of the media asset in another service.
	//
	// example:
	//
	// http://bucket.oss-cn-shanghai.aliyuncs.com/file.mp4
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// *****5cb2e35433198daae94a72*****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The tags of the media asset.
	//
	// example:
	//
	// sample_tag
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// The type of the media asset.
	//
	// example:
	//
	// Video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// The time when the media asset was last modified.
	//
	// example:
	//
	// 2020-12-23T03:32:59Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The snapshots of the media asset.
	//
	// example:
	//
	// null
	Snapshots *string `json:"Snapshots,omitempty" xml:"Snapshots,omitempty"`
	// The source of the media asset.
	//
	// example:
	//
	// oss
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The sprite of the media asset.
	//
	// example:
	//
	// http://outin-example.oss-cn-shanghai.aliyuncs.com/test.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	SpriteImages *string `json:"SpriteImages,omitempty" xml:"SpriteImages,omitempty"`
	// The status of the media asset. Valid values:
	//
	// \\- Init
	//
	// \\- Preparing
	//
	// \\- PrepareFail
	//
	// \\- Normal
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The title of the media asset.
	//
	// example:
	//
	// default_title_2020-12-23T03:32:59Z
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// The transcoding status of the media asset.
	//
	// example:
	//
	// Init
	TranscodeStatus *string `json:"TranscodeStatus,omitempty" xml:"TranscodeStatus,omitempty"`
	// The user data.
	//
	// example:
	//
	// userData
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetBusinessType(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetCategory(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetCoverURL(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetCreateTime(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetDeletedTime(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetDescription(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetInputURL(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.InputURL = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetMediaId(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetMediaTags(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetMediaType(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetModifiedTime(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetSnapshots(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Snapshots = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetSource(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetSpriteImages(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.SpriteImages = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetStatus(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetTitle(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetTranscodeStatus(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.TranscodeStatus = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetUserData(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.UserData = &v
	return s
}

type AddEditingProjectMaterialsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddEditingProjectMaterialsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddEditingProjectMaterialsResponse) String() string {
	return tea.Prettify(s)
}

func (s AddEditingProjectMaterialsResponse) GoString() string {
	return s.String()
}

func (s *AddEditingProjectMaterialsResponse) SetHeaders(v map[string]*string) *AddEditingProjectMaterialsResponse {
	s.Headers = v
	return s
}

func (s *AddEditingProjectMaterialsResponse) SetStatusCode(v int32) *AddEditingProjectMaterialsResponse {
	s.StatusCode = &v
	return s
}

func (s *AddEditingProjectMaterialsResponse) SetBody(v *AddEditingProjectMaterialsResponseBody) *AddEditingProjectMaterialsResponse {
	s.Body = v
	return s
}

type AddFavoritePublicMediaRequest struct {
	// example:
	//
	// icepublic-****7213c6050cbc66750b469701****,icepublic-****0b4697017213c6050cbc6675****
	MediaIds *string `json:"MediaIds,omitempty" xml:"MediaIds,omitempty"`
}

func (s AddFavoritePublicMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s AddFavoritePublicMediaRequest) GoString() string {
	return s.String()
}

func (s *AddFavoritePublicMediaRequest) SetMediaIds(v string) *AddFavoritePublicMediaRequest {
	s.MediaIds = &v
	return s
}

type AddFavoritePublicMediaResponseBody struct {
	IgnoredList []*string `json:"IgnoredList,omitempty" xml:"IgnoredList,omitempty" type:"Repeated"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddFavoritePublicMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddFavoritePublicMediaResponseBody) GoString() string {
	return s.String()
}

func (s *AddFavoritePublicMediaResponseBody) SetIgnoredList(v []*string) *AddFavoritePublicMediaResponseBody {
	s.IgnoredList = v
	return s
}

func (s *AddFavoritePublicMediaResponseBody) SetRequestId(v string) *AddFavoritePublicMediaResponseBody {
	s.RequestId = &v
	return s
}

type AddFavoritePublicMediaResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddFavoritePublicMediaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddFavoritePublicMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s AddFavoritePublicMediaResponse) GoString() string {
	return s.String()
}

func (s *AddFavoritePublicMediaResponse) SetHeaders(v map[string]*string) *AddFavoritePublicMediaResponse {
	s.Headers = v
	return s
}

func (s *AddFavoritePublicMediaResponse) SetStatusCode(v int32) *AddFavoritePublicMediaResponse {
	s.StatusCode = &v
	return s
}

func (s *AddFavoritePublicMediaResponse) SetBody(v *AddFavoritePublicMediaResponseBody) *AddFavoritePublicMediaResponse {
	s.Body = v
	return s
}

type AddMediaConnectFlowInputRequest struct {
	// The IP address whitelist in CIDR format. Separate multiple CIDR blocks with commas (,).
	//
	// example:
	//
	// 19.168.1.1/32,18.168.1.1/16
	Cidrs *string `json:"Cidrs,omitempty" xml:"Cidrs,omitempty"`
	// The flow ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 34900dc6-90ec-4968-af3c-fcd87f231a5f
	FlowId *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	// The source URL. This parameter is required when the source type is RTMP-PULL or SRT-Listener.
	//
	// example:
	//
	// rtmp://pull.test.alivecdn.com/live/alitest
	InputFromUrl *string `json:"InputFromUrl,omitempty" xml:"InputFromUrl,omitempty"`
	// The source name.
	//
	// This parameter is required.
	//
	// example:
	//
	// AliTestInput
	InputName *string `json:"InputName,omitempty" xml:"InputName,omitempty"`
	// The source type.
	//
	// Valid values:
	//
	// 	- RTMP-PUSH
	//
	// 	- SRT-Caller
	//
	// 	- RTMP-PULL
	//
	// 	- SRT-Listener
	//
	// 	- Flow
	//
	// This parameter is required.
	//
	// example:
	//
	// RTMP-PUSH
	InputProtocol *string `json:"InputProtocol,omitempty" xml:"InputProtocol,omitempty"`
	// The maximum bitrate. Unit: bit/s.
	//
	// example:
	//
	// 2000000
	MaxBitrate *int32 `json:"MaxBitrate,omitempty" xml:"MaxBitrate,omitempty"`
	// The ID of the source flow. This parameter is required when the source type is Flow.
	//
	// example:
	//
	// 805fbdd0-575e-4146-b35d-ec7f63937b20
	PairFlowId *string `json:"PairFlowId,omitempty" xml:"PairFlowId,omitempty"`
	// The output of the source flow. This parameter is required when the source type is Flow.
	//
	// example:
	//
	// AliTestOutput
	PairOutputName *string `json:"PairOutputName,omitempty" xml:"PairOutputName,omitempty"`
	// The latency for the SRT stream. This parameter is required the source type is SRT-Listener or SRT-Caller.
	//
	// example:
	//
	// 1000
	SrtLatency *int32 `json:"SrtLatency,omitempty" xml:"SrtLatency,omitempty"`
	// The SRT key. This parameter is required when the source type is SRT-Listener or SRT-Caller.
	//
	// example:
	//
	// BETTERG08S01
	SrtPassphrase *string `json:"SrtPassphrase,omitempty" xml:"SrtPassphrase,omitempty"`
	// The encryption key length. This parameter is required when the source type is SRT-Listener or SRT-Caller.
	//
	// Valid values:
	//
	// 	- 0
	//
	// 	- 16
	//
	// 	- 24
	//
	// 	- 32
	//
	// example:
	//
	// 32
	SrtPbkeyLen *string `json:"SrtPbkeyLen,omitempty" xml:"SrtPbkeyLen,omitempty"`
}

func (s AddMediaConnectFlowInputRequest) String() string {
	return tea.Prettify(s)
}

func (s AddMediaConnectFlowInputRequest) GoString() string {
	return s.String()
}

func (s *AddMediaConnectFlowInputRequest) SetCidrs(v string) *AddMediaConnectFlowInputRequest {
	s.Cidrs = &v
	return s
}

func (s *AddMediaConnectFlowInputRequest) SetFlowId(v string) *AddMediaConnectFlowInputRequest {
	s.FlowId = &v
	return s
}

func (s *AddMediaConnectFlowInputRequest) SetInputFromUrl(v string) *AddMediaConnectFlowInputRequest {
	s.InputFromUrl = &v
	return s
}

func (s *AddMediaConnectFlowInputRequest) SetInputName(v string) *AddMediaConnectFlowInputRequest {
	s.InputName = &v
	return s
}

func (s *AddMediaConnectFlowInputRequest) SetInputProtocol(v string) *AddMediaConnectFlowInputRequest {
	s.InputProtocol = &v
	return s
}

func (s *AddMediaConnectFlowInputRequest) SetMaxBitrate(v int32) *AddMediaConnectFlowInputRequest {
	s.MaxBitrate = &v
	return s
}

func (s *AddMediaConnectFlowInputRequest) SetPairFlowId(v string) *AddMediaConnectFlowInputRequest {
	s.PairFlowId = &v
	return s
}

func (s *AddMediaConnectFlowInputRequest) SetPairOutputName(v string) *AddMediaConnectFlowInputRequest {
	s.PairOutputName = &v
	return s
}

func (s *AddMediaConnectFlowInputRequest) SetSrtLatency(v int32) *AddMediaConnectFlowInputRequest {
	s.SrtLatency = &v
	return s
}

func (s *AddMediaConnectFlowInputRequest) SetSrtPassphrase(v string) *AddMediaConnectFlowInputRequest {
	s.SrtPassphrase = &v
	return s
}

func (s *AddMediaConnectFlowInputRequest) SetSrtPbkeyLen(v string) *AddMediaConnectFlowInputRequest {
	s.SrtPbkeyLen = &v
	return s
}

type AddMediaConnectFlowInputResponseBody struct {
	// The response body.
	Content *AddMediaConnectFlowInputResponseBodyContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Struct"`
	// The call description.
	//
	// example:
	//
	// OK
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 11357BE8-4C54-58EA-890A-5AB646EDE4B2
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The returned error code. A value of 0 indicates the call is successful.
	//
	// example:
	//
	// 0
	RetCode *int32 `json:"RetCode,omitempty" xml:"RetCode,omitempty"`
}

func (s AddMediaConnectFlowInputResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddMediaConnectFlowInputResponseBody) GoString() string {
	return s.String()
}

func (s *AddMediaConnectFlowInputResponseBody) SetContent(v *AddMediaConnectFlowInputResponseBodyContent) *AddMediaConnectFlowInputResponseBody {
	s.Content = v
	return s
}

func (s *AddMediaConnectFlowInputResponseBody) SetDescription(v string) *AddMediaConnectFlowInputResponseBody {
	s.Description = &v
	return s
}

func (s *AddMediaConnectFlowInputResponseBody) SetRequestId(v string) *AddMediaConnectFlowInputResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddMediaConnectFlowInputResponseBody) SetRetCode(v int32) *AddMediaConnectFlowInputResponseBody {
	s.RetCode = &v
	return s
}

type AddMediaConnectFlowInputResponseBodyContent struct {
	// The source URL.
	//
	// example:
	//
	// rtmp://1.2.3.4:1935/live/AliTestInput_8666ec062190f00e263012666319a5be
	InputUrl *string `json:"InputUrl,omitempty" xml:"InputUrl,omitempty"`
}

func (s AddMediaConnectFlowInputResponseBodyContent) String() string {
	return tea.Prettify(s)
}

func (s AddMediaConnectFlowInputResponseBodyContent) GoString() string {
	return s.String()
}

func (s *AddMediaConnectFlowInputResponseBodyContent) SetInputUrl(v string) *AddMediaConnectFlowInputResponseBodyContent {
	s.InputUrl = &v
	return s
}

type AddMediaConnectFlowInputResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddMediaConnectFlowInputResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddMediaConnectFlowInputResponse) String() string {
	return tea.Prettify(s)
}

func (s AddMediaConnectFlowInputResponse) GoString() string {
	return s.String()
}

func (s *AddMediaConnectFlowInputResponse) SetHeaders(v map[string]*string) *AddMediaConnectFlowInputResponse {
	s.Headers = v
	return s
}

func (s *AddMediaConnectFlowInputResponse) SetStatusCode(v int32) *AddMediaConnectFlowInputResponse {
	s.StatusCode = &v
	return s
}

func (s *AddMediaConnectFlowInputResponse) SetBody(v *AddMediaConnectFlowInputResponseBody) *AddMediaConnectFlowInputResponse {
	s.Body = v
	return s
}

type AddMediaConnectFlowOutputRequest struct {
	// The IP address whitelist in CIDR format. Separate multiple CIDR blocks with commas (,).
	//
	// example:
	//
	// 83.17.231.31/32
	Cidrs *string `json:"Cidrs,omitempty" xml:"Cidrs,omitempty"`
	// The flow ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 34900dc6-90ec-4968-af3c-fcd87f231a5f
	FlowId *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	// The output name.
	//
	// This parameter is required.
	//
	// example:
	//
	// AliTestOutput
	OutputName *string `json:"OutputName,omitempty" xml:"OutputName,omitempty"`
	// The output type.
	//
	// Valid values:
	//
	// 	- RTMP-PUSH
	//
	// 	- SRT-Caller
	//
	// 	- RTMP-PULL
	//
	// 	- SRT-Listener
	//
	// 	- Flow
	//
	// This parameter is required.
	//
	// example:
	//
	// RTMP-PULL
	OutputProtocol *string `json:"OutputProtocol,omitempty" xml:"OutputProtocol,omitempty"`
	// The output URL. This parameter is required when OutputProtocol is set to RTMP-PUSH or SRT-Caller.
	//
	// example:
	//
	// rtmp://push.test.alivecdn.com/live/alitest
	OutputToUrl *string `json:"OutputToUrl,omitempty" xml:"OutputToUrl,omitempty"`
	// The ID of the destination flow. This parameter is required when OutputProtocol is set to Flow.
	//
	// example:
	//
	// 8666ec062190f00e263012666319a5be
	PairFlowId *string `json:"PairFlowId,omitempty" xml:"PairFlowId,omitempty"`
	// The source name of the destination flow. This parameter is required when OutputProtocol is set to Flow.
	//
	// example:
	//
	// AliTestInput
	PairInputName *string `json:"PairInputName,omitempty" xml:"PairInputName,omitempty"`
	// The maximum number of viewers.
	//
	// example:
	//
	// 5
	PlayerLimit *int32 `json:"PlayerLimit,omitempty" xml:"PlayerLimit,omitempty"`
	// The latency for the SRT stream. This parameter is required when the source type is SRT-Listener or SRT-Caller.
	//
	// example:
	//
	// 1000
	SrtLatency *int32 `json:"SrtLatency,omitempty" xml:"SrtLatency,omitempty"`
	// The SRT key. This parameter is required when the source type is SRT-Listener or SRT-Caller.
	//
	// example:
	//
	// BETTERG08S01
	SrtPassphrase *string `json:"SrtPassphrase,omitempty" xml:"SrtPassphrase,omitempty"`
	// The encryption key length. This parameter is required when the source type is SRT-Listener or SRT-Caller.
	//
	// example:
	//
	// 32
	SrtPbkeyLen *string `json:"SrtPbkeyLen,omitempty" xml:"SrtPbkeyLen,omitempty"`
}

func (s AddMediaConnectFlowOutputRequest) String() string {
	return tea.Prettify(s)
}

func (s AddMediaConnectFlowOutputRequest) GoString() string {
	return s.String()
}

func (s *AddMediaConnectFlowOutputRequest) SetCidrs(v string) *AddMediaConnectFlowOutputRequest {
	s.Cidrs = &v
	return s
}

func (s *AddMediaConnectFlowOutputRequest) SetFlowId(v string) *AddMediaConnectFlowOutputRequest {
	s.FlowId = &v
	return s
}

func (s *AddMediaConnectFlowOutputRequest) SetOutputName(v string) *AddMediaConnectFlowOutputRequest {
	s.OutputName = &v
	return s
}

func (s *AddMediaConnectFlowOutputRequest) SetOutputProtocol(v string) *AddMediaConnectFlowOutputRequest {
	s.OutputProtocol = &v
	return s
}

func (s *AddMediaConnectFlowOutputRequest) SetOutputToUrl(v string) *AddMediaConnectFlowOutputRequest {
	s.OutputToUrl = &v
	return s
}

func (s *AddMediaConnectFlowOutputRequest) SetPairFlowId(v string) *AddMediaConnectFlowOutputRequest {
	s.PairFlowId = &v
	return s
}

func (s *AddMediaConnectFlowOutputRequest) SetPairInputName(v string) *AddMediaConnectFlowOutputRequest {
	s.PairInputName = &v
	return s
}

func (s *AddMediaConnectFlowOutputRequest) SetPlayerLimit(v int32) *AddMediaConnectFlowOutputRequest {
	s.PlayerLimit = &v
	return s
}

func (s *AddMediaConnectFlowOutputRequest) SetSrtLatency(v int32) *AddMediaConnectFlowOutputRequest {
	s.SrtLatency = &v
	return s
}

func (s *AddMediaConnectFlowOutputRequest) SetSrtPassphrase(v string) *AddMediaConnectFlowOutputRequest {
	s.SrtPassphrase = &v
	return s
}

func (s *AddMediaConnectFlowOutputRequest) SetSrtPbkeyLen(v string) *AddMediaConnectFlowOutputRequest {
	s.SrtPbkeyLen = &v
	return s
}

type AddMediaConnectFlowOutputResponseBody struct {
	// The response body.
	Content *AddMediaConnectFlowOutputResponseBodyContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Struct"`
	// The call description.
	//
	// example:
	//
	// ok
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 11AA9E73-FBA0-58DC-97BA-D606D847BCB6
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The returned error code. A value of 0 indicates that the call is successful.
	//
	// example:
	//
	// 0
	RetCode *int32 `json:"RetCode,omitempty" xml:"RetCode,omitempty"`
}

func (s AddMediaConnectFlowOutputResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddMediaConnectFlowOutputResponseBody) GoString() string {
	return s.String()
}

func (s *AddMediaConnectFlowOutputResponseBody) SetContent(v *AddMediaConnectFlowOutputResponseBodyContent) *AddMediaConnectFlowOutputResponseBody {
	s.Content = v
	return s
}

func (s *AddMediaConnectFlowOutputResponseBody) SetDescription(v string) *AddMediaConnectFlowOutputResponseBody {
	s.Description = &v
	return s
}

func (s *AddMediaConnectFlowOutputResponseBody) SetRequestId(v string) *AddMediaConnectFlowOutputResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddMediaConnectFlowOutputResponseBody) SetRetCode(v int32) *AddMediaConnectFlowOutputResponseBody {
	s.RetCode = &v
	return s
}

type AddMediaConnectFlowOutputResponseBodyContent struct {
	// The output URL.
	//
	// example:
	//
	// srt://1.2.3.4:1025
	OutputUrl *string `json:"OutputUrl,omitempty" xml:"OutputUrl,omitempty"`
}

func (s AddMediaConnectFlowOutputResponseBodyContent) String() string {
	return tea.Prettify(s)
}

func (s AddMediaConnectFlowOutputResponseBodyContent) GoString() string {
	return s.String()
}

func (s *AddMediaConnectFlowOutputResponseBodyContent) SetOutputUrl(v string) *AddMediaConnectFlowOutputResponseBodyContent {
	s.OutputUrl = &v
	return s
}

type AddMediaConnectFlowOutputResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddMediaConnectFlowOutputResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddMediaConnectFlowOutputResponse) String() string {
	return tea.Prettify(s)
}

func (s AddMediaConnectFlowOutputResponse) GoString() string {
	return s.String()
}

func (s *AddMediaConnectFlowOutputResponse) SetHeaders(v map[string]*string) *AddMediaConnectFlowOutputResponse {
	s.Headers = v
	return s
}

func (s *AddMediaConnectFlowOutputResponse) SetStatusCode(v int32) *AddMediaConnectFlowOutputResponse {
	s.StatusCode = &v
	return s
}

func (s *AddMediaConnectFlowOutputResponse) SetBody(v *AddMediaConnectFlowOutputResponseBody) *AddMediaConnectFlowOutputResponse {
	s.Body = v
	return s
}

type AddMediaMarksRequest struct {
	// The ID of the media asset.
	//
	// This parameter is required.
	//
	// example:
	//
	// 53afdf003a2171ed9c6a16b5feac6402
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The mark information. The value must be a JSONArray.
	//
	// This parameter is required.
	MediaMarks *string `json:"MediaMarks,omitempty" xml:"MediaMarks,omitempty"`
}

func (s AddMediaMarksRequest) String() string {
	return tea.Prettify(s)
}

func (s AddMediaMarksRequest) GoString() string {
	return s.String()
}

func (s *AddMediaMarksRequest) SetMediaId(v string) *AddMediaMarksRequest {
	s.MediaId = &v
	return s
}

func (s *AddMediaMarksRequest) SetMediaMarks(v string) *AddMediaMarksRequest {
	s.MediaMarks = &v
	return s
}

type AddMediaMarksResponseBody struct {
	// The ID of the media asset.
	//
	// example:
	//
	// 53afdf003a******6a16b5feac6402
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The IDs of the marks that are added.
	//
	// example:
	//
	// mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60
	MediaMarkIds *string `json:"MediaMarkIds,omitempty" xml:"MediaMarkIds,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 771A1414-27BF-53E6-AB73-EFCB*****ACF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddMediaMarksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddMediaMarksResponseBody) GoString() string {
	return s.String()
}

func (s *AddMediaMarksResponseBody) SetMediaId(v string) *AddMediaMarksResponseBody {
	s.MediaId = &v
	return s
}

func (s *AddMediaMarksResponseBody) SetMediaMarkIds(v string) *AddMediaMarksResponseBody {
	s.MediaMarkIds = &v
	return s
}

func (s *AddMediaMarksResponseBody) SetRequestId(v string) *AddMediaMarksResponseBody {
	s.RequestId = &v
	return s
}

type AddMediaMarksResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddMediaMarksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddMediaMarksResponse) String() string {
	return tea.Prettify(s)
}

func (s AddMediaMarksResponse) GoString() string {
	return s.String()
}

func (s *AddMediaMarksResponse) SetHeaders(v map[string]*string) *AddMediaMarksResponse {
	s.Headers = v
	return s
}

func (s *AddMediaMarksResponse) SetStatusCode(v int32) *AddMediaMarksResponse {
	s.StatusCode = &v
	return s
}

func (s *AddMediaMarksResponse) SetBody(v *AddMediaMarksResponseBody) *AddMediaMarksResponse {
	s.Body = v
	return s
}

type AddTemplateRequest struct {
	// example:
	//
	// 参见Timeline模板Config文档
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// The URL of the template thumbnail.
	//
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg
	CoverUrl *string `json:"CoverUrl,omitempty" xml:"CoverUrl,omitempty"`
	// The name of the custom template.
	//
	// example:
	//
	// 视频添加水印模板
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the template preview video.
	//
	// example:
	//
	// ****01bf24bf41c78b2754cb3187****
	PreviewMedia *string `json:"PreviewMedia,omitempty" xml:"PreviewMedia,omitempty"`
	// The IDs of the materials associated with the template for use by the regular template editor.
	//
	// example:
	//
	// {"video":["1805a0c6ca544fb395a06ca683619655"]}
	RelatedMediaids *string `json:"RelatedMediaids,omitempty" xml:"RelatedMediaids,omitempty"`
	// The source from which the template is created. Valid values:
	//
	// 	- OpenAPI
	//
	// 	- AliyunConsole
	//
	// 	- WebSDK
	//
	// <!---->
	//
	// example:
	//
	// OpenAPI
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The template state. Valid values:
	//
	// 	- Available: The template is available.
	//
	// 	- Created: The template is created but not ready for use.
	//
	// 	- Uploading: The video is being uploaded.
	//
	// 	- Processing: The advanced template is being processed.
	//
	// 	- UploadFailed: Failed to upload the video.
	//
	// 	- ProcessFailed: Failed to process the advanced template.
	//
	// <!---->
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The template type. Valid values:
	//
	// 	- Timeline: a regular template created based on the timeline of a video editing project, in which multiple materials are arranged in sequence across multiple layers. It can be used to convert text and images into videos, create photo albums, add opening and closing parts, and apply the default watermark.
	//
	// 	- VETemplate: an advanced template created using effects of Adobe After Effects (AE). It can be used to produce complex animations and advanced media effects.
	//
	// <!---->
	//
	// example:
	//
	// Timeline
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AddTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateRequest) GoString() string {
	return s.String()
}

func (s *AddTemplateRequest) SetConfig(v string) *AddTemplateRequest {
	s.Config = &v
	return s
}

func (s *AddTemplateRequest) SetCoverUrl(v string) *AddTemplateRequest {
	s.CoverUrl = &v
	return s
}

func (s *AddTemplateRequest) SetName(v string) *AddTemplateRequest {
	s.Name = &v
	return s
}

func (s *AddTemplateRequest) SetPreviewMedia(v string) *AddTemplateRequest {
	s.PreviewMedia = &v
	return s
}

func (s *AddTemplateRequest) SetRelatedMediaids(v string) *AddTemplateRequest {
	s.RelatedMediaids = &v
	return s
}

func (s *AddTemplateRequest) SetSource(v string) *AddTemplateRequest {
	s.Source = &v
	return s
}

func (s *AddTemplateRequest) SetStatus(v string) *AddTemplateRequest {
	s.Status = &v
	return s
}

func (s *AddTemplateRequest) SetType(v string) *AddTemplateRequest {
	s.Type = &v
	return s
}

type AddTemplateResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ****2876-6263-4B75-8F2C-CD0F7FCF****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The template information.
	Template *AddTemplateResponseBodyTemplate `json:"Template,omitempty" xml:"Template,omitempty" type:"Struct"`
}

func (s AddTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBody) SetRequestId(v string) *AddTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddTemplateResponseBody) SetTemplate(v *AddTemplateResponseBodyTemplate) *AddTemplateResponseBody {
	s.Template = v
	return s
}

type AddTemplateResponseBodyTemplate struct {
	// The template configurations.
	//
	// example:
	//
	// 参见Timeline模板Config文档
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// The URL of the template thumbnail.
	//
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg
	CoverUrl *string `json:"CoverUrl,omitempty" xml:"CoverUrl,omitempty"`
	// The source from which the template was created.
	//
	// Valid values:
	//
	// 	- AliyunConsole
	//
	// 	- WebSDK
	//
	// 	- OpenAPI
	//
	// example:
	//
	// OpenAPI
	CreateSource *string `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	// The source from which the template was modified.
	//
	// Valid values:
	//
	// 	- AliyunConsole
	//
	// 	- WebSDK
	//
	// 	- OpenAPI
	//
	// example:
	//
	// OpenAPI
	ModifiedSource *string `json:"ModifiedSource,omitempty" xml:"ModifiedSource,omitempty"`
	// The template name.
	//
	// example:
	//
	// 视频添加水印模板
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the preview video.
	//
	// example:
	//
	// ****01bf24bf41c78b2754cb3187****
	PreviewMedia *string `json:"PreviewMedia,omitempty" xml:"PreviewMedia,omitempty"`
	// The template state.
	//
	// Valid values:
	//
	// 	- UploadFailed: Failed to upload the video.
	//
	// 	- ProcessFailed: Failed to process the advanced template.
	//
	// 	- Available: The template is available.
	//
	// 	- Uploading: The video is being uploaded.
	//
	// 	- Created: The template is created but not ready for use.
	//
	// 	- Processing: The advanced template is being processed.
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The template ID.
	//
	// example:
	//
	// ****01bf24bf41c78b2754cb3187****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The template type.
	//
	// Valid values:
	//
	// 	- Timeline: regular template.
	//
	// 	- VETemplate: advanced template.
	//
	// example:
	//
	// Timeline
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AddTemplateResponseBodyTemplate) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBodyTemplate) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBodyTemplate) SetConfig(v string) *AddTemplateResponseBodyTemplate {
	s.Config = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetCoverUrl(v string) *AddTemplateResponseBodyTemplate {
	s.CoverUrl = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetCreateSource(v string) *AddTemplateResponseBodyTemplate {
	s.CreateSource = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetModifiedSource(v string) *AddTemplateResponseBodyTemplate {
	s.ModifiedSource = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetName(v string) *AddTemplateResponseBodyTemplate {
	s.Name = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetPreviewMedia(v string) *AddTemplateResponseBodyTemplate {
	s.PreviewMedia = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetStatus(v string) *AddTemplateResponseBodyTemplate {
	s.Status = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetTemplateId(v string) *AddTemplateResponseBodyTemplate {
	s.TemplateId = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetType(v string) *AddTemplateResponseBodyTemplate {
	s.Type = &v
	return s
}

type AddTemplateResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponse) GoString() string {
	return s.String()
}

func (s *AddTemplateResponse) SetHeaders(v map[string]*string) *AddTemplateResponse {
	s.Headers = v
	return s
}

func (s *AddTemplateResponse) SetStatusCode(v int32) *AddTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *AddTemplateResponse) SetBody(v *AddTemplateResponseBody) *AddTemplateResponse {
	s.Body = v
	return s
}

type AlterSearchIndexRequest struct {
	// The configurations of the index.
	//
	// >  You must specify either IndexStatus or IndexConfig.
	//
	// example:
	//
	// {}
	IndexConfig *string `json:"IndexConfig,omitempty" xml:"IndexConfig,omitempty"`
	// The state of the index. Valid values:
	//
	// 	- active (default): the index is enabled.
	//
	// 	- Deactive: the index is not enabled.
	//
	// >  You must specify either IndexStatus or IndexConfig.
	//
	// example:
	//
	// Active
	IndexStatus *string `json:"IndexStatus,omitempty" xml:"IndexStatus,omitempty"`
	// The category of the index. Valid values:
	//
	// 	- mm: large visual model.
	//
	// 	- face: face recognition.
	//
	// 	- aiLabel: smart tagging.
	//
	// This parameter is required.
	//
	// example:
	//
	// mm
	IndexType *string `json:"IndexType,omitempty" xml:"IndexType,omitempty"`
	// The name of the search library.
	//
	// 	- If you leave this parameter empty, the search index is created in the default search library of Intelligent Media Service (IMS). Default value: ims-default-search-lib.
	//
	// 	- To query information about an existing search library, call the [QuerySearchLib](https://help.aliyun.com/document_detail/2584455.html) API operation.
	//
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
}

func (s AlterSearchIndexRequest) String() string {
	return tea.Prettify(s)
}

func (s AlterSearchIndexRequest) GoString() string {
	return s.String()
}

func (s *AlterSearchIndexRequest) SetIndexConfig(v string) *AlterSearchIndexRequest {
	s.IndexConfig = &v
	return s
}

func (s *AlterSearchIndexRequest) SetIndexStatus(v string) *AlterSearchIndexRequest {
	s.IndexStatus = &v
	return s
}

func (s *AlterSearchIndexRequest) SetIndexType(v string) *AlterSearchIndexRequest {
	s.IndexType = &v
	return s
}

func (s *AlterSearchIndexRequest) SetSearchLibName(v string) *AlterSearchIndexRequest {
	s.SearchLibName = &v
	return s
}

type AlterSearchIndexResponseBody struct {
	// The status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AlterSearchIndexResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AlterSearchIndexResponseBody) GoString() string {
	return s.String()
}

func (s *AlterSearchIndexResponseBody) SetCode(v string) *AlterSearchIndexResponseBody {
	s.Code = &v
	return s
}

func (s *AlterSearchIndexResponseBody) SetRequestId(v string) *AlterSearchIndexResponseBody {
	s.RequestId = &v
	return s
}

func (s *AlterSearchIndexResponseBody) SetSuccess(v string) *AlterSearchIndexResponseBody {
	s.Success = &v
	return s
}

type AlterSearchIndexResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AlterSearchIndexResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AlterSearchIndexResponse) String() string {
	return tea.Prettify(s)
}

func (s AlterSearchIndexResponse) GoString() string {
	return s.String()
}

func (s *AlterSearchIndexResponse) SetHeaders(v map[string]*string) *AlterSearchIndexResponse {
	s.Headers = v
	return s
}

func (s *AlterSearchIndexResponse) SetStatusCode(v int32) *AlterSearchIndexResponse {
	s.StatusCode = &v
	return s
}

func (s *AlterSearchIndexResponse) SetBody(v *AlterSearchIndexResponseBody) *AlterSearchIndexResponse {
	s.Body = v
	return s
}

type BatchCreateVodPackagingAssetRequest struct {
	// The assets that you want to ingest.
	Assets []*BatchCreateVodPackagingAssetRequestAssets `json:"Assets,omitempty" xml:"Assets,omitempty" type:"Repeated"`
	// The name of the packaging group.
	//
	// example:
	//
	// vod_hls
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s BatchCreateVodPackagingAssetRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchCreateVodPackagingAssetRequest) GoString() string {
	return s.String()
}

func (s *BatchCreateVodPackagingAssetRequest) SetAssets(v []*BatchCreateVodPackagingAssetRequestAssets) *BatchCreateVodPackagingAssetRequest {
	s.Assets = v
	return s
}

func (s *BatchCreateVodPackagingAssetRequest) SetGroupName(v string) *BatchCreateVodPackagingAssetRequest {
	s.GroupName = &v
	return s
}

type BatchCreateVodPackagingAssetRequestAssets struct {
	// The name of the asset. The name must be unique and can be up to 128 characters in length. Letters, digits, underscores (_), and hyphens (-) are supported.
	//
	// example:
	//
	// 30min_movie
	AssetName *string `json:"AssetName,omitempty" xml:"AssetName,omitempty"`
	// The content ID in the digital rights management (DRM) system. The maximum length is 256 characters. Letters, digits, underscores (_), and hyphens (-) are supported.
	//
	// example:
	//
	// movie
	ContentId *string `json:"ContentId,omitempty" xml:"ContentId,omitempty"`
	// The asset input configurations.
	Input *BatchCreateVodPackagingAssetRequestAssetsInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
}

func (s BatchCreateVodPackagingAssetRequestAssets) String() string {
	return tea.Prettify(s)
}

func (s BatchCreateVodPackagingAssetRequestAssets) GoString() string {
	return s.String()
}

func (s *BatchCreateVodPackagingAssetRequestAssets) SetAssetName(v string) *BatchCreateVodPackagingAssetRequestAssets {
	s.AssetName = &v
	return s
}

func (s *BatchCreateVodPackagingAssetRequestAssets) SetContentId(v string) *BatchCreateVodPackagingAssetRequestAssets {
	s.ContentId = &v
	return s
}

func (s *BatchCreateVodPackagingAssetRequestAssets) SetInput(v *BatchCreateVodPackagingAssetRequestAssetsInput) *BatchCreateVodPackagingAssetRequestAssets {
	s.Input = v
	return s
}

type BatchCreateVodPackagingAssetRequestAssetsInput struct {
	// The URL of the media file. You can only specify a M3U8 file stored in Object Storage Service (OSS).
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The input type. Only OSS is supported.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s BatchCreateVodPackagingAssetRequestAssetsInput) String() string {
	return tea.Prettify(s)
}

func (s BatchCreateVodPackagingAssetRequestAssetsInput) GoString() string {
	return s.String()
}

func (s *BatchCreateVodPackagingAssetRequestAssetsInput) SetMedia(v string) *BatchCreateVodPackagingAssetRequestAssetsInput {
	s.Media = &v
	return s
}

func (s *BatchCreateVodPackagingAssetRequestAssetsInput) SetType(v string) *BatchCreateVodPackagingAssetRequestAssetsInput {
	s.Type = &v
	return s
}

type BatchCreateVodPackagingAssetShrinkRequest struct {
	// The assets that you want to ingest.
	AssetsShrink *string `json:"Assets,omitempty" xml:"Assets,omitempty"`
	// The name of the packaging group.
	//
	// example:
	//
	// vod_hls
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s BatchCreateVodPackagingAssetShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchCreateVodPackagingAssetShrinkRequest) GoString() string {
	return s.String()
}

func (s *BatchCreateVodPackagingAssetShrinkRequest) SetAssetsShrink(v string) *BatchCreateVodPackagingAssetShrinkRequest {
	s.AssetsShrink = &v
	return s
}

func (s *BatchCreateVodPackagingAssetShrinkRequest) SetGroupName(v string) *BatchCreateVodPackagingAssetShrinkRequest {
	s.GroupName = &v
	return s
}

type BatchCreateVodPackagingAssetResponseBody struct {
	// The name of the packaging group.
	//
	// example:
	//
	// vod_hls
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The results of asset ingestion.
	ResultList []*BatchCreateVodPackagingAssetResponseBodyResultList `json:"ResultList,omitempty" xml:"ResultList,omitempty" type:"Repeated"`
}

func (s BatchCreateVodPackagingAssetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchCreateVodPackagingAssetResponseBody) GoString() string {
	return s.String()
}

func (s *BatchCreateVodPackagingAssetResponseBody) SetGroupName(v string) *BatchCreateVodPackagingAssetResponseBody {
	s.GroupName = &v
	return s
}

func (s *BatchCreateVodPackagingAssetResponseBody) SetRequestId(v string) *BatchCreateVodPackagingAssetResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchCreateVodPackagingAssetResponseBody) SetResultList(v []*BatchCreateVodPackagingAssetResponseBodyResultList) *BatchCreateVodPackagingAssetResponseBody {
	s.ResultList = v
	return s
}

type BatchCreateVodPackagingAssetResponseBodyResultList struct {
	// The information about the ingested asset.
	Asset *VodPackagingAsset `json:"Asset,omitempty" xml:"Asset,omitempty"`
	// The error code for failed ingestion.
	//
	// example:
	//
	// InvalidParameter.PackagingAssetAlreadyExists
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message for failed ingestion.
	//
	// example:
	//
	// The specified packagingAsset "inputMovie" already exists
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s BatchCreateVodPackagingAssetResponseBodyResultList) String() string {
	return tea.Prettify(s)
}

func (s BatchCreateVodPackagingAssetResponseBodyResultList) GoString() string {
	return s.String()
}

func (s *BatchCreateVodPackagingAssetResponseBodyResultList) SetAsset(v *VodPackagingAsset) *BatchCreateVodPackagingAssetResponseBodyResultList {
	s.Asset = v
	return s
}

func (s *BatchCreateVodPackagingAssetResponseBodyResultList) SetCode(v string) *BatchCreateVodPackagingAssetResponseBodyResultList {
	s.Code = &v
	return s
}

func (s *BatchCreateVodPackagingAssetResponseBodyResultList) SetMessage(v string) *BatchCreateVodPackagingAssetResponseBodyResultList {
	s.Message = &v
	return s
}

type BatchCreateVodPackagingAssetResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchCreateVodPackagingAssetResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchCreateVodPackagingAssetResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchCreateVodPackagingAssetResponse) GoString() string {
	return s.String()
}

func (s *BatchCreateVodPackagingAssetResponse) SetHeaders(v map[string]*string) *BatchCreateVodPackagingAssetResponse {
	s.Headers = v
	return s
}

func (s *BatchCreateVodPackagingAssetResponse) SetStatusCode(v int32) *BatchCreateVodPackagingAssetResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchCreateVodPackagingAssetResponse) SetBody(v *BatchCreateVodPackagingAssetResponseBody) *BatchCreateVodPackagingAssetResponse {
	s.Body = v
	return s
}

type BatchGetMediaInfosRequest struct {
	// The additional information that you want to query about the media assets. By default, only BasicInfo is returned. The following additional information can be queried:
	//
	// \\- FileInfo
	//
	// \\- DynamicMetaData
	//
	// example:
	//
	// FileInfo,DynamicMetaData
	AdditionType *string `json:"AdditionType,omitempty" xml:"AdditionType,omitempty"`
	AuthTimeout  *int64  `json:"AuthTimeout,omitempty" xml:"AuthTimeout,omitempty"`
	// The IDs of the media assets that you want to query. Separate the IDs with commas (,).
	//
	// example:
	//
	// ******b48fb04483915d4f2cd8******,******c48fb37407365d4f2cd8******
	MediaIds *string `json:"MediaIds,omitempty" xml:"MediaIds,omitempty"`
}

func (s BatchGetMediaInfosRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchGetMediaInfosRequest) GoString() string {
	return s.String()
}

func (s *BatchGetMediaInfosRequest) SetAdditionType(v string) *BatchGetMediaInfosRequest {
	s.AdditionType = &v
	return s
}

func (s *BatchGetMediaInfosRequest) SetAuthTimeout(v int64) *BatchGetMediaInfosRequest {
	s.AuthTimeout = &v
	return s
}

func (s *BatchGetMediaInfosRequest) SetMediaIds(v string) *BatchGetMediaInfosRequest {
	s.MediaIds = &v
	return s
}

type BatchGetMediaInfosResponseBody struct {
	// The queried media assets.
	MediaInfos []*BatchGetMediaInfosResponseBodyMediaInfos `json:"MediaInfos,omitempty" xml:"MediaInfos,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BatchGetMediaInfosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchGetMediaInfosResponseBody) GoString() string {
	return s.String()
}

func (s *BatchGetMediaInfosResponseBody) SetMediaInfos(v []*BatchGetMediaInfosResponseBodyMediaInfos) *BatchGetMediaInfosResponseBody {
	s.MediaInfos = v
	return s
}

func (s *BatchGetMediaInfosResponseBody) SetRequestId(v string) *BatchGetMediaInfosResponseBody {
	s.RequestId = &v
	return s
}

type BatchGetMediaInfosResponseBodyMediaInfos struct {
	// FileInfos
	FileInfoList []*BatchGetMediaInfosResponseBodyMediaInfosFileInfoList `json:"FileInfoList,omitempty" xml:"FileInfoList,omitempty" type:"Repeated"`
	// The basic information of the media asset.
	MediaBasicInfo *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// The ID of the media asset.
	//
	// example:
	//
	// ******c48fb37407365d4f2cd8******
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s BatchGetMediaInfosResponseBodyMediaInfos) String() string {
	return tea.Prettify(s)
}

func (s BatchGetMediaInfosResponseBodyMediaInfos) GoString() string {
	return s.String()
}

func (s *BatchGetMediaInfosResponseBodyMediaInfos) SetFileInfoList(v []*BatchGetMediaInfosResponseBodyMediaInfosFileInfoList) *BatchGetMediaInfosResponseBodyMediaInfos {
	s.FileInfoList = v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfos) SetMediaBasicInfo(v *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) *BatchGetMediaInfosResponseBodyMediaInfos {
	s.MediaBasicInfo = v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfos) SetMediaId(v string) *BatchGetMediaInfosResponseBodyMediaInfos {
	s.MediaId = &v
	return s
}

type BatchGetMediaInfosResponseBodyMediaInfosFileInfoList struct {
	// The basic information of the file, including the duration and size.
	FileBasicInfo *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
}

func (s BatchGetMediaInfosResponseBodyMediaInfosFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s BatchGetMediaInfosResponseBodyMediaInfosFileInfoList) GoString() string {
	return s.String()
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoList) SetFileBasicInfo(v *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoList {
	s.FileBasicInfo = v
	return s
}

type BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo struct {
	// The bitrate.
	//
	// example:
	//
	// 1132.68
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The duration.
	//
	// example:
	//
	// 200
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The file name.
	//
	// example:
	//
	// example
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The file size. Unit: bytes.
	//
	// example:
	//
	// 30611502
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// The file status.
	//
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// The file type.
	//
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// The Object Storage Service (OSS) URL of the file.
	//
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// The container format.
	//
	// example:
	//
	// mov,mp4,m4a,3gp,3g2,mj2
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// The height.
	//
	// example:
	//
	// 1080
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The region in which the file resides.
	//
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The width.
	//
	// example:
	//
	// 1920
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) GoString() string {
	return s.String()
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetBitrate(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetDuration(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileName(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileSize(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileStatus(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileType(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileUrl(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFormatName(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetHeight(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Height = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetRegion(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Region = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetWidth(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Width = &v
	return s
}

type BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo struct {
	Biz *string `json:"Biz,omitempty" xml:"Biz,omitempty"`
	// The business type of the media asset.
	//
	// example:
	//
	// general
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// The category of the media asset.
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The thumbnail URL of the media asset.
	//
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// The time when the media asset was created.
	//
	// example:
	//
	// 2020-12-26T04:11:10Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the media asset was deleted.
	//
	// example:
	//
	// 2020-12-26T04:11:10Z
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	// The description of the media asset.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The URL of the media asset in another service.
	//
	// example:
	//
	// https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// MediaId
	//
	// example:
	//
	// ******c48fb37407365d4f2cd8******
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The tags of the media asset.
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// The type of the media asset. Valid values:
	//
	// \\- image
	//
	// \\- video
	//
	// \\- audio
	//
	// \\- text
	//
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// The time when the media asset was last modified.
	//
	// example:
	//
	// 2020-12-26T04:11:12Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The snapshots of the media asset.
	//
	// example:
	//
	// [{"bucket":"example-bucket","count":"3","iceJobId":"******f48f0e4154976b2b8c45******","location":"oss-cn-beijing","snapshotRegular":"example.jpg","templateId":"******e6a6440b29eb60bd7c******"}]
	Snapshots *string `json:"Snapshots,omitempty" xml:"Snapshots,omitempty"`
	// The source of the media asset. Valid values:
	//
	// \\- oss
	//
	// \\- vod
	//
	// example:
	//
	// oss
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The sprite.
	//
	// example:
	//
	// [{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]
	SpriteImages *string `json:"SpriteImages,omitempty" xml:"SpriteImages,omitempty"`
	// The status of the media asset.
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The title of the media asset.
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// The transcoding status of the media asset.
	//
	// example:
	//
	// Init
	TranscodeStatus *string `json:"TranscodeStatus,omitempty" xml:"TranscodeStatus,omitempty"`
	// The user data.
	//
	// example:
	//
	// userDataTest
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetBiz(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Biz = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetBusinessType(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetCategory(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetCoverURL(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetCreateTime(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetDeletedTime(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetDescription(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetInputURL(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.InputURL = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaId(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaTags(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaType(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetModifiedTime(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetSnapshots(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Snapshots = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetSource(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetSpriteImages(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.SpriteImages = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetStatus(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetTitle(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetTranscodeStatus(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.TranscodeStatus = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetUserData(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.UserData = &v
	return s
}

type BatchGetMediaInfosResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchGetMediaInfosResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchGetMediaInfosResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchGetMediaInfosResponse) GoString() string {
	return s.String()
}

func (s *BatchGetMediaInfosResponse) SetHeaders(v map[string]*string) *BatchGetMediaInfosResponse {
	s.Headers = v
	return s
}

func (s *BatchGetMediaInfosResponse) SetStatusCode(v int32) *BatchGetMediaInfosResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchGetMediaInfosResponse) SetBody(v *BatchGetMediaInfosResponseBody) *BatchGetMediaInfosResponse {
	s.Body = v
	return s
}

type CancelDNAJobRequest struct {
	// The ID of the media fingerprint analysis job that you want to cancel.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2288c6ca184c0e47098a5b665e2a12****
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CancelDNAJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelDNAJobRequest) GoString() string {
	return s.String()
}

func (s *CancelDNAJobRequest) SetJobId(v string) *CancelDNAJobRequest {
	s.JobId = &v
	return s
}

func (s *CancelDNAJobRequest) SetOwnerAccount(v string) *CancelDNAJobRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CancelDNAJobRequest) SetOwnerId(v int64) *CancelDNAJobRequest {
	s.OwnerId = &v
	return s
}

func (s *CancelDNAJobRequest) SetResourceOwnerAccount(v string) *CancelDNAJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CancelDNAJobRequest) SetResourceOwnerId(v int64) *CancelDNAJobRequest {
	s.ResourceOwnerId = &v
	return s
}

type CancelDNAJobResponseBody struct {
	// The job ID.
	//
	// example:
	//
	// 2288c6ca184c0e47098a5b665e2a12****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 25818875-5F78-4A13-BEF6-D7393642CA58
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CancelDNAJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelDNAJobResponseBody) GoString() string {
	return s.String()
}

func (s *CancelDNAJobResponseBody) SetJobId(v string) *CancelDNAJobResponseBody {
	s.JobId = &v
	return s
}

func (s *CancelDNAJobResponseBody) SetRequestId(v string) *CancelDNAJobResponseBody {
	s.RequestId = &v
	return s
}

type CancelDNAJobResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CancelDNAJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CancelDNAJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelDNAJobResponse) GoString() string {
	return s.String()
}

func (s *CancelDNAJobResponse) SetHeaders(v map[string]*string) *CancelDNAJobResponse {
	s.Headers = v
	return s
}

func (s *CancelDNAJobResponse) SetStatusCode(v int32) *CancelDNAJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelDNAJobResponse) SetBody(v *CancelDNAJobResponseBody) *CancelDNAJobResponse {
	s.Body = v
	return s
}

type CancelFavoritePublicMediaRequest struct {
	// example:
	//
	// icepublic-****7213c6050cbc66750b469701****,icepublic-****0b4697017213c6050cbc6675****
	MediaIds *string `json:"MediaIds,omitempty" xml:"MediaIds,omitempty"`
}

func (s CancelFavoritePublicMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelFavoritePublicMediaRequest) GoString() string {
	return s.String()
}

func (s *CancelFavoritePublicMediaRequest) SetMediaIds(v string) *CancelFavoritePublicMediaRequest {
	s.MediaIds = &v
	return s
}

type CancelFavoritePublicMediaResponseBody struct {
	IgnoredList []*string `json:"IgnoredList,omitempty" xml:"IgnoredList,omitempty" type:"Repeated"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CancelFavoritePublicMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelFavoritePublicMediaResponseBody) GoString() string {
	return s.String()
}

func (s *CancelFavoritePublicMediaResponseBody) SetIgnoredList(v []*string) *CancelFavoritePublicMediaResponseBody {
	s.IgnoredList = v
	return s
}

func (s *CancelFavoritePublicMediaResponseBody) SetRequestId(v string) *CancelFavoritePublicMediaResponseBody {
	s.RequestId = &v
	return s
}

type CancelFavoritePublicMediaResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CancelFavoritePublicMediaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CancelFavoritePublicMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelFavoritePublicMediaResponse) GoString() string {
	return s.String()
}

func (s *CancelFavoritePublicMediaResponse) SetHeaders(v map[string]*string) *CancelFavoritePublicMediaResponse {
	s.Headers = v
	return s
}

func (s *CancelFavoritePublicMediaResponse) SetStatusCode(v int32) *CancelFavoritePublicMediaResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelFavoritePublicMediaResponse) SetBody(v *CancelFavoritePublicMediaResponseBody) *CancelFavoritePublicMediaResponse {
	s.Body = v
	return s
}

type CreateAuditRequest struct {
	// The review results. You can specify the results for a maximum of 20 videos at a time. The value must be converted to a string. For more information about the parameters in AuditContent, see the "AuditContent" section of this topic.
	//
	// This parameter is required.
	//
	// example:
	//
	// [
	//
	//       {
	//
	//             "MediaId": "93ab850b4f*****b54b6e91d24d81d4",
	//
	//             "Status": "Normal"
	//
	//       },
	//
	//       {
	//
	//             "MediaId": "f867fbfb58*****8bbab65c4480ae1d",
	//
	//             "Status": "Blocked",
	//
	//             "Reason": "xxxx",
	//
	//             "Comment": "xxxx"
	//
	//       }
	//
	// ]
	AuditContent *string `json:"AuditContent,omitempty" xml:"AuditContent,omitempty"`
}

func (s CreateAuditRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAuditRequest) GoString() string {
	return s.String()
}

func (s *CreateAuditRequest) SetAuditContent(v string) *CreateAuditRequest {
	s.AuditContent = &v
	return s
}

type CreateAuditResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateAuditResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAuditResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAuditResponseBody) SetRequestId(v string) *CreateAuditResponseBody {
	s.RequestId = &v
	return s
}

type CreateAuditResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAuditResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAuditResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAuditResponse) GoString() string {
	return s.String()
}

func (s *CreateAuditResponse) SetHeaders(v map[string]*string) *CreateAuditResponse {
	s.Headers = v
	return s
}

func (s *CreateAuditResponse) SetStatusCode(v int32) *CreateAuditResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAuditResponse) SetBody(v *CreateAuditResponseBody) *CreateAuditResponse {
	s.Body = v
	return s
}

type CreateAvatarTrainingJobRequest struct {
	// 	- The description of the digital human.
	//
	// 	- The description can be up to 1,000 characters in length.
	AvatarDescription *string `json:"AvatarDescription,omitempty" xml:"AvatarDescription,omitempty"`
	// 	- The name of the digital human.
	//
	// 	- The name can be up to seven characters in length.
	//
	// This parameter is required.
	AvatarName *string `json:"AvatarName,omitempty" xml:"AvatarName,omitempty"`
	// The type of the digital human.
	//
	// example:
	//
	// 2DAvatar
	AvatarType *string `json:"AvatarType,omitempty" xml:"AvatarType,omitempty"`
	// 	- The media asset ID of the portrait image.
	//
	// 	- The value must be 32 characters in length.
	//
	// example:
	//
	// ****571c704445f9a0ee011406c2****
	Portrait *string `json:"Portrait,omitempty" xml:"Portrait,omitempty"`
	// 	- The thumbnail URL.
	//
	// 	- After the digital human is trained, the thumbnail is uploaded to this URL.
	//
	// 	- The URL must be a valid public Object Storage Service (OSS) URL.
	//
	// 	- The URL can be up to 512 characters in length.
	//
	// example:
	//
	// https://your-bucket.oss-cn-hangzhou.aliyuncs.com/thumbnail.png
	Thumbnail *string `json:"Thumbnail,omitempty" xml:"Thumbnail,omitempty"`
	// 	- Specifies whether the training video supports alpha channels.
	//
	//     **
	//
	//     **Note**: Make sure that the current settings are consistent with those of the submitted training video. Otherwise, the digital human may malfunction.
	//
	// example:
	//
	// True
	Transparent *bool `json:"Transparent,omitempty" xml:"Transparent,omitempty"`
	// 	- The ID of the video used for training.
	//
	// 	- The value must be 32 characters in length.
	//
	// 	- Supported formats: MP4, MOV, and WebM.
	//
	// 	- The duration of the video must be 5 to 15 minutes.
	//
	// 	- The resolution of the video must be 1920×1080 or 1080×1920.
	//
	// example:
	//
	// ****571c704445f9a0ee011406c2****
	Video *string `json:"Video,omitempty" xml:"Video,omitempty"`
}

func (s CreateAvatarTrainingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAvatarTrainingJobRequest) GoString() string {
	return s.String()
}

func (s *CreateAvatarTrainingJobRequest) SetAvatarDescription(v string) *CreateAvatarTrainingJobRequest {
	s.AvatarDescription = &v
	return s
}

func (s *CreateAvatarTrainingJobRequest) SetAvatarName(v string) *CreateAvatarTrainingJobRequest {
	s.AvatarName = &v
	return s
}

func (s *CreateAvatarTrainingJobRequest) SetAvatarType(v string) *CreateAvatarTrainingJobRequest {
	s.AvatarType = &v
	return s
}

func (s *CreateAvatarTrainingJobRequest) SetPortrait(v string) *CreateAvatarTrainingJobRequest {
	s.Portrait = &v
	return s
}

func (s *CreateAvatarTrainingJobRequest) SetThumbnail(v string) *CreateAvatarTrainingJobRequest {
	s.Thumbnail = &v
	return s
}

func (s *CreateAvatarTrainingJobRequest) SetTransparent(v bool) *CreateAvatarTrainingJobRequest {
	s.Transparent = &v
	return s
}

func (s *CreateAvatarTrainingJobRequest) SetVideo(v string) *CreateAvatarTrainingJobRequest {
	s.Video = &v
	return s
}

type CreateAvatarTrainingJobResponseBody struct {
	// The data returned.
	Data *CreateAvatarTrainingJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateAvatarTrainingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAvatarTrainingJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAvatarTrainingJobResponseBody) SetData(v *CreateAvatarTrainingJobResponseBodyData) *CreateAvatarTrainingJobResponseBody {
	s.Data = v
	return s
}

func (s *CreateAvatarTrainingJobResponseBody) SetRequestId(v string) *CreateAvatarTrainingJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateAvatarTrainingJobResponseBody) SetSuccess(v bool) *CreateAvatarTrainingJobResponseBody {
	s.Success = &v
	return s
}

type CreateAvatarTrainingJobResponseBodyData struct {
	// The ID of the digital human training job.
	//
	// example:
	//
	// ****d718e2ff4f018ccf419a7b71****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s CreateAvatarTrainingJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateAvatarTrainingJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateAvatarTrainingJobResponseBodyData) SetJobId(v string) *CreateAvatarTrainingJobResponseBodyData {
	s.JobId = &v
	return s
}

type CreateAvatarTrainingJobResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAvatarTrainingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAvatarTrainingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAvatarTrainingJobResponse) GoString() string {
	return s.String()
}

func (s *CreateAvatarTrainingJobResponse) SetHeaders(v map[string]*string) *CreateAvatarTrainingJobResponse {
	s.Headers = v
	return s
}

func (s *CreateAvatarTrainingJobResponse) SetStatusCode(v int32) *CreateAvatarTrainingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAvatarTrainingJobResponse) SetBody(v *CreateAvatarTrainingJobResponseBody) *CreateAvatarTrainingJobResponse {
	s.Body = v
	return s
}

type CreateChannelRequest struct {
	// Specifies whether to enable access control.
	//
	// example:
	//
	// false
	AccessPolicy *bool `json:"AccessPolicy,omitempty" xml:"AccessPolicy,omitempty"`
	// The token for accessing the channel.
	//
	// example:
	//
	// xxxxx
	AccessToken *string `json:"AccessToken,omitempty" xml:"AccessToken,omitempty"`
	// The name of the channel.
	//
	// This parameter is required.
	//
	// example:
	//
	// MyChannel
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The tier of the channel. Valid values: basic and standard.
	//
	// This parameter is required.
	//
	// example:
	//
	// basic
	ChannelTier *string `json:"ChannelTier,omitempty" xml:"ChannelTier,omitempty"`
	// The source location of the filler slate.
	//
	// example:
	//
	// MySourceLocation
	FillerSourceLocationName *string `json:"FillerSourceLocationName,omitempty" xml:"FillerSourceLocationName,omitempty"`
	// The name of the filler slate.
	//
	// example:
	//
	// FillerSource
	FillerSourceName *string `json:"FillerSourceName,omitempty" xml:"FillerSourceName,omitempty"`
	// The channel output configurations.
	//
	// This parameter is required.
	//
	// example:
	//
	// [{
	//
	// 	"ManifestName": "manifest-1",
	//
	// 	"Format": "HLS",
	//
	// 	"SourceGroupName": "source-group-1",
	//
	// 	"ManifestSettings": {
	//
	// 		"WindowDuration": 60,
	//
	// 		"AdMarkType": "Daterange"
	//
	// 	}
	//
	// }]
	OutPutConfigList *string `json:"OutPutConfigList,omitempty" xml:"OutPutConfigList,omitempty"`
	// The playback mode. Valid values: loop and linear.
	//
	// This parameter is required.
	//
	// example:
	//
	// loop
	PlaybackMode *string `json:"PlaybackMode,omitempty" xml:"PlaybackMode,omitempty"`
}

func (s CreateChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateChannelRequest) GoString() string {
	return s.String()
}

func (s *CreateChannelRequest) SetAccessPolicy(v bool) *CreateChannelRequest {
	s.AccessPolicy = &v
	return s
}

func (s *CreateChannelRequest) SetAccessToken(v string) *CreateChannelRequest {
	s.AccessToken = &v
	return s
}

func (s *CreateChannelRequest) SetChannelName(v string) *CreateChannelRequest {
	s.ChannelName = &v
	return s
}

func (s *CreateChannelRequest) SetChannelTier(v string) *CreateChannelRequest {
	s.ChannelTier = &v
	return s
}

func (s *CreateChannelRequest) SetFillerSourceLocationName(v string) *CreateChannelRequest {
	s.FillerSourceLocationName = &v
	return s
}

func (s *CreateChannelRequest) SetFillerSourceName(v string) *CreateChannelRequest {
	s.FillerSourceName = &v
	return s
}

func (s *CreateChannelRequest) SetOutPutConfigList(v string) *CreateChannelRequest {
	s.OutPutConfigList = &v
	return s
}

func (s *CreateChannelRequest) SetPlaybackMode(v string) *CreateChannelRequest {
	s.PlaybackMode = &v
	return s
}

type CreateChannelResponseBody struct {
	// The channel information.
	Channel *ChannelAssemblyChannel `json:"Channel,omitempty" xml:"Channel,omitempty"`
	// **Request ID**
	//
	// example:
	//
	// xxx-xxxx-xxxxx-xxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateChannelResponseBody) GoString() string {
	return s.String()
}

func (s *CreateChannelResponseBody) SetChannel(v *ChannelAssemblyChannel) *CreateChannelResponseBody {
	s.Channel = v
	return s
}

func (s *CreateChannelResponseBody) SetRequestId(v string) *CreateChannelResponseBody {
	s.RequestId = &v
	return s
}

type CreateChannelResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateChannelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateChannelResponse) GoString() string {
	return s.String()
}

func (s *CreateChannelResponse) SetHeaders(v map[string]*string) *CreateChannelResponse {
	s.Headers = v
	return s
}

func (s *CreateChannelResponse) SetStatusCode(v int32) *CreateChannelResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateChannelResponse) SetBody(v *CreateChannelResponseBody) *CreateChannelResponse {
	s.Body = v
	return s
}

type CreateCustomTemplateRequest struct {
	// The template name.
	//
	// This parameter is required.
	//
	// example:
	//
	// test-template
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The template subtype.
	//
	// Valid values for transcoding templates:
	//
	// 	- 1 (Normal): regular template.
	//
	// 	- 2 (AudioTranscode): audio transcoding template.
	//
	// 	- 3 (Remux): container format conversion template.
	//
	// 	- 4 (NarrowBandV1): Narrowband HD 1.0 template.
	//
	// 	- 5 (NarrowBandV2): Narrowband HD 2.0 template.
	//
	// Valid values for snapshot templates:
	//
	// 	- 1 (Normal): regular template.
	//
	// 	- 2 (Sprite): sprite template.
	//
	// 	- 3 (WebVtt): WebVTT template.
	//
	// Valid values for AI-assisted content moderation templates:
	//
	// 	- 1 (Video): video moderation template.
	//
	// 	- 2 (Audio): audio moderation template.
	//
	// 	- 3 (Image): image moderation template.
	//
	// Valid values for AI-assisted intelligent erasure templates.
	//
	// 	- 1 (VideoDelogo): logo erasure template.
	//
	// 	- 2 (VideoDetext): subtitle erasure template.
	//
	// example:
	//
	// 1
	Subtype *int32 `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// The template configurations. For more information, see [Template parameters](https://help.aliyun.com/document_detail/448291.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// {"Container":{"Format":"flv"},"Video":{},"Audio":{}}
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// The template type. Valid values:
	//
	// 	- 1: transcoding template.
	//
	// 	- 2: snapshot template.
	//
	// 	- 3: animated image template.
	//
	// 	- 4\\. image watermark template.
	//
	// 	- 5: text watermark template.
	//
	// 	- 6: subtitle template.
	//
	// 	- 7: AI-assisted content moderation template.
	//
	// 	- 8: AI-assisted intelligent thumbnail template.
	//
	// 	- 9: AI-assisted intelligent erasure template.
	//
	// 	- 10: AI-assisted media fingerprint analysis template.
	//
	// 	- 11: AI-assisted smart tagging template.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateCustomTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateCustomTemplateRequest) SetName(v string) *CreateCustomTemplateRequest {
	s.Name = &v
	return s
}

func (s *CreateCustomTemplateRequest) SetSubtype(v int32) *CreateCustomTemplateRequest {
	s.Subtype = &v
	return s
}

func (s *CreateCustomTemplateRequest) SetTemplateConfig(v string) *CreateCustomTemplateRequest {
	s.TemplateConfig = &v
	return s
}

func (s *CreateCustomTemplateRequest) SetType(v int32) *CreateCustomTemplateRequest {
	s.Type = &v
	return s
}

type CreateCustomTemplateResponseBody struct {
	// The template information.
	CustomTemplate *CreateCustomTemplateResponseBodyCustomTemplate `json:"CustomTemplate,omitempty" xml:"CustomTemplate,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateCustomTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCustomTemplateResponseBody) SetCustomTemplate(v *CreateCustomTemplateResponseBodyCustomTemplate) *CreateCustomTemplateResponseBody {
	s.CustomTemplate = v
	return s
}

func (s *CreateCustomTemplateResponseBody) SetRequestId(v string) *CreateCustomTemplateResponseBody {
	s.RequestId = &v
	return s
}

type CreateCustomTemplateResponseBodyCustomTemplate struct {
	// The time when the template was created.
	//
	// example:
	//
	// 2022-04-19T02:04:31Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// Indicates whether the template is the default template.
	//
	// example:
	//
	// true
	IsDefault *bool `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	// The time when the template was last modified.
	//
	// example:
	//
	// 2022-04-19T02:04:31Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The template state.
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The subtype name of the template.
	//
	// example:
	//
	// Remux
	Subtype *string `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// The template configurations.
	//
	// example:
	//
	// {"Container":{"Format":"flv"},"Video":{},"Audio":{}}
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// The template ID.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The template name.
	//
	// example:
	//
	// test-template
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// The type ID of the template.
	//
	// example:
	//
	// 1
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
	// The type name of the template.
	//
	// example:
	//
	// TranscodeTemplate
	TypeName *string `json:"TypeName,omitempty" xml:"TypeName,omitempty"`
}

func (s CreateCustomTemplateResponseBodyCustomTemplate) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomTemplateResponseBodyCustomTemplate) GoString() string {
	return s.String()
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetCreateTime(v string) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.CreateTime = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetIsDefault(v bool) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.IsDefault = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetModifiedTime(v string) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.ModifiedTime = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetStatus(v string) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.Status = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetSubtype(v string) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.Subtype = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetTemplateConfig(v string) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.TemplateConfig = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetTemplateId(v string) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.TemplateId = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetTemplateName(v string) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.TemplateName = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetType(v int32) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.Type = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetTypeName(v string) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.TypeName = &v
	return s
}

type CreateCustomTemplateResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCustomTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCustomTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateCustomTemplateResponse) SetHeaders(v map[string]*string) *CreateCustomTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateCustomTemplateResponse) SetStatusCode(v int32) *CreateCustomTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCustomTemplateResponse) SetBody(v *CreateCustomTemplateResponseBody) *CreateCustomTemplateResponse {
	s.Body = v
	return s
}

type CreateCustomizedVoiceJobRequest struct {
	// The gender. Valid values:
	//
	// 	- female
	//
	// 	- male
	//
	// This parameter is required.
	//
	// example:
	//
	// female
	Gender *string `json:"Gender,omitempty" xml:"Gender,omitempty"`
	// The scenario. Valid values:
	//
	// 	- story
	//
	// 	- interaction
	//
	// 	- navigation
	//
	// This parameter is required.
	//
	// example:
	//
	// story
	Scenario *string `json:"Scenario,omitempty" xml:"Scenario,omitempty"`
	// The voice description.
	//
	// 	- The description can be up to 256 characters in length.
	VoiceDesc *string `json:"VoiceDesc,omitempty" xml:"VoiceDesc,omitempty"`
	// The voice ID. It can be the English name or Chinese Pinyin of the voice.
	//
	// 	- The value must be a unique ID that is not used by other custom voices.
	//
	// 	- The ID can be up to 32 characters in length.
	//
	// 	- Only letters and digits are supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// xiaozhuan
	VoiceId *string `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
	// The voice name.
	//
	// 	- The name can be up to 32 characters in length.
	VoiceName *string `json:"VoiceName,omitempty" xml:"VoiceName,omitempty"`
}

func (s CreateCustomizedVoiceJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomizedVoiceJobRequest) GoString() string {
	return s.String()
}

func (s *CreateCustomizedVoiceJobRequest) SetGender(v string) *CreateCustomizedVoiceJobRequest {
	s.Gender = &v
	return s
}

func (s *CreateCustomizedVoiceJobRequest) SetScenario(v string) *CreateCustomizedVoiceJobRequest {
	s.Scenario = &v
	return s
}

func (s *CreateCustomizedVoiceJobRequest) SetVoiceDesc(v string) *CreateCustomizedVoiceJobRequest {
	s.VoiceDesc = &v
	return s
}

func (s *CreateCustomizedVoiceJobRequest) SetVoiceId(v string) *CreateCustomizedVoiceJobRequest {
	s.VoiceId = &v
	return s
}

func (s *CreateCustomizedVoiceJobRequest) SetVoiceName(v string) *CreateCustomizedVoiceJobRequest {
	s.VoiceName = &v
	return s
}

type CreateCustomizedVoiceJobResponseBody struct {
	// The data returned.
	Data *CreateCustomizedVoiceJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values: true false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateCustomizedVoiceJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomizedVoiceJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCustomizedVoiceJobResponseBody) SetData(v *CreateCustomizedVoiceJobResponseBodyData) *CreateCustomizedVoiceJobResponseBody {
	s.Data = v
	return s
}

func (s *CreateCustomizedVoiceJobResponseBody) SetRequestId(v string) *CreateCustomizedVoiceJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCustomizedVoiceJobResponseBody) SetSuccess(v bool) *CreateCustomizedVoiceJobResponseBody {
	s.Success = &v
	return s
}

type CreateCustomizedVoiceJobResponseBodyData struct {
	// The ID of the human voice cloning job.
	//
	// example:
	//
	// ****29faef8144638ba42eb8e037****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The voice ID.
	//
	// example:
	//
	// xiaozhuan
	VoiceId *string `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
}

func (s CreateCustomizedVoiceJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomizedVoiceJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateCustomizedVoiceJobResponseBodyData) SetJobId(v string) *CreateCustomizedVoiceJobResponseBodyData {
	s.JobId = &v
	return s
}

func (s *CreateCustomizedVoiceJobResponseBodyData) SetVoiceId(v string) *CreateCustomizedVoiceJobResponseBodyData {
	s.VoiceId = &v
	return s
}

type CreateCustomizedVoiceJobResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCustomizedVoiceJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCustomizedVoiceJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomizedVoiceJobResponse) GoString() string {
	return s.String()
}

func (s *CreateCustomizedVoiceJobResponse) SetHeaders(v map[string]*string) *CreateCustomizedVoiceJobResponse {
	s.Headers = v
	return s
}

func (s *CreateCustomizedVoiceJobResponse) SetStatusCode(v int32) *CreateCustomizedVoiceJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCustomizedVoiceJobResponse) SetBody(v *CreateCustomizedVoiceJobResponseBody) *CreateCustomizedVoiceJobResponse {
	s.Body = v
	return s
}

type CreateDNADBRequest struct {
	// The description of the media fingerprint library.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The model of the media fingerprint library. Valid values:
	//
	// 	- **Video**
	//
	// 	- **Audio**
	//
	// 	- **Image**
	//
	// 	- **Text*	- (supported only in the China (Shanghai) region)
	//
	// example:
	//
	// Video
	Model *string `json:"Model,omitempty" xml:"Model,omitempty"`
	// The name of the media fingerprint library.
	//
	// This parameter is required.
	//
	// example:
	//
	// example name
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreateDNADBRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDNADBRequest) GoString() string {
	return s.String()
}

func (s *CreateDNADBRequest) SetDescription(v string) *CreateDNADBRequest {
	s.Description = &v
	return s
}

func (s *CreateDNADBRequest) SetModel(v string) *CreateDNADBRequest {
	s.Model = &v
	return s
}

func (s *CreateDNADBRequest) SetName(v string) *CreateDNADBRequest {
	s.Name = &v
	return s
}

func (s *CreateDNADBRequest) SetOwnerAccount(v string) *CreateDNADBRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateDNADBRequest) SetOwnerId(v int64) *CreateDNADBRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDNADBRequest) SetResourceOwnerAccount(v string) *CreateDNADBRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateDNADBRequest) SetResourceOwnerId(v int64) *CreateDNADBRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreateDNADBResponseBody struct {
	// The details of the media fingerprint library.
	DBInfo *CreateDNADBResponseBodyDBInfo `json:"DBInfo,omitempty" xml:"DBInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 25818875-5F78-4A13-BEF6-D7393642CA58
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDNADBResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDNADBResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDNADBResponseBody) SetDBInfo(v *CreateDNADBResponseBodyDBInfo) *CreateDNADBResponseBody {
	s.DBInfo = v
	return s
}

func (s *CreateDNADBResponseBody) SetRequestId(v string) *CreateDNADBResponseBody {
	s.RequestId = &v
	return s
}

type CreateDNADBResponseBodyDBInfo struct {
	// The ID of the media fingerprint library. We recommend that you save this ID for subsequent calls of other operations.
	//
	// example:
	//
	// 88c6ca184c0e47098a5b665e2a12****
	DBId *string `json:"DBId,omitempty" xml:"DBId,omitempty"`
	// The description of the media fingerprint library.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The model of the media fingerprint library.
	//
	// example:
	//
	// Video
	Model *string `json:"Model,omitempty" xml:"Model,omitempty"`
	// The name of the media fingerprint library.
	//
	// example:
	//
	// example name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The state of the media fingerprint library. After a media fingerprint library is created, it enters the offline state. After the media fingerprint library is processed at the backend, it enters the active state.
	//
	// example:
	//
	// offline
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateDNADBResponseBodyDBInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateDNADBResponseBodyDBInfo) GoString() string {
	return s.String()
}

func (s *CreateDNADBResponseBodyDBInfo) SetDBId(v string) *CreateDNADBResponseBodyDBInfo {
	s.DBId = &v
	return s
}

func (s *CreateDNADBResponseBodyDBInfo) SetDescription(v string) *CreateDNADBResponseBodyDBInfo {
	s.Description = &v
	return s
}

func (s *CreateDNADBResponseBodyDBInfo) SetModel(v string) *CreateDNADBResponseBodyDBInfo {
	s.Model = &v
	return s
}

func (s *CreateDNADBResponseBodyDBInfo) SetName(v string) *CreateDNADBResponseBodyDBInfo {
	s.Name = &v
	return s
}

func (s *CreateDNADBResponseBodyDBInfo) SetStatus(v string) *CreateDNADBResponseBodyDBInfo {
	s.Status = &v
	return s
}

type CreateDNADBResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDNADBResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDNADBResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDNADBResponse) GoString() string {
	return s.String()
}

func (s *CreateDNADBResponse) SetHeaders(v map[string]*string) *CreateDNADBResponse {
	s.Headers = v
	return s
}

func (s *CreateDNADBResponse) SetStatusCode(v int32) *CreateDNADBResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDNADBResponse) SetBody(v *CreateDNADBResponseBody) *CreateDNADBResponse {
	s.Body = v
	return s
}

type CreateEditingProjectRequest struct {
	// The business configuration of the project. This parameter can be ignored for general editing projects.
	//
	// For a live stream editing project, observe the following rules: OutputMediaConfig.StorageLocation is required. OutputMediaConfig.Path is optional. If you do not specify this option, the live streaming clips are stored in the root directory by default.
	//
	// Valid values of OutputMediaTarget include vod-media and oss-object. If you do not specify OutputMediaTarget, the default value oss-object is used.
	//
	// If you set OutputMediaTarget to vod-media, the setting of OutputMediaConfig.Path does not take effect.
	//
	// example:
	//
	// { "OutputMediaConfig" : { "StorageLocation": "test-bucket.oss-cn-shanghai.aliyuncs.com", "Path": "test-path" }, "OutputMediaTarget": "oss-object", "ReservationTime": "2021-06-21T08:05:00Z" }
	BusinessConfig *string `json:"BusinessConfig,omitempty" xml:"BusinessConfig,omitempty"`
	// The material parameter corresponding to the template, in the JSON format. If TemplateId is specified, ClipsParam must also be specified. For more information<props="china">, see [Create and use a regular template](https://help.aliyun.com/document_detail/328557.html) and [Create and use an advanced template](https://help.aliyun.com/document_detail/291418.html).
	ClipsParam *string `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	// The thumbnail URL of the online editing project.
	//
	// example:
	//
	// https://example.com/example.png
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// The description of the online editing project.
	//
	// example:
	//
	// 描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The material associated with the project. Separate multiple material IDs with commas (,). Each type supports up to 10 material IDs.
	//
	// example:
	//
	// {"video":"*****2e057304fcd9b145c5cafc*****", "image":"****8021a8d493da643c8acd98*****,*****cb6307a4edea614d8b3f3c*****", "liveStream": "[{\\"appName\\":\\"testrecord\\",\\"domainName\\":\\"test.alivecdn.com\\",\\"liveUrl\\":\\"rtmp://test.alivecdn.com/testrecord/teststream\\",\\"streamName\\":\\"teststream\\"}]", "editingProject": "*****9b145c5cafc2e057304fcd*****"}
	MaterialMaps *string `json:"MaterialMaps,omitempty" xml:"MaterialMaps,omitempty"`
	// The type of the editing project. Valid values: EditingProject and LiveEditingProject. A value of EditingProject indicates a regular editing project, and a value of LiveEditingProject indicates a live stream editing project.
	//
	// example:
	//
	// LiveEditingProject
	ProjectType *string `json:"ProjectType,omitempty" xml:"ProjectType,omitempty"`
	// The template ID. This parameter is used to quickly build a timeline with ease. Note: Only one of Timeline and TemplateId can be specified. If TemplateId is specified, ClipsParam must also be specified.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The template type. This parameter is required if you create a template-based online editing project. Default value: Timeline. Valid values:
	//
	// 	- Timeline: a regular template.
	//
	// 	- VETemplate: an advanced template.
	//
	// example:
	//
	// Timeline
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	// example:
	//
	// {"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****4d7cf14dc7b83b0e801c****"},{"MediaId":"****4d7cf14dc7b83b0e801c****"}]}]}
	Timeline *string `json:"Timeline,omitempty" xml:"Timeline,omitempty"`
	// The title of the online editing project.
	//
	// This parameter is required.
	//
	// example:
	//
	// example
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s CreateEditingProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEditingProjectRequest) GoString() string {
	return s.String()
}

func (s *CreateEditingProjectRequest) SetBusinessConfig(v string) *CreateEditingProjectRequest {
	s.BusinessConfig = &v
	return s
}

func (s *CreateEditingProjectRequest) SetClipsParam(v string) *CreateEditingProjectRequest {
	s.ClipsParam = &v
	return s
}

func (s *CreateEditingProjectRequest) SetCoverURL(v string) *CreateEditingProjectRequest {
	s.CoverURL = &v
	return s
}

func (s *CreateEditingProjectRequest) SetDescription(v string) *CreateEditingProjectRequest {
	s.Description = &v
	return s
}

func (s *CreateEditingProjectRequest) SetMaterialMaps(v string) *CreateEditingProjectRequest {
	s.MaterialMaps = &v
	return s
}

func (s *CreateEditingProjectRequest) SetProjectType(v string) *CreateEditingProjectRequest {
	s.ProjectType = &v
	return s
}

func (s *CreateEditingProjectRequest) SetTemplateId(v string) *CreateEditingProjectRequest {
	s.TemplateId = &v
	return s
}

func (s *CreateEditingProjectRequest) SetTemplateType(v string) *CreateEditingProjectRequest {
	s.TemplateType = &v
	return s
}

func (s *CreateEditingProjectRequest) SetTimeline(v string) *CreateEditingProjectRequest {
	s.Timeline = &v
	return s
}

func (s *CreateEditingProjectRequest) SetTitle(v string) *CreateEditingProjectRequest {
	s.Title = &v
	return s
}

type CreateEditingProjectResponseBody struct {
	// The information about the online editing project.
	Project *CreateEditingProjectResponseBodyProject `json:"Project,omitempty" xml:"Project,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateEditingProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEditingProjectResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEditingProjectResponseBody) SetProject(v *CreateEditingProjectResponseBodyProject) *CreateEditingProjectResponseBody {
	s.Project = v
	return s
}

func (s *CreateEditingProjectResponseBody) SetRequestId(v string) *CreateEditingProjectResponseBody {
	s.RequestId = &v
	return s
}

type CreateEditingProjectResponseBodyProject struct {
	// The business configuration of the project. This parameter can be ignored for general editing projects.
	//
	// example:
	//
	// { "OutputMediaConfig" :    { "StorageLocation": "test-bucket.oss-cn-shanghai.aliyuncs.com", "Path": "test-path"   }, "OutputMediaTarget": "oss-object", "ReservationTime": "2021-06-21T08:05:00Z" }
	BusinessConfig *string `json:"BusinessConfig,omitempty" xml:"BusinessConfig,omitempty"`
	// The business status of the project. This parameter can be ignored for general editing projects. Valid values:
	//
	// 	- Reserving
	//
	// 	- ReservationCanceled
	//
	// 	- BroadCasting
	//
	// 	- LoadingFailed
	//
	// 	- LiveFinished
	//
	// example:
	//
	// Reserving
	BusinessStatus *string `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty"`
	// The template material parameters.
	ClipsParam *string `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	// The thumbnail URL of the online editing project.
	//
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// The method for creating the online editing project. Valid values:
	//
	// \\- OpenAPI
	//
	// \\- AliyunConsole
	//
	// \\- WebSDK
	//
	// \\- LiveEditingOpenAPI
	//
	// \\- LiveEditingConsole
	//
	// example:
	//
	// WebSDK
	CreateSource *string `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	// The time when the online editing project was created.
	//
	// example:
	//
	// 2021-01-08T16:52:07Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The description of the online editing project.
	//
	// example:
	//
	// example_description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The duration of the online editing project.
	//
	// example:
	//
	// 3.4200000
	Duration *float32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The method for editing the online editing project. Valid values:
	//
	// \\- OpenAPI
	//
	// \\- AliyunConsole
	//
	// \\- WebSDK
	//
	// \\- LiveEditingOpenAPI
	//
	// \\- LiveEditingConsole
	//
	// example:
	//
	// WebSDK
	ModifiedSource *string `json:"ModifiedSource,omitempty" xml:"ModifiedSource,omitempty"`
	// The time when the online editing project was last edited.
	//
	// example:
	//
	// 2021-01-08T16:52:07Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The ID of the online editing project.
	//
	// example:
	//
	// ****01bf24bf41c78b2754cb3187****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The type of the editing project. Default value: EditingProject. Valid values:
	//
	// \\- EditingProject: a regular editing project.
	//
	// \\- LiveEditingProject: a live stream editing project.
	//
	// example:
	//
	// LiveEditingProject
	ProjectType *string `json:"ProjectType,omitempty" xml:"ProjectType,omitempty"`
	// The status of the online editing project.
	//
	// Valid values:
	//
	// \\- 1: Draft
	//
	// \\- 2: Editing
	//
	// \\- 3: Producing
	//
	// \\- 4: Produced
	//
	// \\- 5: ProduceFailed
	//
	// \\- 7: Deleted
	//
	// example:
	//
	// 2
	Status *int64 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The status of the online editing project. For more information, see the status list.
	//
	// example:
	//
	// Editing
	StatusName *string `json:"StatusName,omitempty" xml:"StatusName,omitempty"`
	// The template ID.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The template type of the online editing project. Valid values:
	//
	// \\- Timeline
	//
	// \\- VETemplate
	//
	// example:
	//
	// Timeline
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	// The timeline of the online editing project, in the JSON format.<props="china">For more information about objects in a timeline, see [Timeline configurations](https://help.aliyun.com/document_detail/198823.htm?spm=a2c4g.11186623.2.9.90dc653dF67srN#topic-2024662).  If you leave this parameter empty, an empty timeline is created and the duration of the online editing project is zero.
	//
	// example:
	//
	// {"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****4d7cf14dc7b83b0e801c****"},{"MediaId":"****4d7cf14dc7b83b0e801c****"}]}]}
	Timeline *string `json:"Timeline,omitempty" xml:"Timeline,omitempty"`
	// The title of the online editing project.
	//
	// example:
	//
	// example_title
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s CreateEditingProjectResponseBodyProject) String() string {
	return tea.Prettify(s)
}

func (s CreateEditingProjectResponseBodyProject) GoString() string {
	return s.String()
}

func (s *CreateEditingProjectResponseBodyProject) SetBusinessConfig(v string) *CreateEditingProjectResponseBodyProject {
	s.BusinessConfig = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetBusinessStatus(v string) *CreateEditingProjectResponseBodyProject {
	s.BusinessStatus = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetClipsParam(v string) *CreateEditingProjectResponseBodyProject {
	s.ClipsParam = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetCoverURL(v string) *CreateEditingProjectResponseBodyProject {
	s.CoverURL = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetCreateSource(v string) *CreateEditingProjectResponseBodyProject {
	s.CreateSource = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetCreateTime(v string) *CreateEditingProjectResponseBodyProject {
	s.CreateTime = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetDescription(v string) *CreateEditingProjectResponseBodyProject {
	s.Description = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetDuration(v float32) *CreateEditingProjectResponseBodyProject {
	s.Duration = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetModifiedSource(v string) *CreateEditingProjectResponseBodyProject {
	s.ModifiedSource = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetModifiedTime(v string) *CreateEditingProjectResponseBodyProject {
	s.ModifiedTime = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetProjectId(v string) *CreateEditingProjectResponseBodyProject {
	s.ProjectId = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetProjectType(v string) *CreateEditingProjectResponseBodyProject {
	s.ProjectType = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetStatus(v int64) *CreateEditingProjectResponseBodyProject {
	s.Status = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetStatusName(v string) *CreateEditingProjectResponseBodyProject {
	s.StatusName = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetTemplateId(v string) *CreateEditingProjectResponseBodyProject {
	s.TemplateId = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetTemplateType(v string) *CreateEditingProjectResponseBodyProject {
	s.TemplateType = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetTimeline(v string) *CreateEditingProjectResponseBodyProject {
	s.Timeline = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetTitle(v string) *CreateEditingProjectResponseBodyProject {
	s.Title = &v
	return s
}

type CreateEditingProjectResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateEditingProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateEditingProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEditingProjectResponse) GoString() string {
	return s.String()
}

func (s *CreateEditingProjectResponse) SetHeaders(v map[string]*string) *CreateEditingProjectResponse {
	s.Headers = v
	return s
}

func (s *CreateEditingProjectResponse) SetStatusCode(v int32) *CreateEditingProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateEditingProjectResponse) SetBody(v *CreateEditingProjectResponseBody) *CreateEditingProjectResponse {
	s.Body = v
	return s
}

type CreateHotwordLibraryRequest struct {
	// example:
	//
	// 存放名人的词库
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	Hotwords []*Hotword `json:"Hotwords,omitempty" xml:"Hotwords,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// my_hotwords
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ASR
	UsageScenario *string `json:"UsageScenario,omitempty" xml:"UsageScenario,omitempty"`
}

func (s CreateHotwordLibraryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateHotwordLibraryRequest) GoString() string {
	return s.String()
}

func (s *CreateHotwordLibraryRequest) SetDescription(v string) *CreateHotwordLibraryRequest {
	s.Description = &v
	return s
}

func (s *CreateHotwordLibraryRequest) SetHotwords(v []*Hotword) *CreateHotwordLibraryRequest {
	s.Hotwords = v
	return s
}

func (s *CreateHotwordLibraryRequest) SetName(v string) *CreateHotwordLibraryRequest {
	s.Name = &v
	return s
}

func (s *CreateHotwordLibraryRequest) SetUsageScenario(v string) *CreateHotwordLibraryRequest {
	s.UsageScenario = &v
	return s
}

type CreateHotwordLibraryShrinkRequest struct {
	// example:
	//
	// 存放名人的词库
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	HotwordsShrink *string `json:"Hotwords,omitempty" xml:"Hotwords,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// my_hotwords
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ASR
	UsageScenario *string `json:"UsageScenario,omitempty" xml:"UsageScenario,omitempty"`
}

func (s CreateHotwordLibraryShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateHotwordLibraryShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateHotwordLibraryShrinkRequest) SetDescription(v string) *CreateHotwordLibraryShrinkRequest {
	s.Description = &v
	return s
}

func (s *CreateHotwordLibraryShrinkRequest) SetHotwordsShrink(v string) *CreateHotwordLibraryShrinkRequest {
	s.HotwordsShrink = &v
	return s
}

func (s *CreateHotwordLibraryShrinkRequest) SetName(v string) *CreateHotwordLibraryShrinkRequest {
	s.Name = &v
	return s
}

func (s *CreateHotwordLibraryShrinkRequest) SetUsageScenario(v string) *CreateHotwordLibraryShrinkRequest {
	s.UsageScenario = &v
	return s
}

type CreateHotwordLibraryResponseBody struct {
	// example:
	//
	// ****96e8864746a0b6f3****
	HotwordLibraryId *string `json:"HotwordLibraryId,omitempty" xml:"HotwordLibraryId,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 13cbb83e-043c-4728-ac35-*****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateHotwordLibraryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateHotwordLibraryResponseBody) GoString() string {
	return s.String()
}

func (s *CreateHotwordLibraryResponseBody) SetHotwordLibraryId(v string) *CreateHotwordLibraryResponseBody {
	s.HotwordLibraryId = &v
	return s
}

func (s *CreateHotwordLibraryResponseBody) SetRequestId(v string) *CreateHotwordLibraryResponseBody {
	s.RequestId = &v
	return s
}

type CreateHotwordLibraryResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateHotwordLibraryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateHotwordLibraryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateHotwordLibraryResponse) GoString() string {
	return s.String()
}

func (s *CreateHotwordLibraryResponse) SetHeaders(v map[string]*string) *CreateHotwordLibraryResponse {
	s.Headers = v
	return s
}

func (s *CreateHotwordLibraryResponse) SetStatusCode(v int32) *CreateHotwordLibraryResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateHotwordLibraryResponse) SetBody(v *CreateHotwordLibraryResponseBody) *CreateHotwordLibraryResponse {
	s.Body = v
	return s
}

type CreateLivePackageChannelRequest struct {
	// The channel name. It can contain letters, digits, hyphens (-), and underscores (_). The name must be 1 to 200 characters in length. Format: [A-Za-z0-9_-]+
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-1
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The client token that is used to ensure the idempotence of the request.
	//
	// example:
	//
	// ****12e8864746a0a398****
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The channel description. It can be up to 1,000 characters in length.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The channel group name. It can contain letters, digits, hyphens (-), and underscores (_). The name must be 1 to 200 characters in length. Format: [A-Za-z0-9_-]+
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-group-1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The ingest protocol. Only HLS is supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// HLS
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// The number of M3U8 segments. Valid values: 2 to 100.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3
	SegmentCount *int32 `json:"SegmentCount,omitempty" xml:"SegmentCount,omitempty"`
	// The segment duration. Valid values: 1 to 30.
	//
	// This parameter is required.
	//
	// example:
	//
	// 6
	SegmentDuration *int32 `json:"SegmentDuration,omitempty" xml:"SegmentDuration,omitempty"`
}

func (s CreateLivePackageChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLivePackageChannelRequest) GoString() string {
	return s.String()
}

func (s *CreateLivePackageChannelRequest) SetChannelName(v string) *CreateLivePackageChannelRequest {
	s.ChannelName = &v
	return s
}

func (s *CreateLivePackageChannelRequest) SetClientToken(v string) *CreateLivePackageChannelRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateLivePackageChannelRequest) SetDescription(v string) *CreateLivePackageChannelRequest {
	s.Description = &v
	return s
}

func (s *CreateLivePackageChannelRequest) SetGroupName(v string) *CreateLivePackageChannelRequest {
	s.GroupName = &v
	return s
}

func (s *CreateLivePackageChannelRequest) SetProtocol(v string) *CreateLivePackageChannelRequest {
	s.Protocol = &v
	return s
}

func (s *CreateLivePackageChannelRequest) SetSegmentCount(v int32) *CreateLivePackageChannelRequest {
	s.SegmentCount = &v
	return s
}

func (s *CreateLivePackageChannelRequest) SetSegmentDuration(v int32) *CreateLivePackageChannelRequest {
	s.SegmentDuration = &v
	return s
}

type CreateLivePackageChannelResponseBody struct {
	// The information about the live package channel.
	LivePackageChannel *CreateLivePackageChannelResponseBodyLivePackageChannel `json:"LivePackageChannel,omitempty" xml:"LivePackageChannel,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateLivePackageChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLivePackageChannelResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLivePackageChannelResponseBody) SetLivePackageChannel(v *CreateLivePackageChannelResponseBodyLivePackageChannel) *CreateLivePackageChannelResponseBody {
	s.LivePackageChannel = v
	return s
}

func (s *CreateLivePackageChannelResponseBody) SetRequestId(v string) *CreateLivePackageChannelResponseBody {
	s.RequestId = &v
	return s
}

type CreateLivePackageChannelResponseBodyLivePackageChannel struct {
	// The channel name.
	//
	// example:
	//
	// example-channel
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The time when the channel was created. It is in the yyyy-MM-ddTHH:mm:ssZ format and displayed in UTC.
	//
	// example:
	//
	// 2023-04-01T12:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The channel description.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The channel group name.
	//
	// example:
	//
	// channel-group-1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The ingest endpoints.
	IngestEndpoints []*CreateLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints `json:"IngestEndpoints,omitempty" xml:"IngestEndpoints,omitempty" type:"Repeated"`
	// The time when the channel was last modified. It is in the yyyy-MM-ddTHH:mm:ssZ format and displayed in UTC.
	//
	// example:
	//
	// 2023-04-01T12:00:00Z
	LastModified *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	// The ingest protocol. Only HLS is supported.
	//
	// example:
	//
	// HLS
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// The number of M3U8 segments.
	//
	// example:
	//
	// 3
	SegmentCount *int32 `json:"SegmentCount,omitempty" xml:"SegmentCount,omitempty"`
	// The segment duration.
	//
	// example:
	//
	// 5
	SegmentDuration *int32 `json:"SegmentDuration,omitempty" xml:"SegmentDuration,omitempty"`
}

func (s CreateLivePackageChannelResponseBodyLivePackageChannel) String() string {
	return tea.Prettify(s)
}

func (s CreateLivePackageChannelResponseBodyLivePackageChannel) GoString() string {
	return s.String()
}

func (s *CreateLivePackageChannelResponseBodyLivePackageChannel) SetChannelName(v string) *CreateLivePackageChannelResponseBodyLivePackageChannel {
	s.ChannelName = &v
	return s
}

func (s *CreateLivePackageChannelResponseBodyLivePackageChannel) SetCreateTime(v string) *CreateLivePackageChannelResponseBodyLivePackageChannel {
	s.CreateTime = &v
	return s
}

func (s *CreateLivePackageChannelResponseBodyLivePackageChannel) SetDescription(v string) *CreateLivePackageChannelResponseBodyLivePackageChannel {
	s.Description = &v
	return s
}

func (s *CreateLivePackageChannelResponseBodyLivePackageChannel) SetGroupName(v string) *CreateLivePackageChannelResponseBodyLivePackageChannel {
	s.GroupName = &v
	return s
}

func (s *CreateLivePackageChannelResponseBodyLivePackageChannel) SetIngestEndpoints(v []*CreateLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints) *CreateLivePackageChannelResponseBodyLivePackageChannel {
	s.IngestEndpoints = v
	return s
}

func (s *CreateLivePackageChannelResponseBodyLivePackageChannel) SetLastModified(v string) *CreateLivePackageChannelResponseBodyLivePackageChannel {
	s.LastModified = &v
	return s
}

func (s *CreateLivePackageChannelResponseBodyLivePackageChannel) SetProtocol(v string) *CreateLivePackageChannelResponseBodyLivePackageChannel {
	s.Protocol = &v
	return s
}

func (s *CreateLivePackageChannelResponseBodyLivePackageChannel) SetSegmentCount(v int32) *CreateLivePackageChannelResponseBodyLivePackageChannel {
	s.SegmentCount = &v
	return s
}

func (s *CreateLivePackageChannelResponseBodyLivePackageChannel) SetSegmentDuration(v int32) *CreateLivePackageChannelResponseBodyLivePackageChannel {
	s.SegmentDuration = &v
	return s
}

type CreateLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints struct {
	// The ingest endpoint ID.
	//
	// example:
	//
	// ingest1
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The password.
	//
	// example:
	//
	// 2F9e******b569c8
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The ingest endpoint URL.
	//
	// example:
	//
	// http://xxx-1.packagepush-abcxxx.ap-southeast-1.aliyuncsiceintl.com/v1/group01/1/ch01/manifest
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// The username.
	//
	// example:
	//
	// us12******das
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s CreateLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints) String() string {
	return tea.Prettify(s)
}

func (s CreateLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints) GoString() string {
	return s.String()
}

func (s *CreateLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints) SetId(v string) *CreateLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints {
	s.Id = &v
	return s
}

func (s *CreateLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints) SetPassword(v string) *CreateLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints {
	s.Password = &v
	return s
}

func (s *CreateLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints) SetUrl(v string) *CreateLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints {
	s.Url = &v
	return s
}

func (s *CreateLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints) SetUsername(v string) *CreateLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints {
	s.Username = &v
	return s
}

type CreateLivePackageChannelResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateLivePackageChannelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateLivePackageChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLivePackageChannelResponse) GoString() string {
	return s.String()
}

func (s *CreateLivePackageChannelResponse) SetHeaders(v map[string]*string) *CreateLivePackageChannelResponse {
	s.Headers = v
	return s
}

func (s *CreateLivePackageChannelResponse) SetStatusCode(v int32) *CreateLivePackageChannelResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLivePackageChannelResponse) SetBody(v *CreateLivePackageChannelResponseBody) *CreateLivePackageChannelResponse {
	s.Body = v
	return s
}

type CreateLivePackageChannelGroupRequest struct {
	// The client token that is used to ensure the idempotence of the request.
	//
	// example:
	//
	// ****12e8864746a0a398****
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The channel group description. It can be up to 1,000 characters in length.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The channel group name. It can contain letters, digits, hyphens (-), and underscores (_). The name must be 1 to 200 characters in length. Format: [A-Za-z0-9_-]+
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-group-01
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s CreateLivePackageChannelGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLivePackageChannelGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateLivePackageChannelGroupRequest) SetClientToken(v string) *CreateLivePackageChannelGroupRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateLivePackageChannelGroupRequest) SetDescription(v string) *CreateLivePackageChannelGroupRequest {
	s.Description = &v
	return s
}

func (s *CreateLivePackageChannelGroupRequest) SetGroupName(v string) *CreateLivePackageChannelGroupRequest {
	s.GroupName = &v
	return s
}

type CreateLivePackageChannelGroupResponseBody struct {
	// The information about the channel group.
	LivePackageChannelGroup *CreateLivePackageChannelGroupResponseBodyLivePackageChannelGroup `json:"LivePackageChannelGroup,omitempty" xml:"LivePackageChannelGroup,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426614174000
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateLivePackageChannelGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLivePackageChannelGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLivePackageChannelGroupResponseBody) SetLivePackageChannelGroup(v *CreateLivePackageChannelGroupResponseBodyLivePackageChannelGroup) *CreateLivePackageChannelGroupResponseBody {
	s.LivePackageChannelGroup = v
	return s
}

func (s *CreateLivePackageChannelGroupResponseBody) SetRequestId(v string) *CreateLivePackageChannelGroupResponseBody {
	s.RequestId = &v
	return s
}

type CreateLivePackageChannelGroupResponseBodyLivePackageChannelGroup struct {
	// The time when the channel group was created. It is in the yyyy-MM-ddTHH:mm:ssZ format and displayed in UTC.
	//
	// example:
	//
	// 2023-04-01T12:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The channel group description.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The channel group name.
	//
	// example:
	//
	// example-group
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The time when the channel group was last modified. It is in the yyyy-MM-ddTHH:mm:ssZ format and displayed in UTC.
	//
	// example:
	//
	// 2023-04-01T12:00:00Z
	LastModified *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	// The origin domain.
	//
	// example:
	//
	// example.com
	OriginDomain *string `json:"OriginDomain,omitempty" xml:"OriginDomain,omitempty"`
}

func (s CreateLivePackageChannelGroupResponseBodyLivePackageChannelGroup) String() string {
	return tea.Prettify(s)
}

func (s CreateLivePackageChannelGroupResponseBodyLivePackageChannelGroup) GoString() string {
	return s.String()
}

func (s *CreateLivePackageChannelGroupResponseBodyLivePackageChannelGroup) SetCreateTime(v string) *CreateLivePackageChannelGroupResponseBodyLivePackageChannelGroup {
	s.CreateTime = &v
	return s
}

func (s *CreateLivePackageChannelGroupResponseBodyLivePackageChannelGroup) SetDescription(v string) *CreateLivePackageChannelGroupResponseBodyLivePackageChannelGroup {
	s.Description = &v
	return s
}

func (s *CreateLivePackageChannelGroupResponseBodyLivePackageChannelGroup) SetGroupName(v string) *CreateLivePackageChannelGroupResponseBodyLivePackageChannelGroup {
	s.GroupName = &v
	return s
}

func (s *CreateLivePackageChannelGroupResponseBodyLivePackageChannelGroup) SetLastModified(v string) *CreateLivePackageChannelGroupResponseBodyLivePackageChannelGroup {
	s.LastModified = &v
	return s
}

func (s *CreateLivePackageChannelGroupResponseBodyLivePackageChannelGroup) SetOriginDomain(v string) *CreateLivePackageChannelGroupResponseBodyLivePackageChannelGroup {
	s.OriginDomain = &v
	return s
}

type CreateLivePackageChannelGroupResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateLivePackageChannelGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateLivePackageChannelGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLivePackageChannelGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateLivePackageChannelGroupResponse) SetHeaders(v map[string]*string) *CreateLivePackageChannelGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateLivePackageChannelGroupResponse) SetStatusCode(v int32) *CreateLivePackageChannelGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLivePackageChannelGroupResponse) SetBody(v *CreateLivePackageChannelGroupResponseBody) *CreateLivePackageChannelGroupResponse {
	s.Body = v
	return s
}

type CreateLivePackageOriginEndpointRequest struct {
	// The authorization code. It can be up to 200 characters in length. You must configure AuthorizationCode, IpWhitelist, or both. Format: [A-Za-z0-9-_.]+
	//
	// example:
	//
	// AbcDef123
	AuthorizationCode *string `json:"AuthorizationCode,omitempty" xml:"AuthorizationCode,omitempty"`
	// The channel name.
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-1
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The client token that is used to ensure the idempotence of the request.
	//
	// example:
	//
	// ****0311a423d11a5f7dee713535****
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The endpoint description.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The origin endpoint name. It can contain letters, digits, hyphens (-), and underscores (_). The name must be 1 to 200 characters in length. Format: [A-Za-z0-9_-]+
	//
	// This parameter is required.
	//
	// example:
	//
	// endpoint-1
	EndpointName *string `json:"EndpointName,omitempty" xml:"EndpointName,omitempty"`
	// The channel group name.
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-group-1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The IP address blacklist. It supports subnet masks. 0.0.0.0/0 is not allowed. It can be up to 1,000 characters in length. Separate multiple IP addresses with commas (,).
	//
	// example:
	//
	// 103.21.222.1/32,192.168.100.0/24
	IpBlacklist *string `json:"IpBlacklist,omitempty" xml:"IpBlacklist,omitempty"`
	// The IP address whitelist. It supports subnet masks. 0.0.0.0/0 is not allowed. It can be up to 1,000 characters in length. Separate multiple IP addresses with commas (,). You must configure AuthorizationCode, IpWhitelist, or both.
	//
	// example:
	//
	// 192.168.1.0/24,10.0.0.1/24
	IpWhitelist         *string              `json:"IpWhitelist,omitempty" xml:"IpWhitelist,omitempty"`
	LivePackagingConfig *LivePackagingConfig `json:"LivePackagingConfig,omitempty" xml:"LivePackagingConfig,omitempty"`
	// The playlist name. Default value: manifest.
	//
	// example:
	//
	// manifest
	ManifestName *string `json:"ManifestName,omitempty" xml:"ManifestName,omitempty"`
	// The distribution protocol.
	//
	// This parameter is required.
	//
	// example:
	//
	// HLS
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// The number of days that time-shifted content is available. Maximum value: 30. Default value: 0, which indicates that time shifting is not supported.
	//
	// example:
	//
	// 1
	TimeshiftVision *int32 `json:"TimeshiftVision,omitempty" xml:"TimeshiftVision,omitempty"`
}

func (s CreateLivePackageOriginEndpointRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLivePackageOriginEndpointRequest) GoString() string {
	return s.String()
}

func (s *CreateLivePackageOriginEndpointRequest) SetAuthorizationCode(v string) *CreateLivePackageOriginEndpointRequest {
	s.AuthorizationCode = &v
	return s
}

func (s *CreateLivePackageOriginEndpointRequest) SetChannelName(v string) *CreateLivePackageOriginEndpointRequest {
	s.ChannelName = &v
	return s
}

func (s *CreateLivePackageOriginEndpointRequest) SetClientToken(v string) *CreateLivePackageOriginEndpointRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateLivePackageOriginEndpointRequest) SetDescription(v string) *CreateLivePackageOriginEndpointRequest {
	s.Description = &v
	return s
}

func (s *CreateLivePackageOriginEndpointRequest) SetEndpointName(v string) *CreateLivePackageOriginEndpointRequest {
	s.EndpointName = &v
	return s
}

func (s *CreateLivePackageOriginEndpointRequest) SetGroupName(v string) *CreateLivePackageOriginEndpointRequest {
	s.GroupName = &v
	return s
}

func (s *CreateLivePackageOriginEndpointRequest) SetIpBlacklist(v string) *CreateLivePackageOriginEndpointRequest {
	s.IpBlacklist = &v
	return s
}

func (s *CreateLivePackageOriginEndpointRequest) SetIpWhitelist(v string) *CreateLivePackageOriginEndpointRequest {
	s.IpWhitelist = &v
	return s
}

func (s *CreateLivePackageOriginEndpointRequest) SetLivePackagingConfig(v *LivePackagingConfig) *CreateLivePackageOriginEndpointRequest {
	s.LivePackagingConfig = v
	return s
}

func (s *CreateLivePackageOriginEndpointRequest) SetManifestName(v string) *CreateLivePackageOriginEndpointRequest {
	s.ManifestName = &v
	return s
}

func (s *CreateLivePackageOriginEndpointRequest) SetProtocol(v string) *CreateLivePackageOriginEndpointRequest {
	s.Protocol = &v
	return s
}

func (s *CreateLivePackageOriginEndpointRequest) SetTimeshiftVision(v int32) *CreateLivePackageOriginEndpointRequest {
	s.TimeshiftVision = &v
	return s
}

type CreateLivePackageOriginEndpointShrinkRequest struct {
	// The authorization code. It can be up to 200 characters in length. You must configure AuthorizationCode, IpWhitelist, or both. Format: [A-Za-z0-9-_.]+
	//
	// example:
	//
	// AbcDef123
	AuthorizationCode *string `json:"AuthorizationCode,omitempty" xml:"AuthorizationCode,omitempty"`
	// The channel name.
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-1
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The client token that is used to ensure the idempotence of the request.
	//
	// example:
	//
	// ****0311a423d11a5f7dee713535****
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The endpoint description.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The origin endpoint name. It can contain letters, digits, hyphens (-), and underscores (_). The name must be 1 to 200 characters in length. Format: [A-Za-z0-9_-]+
	//
	// This parameter is required.
	//
	// example:
	//
	// endpoint-1
	EndpointName *string `json:"EndpointName,omitempty" xml:"EndpointName,omitempty"`
	// The channel group name.
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-group-1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The IP address blacklist. It supports subnet masks. 0.0.0.0/0 is not allowed. It can be up to 1,000 characters in length. Separate multiple IP addresses with commas (,).
	//
	// example:
	//
	// 103.21.222.1/32,192.168.100.0/24
	IpBlacklist *string `json:"IpBlacklist,omitempty" xml:"IpBlacklist,omitempty"`
	// The IP address whitelist. It supports subnet masks. 0.0.0.0/0 is not allowed. It can be up to 1,000 characters in length. Separate multiple IP addresses with commas (,). You must configure AuthorizationCode, IpWhitelist, or both.
	//
	// example:
	//
	// 192.168.1.0/24,10.0.0.1/24
	IpWhitelist               *string `json:"IpWhitelist,omitempty" xml:"IpWhitelist,omitempty"`
	LivePackagingConfigShrink *string `json:"LivePackagingConfig,omitempty" xml:"LivePackagingConfig,omitempty"`
	// The playlist name. Default value: manifest.
	//
	// example:
	//
	// manifest
	ManifestName *string `json:"ManifestName,omitempty" xml:"ManifestName,omitempty"`
	// The distribution protocol.
	//
	// This parameter is required.
	//
	// example:
	//
	// HLS
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// The number of days that time-shifted content is available. Maximum value: 30. Default value: 0, which indicates that time shifting is not supported.
	//
	// example:
	//
	// 1
	TimeshiftVision *int32 `json:"TimeshiftVision,omitempty" xml:"TimeshiftVision,omitempty"`
}

func (s CreateLivePackageOriginEndpointShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLivePackageOriginEndpointShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateLivePackageOriginEndpointShrinkRequest) SetAuthorizationCode(v string) *CreateLivePackageOriginEndpointShrinkRequest {
	s.AuthorizationCode = &v
	return s
}

func (s *CreateLivePackageOriginEndpointShrinkRequest) SetChannelName(v string) *CreateLivePackageOriginEndpointShrinkRequest {
	s.ChannelName = &v
	return s
}

func (s *CreateLivePackageOriginEndpointShrinkRequest) SetClientToken(v string) *CreateLivePackageOriginEndpointShrinkRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateLivePackageOriginEndpointShrinkRequest) SetDescription(v string) *CreateLivePackageOriginEndpointShrinkRequest {
	s.Description = &v
	return s
}

func (s *CreateLivePackageOriginEndpointShrinkRequest) SetEndpointName(v string) *CreateLivePackageOriginEndpointShrinkRequest {
	s.EndpointName = &v
	return s
}

func (s *CreateLivePackageOriginEndpointShrinkRequest) SetGroupName(v string) *CreateLivePackageOriginEndpointShrinkRequest {
	s.GroupName = &v
	return s
}

func (s *CreateLivePackageOriginEndpointShrinkRequest) SetIpBlacklist(v string) *CreateLivePackageOriginEndpointShrinkRequest {
	s.IpBlacklist = &v
	return s
}

func (s *CreateLivePackageOriginEndpointShrinkRequest) SetIpWhitelist(v string) *CreateLivePackageOriginEndpointShrinkRequest {
	s.IpWhitelist = &v
	return s
}

func (s *CreateLivePackageOriginEndpointShrinkRequest) SetLivePackagingConfigShrink(v string) *CreateLivePackageOriginEndpointShrinkRequest {
	s.LivePackagingConfigShrink = &v
	return s
}

func (s *CreateLivePackageOriginEndpointShrinkRequest) SetManifestName(v string) *CreateLivePackageOriginEndpointShrinkRequest {
	s.ManifestName = &v
	return s
}

func (s *CreateLivePackageOriginEndpointShrinkRequest) SetProtocol(v string) *CreateLivePackageOriginEndpointShrinkRequest {
	s.Protocol = &v
	return s
}

func (s *CreateLivePackageOriginEndpointShrinkRequest) SetTimeshiftVision(v int32) *CreateLivePackageOriginEndpointShrinkRequest {
	s.TimeshiftVision = &v
	return s
}

type CreateLivePackageOriginEndpointResponseBody struct {
	// The information about the origin endpoint.
	LivePackageOriginEndpoint *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint `json:"LivePackageOriginEndpoint,omitempty" xml:"LivePackageOriginEndpoint,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateLivePackageOriginEndpointResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLivePackageOriginEndpointResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLivePackageOriginEndpointResponseBody) SetLivePackageOriginEndpoint(v *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) *CreateLivePackageOriginEndpointResponseBody {
	s.LivePackageOriginEndpoint = v
	return s
}

func (s *CreateLivePackageOriginEndpointResponseBody) SetRequestId(v string) *CreateLivePackageOriginEndpointResponseBody {
	s.RequestId = &v
	return s
}

type CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint struct {
	// The authorization code.
	//
	// example:
	//
	// Abcded123
	AuthorizationCode *string `json:"AuthorizationCode,omitempty" xml:"AuthorizationCode,omitempty"`
	// The channel name.
	//
	// example:
	//
	// channel-1
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The time when the endpoint was created.
	//
	// example:
	//
	// 2023-04-01T12:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The endpoint description.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The endpoint name.
	//
	// example:
	//
	// endpoint-1
	EndpointName *string `json:"EndpointName,omitempty" xml:"EndpointName,omitempty"`
	// The endpoint URL.
	//
	// example:
	//
	// https://xxx.packagepull-abcxxx.ap-southeast-1.aliyuncsiceintl.com/v1/group01/1/ch01/manifest
	EndpointUrl *string `json:"EndpointUrl,omitempty" xml:"EndpointUrl,omitempty"`
	// The channel group name.
	//
	// example:
	//
	// channel-group-1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The IP address blacklist.
	//
	// example:
	//
	// 103.21.222.1/32,192.168.100.0/24
	IpBlacklist *string `json:"IpBlacklist,omitempty" xml:"IpBlacklist,omitempty"`
	// The IP address whitelist.
	//
	// example:
	//
	// 192.168.1.0/24,10.0.0.1/24
	IpWhitelist *string `json:"IpWhitelist,omitempty" xml:"IpWhitelist,omitempty"`
	// The time when the endpoint was last modified.
	//
	// example:
	//
	// 2023-04-01T12:00:00Z
	LastModified        *string              `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	LivePackagingConfig *LivePackagingConfig `json:"LivePackagingConfig,omitempty" xml:"LivePackagingConfig,omitempty"`
	// The playlist name.
	//
	// example:
	//
	// manifest
	ManifestName *string `json:"ManifestName,omitempty" xml:"ManifestName,omitempty"`
	// The protocol. Only HLS is supported.
	//
	// example:
	//
	// HLS
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// The number of days that time-shifted content is available. Maximum value: 30.
	//
	// example:
	//
	// 1
	TimeshiftVision *int32 `json:"TimeshiftVision,omitempty" xml:"TimeshiftVision,omitempty"`
}

func (s CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) String() string {
	return tea.Prettify(s)
}

func (s CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) GoString() string {
	return s.String()
}

func (s *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetAuthorizationCode(v string) *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.AuthorizationCode = &v
	return s
}

func (s *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetChannelName(v string) *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.ChannelName = &v
	return s
}

func (s *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetCreateTime(v string) *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.CreateTime = &v
	return s
}

func (s *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetDescription(v string) *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.Description = &v
	return s
}

func (s *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetEndpointName(v string) *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.EndpointName = &v
	return s
}

func (s *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetEndpointUrl(v string) *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.EndpointUrl = &v
	return s
}

func (s *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetGroupName(v string) *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.GroupName = &v
	return s
}

func (s *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetIpBlacklist(v string) *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.IpBlacklist = &v
	return s
}

func (s *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetIpWhitelist(v string) *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.IpWhitelist = &v
	return s
}

func (s *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetLastModified(v string) *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.LastModified = &v
	return s
}

func (s *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetLivePackagingConfig(v *LivePackagingConfig) *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.LivePackagingConfig = v
	return s
}

func (s *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetManifestName(v string) *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.ManifestName = &v
	return s
}

func (s *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetProtocol(v string) *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.Protocol = &v
	return s
}

func (s *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetTimeshiftVision(v int32) *CreateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.TimeshiftVision = &v
	return s
}

type CreateLivePackageOriginEndpointResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateLivePackageOriginEndpointResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateLivePackageOriginEndpointResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLivePackageOriginEndpointResponse) GoString() string {
	return s.String()
}

func (s *CreateLivePackageOriginEndpointResponse) SetHeaders(v map[string]*string) *CreateLivePackageOriginEndpointResponse {
	s.Headers = v
	return s
}

func (s *CreateLivePackageOriginEndpointResponse) SetStatusCode(v int32) *CreateLivePackageOriginEndpointResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLivePackageOriginEndpointResponse) SetBody(v *CreateLivePackageOriginEndpointResponseBody) *CreateLivePackageOriginEndpointResponse {
	s.Body = v
	return s
}

type CreateLiveRecordTemplateRequest struct {
	// The name of the template.
	//
	// This parameter is required.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The list of recording formats.
	//
	// This parameter is required.
	RecordFormat []*CreateLiveRecordTemplateRequestRecordFormat `json:"RecordFormat,omitempty" xml:"RecordFormat,omitempty" type:"Repeated"`
}

func (s CreateLiveRecordTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveRecordTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateLiveRecordTemplateRequest) SetName(v string) *CreateLiveRecordTemplateRequest {
	s.Name = &v
	return s
}

func (s *CreateLiveRecordTemplateRequest) SetRecordFormat(v []*CreateLiveRecordTemplateRequestRecordFormat) *CreateLiveRecordTemplateRequest {
	s.RecordFormat = v
	return s
}

type CreateLiveRecordTemplateRequestRecordFormat struct {
	// The duration of the recording cycle. Unit: seconds. If you do not specify this parameter, the default value 6 hours is used.
	//
	// >
	//
	// 	- If a live stream is interrupted during a recording cycle but is resumed within 3 minutes, the stream is recorded in the same recording before and after the interruption.
	//
	// 	- If a live stream is interrupted for more than 3 minutes, a new recording is generated. To change the default stream interruption time, submit a ticket.
	//
	// example:
	//
	// 3600
	CycleDuration *int32 `json:"CycleDuration,omitempty" xml:"CycleDuration,omitempty"`
	// The format.
	//
	// >  If you set this parameter to m3u8, you must also specify the SliceOssObjectPrefix and SliceDuration parameters.
	//
	// This parameter is required.
	//
	// example:
	//
	// m3u8
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
	// The name of the recording file that is stored in Object Storage Service (OSS).
	//
	// 	- The name must be less than 256 bytes in length and can contain the {JobId}, {Sequence}, {StartTime}, {EndTime}, {EscapedStartTime}, and {EscapedEndTime} variables.
	//
	// 	- The name must contain the {StartTime} and {EndTime} variables or the {EscapedStartTime} and {EscapedEndTime} variables.
	//
	// example:
	//
	// record/{JobId}/{Sequence}_{EscapedStartTime}_{EscapedEndTime}
	OssObjectPrefix *string `json:"OssObjectPrefix,omitempty" xml:"OssObjectPrefix,omitempty"`
	// The duration of a single segment. Unit: seconds.
	//
	// >  This parameter takes effect only if you set Format to m3u8.
	//
	// If you do not specify this parameter, the default value 30 seconds is used. Valid values: 5 to 30.
	//
	// example:
	//
	// 30
	SliceDuration *int32 `json:"SliceDuration,omitempty" xml:"SliceDuration,omitempty"`
	// The name of the TS segment.
	//
	// >  This parameter is required only if you set Format to m3u8.
	//
	// 	- By default, the duration of a segment is 30 seconds. The segment name must be less than 256 bytes in length and can contain the {JobId}, {UnixTimestamp}, and {Sequence} variables.
	//
	// 	- The segment name must contain the {UnixTimestamp} and {Sequence} variables.
	//
	// example:
	//
	// record/{JobId}/{UnixTimestamp}_{Sequence}
	SliceOssObjectPrefix *string `json:"SliceOssObjectPrefix,omitempty" xml:"SliceOssObjectPrefix,omitempty"`
}

func (s CreateLiveRecordTemplateRequestRecordFormat) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveRecordTemplateRequestRecordFormat) GoString() string {
	return s.String()
}

func (s *CreateLiveRecordTemplateRequestRecordFormat) SetCycleDuration(v int32) *CreateLiveRecordTemplateRequestRecordFormat {
	s.CycleDuration = &v
	return s
}

func (s *CreateLiveRecordTemplateRequestRecordFormat) SetFormat(v string) *CreateLiveRecordTemplateRequestRecordFormat {
	s.Format = &v
	return s
}

func (s *CreateLiveRecordTemplateRequestRecordFormat) SetOssObjectPrefix(v string) *CreateLiveRecordTemplateRequestRecordFormat {
	s.OssObjectPrefix = &v
	return s
}

func (s *CreateLiveRecordTemplateRequestRecordFormat) SetSliceDuration(v int32) *CreateLiveRecordTemplateRequestRecordFormat {
	s.SliceDuration = &v
	return s
}

func (s *CreateLiveRecordTemplateRequestRecordFormat) SetSliceOssObjectPrefix(v string) *CreateLiveRecordTemplateRequestRecordFormat {
	s.SliceOssObjectPrefix = &v
	return s
}

type CreateLiveRecordTemplateShrinkRequest struct {
	// The name of the template.
	//
	// This parameter is required.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The list of recording formats.
	//
	// This parameter is required.
	RecordFormatShrink *string `json:"RecordFormat,omitempty" xml:"RecordFormat,omitempty"`
}

func (s CreateLiveRecordTemplateShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveRecordTemplateShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateLiveRecordTemplateShrinkRequest) SetName(v string) *CreateLiveRecordTemplateShrinkRequest {
	s.Name = &v
	return s
}

func (s *CreateLiveRecordTemplateShrinkRequest) SetRecordFormatShrink(v string) *CreateLiveRecordTemplateShrinkRequest {
	s.RecordFormatShrink = &v
	return s
}

type CreateLiveRecordTemplateResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 0622C702-41BE-467E-AF2E-883D4517962E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The template ID.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s CreateLiveRecordTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveRecordTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLiveRecordTemplateResponseBody) SetRequestId(v string) *CreateLiveRecordTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateLiveRecordTemplateResponseBody) SetTemplateId(v string) *CreateLiveRecordTemplateResponseBody {
	s.TemplateId = &v
	return s
}

type CreateLiveRecordTemplateResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateLiveRecordTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateLiveRecordTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveRecordTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateLiveRecordTemplateResponse) SetHeaders(v map[string]*string) *CreateLiveRecordTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateLiveRecordTemplateResponse) SetStatusCode(v int32) *CreateLiveRecordTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLiveRecordTemplateResponse) SetBody(v *CreateLiveRecordTemplateResponseBody) *CreateLiveRecordTemplateResponse {
	s.Body = v
	return s
}

type CreateLiveSnapshotTemplateRequest struct {
	// The naming format of the snapshot captured in overwrite mode.
	//
	// 	- The value cannot start with a forward slash (/). Only the suffix .jpg is supported.
	//
	// 	- It cannot exceed 255 characters in length.
	//
	// 	- The {JobId} placeholder is supported. It specifies the ID of the snapshot job.
	//
	// 	- Placeholders such as {UnixTimestamp}, {Sequence}, and {Date} are not allowed.
	//
	// 	- You must specify at least one of the OverwriteFormat and SequenceFormat parameters.
	//
	// example:
	//
	// snapshot/{JobId}.jpg
	OverwriteFormat *string `json:"OverwriteFormat,omitempty" xml:"OverwriteFormat,omitempty"`
	// The naming format of the snapshot captured in time series mode.
	//
	// 	- The value cannot start with a forward slash (/). Only the suffix .jpg is supported.
	//
	// 	- It cannot exceed 255 characters in length.
	//
	// 	- The {JobId}, {Date}, {UnixTimestamp}, and {Sequence} placeholders are supported. {JobId} specifies the ID of the snapshot job. {Date} specifies the date on which the snapshot is captured. {UnixTimestamp} specifies the timestamp of the snapshot. {Sequence} specifies the sequence number of the snapshot. You must specify at least one of the {UnixTimestamp} and {Sequence} placeholders.
	//
	// 	- You must specify at least one of the OverwriteFormat and SequenceFormat parameters.
	//
	// example:
	//
	// snapshot/{JobId}/{UnixTimestamp}.jpg
	SequenceFormat *string `json:"SequenceFormat,omitempty" xml:"SequenceFormat,omitempty"`
	// The name of the template.
	//
	// 	- It cannot exceed 128 characters in length.
	//
	// This parameter is required.
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// The interval between two adjacent snapshots. Unit: seconds.
	//
	// 	- Valid values: [5,3600].
	//
	// This parameter is required.
	//
	// example:
	//
	// 5
	TimeInterval *int32 `json:"TimeInterval,omitempty" xml:"TimeInterval,omitempty"`
}

func (s CreateLiveSnapshotTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveSnapshotTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateLiveSnapshotTemplateRequest) SetOverwriteFormat(v string) *CreateLiveSnapshotTemplateRequest {
	s.OverwriteFormat = &v
	return s
}

func (s *CreateLiveSnapshotTemplateRequest) SetSequenceFormat(v string) *CreateLiveSnapshotTemplateRequest {
	s.SequenceFormat = &v
	return s
}

func (s *CreateLiveSnapshotTemplateRequest) SetTemplateName(v string) *CreateLiveSnapshotTemplateRequest {
	s.TemplateName = &v
	return s
}

func (s *CreateLiveSnapshotTemplateRequest) SetTimeInterval(v int32) *CreateLiveSnapshotTemplateRequest {
	s.TimeInterval = &v
	return s
}

type CreateLiveSnapshotTemplateResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The template ID.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s CreateLiveSnapshotTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveSnapshotTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLiveSnapshotTemplateResponseBody) SetRequestId(v string) *CreateLiveSnapshotTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateLiveSnapshotTemplateResponseBody) SetTemplateId(v string) *CreateLiveSnapshotTemplateResponseBody {
	s.TemplateId = &v
	return s
}

type CreateLiveSnapshotTemplateResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateLiveSnapshotTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateLiveSnapshotTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveSnapshotTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateLiveSnapshotTemplateResponse) SetHeaders(v map[string]*string) *CreateLiveSnapshotTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateLiveSnapshotTemplateResponse) SetStatusCode(v int32) *CreateLiveSnapshotTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLiveSnapshotTemplateResponse) SetBody(v *CreateLiveSnapshotTemplateResponseBody) *CreateLiveSnapshotTemplateResponse {
	s.Body = v
	return s
}

type CreateLiveTranscodeTemplateRequest struct {
	// The name of the template.
	//
	// This parameter is required.
	//
	// example:
	//
	// my template
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The configuration of the template.
	TemplateConfig *CreateLiveTranscodeTemplateRequestTemplateConfig `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty" type:"Struct"`
	// The type of the template. Valid values:
	//
	// 	- normal
	//
	// 	- narrow-band
	//
	// 	- audio-only
	//
	// 	- origin
	//
	// This parameter is required.
	//
	// example:
	//
	// normal
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateLiveTranscodeTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveTranscodeTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateLiveTranscodeTemplateRequest) SetName(v string) *CreateLiveTranscodeTemplateRequest {
	s.Name = &v
	return s
}

func (s *CreateLiveTranscodeTemplateRequest) SetTemplateConfig(v *CreateLiveTranscodeTemplateRequestTemplateConfig) *CreateLiveTranscodeTemplateRequest {
	s.TemplateConfig = v
	return s
}

func (s *CreateLiveTranscodeTemplateRequest) SetType(v string) *CreateLiveTranscodeTemplateRequest {
	s.Type = &v
	return s
}

type CreateLiveTranscodeTemplateRequestTemplateConfig struct {
	// The audio parameters.
	AudioParams *CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams `json:"AudioParams,omitempty" xml:"AudioParams,omitempty" type:"Struct"`
	// The video parameters.
	VideoParams *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams `json:"VideoParams,omitempty" xml:"VideoParams,omitempty" type:"Struct"`
}

func (s CreateLiveTranscodeTemplateRequestTemplateConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveTranscodeTemplateRequestTemplateConfig) GoString() string {
	return s.String()
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfig) SetAudioParams(v *CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams) *CreateLiveTranscodeTemplateRequestTemplateConfig {
	s.AudioParams = v
	return s
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfig) SetVideoParams(v *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams) *CreateLiveTranscodeTemplateRequestTemplateConfig {
	s.VideoParams = v
	return s
}

type CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams struct {
	// The bitrate of the output audio. Unit: Kbit/s. Valid values: 1 to 1000.
	//
	// example:
	//
	// 100
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The number of sound channels. Valid values: 1: mono 2: binaural
	//
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// The audio codec. Valid values:
	//
	// 	- AAC
	//
	// 	- MP3
	//
	// example:
	//
	// AAC
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// The audio codec profile. Valid values when the Codec parameter is set to AAC:
	//
	// 	- aac_low
	//
	// 	- aac_he
	//
	// 	- aac_he_v2
	//
	// 	- aac_ld
	//
	// example:
	//
	// aaclow
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// The audio sampling rate. Valid values: 22050 to 96000.
	//
	// Note: If you set AudioProfile to aac_ld, the audio sampling rate cannot exceed 44,100.
	//
	// example:
	//
	// 44100
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
}

func (s CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams) GoString() string {
	return s.String()
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams) SetBitrate(v string) *CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams {
	s.Bitrate = &v
	return s
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams) SetChannels(v string) *CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams {
	s.Channels = &v
	return s
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams) SetCodec(v string) *CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams {
	s.Codec = &v
	return s
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams) SetProfile(v string) *CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams {
	s.Profile = &v
	return s
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams) SetSamplerate(v string) *CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams {
	s.Samplerate = &v
	return s
}

type CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams struct {
	// The bitrate of the output video. Unit: Kbit/s. Valid values: 1 to 6000.
	//
	// example:
	//
	// 2500
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The encoding type. Valid values:
	//
	// 	- H.264
	//
	// 	- H.265
	//
	// example:
	//
	// H.264
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// The frame rate of the output video. Unit: frames per second (FPS). Valid values: 1 to 60.
	//
	// example:
	//
	// 25
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// The group of pictures (GOP) of the output video. Unit: frame. Valid values: 1 to 3000.
	//
	// example:
	//
	// 1000
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// The height of the output video. Valid values: Height ≥ 128 max (Height,Width) ≤ 2560 min (Height,Width) ≤ 1440
	//
	// Note: The resolution of the output video that is transcoded by using the H.265 Narrowband HD transcoding template cannot exceed 1280 × 720 pixels.
	//
	// example:
	//
	// 720
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The encoding profile. The profile determines how a video is encoded. In most cases, a greater value indicates better image quality and higher resource consumption. Valid values: 1: baseline. This value is suitable for mobile devices. 2: main. This value is suitable for standard-definition devices. 3: high. This value is suitable for high-definition devices.
	//
	// example:
	//
	// 2
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// The width of the output video. Valid values: Width ≥ 128 max (Height,Width) ≤ 2560 min (Height,Width) ≤ 1440
	//
	// Note: The resolution of the output video that is transcoded by using the H.265 Narrowband HD transcoding template cannot exceed 1280 × 720 pixels.
	//
	// example:
	//
	// 1280
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams) GoString() string {
	return s.String()
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetBitrate(v string) *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Bitrate = &v
	return s
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetCodec(v string) *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Codec = &v
	return s
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetFps(v string) *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Fps = &v
	return s
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetGop(v string) *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Gop = &v
	return s
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetHeight(v string) *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Height = &v
	return s
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetProfile(v string) *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Profile = &v
	return s
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetWidth(v string) *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Width = &v
	return s
}

type CreateLiveTranscodeTemplateShrinkRequest struct {
	// The name of the template.
	//
	// This parameter is required.
	//
	// example:
	//
	// my template
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The configuration of the template.
	TemplateConfigShrink *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// The type of the template. Valid values:
	//
	// 	- normal
	//
	// 	- narrow-band
	//
	// 	- audio-only
	//
	// 	- origin
	//
	// This parameter is required.
	//
	// example:
	//
	// normal
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateLiveTranscodeTemplateShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveTranscodeTemplateShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateLiveTranscodeTemplateShrinkRequest) SetName(v string) *CreateLiveTranscodeTemplateShrinkRequest {
	s.Name = &v
	return s
}

func (s *CreateLiveTranscodeTemplateShrinkRequest) SetTemplateConfigShrink(v string) *CreateLiveTranscodeTemplateShrinkRequest {
	s.TemplateConfigShrink = &v
	return s
}

func (s *CreateLiveTranscodeTemplateShrinkRequest) SetType(v string) *CreateLiveTranscodeTemplateShrinkRequest {
	s.Type = &v
	return s
}

type CreateLiveTranscodeTemplateResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the template.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s CreateLiveTranscodeTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveTranscodeTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLiveTranscodeTemplateResponseBody) SetRequestId(v string) *CreateLiveTranscodeTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateLiveTranscodeTemplateResponseBody) SetTemplateId(v string) *CreateLiveTranscodeTemplateResponseBody {
	s.TemplateId = &v
	return s
}

type CreateLiveTranscodeTemplateResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateLiveTranscodeTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateLiveTranscodeTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveTranscodeTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateLiveTranscodeTemplateResponse) SetHeaders(v map[string]*string) *CreateLiveTranscodeTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateLiveTranscodeTemplateResponse) SetStatusCode(v int32) *CreateLiveTranscodeTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLiveTranscodeTemplateResponse) SetBody(v *CreateLiveTranscodeTemplateResponseBody) *CreateLiveTranscodeTemplateResponse {
	s.Body = v
	return s
}

type CreateMediaConnectFlowRequest struct {
	// The flow name.
	//
	// This parameter is required.
	//
	// example:
	//
	// AliTestFlow
	FlowName *string `json:"FlowName,omitempty" xml:"FlowName,omitempty"`
	// The region in which the flow resides.
	//
	// This parameter is required.
	//
	// example:
	//
	// ap-southeast-1
	FlowRegion *string `json:"FlowRegion,omitempty" xml:"FlowRegion,omitempty"`
}

func (s CreateMediaConnectFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaConnectFlowRequest) GoString() string {
	return s.String()
}

func (s *CreateMediaConnectFlowRequest) SetFlowName(v string) *CreateMediaConnectFlowRequest {
	s.FlowName = &v
	return s
}

func (s *CreateMediaConnectFlowRequest) SetFlowRegion(v string) *CreateMediaConnectFlowRequest {
	s.FlowRegion = &v
	return s
}

type CreateMediaConnectFlowResponseBody struct {
	// The response body.
	Content *CreateMediaConnectFlowResponseBodyContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// OK
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 86D92F9D-65E8-58A2-85D1-9DEEECC172E8
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The returned error code. A value of 0 indicates the call is successful.
	//
	// example:
	//
	// 0
	RetCode *int32 `json:"RetCode,omitempty" xml:"RetCode,omitempty"`
}

func (s CreateMediaConnectFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaConnectFlowResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMediaConnectFlowResponseBody) SetContent(v *CreateMediaConnectFlowResponseBodyContent) *CreateMediaConnectFlowResponseBody {
	s.Content = v
	return s
}

func (s *CreateMediaConnectFlowResponseBody) SetDescription(v string) *CreateMediaConnectFlowResponseBody {
	s.Description = &v
	return s
}

func (s *CreateMediaConnectFlowResponseBody) SetRequestId(v string) *CreateMediaConnectFlowResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMediaConnectFlowResponseBody) SetRetCode(v int32) *CreateMediaConnectFlowResponseBody {
	s.RetCode = &v
	return s
}

type CreateMediaConnectFlowResponseBodyContent struct {
	// The flow ID.
	//
	// example:
	//
	// 34900dc6-90ec-4968-af3c-fcd87f231a5f
	FlowId *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
}

func (s CreateMediaConnectFlowResponseBodyContent) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaConnectFlowResponseBodyContent) GoString() string {
	return s.String()
}

func (s *CreateMediaConnectFlowResponseBodyContent) SetFlowId(v string) *CreateMediaConnectFlowResponseBodyContent {
	s.FlowId = &v
	return s
}

type CreateMediaConnectFlowResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateMediaConnectFlowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateMediaConnectFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaConnectFlowResponse) GoString() string {
	return s.String()
}

func (s *CreateMediaConnectFlowResponse) SetHeaders(v map[string]*string) *CreateMediaConnectFlowResponse {
	s.Headers = v
	return s
}

func (s *CreateMediaConnectFlowResponse) SetStatusCode(v int32) *CreateMediaConnectFlowResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMediaConnectFlowResponse) SetBody(v *CreateMediaConnectFlowResponseBody) *CreateMediaConnectFlowResponse {
	s.Body = v
	return s
}

type CreateMediaLiveChannelRequest struct {
	// The audio settings.
	AudioSettings []*CreateMediaLiveChannelRequestAudioSettings `json:"AudioSettings,omitempty" xml:"AudioSettings,omitempty" type:"Repeated"`
	// The associated inputs.
	//
	// This parameter is required.
	InputAttachments []*CreateMediaLiveChannelRequestInputAttachments `json:"InputAttachments,omitempty" xml:"InputAttachments,omitempty" type:"Repeated"`
	// The name of the channel. Letters, digits, hyphens (-), and underscores (_) are supported. It can be up to 64 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// mych
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output groups.
	//
	// This parameter is required.
	OutputGroups []*CreateMediaLiveChannelRequestOutputGroups `json:"OutputGroups,omitempty" xml:"OutputGroups,omitempty" type:"Repeated"`
	// The video settings.
	VideoSettings []*CreateMediaLiveChannelRequestVideoSettings `json:"VideoSettings,omitempty" xml:"VideoSettings,omitempty" type:"Repeated"`
}

func (s CreateMediaLiveChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveChannelRequest) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveChannelRequest) SetAudioSettings(v []*CreateMediaLiveChannelRequestAudioSettings) *CreateMediaLiveChannelRequest {
	s.AudioSettings = v
	return s
}

func (s *CreateMediaLiveChannelRequest) SetInputAttachments(v []*CreateMediaLiveChannelRequestInputAttachments) *CreateMediaLiveChannelRequest {
	s.InputAttachments = v
	return s
}

func (s *CreateMediaLiveChannelRequest) SetName(v string) *CreateMediaLiveChannelRequest {
	s.Name = &v
	return s
}

func (s *CreateMediaLiveChannelRequest) SetOutputGroups(v []*CreateMediaLiveChannelRequestOutputGroups) *CreateMediaLiveChannelRequest {
	s.OutputGroups = v
	return s
}

func (s *CreateMediaLiveChannelRequest) SetVideoSettings(v []*CreateMediaLiveChannelRequestVideoSettings) *CreateMediaLiveChannelRequest {
	s.VideoSettings = v
	return s
}

type CreateMediaLiveChannelRequestAudioSettings struct {
	// The audio codec. If it is not specified, the source specification is used. Valid values: aac and libfdk_aac.
	//
	// example:
	//
	// libfdk_aac
	AudioCodec *string `json:"AudioCodec,omitempty" xml:"AudioCodec,omitempty"`
	// The audio encoding settings.
	AudioCodecSetting *CreateMediaLiveChannelRequestAudioSettingsAudioCodecSetting `json:"AudioCodecSetting,omitempty" xml:"AudioCodecSetting,omitempty" type:"Struct"`
	// The name of the audio selector.
	//
	// example:
	//
	// a1
	AudioSelectorName *string `json:"AudioSelectorName,omitempty" xml:"AudioSelectorName,omitempty"`
	// Enter a three-letter ISO 639-2 language code. If the audio track selected by the audio selector has a language code, the language code specified in the audio selector is used. If the selected audio track does not have a language code, or if the audio selector cannot find a track that matches its criteria, this language code is used.
	//
	// example:
	//
	// eng
	LanguageCode *string `json:"LanguageCode,omitempty" xml:"LanguageCode,omitempty"`
	// The tag that identifies the language of the RTMP input. It can be referenced by the output. The maximum length is 32 characters. Supported characters:
	//
	// 	- Unicode letters
	//
	// 	- Digits (0-9)
	//
	// 	- Underscore (_)
	//
	// 	- Hyphen (-)
	//
	// 	- Space (a space cannot be at the beginning or end)
	//
	// example:
	//
	// English
	LanguageName *string `json:"LanguageName,omitempty" xml:"LanguageName,omitempty"`
	// The name of the audio settings. Letters, digits, hyphens (-), and underscores (_) are supported. It can be up to 64 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// audio1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s CreateMediaLiveChannelRequestAudioSettings) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveChannelRequestAudioSettings) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveChannelRequestAudioSettings) SetAudioCodec(v string) *CreateMediaLiveChannelRequestAudioSettings {
	s.AudioCodec = &v
	return s
}

func (s *CreateMediaLiveChannelRequestAudioSettings) SetAudioCodecSetting(v *CreateMediaLiveChannelRequestAudioSettingsAudioCodecSetting) *CreateMediaLiveChannelRequestAudioSettings {
	s.AudioCodecSetting = v
	return s
}

func (s *CreateMediaLiveChannelRequestAudioSettings) SetAudioSelectorName(v string) *CreateMediaLiveChannelRequestAudioSettings {
	s.AudioSelectorName = &v
	return s
}

func (s *CreateMediaLiveChannelRequestAudioSettings) SetLanguageCode(v string) *CreateMediaLiveChannelRequestAudioSettings {
	s.LanguageCode = &v
	return s
}

func (s *CreateMediaLiveChannelRequestAudioSettings) SetLanguageName(v string) *CreateMediaLiveChannelRequestAudioSettings {
	s.LanguageName = &v
	return s
}

func (s *CreateMediaLiveChannelRequestAudioSettings) SetName(v string) *CreateMediaLiveChannelRequestAudioSettings {
	s.Name = &v
	return s
}

type CreateMediaLiveChannelRequestAudioSettingsAudioCodecSetting struct {
	// The audio bitrate. Unit: bit/s. Valid values: 8000 to 1000000. The value must be divisible by 1000.
	//
	// example:
	//
	// 200000
	Bitrate *int32 `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The audio codec profile. When AudioCodec is set to aac, AAC-LOW and AAC-MAIN are supported. When AudioCodec is set to libfdk_aac, AAC-LOW, AAC-HE, and AAC-HEV2 are supported.
	//
	// example:
	//
	// AAC-LOW
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// The audio sample rate. Unit: Hz. Valid values: 22050, 32000, 44100, 48000, and 96000.
	//
	// example:
	//
	// 44100
	SampleRate *int32 `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
}

func (s CreateMediaLiveChannelRequestAudioSettingsAudioCodecSetting) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveChannelRequestAudioSettingsAudioCodecSetting) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveChannelRequestAudioSettingsAudioCodecSetting) SetBitrate(v int32) *CreateMediaLiveChannelRequestAudioSettingsAudioCodecSetting {
	s.Bitrate = &v
	return s
}

func (s *CreateMediaLiveChannelRequestAudioSettingsAudioCodecSetting) SetProfile(v string) *CreateMediaLiveChannelRequestAudioSettingsAudioCodecSetting {
	s.Profile = &v
	return s
}

func (s *CreateMediaLiveChannelRequestAudioSettingsAudioCodecSetting) SetSampleRate(v int32) *CreateMediaLiveChannelRequestAudioSettingsAudioCodecSetting {
	s.SampleRate = &v
	return s
}

type CreateMediaLiveChannelRequestInputAttachments struct {
	// The audio selectors.
	AudioSelectors []*CreateMediaLiveChannelRequestInputAttachmentsAudioSelectors `json:"AudioSelectors,omitempty" xml:"AudioSelectors,omitempty" type:"Repeated"`
	// The ID of the associated input.
	//
	// This parameter is required.
	//
	// example:
	//
	// myinput
	InputId *string `json:"InputId,omitempty" xml:"InputId,omitempty"`
	// The tag that identifies the language of the RTMP input. It can be referenced by the output. The maximum length is 32 characters. Supported characters:
	//
	// 	- Unicode letters
	//
	// 	- Digits (0-9)
	//
	// 	- Underscore (_)
	//
	// 	- Hyphen (-)
	//
	// 	- Space (a space cannot be at the beginning or end)
	//
	// example:
	//
	// English
	LanguageName *string `json:"LanguageName,omitempty" xml:"LanguageName,omitempty"`
}

func (s CreateMediaLiveChannelRequestInputAttachments) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveChannelRequestInputAttachments) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveChannelRequestInputAttachments) SetAudioSelectors(v []*CreateMediaLiveChannelRequestInputAttachmentsAudioSelectors) *CreateMediaLiveChannelRequestInputAttachments {
	s.AudioSelectors = v
	return s
}

func (s *CreateMediaLiveChannelRequestInputAttachments) SetInputId(v string) *CreateMediaLiveChannelRequestInputAttachments {
	s.InputId = &v
	return s
}

func (s *CreateMediaLiveChannelRequestInputAttachments) SetLanguageName(v string) *CreateMediaLiveChannelRequestInputAttachments {
	s.LanguageName = &v
	return s
}

type CreateMediaLiveChannelRequestInputAttachmentsAudioSelectors struct {
	// The audio language selection.
	AudioLanguageSelection *CreateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioLanguageSelection `json:"AudioLanguageSelection,omitempty" xml:"AudioLanguageSelection,omitempty" type:"Struct"`
	// The audio PID selection.
	AudioPidSelection *CreateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioPidSelection `json:"AudioPidSelection,omitempty" xml:"AudioPidSelection,omitempty" type:"Struct"`
	// The audio track selection.
	AudioTrackSelection []*CreateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioTrackSelection `json:"AudioTrackSelection,omitempty" xml:"AudioTrackSelection,omitempty" type:"Repeated"`
	// The name of the audio selector. Letters, digits, hyphens (-), and underscores (_) are supported. It can be up to 64 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// myselector
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s CreateMediaLiveChannelRequestInputAttachmentsAudioSelectors) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveChannelRequestInputAttachmentsAudioSelectors) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveChannelRequestInputAttachmentsAudioSelectors) SetAudioLanguageSelection(v *CreateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioLanguageSelection) *CreateMediaLiveChannelRequestInputAttachmentsAudioSelectors {
	s.AudioLanguageSelection = v
	return s
}

func (s *CreateMediaLiveChannelRequestInputAttachmentsAudioSelectors) SetAudioPidSelection(v *CreateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioPidSelection) *CreateMediaLiveChannelRequestInputAttachmentsAudioSelectors {
	s.AudioPidSelection = v
	return s
}

func (s *CreateMediaLiveChannelRequestInputAttachmentsAudioSelectors) SetAudioTrackSelection(v []*CreateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioTrackSelection) *CreateMediaLiveChannelRequestInputAttachmentsAudioSelectors {
	s.AudioTrackSelection = v
	return s
}

func (s *CreateMediaLiveChannelRequestInputAttachmentsAudioSelectors) SetName(v string) *CreateMediaLiveChannelRequestInputAttachmentsAudioSelectors {
	s.Name = &v
	return s
}

type CreateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioLanguageSelection struct {
	// Enter a three-letter ISO 639-2 language code from within an audio source.
	//
	// This parameter is required.
	//
	// example:
	//
	// eng
	LanguageCode *string `json:"LanguageCode,omitempty" xml:"LanguageCode,omitempty"`
}

func (s CreateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioLanguageSelection) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioLanguageSelection) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioLanguageSelection) SetLanguageCode(v string) *CreateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioLanguageSelection {
	s.LanguageCode = &v
	return s
}

type CreateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioPidSelection struct {
	// Enter a specific PID from within a source.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123
	Pid *int64 `json:"Pid,omitempty" xml:"Pid,omitempty"`
}

func (s CreateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioPidSelection) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioPidSelection) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioPidSelection) SetPid(v int64) *CreateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioPidSelection {
	s.Pid = &v
	return s
}

type CreateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioTrackSelection struct {
	// Specify one or more audio tracks from within a source using Track ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	TrackId *int64 `json:"TrackId,omitempty" xml:"TrackId,omitempty"`
}

func (s CreateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioTrackSelection) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioTrackSelection) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioTrackSelection) SetTrackId(v int64) *CreateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioTrackSelection {
	s.TrackId = &v
	return s
}

type CreateMediaLiveChannelRequestOutputGroups struct {
	// The MediaPackage destination.
	MediaPackageGroupSetting *CreateMediaLiveChannelRequestOutputGroupsMediaPackageGroupSetting `json:"MediaPackageGroupSetting,omitempty" xml:"MediaPackageGroupSetting,omitempty" type:"Struct"`
	// The name of the output group. Letters, digits, hyphens (-), and underscores (_) are supported. It can be up to 64 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// group1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The outputs in the output group.
	//
	// This parameter is required.
	Outputs []*CreateMediaLiveChannelRequestOutputGroupsOutputs `json:"Outputs,omitempty" xml:"Outputs,omitempty" type:"Repeated"`
	// The output group type. Only MediaPackage is supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// MediaPackage
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateMediaLiveChannelRequestOutputGroups) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveChannelRequestOutputGroups) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveChannelRequestOutputGroups) SetMediaPackageGroupSetting(v *CreateMediaLiveChannelRequestOutputGroupsMediaPackageGroupSetting) *CreateMediaLiveChannelRequestOutputGroups {
	s.MediaPackageGroupSetting = v
	return s
}

func (s *CreateMediaLiveChannelRequestOutputGroups) SetName(v string) *CreateMediaLiveChannelRequestOutputGroups {
	s.Name = &v
	return s
}

func (s *CreateMediaLiveChannelRequestOutputGroups) SetOutputs(v []*CreateMediaLiveChannelRequestOutputGroupsOutputs) *CreateMediaLiveChannelRequestOutputGroups {
	s.Outputs = v
	return s
}

func (s *CreateMediaLiveChannelRequestOutputGroups) SetType(v string) *CreateMediaLiveChannelRequestOutputGroups {
	s.Type = &v
	return s
}

type CreateMediaLiveChannelRequestOutputGroupsMediaPackageGroupSetting struct {
	// ChannelName in MediaPackage.
	//
	// This parameter is required.
	//
	// example:
	//
	// myPackageChannel
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// GroupName in MediaPackage.
	//
	// This parameter is required.
	//
	// example:
	//
	// myPackageGroup
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s CreateMediaLiveChannelRequestOutputGroupsMediaPackageGroupSetting) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveChannelRequestOutputGroupsMediaPackageGroupSetting) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveChannelRequestOutputGroupsMediaPackageGroupSetting) SetChannelName(v string) *CreateMediaLiveChannelRequestOutputGroupsMediaPackageGroupSetting {
	s.ChannelName = &v
	return s
}

func (s *CreateMediaLiveChannelRequestOutputGroupsMediaPackageGroupSetting) SetGroupName(v string) *CreateMediaLiveChannelRequestOutputGroupsMediaPackageGroupSetting {
	s.GroupName = &v
	return s
}

type CreateMediaLiveChannelRequestOutputGroupsOutputs struct {
	// The referenced AudioSettings.
	AudioSettingNames []*string `json:"AudioSettingNames,omitempty" xml:"AudioSettingNames,omitempty" type:"Repeated"`
	// The settings of the output delivered to MediaPackage.
	MediaPackageOutputSetting *CreateMediaLiveChannelRequestOutputGroupsOutputsMediaPackageOutputSetting `json:"MediaPackageOutputSetting,omitempty" xml:"MediaPackageOutputSetting,omitempty" type:"Struct"`
	// The media type of the output. Valid values:
	//
	// 	- 0: Audio and Video.
	//
	// 	- 1: Audio. If you set the value to 1, you cannot reference VideoSettings.
	//
	// 	- 2: Video. If you set the value to 2, you cannot reference AudioSettings.
	//
	// example:
	//
	// 0
	MediaType *int32 `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// The name of the output. Letters, digits, hyphens (-), and underscores (_) are supported. It can be up to 64 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// output1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The name of the referenced VideoSettings.
	//
	// example:
	//
	// myVideo1
	VideoSettingName *string `json:"VideoSettingName,omitempty" xml:"VideoSettingName,omitempty"`
}

func (s CreateMediaLiveChannelRequestOutputGroupsOutputs) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveChannelRequestOutputGroupsOutputs) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveChannelRequestOutputGroupsOutputs) SetAudioSettingNames(v []*string) *CreateMediaLiveChannelRequestOutputGroupsOutputs {
	s.AudioSettingNames = v
	return s
}

func (s *CreateMediaLiveChannelRequestOutputGroupsOutputs) SetMediaPackageOutputSetting(v *CreateMediaLiveChannelRequestOutputGroupsOutputsMediaPackageOutputSetting) *CreateMediaLiveChannelRequestOutputGroupsOutputs {
	s.MediaPackageOutputSetting = v
	return s
}

func (s *CreateMediaLiveChannelRequestOutputGroupsOutputs) SetMediaType(v int32) *CreateMediaLiveChannelRequestOutputGroupsOutputs {
	s.MediaType = &v
	return s
}

func (s *CreateMediaLiveChannelRequestOutputGroupsOutputs) SetName(v string) *CreateMediaLiveChannelRequestOutputGroupsOutputs {
	s.Name = &v
	return s
}

func (s *CreateMediaLiveChannelRequestOutputGroupsOutputs) SetVideoSettingName(v string) *CreateMediaLiveChannelRequestOutputGroupsOutputs {
	s.VideoSettingName = &v
	return s
}

type CreateMediaLiveChannelRequestOutputGroupsOutputsMediaPackageOutputSetting struct {
	// The manifest audio group ID. To associate several audio tracks into one group, assign the same audio group ID. Viewers can select a track as needed. Letters, digits, hyphens (-), and underscores (_) are supported. It can be up to 40 characters in length.
	//
	// example:
	//
	// audiogroup
	AudioGroupId *string `json:"AudioGroupId,omitempty" xml:"AudioGroupId,omitempty"`
	// The manifest name modifier. The child manifests include this modifier in their M3U8 file names. Letters, digits, hyphens (-), and underscores (_) are supported. The maximum length is 40 characters.
	//
	// example:
	//
	// 480p
	NameModifier *string `json:"NameModifier,omitempty" xml:"NameModifier,omitempty"`
}

func (s CreateMediaLiveChannelRequestOutputGroupsOutputsMediaPackageOutputSetting) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveChannelRequestOutputGroupsOutputsMediaPackageOutputSetting) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveChannelRequestOutputGroupsOutputsMediaPackageOutputSetting) SetAudioGroupId(v string) *CreateMediaLiveChannelRequestOutputGroupsOutputsMediaPackageOutputSetting {
	s.AudioGroupId = &v
	return s
}

func (s *CreateMediaLiveChannelRequestOutputGroupsOutputsMediaPackageOutputSetting) SetNameModifier(v string) *CreateMediaLiveChannelRequestOutputGroupsOutputsMediaPackageOutputSetting {
	s.NameModifier = &v
	return s
}

type CreateMediaLiveChannelRequestVideoSettings struct {
	// The height of the output. If you set it to 0 or leave it empty, the height automatically adapts to the specified width to maintain the original aspect ratio.
	//
	// Valid values:
	//
	// 	- For regular transcoding, the larger dimension cannot exceed 3840 px, and the smaller one cannot exceed 2160 px.
	//
	// 	- For Narrowband HD™ transcoding, the larger dimension cannot exceed 1920 px, and the smaller one cannot exceed 1080 px.
	//
	// example:
	//
	// 720
	Height *int32 `json:"Height,omitempty" xml:"Height,omitempty"`
	// The name of the video settings. Letters, digits, hyphens (-), and underscores (_) are supported. It can be up to 64 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// video1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The video codec. Valid values: H264 and H265.
	//
	// example:
	//
	// H264
	VideoCodec *string `json:"VideoCodec,omitempty" xml:"VideoCodec,omitempty"`
	// The video encoding settings.
	VideoCodecSetting *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSetting `json:"VideoCodecSetting,omitempty" xml:"VideoCodecSetting,omitempty" type:"Struct"`
	// The video transcoding method. Valid values:
	//
	// 	- NORMAL: regular transcoding
	//
	// 	- NBHD: Narrowband HD™ transcoding
	//
	// If not specified, regular transcoding is used by default.
	//
	// example:
	//
	// NORMAL
	VideoCodecType *string `json:"VideoCodecType,omitempty" xml:"VideoCodecType,omitempty"`
	// The width of the output. If you set it to 0 or leave it empty, the width automatically adapts to the specified height to maintain the original aspect ratio.
	//
	// Valid values:
	//
	// 	- For regular transcoding, the larger dimension cannot exceed 3840 px, and the smaller one cannot exceed 2160 px.
	//
	// 	- For Narrowband HD™ transcoding, the larger dimension cannot exceed 1920 px, and the smaller one cannot exceed 1080 px.
	//
	// example:
	//
	// 1280
	Width *int32 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s CreateMediaLiveChannelRequestVideoSettings) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveChannelRequestVideoSettings) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveChannelRequestVideoSettings) SetHeight(v int32) *CreateMediaLiveChannelRequestVideoSettings {
	s.Height = &v
	return s
}

func (s *CreateMediaLiveChannelRequestVideoSettings) SetName(v string) *CreateMediaLiveChannelRequestVideoSettings {
	s.Name = &v
	return s
}

func (s *CreateMediaLiveChannelRequestVideoSettings) SetVideoCodec(v string) *CreateMediaLiveChannelRequestVideoSettings {
	s.VideoCodec = &v
	return s
}

func (s *CreateMediaLiveChannelRequestVideoSettings) SetVideoCodecSetting(v *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSetting) *CreateMediaLiveChannelRequestVideoSettings {
	s.VideoCodecSetting = v
	return s
}

func (s *CreateMediaLiveChannelRequestVideoSettings) SetVideoCodecType(v string) *CreateMediaLiveChannelRequestVideoSettings {
	s.VideoCodecType = &v
	return s
}

func (s *CreateMediaLiveChannelRequestVideoSettings) SetWidth(v int32) *CreateMediaLiveChannelRequestVideoSettings {
	s.Width = &v
	return s
}

type CreateMediaLiveChannelRequestVideoSettingsVideoCodecSetting struct {
	// The video encoding settings.
	CodecDetail *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingCodecDetail `json:"CodecDetail,omitempty" xml:"CodecDetail,omitempty" type:"Struct"`
	// The frame rate. If it is not specified, the source specification is used.
	Framerate *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingFramerate `json:"Framerate,omitempty" xml:"Framerate,omitempty" type:"Struct"`
	// The GOP setting. If it is not specified, the source specification is used.
	Gop *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingGop `json:"Gop,omitempty" xml:"Gop,omitempty" type:"Struct"`
	// The video encoding rate. If it is not specified, the source specification is used.
	Rate *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingRate `json:"Rate,omitempty" xml:"Rate,omitempty" type:"Struct"`
}

func (s CreateMediaLiveChannelRequestVideoSettingsVideoCodecSetting) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveChannelRequestVideoSettingsVideoCodecSetting) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSetting) SetCodecDetail(v *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingCodecDetail) *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSetting {
	s.CodecDetail = v
	return s
}

func (s *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSetting) SetFramerate(v *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingFramerate) *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSetting {
	s.Framerate = v
	return s
}

func (s *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSetting) SetGop(v *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingGop) *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSetting {
	s.Gop = v
	return s
}

func (s *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSetting) SetRate(v *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingRate) *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSetting {
	s.Rate = v
	return s
}

type CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingCodecDetail struct {
	// The video encoding level. It is not supported yet.
	//
	// example:
	//
	// H264_LEVEL_AUTO
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The H.264 profile. Valid values: BASELINE, HIGH, and MAIN. Default value: MAIN. The parameter takes effect only when the codec is H.264.
	//
	// example:
	//
	// MAIN
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
}

func (s CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingCodecDetail) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingCodecDetail) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingCodecDetail) SetLevel(v string) *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingCodecDetail {
	s.Level = &v
	return s
}

func (s *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingCodecDetail) SetProfile(v string) *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingCodecDetail {
	s.Profile = &v
	return s
}

type CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingFramerate struct {
	// The frame rate mode. Valid values: SPECIFIED (fixed frame rate) and FROM_SOURCE (use source specification).
	//
	// example:
	//
	// SPECIFIED
	FramerateControl *string `json:"FramerateControl,omitempty" xml:"FramerateControl,omitempty"`
	// The denominator of the fixed frame rate. The parameter is required when FramerateControl is set to SPECIFIED. Valid values: 1 to 60. The numerator must be divisible by the denominator.
	//
	// example:
	//
	// 1
	FramerateDenominator *int32 `json:"FramerateDenominator,omitempty" xml:"FramerateDenominator,omitempty"`
	// The numerator of the fixed frame rate. The parameter is required when FramerateControl is set to SPECIFIED. Valid values: 1 to 60. The numerator must be divisible by the denominator.
	//
	// example:
	//
	// 25
	FramerateNumerator *int32 `json:"FramerateNumerator,omitempty" xml:"FramerateNumerator,omitempty"`
}

func (s CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingFramerate) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingFramerate) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingFramerate) SetFramerateControl(v string) *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingFramerate {
	s.FramerateControl = &v
	return s
}

func (s *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingFramerate) SetFramerateDenominator(v int32) *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingFramerate {
	s.FramerateDenominator = &v
	return s
}

func (s *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingFramerate) SetFramerateNumerator(v int32) *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingFramerate {
	s.FramerateNumerator = &v
	return s
}

type CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingGop struct {
	// The number of B frames. Valid values: 1 to 3.
	//
	// example:
	//
	// 3
	BframesNum *int32 `json:"BframesNum,omitempty" xml:"BframesNum,omitempty"`
	// The GOP size. When GopSizeUnits is set to SECONDS, the value range is from 1 to 20. When GopSizeUnits is set to FRAMES, the value range is from 1 to 3000.
	//
	// example:
	//
	// 90
	GopSize *int32 `json:"GopSize,omitempty" xml:"GopSize,omitempty"`
	// The GOP size unit. Valid values: FRAMES and SECONDS.
	//
	// example:
	//
	// FRAMES
	GopSizeUnits *string `json:"GopSizeUnits,omitempty" xml:"GopSizeUnits,omitempty"`
}

func (s CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingGop) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingGop) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingGop) SetBframesNum(v int32) *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingGop {
	s.BframesNum = &v
	return s
}

func (s *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingGop) SetGopSize(v int32) *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingGop {
	s.GopSize = &v
	return s
}

func (s *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingGop) SetGopSizeUnits(v string) *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingGop {
	s.GopSizeUnits = &v
	return s
}

type CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingRate struct {
	// The video bitrate. Unit: bit/s. If you set it to 0 or leave it empty, the source specification is used. Valid values: 50000 to 6000000. The value must be divisible by 1000.
	//
	// example:
	//
	// 2500000
	Bitrate *int32 `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The video buffer size. Unit: bit/s. Valid values: 100000 to 6000000. The value must be divisible by 1000.
	//
	// example:
	//
	// 6000000
	BufferSize *int32 `json:"BufferSize,omitempty" xml:"BufferSize,omitempty"`
	// The maximum bitrate. Unit: bit/s. Valid values: 100000 to 6000000. The value must be divisible by 1000.
	//
	// example:
	//
	// 6000000
	MaxBitrate *int32 `json:"MaxBitrate,omitempty" xml:"MaxBitrate,omitempty"`
	// The bitrate control mode. Valid values: CBR, ABR, and VBR.
	//
	// example:
	//
	// ABR
	RateControlMode *string `json:"RateControlMode,omitempty" xml:"RateControlMode,omitempty"`
}

func (s CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingRate) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingRate) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingRate) SetBitrate(v int32) *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingRate {
	s.Bitrate = &v
	return s
}

func (s *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingRate) SetBufferSize(v int32) *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingRate {
	s.BufferSize = &v
	return s
}

func (s *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingRate) SetMaxBitrate(v int32) *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingRate {
	s.MaxBitrate = &v
	return s
}

func (s *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingRate) SetRateControlMode(v string) *CreateMediaLiveChannelRequestVideoSettingsVideoCodecSettingRate {
	s.RateControlMode = &v
	return s
}

type CreateMediaLiveChannelShrinkRequest struct {
	// The audio settings.
	AudioSettingsShrink *string `json:"AudioSettings,omitempty" xml:"AudioSettings,omitempty"`
	// The associated inputs.
	//
	// This parameter is required.
	InputAttachmentsShrink *string `json:"InputAttachments,omitempty" xml:"InputAttachments,omitempty"`
	// The name of the channel. Letters, digits, hyphens (-), and underscores (_) are supported. It can be up to 64 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// mych
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output groups.
	//
	// This parameter is required.
	OutputGroupsShrink *string `json:"OutputGroups,omitempty" xml:"OutputGroups,omitempty"`
	// The video settings.
	VideoSettingsShrink *string `json:"VideoSettings,omitempty" xml:"VideoSettings,omitempty"`
}

func (s CreateMediaLiveChannelShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveChannelShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveChannelShrinkRequest) SetAudioSettingsShrink(v string) *CreateMediaLiveChannelShrinkRequest {
	s.AudioSettingsShrink = &v
	return s
}

func (s *CreateMediaLiveChannelShrinkRequest) SetInputAttachmentsShrink(v string) *CreateMediaLiveChannelShrinkRequest {
	s.InputAttachmentsShrink = &v
	return s
}

func (s *CreateMediaLiveChannelShrinkRequest) SetName(v string) *CreateMediaLiveChannelShrinkRequest {
	s.Name = &v
	return s
}

func (s *CreateMediaLiveChannelShrinkRequest) SetOutputGroupsShrink(v string) *CreateMediaLiveChannelShrinkRequest {
	s.OutputGroupsShrink = &v
	return s
}

func (s *CreateMediaLiveChannelShrinkRequest) SetVideoSettingsShrink(v string) *CreateMediaLiveChannelShrinkRequest {
	s.VideoSettingsShrink = &v
	return s
}

type CreateMediaLiveChannelResponseBody struct {
	// The ID of the channel.
	//
	// example:
	//
	// SEGK5KA6KYKAWQQH
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateMediaLiveChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveChannelResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveChannelResponseBody) SetChannelId(v string) *CreateMediaLiveChannelResponseBody {
	s.ChannelId = &v
	return s
}

func (s *CreateMediaLiveChannelResponseBody) SetRequestId(v string) *CreateMediaLiveChannelResponseBody {
	s.RequestId = &v
	return s
}

type CreateMediaLiveChannelResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateMediaLiveChannelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateMediaLiveChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveChannelResponse) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveChannelResponse) SetHeaders(v map[string]*string) *CreateMediaLiveChannelResponse {
	s.Headers = v
	return s
}

func (s *CreateMediaLiveChannelResponse) SetStatusCode(v int32) *CreateMediaLiveChannelResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMediaLiveChannelResponse) SetBody(v *CreateMediaLiveChannelResponseBody) *CreateMediaLiveChannelResponse {
	s.Body = v
	return s
}

type CreateMediaLiveInputRequest struct {
	// The input settings. An input can have up to two sources: primary and backup sources.
	//
	// This parameter is required.
	InputSettings []*CreateMediaLiveInputRequestInputSettings `json:"InputSettings,omitempty" xml:"InputSettings,omitempty" type:"Repeated"`
	// The name of the input. Letters, digits, hyphens (-), and underscores (_) are supported. It can be up to 64 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// myinput
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The IDs of the security groups to be associated with the input. This parameter is required for PUSH inputs.
	//
	// example:
	//
	// ["G6G4X5T4SZYPSTT5"]
	SecurityGroupIds []*string `json:"SecurityGroupIds,omitempty" xml:"SecurityGroupIds,omitempty" type:"Repeated"`
	// The input type. Valid values: RTMP_PUSH, RTMP_PULL, SRT_PUSH, SRT_PULL, and MEDIA_CONNECT.
	//
	// This parameter is required.
	//
	// example:
	//
	// RTMP_PUSH
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateMediaLiveInputRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveInputRequest) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveInputRequest) SetInputSettings(v []*CreateMediaLiveInputRequestInputSettings) *CreateMediaLiveInputRequest {
	s.InputSettings = v
	return s
}

func (s *CreateMediaLiveInputRequest) SetName(v string) *CreateMediaLiveInputRequest {
	s.Name = &v
	return s
}

func (s *CreateMediaLiveInputRequest) SetSecurityGroupIds(v []*string) *CreateMediaLiveInputRequest {
	s.SecurityGroupIds = v
	return s
}

func (s *CreateMediaLiveInputRequest) SetType(v string) *CreateMediaLiveInputRequest {
	s.Type = &v
	return s
}

type CreateMediaLiveInputRequestInputSettings struct {
	// The ID of the flow from MediaConnect. This parameter is required when Type is set to MEDIA_CONNECT.
	//
	// example:
	//
	// ******81-9693-40dc-bbab-db5e49******
	FlowId *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	// The output name of the MediaConnect flow. This parameter is required when Type is set to MEDIA_CONNECT.
	//
	// example:
	//
	// myFlowOutputName
	FlowOutputName *string `json:"FlowOutputName,omitempty" xml:"FlowOutputName,omitempty"`
	// The source URL from which the stream is pulled. This parameter is required for PULL inputs.
	//
	// example:
	//
	// rtmp://domain/app/stream
	SourceUrl *string `json:"SourceUrl,omitempty" xml:"SourceUrl,omitempty"`
	// The name of the pushed stream. This parameter is required for PUSH inputs. It can be up to 255 characters in length.
	//
	// example:
	//
	// mystream
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s CreateMediaLiveInputRequestInputSettings) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveInputRequestInputSettings) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveInputRequestInputSettings) SetFlowId(v string) *CreateMediaLiveInputRequestInputSettings {
	s.FlowId = &v
	return s
}

func (s *CreateMediaLiveInputRequestInputSettings) SetFlowOutputName(v string) *CreateMediaLiveInputRequestInputSettings {
	s.FlowOutputName = &v
	return s
}

func (s *CreateMediaLiveInputRequestInputSettings) SetSourceUrl(v string) *CreateMediaLiveInputRequestInputSettings {
	s.SourceUrl = &v
	return s
}

func (s *CreateMediaLiveInputRequestInputSettings) SetStreamName(v string) *CreateMediaLiveInputRequestInputSettings {
	s.StreamName = &v
	return s
}

type CreateMediaLiveInputShrinkRequest struct {
	// The input settings. An input can have up to two sources: primary and backup sources.
	//
	// This parameter is required.
	InputSettingsShrink *string `json:"InputSettings,omitempty" xml:"InputSettings,omitempty"`
	// The name of the input. Letters, digits, hyphens (-), and underscores (_) are supported. It can be up to 64 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// myinput
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The IDs of the security groups to be associated with the input. This parameter is required for PUSH inputs.
	//
	// example:
	//
	// ["G6G4X5T4SZYPSTT5"]
	SecurityGroupIdsShrink *string `json:"SecurityGroupIds,omitempty" xml:"SecurityGroupIds,omitempty"`
	// The input type. Valid values: RTMP_PUSH, RTMP_PULL, SRT_PUSH, SRT_PULL, and MEDIA_CONNECT.
	//
	// This parameter is required.
	//
	// example:
	//
	// RTMP_PUSH
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateMediaLiveInputShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveInputShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveInputShrinkRequest) SetInputSettingsShrink(v string) *CreateMediaLiveInputShrinkRequest {
	s.InputSettingsShrink = &v
	return s
}

func (s *CreateMediaLiveInputShrinkRequest) SetName(v string) *CreateMediaLiveInputShrinkRequest {
	s.Name = &v
	return s
}

func (s *CreateMediaLiveInputShrinkRequest) SetSecurityGroupIdsShrink(v string) *CreateMediaLiveInputShrinkRequest {
	s.SecurityGroupIdsShrink = &v
	return s
}

func (s *CreateMediaLiveInputShrinkRequest) SetType(v string) *CreateMediaLiveInputShrinkRequest {
	s.Type = &v
	return s
}

type CreateMediaLiveInputResponseBody struct {
	// The ID of the input.
	//
	// example:
	//
	// SEGK5KA6KYKAWQQH
	InputId *string `json:"InputId,omitempty" xml:"InputId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateMediaLiveInputResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveInputResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveInputResponseBody) SetInputId(v string) *CreateMediaLiveInputResponseBody {
	s.InputId = &v
	return s
}

func (s *CreateMediaLiveInputResponseBody) SetRequestId(v string) *CreateMediaLiveInputResponseBody {
	s.RequestId = &v
	return s
}

type CreateMediaLiveInputResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateMediaLiveInputResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateMediaLiveInputResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveInputResponse) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveInputResponse) SetHeaders(v map[string]*string) *CreateMediaLiveInputResponse {
	s.Headers = v
	return s
}

func (s *CreateMediaLiveInputResponse) SetStatusCode(v int32) *CreateMediaLiveInputResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMediaLiveInputResponse) SetBody(v *CreateMediaLiveInputResponseBody) *CreateMediaLiveInputResponse {
	s.Body = v
	return s
}

type CreateMediaLiveInputSecurityGroupRequest struct {
	// The name of the security group. Letters, digits, hyphens (-), and underscores (_) are supported. The maximum length is 64 characters.
	//
	// This parameter is required.
	//
	// example:
	//
	// mysg
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The security group rules.
	//
	// This parameter is required.
	//
	// example:
	//
	// ["10.1.1.0/24", "11.11.11.11/0"]
	WhitelistRules []*string `json:"WhitelistRules,omitempty" xml:"WhitelistRules,omitempty" type:"Repeated"`
}

func (s CreateMediaLiveInputSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveInputSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveInputSecurityGroupRequest) SetName(v string) *CreateMediaLiveInputSecurityGroupRequest {
	s.Name = &v
	return s
}

func (s *CreateMediaLiveInputSecurityGroupRequest) SetWhitelistRules(v []*string) *CreateMediaLiveInputSecurityGroupRequest {
	s.WhitelistRules = v
	return s
}

type CreateMediaLiveInputSecurityGroupShrinkRequest struct {
	// The name of the security group. Letters, digits, hyphens (-), and underscores (_) are supported. The maximum length is 64 characters.
	//
	// This parameter is required.
	//
	// example:
	//
	// mysg
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The security group rules.
	//
	// This parameter is required.
	//
	// example:
	//
	// ["10.1.1.0/24", "11.11.11.11/0"]
	WhitelistRulesShrink *string `json:"WhitelistRules,omitempty" xml:"WhitelistRules,omitempty"`
}

func (s CreateMediaLiveInputSecurityGroupShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveInputSecurityGroupShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveInputSecurityGroupShrinkRequest) SetName(v string) *CreateMediaLiveInputSecurityGroupShrinkRequest {
	s.Name = &v
	return s
}

func (s *CreateMediaLiveInputSecurityGroupShrinkRequest) SetWhitelistRulesShrink(v string) *CreateMediaLiveInputSecurityGroupShrinkRequest {
	s.WhitelistRulesShrink = &v
	return s
}

type CreateMediaLiveInputSecurityGroupResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the security group.
	//
	// example:
	//
	// SEGK5KA6KYKAWQQH
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
}

func (s CreateMediaLiveInputSecurityGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveInputSecurityGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveInputSecurityGroupResponseBody) SetRequestId(v string) *CreateMediaLiveInputSecurityGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMediaLiveInputSecurityGroupResponseBody) SetSecurityGroupId(v string) *CreateMediaLiveInputSecurityGroupResponseBody {
	s.SecurityGroupId = &v
	return s
}

type CreateMediaLiveInputSecurityGroupResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateMediaLiveInputSecurityGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateMediaLiveInputSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaLiveInputSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateMediaLiveInputSecurityGroupResponse) SetHeaders(v map[string]*string) *CreateMediaLiveInputSecurityGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateMediaLiveInputSecurityGroupResponse) SetStatusCode(v int32) *CreateMediaLiveInputSecurityGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMediaLiveInputSecurityGroupResponse) SetBody(v *CreateMediaLiveInputSecurityGroupResponseBody) *CreateMediaLiveInputSecurityGroupResponse {
	s.Body = v
	return s
}

type CreatePipelineRequest struct {
	// The name of the MPS queue.
	//
	// This parameter is required.
	//
	// example:
	//
	// test-pipeline
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The priority. Default value: 6. Valid values: 1 to 10. A greater value specifies a higher priority.
	//
	// example:
	//
	// 6
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The type of the MPS queue. Valid values:
	//
	// 1.  Standard: standard MPS queue.
	//
	// 2.  Boost: MPS queue with transcoding speed boosted.
	//
	// 3.  NarrowBandHDV2: MPS queue that supports Narrowband HD 2.0.
	//
	// This parameter is required.
	//
	// example:
	//
	// Standard
	Speed *string `json:"Speed,omitempty" xml:"Speed,omitempty"`
}

func (s CreatePipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePipelineRequest) GoString() string {
	return s.String()
}

func (s *CreatePipelineRequest) SetName(v string) *CreatePipelineRequest {
	s.Name = &v
	return s
}

func (s *CreatePipelineRequest) SetPriority(v int32) *CreatePipelineRequest {
	s.Priority = &v
	return s
}

func (s *CreatePipelineRequest) SetSpeed(v string) *CreatePipelineRequest {
	s.Speed = &v
	return s
}

type CreatePipelineResponseBody struct {
	// The information about the MPS queue.
	Pipeline *CreatePipelineResponseBodyPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreatePipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreatePipelineResponseBody) GoString() string {
	return s.String()
}

func (s *CreatePipelineResponseBody) SetPipeline(v *CreatePipelineResponseBodyPipeline) *CreatePipelineResponseBody {
	s.Pipeline = v
	return s
}

func (s *CreatePipelineResponseBody) SetRequestId(v string) *CreatePipelineResponseBody {
	s.RequestId = &v
	return s
}

type CreatePipelineResponseBodyPipeline struct {
	// The time when the template was created.
	//
	// example:
	//
	// 2022-07-12T16:17:54Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the template was last modified.
	//
	// example:
	//
	// 2022-07-12T16:17:54Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The name of the MPS queue.
	//
	// example:
	//
	// test-pipeline
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the MPS queue.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The priority of the MPS queue.
	//
	// example:
	//
	// 6
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The type of the MPS queue.
	//
	// Valid values:
	//
	// 	- Boost: MPS queue with transcoding speed boosted.
	//
	// 	- Standard: standard MPS queue.
	//
	// 	- NarrowBandHDV2: MPS queue that supports Narrowband HD 2.0.
	//
	// example:
	//
	// Standard
	Speed *string `json:"Speed,omitempty" xml:"Speed,omitempty"`
	// The state of the MPS queue.
	//
	// Valid values:
	//
	// 	- Active
	//
	// 	- Paused
	//
	// example:
	//
	// Active
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreatePipelineResponseBodyPipeline) String() string {
	return tea.Prettify(s)
}

func (s CreatePipelineResponseBodyPipeline) GoString() string {
	return s.String()
}

func (s *CreatePipelineResponseBodyPipeline) SetCreateTime(v string) *CreatePipelineResponseBodyPipeline {
	s.CreateTime = &v
	return s
}

func (s *CreatePipelineResponseBodyPipeline) SetModifiedTime(v string) *CreatePipelineResponseBodyPipeline {
	s.ModifiedTime = &v
	return s
}

func (s *CreatePipelineResponseBodyPipeline) SetName(v string) *CreatePipelineResponseBodyPipeline {
	s.Name = &v
	return s
}

func (s *CreatePipelineResponseBodyPipeline) SetPipelineId(v string) *CreatePipelineResponseBodyPipeline {
	s.PipelineId = &v
	return s
}

func (s *CreatePipelineResponseBodyPipeline) SetPriority(v int32) *CreatePipelineResponseBodyPipeline {
	s.Priority = &v
	return s
}

func (s *CreatePipelineResponseBodyPipeline) SetSpeed(v string) *CreatePipelineResponseBodyPipeline {
	s.Speed = &v
	return s
}

func (s *CreatePipelineResponseBodyPipeline) SetStatus(v string) *CreatePipelineResponseBodyPipeline {
	s.Status = &v
	return s
}

type CreatePipelineResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreatePipelineResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreatePipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePipelineResponse) GoString() string {
	return s.String()
}

func (s *CreatePipelineResponse) SetHeaders(v map[string]*string) *CreatePipelineResponse {
	s.Headers = v
	return s
}

func (s *CreatePipelineResponse) SetStatusCode(v int32) *CreatePipelineResponse {
	s.StatusCode = &v
	return s
}

func (s *CreatePipelineResponse) SetBody(v *CreatePipelineResponseBody) *CreatePipelineResponse {
	s.Body = v
	return s
}

type CreateProgramRequest struct {
	// The information about ad breaks.
	//
	// example:
	//
	// [{"MessageType":"SPLICE_INSERT","OffsetMillis":1000,"SourceLocationName":"MySourceLocation","SourceName":"MyAdSource","SpliceInsertSettings":{"AvailNumber":0,"AvailExpected":0,"SpliceEventID":1,"UniqueProgramID":0}}]
	AdBreaks *string `json:"AdBreaks,omitempty" xml:"AdBreaks,omitempty"`
	// The name of the channel.
	//
	// This parameter is required.
	//
	// example:
	//
	// MyChannel
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// Extracts a clip from the source.
	//
	// example:
	//
	// {StartOffsetMillis: 213123, EndOffsetMillis: 213134}
	ClipRange *string `json:"ClipRange,omitempty" xml:"ClipRange,omitempty"`
	// The name of the program.
	//
	// This parameter is required.
	//
	// example:
	//
	// program1
	ProgramName *string `json:"ProgramName,omitempty" xml:"ProgramName,omitempty"`
	// The source location.
	//
	// This parameter is required.
	//
	// example:
	//
	// MySourceLcation
	SourceLocationName *string `json:"SourceLocationName,omitempty" xml:"SourceLocationName,omitempty"`
	// The name of the source.
	//
	// This parameter is required.
	//
	// example:
	//
	// MySource
	SourceName *string `json:"SourceName,omitempty" xml:"SourceName,omitempty"`
	// The source type of the program.
	//
	// This parameter is required.
	//
	// example:
	//
	// vodSource
	SourceType *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	// The program transition method.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"Type": "RELATIVE", "RelativePosition": "AFTER_PROGRAM", "RelativeProgram": "program2"}
	Transition *string `json:"Transition,omitempty" xml:"Transition,omitempty"`
}

func (s CreateProgramRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateProgramRequest) GoString() string {
	return s.String()
}

func (s *CreateProgramRequest) SetAdBreaks(v string) *CreateProgramRequest {
	s.AdBreaks = &v
	return s
}

func (s *CreateProgramRequest) SetChannelName(v string) *CreateProgramRequest {
	s.ChannelName = &v
	return s
}

func (s *CreateProgramRequest) SetClipRange(v string) *CreateProgramRequest {
	s.ClipRange = &v
	return s
}

func (s *CreateProgramRequest) SetProgramName(v string) *CreateProgramRequest {
	s.ProgramName = &v
	return s
}

func (s *CreateProgramRequest) SetSourceLocationName(v string) *CreateProgramRequest {
	s.SourceLocationName = &v
	return s
}

func (s *CreateProgramRequest) SetSourceName(v string) *CreateProgramRequest {
	s.SourceName = &v
	return s
}

func (s *CreateProgramRequest) SetSourceType(v string) *CreateProgramRequest {
	s.SourceType = &v
	return s
}

func (s *CreateProgramRequest) SetTransition(v string) *CreateProgramRequest {
	s.Transition = &v
	return s
}

type CreateProgramResponseBody struct {
	// The information about the program.
	Program *ChannelAssemblyProgram `json:"Program,omitempty" xml:"Program,omitempty"`
	// **Request ID**
	//
	// example:
	//
	// xxx-xxxx-xxxxx-xxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateProgramResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateProgramResponseBody) GoString() string {
	return s.String()
}

func (s *CreateProgramResponseBody) SetProgram(v *ChannelAssemblyProgram) *CreateProgramResponseBody {
	s.Program = v
	return s
}

func (s *CreateProgramResponseBody) SetRequestId(v string) *CreateProgramResponseBody {
	s.RequestId = &v
	return s
}

type CreateProgramResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateProgramResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateProgramResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateProgramResponse) GoString() string {
	return s.String()
}

func (s *CreateProgramResponse) SetHeaders(v map[string]*string) *CreateProgramResponse {
	s.Headers = v
	return s
}

func (s *CreateProgramResponse) SetStatusCode(v int32) *CreateProgramResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateProgramResponse) SetBody(v *CreateProgramResponseBody) *CreateProgramResponse {
	s.Body = v
	return s
}

type CreateRecognitionEntityRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// landmark
	Algorithm  *string `json:"Algorithm,omitempty" xml:"Algorithm,omitempty"`
	EntityInfo *string `json:"EntityInfo,omitempty" xml:"EntityInfo,omitempty"`
	// This parameter is required.
	EntityName *string `json:"EntityName,omitempty" xml:"EntityName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// *************24b47865c6**************
	LibId                *string `json:"LibId,omitempty" xml:"LibId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreateRecognitionEntityRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRecognitionEntityRequest) GoString() string {
	return s.String()
}

func (s *CreateRecognitionEntityRequest) SetAlgorithm(v string) *CreateRecognitionEntityRequest {
	s.Algorithm = &v
	return s
}

func (s *CreateRecognitionEntityRequest) SetEntityInfo(v string) *CreateRecognitionEntityRequest {
	s.EntityInfo = &v
	return s
}

func (s *CreateRecognitionEntityRequest) SetEntityName(v string) *CreateRecognitionEntityRequest {
	s.EntityName = &v
	return s
}

func (s *CreateRecognitionEntityRequest) SetLibId(v string) *CreateRecognitionEntityRequest {
	s.LibId = &v
	return s
}

func (s *CreateRecognitionEntityRequest) SetOwnerAccount(v string) *CreateRecognitionEntityRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateRecognitionEntityRequest) SetOwnerId(v int64) *CreateRecognitionEntityRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateRecognitionEntityRequest) SetResourceOwnerAccount(v string) *CreateRecognitionEntityRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateRecognitionEntityRequest) SetResourceOwnerId(v int64) *CreateRecognitionEntityRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreateRecognitionEntityResponseBody struct {
	// example:
	//
	// **************544cb84754************
	EntityId *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateRecognitionEntityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRecognitionEntityResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRecognitionEntityResponseBody) SetEntityId(v string) *CreateRecognitionEntityResponseBody {
	s.EntityId = &v
	return s
}

func (s *CreateRecognitionEntityResponseBody) SetRequestId(v string) *CreateRecognitionEntityResponseBody {
	s.RequestId = &v
	return s
}

type CreateRecognitionEntityResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateRecognitionEntityResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateRecognitionEntityResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRecognitionEntityResponse) GoString() string {
	return s.String()
}

func (s *CreateRecognitionEntityResponse) SetHeaders(v map[string]*string) *CreateRecognitionEntityResponse {
	s.Headers = v
	return s
}

func (s *CreateRecognitionEntityResponse) SetStatusCode(v int32) *CreateRecognitionEntityResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateRecognitionEntityResponse) SetBody(v *CreateRecognitionEntityResponseBody) *CreateRecognitionEntityResponse {
	s.Body = v
	return s
}

type CreateRecognitionLibRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// landmark
	Algorithm      *string `json:"Algorithm,omitempty" xml:"Algorithm,omitempty"`
	LibDescription *string `json:"LibDescription,omitempty" xml:"LibDescription,omitempty"`
	// This parameter is required.
	LibName              *string `json:"LibName,omitempty" xml:"LibName,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreateRecognitionLibRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRecognitionLibRequest) GoString() string {
	return s.String()
}

func (s *CreateRecognitionLibRequest) SetAlgorithm(v string) *CreateRecognitionLibRequest {
	s.Algorithm = &v
	return s
}

func (s *CreateRecognitionLibRequest) SetLibDescription(v string) *CreateRecognitionLibRequest {
	s.LibDescription = &v
	return s
}

func (s *CreateRecognitionLibRequest) SetLibName(v string) *CreateRecognitionLibRequest {
	s.LibName = &v
	return s
}

func (s *CreateRecognitionLibRequest) SetOwnerAccount(v string) *CreateRecognitionLibRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateRecognitionLibRequest) SetOwnerId(v int64) *CreateRecognitionLibRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateRecognitionLibRequest) SetResourceOwnerAccount(v string) *CreateRecognitionLibRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateRecognitionLibRequest) SetResourceOwnerId(v int64) *CreateRecognitionLibRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreateRecognitionLibResponseBody struct {
	// example:
	//
	// *************24b47865c6**************
	LibId *string `json:"LibId,omitempty" xml:"LibId,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateRecognitionLibResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRecognitionLibResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRecognitionLibResponseBody) SetLibId(v string) *CreateRecognitionLibResponseBody {
	s.LibId = &v
	return s
}

func (s *CreateRecognitionLibResponseBody) SetRequestId(v string) *CreateRecognitionLibResponseBody {
	s.RequestId = &v
	return s
}

type CreateRecognitionLibResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateRecognitionLibResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateRecognitionLibResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRecognitionLibResponse) GoString() string {
	return s.String()
}

func (s *CreateRecognitionLibResponse) SetHeaders(v map[string]*string) *CreateRecognitionLibResponse {
	s.Headers = v
	return s
}

func (s *CreateRecognitionLibResponse) SetStatusCode(v int32) *CreateRecognitionLibResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateRecognitionLibResponse) SetBody(v *CreateRecognitionLibResponseBody) *CreateRecognitionLibResponse {
	s.Body = v
	return s
}

type CreateRecognitionSampleRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// landmark
	Algorithm *string `json:"Algorithm,omitempty" xml:"Algorithm,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// **************544cb84754************
	EntityId *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	// example:
	//
	// https://example.com/sample.png
	ImageUrl    *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	LabelPrompt *string `json:"LabelPrompt,omitempty" xml:"LabelPrompt,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// *************24b47865c6**************
	LibId                *string `json:"LibId,omitempty" xml:"LibId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreateRecognitionSampleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRecognitionSampleRequest) GoString() string {
	return s.String()
}

func (s *CreateRecognitionSampleRequest) SetAlgorithm(v string) *CreateRecognitionSampleRequest {
	s.Algorithm = &v
	return s
}

func (s *CreateRecognitionSampleRequest) SetEntityId(v string) *CreateRecognitionSampleRequest {
	s.EntityId = &v
	return s
}

func (s *CreateRecognitionSampleRequest) SetImageUrl(v string) *CreateRecognitionSampleRequest {
	s.ImageUrl = &v
	return s
}

func (s *CreateRecognitionSampleRequest) SetLabelPrompt(v string) *CreateRecognitionSampleRequest {
	s.LabelPrompt = &v
	return s
}

func (s *CreateRecognitionSampleRequest) SetLibId(v string) *CreateRecognitionSampleRequest {
	s.LibId = &v
	return s
}

func (s *CreateRecognitionSampleRequest) SetOwnerAccount(v string) *CreateRecognitionSampleRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateRecognitionSampleRequest) SetOwnerId(v int64) *CreateRecognitionSampleRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateRecognitionSampleRequest) SetResourceOwnerAccount(v string) *CreateRecognitionSampleRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateRecognitionSampleRequest) SetResourceOwnerId(v int64) *CreateRecognitionSampleRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreateRecognitionSampleResponseBody struct {
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// **************4d2ba728e2f**************
	SampleId *string `json:"SampleId,omitempty" xml:"SampleId,omitempty"`
}

func (s CreateRecognitionSampleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRecognitionSampleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRecognitionSampleResponseBody) SetRequestId(v string) *CreateRecognitionSampleResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateRecognitionSampleResponseBody) SetSampleId(v string) *CreateRecognitionSampleResponseBody {
	s.SampleId = &v
	return s
}

type CreateRecognitionSampleResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateRecognitionSampleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateRecognitionSampleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRecognitionSampleResponse) GoString() string {
	return s.String()
}

func (s *CreateRecognitionSampleResponse) SetHeaders(v map[string]*string) *CreateRecognitionSampleResponse {
	s.Headers = v
	return s
}

func (s *CreateRecognitionSampleResponse) SetStatusCode(v int32) *CreateRecognitionSampleResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateRecognitionSampleResponse) SetBody(v *CreateRecognitionSampleResponseBody) *CreateRecognitionSampleResponse {
	s.Body = v
	return s
}

type CreateSearchIndexRequest struct {
	// example:
	//
	// {}
	IndexConfig *string `json:"IndexConfig,omitempty" xml:"IndexConfig,omitempty"`
	// example:
	//
	// Active
	IndexStatus *string `json:"IndexStatus,omitempty" xml:"IndexStatus,omitempty"`
	// The category of the index. Valid values:
	//
	// 	- mm: large visual model. You can use this model to describe complex visual features and identify and search for specific actions, movements, and events in videos, such as when athletes score a goal or get injured.
	//
	// >  This feature is in the public preview phase. You can use this feature for free for 1,000 hours of videos.
	//
	// 	- face: face recognition. You can use the face recognition technology to describe face characteristics and automatically mark or search for faces in videos.
	//
	// 	- aiLabel: smart tagging. The smart tagging category is used to describe content such as subtitles and audio in videos. You can use the speech recognition technology to automatically extract, mark, and search for subtitles and dialog content from videos. This helps you quickly locate the video content that is related to specific topics or keywords.
	//
	// This parameter is required.
	//
	// example:
	//
	// mm
	IndexType *string `json:"IndexType,omitempty" xml:"IndexType,omitempty"`
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
}

func (s CreateSearchIndexRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchIndexRequest) GoString() string {
	return s.String()
}

func (s *CreateSearchIndexRequest) SetIndexConfig(v string) *CreateSearchIndexRequest {
	s.IndexConfig = &v
	return s
}

func (s *CreateSearchIndexRequest) SetIndexStatus(v string) *CreateSearchIndexRequest {
	s.IndexStatus = &v
	return s
}

func (s *CreateSearchIndexRequest) SetIndexType(v string) *CreateSearchIndexRequest {
	s.IndexType = &v
	return s
}

func (s *CreateSearchIndexRequest) SetSearchLibName(v string) *CreateSearchIndexRequest {
	s.SearchLibName = &v
	return s
}

type CreateSearchIndexResponseBody struct {
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// *****ACB-44F2-5F2D-88D7-1283E70*****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateSearchIndexResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchIndexResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSearchIndexResponseBody) SetCode(v string) *CreateSearchIndexResponseBody {
	s.Code = &v
	return s
}

func (s *CreateSearchIndexResponseBody) SetRequestId(v string) *CreateSearchIndexResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSearchIndexResponseBody) SetSuccess(v string) *CreateSearchIndexResponseBody {
	s.Success = &v
	return s
}

type CreateSearchIndexResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSearchIndexResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSearchIndexResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchIndexResponse) GoString() string {
	return s.String()
}

func (s *CreateSearchIndexResponse) SetHeaders(v map[string]*string) *CreateSearchIndexResponse {
	s.Headers = v
	return s
}

func (s *CreateSearchIndexResponse) SetStatusCode(v int32) *CreateSearchIndexResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSearchIndexResponse) SetBody(v *CreateSearchIndexResponseBody) *CreateSearchIndexResponse {
	s.Body = v
	return s
}

type CreateSearchLibRequest struct {
	// The name of the search library. The name can contain letters and digits and must start with a letter.
	//
	// This parameter is required.
	//
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
}

func (s CreateSearchLibRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchLibRequest) GoString() string {
	return s.String()
}

func (s *CreateSearchLibRequest) SetSearchLibName(v string) *CreateSearchLibRequest {
	s.SearchLibName = &v
	return s
}

type CreateSearchLibResponseBody struct {
	// The status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The name of the search library.
	//
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateSearchLibResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchLibResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSearchLibResponseBody) SetCode(v string) *CreateSearchLibResponseBody {
	s.Code = &v
	return s
}

func (s *CreateSearchLibResponseBody) SetRequestId(v string) *CreateSearchLibResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSearchLibResponseBody) SetSearchLibName(v string) *CreateSearchLibResponseBody {
	s.SearchLibName = &v
	return s
}

func (s *CreateSearchLibResponseBody) SetSuccess(v string) *CreateSearchLibResponseBody {
	s.Success = &v
	return s
}

type CreateSearchLibResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSearchLibResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSearchLibResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchLibResponse) GoString() string {
	return s.String()
}

func (s *CreateSearchLibResponse) SetHeaders(v map[string]*string) *CreateSearchLibResponse {
	s.Headers = v
	return s
}

func (s *CreateSearchLibResponse) SetStatusCode(v int32) *CreateSearchLibResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSearchLibResponse) SetBody(v *CreateSearchLibResponseBody) *CreateSearchLibResponse {
	s.Body = v
	return s
}

type CreateSourceRequest struct {
	// The source configurations.
	//
	// This parameter is required.
	//
	// example:
	//
	// “[{
	//
	// 	"sourceGroupName": "mySourceGroup-1",
	//
	// 	"relativePath": "group1/hls.m3u8",
	//
	// 	"type": "hls"
	//
	// }]”
	HttpPackageConfigurations *string `json:"HttpPackageConfigurations,omitempty" xml:"HttpPackageConfigurations,omitempty"`
	// The name of the source location.
	//
	// This parameter is required.
	//
	// example:
	//
	// MySourceLocation
	SourceLocationName *string `json:"SourceLocationName,omitempty" xml:"SourceLocationName,omitempty"`
	// The name of the source.
	//
	// This parameter is required.
	//
	// example:
	//
	// MyVodSource
	SourceName *string `json:"SourceName,omitempty" xml:"SourceName,omitempty"`
	// The source type. Valid values: vodSource and liveSource.
	//
	// This parameter is required.
	//
	// example:
	//
	// vodSource
	SourceType *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
}

func (s CreateSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSourceRequest) GoString() string {
	return s.String()
}

func (s *CreateSourceRequest) SetHttpPackageConfigurations(v string) *CreateSourceRequest {
	s.HttpPackageConfigurations = &v
	return s
}

func (s *CreateSourceRequest) SetSourceLocationName(v string) *CreateSourceRequest {
	s.SourceLocationName = &v
	return s
}

func (s *CreateSourceRequest) SetSourceName(v string) *CreateSourceRequest {
	s.SourceName = &v
	return s
}

func (s *CreateSourceRequest) SetSourceType(v string) *CreateSourceRequest {
	s.SourceType = &v
	return s
}

type CreateSourceResponseBody struct {
	// **Request ID**
	//
	// example:
	//
	// xxx-xxxx-xxxxx-xxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The source information.
	Source *ChannelAssemblySource `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s CreateSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSourceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSourceResponseBody) SetRequestId(v string) *CreateSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSourceResponseBody) SetSource(v *ChannelAssemblySource) *CreateSourceResponseBody {
	s.Source = v
	return s
}

type CreateSourceResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSourceResponse) GoString() string {
	return s.String()
}

func (s *CreateSourceResponse) SetHeaders(v map[string]*string) *CreateSourceResponse {
	s.Headers = v
	return s
}

func (s *CreateSourceResponse) SetStatusCode(v int32) *CreateSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSourceResponse) SetBody(v *CreateSourceResponseBody) *CreateSourceResponse {
	s.Body = v
	return s
}

type CreateSourceLocationRequest struct {
	// The protocol and hostname of the source location.
	//
	// This parameter is required.
	//
	// example:
	//
	// http://xxx.com
	BaseUrl *string `json:"BaseUrl,omitempty" xml:"BaseUrl,omitempty"`
	// Specifies whether to use an independent domain name to access the segments.
	//
	// example:
	//
	// true
	EnableSegmentDelivery *bool `json:"EnableSegmentDelivery,omitempty" xml:"EnableSegmentDelivery,omitempty"`
	// The domain name used to access the segments.
	//
	// example:
	//
	// http://xxxxx.com
	SegmentDeliveryUrl *string `json:"SegmentDeliveryUrl,omitempty" xml:"SegmentDeliveryUrl,omitempty"`
	// The name of the source location.
	//
	// This parameter is required.
	//
	// example:
	//
	// MySourcelocation
	SourceLocationName *string `json:"SourceLocationName,omitempty" xml:"SourceLocationName,omitempty"`
}

func (s CreateSourceLocationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSourceLocationRequest) GoString() string {
	return s.String()
}

func (s *CreateSourceLocationRequest) SetBaseUrl(v string) *CreateSourceLocationRequest {
	s.BaseUrl = &v
	return s
}

func (s *CreateSourceLocationRequest) SetEnableSegmentDelivery(v bool) *CreateSourceLocationRequest {
	s.EnableSegmentDelivery = &v
	return s
}

func (s *CreateSourceLocationRequest) SetSegmentDeliveryUrl(v string) *CreateSourceLocationRequest {
	s.SegmentDeliveryUrl = &v
	return s
}

func (s *CreateSourceLocationRequest) SetSourceLocationName(v string) *CreateSourceLocationRequest {
	s.SourceLocationName = &v
	return s
}

type CreateSourceLocationResponseBody struct {
	// **Request ID**
	//
	// example:
	//
	// xxx-xxxx-xxxxx-xxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The source location information.
	SourceLocation *ChannelAssemblySourceLocation `json:"SourceLocation,omitempty" xml:"SourceLocation,omitempty"`
}

func (s CreateSourceLocationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSourceLocationResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSourceLocationResponseBody) SetRequestId(v string) *CreateSourceLocationResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSourceLocationResponseBody) SetSourceLocation(v *ChannelAssemblySourceLocation) *CreateSourceLocationResponseBody {
	s.SourceLocation = v
	return s
}

type CreateSourceLocationResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSourceLocationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSourceLocationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSourceLocationResponse) GoString() string {
	return s.String()
}

func (s *CreateSourceLocationResponse) SetHeaders(v map[string]*string) *CreateSourceLocationResponse {
	s.Headers = v
	return s
}

func (s *CreateSourceLocationResponse) SetStatusCode(v int32) *CreateSourceLocationResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSourceLocationResponse) SetBody(v *CreateSourceLocationResponseBody) *CreateSourceLocationResponse {
	s.Body = v
	return s
}

type CreateUploadMediaRequest struct {
	// The application ID. Default value: app-1000000.
	//
	// example:
	//
	// app-1000000
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The entity ID. You can call the CreateEntity operation to create an entity and specify a dynamic metadata structure.
	//
	// example:
	//
	// 9e177cac2fb44f8b8c67b199fcc7bffd
	EntityId *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	// The file information, which is in the JSON format and contains the following fields:
	//
	// 	- Type: required. The file type. Valid values: video, image, audio, text, and other.
	//
	// 	- Name: required. The file name without the extension.
	//
	// 	- Size: optional. The file size.
	//
	// 	- Ext: required. The file name extension.
	//
	// example:
	//
	// {\\"Type\\":\\"video\\",\\"Name\\":\\"test.mp4\\",\\"Size\\":108078336,\\"Ext\\":\\"mp4\\"}
	FileInfo *string `json:"FileInfo,omitempty" xml:"FileInfo,omitempty"`
	// The metadata of the media asset, which is a JSON string that contains the following fields:
	//
	// Title: required.
	//
	// 	- The value can be up to 128 characters in length.
	//
	// 	- The value must be encoded in UTF-8.
	//
	// Description: optional.
	//
	// 	- The value can be up to 1,024 characters in length.
	//
	// 	- The value must be encoded in UTF-8.
	//
	// CateId: optional.
	//
	// Tags: optional.
	//
	// BusinessType: required. Valid values:
	//
	// 	- opening or ending if Type is set to video
	//
	// 	- default or cover if Type is set to image
	//
	// 	- subtitles or font if Type is set to text
	//
	// 	- watermark if Type is set to material
	//
	// 	- general CoverURL: optional.
	//
	// DynamicMetaData: The value is a string.
	//
	// example:
	//
	// {\\"Title\\": \\"UploadTest\\", \\"Description\\": \\"UploadImageTest\\", \\"Tags\\": \\"tag1,tag2\\",\\"BusinessType\\":\\"cover\\"}
	MediaMetaData *string `json:"MediaMetaData,omitempty" xml:"MediaMetaData,omitempty"`
	// The postprocessing configurations. You can specify this parameter if Type is set to video or audio.
	//
	// Set ProcessType to Workflow.
	//
	// example:
	//
	// {\\"ProcessType\\":\\"Workflow\\",\\"ProcessID\\":\\"74ba870f1a4873a3ba238e0bf6fa9***\\"}
	PostProcessConfig *string `json:"PostProcessConfig,omitempty" xml:"PostProcessConfig,omitempty"`
	// The destination storage address.
	//
	// Set StorageType to oss.
	//
	// Set StorageLocation to an address in ApsaraVideo VOD. You cannot set this field to an OSS URL.
	//
	// example:
	//
	// {\\"StorageType\\":\\"oss\\",\\"StorageLocation\\":\\"outin-***.oss-cn-shanghai.aliyuncs.com\\"}
	UploadTargetConfig *string `json:"UploadTargetConfig,omitempty" xml:"UploadTargetConfig,omitempty"`
	// The user data. The value must be a JSON string. You can configure settings such as message callbacks.
	//
	// example:
	//
	// {"MessageCallback":{"CallbackURL":"http://example.aliyundoc.com"},"Extend":{"localId":"*****","test":"www"}}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s CreateUploadMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUploadMediaRequest) GoString() string {
	return s.String()
}

func (s *CreateUploadMediaRequest) SetAppId(v string) *CreateUploadMediaRequest {
	s.AppId = &v
	return s
}

func (s *CreateUploadMediaRequest) SetEntityId(v string) *CreateUploadMediaRequest {
	s.EntityId = &v
	return s
}

func (s *CreateUploadMediaRequest) SetFileInfo(v string) *CreateUploadMediaRequest {
	s.FileInfo = &v
	return s
}

func (s *CreateUploadMediaRequest) SetMediaMetaData(v string) *CreateUploadMediaRequest {
	s.MediaMetaData = &v
	return s
}

func (s *CreateUploadMediaRequest) SetPostProcessConfig(v string) *CreateUploadMediaRequest {
	s.PostProcessConfig = &v
	return s
}

func (s *CreateUploadMediaRequest) SetUploadTargetConfig(v string) *CreateUploadMediaRequest {
	s.UploadTargetConfig = &v
	return s
}

func (s *CreateUploadMediaRequest) SetUserData(v string) *CreateUploadMediaRequest {
	s.UserData = &v
	return s
}

type CreateUploadMediaResponseBody struct {
	// The OSS URL of the file. The URL does not contain the information used for authentication.
	//
	// example:
	//
	// http://outin-***.oss-cn-north-2-gov-1.aliyuncs.com/sv/40360f05-181f63c3110-0004-cd8e-27f-de3c9.mp4
	FileURL *string `json:"FileURL,omitempty" xml:"FileURL,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The URL of the media asset.
	//
	// >  If a domain name for Alibaba Cloud CDN (CDN) is specified, a CDN URL is returned. Otherwise, an OSS URL is returned. If the HTTP status code 403 is returned when you access the URL from your browser, the URL authentication feature of ApsaraVideo VOD is enabled. To resolve this issue, disable URL authentication or generate an authentication signature.
	//
	// example:
	//
	// https://xxq-live-playback.oss-cn-shanghai.aliyuncs.com/capture/5d96d2b4-111b-4e5d-a0e5-20f44405bb55.mp4
	MediaURL *string `json:"MediaURL,omitempty" xml:"MediaURL,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 4E84BE44-58A7-****-****-FBEBEA16EF94
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The upload URL.
	//
	// >  The returned upload URL is a Base64-encoded URL. You must decode the Base64-encoded upload URL before you use an SDK or call an API operation to upload media files. You need to parse UploadAddress only if you use OSS SDK or call an OSS API operation to upload media files.
	//
	// example:
	//
	// eyJFbmRwb2ludCI6Imh0dHBzOi8vb3NzLWNuLXNoYW5naGFpLmFsaXl1bmNzLmNvbSIsIkJ1Y2tldCI6InN6aGQtdmlkZW8iLCJGaWxlTmFtZSI6InZvZC0yOTYzMWEvc3YvNTBmYTJlODQtMTgxMjdhZGRiMTcvNTBmYTJlODQtMTgxMjdhZGRiM***
	UploadAddress *string `json:"UploadAddress,omitempty" xml:"UploadAddress,omitempty"`
	// The upload credential.
	//
	// >  The returned upload credential is a Base64-encoded value. You must decode the Base64-encoded upload URL before you use an SDK or call an API operation to upload media files. You need to parse UploadAuth only if you use OSS SDK or call an OSS API operation to upload media files.
	//
	// example:
	//
	// eyJBY2Nlc3NLZXlJZCI6IkxUQUk0Rm53bTk1dHdxQjMxR3IzSE5hRCIsIkFjY2Vzc0tleVNlY3JldCI6Ik9lWllKR0dTMTlkNkZaM1E3UVpJQmdmSVdnM3BPaiIsIkV4cGlyYXRpb24iOiI***
	UploadAuth *string `json:"UploadAuth,omitempty" xml:"UploadAuth,omitempty"`
}

func (s CreateUploadMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateUploadMediaResponseBody) GoString() string {
	return s.String()
}

func (s *CreateUploadMediaResponseBody) SetFileURL(v string) *CreateUploadMediaResponseBody {
	s.FileURL = &v
	return s
}

func (s *CreateUploadMediaResponseBody) SetMediaId(v string) *CreateUploadMediaResponseBody {
	s.MediaId = &v
	return s
}

func (s *CreateUploadMediaResponseBody) SetMediaURL(v string) *CreateUploadMediaResponseBody {
	s.MediaURL = &v
	return s
}

func (s *CreateUploadMediaResponseBody) SetRequestId(v string) *CreateUploadMediaResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateUploadMediaResponseBody) SetUploadAddress(v string) *CreateUploadMediaResponseBody {
	s.UploadAddress = &v
	return s
}

func (s *CreateUploadMediaResponseBody) SetUploadAuth(v string) *CreateUploadMediaResponseBody {
	s.UploadAuth = &v
	return s
}

type CreateUploadMediaResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateUploadMediaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateUploadMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUploadMediaResponse) GoString() string {
	return s.String()
}

func (s *CreateUploadMediaResponse) SetHeaders(v map[string]*string) *CreateUploadMediaResponse {
	s.Headers = v
	return s
}

func (s *CreateUploadMediaResponse) SetStatusCode(v int32) *CreateUploadMediaResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateUploadMediaResponse) SetBody(v *CreateUploadMediaResponseBody) *CreateUploadMediaResponse {
	s.Body = v
	return s
}

type CreateUploadStreamRequest struct {
	// The quality of the media stream. Valid values:
	//
	// 	- FD: low definition.
	//
	// 	- LD: standard definition.
	//
	// 	- SD: high definition.
	//
	// 	- HD: ultra-high definition.
	//
	// 	- OD: original quality.
	//
	// 	- 2K: 2K resolution.
	//
	// 	- 4K: 4K resolution.
	//
	// 	- SQ: standard sound quality.
	//
	// 	- HQ: high sound quality.
	//
	// example:
	//
	// HD
	Definition *string `json:"Definition,omitempty" xml:"Definition,omitempty"`
	// The file name extension of the media stream.
	//
	// example:
	//
	// MP4
	FileExtension *string `json:"FileExtension,omitempty" xml:"FileExtension,omitempty"`
	// The high dynamic range (HDR) format of the transcoded stream. Valid values:
	//
	// 	- HDR
	//
	// 	- HDR10
	//
	// 	- HLG
	//
	// 	- DolbyVision
	//
	// 	- HDRVivid
	//
	// 	- SDR+
	//
	// >
	//
	// 	- The value is not case-sensitive,
	//
	// 	- You can leave this parameter empty for non-HDR streams.
	//
	// example:
	//
	// HDR10
	HDRType *string `json:"HDRType,omitempty" xml:"HDRType,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The user data.
	//
	// example:
	//
	// {"MessageCallback":{"CallbackURL":"http://aliyundoc.com"}, "Extend":{"localId":"xxx","test":"www"}}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s CreateUploadStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUploadStreamRequest) GoString() string {
	return s.String()
}

func (s *CreateUploadStreamRequest) SetDefinition(v string) *CreateUploadStreamRequest {
	s.Definition = &v
	return s
}

func (s *CreateUploadStreamRequest) SetFileExtension(v string) *CreateUploadStreamRequest {
	s.FileExtension = &v
	return s
}

func (s *CreateUploadStreamRequest) SetHDRType(v string) *CreateUploadStreamRequest {
	s.HDRType = &v
	return s
}

func (s *CreateUploadStreamRequest) SetMediaId(v string) *CreateUploadStreamRequest {
	s.MediaId = &v
	return s
}

func (s *CreateUploadStreamRequest) SetUserData(v string) *CreateUploadStreamRequest {
	s.UserData = &v
	return s
}

type CreateUploadStreamResponseBody struct {
	// The Object Storage Service (OSS) URL of the file. The URL does not contain the information used for authentication.
	//
	// example:
	//
	// http://outin-***.oss-cn-shanghai.aliyuncs.com/stream/48555e8b-181dd5a8c07/48555e8b-181dd5a8c07.mp4
	FileURL *string `json:"FileURL,omitempty" xml:"FileURL,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// ****c469e944b5a856828dc2****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The upload URL.
	//
	// >  The returned upload URL is a Base64-encoded URL. You must decode the Base64-encoded upload URL before you use an SDK or call an API operation to upload media files. You need to parse UploadAddress only if you use OSS SDK or call an OSS API operation to upload media files.
	//
	// example:
	//
	// eyJFbmRwb2ludCI6Imh0dHBzOi8vb3NzLWNuLXNoYW5naGFpLmFsaXl1bmNzLmNvbSIsIkJ1Y2tldCI6InN6aGQtdmlkZW8iLCJGaWxlTmFtZSI6InZvZC0yOTYzMWEvc3YvNTBmYTJlODQtMTgxMjdhZGRiMTcvNTBmYTJlODQtMTgxMjdhZGRiM***
	UploadAddress *string `json:"UploadAddress,omitempty" xml:"UploadAddress,omitempty"`
	// The upload credential.
	//
	// >  The returned upload credential is a Base64-encoded value. You must decode the Base64-encoded upload URL before you use an SDK or call an API operation to upload media files. You need to parse UploadAuth only if you use OSS SDK or call an OSS API operation to upload media files.
	//
	// example:
	//
	// eyJBY2Nlc3NLZXlJZCI6IkxUQUk0Rm53bTk1dHdxQjMxR3IzSE5hRCIsIkFjY2Vzc0tleVNlY3JldCI6Ik9lWllKR0dTMTlkNkZaM1E3UVpJQmdmSVdnM3BPaiIsIkV4cGlyYXRpb24iOiI***
	UploadAuth *string `json:"UploadAuth,omitempty" xml:"UploadAuth,omitempty"`
}

func (s CreateUploadStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateUploadStreamResponseBody) GoString() string {
	return s.String()
}

func (s *CreateUploadStreamResponseBody) SetFileURL(v string) *CreateUploadStreamResponseBody {
	s.FileURL = &v
	return s
}

func (s *CreateUploadStreamResponseBody) SetMediaId(v string) *CreateUploadStreamResponseBody {
	s.MediaId = &v
	return s
}

func (s *CreateUploadStreamResponseBody) SetRequestId(v string) *CreateUploadStreamResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateUploadStreamResponseBody) SetUploadAddress(v string) *CreateUploadStreamResponseBody {
	s.UploadAddress = &v
	return s
}

func (s *CreateUploadStreamResponseBody) SetUploadAuth(v string) *CreateUploadStreamResponseBody {
	s.UploadAuth = &v
	return s
}

type CreateUploadStreamResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateUploadStreamResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateUploadStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUploadStreamResponse) GoString() string {
	return s.String()
}

func (s *CreateUploadStreamResponse) SetHeaders(v map[string]*string) *CreateUploadStreamResponse {
	s.Headers = v
	return s
}

func (s *CreateUploadStreamResponse) SetStatusCode(v int32) *CreateUploadStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateUploadStreamResponse) SetBody(v *CreateUploadStreamResponseBody) *CreateUploadStreamResponse {
	s.Body = v
	return s
}

type CreateVodPackagingAssetRequest struct {
	// The name of the asset. The name must be unique and can be up to 128 characters in length. Letters, digits, underscores (_), and hyphens (-) are supported.
	//
	// example:
	//
	// hls_3s
	AssetName *string `json:"AssetName,omitempty" xml:"AssetName,omitempty"`
	// The content ID in the digital rights management (DRM) system. The maximum length is 256 characters. Letters, digits, underscores (_), and hyphens (-) are supported.
	//
	// example:
	//
	// movie
	ContentId *string `json:"ContentId,omitempty" xml:"ContentId,omitempty"`
	// The asset description.
	//
	// example:
	//
	// HLS 3 second packaging
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the packaging group.
	//
	// example:
	//
	// vod_hls
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The asset input configurations.
	Input *CreateVodPackagingAssetRequestInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
}

func (s CreateVodPackagingAssetRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVodPackagingAssetRequest) GoString() string {
	return s.String()
}

func (s *CreateVodPackagingAssetRequest) SetAssetName(v string) *CreateVodPackagingAssetRequest {
	s.AssetName = &v
	return s
}

func (s *CreateVodPackagingAssetRequest) SetContentId(v string) *CreateVodPackagingAssetRequest {
	s.ContentId = &v
	return s
}

func (s *CreateVodPackagingAssetRequest) SetDescription(v string) *CreateVodPackagingAssetRequest {
	s.Description = &v
	return s
}

func (s *CreateVodPackagingAssetRequest) SetGroupName(v string) *CreateVodPackagingAssetRequest {
	s.GroupName = &v
	return s
}

func (s *CreateVodPackagingAssetRequest) SetInput(v *CreateVodPackagingAssetRequestInput) *CreateVodPackagingAssetRequest {
	s.Input = v
	return s
}

type CreateVodPackagingAssetRequestInput struct {
	// The URL of the media file. Only M3U8 files stored in OSS are supported.
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The input type. Only Object Storage Service (OSS) is supported.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateVodPackagingAssetRequestInput) String() string {
	return tea.Prettify(s)
}

func (s CreateVodPackagingAssetRequestInput) GoString() string {
	return s.String()
}

func (s *CreateVodPackagingAssetRequestInput) SetMedia(v string) *CreateVodPackagingAssetRequestInput {
	s.Media = &v
	return s
}

func (s *CreateVodPackagingAssetRequestInput) SetType(v string) *CreateVodPackagingAssetRequestInput {
	s.Type = &v
	return s
}

type CreateVodPackagingAssetShrinkRequest struct {
	// The name of the asset. The name must be unique and can be up to 128 characters in length. Letters, digits, underscores (_), and hyphens (-) are supported.
	//
	// example:
	//
	// hls_3s
	AssetName *string `json:"AssetName,omitempty" xml:"AssetName,omitempty"`
	// The content ID in the digital rights management (DRM) system. The maximum length is 256 characters. Letters, digits, underscores (_), and hyphens (-) are supported.
	//
	// example:
	//
	// movie
	ContentId *string `json:"ContentId,omitempty" xml:"ContentId,omitempty"`
	// The asset description.
	//
	// example:
	//
	// HLS 3 second packaging
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the packaging group.
	//
	// example:
	//
	// vod_hls
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The asset input configurations.
	InputShrink *string `json:"Input,omitempty" xml:"Input,omitempty"`
}

func (s CreateVodPackagingAssetShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVodPackagingAssetShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateVodPackagingAssetShrinkRequest) SetAssetName(v string) *CreateVodPackagingAssetShrinkRequest {
	s.AssetName = &v
	return s
}

func (s *CreateVodPackagingAssetShrinkRequest) SetContentId(v string) *CreateVodPackagingAssetShrinkRequest {
	s.ContentId = &v
	return s
}

func (s *CreateVodPackagingAssetShrinkRequest) SetDescription(v string) *CreateVodPackagingAssetShrinkRequest {
	s.Description = &v
	return s
}

func (s *CreateVodPackagingAssetShrinkRequest) SetGroupName(v string) *CreateVodPackagingAssetShrinkRequest {
	s.GroupName = &v
	return s
}

func (s *CreateVodPackagingAssetShrinkRequest) SetInputShrink(v string) *CreateVodPackagingAssetShrinkRequest {
	s.InputShrink = &v
	return s
}

type CreateVodPackagingAssetResponseBody struct {
	// The information about the asset.
	Asset *VodPackagingAsset `json:"Asset,omitempty" xml:"Asset,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 25818875-5F78-4A13-BEF6-D7393642CA58
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateVodPackagingAssetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateVodPackagingAssetResponseBody) GoString() string {
	return s.String()
}

func (s *CreateVodPackagingAssetResponseBody) SetAsset(v *VodPackagingAsset) *CreateVodPackagingAssetResponseBody {
	s.Asset = v
	return s
}

func (s *CreateVodPackagingAssetResponseBody) SetRequestId(v string) *CreateVodPackagingAssetResponseBody {
	s.RequestId = &v
	return s
}

type CreateVodPackagingAssetResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateVodPackagingAssetResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateVodPackagingAssetResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVodPackagingAssetResponse) GoString() string {
	return s.String()
}

func (s *CreateVodPackagingAssetResponse) SetHeaders(v map[string]*string) *CreateVodPackagingAssetResponse {
	s.Headers = v
	return s
}

func (s *CreateVodPackagingAssetResponse) SetStatusCode(v int32) *CreateVodPackagingAssetResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateVodPackagingAssetResponse) SetBody(v *CreateVodPackagingAssetResponseBody) *CreateVodPackagingAssetResponse {
	s.Body = v
	return s
}

type CreateVodPackagingConfigurationRequest struct {
	// The name of the packaging configuration. The name must be unique in an account and can be up to 128 characters in length. Letters, digits, underscores (_), and hyphens (-) are supported.
	//
	// example:
	//
	// hls_3s
	ConfigurationName *string `json:"ConfigurationName,omitempty" xml:"ConfigurationName,omitempty"`
	// The description of the packaging configuration.
	//
	// example:
	//
	// HLS 3s vod packaging
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the packaging group. The name can be up to 128 characters in length. Letters, digits, underscores (_), and hyphens (-) are supported.
	//
	// example:
	//
	// vod_hls
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The packaging configuration.
	PackageConfig *CreateVodPackagingConfigurationRequestPackageConfig `json:"PackageConfig,omitempty" xml:"PackageConfig,omitempty" type:"Struct"`
	// The package type.
	//
	// 	- HLS: packages content into TS segments for delivery over the HLS protocol.
	//
	// 	- HLS_CMAF: packages content into CMAF segments for delivery over the HLS protocol.
	//
	// 	- DASH: packages content for delivery over the DASH protocol.
	//
	// example:
	//
	// HLS
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
}

func (s CreateVodPackagingConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVodPackagingConfigurationRequest) GoString() string {
	return s.String()
}

func (s *CreateVodPackagingConfigurationRequest) SetConfigurationName(v string) *CreateVodPackagingConfigurationRequest {
	s.ConfigurationName = &v
	return s
}

func (s *CreateVodPackagingConfigurationRequest) SetDescription(v string) *CreateVodPackagingConfigurationRequest {
	s.Description = &v
	return s
}

func (s *CreateVodPackagingConfigurationRequest) SetGroupName(v string) *CreateVodPackagingConfigurationRequest {
	s.GroupName = &v
	return s
}

func (s *CreateVodPackagingConfigurationRequest) SetPackageConfig(v *CreateVodPackagingConfigurationRequestPackageConfig) *CreateVodPackagingConfigurationRequest {
	s.PackageConfig = v
	return s
}

func (s *CreateVodPackagingConfigurationRequest) SetProtocol(v string) *CreateVodPackagingConfigurationRequest {
	s.Protocol = &v
	return s
}

type CreateVodPackagingConfigurationRequestPackageConfig struct {
	// The settings of digital rights management (DRM) encryption.
	//
	// if can be null:
	// true
	DrmProvider *CreateVodPackagingConfigurationRequestPackageConfigDrmProvider `json:"DrmProvider,omitempty" xml:"DrmProvider,omitempty" type:"Struct"`
	// The manifest name. The name can be up to 128 characters in length. Letters, digits, underscores (_), and hyphens (-) are supported.
	//
	// example:
	//
	// index
	ManifestName *string `json:"ManifestName,omitempty" xml:"ManifestName,omitempty"`
	// The duration of each segment in a packaged stream. Unit: seconds. MediaPackage rounds segments to the nearest multiple of the input segment duration. Valid values: 1 to 30.
	//
	// example:
	//
	// 6
	SegmentDuration *int64 `json:"SegmentDuration,omitempty" xml:"SegmentDuration,omitempty"`
	// The settings of stream selection.
	StreamSelection *CreateVodPackagingConfigurationRequestPackageConfigStreamSelection `json:"StreamSelection,omitempty" xml:"StreamSelection,omitempty" type:"Struct"`
}

func (s CreateVodPackagingConfigurationRequestPackageConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateVodPackagingConfigurationRequestPackageConfig) GoString() string {
	return s.String()
}

func (s *CreateVodPackagingConfigurationRequestPackageConfig) SetDrmProvider(v *CreateVodPackagingConfigurationRequestPackageConfigDrmProvider) *CreateVodPackagingConfigurationRequestPackageConfig {
	s.DrmProvider = v
	return s
}

func (s *CreateVodPackagingConfigurationRequestPackageConfig) SetManifestName(v string) *CreateVodPackagingConfigurationRequestPackageConfig {
	s.ManifestName = &v
	return s
}

func (s *CreateVodPackagingConfigurationRequestPackageConfig) SetSegmentDuration(v int64) *CreateVodPackagingConfigurationRequestPackageConfig {
	s.SegmentDuration = &v
	return s
}

func (s *CreateVodPackagingConfigurationRequestPackageConfig) SetStreamSelection(v *CreateVodPackagingConfigurationRequestPackageConfigStreamSelection) *CreateVodPackagingConfigurationRequestPackageConfig {
	s.StreamSelection = v
	return s
}

type CreateVodPackagingConfigurationRequestPackageConfigDrmProvider struct {
	// The encryption method. Valid values:
	//
	// 	- AES_128: Advanced Encryption Standard (AES) with 128-bit key length.
	//
	// 	- SAMPLE_AES: an encryption method that encrypts individual media samples.
	//
	// example:
	//
	// AES_128
	EncryptionMethod *string `json:"EncryptionMethod,omitempty" xml:"EncryptionMethod,omitempty"`
	// A 128-bit, 16-byte hex value represented by a 32-character string that is used with the key for encrypting data blocks. If you leave this parameter empty, MediaPackage creates a constant initialization vector (IV). If it is specified, the value is passed to the DRM service.
	//
	// example:
	//
	// 00001111222233334444555566667777
	IV *string `json:"IV,omitempty" xml:"IV,omitempty"`
	// The ID of the DRM system. The maximum number of system IDs allowed is determined by the protocol type. Limits:
	//
	// 	- DASH: 2
	//
	// 	- HLS: 1
	//
	// 	- HLS_CMAF: 2
	//
	// Apple FairPlay, Google Widevine, and Microsoft PlayReady are supported. Their system IDs are as follows:
	//
	// 	- Apple FairPlay: 94ce86fb-07ff-4f43-adb8-93d2fa968ca2
	//
	// 	- Google Widevine: edef8ba9-79d6-4ace-a3c8-27dcd51d21e
	//
	// 	- Microsoft PlayReady: 9a04f079-9840-4286-ab92-e65be0885f95
	SystemIds []*string `json:"SystemIds,omitempty" xml:"SystemIds,omitempty" type:"Repeated"`
	// The URL of the DRM key provider.
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s CreateVodPackagingConfigurationRequestPackageConfigDrmProvider) String() string {
	return tea.Prettify(s)
}

func (s CreateVodPackagingConfigurationRequestPackageConfigDrmProvider) GoString() string {
	return s.String()
}

func (s *CreateVodPackagingConfigurationRequestPackageConfigDrmProvider) SetEncryptionMethod(v string) *CreateVodPackagingConfigurationRequestPackageConfigDrmProvider {
	s.EncryptionMethod = &v
	return s
}

func (s *CreateVodPackagingConfigurationRequestPackageConfigDrmProvider) SetIV(v string) *CreateVodPackagingConfigurationRequestPackageConfigDrmProvider {
	s.IV = &v
	return s
}

func (s *CreateVodPackagingConfigurationRequestPackageConfigDrmProvider) SetSystemIds(v []*string) *CreateVodPackagingConfigurationRequestPackageConfigDrmProvider {
	s.SystemIds = v
	return s
}

func (s *CreateVodPackagingConfigurationRequestPackageConfigDrmProvider) SetUrl(v string) *CreateVodPackagingConfigurationRequestPackageConfigDrmProvider {
	s.Url = &v
	return s
}

type CreateVodPackagingConfigurationRequestPackageConfigStreamSelection struct {
	// The maximum bitrate of the video stream. Unit: bit/s.
	//
	// example:
	//
	// 1000000000
	MaxVideoBitsPerSecond *int64 `json:"MaxVideoBitsPerSecond,omitempty" xml:"MaxVideoBitsPerSecond,omitempty"`
	// The minimum bitrate of the video stream. Unit: bit/s.
	//
	// example:
	//
	// 100000
	MinVideoBitsPerSecond *int64 `json:"MinVideoBitsPerSecond,omitempty" xml:"MinVideoBitsPerSecond,omitempty"`
	// The order of manifest files in the master playlist. Valid values:
	//
	// 	- ORIGINAL: sorts the manifest files in the same order as the source.
	//
	// 	- VIDEO_BITRATE_ASCENDING: sorts the manifest files in ascending order of bitrates, from lowest to highest.
	//
	// 	- VIDEO_BITRATE_DESCENDING: sorts the manifest files in descending order of bitrates, from highest to lowest.
	//
	// example:
	//
	// ORIGINAL
	StreamOrder *string `json:"StreamOrder,omitempty" xml:"StreamOrder,omitempty"`
}

func (s CreateVodPackagingConfigurationRequestPackageConfigStreamSelection) String() string {
	return tea.Prettify(s)
}

func (s CreateVodPackagingConfigurationRequestPackageConfigStreamSelection) GoString() string {
	return s.String()
}

func (s *CreateVodPackagingConfigurationRequestPackageConfigStreamSelection) SetMaxVideoBitsPerSecond(v int64) *CreateVodPackagingConfigurationRequestPackageConfigStreamSelection {
	s.MaxVideoBitsPerSecond = &v
	return s
}

func (s *CreateVodPackagingConfigurationRequestPackageConfigStreamSelection) SetMinVideoBitsPerSecond(v int64) *CreateVodPackagingConfigurationRequestPackageConfigStreamSelection {
	s.MinVideoBitsPerSecond = &v
	return s
}

func (s *CreateVodPackagingConfigurationRequestPackageConfigStreamSelection) SetStreamOrder(v string) *CreateVodPackagingConfigurationRequestPackageConfigStreamSelection {
	s.StreamOrder = &v
	return s
}

type CreateVodPackagingConfigurationShrinkRequest struct {
	// The name of the packaging configuration. The name must be unique in an account and can be up to 128 characters in length. Letters, digits, underscores (_), and hyphens (-) are supported.
	//
	// example:
	//
	// hls_3s
	ConfigurationName *string `json:"ConfigurationName,omitempty" xml:"ConfigurationName,omitempty"`
	// The description of the packaging configuration.
	//
	// example:
	//
	// HLS 3s vod packaging
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the packaging group. The name can be up to 128 characters in length. Letters, digits, underscores (_), and hyphens (-) are supported.
	//
	// example:
	//
	// vod_hls
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The packaging configuration.
	PackageConfigShrink *string `json:"PackageConfig,omitempty" xml:"PackageConfig,omitempty"`
	// The package type.
	//
	// 	- HLS: packages content into TS segments for delivery over the HLS protocol.
	//
	// 	- HLS_CMAF: packages content into CMAF segments for delivery over the HLS protocol.
	//
	// 	- DASH: packages content for delivery over the DASH protocol.
	//
	// example:
	//
	// HLS
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
}

func (s CreateVodPackagingConfigurationShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVodPackagingConfigurationShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateVodPackagingConfigurationShrinkRequest) SetConfigurationName(v string) *CreateVodPackagingConfigurationShrinkRequest {
	s.ConfigurationName = &v
	return s
}

func (s *CreateVodPackagingConfigurationShrinkRequest) SetDescription(v string) *CreateVodPackagingConfigurationShrinkRequest {
	s.Description = &v
	return s
}

func (s *CreateVodPackagingConfigurationShrinkRequest) SetGroupName(v string) *CreateVodPackagingConfigurationShrinkRequest {
	s.GroupName = &v
	return s
}

func (s *CreateVodPackagingConfigurationShrinkRequest) SetPackageConfigShrink(v string) *CreateVodPackagingConfigurationShrinkRequest {
	s.PackageConfigShrink = &v
	return s
}

func (s *CreateVodPackagingConfigurationShrinkRequest) SetProtocol(v string) *CreateVodPackagingConfigurationShrinkRequest {
	s.Protocol = &v
	return s
}

type CreateVodPackagingConfigurationResponseBody struct {
	// The packaging configuration.
	PackagingConfiguration *VodPackagingConfiguration `json:"PackagingConfiguration,omitempty" xml:"PackagingConfiguration,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateVodPackagingConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateVodPackagingConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *CreateVodPackagingConfigurationResponseBody) SetPackagingConfiguration(v *VodPackagingConfiguration) *CreateVodPackagingConfigurationResponseBody {
	s.PackagingConfiguration = v
	return s
}

func (s *CreateVodPackagingConfigurationResponseBody) SetRequestId(v string) *CreateVodPackagingConfigurationResponseBody {
	s.RequestId = &v
	return s
}

type CreateVodPackagingConfigurationResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateVodPackagingConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateVodPackagingConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVodPackagingConfigurationResponse) GoString() string {
	return s.String()
}

func (s *CreateVodPackagingConfigurationResponse) SetHeaders(v map[string]*string) *CreateVodPackagingConfigurationResponse {
	s.Headers = v
	return s
}

func (s *CreateVodPackagingConfigurationResponse) SetStatusCode(v int32) *CreateVodPackagingConfigurationResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateVodPackagingConfigurationResponse) SetBody(v *CreateVodPackagingConfigurationResponseBody) *CreateVodPackagingConfigurationResponse {
	s.Body = v
	return s
}

type CreateVodPackagingGroupRequest struct {
	// The packaging group description.
	//
	// example:
	//
	// vod hls packaging
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the packaging group. The name must be unique in an account and can be up to 128 characters in length. Letters, digits, underscores (_), and hyphens (-) are supported.
	//
	// example:
	//
	// vod_hls
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s CreateVodPackagingGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVodPackagingGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateVodPackagingGroupRequest) SetDescription(v string) *CreateVodPackagingGroupRequest {
	s.Description = &v
	return s
}

func (s *CreateVodPackagingGroupRequest) SetGroupName(v string) *CreateVodPackagingGroupRequest {
	s.GroupName = &v
	return s
}

type CreateVodPackagingGroupResponseBody struct {
	// The packaging group information.
	PackagingGroup *VodPackagingGroup `json:"PackagingGroup,omitempty" xml:"PackagingGroup,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateVodPackagingGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateVodPackagingGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateVodPackagingGroupResponseBody) SetPackagingGroup(v *VodPackagingGroup) *CreateVodPackagingGroupResponseBody {
	s.PackagingGroup = v
	return s
}

func (s *CreateVodPackagingGroupResponseBody) SetRequestId(v string) *CreateVodPackagingGroupResponseBody {
	s.RequestId = &v
	return s
}

type CreateVodPackagingGroupResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateVodPackagingGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateVodPackagingGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVodPackagingGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateVodPackagingGroupResponse) SetHeaders(v map[string]*string) *CreateVodPackagingGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateVodPackagingGroupResponse) SetStatusCode(v int32) *CreateVodPackagingGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateVodPackagingGroupResponse) SetBody(v *CreateVodPackagingGroupResponseBody) *CreateVodPackagingGroupResponse {
	s.Body = v
	return s
}

type DecryptKMSDataKeyRequest struct {
	// The ciphertext that you want to decrypt.
	//
	// This parameter is required.
	//
	// example:
	//
	// ODZhOWVmZDktM2QxNi00ODk0LWJkNGYtMWZjNDNmM2YyYWJmS7FmDBBQ0BkKsQrtRnidtPwirmDcS0ZuJCU41xxAAWk4Z8qsADfbV0b+i6kQmlvj79dJdGOvtX69Uycs901qOjop4bTS****
	CiphertextBlob *string `json:"CiphertextBlob,omitempty" xml:"CiphertextBlob,omitempty"`
}

func (s DecryptKMSDataKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s DecryptKMSDataKeyRequest) GoString() string {
	return s.String()
}

func (s *DecryptKMSDataKeyRequest) SetCiphertextBlob(v string) *DecryptKMSDataKeyRequest {
	s.CiphertextBlob = &v
	return s
}

type DecryptKMSDataKeyResponseBody struct {
	// The information about the decryption result.
	DataKey *DecryptKMSDataKeyResponseBodyDataKey `json:"DataKey,omitempty" xml:"DataKey,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DecryptKMSDataKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DecryptKMSDataKeyResponseBody) GoString() string {
	return s.String()
}

func (s *DecryptKMSDataKeyResponseBody) SetDataKey(v *DecryptKMSDataKeyResponseBodyDataKey) *DecryptKMSDataKeyResponseBody {
	s.DataKey = v
	return s
}

func (s *DecryptKMSDataKeyResponseBody) SetRequestId(v string) *DecryptKMSDataKeyResponseBody {
	s.RequestId = &v
	return s
}

type DecryptKMSDataKeyResponseBodyDataKey struct {
	// The ID of the customer master key (CMK) that was used to decrypt the ciphertext.
	//
	// example:
	//
	// 202b9877-5a25-46e3-a763-e20791b5****
	KeyId *string `json:"KeyId,omitempty" xml:"KeyId,omitempty"`
	// The plaintext that is generated after decryption.
	//
	// example:
	//
	// tRYXuCwgja12xxO1N/gZERDDCLw9doZEQiPDk/Bv****
	Plaintext *string `json:"Plaintext,omitempty" xml:"Plaintext,omitempty"`
}

func (s DecryptKMSDataKeyResponseBodyDataKey) String() string {
	return tea.Prettify(s)
}

func (s DecryptKMSDataKeyResponseBodyDataKey) GoString() string {
	return s.String()
}

func (s *DecryptKMSDataKeyResponseBodyDataKey) SetKeyId(v string) *DecryptKMSDataKeyResponseBodyDataKey {
	s.KeyId = &v
	return s
}

func (s *DecryptKMSDataKeyResponseBodyDataKey) SetPlaintext(v string) *DecryptKMSDataKeyResponseBodyDataKey {
	s.Plaintext = &v
	return s
}

type DecryptKMSDataKeyResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DecryptKMSDataKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DecryptKMSDataKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s DecryptKMSDataKeyResponse) GoString() string {
	return s.String()
}

func (s *DecryptKMSDataKeyResponse) SetHeaders(v map[string]*string) *DecryptKMSDataKeyResponse {
	s.Headers = v
	return s
}

func (s *DecryptKMSDataKeyResponse) SetStatusCode(v int32) *DecryptKMSDataKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *DecryptKMSDataKeyResponse) SetBody(v *DecryptKMSDataKeyResponseBody) *DecryptKMSDataKeyResponse {
	s.Body = v
	return s
}

type DeleteAIAgentDialogueRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// f27f9b9be28642a88e18*******
	DialogueId *string `json:"DialogueId,omitempty" xml:"DialogueId,omitempty"`
	NodeId     *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 6d594e7f55624c47a48789******
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
}

func (s DeleteAIAgentDialogueRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAIAgentDialogueRequest) GoString() string {
	return s.String()
}

func (s *DeleteAIAgentDialogueRequest) SetDialogueId(v string) *DeleteAIAgentDialogueRequest {
	s.DialogueId = &v
	return s
}

func (s *DeleteAIAgentDialogueRequest) SetNodeId(v string) *DeleteAIAgentDialogueRequest {
	s.NodeId = &v
	return s
}

func (s *DeleteAIAgentDialogueRequest) SetSessionId(v string) *DeleteAIAgentDialogueRequest {
	s.SessionId = &v
	return s
}

type DeleteAIAgentDialogueResponseBody struct {
	// example:
	//
	// 7B117AF5-2A1******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAIAgentDialogueResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAIAgentDialogueResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAIAgentDialogueResponseBody) SetRequestId(v string) *DeleteAIAgentDialogueResponseBody {
	s.RequestId = &v
	return s
}

type DeleteAIAgentDialogueResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAIAgentDialogueResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAIAgentDialogueResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAIAgentDialogueResponse) GoString() string {
	return s.String()
}

func (s *DeleteAIAgentDialogueResponse) SetHeaders(v map[string]*string) *DeleteAIAgentDialogueResponse {
	s.Headers = v
	return s
}

func (s *DeleteAIAgentDialogueResponse) SetStatusCode(v int32) *DeleteAIAgentDialogueResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAIAgentDialogueResponse) SetBody(v *DeleteAIAgentDialogueResponseBody) *DeleteAIAgentDialogueResponse {
	s.Body = v
	return s
}

type DeleteAdInsertionRequest struct {
	// The name of the configuration that you want to delete.
	//
	// This parameter is required.
	//
	// example:
	//
	// my_ad
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DeleteAdInsertionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAdInsertionRequest) GoString() string {
	return s.String()
}

func (s *DeleteAdInsertionRequest) SetName(v string) *DeleteAdInsertionRequest {
	s.Name = &v
	return s
}

type DeleteAdInsertionResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAdInsertionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAdInsertionResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAdInsertionResponseBody) SetRequestId(v string) *DeleteAdInsertionResponseBody {
	s.RequestId = &v
	return s
}

type DeleteAdInsertionResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAdInsertionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAdInsertionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAdInsertionResponse) GoString() string {
	return s.String()
}

func (s *DeleteAdInsertionResponse) SetHeaders(v map[string]*string) *DeleteAdInsertionResponse {
	s.Headers = v
	return s
}

func (s *DeleteAdInsertionResponse) SetStatusCode(v int32) *DeleteAdInsertionResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAdInsertionResponse) SetBody(v *DeleteAdInsertionResponseBody) *DeleteAdInsertionResponse {
	s.Body = v
	return s
}

type DeleteAvatarTrainingJobRequest struct {
	// The ID of the digital human training job.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s DeleteAvatarTrainingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAvatarTrainingJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteAvatarTrainingJobRequest) SetJobId(v string) *DeleteAvatarTrainingJobRequest {
	s.JobId = &v
	return s
}

type DeleteAvatarTrainingJobResponseBody struct {
	// The data returned.
	Data *DeleteAvatarTrainingJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteAvatarTrainingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAvatarTrainingJobResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAvatarTrainingJobResponseBody) SetData(v *DeleteAvatarTrainingJobResponseBodyData) *DeleteAvatarTrainingJobResponseBody {
	s.Data = v
	return s
}

func (s *DeleteAvatarTrainingJobResponseBody) SetRequestId(v string) *DeleteAvatarTrainingJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteAvatarTrainingJobResponseBody) SetSuccess(v bool) *DeleteAvatarTrainingJobResponseBody {
	s.Success = &v
	return s
}

type DeleteAvatarTrainingJobResponseBodyData struct {
	// The ID of the digital human training job.
	//
	// example:
	//
	// ****d718e2ff4f018ccf419a7b71****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s DeleteAvatarTrainingJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DeleteAvatarTrainingJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *DeleteAvatarTrainingJobResponseBodyData) SetJobId(v string) *DeleteAvatarTrainingJobResponseBodyData {
	s.JobId = &v
	return s
}

type DeleteAvatarTrainingJobResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAvatarTrainingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAvatarTrainingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAvatarTrainingJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteAvatarTrainingJobResponse) SetHeaders(v map[string]*string) *DeleteAvatarTrainingJobResponse {
	s.Headers = v
	return s
}

func (s *DeleteAvatarTrainingJobResponse) SetStatusCode(v int32) *DeleteAvatarTrainingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAvatarTrainingJobResponse) SetBody(v *DeleteAvatarTrainingJobResponseBody) *DeleteAvatarTrainingJobResponse {
	s.Body = v
	return s
}

type DeleteCategoryRequest struct {
	// The category ID. You can use one of the following methods to obtain the ID:
	//
	// 	- Log on to the [Intelligent Media Services (IMS) console](https://ims.console.aliyun.com) and choose **Media Asset Management*	- > **Category Management*	- to view the category ID.
	//
	// 	- View the value of CateId returned by the AddCategory operation that you called to create a category.
	//
	// 	- View the value of CateId returned by the GetCategories operation that you called to query a category.
	//
	// This parameter is required.
	//
	// example:
	//
	// 46
	CateId *int64 `json:"CateId,omitempty" xml:"CateId,omitempty"`
}

func (s DeleteCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCategoryRequest) GoString() string {
	return s.String()
}

func (s *DeleteCategoryRequest) SetCateId(v int64) *DeleteCategoryRequest {
	s.CateId = &v
	return s
}

type DeleteCategoryResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ****63E8B7C7-4812-46AD-0FA56029AC86****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCategoryResponseBody) SetRequestId(v string) *DeleteCategoryResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCategoryResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCategoryResponse) GoString() string {
	return s.String()
}

func (s *DeleteCategoryResponse) SetHeaders(v map[string]*string) *DeleteCategoryResponse {
	s.Headers = v
	return s
}

func (s *DeleteCategoryResponse) SetStatusCode(v int32) *DeleteCategoryResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCategoryResponse) SetBody(v *DeleteCategoryResponseBody) *DeleteCategoryResponse {
	s.Body = v
	return s
}

type DeleteChannelRequest struct {
	// The name of the channel.
	//
	// This parameter is required.
	//
	// example:
	//
	// MyChannel
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
}

func (s DeleteChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteChannelRequest) GoString() string {
	return s.String()
}

func (s *DeleteChannelRequest) SetChannelName(v string) *DeleteChannelRequest {
	s.ChannelName = &v
	return s
}

type DeleteChannelResponseBody struct {
	// **Request ID**
	//
	// example:
	//
	// xxx-xxxx-xxxxx-xxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteChannelResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteChannelResponseBody) SetRequestId(v string) *DeleteChannelResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteChannelResponseBody) SetSuccess(v bool) *DeleteChannelResponseBody {
	s.Success = &v
	return s
}

type DeleteChannelResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteChannelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteChannelResponse) GoString() string {
	return s.String()
}

func (s *DeleteChannelResponse) SetHeaders(v map[string]*string) *DeleteChannelResponse {
	s.Headers = v
	return s
}

func (s *DeleteChannelResponse) SetStatusCode(v int32) *DeleteChannelResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteChannelResponse) SetBody(v *DeleteChannelResponseBody) *DeleteChannelResponse {
	s.Body = v
	return s
}

type DeleteCustomTemplateRequest struct {
	// The ID of the custom template.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DeleteCustomTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteCustomTemplateRequest) SetTemplateId(v string) *DeleteCustomTemplateRequest {
	s.TemplateId = &v
	return s
}

type DeleteCustomTemplateResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteCustomTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCustomTemplateResponseBody) SetRequestId(v string) *DeleteCustomTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCustomTemplateResponseBody) SetSuccess(v bool) *DeleteCustomTemplateResponseBody {
	s.Success = &v
	return s
}

type DeleteCustomTemplateResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCustomTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCustomTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteCustomTemplateResponse) SetHeaders(v map[string]*string) *DeleteCustomTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteCustomTemplateResponse) SetStatusCode(v int32) *DeleteCustomTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCustomTemplateResponse) SetBody(v *DeleteCustomTemplateResponseBody) *DeleteCustomTemplateResponse {
	s.Body = v
	return s
}

type DeleteCustomizedVoiceJobRequest struct {
	// The ID of the human voice cloning job.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s DeleteCustomizedVoiceJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomizedVoiceJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteCustomizedVoiceJobRequest) SetJobId(v string) *DeleteCustomizedVoiceJobRequest {
	s.JobId = &v
	return s
}

type DeleteCustomizedVoiceJobResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteCustomizedVoiceJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomizedVoiceJobResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCustomizedVoiceJobResponseBody) SetRequestId(v string) *DeleteCustomizedVoiceJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCustomizedVoiceJobResponseBody) SetSuccess(v bool) *DeleteCustomizedVoiceJobResponseBody {
	s.Success = &v
	return s
}

type DeleteCustomizedVoiceJobResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCustomizedVoiceJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCustomizedVoiceJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomizedVoiceJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteCustomizedVoiceJobResponse) SetHeaders(v map[string]*string) *DeleteCustomizedVoiceJobResponse {
	s.Headers = v
	return s
}

func (s *DeleteCustomizedVoiceJobResponse) SetStatusCode(v int32) *DeleteCustomizedVoiceJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCustomizedVoiceJobResponse) SetBody(v *DeleteCustomizedVoiceJobResponseBody) *DeleteCustomizedVoiceJobResponse {
	s.Body = v
	return s
}

type DeleteDNADBRequest struct {
	// The ID of the media fingerprint library that you want to delete.
	//
	// This parameter is required.
	//
	// example:
	//
	// fb712a6890464059b1b2ea7c8647****
	DBId                 *string `json:"DBId,omitempty" xml:"DBId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteDNADBRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDNADBRequest) GoString() string {
	return s.String()
}

func (s *DeleteDNADBRequest) SetDBId(v string) *DeleteDNADBRequest {
	s.DBId = &v
	return s
}

func (s *DeleteDNADBRequest) SetOwnerAccount(v string) *DeleteDNADBRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteDNADBRequest) SetOwnerId(v int64) *DeleteDNADBRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDNADBRequest) SetResourceOwnerAccount(v string) *DeleteDNADBRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteDNADBRequest) SetResourceOwnerId(v int64) *DeleteDNADBRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteDNADBResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 25818875-5F78-4A13-BEF6-D7393642CA58
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDNADBResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDNADBResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDNADBResponseBody) SetRequestId(v string) *DeleteDNADBResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDNADBResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDNADBResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDNADBResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDNADBResponse) GoString() string {
	return s.String()
}

func (s *DeleteDNADBResponse) SetHeaders(v map[string]*string) *DeleteDNADBResponse {
	s.Headers = v
	return s
}

func (s *DeleteDNADBResponse) SetStatusCode(v int32) *DeleteDNADBResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDNADBResponse) SetBody(v *DeleteDNADBResponseBody) *DeleteDNADBResponse {
	s.Body = v
	return s
}

type DeleteDNAFilesRequest struct {
	// The ID of the media fingerprint library from which you want to delete files.
	//
	// This parameter is required.
	//
	// example:
	//
	// fb712a6890464059b1b2ea7c8647****
	DBId         *string `json:"DBId,omitempty" xml:"DBId,omitempty"`
	OwnerAccount *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The primary key values of the files that you want to delete. Separate multiple values with commas (,). You can delete up to 50 files at a time.
	//
	// This parameter is required.
	//
	// example:
	//
	// 41e6536e4f2250e2e9bf26cdea19****
	PrimaryKeys          *string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteDNAFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDNAFilesRequest) GoString() string {
	return s.String()
}

func (s *DeleteDNAFilesRequest) SetDBId(v string) *DeleteDNAFilesRequest {
	s.DBId = &v
	return s
}

func (s *DeleteDNAFilesRequest) SetOwnerAccount(v string) *DeleteDNAFilesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteDNAFilesRequest) SetOwnerId(v int64) *DeleteDNAFilesRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDNAFilesRequest) SetPrimaryKeys(v string) *DeleteDNAFilesRequest {
	s.PrimaryKeys = &v
	return s
}

func (s *DeleteDNAFilesRequest) SetResourceOwnerAccount(v string) *DeleteDNAFilesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteDNAFilesRequest) SetResourceOwnerId(v int64) *DeleteDNAFilesRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteDNAFilesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDNAFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDNAFilesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDNAFilesResponseBody) SetRequestId(v string) *DeleteDNAFilesResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDNAFilesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDNAFilesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDNAFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDNAFilesResponse) GoString() string {
	return s.String()
}

func (s *DeleteDNAFilesResponse) SetHeaders(v map[string]*string) *DeleteDNAFilesResponse {
	s.Headers = v
	return s
}

func (s *DeleteDNAFilesResponse) SetStatusCode(v int32) *DeleteDNAFilesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDNAFilesResponse) SetBody(v *DeleteDNAFilesResponseBody) *DeleteDNAFilesResponse {
	s.Body = v
	return s
}

type DeleteEditingProjectMaterialsRequest struct {
	// The material ID. Separate multiple material IDs with commas (,). You can specify up to 10 IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// *****cbd721b418a89a7dafb1dc*****,*****86f5d534c95997c55c96f*****
	MaterialIds *string `json:"MaterialIds,omitempty" xml:"MaterialIds,omitempty"`
	// The material type. Valid values:
	//
	// \\- video
	//
	// \\- image
	//
	// \\- audio
	//
	// \\- subtitle
	//
	// \\- text
	//
	// This parameter is required.
	//
	// example:
	//
	// video
	MaterialType *string `json:"MaterialType,omitempty" xml:"MaterialType,omitempty"`
	// The ID of the online editing project.
	//
	// This parameter is required.
	//
	// example:
	//
	// *****fb2101cb318*****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s DeleteEditingProjectMaterialsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEditingProjectMaterialsRequest) GoString() string {
	return s.String()
}

func (s *DeleteEditingProjectMaterialsRequest) SetMaterialIds(v string) *DeleteEditingProjectMaterialsRequest {
	s.MaterialIds = &v
	return s
}

func (s *DeleteEditingProjectMaterialsRequest) SetMaterialType(v string) *DeleteEditingProjectMaterialsRequest {
	s.MaterialType = &v
	return s
}

func (s *DeleteEditingProjectMaterialsRequest) SetProjectId(v string) *DeleteEditingProjectMaterialsRequest {
	s.ProjectId = &v
	return s
}

type DeleteEditingProjectMaterialsResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******36-3C1E-4417-BDB2-1E034F******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteEditingProjectMaterialsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEditingProjectMaterialsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEditingProjectMaterialsResponseBody) SetRequestId(v string) *DeleteEditingProjectMaterialsResponseBody {
	s.RequestId = &v
	return s
}

type DeleteEditingProjectMaterialsResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteEditingProjectMaterialsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteEditingProjectMaterialsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEditingProjectMaterialsResponse) GoString() string {
	return s.String()
}

func (s *DeleteEditingProjectMaterialsResponse) SetHeaders(v map[string]*string) *DeleteEditingProjectMaterialsResponse {
	s.Headers = v
	return s
}

func (s *DeleteEditingProjectMaterialsResponse) SetStatusCode(v int32) *DeleteEditingProjectMaterialsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteEditingProjectMaterialsResponse) SetBody(v *DeleteEditingProjectMaterialsResponseBody) *DeleteEditingProjectMaterialsResponse {
	s.Body = v
	return s
}

type DeleteEditingProjectsRequest struct {
	// The ID of the online editing project. You can specify multiple IDs separated with commas (,).
	//
	// example:
	//
	// ****fb2101bf24bf41cb318787dc****,****87dcfb2101bf24bf41cb3187****
	ProjectIds *string `json:"ProjectIds,omitempty" xml:"ProjectIds,omitempty"`
}

func (s DeleteEditingProjectsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEditingProjectsRequest) GoString() string {
	return s.String()
}

func (s *DeleteEditingProjectsRequest) SetProjectIds(v string) *DeleteEditingProjectsRequest {
	s.ProjectIds = &v
	return s
}

type DeleteEditingProjectsResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ****25818875-5F78-4AF6-D7393642CA58****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteEditingProjectsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEditingProjectsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEditingProjectsResponseBody) SetRequestId(v string) *DeleteEditingProjectsResponseBody {
	s.RequestId = &v
	return s
}

type DeleteEditingProjectsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteEditingProjectsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteEditingProjectsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEditingProjectsResponse) GoString() string {
	return s.String()
}

func (s *DeleteEditingProjectsResponse) SetHeaders(v map[string]*string) *DeleteEditingProjectsResponse {
	s.Headers = v
	return s
}

func (s *DeleteEditingProjectsResponse) SetStatusCode(v int32) *DeleteEditingProjectsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteEditingProjectsResponse) SetBody(v *DeleteEditingProjectsResponseBody) *DeleteEditingProjectsResponse {
	s.Body = v
	return s
}

type DeleteHotwordLibraryRequest struct {
	// example:
	//
	// ****cdb3e74639973036bc84****
	HotwordLibraryId *string `json:"HotwordLibraryId,omitempty" xml:"HotwordLibraryId,omitempty"`
}

func (s DeleteHotwordLibraryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteHotwordLibraryRequest) GoString() string {
	return s.String()
}

func (s *DeleteHotwordLibraryRequest) SetHotwordLibraryId(v string) *DeleteHotwordLibraryRequest {
	s.HotwordLibraryId = &v
	return s
}

type DeleteHotwordLibraryResponseBody struct {
	// Id of the request
	//
	// example:
	//
	// ****83B7-7F87-4792-BFE9-63CD2137****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteHotwordLibraryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteHotwordLibraryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteHotwordLibraryResponseBody) SetRequestId(v string) *DeleteHotwordLibraryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteHotwordLibraryResponseBody) SetSuccess(v bool) *DeleteHotwordLibraryResponseBody {
	s.Success = &v
	return s
}

type DeleteHotwordLibraryResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteHotwordLibraryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteHotwordLibraryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteHotwordLibraryResponse) GoString() string {
	return s.String()
}

func (s *DeleteHotwordLibraryResponse) SetHeaders(v map[string]*string) *DeleteHotwordLibraryResponse {
	s.Headers = v
	return s
}

func (s *DeleteHotwordLibraryResponse) SetStatusCode(v int32) *DeleteHotwordLibraryResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteHotwordLibraryResponse) SetBody(v *DeleteHotwordLibraryResponseBody) *DeleteHotwordLibraryResponse {
	s.Body = v
	return s
}

type DeleteLivePackageChannelRequest struct {
	// The channel name.
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-1
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The channel group name.
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-group-1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s DeleteLivePackageChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLivePackageChannelRequest) GoString() string {
	return s.String()
}

func (s *DeleteLivePackageChannelRequest) SetChannelName(v string) *DeleteLivePackageChannelRequest {
	s.ChannelName = &v
	return s
}

func (s *DeleteLivePackageChannelRequest) SetGroupName(v string) *DeleteLivePackageChannelRequest {
	s.GroupName = &v
	return s
}

type DeleteLivePackageChannelResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 20B3A1B6-4BD2-5DE6-BCBC-098C9B4F4E91
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLivePackageChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLivePackageChannelResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLivePackageChannelResponseBody) SetRequestId(v string) *DeleteLivePackageChannelResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLivePackageChannelResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteLivePackageChannelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteLivePackageChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLivePackageChannelResponse) GoString() string {
	return s.String()
}

func (s *DeleteLivePackageChannelResponse) SetHeaders(v map[string]*string) *DeleteLivePackageChannelResponse {
	s.Headers = v
	return s
}

func (s *DeleteLivePackageChannelResponse) SetStatusCode(v int32) *DeleteLivePackageChannelResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLivePackageChannelResponse) SetBody(v *DeleteLivePackageChannelResponseBody) *DeleteLivePackageChannelResponse {
	s.Body = v
	return s
}

type DeleteLivePackageChannelGroupRequest struct {
	// The channel group name.
	//
	// This parameter is required.
	//
	// example:
	//
	// group1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s DeleteLivePackageChannelGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLivePackageChannelGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteLivePackageChannelGroupRequest) SetGroupName(v string) *DeleteLivePackageChannelGroupRequest {
	s.GroupName = &v
	return s
}

type DeleteLivePackageChannelGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 5D87B753-0250-5D9D-B248-D40C3271F864
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLivePackageChannelGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLivePackageChannelGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLivePackageChannelGroupResponseBody) SetRequestId(v string) *DeleteLivePackageChannelGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLivePackageChannelGroupResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteLivePackageChannelGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteLivePackageChannelGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLivePackageChannelGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteLivePackageChannelGroupResponse) SetHeaders(v map[string]*string) *DeleteLivePackageChannelGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteLivePackageChannelGroupResponse) SetStatusCode(v int32) *DeleteLivePackageChannelGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLivePackageChannelGroupResponse) SetBody(v *DeleteLivePackageChannelGroupResponseBody) *DeleteLivePackageChannelGroupResponse {
	s.Body = v
	return s
}

type DeleteLivePackageOriginEndpointRequest struct {
	// The channel name.
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-1
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The endpoint name.
	//
	// This parameter is required.
	//
	// example:
	//
	// endpoint-1
	EndpointName *string `json:"EndpointName,omitempty" xml:"EndpointName,omitempty"`
	// The channel group name.
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-group-1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s DeleteLivePackageOriginEndpointRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLivePackageOriginEndpointRequest) GoString() string {
	return s.String()
}

func (s *DeleteLivePackageOriginEndpointRequest) SetChannelName(v string) *DeleteLivePackageOriginEndpointRequest {
	s.ChannelName = &v
	return s
}

func (s *DeleteLivePackageOriginEndpointRequest) SetEndpointName(v string) *DeleteLivePackageOriginEndpointRequest {
	s.EndpointName = &v
	return s
}

func (s *DeleteLivePackageOriginEndpointRequest) SetGroupName(v string) *DeleteLivePackageOriginEndpointRequest {
	s.GroupName = &v
	return s
}

type DeleteLivePackageOriginEndpointResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 5D87B753-0250-5D9D-B248-D40C3271F864
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLivePackageOriginEndpointResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLivePackageOriginEndpointResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLivePackageOriginEndpointResponseBody) SetRequestId(v string) *DeleteLivePackageOriginEndpointResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLivePackageOriginEndpointResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteLivePackageOriginEndpointResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteLivePackageOriginEndpointResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLivePackageOriginEndpointResponse) GoString() string {
	return s.String()
}

func (s *DeleteLivePackageOriginEndpointResponse) SetHeaders(v map[string]*string) *DeleteLivePackageOriginEndpointResponse {
	s.Headers = v
	return s
}

func (s *DeleteLivePackageOriginEndpointResponse) SetStatusCode(v int32) *DeleteLivePackageOriginEndpointResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLivePackageOriginEndpointResponse) SetBody(v *DeleteLivePackageOriginEndpointResponseBody) *DeleteLivePackageOriginEndpointResponse {
	s.Body = v
	return s
}

type DeleteLiveRecordFilesRequest struct {
	// The collection of IDs of recording files.
	//
	// This parameter is required.
	RecordIds []*string `json:"RecordIds,omitempty" xml:"RecordIds,omitempty" type:"Repeated"`
	// Specifies whether to delete the original files in OSS.
	//
	// example:
	//
	// true
	RemoveFile *bool `json:"RemoveFile,omitempty" xml:"RemoveFile,omitempty"`
}

func (s DeleteLiveRecordFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRecordFilesRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveRecordFilesRequest) SetRecordIds(v []*string) *DeleteLiveRecordFilesRequest {
	s.RecordIds = v
	return s
}

func (s *DeleteLiveRecordFilesRequest) SetRemoveFile(v bool) *DeleteLiveRecordFilesRequest {
	s.RemoveFile = &v
	return s
}

type DeleteLiveRecordFilesResponseBody struct {
	// The list of files deleted.
	DeleteFileInfoList []*DeleteLiveRecordFilesResponseBodyDeleteFileInfoList `json:"DeleteFileInfoList,omitempty" xml:"DeleteFileInfoList,omitempty" type:"Repeated"`
	// The description of the state returned.
	//
	// example:
	//
	// OK
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 13cbb83e-043c-4728-ac35-*****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveRecordFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRecordFilesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveRecordFilesResponseBody) SetDeleteFileInfoList(v []*DeleteLiveRecordFilesResponseBodyDeleteFileInfoList) *DeleteLiveRecordFilesResponseBody {
	s.DeleteFileInfoList = v
	return s
}

func (s *DeleteLiveRecordFilesResponseBody) SetMessage(v string) *DeleteLiveRecordFilesResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteLiveRecordFilesResponseBody) SetRequestId(v string) *DeleteLiveRecordFilesResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveRecordFilesResponseBodyDeleteFileInfoList struct {
	// The code that identifies the result of the deletion.
	//
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The result of deletion.
	//
	// example:
	//
	// OK
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the deleted recording file.
	//
	// example:
	//
	// 13cbb83e-043c-4728-ac35-*****
	RecordId *string `json:"RecordId,omitempty" xml:"RecordId,omitempty"`
}

func (s DeleteLiveRecordFilesResponseBodyDeleteFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRecordFilesResponseBodyDeleteFileInfoList) GoString() string {
	return s.String()
}

func (s *DeleteLiveRecordFilesResponseBodyDeleteFileInfoList) SetCode(v string) *DeleteLiveRecordFilesResponseBodyDeleteFileInfoList {
	s.Code = &v
	return s
}

func (s *DeleteLiveRecordFilesResponseBodyDeleteFileInfoList) SetMessage(v string) *DeleteLiveRecordFilesResponseBodyDeleteFileInfoList {
	s.Message = &v
	return s
}

func (s *DeleteLiveRecordFilesResponseBodyDeleteFileInfoList) SetRecordId(v string) *DeleteLiveRecordFilesResponseBodyDeleteFileInfoList {
	s.RecordId = &v
	return s
}

type DeleteLiveRecordFilesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteLiveRecordFilesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteLiveRecordFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRecordFilesResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveRecordFilesResponse) SetHeaders(v map[string]*string) *DeleteLiveRecordFilesResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveRecordFilesResponse) SetStatusCode(v int32) *DeleteLiveRecordFilesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveRecordFilesResponse) SetBody(v *DeleteLiveRecordFilesResponseBody) *DeleteLiveRecordFilesResponse {
	s.Body = v
	return s
}

type DeleteLiveRecordTemplateRequest struct {
	// The ID of the template to be deleted. To obtain the template ID, log on to the [Intelligent Media Services (IMS) console](https://ice.console.aliyun.com/live-processing/template/list/record), choose Real-time Media Processing > Template Management, and then click the Recording tab. Alternatively, find the ID from the response parameters of the [CreateLiveRecordTemplate](https://help.aliyun.com/document_detail/448213.html) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// 69e1f9fe-1e97-11ed-ba64-0c42a1b73d66
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DeleteLiveRecordTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRecordTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveRecordTemplateRequest) SetTemplateId(v string) *DeleteLiveRecordTemplateRequest {
	s.TemplateId = &v
	return s
}

type DeleteLiveRecordTemplateResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 3E5330CF-B4C8-5BEF-AA6B-8E70BD20FAEE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveRecordTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRecordTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveRecordTemplateResponseBody) SetRequestId(v string) *DeleteLiveRecordTemplateResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveRecordTemplateResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteLiveRecordTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteLiveRecordTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRecordTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveRecordTemplateResponse) SetHeaders(v map[string]*string) *DeleteLiveRecordTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveRecordTemplateResponse) SetStatusCode(v int32) *DeleteLiveRecordTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveRecordTemplateResponse) SetBody(v *DeleteLiveRecordTemplateResponseBody) *DeleteLiveRecordTemplateResponse {
	s.Body = v
	return s
}

type DeleteLiveSnapshotFilesRequest struct {
	// The list of timestamps when the jobs were created. The values are UNIX timestamps representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. A maximum of 200 jobs can be deleted at a time.
	//
	// This parameter is required.
	CreateTimestampList []*int64 `json:"CreateTimestampList,omitempty" xml:"CreateTimestampList,omitempty" type:"Repeated"`
	// Specifies whether to delete the original files at the same time. Default value: false.
	//
	// example:
	//
	// true
	DeleteOriginalFile *bool `json:"DeleteOriginalFile,omitempty" xml:"DeleteOriginalFile,omitempty"`
	// The ID of the snapshot job.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s DeleteLiveSnapshotFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSnapshotFilesRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveSnapshotFilesRequest) SetCreateTimestampList(v []*int64) *DeleteLiveSnapshotFilesRequest {
	s.CreateTimestampList = v
	return s
}

func (s *DeleteLiveSnapshotFilesRequest) SetDeleteOriginalFile(v bool) *DeleteLiveSnapshotFilesRequest {
	s.DeleteOriginalFile = &v
	return s
}

func (s *DeleteLiveSnapshotFilesRequest) SetJobId(v string) *DeleteLiveSnapshotFilesRequest {
	s.JobId = &v
	return s
}

type DeleteLiveSnapshotFilesShrinkRequest struct {
	// The list of timestamps when the jobs were created. The values are UNIX timestamps representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. A maximum of 200 jobs can be deleted at a time.
	//
	// This parameter is required.
	CreateTimestampListShrink *string `json:"CreateTimestampList,omitempty" xml:"CreateTimestampList,omitempty"`
	// Specifies whether to delete the original files at the same time. Default value: false.
	//
	// example:
	//
	// true
	DeleteOriginalFile *bool `json:"DeleteOriginalFile,omitempty" xml:"DeleteOriginalFile,omitempty"`
	// The ID of the snapshot job.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s DeleteLiveSnapshotFilesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSnapshotFilesShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveSnapshotFilesShrinkRequest) SetCreateTimestampListShrink(v string) *DeleteLiveSnapshotFilesShrinkRequest {
	s.CreateTimestampListShrink = &v
	return s
}

func (s *DeleteLiveSnapshotFilesShrinkRequest) SetDeleteOriginalFile(v bool) *DeleteLiveSnapshotFilesShrinkRequest {
	s.DeleteOriginalFile = &v
	return s
}

func (s *DeleteLiveSnapshotFilesShrinkRequest) SetJobId(v string) *DeleteLiveSnapshotFilesShrinkRequest {
	s.JobId = &v
	return s
}

type DeleteLiveSnapshotFilesResponseBody struct {
	// The list of deleted files.
	DeleteFileResultList []*DeleteLiveSnapshotFilesResponseBodyDeleteFileResultList `json:"DeleteFileResultList,omitempty" xml:"DeleteFileResultList,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// ****2876-6263-4B75-8F2C-CD0F7FCF****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveSnapshotFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSnapshotFilesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveSnapshotFilesResponseBody) SetDeleteFileResultList(v []*DeleteLiveSnapshotFilesResponseBodyDeleteFileResultList) *DeleteLiveSnapshotFilesResponseBody {
	s.DeleteFileResultList = v
	return s
}

func (s *DeleteLiveSnapshotFilesResponseBody) SetRequestId(v string) *DeleteLiveSnapshotFilesResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveSnapshotFilesResponseBodyDeleteFileResultList struct {
	// The time when the file was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1660638613798
	CreateTimestamp *int64 `json:"CreateTimestamp,omitempty" xml:"CreateTimestamp,omitempty"`
	// The result of deletion. A value of OK indicates that the file is deleted. Other values indicate that the file failed to be deleted.
	//
	// Valid values:
	//
	// 	- OK: The file was deleted.
	//
	// 	- NotFound: The file was not found.
	//
	// example:
	//
	// OK
	Result *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DeleteLiveSnapshotFilesResponseBodyDeleteFileResultList) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSnapshotFilesResponseBodyDeleteFileResultList) GoString() string {
	return s.String()
}

func (s *DeleteLiveSnapshotFilesResponseBodyDeleteFileResultList) SetCreateTimestamp(v int64) *DeleteLiveSnapshotFilesResponseBodyDeleteFileResultList {
	s.CreateTimestamp = &v
	return s
}

func (s *DeleteLiveSnapshotFilesResponseBodyDeleteFileResultList) SetResult(v string) *DeleteLiveSnapshotFilesResponseBodyDeleteFileResultList {
	s.Result = &v
	return s
}

type DeleteLiveSnapshotFilesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteLiveSnapshotFilesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteLiveSnapshotFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSnapshotFilesResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveSnapshotFilesResponse) SetHeaders(v map[string]*string) *DeleteLiveSnapshotFilesResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveSnapshotFilesResponse) SetStatusCode(v int32) *DeleteLiveSnapshotFilesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveSnapshotFilesResponse) SetBody(v *DeleteLiveSnapshotFilesResponseBody) *DeleteLiveSnapshotFilesResponse {
	s.Body = v
	return s
}

type DeleteLiveSnapshotTemplateRequest struct {
	// The template ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DeleteLiveSnapshotTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSnapshotTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveSnapshotTemplateRequest) SetTemplateId(v string) *DeleteLiveSnapshotTemplateRequest {
	s.TemplateId = &v
	return s
}

type DeleteLiveSnapshotTemplateResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveSnapshotTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSnapshotTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveSnapshotTemplateResponseBody) SetRequestId(v string) *DeleteLiveSnapshotTemplateResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveSnapshotTemplateResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteLiveSnapshotTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteLiveSnapshotTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSnapshotTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveSnapshotTemplateResponse) SetHeaders(v map[string]*string) *DeleteLiveSnapshotTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveSnapshotTemplateResponse) SetStatusCode(v int32) *DeleteLiveSnapshotTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveSnapshotTemplateResponse) SetBody(v *DeleteLiveSnapshotTemplateResponseBody) *DeleteLiveSnapshotTemplateResponse {
	s.Body = v
	return s
}

type DeleteLiveTranscodeJobRequest struct {
	// The ID of the transcoding job.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s DeleteLiveTranscodeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveTranscodeJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveTranscodeJobRequest) SetJobId(v string) *DeleteLiveTranscodeJobRequest {
	s.JobId = &v
	return s
}

type DeleteLiveTranscodeJobResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveTranscodeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveTranscodeJobResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveTranscodeJobResponseBody) SetRequestId(v string) *DeleteLiveTranscodeJobResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveTranscodeJobResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteLiveTranscodeJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteLiveTranscodeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveTranscodeJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveTranscodeJobResponse) SetHeaders(v map[string]*string) *DeleteLiveTranscodeJobResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveTranscodeJobResponse) SetStatusCode(v int32) *DeleteLiveTranscodeJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveTranscodeJobResponse) SetBody(v *DeleteLiveTranscodeJobResponseBody) *DeleteLiveTranscodeJobResponse {
	s.Body = v
	return s
}

type DeleteLiveTranscodeTemplateRequest struct {
	// The template ID. To obtain the template ID, log on to the [Intelligent Media Services (IMS) console](https://ice.console.aliyun.com/summary), choose Real-time Media Processing > Template Management, and then click the Transcoding tab. Alternatively, find the ID from the response parameters of the [CreateLiveTranscodeTemplate](https://help.aliyun.com/document_detail/449217.html) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****d80e4e4044975745c14b****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DeleteLiveTranscodeTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveTranscodeTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveTranscodeTemplateRequest) SetTemplateId(v string) *DeleteLiveTranscodeTemplateRequest {
	s.TemplateId = &v
	return s
}

type DeleteLiveTranscodeTemplateResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveTranscodeTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveTranscodeTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveTranscodeTemplateResponseBody) SetRequestId(v string) *DeleteLiveTranscodeTemplateResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveTranscodeTemplateResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteLiveTranscodeTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteLiveTranscodeTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveTranscodeTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveTranscodeTemplateResponse) SetHeaders(v map[string]*string) *DeleteLiveTranscodeTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveTranscodeTemplateResponse) SetStatusCode(v int32) *DeleteLiveTranscodeTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveTranscodeTemplateResponse) SetBody(v *DeleteLiveTranscodeTemplateResponseBody) *DeleteLiveTranscodeTemplateResponse {
	s.Body = v
	return s
}

type DeleteMediaConnectFlowRequest struct {
	// The flow ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0381f478-7d53-4076-9d5f-27680a6f73e7
	FlowId *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
}

func (s DeleteMediaConnectFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaConnectFlowRequest) GoString() string {
	return s.String()
}

func (s *DeleteMediaConnectFlowRequest) SetFlowId(v string) *DeleteMediaConnectFlowRequest {
	s.FlowId = &v
	return s
}

type DeleteMediaConnectFlowResponseBody struct {
	// The response body.
	//
	// example:
	//
	// ""
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The call description.
	//
	// example:
	//
	// OK
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 5AEC17BD-D80B-5F78-BE1B-F07DFA0C8622
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The returned error code. A value of `0` indicates the call is successful.
	//
	// example:
	//
	// 0
	RetCode *int32 `json:"RetCode,omitempty" xml:"RetCode,omitempty"`
}

func (s DeleteMediaConnectFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaConnectFlowResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMediaConnectFlowResponseBody) SetContent(v string) *DeleteMediaConnectFlowResponseBody {
	s.Content = &v
	return s
}

func (s *DeleteMediaConnectFlowResponseBody) SetDescription(v string) *DeleteMediaConnectFlowResponseBody {
	s.Description = &v
	return s
}

func (s *DeleteMediaConnectFlowResponseBody) SetRequestId(v string) *DeleteMediaConnectFlowResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMediaConnectFlowResponseBody) SetRetCode(v int32) *DeleteMediaConnectFlowResponseBody {
	s.RetCode = &v
	return s
}

type DeleteMediaConnectFlowResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMediaConnectFlowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMediaConnectFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaConnectFlowResponse) GoString() string {
	return s.String()
}

func (s *DeleteMediaConnectFlowResponse) SetHeaders(v map[string]*string) *DeleteMediaConnectFlowResponse {
	s.Headers = v
	return s
}

func (s *DeleteMediaConnectFlowResponse) SetStatusCode(v int32) *DeleteMediaConnectFlowResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMediaConnectFlowResponse) SetBody(v *DeleteMediaConnectFlowResponseBody) *DeleteMediaConnectFlowResponse {
	s.Body = v
	return s
}

type DeleteMediaConnectFlowInputRequest struct {
	// The flow ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0381f478-7d53-4076-9d5f-27680a6f73e7
	FlowId    *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	InputName *string `json:"InputName,omitempty" xml:"InputName,omitempty"`
}

func (s DeleteMediaConnectFlowInputRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaConnectFlowInputRequest) GoString() string {
	return s.String()
}

func (s *DeleteMediaConnectFlowInputRequest) SetFlowId(v string) *DeleteMediaConnectFlowInputRequest {
	s.FlowId = &v
	return s
}

func (s *DeleteMediaConnectFlowInputRequest) SetInputName(v string) *DeleteMediaConnectFlowInputRequest {
	s.InputName = &v
	return s
}

type DeleteMediaConnectFlowInputResponseBody struct {
	// The response body.
	//
	// example:
	//
	// ""
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The call description.
	//
	// example:
	//
	// OK
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// C0C02296-113C-5838-8FE9-8F3A32998DDC
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The returned error code. A value of 0 indicates the call is successful.
	//
	// example:
	//
	// 0
	RetCode *int32 `json:"RetCode,omitempty" xml:"RetCode,omitempty"`
}

func (s DeleteMediaConnectFlowInputResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaConnectFlowInputResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMediaConnectFlowInputResponseBody) SetContent(v string) *DeleteMediaConnectFlowInputResponseBody {
	s.Content = &v
	return s
}

func (s *DeleteMediaConnectFlowInputResponseBody) SetDescription(v string) *DeleteMediaConnectFlowInputResponseBody {
	s.Description = &v
	return s
}

func (s *DeleteMediaConnectFlowInputResponseBody) SetRequestId(v string) *DeleteMediaConnectFlowInputResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMediaConnectFlowInputResponseBody) SetRetCode(v int32) *DeleteMediaConnectFlowInputResponseBody {
	s.RetCode = &v
	return s
}

type DeleteMediaConnectFlowInputResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMediaConnectFlowInputResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMediaConnectFlowInputResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaConnectFlowInputResponse) GoString() string {
	return s.String()
}

func (s *DeleteMediaConnectFlowInputResponse) SetHeaders(v map[string]*string) *DeleteMediaConnectFlowInputResponse {
	s.Headers = v
	return s
}

func (s *DeleteMediaConnectFlowInputResponse) SetStatusCode(v int32) *DeleteMediaConnectFlowInputResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMediaConnectFlowInputResponse) SetBody(v *DeleteMediaConnectFlowInputResponseBody) *DeleteMediaConnectFlowInputResponse {
	s.Body = v
	return s
}

type DeleteMediaConnectFlowOutputRequest struct {
	// The flow ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 34900dc6-90ec-4968-af3c-fcd87f231a5f
	FlowId *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	// The name of the output that you want to delete.
	//
	// This parameter is required.
	//
	// example:
	//
	// AliTestOutput
	OutputName *string `json:"OutputName,omitempty" xml:"OutputName,omitempty"`
}

func (s DeleteMediaConnectFlowOutputRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaConnectFlowOutputRequest) GoString() string {
	return s.String()
}

func (s *DeleteMediaConnectFlowOutputRequest) SetFlowId(v string) *DeleteMediaConnectFlowOutputRequest {
	s.FlowId = &v
	return s
}

func (s *DeleteMediaConnectFlowOutputRequest) SetOutputName(v string) *DeleteMediaConnectFlowOutputRequest {
	s.OutputName = &v
	return s
}

type DeleteMediaConnectFlowOutputResponseBody struct {
	// The response body.
	//
	// example:
	//
	// ""
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The call description.
	//
	// example:
	//
	// OK
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// DF73E08E-F807-50F5-A2BD-B76391EAE8FF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The returned error code. A value of 0 indicates the call is successful.
	//
	// example:
	//
	// 0
	RetCode *int32 `json:"RetCode,omitempty" xml:"RetCode,omitempty"`
}

func (s DeleteMediaConnectFlowOutputResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaConnectFlowOutputResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMediaConnectFlowOutputResponseBody) SetContent(v string) *DeleteMediaConnectFlowOutputResponseBody {
	s.Content = &v
	return s
}

func (s *DeleteMediaConnectFlowOutputResponseBody) SetDescription(v string) *DeleteMediaConnectFlowOutputResponseBody {
	s.Description = &v
	return s
}

func (s *DeleteMediaConnectFlowOutputResponseBody) SetRequestId(v string) *DeleteMediaConnectFlowOutputResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMediaConnectFlowOutputResponseBody) SetRetCode(v int32) *DeleteMediaConnectFlowOutputResponseBody {
	s.RetCode = &v
	return s
}

type DeleteMediaConnectFlowOutputResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMediaConnectFlowOutputResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMediaConnectFlowOutputResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaConnectFlowOutputResponse) GoString() string {
	return s.String()
}

func (s *DeleteMediaConnectFlowOutputResponse) SetHeaders(v map[string]*string) *DeleteMediaConnectFlowOutputResponse {
	s.Headers = v
	return s
}

func (s *DeleteMediaConnectFlowOutputResponse) SetStatusCode(v int32) *DeleteMediaConnectFlowOutputResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMediaConnectFlowOutputResponse) SetBody(v *DeleteMediaConnectFlowOutputResponseBody) *DeleteMediaConnectFlowOutputResponse {
	s.Body = v
	return s
}

type DeleteMediaFromSearchLibRequest struct {
	// The ID of the media asset.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The message body.
	//
	// example:
	//
	// {}
	MsgBody *string `json:"MsgBody,omitempty" xml:"MsgBody,omitempty"`
	// The name of the search library. Default value: ims-default-search-lib.
	//
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
}

func (s DeleteMediaFromSearchLibRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaFromSearchLibRequest) GoString() string {
	return s.String()
}

func (s *DeleteMediaFromSearchLibRequest) SetMediaId(v string) *DeleteMediaFromSearchLibRequest {
	s.MediaId = &v
	return s
}

func (s *DeleteMediaFromSearchLibRequest) SetMsgBody(v string) *DeleteMediaFromSearchLibRequest {
	s.MsgBody = &v
	return s
}

func (s *DeleteMediaFromSearchLibRequest) SetSearchLibName(v string) *DeleteMediaFromSearchLibRequest {
	s.SearchLibName = &v
	return s
}

type DeleteMediaFromSearchLibResponseBody struct {
	// The status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// ******b48fb04483915d4f2cd8******
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMediaFromSearchLibResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaFromSearchLibResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMediaFromSearchLibResponseBody) SetCode(v string) *DeleteMediaFromSearchLibResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteMediaFromSearchLibResponseBody) SetMediaId(v string) *DeleteMediaFromSearchLibResponseBody {
	s.MediaId = &v
	return s
}

func (s *DeleteMediaFromSearchLibResponseBody) SetRequestId(v string) *DeleteMediaFromSearchLibResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMediaFromSearchLibResponseBody) SetSuccess(v string) *DeleteMediaFromSearchLibResponseBody {
	s.Success = &v
	return s
}

type DeleteMediaFromSearchLibResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMediaFromSearchLibResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMediaFromSearchLibResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaFromSearchLibResponse) GoString() string {
	return s.String()
}

func (s *DeleteMediaFromSearchLibResponse) SetHeaders(v map[string]*string) *DeleteMediaFromSearchLibResponse {
	s.Headers = v
	return s
}

func (s *DeleteMediaFromSearchLibResponse) SetStatusCode(v int32) *DeleteMediaFromSearchLibResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMediaFromSearchLibResponse) SetBody(v *DeleteMediaFromSearchLibResponseBody) *DeleteMediaFromSearchLibResponse {
	s.Body = v
	return s
}

type DeleteMediaInfosRequest struct {
	// Specifies whether to delete the physical file of the media asset.
	//
	// If the media asset is stored in your own OSS bucket, you must authorize the service role AliyunICEDefaultRole in advance. For more information<props="china">, see [Authorize IMS to delete recording files in OSS](https://help.aliyun.com/zh/ims/user-guide/record?spm=a2c4g.11186623.0.i8#0737d9c437bmn).
	//
	// example:
	//
	// false
	DeletePhysicalFiles *bool `json:"DeletePhysicalFiles,omitempty" xml:"DeletePhysicalFiles,omitempty"`
	// The URL of the media asset that you want to delete. The file corresponding to the URL must be registered with IMS. Separate multiple URLs with commas (,). The following two formats are supported:
	//
	// 1.  http(s)://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?
	//
	// 2.  OSS://example-bucket/example.mp4?\\
	//
	//     In this format, it is considered by default that the region of the OSS bucket in which the media asset resides is the same as the region in which IMS is activated.
	InputURLs *string `json:"InputURLs,omitempty" xml:"InputURLs,omitempty"`
	// The ID of the media asset that you want to delete from Intelligent Media Services (IMS).
	//
	// 	- Separate multiple IDs with commas (,).
	//
	// If you leave MediaIds empty, you must specify InputURLs.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****,****15d4a4b0448391508f2cb486****
	MediaIds *string `json:"MediaIds,omitempty" xml:"MediaIds,omitempty"`
}

func (s DeleteMediaInfosRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaInfosRequest) GoString() string {
	return s.String()
}

func (s *DeleteMediaInfosRequest) SetDeletePhysicalFiles(v bool) *DeleteMediaInfosRequest {
	s.DeletePhysicalFiles = &v
	return s
}

func (s *DeleteMediaInfosRequest) SetInputURLs(v string) *DeleteMediaInfosRequest {
	s.InputURLs = &v
	return s
}

func (s *DeleteMediaInfosRequest) SetMediaIds(v string) *DeleteMediaInfosRequest {
	s.MediaIds = &v
	return s
}

type DeleteMediaInfosResponseBody struct {
	// The IDs or URLs of media assets that cannot be deleted. Generally, media assets cannot be deleted if you do not have the required permissions.
	ForbiddenList []*string `json:"ForbiddenList,omitempty" xml:"ForbiddenList,omitempty" type:"Repeated"`
	// The IDs or URLs of ignored media assets. An error occurred while obtaining such media assets.
	IgnoredList []*string `json:"IgnoredList,omitempty" xml:"IgnoredList,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 0622C702-41BE-467E-AF2E-883D4517962E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteMediaInfosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaInfosResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMediaInfosResponseBody) SetForbiddenList(v []*string) *DeleteMediaInfosResponseBody {
	s.ForbiddenList = v
	return s
}

func (s *DeleteMediaInfosResponseBody) SetIgnoredList(v []*string) *DeleteMediaInfosResponseBody {
	s.IgnoredList = v
	return s
}

func (s *DeleteMediaInfosResponseBody) SetRequestId(v string) *DeleteMediaInfosResponseBody {
	s.RequestId = &v
	return s
}

type DeleteMediaInfosResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMediaInfosResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMediaInfosResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaInfosResponse) GoString() string {
	return s.String()
}

func (s *DeleteMediaInfosResponse) SetHeaders(v map[string]*string) *DeleteMediaInfosResponse {
	s.Headers = v
	return s
}

func (s *DeleteMediaInfosResponse) SetStatusCode(v int32) *DeleteMediaInfosResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMediaInfosResponse) SetBody(v *DeleteMediaInfosResponseBody) *DeleteMediaInfosResponse {
	s.Body = v
	return s
}

type DeleteMediaLiveChannelRequest struct {
	// The ID of the channel.
	//
	// This parameter is required.
	//
	// example:
	//
	// SEGK5KA6KYKAWQQH
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
}

func (s DeleteMediaLiveChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaLiveChannelRequest) GoString() string {
	return s.String()
}

func (s *DeleteMediaLiveChannelRequest) SetChannelId(v string) *DeleteMediaLiveChannelRequest {
	s.ChannelId = &v
	return s
}

type DeleteMediaLiveChannelResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteMediaLiveChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaLiveChannelResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMediaLiveChannelResponseBody) SetRequestId(v string) *DeleteMediaLiveChannelResponseBody {
	s.RequestId = &v
	return s
}

type DeleteMediaLiveChannelResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMediaLiveChannelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMediaLiveChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaLiveChannelResponse) GoString() string {
	return s.String()
}

func (s *DeleteMediaLiveChannelResponse) SetHeaders(v map[string]*string) *DeleteMediaLiveChannelResponse {
	s.Headers = v
	return s
}

func (s *DeleteMediaLiveChannelResponse) SetStatusCode(v int32) *DeleteMediaLiveChannelResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMediaLiveChannelResponse) SetBody(v *DeleteMediaLiveChannelResponseBody) *DeleteMediaLiveChannelResponse {
	s.Body = v
	return s
}

type DeleteMediaLiveInputRequest struct {
	// The ID of the input.
	//
	// This parameter is required.
	//
	// example:
	//
	// SEGK5KA6KYKAWQQH
	InputId *string `json:"InputId,omitempty" xml:"InputId,omitempty"`
}

func (s DeleteMediaLiveInputRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaLiveInputRequest) GoString() string {
	return s.String()
}

func (s *DeleteMediaLiveInputRequest) SetInputId(v string) *DeleteMediaLiveInputRequest {
	s.InputId = &v
	return s
}

type DeleteMediaLiveInputResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteMediaLiveInputResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaLiveInputResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMediaLiveInputResponseBody) SetRequestId(v string) *DeleteMediaLiveInputResponseBody {
	s.RequestId = &v
	return s
}

type DeleteMediaLiveInputResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMediaLiveInputResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMediaLiveInputResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaLiveInputResponse) GoString() string {
	return s.String()
}

func (s *DeleteMediaLiveInputResponse) SetHeaders(v map[string]*string) *DeleteMediaLiveInputResponse {
	s.Headers = v
	return s
}

func (s *DeleteMediaLiveInputResponse) SetStatusCode(v int32) *DeleteMediaLiveInputResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMediaLiveInputResponse) SetBody(v *DeleteMediaLiveInputResponseBody) *DeleteMediaLiveInputResponse {
	s.Body = v
	return s
}

type DeleteMediaLiveInputSecurityGroupRequest struct {
	// The ID of the security group.
	//
	// This parameter is required.
	//
	// example:
	//
	// SEGK5KA6KYKAWQQH
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
}

func (s DeleteMediaLiveInputSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaLiveInputSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteMediaLiveInputSecurityGroupRequest) SetSecurityGroupId(v string) *DeleteMediaLiveInputSecurityGroupRequest {
	s.SecurityGroupId = &v
	return s
}

type DeleteMediaLiveInputSecurityGroupResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteMediaLiveInputSecurityGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaLiveInputSecurityGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMediaLiveInputSecurityGroupResponseBody) SetRequestId(v string) *DeleteMediaLiveInputSecurityGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteMediaLiveInputSecurityGroupResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMediaLiveInputSecurityGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMediaLiveInputSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaLiveInputSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteMediaLiveInputSecurityGroupResponse) SetHeaders(v map[string]*string) *DeleteMediaLiveInputSecurityGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteMediaLiveInputSecurityGroupResponse) SetStatusCode(v int32) *DeleteMediaLiveInputSecurityGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMediaLiveInputSecurityGroupResponse) SetBody(v *DeleteMediaLiveInputSecurityGroupResponseBody) *DeleteMediaLiveInputSecurityGroupResponse {
	s.Body = v
	return s
}

type DeleteMediaMarksRequest struct {
	// The ID of the media asset.
	//
	// example:
	//
	// ****c469e944b5a856828dc2****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The mark ID. You can specify multiple mark IDs separated with commas (,).
	//
	// If you do not specify MediaMarkIds, all the marks of the media asset are deleted.
	//
	// example:
	//
	// mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60
	MediaMarkIds *string `json:"MediaMarkIds,omitempty" xml:"MediaMarkIds,omitempty"`
}

func (s DeleteMediaMarksRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaMarksRequest) GoString() string {
	return s.String()
}

func (s *DeleteMediaMarksRequest) SetMediaId(v string) *DeleteMediaMarksRequest {
	s.MediaId = &v
	return s
}

func (s *DeleteMediaMarksRequest) SetMediaMarkIds(v string) *DeleteMediaMarksRequest {
	s.MediaMarkIds = &v
	return s
}

type DeleteMediaMarksResponseBody struct {
	// The ID of the media asset.
	//
	// example:
	//
	// ****019b82e24b37a1c2958dec38****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The IDs of the deleted marks separated with commas (,).
	//
	// example:
	//
	// mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60
	MediaMarkIds *string `json:"MediaMarkIds,omitempty" xml:"MediaMarkIds,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteMediaMarksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaMarksResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMediaMarksResponseBody) SetMediaId(v string) *DeleteMediaMarksResponseBody {
	s.MediaId = &v
	return s
}

func (s *DeleteMediaMarksResponseBody) SetMediaMarkIds(v string) *DeleteMediaMarksResponseBody {
	s.MediaMarkIds = &v
	return s
}

func (s *DeleteMediaMarksResponseBody) SetRequestId(v string) *DeleteMediaMarksResponseBody {
	s.RequestId = &v
	return s
}

type DeleteMediaMarksResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMediaMarksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMediaMarksResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaMarksResponse) GoString() string {
	return s.String()
}

func (s *DeleteMediaMarksResponse) SetHeaders(v map[string]*string) *DeleteMediaMarksResponse {
	s.Headers = v
	return s
}

func (s *DeleteMediaMarksResponse) SetStatusCode(v int32) *DeleteMediaMarksResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMediaMarksResponse) SetBody(v *DeleteMediaMarksResponseBody) *DeleteMediaMarksResponse {
	s.Body = v
	return s
}

type DeletePipelineRequest struct {
	// The ID of the MPS queue.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
}

func (s DeletePipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePipelineRequest) GoString() string {
	return s.String()
}

func (s *DeletePipelineRequest) SetPipelineId(v string) *DeletePipelineRequest {
	s.PipelineId = &v
	return s
}

type DeletePipelineResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeletePipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePipelineResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePipelineResponseBody) SetRequestId(v string) *DeletePipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeletePipelineResponseBody) SetSuccess(v bool) *DeletePipelineResponseBody {
	s.Success = &v
	return s
}

type DeletePipelineResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeletePipelineResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeletePipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePipelineResponse) GoString() string {
	return s.String()
}

func (s *DeletePipelineResponse) SetHeaders(v map[string]*string) *DeletePipelineResponse {
	s.Headers = v
	return s
}

func (s *DeletePipelineResponse) SetStatusCode(v int32) *DeletePipelineResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePipelineResponse) SetBody(v *DeletePipelineResponseBody) *DeletePipelineResponse {
	s.Body = v
	return s
}

type DeletePlayInfoRequest struct {
	// Specifies whether to delete the physical file of the media stream.
	//
	// If the media asset is stored in your own Object Storage Service (OSS) bucket, you must authorize the service role AliyunICEDefaultRole in advance. <props="china">For more information, see [Authorize IMS to delete recording files in OSS](https://help.aliyun.com/document_detail/449331.html#p-ko2-wc7-iad).
	//
	// You can delete only the physical files of transcoded streams, but not the physical files of source files.
	//
	// example:
	//
	// false
	DeletePhysicalFiles *bool `json:"DeletePhysicalFiles,omitempty" xml:"DeletePhysicalFiles,omitempty"`
	// The URL of the media stream file that you want to delete. Separate multiple URLs with commas (,).
	//
	// example:
	//
	// https://ice-test001.oss-cn-shanghai.aliyuncs.com/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%E5%B0%8F%E7%8C%AA%E4%BD%A9%E5%A5%87640*360.mp4
	FileURLs *string `json:"FileURLs,omitempty" xml:"FileURLs,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// 1d3518e0027d71ed80cd909598416303
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s DeletePlayInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePlayInfoRequest) GoString() string {
	return s.String()
}

func (s *DeletePlayInfoRequest) SetDeletePhysicalFiles(v bool) *DeletePlayInfoRequest {
	s.DeletePhysicalFiles = &v
	return s
}

func (s *DeletePlayInfoRequest) SetFileURLs(v string) *DeletePlayInfoRequest {
	s.FileURLs = &v
	return s
}

func (s *DeletePlayInfoRequest) SetMediaId(v string) *DeletePlayInfoRequest {
	s.MediaId = &v
	return s
}

type DeletePlayInfoResponseBody struct {
	// The URLs of the media streams that cannot be deleted. Generally, media streams cannot be deleted if you do not have the required permissions.
	ForbiddenList []*string `json:"ForbiddenList,omitempty" xml:"ForbiddenList,omitempty" type:"Repeated"`
	// The URLs of ignored media streams. An error occurred while obtaining such media assets because the IDs or URLs of the media assets do not exist.
	IgnoredList []*string `json:"IgnoredList,omitempty" xml:"IgnoredList,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeletePlayInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePlayInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePlayInfoResponseBody) SetForbiddenList(v []*string) *DeletePlayInfoResponseBody {
	s.ForbiddenList = v
	return s
}

func (s *DeletePlayInfoResponseBody) SetIgnoredList(v []*string) *DeletePlayInfoResponseBody {
	s.IgnoredList = v
	return s
}

func (s *DeletePlayInfoResponseBody) SetRequestId(v string) *DeletePlayInfoResponseBody {
	s.RequestId = &v
	return s
}

type DeletePlayInfoResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeletePlayInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeletePlayInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePlayInfoResponse) GoString() string {
	return s.String()
}

func (s *DeletePlayInfoResponse) SetHeaders(v map[string]*string) *DeletePlayInfoResponse {
	s.Headers = v
	return s
}

func (s *DeletePlayInfoResponse) SetStatusCode(v int32) *DeletePlayInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePlayInfoResponse) SetBody(v *DeletePlayInfoResponseBody) *DeletePlayInfoResponse {
	s.Body = v
	return s
}

type DeleteProgramRequest struct {
	// The name of the channel.
	//
	// This parameter is required.
	//
	// example:
	//
	// MyChannel
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The name of the program.
	//
	// This parameter is required.
	//
	// example:
	//
	// program_name
	ProgramName *string `json:"ProgramName,omitempty" xml:"ProgramName,omitempty"`
}

func (s DeleteProgramRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteProgramRequest) GoString() string {
	return s.String()
}

func (s *DeleteProgramRequest) SetChannelName(v string) *DeleteProgramRequest {
	s.ChannelName = &v
	return s
}

func (s *DeleteProgramRequest) SetProgramName(v string) *DeleteProgramRequest {
	s.ProgramName = &v
	return s
}

type DeleteProgramResponseBody struct {
	// **Request ID**
	//
	// example:
	//
	// xxx-xxxx-xxxxx-xxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteProgramResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteProgramResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteProgramResponseBody) SetRequestId(v string) *DeleteProgramResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteProgramResponseBody) SetSuccess(v bool) *DeleteProgramResponseBody {
	s.Success = &v
	return s
}

type DeleteProgramResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteProgramResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteProgramResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteProgramResponse) GoString() string {
	return s.String()
}

func (s *DeleteProgramResponse) SetHeaders(v map[string]*string) *DeleteProgramResponse {
	s.Headers = v
	return s
}

func (s *DeleteProgramResponse) SetStatusCode(v int32) *DeleteProgramResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteProgramResponse) SetBody(v *DeleteProgramResponseBody) *DeleteProgramResponse {
	s.Body = v
	return s
}

type DeleteRecognitionEntityRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// landmark
	Algorithm *string `json:"Algorithm,omitempty" xml:"Algorithm,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// **************544cb84754************
	EntityId *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// *************24b47865c6**************
	LibId                *string `json:"LibId,omitempty" xml:"LibId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteRecognitionEntityRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRecognitionEntityRequest) GoString() string {
	return s.String()
}

func (s *DeleteRecognitionEntityRequest) SetAlgorithm(v string) *DeleteRecognitionEntityRequest {
	s.Algorithm = &v
	return s
}

func (s *DeleteRecognitionEntityRequest) SetEntityId(v string) *DeleteRecognitionEntityRequest {
	s.EntityId = &v
	return s
}

func (s *DeleteRecognitionEntityRequest) SetLibId(v string) *DeleteRecognitionEntityRequest {
	s.LibId = &v
	return s
}

func (s *DeleteRecognitionEntityRequest) SetOwnerAccount(v string) *DeleteRecognitionEntityRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteRecognitionEntityRequest) SetOwnerId(v int64) *DeleteRecognitionEntityRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteRecognitionEntityRequest) SetResourceOwnerAccount(v string) *DeleteRecognitionEntityRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteRecognitionEntityRequest) SetResourceOwnerId(v int64) *DeleteRecognitionEntityRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteRecognitionEntityResponseBody struct {
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteRecognitionEntityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRecognitionEntityResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRecognitionEntityResponseBody) SetRequestId(v string) *DeleteRecognitionEntityResponseBody {
	s.RequestId = &v
	return s
}

type DeleteRecognitionEntityResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteRecognitionEntityResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteRecognitionEntityResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRecognitionEntityResponse) GoString() string {
	return s.String()
}

func (s *DeleteRecognitionEntityResponse) SetHeaders(v map[string]*string) *DeleteRecognitionEntityResponse {
	s.Headers = v
	return s
}

func (s *DeleteRecognitionEntityResponse) SetStatusCode(v int32) *DeleteRecognitionEntityResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteRecognitionEntityResponse) SetBody(v *DeleteRecognitionEntityResponseBody) *DeleteRecognitionEntityResponse {
	s.Body = v
	return s
}

type DeleteRecognitionLibRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// landmark
	Algorithm *string `json:"Algorithm,omitempty" xml:"Algorithm,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// *************24b47865c6**************
	LibId                *string `json:"LibId,omitempty" xml:"LibId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteRecognitionLibRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRecognitionLibRequest) GoString() string {
	return s.String()
}

func (s *DeleteRecognitionLibRequest) SetAlgorithm(v string) *DeleteRecognitionLibRequest {
	s.Algorithm = &v
	return s
}

func (s *DeleteRecognitionLibRequest) SetLibId(v string) *DeleteRecognitionLibRequest {
	s.LibId = &v
	return s
}

func (s *DeleteRecognitionLibRequest) SetOwnerAccount(v string) *DeleteRecognitionLibRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteRecognitionLibRequest) SetOwnerId(v int64) *DeleteRecognitionLibRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteRecognitionLibRequest) SetResourceOwnerAccount(v string) *DeleteRecognitionLibRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteRecognitionLibRequest) SetResourceOwnerId(v int64) *DeleteRecognitionLibRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteRecognitionLibResponseBody struct {
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteRecognitionLibResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRecognitionLibResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRecognitionLibResponseBody) SetRequestId(v string) *DeleteRecognitionLibResponseBody {
	s.RequestId = &v
	return s
}

type DeleteRecognitionLibResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteRecognitionLibResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteRecognitionLibResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRecognitionLibResponse) GoString() string {
	return s.String()
}

func (s *DeleteRecognitionLibResponse) SetHeaders(v map[string]*string) *DeleteRecognitionLibResponse {
	s.Headers = v
	return s
}

func (s *DeleteRecognitionLibResponse) SetStatusCode(v int32) *DeleteRecognitionLibResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteRecognitionLibResponse) SetBody(v *DeleteRecognitionLibResponseBody) *DeleteRecognitionLibResponse {
	s.Body = v
	return s
}

type DeleteRecognitionSampleRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// landmark
	Algorithm *string `json:"Algorithm,omitempty" xml:"Algorithm,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// **************544cb84754************
	EntityId *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// *************24b47865c6**************
	LibId                *string `json:"LibId,omitempty" xml:"LibId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// **************4d2ba728e2f**************
	SampleId *string `json:"SampleId,omitempty" xml:"SampleId,omitempty"`
}

func (s DeleteRecognitionSampleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRecognitionSampleRequest) GoString() string {
	return s.String()
}

func (s *DeleteRecognitionSampleRequest) SetAlgorithm(v string) *DeleteRecognitionSampleRequest {
	s.Algorithm = &v
	return s
}

func (s *DeleteRecognitionSampleRequest) SetEntityId(v string) *DeleteRecognitionSampleRequest {
	s.EntityId = &v
	return s
}

func (s *DeleteRecognitionSampleRequest) SetLibId(v string) *DeleteRecognitionSampleRequest {
	s.LibId = &v
	return s
}

func (s *DeleteRecognitionSampleRequest) SetOwnerAccount(v string) *DeleteRecognitionSampleRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteRecognitionSampleRequest) SetOwnerId(v int64) *DeleteRecognitionSampleRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteRecognitionSampleRequest) SetResourceOwnerAccount(v string) *DeleteRecognitionSampleRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteRecognitionSampleRequest) SetResourceOwnerId(v int64) *DeleteRecognitionSampleRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteRecognitionSampleRequest) SetSampleId(v string) *DeleteRecognitionSampleRequest {
	s.SampleId = &v
	return s
}

type DeleteRecognitionSampleResponseBody struct {
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteRecognitionSampleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRecognitionSampleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRecognitionSampleResponseBody) SetRequestId(v string) *DeleteRecognitionSampleResponseBody {
	s.RequestId = &v
	return s
}

type DeleteRecognitionSampleResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteRecognitionSampleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteRecognitionSampleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRecognitionSampleResponse) GoString() string {
	return s.String()
}

func (s *DeleteRecognitionSampleResponse) SetHeaders(v map[string]*string) *DeleteRecognitionSampleResponse {
	s.Headers = v
	return s
}

func (s *DeleteRecognitionSampleResponse) SetStatusCode(v int32) *DeleteRecognitionSampleResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteRecognitionSampleResponse) SetBody(v *DeleteRecognitionSampleResponseBody) *DeleteRecognitionSampleResponse {
	s.Body = v
	return s
}

type DeleteSmartJobRequest struct {
	// The IDs of the jobs to delete. Separate multiple IDs with commas (,).
	//
	// example:
	//
	// ******b48fb04483915d4f2cd8******,******042d5e4db6866f6289d1******
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s DeleteSmartJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSmartJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteSmartJobRequest) SetJobId(v string) *DeleteSmartJobRequest {
	s.JobId = &v
	return s
}

type DeleteSmartJobResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSmartJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSmartJobResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSmartJobResponseBody) SetRequestId(v string) *DeleteSmartJobResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSmartJobResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSmartJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSmartJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSmartJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteSmartJobResponse) SetHeaders(v map[string]*string) *DeleteSmartJobResponse {
	s.Headers = v
	return s
}

func (s *DeleteSmartJobResponse) SetStatusCode(v int32) *DeleteSmartJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSmartJobResponse) SetBody(v *DeleteSmartJobResponseBody) *DeleteSmartJobResponse {
	s.Body = v
	return s
}

type DeleteSourceRequest struct {
	// Specifies whether to use delete markers.
	//
	// example:
	//
	// true
	SoftDelete *bool `json:"SoftDelete,omitempty" xml:"SoftDelete,omitempty"`
	// The name of the source location.
	//
	// This parameter is required.
	//
	// example:
	//
	// MySourceLocation
	SourceLocationName *string `json:"SourceLocationName,omitempty" xml:"SourceLocationName,omitempty"`
	// The name of the source.
	//
	// This parameter is required.
	//
	// example:
	//
	// MyVodSource
	SourceName *string `json:"SourceName,omitempty" xml:"SourceName,omitempty"`
	// The source type. Valid values: vodSource and liveSource.
	//
	// This parameter is required.
	//
	// example:
	//
	// vodSource
	SourceType *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
}

func (s DeleteSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSourceRequest) GoString() string {
	return s.String()
}

func (s *DeleteSourceRequest) SetSoftDelete(v bool) *DeleteSourceRequest {
	s.SoftDelete = &v
	return s
}

func (s *DeleteSourceRequest) SetSourceLocationName(v string) *DeleteSourceRequest {
	s.SourceLocationName = &v
	return s
}

func (s *DeleteSourceRequest) SetSourceName(v string) *DeleteSourceRequest {
	s.SourceName = &v
	return s
}

func (s *DeleteSourceRequest) SetSourceType(v string) *DeleteSourceRequest {
	s.SourceType = &v
	return s
}

type DeleteSourceResponseBody struct {
	// **Request ID**
	//
	// example:
	//
	// xxx-xxxx-xxxxx-xxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSourceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSourceResponseBody) SetRequestId(v string) *DeleteSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteSourceResponseBody) SetSuccess(v bool) *DeleteSourceResponseBody {
	s.Success = &v
	return s
}

type DeleteSourceResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSourceResponse) GoString() string {
	return s.String()
}

func (s *DeleteSourceResponse) SetHeaders(v map[string]*string) *DeleteSourceResponse {
	s.Headers = v
	return s
}

func (s *DeleteSourceResponse) SetStatusCode(v int32) *DeleteSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSourceResponse) SetBody(v *DeleteSourceResponseBody) *DeleteSourceResponse {
	s.Body = v
	return s
}

type DeleteSourceLocationRequest struct {
	// Specifies whether to use delete markers.
	//
	// example:
	//
	// true
	SoftDelete *bool `json:"SoftDelete,omitempty" xml:"SoftDelete,omitempty"`
	// The name of the source location.
	//
	// This parameter is required.
	//
	// example:
	//
	// MySourceLocation
	SourceLocationName *string `json:"SourceLocationName,omitempty" xml:"SourceLocationName,omitempty"`
}

func (s DeleteSourceLocationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSourceLocationRequest) GoString() string {
	return s.String()
}

func (s *DeleteSourceLocationRequest) SetSoftDelete(v bool) *DeleteSourceLocationRequest {
	s.SoftDelete = &v
	return s
}

func (s *DeleteSourceLocationRequest) SetSourceLocationName(v string) *DeleteSourceLocationRequest {
	s.SourceLocationName = &v
	return s
}

type DeleteSourceLocationResponseBody struct {
	// **Request ID**
	//
	// example:
	//
	// xxx-xxxx-xxxxx-xxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid value:
	//
	// 	- true: The request succeeded.
	//
	// 	- false: The request failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteSourceLocationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSourceLocationResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSourceLocationResponseBody) SetRequestId(v string) *DeleteSourceLocationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteSourceLocationResponseBody) SetSuccess(v bool) *DeleteSourceLocationResponseBody {
	s.Success = &v
	return s
}

type DeleteSourceLocationResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSourceLocationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSourceLocationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSourceLocationResponse) GoString() string {
	return s.String()
}

func (s *DeleteSourceLocationResponse) SetHeaders(v map[string]*string) *DeleteSourceLocationResponse {
	s.Headers = v
	return s
}

func (s *DeleteSourceLocationResponse) SetStatusCode(v int32) *DeleteSourceLocationResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSourceLocationResponse) SetBody(v *DeleteSourceLocationResponseBody) *DeleteSourceLocationResponse {
	s.Body = v
	return s
}

type DeleteTemplateRequest struct {
	// The IDs of the templates that you want to delete. Separate multiple IDs with commas (,).
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****,****20b48fb04483915d4f2cd8ac****
	TemplateIds *string `json:"TemplateIds,omitempty" xml:"TemplateIds,omitempty"`
}

func (s DeleteTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteTemplateRequest) SetTemplateIds(v string) *DeleteTemplateRequest {
	s.TemplateIds = &v
	return s
}

type DeleteTemplateResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTemplateResponseBody) SetRequestId(v string) *DeleteTemplateResponseBody {
	s.RequestId = &v
	return s
}

type DeleteTemplateResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteTemplateResponse) SetHeaders(v map[string]*string) *DeleteTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteTemplateResponse) SetStatusCode(v int32) *DeleteTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteTemplateResponse) SetBody(v *DeleteTemplateResponseBody) *DeleteTemplateResponse {
	s.Body = v
	return s
}

type DeleteVodPackagingAssetRequest struct {
	// The name of the VOD packaging asset.
	//
	// example:
	//
	// 30min_movie
	AssetName *string `json:"AssetName,omitempty" xml:"AssetName,omitempty"`
}

func (s DeleteVodPackagingAssetRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVodPackagingAssetRequest) GoString() string {
	return s.String()
}

func (s *DeleteVodPackagingAssetRequest) SetAssetName(v string) *DeleteVodPackagingAssetRequest {
	s.AssetName = &v
	return s
}

type DeleteVodPackagingAssetResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteVodPackagingAssetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteVodPackagingAssetResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteVodPackagingAssetResponseBody) SetRequestId(v string) *DeleteVodPackagingAssetResponseBody {
	s.RequestId = &v
	return s
}

type DeleteVodPackagingAssetResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteVodPackagingAssetResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteVodPackagingAssetResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVodPackagingAssetResponse) GoString() string {
	return s.String()
}

func (s *DeleteVodPackagingAssetResponse) SetHeaders(v map[string]*string) *DeleteVodPackagingAssetResponse {
	s.Headers = v
	return s
}

func (s *DeleteVodPackagingAssetResponse) SetStatusCode(v int32) *DeleteVodPackagingAssetResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteVodPackagingAssetResponse) SetBody(v *DeleteVodPackagingAssetResponseBody) *DeleteVodPackagingAssetResponse {
	s.Body = v
	return s
}

type DeleteVodPackagingConfigurationRequest struct {
	// The name of the packaging configuration.
	//
	// example:
	//
	// hls_3s
	ConfigurationName *string `json:"ConfigurationName,omitempty" xml:"ConfigurationName,omitempty"`
}

func (s DeleteVodPackagingConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVodPackagingConfigurationRequest) GoString() string {
	return s.String()
}

func (s *DeleteVodPackagingConfigurationRequest) SetConfigurationName(v string) *DeleteVodPackagingConfigurationRequest {
	s.ConfigurationName = &v
	return s
}

type DeleteVodPackagingConfigurationResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteVodPackagingConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteVodPackagingConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteVodPackagingConfigurationResponseBody) SetRequestId(v string) *DeleteVodPackagingConfigurationResponseBody {
	s.RequestId = &v
	return s
}

type DeleteVodPackagingConfigurationResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteVodPackagingConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteVodPackagingConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVodPackagingConfigurationResponse) GoString() string {
	return s.String()
}

func (s *DeleteVodPackagingConfigurationResponse) SetHeaders(v map[string]*string) *DeleteVodPackagingConfigurationResponse {
	s.Headers = v
	return s
}

func (s *DeleteVodPackagingConfigurationResponse) SetStatusCode(v int32) *DeleteVodPackagingConfigurationResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteVodPackagingConfigurationResponse) SetBody(v *DeleteVodPackagingConfigurationResponseBody) *DeleteVodPackagingConfigurationResponse {
	s.Body = v
	return s
}

type DeleteVodPackagingGroupRequest struct {
	// The name of the packaging group.
	//
	// example:
	//
	// vod_hls
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s DeleteVodPackagingGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVodPackagingGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteVodPackagingGroupRequest) SetGroupName(v string) *DeleteVodPackagingGroupRequest {
	s.GroupName = &v
	return s
}

type DeleteVodPackagingGroupResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 13cbb83e-043c-4728-ac35-*****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteVodPackagingGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteVodPackagingGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteVodPackagingGroupResponseBody) SetRequestId(v string) *DeleteVodPackagingGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteVodPackagingGroupResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteVodPackagingGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteVodPackagingGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVodPackagingGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteVodPackagingGroupResponse) SetHeaders(v map[string]*string) *DeleteVodPackagingGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteVodPackagingGroupResponse) SetStatusCode(v int32) *DeleteVodPackagingGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteVodPackagingGroupResponse) SetBody(v *DeleteVodPackagingGroupResponseBody) *DeleteVodPackagingGroupResponse {
	s.Body = v
	return s
}

type DescribeAIAgentInstanceRequest struct {
	// The ID of the AI agent that you want to query.
	//
	// This parameter is required.
	//
	// example:
	//
	// 39f8e0bc005e4f309379701645f4****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeAIAgentInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAIAgentInstanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeAIAgentInstanceRequest) SetInstanceId(v string) *DescribeAIAgentInstanceRequest {
	s.InstanceId = &v
	return s
}

type DescribeAIAgentInstanceResponseBody struct {
	// The information about the AI agent.
	Instance *DescribeAIAgentInstanceResponseBodyInstance `json:"Instance,omitempty" xml:"Instance,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 7B117AF5-2A16-412C-B127-FA6175ED1AD0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAIAgentInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAIAgentInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAIAgentInstanceResponseBody) SetInstance(v *DescribeAIAgentInstanceResponseBodyInstance) *DescribeAIAgentInstanceResponseBody {
	s.Instance = v
	return s
}

func (s *DescribeAIAgentInstanceResponseBody) SetRequestId(v string) *DescribeAIAgentInstanceResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAIAgentInstanceResponseBodyInstance struct {
	AgentConfig *AIAgentConfig `json:"AgentConfig,omitempty" xml:"AgentConfig,omitempty"`
	// The URL of the call log file.
	//
	// example:
	//
	// https://example.com/call_logs/12345
	CallLogUrl *string `json:"CallLogUrl,omitempty" xml:"CallLogUrl,omitempty"`
	// The runtime configurations of the AI agent.
	//
	// example:
	//
	// {"VoiceChat":{"AgentUserId":"voice_agent_001","ChannelId":"voice_channel_001","AuthToken":"your_voice_chat_auth_token"}}
	RuntimeConfig *AIAgentRuntimeConfig `json:"RuntimeConfig,omitempty" xml:"RuntimeConfig,omitempty"`
	SessionId     *string               `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// The state of the AI agent. Valid values: Finished and Executing.
	//
	// example:
	//
	// Finished
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// Deprecated
	//
	// The template configurations of the AI agent.
	//
	// example:
	//
	// {"VoiceChat": {"AppId": "your_voice_chat_app_id"}}
	TemplateConfig *AIAgentTemplateConfig `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// The custom information.
	//
	// example:
	//
	// {"Email":"johndoe@example.com","Preferences":{"Language":"en"}}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s DescribeAIAgentInstanceResponseBodyInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeAIAgentInstanceResponseBodyInstance) GoString() string {
	return s.String()
}

func (s *DescribeAIAgentInstanceResponseBodyInstance) SetAgentConfig(v *AIAgentConfig) *DescribeAIAgentInstanceResponseBodyInstance {
	s.AgentConfig = v
	return s
}

func (s *DescribeAIAgentInstanceResponseBodyInstance) SetCallLogUrl(v string) *DescribeAIAgentInstanceResponseBodyInstance {
	s.CallLogUrl = &v
	return s
}

func (s *DescribeAIAgentInstanceResponseBodyInstance) SetRuntimeConfig(v *AIAgentRuntimeConfig) *DescribeAIAgentInstanceResponseBodyInstance {
	s.RuntimeConfig = v
	return s
}

func (s *DescribeAIAgentInstanceResponseBodyInstance) SetSessionId(v string) *DescribeAIAgentInstanceResponseBodyInstance {
	s.SessionId = &v
	return s
}

func (s *DescribeAIAgentInstanceResponseBodyInstance) SetStatus(v string) *DescribeAIAgentInstanceResponseBodyInstance {
	s.Status = &v
	return s
}

func (s *DescribeAIAgentInstanceResponseBodyInstance) SetTemplateConfig(v *AIAgentTemplateConfig) *DescribeAIAgentInstanceResponseBodyInstance {
	s.TemplateConfig = v
	return s
}

func (s *DescribeAIAgentInstanceResponseBodyInstance) SetUserData(v string) *DescribeAIAgentInstanceResponseBodyInstance {
	s.UserData = &v
	return s
}

type DescribeAIAgentInstanceResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAIAgentInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAIAgentInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAIAgentInstanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeAIAgentInstanceResponse) SetHeaders(v map[string]*string) *DescribeAIAgentInstanceResponse {
	s.Headers = v
	return s
}

func (s *DescribeAIAgentInstanceResponse) SetStatusCode(v int32) *DescribeAIAgentInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAIAgentInstanceResponse) SetBody(v *DescribeAIAgentInstanceResponseBody) *DescribeAIAgentInstanceResponse {
	s.Body = v
	return s
}

type DescribeMeterImsEditUsageRequest struct {
	// The end of the time range to query. The value is a 10-digit timestamp.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1656995036
	EndTs *int64 `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	// The time granularity of the query. Valid values: 3600 (hour) and 86400 (day).
	//
	// This parameter is required.
	//
	// example:
	//
	// 86400
	Interval *int64 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// This parameter does not take effect. By default, the usage data of all regions is returned.
	//
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The beginning of the time range to query. The value is a 10-digit timestamp.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1654403036
	StartTs *int64 `json:"StartTs,omitempty" xml:"StartTs,omitempty"`
}

func (s DescribeMeterImsEditUsageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsEditUsageRequest) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsEditUsageRequest) SetEndTs(v int64) *DescribeMeterImsEditUsageRequest {
	s.EndTs = &v
	return s
}

func (s *DescribeMeterImsEditUsageRequest) SetInterval(v int64) *DescribeMeterImsEditUsageRequest {
	s.Interval = &v
	return s
}

func (s *DescribeMeterImsEditUsageRequest) SetRegion(v string) *DescribeMeterImsEditUsageRequest {
	s.Region = &v
	return s
}

func (s *DescribeMeterImsEditUsageRequest) SetStartTs(v int64) *DescribeMeterImsEditUsageRequest {
	s.StartTs = &v
	return s
}

type DescribeMeterImsEditUsageResponseBody struct {
	// The usage statistics of IMS on VOD editing.
	Data []*DescribeMeterImsEditUsageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 7F3AE2C6-5CC6-5712-BAC5-5A735A157687
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeMeterImsEditUsageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsEditUsageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsEditUsageResponseBody) SetData(v []*DescribeMeterImsEditUsageResponseBodyData) *DescribeMeterImsEditUsageResponseBody {
	s.Data = v
	return s
}

func (s *DescribeMeterImsEditUsageResponseBody) SetRequestId(v string) *DescribeMeterImsEditUsageResponseBody {
	s.RequestId = &v
	return s
}

type DescribeMeterImsEditUsageResponseBodyData struct {
	// The usage duration, in minutes.
	//
	// example:
	//
	// 1.23
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The video profile.
	//
	// example:
	//
	// 1080P
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// The beginning time of usage. The value is a 10-digit timestamp.
	//
	// example:
	//
	// 1656950400
	Time *int64 `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s DescribeMeterImsEditUsageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsEditUsageResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsEditUsageResponseBodyData) SetDuration(v int64) *DescribeMeterImsEditUsageResponseBodyData {
	s.Duration = &v
	return s
}

func (s *DescribeMeterImsEditUsageResponseBodyData) SetProfile(v string) *DescribeMeterImsEditUsageResponseBodyData {
	s.Profile = &v
	return s
}

func (s *DescribeMeterImsEditUsageResponseBodyData) SetTime(v int64) *DescribeMeterImsEditUsageResponseBodyData {
	s.Time = &v
	return s
}

type DescribeMeterImsEditUsageResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMeterImsEditUsageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMeterImsEditUsageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsEditUsageResponse) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsEditUsageResponse) SetHeaders(v map[string]*string) *DescribeMeterImsEditUsageResponse {
	s.Headers = v
	return s
}

func (s *DescribeMeterImsEditUsageResponse) SetStatusCode(v int32) *DescribeMeterImsEditUsageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMeterImsEditUsageResponse) SetBody(v *DescribeMeterImsEditUsageResponseBody) *DescribeMeterImsEditUsageResponse {
	s.Body = v
	return s
}

type DescribeMeterImsMediaConvertUHDUsageRequest struct {
	// The end of the time range to query. The value is a 10-digit timestamp.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1656995036
	EndTs *int64 `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	// The time granularity of the query. Valid values: 3600 (hour) and 86400 (day).
	//
	// This parameter is required.
	//
	// example:
	//
	// 3600
	Interval *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// This parameter does not take effect. By default, the usage data of all regions is returned.
	//
	// example:
	//
	// cn-shanghai
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The beginning of the time range to query. The value is a 10-digit timestamp.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1654403036
	StartTs *int64 `json:"StartTs,omitempty" xml:"StartTs,omitempty"`
}

func (s DescribeMeterImsMediaConvertUHDUsageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsMediaConvertUHDUsageRequest) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsMediaConvertUHDUsageRequest) SetEndTs(v int64) *DescribeMeterImsMediaConvertUHDUsageRequest {
	s.EndTs = &v
	return s
}

func (s *DescribeMeterImsMediaConvertUHDUsageRequest) SetInterval(v string) *DescribeMeterImsMediaConvertUHDUsageRequest {
	s.Interval = &v
	return s
}

func (s *DescribeMeterImsMediaConvertUHDUsageRequest) SetRegionId(v string) *DescribeMeterImsMediaConvertUHDUsageRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeMeterImsMediaConvertUHDUsageRequest) SetStartTs(v int64) *DescribeMeterImsMediaConvertUHDUsageRequest {
	s.StartTs = &v
	return s
}

type DescribeMeterImsMediaConvertUHDUsageResponseBody struct {
	// The usage statistics of IMS on UHD transcoding of MPS.
	Data []*DescribeMeterImsMediaConvertUHDUsageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// BEA98A0C-7870-15FE-B96F-8880BB600A2C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeMeterImsMediaConvertUHDUsageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsMediaConvertUHDUsageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsMediaConvertUHDUsageResponseBody) SetData(v []*DescribeMeterImsMediaConvertUHDUsageResponseBodyData) *DescribeMeterImsMediaConvertUHDUsageResponseBody {
	s.Data = v
	return s
}

func (s *DescribeMeterImsMediaConvertUHDUsageResponseBody) SetRequestId(v string) *DescribeMeterImsMediaConvertUHDUsageResponseBody {
	s.RequestId = &v
	return s
}

type DescribeMeterImsMediaConvertUHDUsageResponseBodyData struct {
	// The usage duration, in minutes.
	//
	// example:
	//
	// 308028
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The transcoding specifications.
	//
	// example:
	//
	// SuperResolution.Standard.1080P
	Specification *string `json:"Specification,omitempty" xml:"Specification,omitempty"`
	// The beginning time of usage. The value is a 10-digit timestamp.
	//
	// example:
	//
	// 1656950400
	Time *int64 `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s DescribeMeterImsMediaConvertUHDUsageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsMediaConvertUHDUsageResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsMediaConvertUHDUsageResponseBodyData) SetDuration(v int64) *DescribeMeterImsMediaConvertUHDUsageResponseBodyData {
	s.Duration = &v
	return s
}

func (s *DescribeMeterImsMediaConvertUHDUsageResponseBodyData) SetSpecification(v string) *DescribeMeterImsMediaConvertUHDUsageResponseBodyData {
	s.Specification = &v
	return s
}

func (s *DescribeMeterImsMediaConvertUHDUsageResponseBodyData) SetTime(v int64) *DescribeMeterImsMediaConvertUHDUsageResponseBodyData {
	s.Time = &v
	return s
}

type DescribeMeterImsMediaConvertUHDUsageResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMeterImsMediaConvertUHDUsageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMeterImsMediaConvertUHDUsageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsMediaConvertUHDUsageResponse) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsMediaConvertUHDUsageResponse) SetHeaders(v map[string]*string) *DescribeMeterImsMediaConvertUHDUsageResponse {
	s.Headers = v
	return s
}

func (s *DescribeMeterImsMediaConvertUHDUsageResponse) SetStatusCode(v int32) *DescribeMeterImsMediaConvertUHDUsageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMeterImsMediaConvertUHDUsageResponse) SetBody(v *DescribeMeterImsMediaConvertUHDUsageResponseBody) *DescribeMeterImsMediaConvertUHDUsageResponse {
	s.Body = v
	return s
}

type DescribeMeterImsMediaConvertUsageRequest struct {
	// The end of the time range to query. The value is a 10-digit timestamp. The maximum query range is 31 days. The duration between StartTs and EndTs cannot exceed 31 days.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1656995036
	EndTs *int64 `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	// The time granularity of the query. Valid values: 3600 (hour) and 86400 (day).
	//
	// This parameter is required.
	//
	// example:
	//
	// 86400
	Interval *int64 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// This parameter does not take effect. By default, the usage data of all regions is returned.
	//
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The beginning of the time range to query. The value is a 10-digit timestamp. You can query data within the last 90 days.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1654403036
	StartTs *int64 `json:"StartTs,omitempty" xml:"StartTs,omitempty"`
}

func (s DescribeMeterImsMediaConvertUsageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsMediaConvertUsageRequest) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsMediaConvertUsageRequest) SetEndTs(v int64) *DescribeMeterImsMediaConvertUsageRequest {
	s.EndTs = &v
	return s
}

func (s *DescribeMeterImsMediaConvertUsageRequest) SetInterval(v int64) *DescribeMeterImsMediaConvertUsageRequest {
	s.Interval = &v
	return s
}

func (s *DescribeMeterImsMediaConvertUsageRequest) SetRegion(v string) *DescribeMeterImsMediaConvertUsageRequest {
	s.Region = &v
	return s
}

func (s *DescribeMeterImsMediaConvertUsageRequest) SetStartTs(v int64) *DescribeMeterImsMediaConvertUsageRequest {
	s.StartTs = &v
	return s
}

type DescribeMeterImsMediaConvertUsageResponseBody struct {
	// The usage statistics of IMS on VOD transcoding.
	Data []*DescribeMeterImsMediaConvertUsageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// FBBB5210-2B78-58FB-A6FE-9DD887BB2C61
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeMeterImsMediaConvertUsageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsMediaConvertUsageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsMediaConvertUsageResponseBody) SetData(v []*DescribeMeterImsMediaConvertUsageResponseBodyData) *DescribeMeterImsMediaConvertUsageResponseBody {
	s.Data = v
	return s
}

func (s *DescribeMeterImsMediaConvertUsageResponseBody) SetRequestId(v string) *DescribeMeterImsMediaConvertUsageResponseBody {
	s.RequestId = &v
	return s
}

type DescribeMeterImsMediaConvertUsageResponseBodyData struct {
	// The usage duration, in minutes.
	//
	// example:
	//
	// 20
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The transcoding specifications.
	//
	// example:
	//
	// H264.HD
	Specification *string `json:"Specification,omitempty" xml:"Specification,omitempty"`
	// The beginning time of usage. The value is a 10-digit timestamp.
	//
	// example:
	//
	// 1656950400
	Time *int64 `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s DescribeMeterImsMediaConvertUsageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsMediaConvertUsageResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsMediaConvertUsageResponseBodyData) SetDuration(v int64) *DescribeMeterImsMediaConvertUsageResponseBodyData {
	s.Duration = &v
	return s
}

func (s *DescribeMeterImsMediaConvertUsageResponseBodyData) SetSpecification(v string) *DescribeMeterImsMediaConvertUsageResponseBodyData {
	s.Specification = &v
	return s
}

func (s *DescribeMeterImsMediaConvertUsageResponseBodyData) SetTime(v int64) *DescribeMeterImsMediaConvertUsageResponseBodyData {
	s.Time = &v
	return s
}

type DescribeMeterImsMediaConvertUsageResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMeterImsMediaConvertUsageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMeterImsMediaConvertUsageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsMediaConvertUsageResponse) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsMediaConvertUsageResponse) SetHeaders(v map[string]*string) *DescribeMeterImsMediaConvertUsageResponse {
	s.Headers = v
	return s
}

func (s *DescribeMeterImsMediaConvertUsageResponse) SetStatusCode(v int32) *DescribeMeterImsMediaConvertUsageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMeterImsMediaConvertUsageResponse) SetBody(v *DescribeMeterImsMediaConvertUsageResponseBody) *DescribeMeterImsMediaConvertUsageResponse {
	s.Body = v
	return s
}

type DescribeMeterImsMpsAiUsageRequest struct {
	// The end of the time range to query. The value is a 10-digit timestamp. The maximum query range is 31 days. The duration between StartTs and EndTs cannot exceed 31 days.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1656995036
	EndTs *int64 `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	// The time granularity of the query. Valid values: 3600 (hour) and 86400 (day).
	//
	// This parameter is required.
	//
	// example:
	//
	// 86400
	Interval *int64 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// This parameter does not take effect. By default, the usage data of all regions is returned.
	//
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The beginning of the time range to query. The value is a 10-digit timestamp. You can query data within the last 90 days.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1654403036
	StartTs *int64 `json:"StartTs,omitempty" xml:"StartTs,omitempty"`
}

func (s DescribeMeterImsMpsAiUsageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsMpsAiUsageRequest) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsMpsAiUsageRequest) SetEndTs(v int64) *DescribeMeterImsMpsAiUsageRequest {
	s.EndTs = &v
	return s
}

func (s *DescribeMeterImsMpsAiUsageRequest) SetInterval(v int64) *DescribeMeterImsMpsAiUsageRequest {
	s.Interval = &v
	return s
}

func (s *DescribeMeterImsMpsAiUsageRequest) SetRegion(v string) *DescribeMeterImsMpsAiUsageRequest {
	s.Region = &v
	return s
}

func (s *DescribeMeterImsMpsAiUsageRequest) SetStartTs(v int64) *DescribeMeterImsMpsAiUsageRequest {
	s.StartTs = &v
	return s
}

type DescribeMeterImsMpsAiUsageResponseBody struct {
	// The usage statistics of IMS on AI processing of MPS.
	Data []*DescribeMeterImsMpsAiUsageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 0622C702-41BE-467E-AF2E-883D4517962E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeMeterImsMpsAiUsageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsMpsAiUsageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsMpsAiUsageResponseBody) SetData(v []*DescribeMeterImsMpsAiUsageResponseBodyData) *DescribeMeterImsMpsAiUsageResponseBody {
	s.Data = v
	return s
}

func (s *DescribeMeterImsMpsAiUsageResponseBody) SetRequestId(v string) *DescribeMeterImsMpsAiUsageResponseBody {
	s.RequestId = &v
	return s
}

type DescribeMeterImsMpsAiUsageResponseBodyData struct {
	// The usage duration, in minutes.
	//
	// example:
	//
	// 644
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The beginning time of usage. The value is a 10-digit timestamp.
	//
	// example:
	//
	// 1656950400
	Time *int64 `json:"Time,omitempty" xml:"Time,omitempty"`
	// The AI type. Valid values:
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeMeterImsMpsAiUsageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsMpsAiUsageResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsMpsAiUsageResponseBodyData) SetDuration(v int64) *DescribeMeterImsMpsAiUsageResponseBodyData {
	s.Duration = &v
	return s
}

func (s *DescribeMeterImsMpsAiUsageResponseBodyData) SetTime(v int64) *DescribeMeterImsMpsAiUsageResponseBodyData {
	s.Time = &v
	return s
}

func (s *DescribeMeterImsMpsAiUsageResponseBodyData) SetType(v string) *DescribeMeterImsMpsAiUsageResponseBodyData {
	s.Type = &v
	return s
}

type DescribeMeterImsMpsAiUsageResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMeterImsMpsAiUsageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMeterImsMpsAiUsageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsMpsAiUsageResponse) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsMpsAiUsageResponse) SetHeaders(v map[string]*string) *DescribeMeterImsMpsAiUsageResponse {
	s.Headers = v
	return s
}

func (s *DescribeMeterImsMpsAiUsageResponse) SetStatusCode(v int32) *DescribeMeterImsMpsAiUsageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMeterImsMpsAiUsageResponse) SetBody(v *DescribeMeterImsMpsAiUsageResponseBody) *DescribeMeterImsMpsAiUsageResponse {
	s.Body = v
	return s
}

type DescribeMeterImsSummaryRequest struct {
	// The end of the time range to query. The value is a 10-digit timestamp.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1656995036
	EndTs *int64 `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	// This parameter does not take effect. By default, the usage data of all regions is returned.
	//
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The beginning of the time range to query. The value is a 10-digit timestamp.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1654403036
	StartTs *int64 `json:"StartTs,omitempty" xml:"StartTs,omitempty"`
}

func (s DescribeMeterImsSummaryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsSummaryRequest) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsSummaryRequest) SetEndTs(v int64) *DescribeMeterImsSummaryRequest {
	s.EndTs = &v
	return s
}

func (s *DescribeMeterImsSummaryRequest) SetRegion(v string) *DescribeMeterImsSummaryRequest {
	s.Region = &v
	return s
}

func (s *DescribeMeterImsSummaryRequest) SetStartTs(v int64) *DescribeMeterImsSummaryRequest {
	s.StartTs = &v
	return s
}

type DescribeMeterImsSummaryResponseBody struct {
	// The usage statistics of IMS.
	Data []*DescribeMeterImsSummaryResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// BEA98A0C-7870-15FE-B96F-8880BB600A2C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeMeterImsSummaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsSummaryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsSummaryResponseBody) SetData(v []*DescribeMeterImsSummaryResponseBodyData) *DescribeMeterImsSummaryResponseBody {
	s.Data = v
	return s
}

func (s *DescribeMeterImsSummaryResponseBody) SetRequestId(v string) *DescribeMeterImsSummaryResponseBody {
	s.RequestId = &v
	return s
}

type DescribeMeterImsSummaryResponseBodyData struct {
	// The duration of video editing.
	//
	// example:
	//
	// 8722
	EditingDuration *string `json:"EditingDuration,omitempty" xml:"EditingDuration,omitempty"`
	// The duration of live editing.
	//
	// example:
	//
	// 2000
	LiveEditDuration *string `json:"LiveEditDuration,omitempty" xml:"LiveEditDuration,omitempty"`
	// The duration of live stream recording.
	//
	// example:
	//
	// 100
	LiveRecordDuration *string `json:"LiveRecordDuration,omitempty" xml:"LiveRecordDuration,omitempty"`
	// The number of live stream snapshots.
	//
	// example:
	//
	// 100
	LiveSnapshotCount *string `json:"LiveSnapshotCount,omitempty" xml:"LiveSnapshotCount,omitempty"`
	// The duration of live stream transcoding.
	//
	// example:
	//
	// 12356
	LiveTranscodeDuration *int64 `json:"LiveTranscodeDuration,omitempty" xml:"LiveTranscodeDuration,omitempty"`
	// The duration of AI processing.
	//
	// example:
	//
	// 0
	MpsAiDuration *int64 `json:"MpsAiDuration,omitempty" xml:"MpsAiDuration,omitempty"`
	// The duration of video-on-demand (VOD) transcoding.
	//
	// example:
	//
	// 17337
	MpsTranscodeDuration *int64 `json:"MpsTranscodeDuration,omitempty" xml:"MpsTranscodeDuration,omitempty"`
	// The duration of audio and video enhancement.
	//
	// example:
	//
	// 300
	MpsTranscodeUHDDuration *int64 `json:"MpsTranscodeUHDDuration,omitempty" xml:"MpsTranscodeUHDDuration,omitempty"`
}

func (s DescribeMeterImsSummaryResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsSummaryResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsSummaryResponseBodyData) SetEditingDuration(v string) *DescribeMeterImsSummaryResponseBodyData {
	s.EditingDuration = &v
	return s
}

func (s *DescribeMeterImsSummaryResponseBodyData) SetLiveEditDuration(v string) *DescribeMeterImsSummaryResponseBodyData {
	s.LiveEditDuration = &v
	return s
}

func (s *DescribeMeterImsSummaryResponseBodyData) SetLiveRecordDuration(v string) *DescribeMeterImsSummaryResponseBodyData {
	s.LiveRecordDuration = &v
	return s
}

func (s *DescribeMeterImsSummaryResponseBodyData) SetLiveSnapshotCount(v string) *DescribeMeterImsSummaryResponseBodyData {
	s.LiveSnapshotCount = &v
	return s
}

func (s *DescribeMeterImsSummaryResponseBodyData) SetLiveTranscodeDuration(v int64) *DescribeMeterImsSummaryResponseBodyData {
	s.LiveTranscodeDuration = &v
	return s
}

func (s *DescribeMeterImsSummaryResponseBodyData) SetMpsAiDuration(v int64) *DescribeMeterImsSummaryResponseBodyData {
	s.MpsAiDuration = &v
	return s
}

func (s *DescribeMeterImsSummaryResponseBodyData) SetMpsTranscodeDuration(v int64) *DescribeMeterImsSummaryResponseBodyData {
	s.MpsTranscodeDuration = &v
	return s
}

func (s *DescribeMeterImsSummaryResponseBodyData) SetMpsTranscodeUHDDuration(v int64) *DescribeMeterImsSummaryResponseBodyData {
	s.MpsTranscodeUHDDuration = &v
	return s
}

type DescribeMeterImsSummaryResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMeterImsSummaryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMeterImsSummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsSummaryResponse) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsSummaryResponse) SetHeaders(v map[string]*string) *DescribeMeterImsSummaryResponse {
	s.Headers = v
	return s
}

func (s *DescribeMeterImsSummaryResponse) SetStatusCode(v int32) *DescribeMeterImsSummaryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMeterImsSummaryResponse) SetBody(v *DescribeMeterImsSummaryResponseBody) *DescribeMeterImsSummaryResponse {
	s.Body = v
	return s
}

type DescribeNotifyConfigRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 39f8e0bc005e4f309379701645f4****
	AIAgentId *string `json:"AIAgentId,omitempty" xml:"AIAgentId,omitempty"`
}

func (s DescribeNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeNotifyConfigRequest) SetAIAgentId(v string) *DescribeNotifyConfigRequest {
	s.AIAgentId = &v
	return s
}

type DescribeNotifyConfigResponseBody struct {
	AudioOssPath *string `json:"AudioOssPath,omitempty" xml:"AudioOssPath,omitempty"`
	// example:
	//
	// http://customer.com/callback
	CallbackUrl          *string `json:"CallbackUrl,omitempty" xml:"CallbackUrl,omitempty"`
	EnableAudioRecording *bool   `json:"EnableAudioRecording,omitempty" xml:"EnableAudioRecording,omitempty"`
	// example:
	//
	// true
	EnableNotify *bool `json:"EnableNotify,omitempty" xml:"EnableNotify,omitempty"`
	// The event types. If this parameter is empty, all event types are selected.
	//
	// 	- agent_start: The agent is started.
	//
	// 	- agent_stop: The agent is stopped.
	//
	// 	- error: An error occurred.
	//
	// example:
	//
	// agent_start,agent_stop,error
	EventTypes *string `json:"EventTypes,omitempty" xml:"EventTypes,omitempty"`
	// example:
	//
	// 7B117AF5-2A16-412C-B127-FA6175ED1AD0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// eyJhcHBpZCI6ICIxMjM0MTIzNxxxxx
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
}

func (s DescribeNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNotifyConfigResponseBody) SetAudioOssPath(v string) *DescribeNotifyConfigResponseBody {
	s.AudioOssPath = &v
	return s
}

func (s *DescribeNotifyConfigResponseBody) SetCallbackUrl(v string) *DescribeNotifyConfigResponseBody {
	s.CallbackUrl = &v
	return s
}

func (s *DescribeNotifyConfigResponseBody) SetEnableAudioRecording(v bool) *DescribeNotifyConfigResponseBody {
	s.EnableAudioRecording = &v
	return s
}

func (s *DescribeNotifyConfigResponseBody) SetEnableNotify(v bool) *DescribeNotifyConfigResponseBody {
	s.EnableNotify = &v
	return s
}

func (s *DescribeNotifyConfigResponseBody) SetEventTypes(v string) *DescribeNotifyConfigResponseBody {
	s.EventTypes = &v
	return s
}

func (s *DescribeNotifyConfigResponseBody) SetRequestId(v string) *DescribeNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNotifyConfigResponseBody) SetToken(v string) *DescribeNotifyConfigResponseBody {
	s.Token = &v
	return s
}

type DescribeNotifyConfigResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeNotifyConfigResponse) SetHeaders(v map[string]*string) *DescribeNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeNotifyConfigResponse) SetStatusCode(v int32) *DescribeNotifyConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNotifyConfigResponse) SetBody(v *DescribeNotifyConfigResponseBody) *DescribeNotifyConfigResponse {
	s.Body = v
	return s
}

type DescribePlayListRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1676170500011
	BeginTs *string `json:"BeginTs,omitempty" xml:"BeginTs,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1682474405173
	EndTs *string `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	// example:
	//
	// FirstFrameDuration
	OrderName *string `json:"OrderName,omitempty" xml:"OrderName,omitempty"`
	// example:
	//
	// DESC
	OrderType *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// vod
	PlayType *string `json:"PlayType,omitempty" xml:"PlayType,omitempty"`
	// example:
	//
	// complete
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 0bc5e70516766285805381012d271e
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribePlayListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayListRequest) GoString() string {
	return s.String()
}

func (s *DescribePlayListRequest) SetBeginTs(v string) *DescribePlayListRequest {
	s.BeginTs = &v
	return s
}

func (s *DescribePlayListRequest) SetEndTs(v string) *DescribePlayListRequest {
	s.EndTs = &v
	return s
}

func (s *DescribePlayListRequest) SetOrderName(v string) *DescribePlayListRequest {
	s.OrderName = &v
	return s
}

func (s *DescribePlayListRequest) SetOrderType(v string) *DescribePlayListRequest {
	s.OrderType = &v
	return s
}

func (s *DescribePlayListRequest) SetPageNo(v int32) *DescribePlayListRequest {
	s.PageNo = &v
	return s
}

func (s *DescribePlayListRequest) SetPageSize(v int32) *DescribePlayListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePlayListRequest) SetPlayType(v string) *DescribePlayListRequest {
	s.PlayType = &v
	return s
}

func (s *DescribePlayListRequest) SetStatus(v string) *DescribePlayListRequest {
	s.Status = &v
	return s
}

func (s *DescribePlayListRequest) SetTraceId(v string) *DescribePlayListRequest {
	s.TraceId = &v
	return s
}

type DescribePlayListResponseBody struct {
	// example:
	//
	// 1
	PageNum *int64 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// example:
	//
	// 10
	PageSize *int64                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PlayList []*DescribePlayListResponseBodyPlayList `json:"PlayList,omitempty" xml:"PlayList,omitempty" type:"Repeated"`
	// Id
	//
	// example:
	//
	// B960580D-26FA-5547-8AFC-3CDC812DBF27
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 49
	TotalNum *int64 `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
}

func (s DescribePlayListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePlayListResponseBody) SetPageNum(v int64) *DescribePlayListResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribePlayListResponseBody) SetPageSize(v int64) *DescribePlayListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribePlayListResponseBody) SetPlayList(v []*DescribePlayListResponseBodyPlayList) *DescribePlayListResponseBody {
	s.PlayList = v
	return s
}

func (s *DescribePlayListResponseBody) SetRequestId(v string) *DescribePlayListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePlayListResponseBody) SetTotalNum(v int64) *DescribePlayListResponseBody {
	s.TotalNum = &v
	return s
}

type DescribePlayListResponseBodyPlayList struct {
	// example:
	//
	// 200
	FirstFrameDuration *string `json:"FirstFrameDuration,omitempty" xml:"FirstFrameDuration,omitempty"`
	// example:
	//
	// 1000
	PlayDuration *string `json:"PlayDuration,omitempty" xml:"PlayDuration,omitempty"`
	// example:
	//
	// 1675922209572
	PlayTs *string `json:"PlayTs,omitempty" xml:"PlayTs,omitempty"`
	// example:
	//
	// vod
	PlayType *string `json:"PlayType,omitempty" xml:"PlayType,omitempty"`
	// example:
	//
	// 91488be2-8381-40c9-8494-e8afe22c4a2d
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// complete
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 20
	StuckDuration *string `json:"StuckDuration,omitempty" xml:"StuckDuration,omitempty"`
	// example:
	//
	// 0b736abf16724820210842673d9543
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
	// example:
	//
	// 2000
	VideoDuration *string `json:"VideoDuration,omitempty" xml:"VideoDuration,omitempty"`
	// example:
	//
	// 250314203f0171eebff17035d0b20102
	VideoId *string `json:"VideoId,omitempty" xml:"VideoId,omitempty"`
}

func (s DescribePlayListResponseBodyPlayList) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayListResponseBodyPlayList) GoString() string {
	return s.String()
}

func (s *DescribePlayListResponseBodyPlayList) SetFirstFrameDuration(v string) *DescribePlayListResponseBodyPlayList {
	s.FirstFrameDuration = &v
	return s
}

func (s *DescribePlayListResponseBodyPlayList) SetPlayDuration(v string) *DescribePlayListResponseBodyPlayList {
	s.PlayDuration = &v
	return s
}

func (s *DescribePlayListResponseBodyPlayList) SetPlayTs(v string) *DescribePlayListResponseBodyPlayList {
	s.PlayTs = &v
	return s
}

func (s *DescribePlayListResponseBodyPlayList) SetPlayType(v string) *DescribePlayListResponseBodyPlayList {
	s.PlayType = &v
	return s
}

func (s *DescribePlayListResponseBodyPlayList) SetSessionId(v string) *DescribePlayListResponseBodyPlayList {
	s.SessionId = &v
	return s
}

func (s *DescribePlayListResponseBodyPlayList) SetStatus(v string) *DescribePlayListResponseBodyPlayList {
	s.Status = &v
	return s
}

func (s *DescribePlayListResponseBodyPlayList) SetStuckDuration(v string) *DescribePlayListResponseBodyPlayList {
	s.StuckDuration = &v
	return s
}

func (s *DescribePlayListResponseBodyPlayList) SetTraceId(v string) *DescribePlayListResponseBodyPlayList {
	s.TraceId = &v
	return s
}

func (s *DescribePlayListResponseBodyPlayList) SetVideoDuration(v string) *DescribePlayListResponseBodyPlayList {
	s.VideoDuration = &v
	return s
}

func (s *DescribePlayListResponseBodyPlayList) SetVideoId(v string) *DescribePlayListResponseBodyPlayList {
	s.VideoId = &v
	return s
}

type DescribePlayListResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePlayListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePlayListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayListResponse) GoString() string {
	return s.String()
}

func (s *DescribePlayListResponse) SetHeaders(v map[string]*string) *DescribePlayListResponse {
	s.Headers = v
	return s
}

func (s *DescribePlayListResponse) SetStatusCode(v int32) *DescribePlayListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePlayListResponse) SetBody(v *DescribePlayListResponseBody) *DescribePlayListResponse {
	s.Body = v
	return s
}

type DescribeRtcRobotInstanceRequest struct {
	// example:
	//
	// 727dc0e296014bb58670940a3da95592
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeRtcRobotInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRtcRobotInstanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeRtcRobotInstanceRequest) SetInstanceId(v string) *DescribeRtcRobotInstanceRequest {
	s.InstanceId = &v
	return s
}

type DescribeRtcRobotInstanceResponseBody struct {
	// example:
	//
	// **********
	AuthToken *string `json:"AuthToken,omitempty" xml:"AuthToken,omitempty"`
	// example:
	//
	// testId
	ChannelId *string                                     `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	Config    *DescribeRtcRobotInstanceResponseBodyConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Struct"`
	// Id of the request
	//
	// example:
	//
	// 20B3A1B6-4BD2-5DE6-BCBC-098C9B4F4E91
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// Executing
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// {}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	// example:
	//
	// my-robot
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s DescribeRtcRobotInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRtcRobotInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRtcRobotInstanceResponseBody) SetAuthToken(v string) *DescribeRtcRobotInstanceResponseBody {
	s.AuthToken = &v
	return s
}

func (s *DescribeRtcRobotInstanceResponseBody) SetChannelId(v string) *DescribeRtcRobotInstanceResponseBody {
	s.ChannelId = &v
	return s
}

func (s *DescribeRtcRobotInstanceResponseBody) SetConfig(v *DescribeRtcRobotInstanceResponseBodyConfig) *DescribeRtcRobotInstanceResponseBody {
	s.Config = v
	return s
}

func (s *DescribeRtcRobotInstanceResponseBody) SetRequestId(v string) *DescribeRtcRobotInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRtcRobotInstanceResponseBody) SetStatus(v string) *DescribeRtcRobotInstanceResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeRtcRobotInstanceResponseBody) SetUserData(v string) *DescribeRtcRobotInstanceResponseBody {
	s.UserData = &v
	return s
}

func (s *DescribeRtcRobotInstanceResponseBody) SetUserId(v string) *DescribeRtcRobotInstanceResponseBody {
	s.UserId = &v
	return s
}

type DescribeRtcRobotInstanceResponseBodyConfig struct {
	// example:
	//
	// true
	EnableVoiceInterrupt *bool   `json:"EnableVoiceInterrupt,omitempty" xml:"EnableVoiceInterrupt,omitempty"`
	Greeting             *string `json:"Greeting,omitempty" xml:"Greeting,omitempty"`
	// example:
	//
	// zhixiaoxia
	VoiceId *string `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
}

func (s DescribeRtcRobotInstanceResponseBodyConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeRtcRobotInstanceResponseBodyConfig) GoString() string {
	return s.String()
}

func (s *DescribeRtcRobotInstanceResponseBodyConfig) SetEnableVoiceInterrupt(v bool) *DescribeRtcRobotInstanceResponseBodyConfig {
	s.EnableVoiceInterrupt = &v
	return s
}

func (s *DescribeRtcRobotInstanceResponseBodyConfig) SetGreeting(v string) *DescribeRtcRobotInstanceResponseBodyConfig {
	s.Greeting = &v
	return s
}

func (s *DescribeRtcRobotInstanceResponseBodyConfig) SetVoiceId(v string) *DescribeRtcRobotInstanceResponseBodyConfig {
	s.VoiceId = &v
	return s
}

type DescribeRtcRobotInstanceResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRtcRobotInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRtcRobotInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRtcRobotInstanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeRtcRobotInstanceResponse) SetHeaders(v map[string]*string) *DescribeRtcRobotInstanceResponse {
	s.Headers = v
	return s
}

func (s *DescribeRtcRobotInstanceResponse) SetStatusCode(v int32) *DescribeRtcRobotInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRtcRobotInstanceResponse) SetBody(v *DescribeRtcRobotInstanceResponseBody) *DescribeRtcRobotInstanceResponse {
	s.Body = v
	return s
}

type DetectAudioForCustomizedVoiceJobRequest struct {
	// The sequence number of the recording file.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	AudioRecordId *int32 `json:"AudioRecordId,omitempty" xml:"AudioRecordId,omitempty"`
	// The URL of the recording file.
	//
	// > : The URL must be an Object Storage Service (OSS) URL within your Alibaba Cloud account. The OSS bucket must be in the same region in which IMS is activated.
	//
	// > : The audio file must be in the WAV or PCM format and must be a 16-bit mono audio file at 48000 Hz.
	//
	// This parameter is required.
	//
	// example:
	//
	// https://your-bucket.oss-cn-hangzhou.aliyuncs.com/record1.wav
	RecordUrl *string `json:"RecordUrl,omitempty" xml:"RecordUrl,omitempty"`
	// The voice ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// xiaozhuan
	VoiceId *string `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
}

func (s DetectAudioForCustomizedVoiceJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DetectAudioForCustomizedVoiceJobRequest) GoString() string {
	return s.String()
}

func (s *DetectAudioForCustomizedVoiceJobRequest) SetAudioRecordId(v int32) *DetectAudioForCustomizedVoiceJobRequest {
	s.AudioRecordId = &v
	return s
}

func (s *DetectAudioForCustomizedVoiceJobRequest) SetRecordUrl(v string) *DetectAudioForCustomizedVoiceJobRequest {
	s.RecordUrl = &v
	return s
}

func (s *DetectAudioForCustomizedVoiceJobRequest) SetVoiceId(v string) *DetectAudioForCustomizedVoiceJobRequest {
	s.VoiceId = &v
	return s
}

type DetectAudioForCustomizedVoiceJobResponseBody struct {
	// The data returned.
	Data *DetectAudioForCustomizedVoiceJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values: true false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DetectAudioForCustomizedVoiceJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DetectAudioForCustomizedVoiceJobResponseBody) GoString() string {
	return s.String()
}

func (s *DetectAudioForCustomizedVoiceJobResponseBody) SetData(v *DetectAudioForCustomizedVoiceJobResponseBodyData) *DetectAudioForCustomizedVoiceJobResponseBody {
	s.Data = v
	return s
}

func (s *DetectAudioForCustomizedVoiceJobResponseBody) SetRequestId(v string) *DetectAudioForCustomizedVoiceJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DetectAudioForCustomizedVoiceJobResponseBody) SetSuccess(v bool) *DetectAudioForCustomizedVoiceJobResponseBody {
	s.Success = &v
	return s
}

type DetectAudioForCustomizedVoiceJobResponseBodyData struct {
	// Indicates whether the audio file passes the check. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// false
	Pass *bool `json:"Pass,omitempty" xml:"Pass,omitempty"`
	// The reason returned if the audio file failed to pass the check.
	Reason *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
}

func (s DetectAudioForCustomizedVoiceJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DetectAudioForCustomizedVoiceJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *DetectAudioForCustomizedVoiceJobResponseBodyData) SetPass(v bool) *DetectAudioForCustomizedVoiceJobResponseBodyData {
	s.Pass = &v
	return s
}

func (s *DetectAudioForCustomizedVoiceJobResponseBodyData) SetReason(v string) *DetectAudioForCustomizedVoiceJobResponseBodyData {
	s.Reason = &v
	return s
}

type DetectAudioForCustomizedVoiceJobResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DetectAudioForCustomizedVoiceJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DetectAudioForCustomizedVoiceJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DetectAudioForCustomizedVoiceJobResponse) GoString() string {
	return s.String()
}

func (s *DetectAudioForCustomizedVoiceJobResponse) SetHeaders(v map[string]*string) *DetectAudioForCustomizedVoiceJobResponse {
	s.Headers = v
	return s
}

func (s *DetectAudioForCustomizedVoiceJobResponse) SetStatusCode(v int32) *DetectAudioForCustomizedVoiceJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DetectAudioForCustomizedVoiceJobResponse) SetBody(v *DetectAudioForCustomizedVoiceJobResponseBody) *DetectAudioForCustomizedVoiceJobResponse {
	s.Body = v
	return s
}

type DropSearchIndexRequest struct {
	// The category of the index. Valid values:
	//
	// 	- mm: large visual model.
	//
	// 	- face: face recognition.
	//
	// 	- aiLabel: smart tagging.
	//
	// This parameter is required.
	//
	// example:
	//
	// mm
	IndexType *string `json:"IndexType,omitempty" xml:"IndexType,omitempty"`
	// The name of the search library.
	//
	// 	- If you leave this parameter empty, the search index is created in the default search library of Intelligent Media Service (IMS). Default value: ims-default-search-lib.
	//
	// 	- To query information about an existing search library, call the [QuerySearchLib](https://help.aliyun.com/document_detail/2584455.html) API operation.
	//
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
}

func (s DropSearchIndexRequest) String() string {
	return tea.Prettify(s)
}

func (s DropSearchIndexRequest) GoString() string {
	return s.String()
}

func (s *DropSearchIndexRequest) SetIndexType(v string) *DropSearchIndexRequest {
	s.IndexType = &v
	return s
}

func (s *DropSearchIndexRequest) SetSearchLibName(v string) *DropSearchIndexRequest {
	s.SearchLibName = &v
	return s
}

type DropSearchIndexResponseBody struct {
	// The status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DropSearchIndexResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DropSearchIndexResponseBody) GoString() string {
	return s.String()
}

func (s *DropSearchIndexResponseBody) SetCode(v string) *DropSearchIndexResponseBody {
	s.Code = &v
	return s
}

func (s *DropSearchIndexResponseBody) SetRequestId(v string) *DropSearchIndexResponseBody {
	s.RequestId = &v
	return s
}

func (s *DropSearchIndexResponseBody) SetSuccess(v string) *DropSearchIndexResponseBody {
	s.Success = &v
	return s
}

type DropSearchIndexResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DropSearchIndexResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DropSearchIndexResponse) String() string {
	return tea.Prettify(s)
}

func (s DropSearchIndexResponse) GoString() string {
	return s.String()
}

func (s *DropSearchIndexResponse) SetHeaders(v map[string]*string) *DropSearchIndexResponse {
	s.Headers = v
	return s
}

func (s *DropSearchIndexResponse) SetStatusCode(v int32) *DropSearchIndexResponse {
	s.StatusCode = &v
	return s
}

func (s *DropSearchIndexResponse) SetBody(v *DropSearchIndexResponseBody) *DropSearchIndexResponse {
	s.Body = v
	return s
}

type DropSearchLibRequest struct {
	// The name of the search library.
	//
	// This parameter is required.
	//
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
}

func (s DropSearchLibRequest) String() string {
	return tea.Prettify(s)
}

func (s DropSearchLibRequest) GoString() string {
	return s.String()
}

func (s *DropSearchLibRequest) SetSearchLibName(v string) *DropSearchLibRequest {
	s.SearchLibName = &v
	return s
}

type DropSearchLibResponseBody struct {
	// The status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// ****63E8B7C7-4812-46AD-0FA56029AC86****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DropSearchLibResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DropSearchLibResponseBody) GoString() string {
	return s.String()
}

func (s *DropSearchLibResponseBody) SetCode(v string) *DropSearchLibResponseBody {
	s.Code = &v
	return s
}

func (s *DropSearchLibResponseBody) SetRequestId(v string) *DropSearchLibResponseBody {
	s.RequestId = &v
	return s
}

func (s *DropSearchLibResponseBody) SetSuccess(v string) *DropSearchLibResponseBody {
	s.Success = &v
	return s
}

type DropSearchLibResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DropSearchLibResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DropSearchLibResponse) String() string {
	return tea.Prettify(s)
}

func (s DropSearchLibResponse) GoString() string {
	return s.String()
}

func (s *DropSearchLibResponse) SetHeaders(v map[string]*string) *DropSearchLibResponse {
	s.Headers = v
	return s
}

func (s *DropSearchLibResponse) SetStatusCode(v int32) *DropSearchLibResponse {
	s.StatusCode = &v
	return s
}

func (s *DropSearchLibResponse) SetBody(v *DropSearchLibResponseBody) *DropSearchLibResponse {
	s.Body = v
	return s
}

type GenerateAIAgentCallRequest struct {
	// The ID of the AI agent.
	//
	// This parameter is required.
	//
	// example:
	//
	// 39f8e0bc005e4f309379701645f4****
	AIAgentId      *string                                   `json:"AIAgentId,omitempty" xml:"AIAgentId,omitempty"`
	AgentConfig    *AIAgentConfig                            `json:"AgentConfig,omitempty" xml:"AgentConfig,omitempty"`
	ChatSyncConfig *GenerateAIAgentCallRequestChatSyncConfig `json:"ChatSyncConfig,omitempty" xml:"ChatSyncConfig,omitempty" type:"Struct"`
	// The time when the token expires. Unit: seconds. Default value: 3600. Valid values: 0 to 604800.
	//
	// example:
	//
	// 3600
	Expire *int64 `json:"Expire,omitempty" xml:"Expire,omitempty"`
	// example:
	//
	// fw1gr0bc005e4f309379701645f4****
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// Deprecated
	//
	// The template configurations of the AI agent. The specified configurations are merged with the template configurations that are specified in the console. If you do not specify this parameter, the system uses the default configurations for an AI agent created in the console.
	TemplateConfig *AIAgentTemplateConfig `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// example:
	//
	// {"Email":"johndoe@example.com","Preferences":{"Language":"en"}}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	// The username of the AI agent in the channel. If you do not specify this parameter, the system automatically generates a username. The value can be up to 64 characters in length.
	//
	// example:
	//
	// 877ae632caae49b1afc81c2e8194ffb4
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GenerateAIAgentCallRequest) String() string {
	return tea.Prettify(s)
}

func (s GenerateAIAgentCallRequest) GoString() string {
	return s.String()
}

func (s *GenerateAIAgentCallRequest) SetAIAgentId(v string) *GenerateAIAgentCallRequest {
	s.AIAgentId = &v
	return s
}

func (s *GenerateAIAgentCallRequest) SetAgentConfig(v *AIAgentConfig) *GenerateAIAgentCallRequest {
	s.AgentConfig = v
	return s
}

func (s *GenerateAIAgentCallRequest) SetChatSyncConfig(v *GenerateAIAgentCallRequestChatSyncConfig) *GenerateAIAgentCallRequest {
	s.ChatSyncConfig = v
	return s
}

func (s *GenerateAIAgentCallRequest) SetExpire(v int64) *GenerateAIAgentCallRequest {
	s.Expire = &v
	return s
}

func (s *GenerateAIAgentCallRequest) SetSessionId(v string) *GenerateAIAgentCallRequest {
	s.SessionId = &v
	return s
}

func (s *GenerateAIAgentCallRequest) SetTemplateConfig(v *AIAgentTemplateConfig) *GenerateAIAgentCallRequest {
	s.TemplateConfig = v
	return s
}

func (s *GenerateAIAgentCallRequest) SetUserData(v string) *GenerateAIAgentCallRequest {
	s.UserData = &v
	return s
}

func (s *GenerateAIAgentCallRequest) SetUserId(v string) *GenerateAIAgentCallRequest {
	s.UserId = &v
	return s
}

type GenerateAIAgentCallRequestChatSyncConfig struct {
	// example:
	//
	// ******005e4f309379701645f4****
	IMAIAgentId *string `json:"IMAIAgentId,omitempty" xml:"IMAIAgentId,omitempty"`
	// example:
	//
	// 4167626d312034b2b1c3b7f2f3e41884
	ReceiverId *string `json:"ReceiverId,omitempty" xml:"ReceiverId,omitempty"`
}

func (s GenerateAIAgentCallRequestChatSyncConfig) String() string {
	return tea.Prettify(s)
}

func (s GenerateAIAgentCallRequestChatSyncConfig) GoString() string {
	return s.String()
}

func (s *GenerateAIAgentCallRequestChatSyncConfig) SetIMAIAgentId(v string) *GenerateAIAgentCallRequestChatSyncConfig {
	s.IMAIAgentId = &v
	return s
}

func (s *GenerateAIAgentCallRequestChatSyncConfig) SetReceiverId(v string) *GenerateAIAgentCallRequestChatSyncConfig {
	s.ReceiverId = &v
	return s
}

type GenerateAIAgentCallShrinkRequest struct {
	// The ID of the AI agent.
	//
	// This parameter is required.
	//
	// example:
	//
	// 39f8e0bc005e4f309379701645f4****
	AIAgentId            *string `json:"AIAgentId,omitempty" xml:"AIAgentId,omitempty"`
	AgentConfigShrink    *string `json:"AgentConfig,omitempty" xml:"AgentConfig,omitempty"`
	ChatSyncConfigShrink *string `json:"ChatSyncConfig,omitempty" xml:"ChatSyncConfig,omitempty"`
	// The time when the token expires. Unit: seconds. Default value: 3600. Valid values: 0 to 604800.
	//
	// example:
	//
	// 3600
	Expire *int64 `json:"Expire,omitempty" xml:"Expire,omitempty"`
	// example:
	//
	// fw1gr0bc005e4f309379701645f4****
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// Deprecated
	//
	// The template configurations of the AI agent. The specified configurations are merged with the template configurations that are specified in the console. If you do not specify this parameter, the system uses the default configurations for an AI agent created in the console.
	TemplateConfigShrink *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// example:
	//
	// {"Email":"johndoe@example.com","Preferences":{"Language":"en"}}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	// The username of the AI agent in the channel. If you do not specify this parameter, the system automatically generates a username. The value can be up to 64 characters in length.
	//
	// example:
	//
	// 877ae632caae49b1afc81c2e8194ffb4
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GenerateAIAgentCallShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GenerateAIAgentCallShrinkRequest) GoString() string {
	return s.String()
}

func (s *GenerateAIAgentCallShrinkRequest) SetAIAgentId(v string) *GenerateAIAgentCallShrinkRequest {
	s.AIAgentId = &v
	return s
}

func (s *GenerateAIAgentCallShrinkRequest) SetAgentConfigShrink(v string) *GenerateAIAgentCallShrinkRequest {
	s.AgentConfigShrink = &v
	return s
}

func (s *GenerateAIAgentCallShrinkRequest) SetChatSyncConfigShrink(v string) *GenerateAIAgentCallShrinkRequest {
	s.ChatSyncConfigShrink = &v
	return s
}

func (s *GenerateAIAgentCallShrinkRequest) SetExpire(v int64) *GenerateAIAgentCallShrinkRequest {
	s.Expire = &v
	return s
}

func (s *GenerateAIAgentCallShrinkRequest) SetSessionId(v string) *GenerateAIAgentCallShrinkRequest {
	s.SessionId = &v
	return s
}

func (s *GenerateAIAgentCallShrinkRequest) SetTemplateConfigShrink(v string) *GenerateAIAgentCallShrinkRequest {
	s.TemplateConfigShrink = &v
	return s
}

func (s *GenerateAIAgentCallShrinkRequest) SetUserData(v string) *GenerateAIAgentCallShrinkRequest {
	s.UserData = &v
	return s
}

func (s *GenerateAIAgentCallShrinkRequest) SetUserId(v string) *GenerateAIAgentCallShrinkRequest {
	s.UserId = &v
	return s
}

type GenerateAIAgentCallResponseBody struct {
	// The username of the AI agent in the Alibaba Real-Time Communication (ARTC) channel.
	//
	// example:
	//
	// 877ae632caae49b1afc81c2e8194ffb4
	AIAgentUserId *string `json:"AIAgentUserId,omitempty" xml:"AIAgentUserId,omitempty"`
	// The ARTC channel ID.
	//
	// example:
	//
	// 70f22d5784194938a7e387052f2b3208
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// The ID of the AI agent.
	//
	// example:
	//
	// 39f8e0bc005e4f309379701645f4****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 7B117AF5-2A16-412C-B127-FA6175ED1AD0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ARTC token of the client.
	//
	// example:
	//
	// eyJhcHBpZCI6ICIxMjM0MTIzNxxxxx
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
	// The username in the ARTC channel.
	//
	// example:
	//
	// user123
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GenerateAIAgentCallResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GenerateAIAgentCallResponseBody) GoString() string {
	return s.String()
}

func (s *GenerateAIAgentCallResponseBody) SetAIAgentUserId(v string) *GenerateAIAgentCallResponseBody {
	s.AIAgentUserId = &v
	return s
}

func (s *GenerateAIAgentCallResponseBody) SetChannelId(v string) *GenerateAIAgentCallResponseBody {
	s.ChannelId = &v
	return s
}

func (s *GenerateAIAgentCallResponseBody) SetInstanceId(v string) *GenerateAIAgentCallResponseBody {
	s.InstanceId = &v
	return s
}

func (s *GenerateAIAgentCallResponseBody) SetRequestId(v string) *GenerateAIAgentCallResponseBody {
	s.RequestId = &v
	return s
}

func (s *GenerateAIAgentCallResponseBody) SetToken(v string) *GenerateAIAgentCallResponseBody {
	s.Token = &v
	return s
}

func (s *GenerateAIAgentCallResponseBody) SetUserId(v string) *GenerateAIAgentCallResponseBody {
	s.UserId = &v
	return s
}

type GenerateAIAgentCallResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GenerateAIAgentCallResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GenerateAIAgentCallResponse) String() string {
	return tea.Prettify(s)
}

func (s GenerateAIAgentCallResponse) GoString() string {
	return s.String()
}

func (s *GenerateAIAgentCallResponse) SetHeaders(v map[string]*string) *GenerateAIAgentCallResponse {
	s.Headers = v
	return s
}

func (s *GenerateAIAgentCallResponse) SetStatusCode(v int32) *GenerateAIAgentCallResponse {
	s.StatusCode = &v
	return s
}

func (s *GenerateAIAgentCallResponse) SetBody(v *GenerateAIAgentCallResponseBody) *GenerateAIAgentCallResponse {
	s.Body = v
	return s
}

type GenerateKMSDataKeyResponseBody struct {
	// The information about the data key.
	DataKey *GenerateKMSDataKeyResponseBodyDataKey `json:"DataKey,omitempty" xml:"DataKey,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GenerateKMSDataKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GenerateKMSDataKeyResponseBody) GoString() string {
	return s.String()
}

func (s *GenerateKMSDataKeyResponseBody) SetDataKey(v *GenerateKMSDataKeyResponseBodyDataKey) *GenerateKMSDataKeyResponseBody {
	s.DataKey = v
	return s
}

func (s *GenerateKMSDataKeyResponseBody) SetRequestId(v string) *GenerateKMSDataKeyResponseBody {
	s.RequestId = &v
	return s
}

type GenerateKMSDataKeyResponseBodyDataKey struct {
	// The ciphertext of the encrypted data key. This parameter is used as CipherText when you create a transcoding job.
	//
	// example:
	//
	// ODZhOWVmZDktM2QxNi00ODk0LWJkNGYtMWZjNDNmM2YyYWJmS7FmDBBQ0BkKsQrtRnidtPwirmDcS0ZuJCU41xxAAWk4Z8qsADfbV0b+i6kQmlvj79dJdGOvtX69Uycs901qOjop4bTS****
	CiphertextBlob *string `json:"CiphertextBlob,omitempty" xml:"CiphertextBlob,omitempty"`
	// The ID of the customer master key (CMK). The ID must be globally unique.
	//
	// example:
	//
	// 7906979c-8e06-46a2-be2d-68e3ccbc****
	KeyId *string `json:"KeyId,omitempty" xml:"KeyId,omitempty"`
	// The Base64-encoded plaintext of the data key.
	//
	// example:
	//
	// QmFzZTY0IGVuY29kZWQgcGxhaW50****
	Plaintext *string `json:"Plaintext,omitempty" xml:"Plaintext,omitempty"`
}

func (s GenerateKMSDataKeyResponseBodyDataKey) String() string {
	return tea.Prettify(s)
}

func (s GenerateKMSDataKeyResponseBodyDataKey) GoString() string {
	return s.String()
}

func (s *GenerateKMSDataKeyResponseBodyDataKey) SetCiphertextBlob(v string) *GenerateKMSDataKeyResponseBodyDataKey {
	s.CiphertextBlob = &v
	return s
}

func (s *GenerateKMSDataKeyResponseBodyDataKey) SetKeyId(v string) *GenerateKMSDataKeyResponseBodyDataKey {
	s.KeyId = &v
	return s
}

func (s *GenerateKMSDataKeyResponseBodyDataKey) SetPlaintext(v string) *GenerateKMSDataKeyResponseBodyDataKey {
	s.Plaintext = &v
	return s
}

type GenerateKMSDataKeyResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GenerateKMSDataKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GenerateKMSDataKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s GenerateKMSDataKeyResponse) GoString() string {
	return s.String()
}

func (s *GenerateKMSDataKeyResponse) SetHeaders(v map[string]*string) *GenerateKMSDataKeyResponse {
	s.Headers = v
	return s
}

func (s *GenerateKMSDataKeyResponse) SetStatusCode(v int32) *GenerateKMSDataKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *GenerateKMSDataKeyResponse) SetBody(v *GenerateKMSDataKeyResponseBody) *GenerateKMSDataKeyResponse {
	s.Body = v
	return s
}

type GenerateMessageChatTokenRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 19de81b3b3d94abda22******
	AIAgentId *string `json:"AIAgentId,omitempty" xml:"AIAgentId,omitempty"`
	// example:
	//
	// 3600
	Expire *int32 `json:"Expire,omitempty" xml:"Expire,omitempty"`
	// example:
	//
	// user
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// YOURUSERID
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GenerateMessageChatTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s GenerateMessageChatTokenRequest) GoString() string {
	return s.String()
}

func (s *GenerateMessageChatTokenRequest) SetAIAgentId(v string) *GenerateMessageChatTokenRequest {
	s.AIAgentId = &v
	return s
}

func (s *GenerateMessageChatTokenRequest) SetExpire(v int32) *GenerateMessageChatTokenRequest {
	s.Expire = &v
	return s
}

func (s *GenerateMessageChatTokenRequest) SetRole(v string) *GenerateMessageChatTokenRequest {
	s.Role = &v
	return s
}

func (s *GenerateMessageChatTokenRequest) SetUserId(v string) *GenerateMessageChatTokenRequest {
	s.UserId = &v
	return s
}

type GenerateMessageChatTokenResponseBody struct {
	// example:
	//
	// ***********
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// example:
	//
	// H4sIAAAAAAAE******************
	AppSign *string `json:"AppSign,omitempty" xml:"AppSign,omitempty"`
	// example:
	//
	// AK-***********
	Nonce *string `json:"Nonce,omitempty" xml:"Nonce,omitempty"`
	// example:
	//
	// req_1234567890abcdef
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// admin
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
	// example:
	//
	// 1700000000
	TimeStamp *int64 `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	// example:
	//
	// acet**********
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
	// example:
	//
	// YOURUSERID
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GenerateMessageChatTokenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GenerateMessageChatTokenResponseBody) GoString() string {
	return s.String()
}

func (s *GenerateMessageChatTokenResponseBody) SetAppId(v string) *GenerateMessageChatTokenResponseBody {
	s.AppId = &v
	return s
}

func (s *GenerateMessageChatTokenResponseBody) SetAppSign(v string) *GenerateMessageChatTokenResponseBody {
	s.AppSign = &v
	return s
}

func (s *GenerateMessageChatTokenResponseBody) SetNonce(v string) *GenerateMessageChatTokenResponseBody {
	s.Nonce = &v
	return s
}

func (s *GenerateMessageChatTokenResponseBody) SetRequestId(v string) *GenerateMessageChatTokenResponseBody {
	s.RequestId = &v
	return s
}

func (s *GenerateMessageChatTokenResponseBody) SetRole(v string) *GenerateMessageChatTokenResponseBody {
	s.Role = &v
	return s
}

func (s *GenerateMessageChatTokenResponseBody) SetTimeStamp(v int64) *GenerateMessageChatTokenResponseBody {
	s.TimeStamp = &v
	return s
}

func (s *GenerateMessageChatTokenResponseBody) SetToken(v string) *GenerateMessageChatTokenResponseBody {
	s.Token = &v
	return s
}

func (s *GenerateMessageChatTokenResponseBody) SetUserId(v string) *GenerateMessageChatTokenResponseBody {
	s.UserId = &v
	return s
}

type GenerateMessageChatTokenResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GenerateMessageChatTokenResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GenerateMessageChatTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s GenerateMessageChatTokenResponse) GoString() string {
	return s.String()
}

func (s *GenerateMessageChatTokenResponse) SetHeaders(v map[string]*string) *GenerateMessageChatTokenResponse {
	s.Headers = v
	return s
}

func (s *GenerateMessageChatTokenResponse) SetStatusCode(v int32) *GenerateMessageChatTokenResponse {
	s.StatusCode = &v
	return s
}

func (s *GenerateMessageChatTokenResponse) SetBody(v *GenerateMessageChatTokenResponseBody) *GenerateMessageChatTokenResponse {
	s.Body = v
	return s
}

type GetAdInsertionRequest struct {
	// The name of the ad insertion configuration that you want to query.
	//
	// This parameter is required.
	//
	// example:
	//
	// my_ad
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s GetAdInsertionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAdInsertionRequest) GoString() string {
	return s.String()
}

func (s *GetAdInsertionRequest) SetName(v string) *GetAdInsertionRequest {
	s.Name = &v
	return s
}

type GetAdInsertionResponseBody struct {
	// The ad insertion configuration.
	Config *GetAdInsertionResponseBodyConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetAdInsertionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAdInsertionResponseBody) GoString() string {
	return s.String()
}

func (s *GetAdInsertionResponseBody) SetConfig(v *GetAdInsertionResponseBodyConfig) *GetAdInsertionResponseBody {
	s.Config = v
	return s
}

func (s *GetAdInsertionResponseBody) SetRequestId(v string) *GetAdInsertionResponseBody {
	s.RequestId = &v
	return s
}

type GetAdInsertionResponseBodyConfig struct {
	// Indicates whether ad marker passthrough is enabled.
	//
	// example:
	//
	// ON
	AdMarkerPassthrough *string `json:"AdMarkerPassthrough,omitempty" xml:"AdMarkerPassthrough,omitempty"`
	// The URL of the ad decision server (ADS).
	//
	// example:
	//
	// http://ads.com/ad1?param1=[palyer_params.p1]
	AdsUrl *string `json:"AdsUrl,omitempty" xml:"AdsUrl,omitempty"`
	// The CDN configurations.
	CdnConfig *GetAdInsertionResponseBodyConfigCdnConfig `json:"CdnConfig,omitempty" xml:"CdnConfig,omitempty" type:"Struct"`
	// The aliases for dynamic variable replacement.
	//
	// example:
	//
	// {
	//
	//       "player_params.p1": {
	//
	//             "1": "abc"
	//
	//       }
	//
	// }
	ConfigAliases *string `json:"ConfigAliases,omitempty" xml:"ConfigAliases,omitempty"`
	// The prefix of the source URL.
	//
	// example:
	//
	// https://source.com/
	ContentUrlPrefix *string `json:"ContentUrlPrefix,omitempty" xml:"ContentUrlPrefix,omitempty"`
	// The time when the configuration was created.
	//
	// example:
	//
	// 2024-06-13T08:26:09Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the configuration was last modified.
	//
	// example:
	//
	// 2024-06-13T08:26:09Z
	LastModified *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	// The playback endpoint prefix for accessing manifests.
	ManifestEndpointConfig *GetAdInsertionResponseBodyConfigManifestEndpointConfig `json:"ManifestEndpointConfig,omitempty" xml:"ManifestEndpointConfig,omitempty" type:"Struct"`
	// The name of the configuration.
	//
	// example:
	//
	// my_ad
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The personalization threshold.
	//
	// example:
	//
	// 5
	PersonalizationThreshold *int32 `json:"PersonalizationThreshold,omitempty" xml:"PersonalizationThreshold,omitempty"`
	// The URL of the slate ad.
	//
	// example:
	//
	// http://storage.com/slate1.mp4
	SlateAdUrl *string `json:"SlateAdUrl,omitempty" xml:"SlateAdUrl,omitempty"`
}

func (s GetAdInsertionResponseBodyConfig) String() string {
	return tea.Prettify(s)
}

func (s GetAdInsertionResponseBodyConfig) GoString() string {
	return s.String()
}

func (s *GetAdInsertionResponseBodyConfig) SetAdMarkerPassthrough(v string) *GetAdInsertionResponseBodyConfig {
	s.AdMarkerPassthrough = &v
	return s
}

func (s *GetAdInsertionResponseBodyConfig) SetAdsUrl(v string) *GetAdInsertionResponseBodyConfig {
	s.AdsUrl = &v
	return s
}

func (s *GetAdInsertionResponseBodyConfig) SetCdnConfig(v *GetAdInsertionResponseBodyConfigCdnConfig) *GetAdInsertionResponseBodyConfig {
	s.CdnConfig = v
	return s
}

func (s *GetAdInsertionResponseBodyConfig) SetConfigAliases(v string) *GetAdInsertionResponseBodyConfig {
	s.ConfigAliases = &v
	return s
}

func (s *GetAdInsertionResponseBodyConfig) SetContentUrlPrefix(v string) *GetAdInsertionResponseBodyConfig {
	s.ContentUrlPrefix = &v
	return s
}

func (s *GetAdInsertionResponseBodyConfig) SetCreateTime(v string) *GetAdInsertionResponseBodyConfig {
	s.CreateTime = &v
	return s
}

func (s *GetAdInsertionResponseBodyConfig) SetLastModified(v string) *GetAdInsertionResponseBodyConfig {
	s.LastModified = &v
	return s
}

func (s *GetAdInsertionResponseBodyConfig) SetManifestEndpointConfig(v *GetAdInsertionResponseBodyConfigManifestEndpointConfig) *GetAdInsertionResponseBodyConfig {
	s.ManifestEndpointConfig = v
	return s
}

func (s *GetAdInsertionResponseBodyConfig) SetName(v string) *GetAdInsertionResponseBodyConfig {
	s.Name = &v
	return s
}

func (s *GetAdInsertionResponseBodyConfig) SetPersonalizationThreshold(v int32) *GetAdInsertionResponseBodyConfig {
	s.PersonalizationThreshold = &v
	return s
}

func (s *GetAdInsertionResponseBodyConfig) SetSlateAdUrl(v string) *GetAdInsertionResponseBodyConfig {
	s.SlateAdUrl = &v
	return s
}

type GetAdInsertionResponseBodyConfigCdnConfig struct {
	// The CDN prefix for accessing ad segments.
	//
	// example:
	//
	// http://cdn.com/
	AdSegmentUrlPrefix *string `json:"AdSegmentUrlPrefix,omitempty" xml:"AdSegmentUrlPrefix,omitempty"`
	// The CDN prefix for accessing content segments.
	//
	// example:
	//
	// http://cdn.com/
	ContentSegmentUrlPrefix *string `json:"ContentSegmentUrlPrefix,omitempty" xml:"ContentSegmentUrlPrefix,omitempty"`
}

func (s GetAdInsertionResponseBodyConfigCdnConfig) String() string {
	return tea.Prettify(s)
}

func (s GetAdInsertionResponseBodyConfigCdnConfig) GoString() string {
	return s.String()
}

func (s *GetAdInsertionResponseBodyConfigCdnConfig) SetAdSegmentUrlPrefix(v string) *GetAdInsertionResponseBodyConfigCdnConfig {
	s.AdSegmentUrlPrefix = &v
	return s
}

func (s *GetAdInsertionResponseBodyConfigCdnConfig) SetContentSegmentUrlPrefix(v string) *GetAdInsertionResponseBodyConfigCdnConfig {
	s.ContentSegmentUrlPrefix = &v
	return s
}

type GetAdInsertionResponseBodyConfigManifestEndpointConfig struct {
	// DASH清单播放端点前缀
	DashPrefix *string `json:"DashPrefix,omitempty" xml:"DashPrefix,omitempty"`
	// The playback endpoint prefix for accessing HLS manifests.
	HlsPrefix *string `json:"HlsPrefix,omitempty" xml:"HlsPrefix,omitempty"`
}

func (s GetAdInsertionResponseBodyConfigManifestEndpointConfig) String() string {
	return tea.Prettify(s)
}

func (s GetAdInsertionResponseBodyConfigManifestEndpointConfig) GoString() string {
	return s.String()
}

func (s *GetAdInsertionResponseBodyConfigManifestEndpointConfig) SetDashPrefix(v string) *GetAdInsertionResponseBodyConfigManifestEndpointConfig {
	s.DashPrefix = &v
	return s
}

func (s *GetAdInsertionResponseBodyConfigManifestEndpointConfig) SetHlsPrefix(v string) *GetAdInsertionResponseBodyConfigManifestEndpointConfig {
	s.HlsPrefix = &v
	return s
}

type GetAdInsertionResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAdInsertionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAdInsertionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAdInsertionResponse) GoString() string {
	return s.String()
}

func (s *GetAdInsertionResponse) SetHeaders(v map[string]*string) *GetAdInsertionResponse {
	s.Headers = v
	return s
}

func (s *GetAdInsertionResponse) SetStatusCode(v int32) *GetAdInsertionResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAdInsertionResponse) SetBody(v *GetAdInsertionResponseBody) *GetAdInsertionResponse {
	s.Body = v
	return s
}

type GetAvatarRequest struct {
	// 	- The ID of the digital human.
	//
	// This parameter is required.
	//
	// example:
	//
	// Avatar-XXXX
	AvatarId *string `json:"AvatarId,omitempty" xml:"AvatarId,omitempty"`
}

func (s GetAvatarRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAvatarRequest) GoString() string {
	return s.String()
}

func (s *GetAvatarRequest) SetAvatarId(v string) *GetAvatarRequest {
	s.AvatarId = &v
	return s
}

type GetAvatarResponseBody struct {
	// The data returned.
	Data *GetAvatarResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAvatarResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAvatarResponseBody) GoString() string {
	return s.String()
}

func (s *GetAvatarResponseBody) SetData(v *GetAvatarResponseBodyData) *GetAvatarResponseBody {
	s.Data = v
	return s
}

func (s *GetAvatarResponseBody) SetRequestId(v string) *GetAvatarResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAvatarResponseBody) SetSuccess(v bool) *GetAvatarResponseBody {
	s.Success = &v
	return s
}

type GetAvatarResponseBodyData struct {
	// The information about the digital human.
	Avatar *GetAvatarResponseBodyDataAvatar `json:"Avatar,omitempty" xml:"Avatar,omitempty" type:"Struct"`
}

func (s GetAvatarResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAvatarResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAvatarResponseBodyData) SetAvatar(v *GetAvatarResponseBodyDataAvatar) *GetAvatarResponseBodyData {
	s.Avatar = v
	return s
}

type GetAvatarResponseBodyDataAvatar struct {
	// The description of the digital human.
	AvatarDescription *string `json:"AvatarDescription,omitempty" xml:"AvatarDescription,omitempty"`
	// The ID of the digital human.
	//
	// example:
	//
	// Avatar-XXXX
	AvatarId *string `json:"AvatarId,omitempty" xml:"AvatarId,omitempty"`
	// The name of the digital human.
	AvatarName *string `json:"AvatarName,omitempty" xml:"AvatarName,omitempty"`
	// The type of the digital human.
	//
	// example:
	//
	// 2DAvatar
	AvatarType *string `json:"AvatarType,omitempty" xml:"AvatarType,omitempty"`
	// The height of the digital human image in pixels.
	//
	// example:
	//
	// 1920
	Height *int32 `json:"Height,omitempty" xml:"Height,omitempty"`
	// The media asset ID of the portrait image.
	//
	// example:
	//
	// ****571c704445f9a0ee011406c2****
	Portrait *string `json:"Portrait,omitempty" xml:"Portrait,omitempty"`
	// The thumbnail URL.
	//
	// example:
	//
	// https://your-bucket.oss-cn-hangzhou.aliyuncs.com/thumbnail.png
	Thumbnail *string `json:"Thumbnail,omitempty" xml:"Thumbnail,omitempty"`
	// Indicates whether the digital human supports alpha channels.
	//
	// example:
	//
	// true
	Transparent *bool `json:"Transparent,omitempty" xml:"Transparent,omitempty"`
	// The width of the digital human image in pixels.
	//
	// example:
	//
	// 1080
	Width *int32 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetAvatarResponseBodyDataAvatar) String() string {
	return tea.Prettify(s)
}

func (s GetAvatarResponseBodyDataAvatar) GoString() string {
	return s.String()
}

func (s *GetAvatarResponseBodyDataAvatar) SetAvatarDescription(v string) *GetAvatarResponseBodyDataAvatar {
	s.AvatarDescription = &v
	return s
}

func (s *GetAvatarResponseBodyDataAvatar) SetAvatarId(v string) *GetAvatarResponseBodyDataAvatar {
	s.AvatarId = &v
	return s
}

func (s *GetAvatarResponseBodyDataAvatar) SetAvatarName(v string) *GetAvatarResponseBodyDataAvatar {
	s.AvatarName = &v
	return s
}

func (s *GetAvatarResponseBodyDataAvatar) SetAvatarType(v string) *GetAvatarResponseBodyDataAvatar {
	s.AvatarType = &v
	return s
}

func (s *GetAvatarResponseBodyDataAvatar) SetHeight(v int32) *GetAvatarResponseBodyDataAvatar {
	s.Height = &v
	return s
}

func (s *GetAvatarResponseBodyDataAvatar) SetPortrait(v string) *GetAvatarResponseBodyDataAvatar {
	s.Portrait = &v
	return s
}

func (s *GetAvatarResponseBodyDataAvatar) SetThumbnail(v string) *GetAvatarResponseBodyDataAvatar {
	s.Thumbnail = &v
	return s
}

func (s *GetAvatarResponseBodyDataAvatar) SetTransparent(v bool) *GetAvatarResponseBodyDataAvatar {
	s.Transparent = &v
	return s
}

func (s *GetAvatarResponseBodyDataAvatar) SetWidth(v int32) *GetAvatarResponseBodyDataAvatar {
	s.Width = &v
	return s
}

type GetAvatarResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAvatarResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAvatarResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAvatarResponse) GoString() string {
	return s.String()
}

func (s *GetAvatarResponse) SetHeaders(v map[string]*string) *GetAvatarResponse {
	s.Headers = v
	return s
}

func (s *GetAvatarResponse) SetStatusCode(v int32) *GetAvatarResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAvatarResponse) SetBody(v *GetAvatarResponseBody) *GetAvatarResponse {
	s.Body = v
	return s
}

type GetAvatarTrainingJobRequest struct {
	// The ID of the digital human training job.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetAvatarTrainingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAvatarTrainingJobRequest) GoString() string {
	return s.String()
}

func (s *GetAvatarTrainingJobRequest) SetJobId(v string) *GetAvatarTrainingJobRequest {
	s.JobId = &v
	return s
}

type GetAvatarTrainingJobResponseBody struct {
	// The data returned if the request was successful.
	Data *GetAvatarTrainingJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAvatarTrainingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAvatarTrainingJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetAvatarTrainingJobResponseBody) SetData(v *GetAvatarTrainingJobResponseBodyData) *GetAvatarTrainingJobResponseBody {
	s.Data = v
	return s
}

func (s *GetAvatarTrainingJobResponseBody) SetRequestId(v string) *GetAvatarTrainingJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAvatarTrainingJobResponseBody) SetSuccess(v bool) *GetAvatarTrainingJobResponseBody {
	s.Success = &v
	return s
}

type GetAvatarTrainingJobResponseBodyData struct {
	// The information about the digital human training job.
	AvatarTrainingJob *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob `json:"AvatarTrainingJob,omitempty" xml:"AvatarTrainingJob,omitempty" type:"Struct"`
}

func (s GetAvatarTrainingJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAvatarTrainingJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAvatarTrainingJobResponseBodyData) SetAvatarTrainingJob(v *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) *GetAvatarTrainingJobResponseBodyData {
	s.AvatarTrainingJob = v
	return s
}

type GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob struct {
	// The description of the digital human.
	AvatarDescription *string `json:"AvatarDescription,omitempty" xml:"AvatarDescription,omitempty"`
	// The ID of the digital human.
	//
	// example:
	//
	// Avatar-XXXX
	AvatarId *string `json:"AvatarId,omitempty" xml:"AvatarId,omitempty"`
	// The name of the digital human.
	AvatarName *string `json:"AvatarName,omitempty" xml:"AvatarName,omitempty"`
	// The type of the digital human.
	//
	// example:
	//
	// 2DAvatar
	AvatarType *string `json:"AvatarType,omitempty" xml:"AvatarType,omitempty"`
	// 	- The time when the first training was initiated.
	//
	// 	- The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2020-12-23T13:33:40Z
	FirstTrainingTime *string `json:"FirstTrainingTime,omitempty" xml:"FirstTrainingTime,omitempty"`
	// The ID of the digital human training job.
	//
	// example:
	//
	// ****55d86f7f4587943ce7734d6b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// 	- The time when the last training was initiated.
	//
	// 	- The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2020-12-23T13:33:40Z
	LastTrainingTime *string `json:"LastTrainingTime,omitempty" xml:"LastTrainingTime,omitempty"`
	// The status description.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The media asset ID of the portrait image.
	//
	// example:
	//
	// ****571c704445f9a0ee011406c2****
	Portrait *string `json:"Portrait,omitempty" xml:"Portrait,omitempty"`
	// 	- The state of the digital human training job.
	//
	// 	- Valid values: Init, Queuing, Training, Success, and Fail.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The thumbnail URL.
	//
	// example:
	//
	// https://your-bucket.oss-cn-hangzhou.aliyuncs.com/thumbnail.png
	Thumbnail *string `json:"Thumbnail,omitempty" xml:"Thumbnail,omitempty"`
	// Indicates whether the input video supports alpha channels.
	//
	// example:
	//
	// true
	Transparent *bool `json:"Transparent,omitempty" xml:"Transparent,omitempty"`
	// The ID of the video used for training.
	//
	// example:
	//
	// ****571c704445f9a0ee011406c2****
	Video *string `json:"Video,omitempty" xml:"Video,omitempty"`
}

func (s GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) String() string {
	return tea.Prettify(s)
}

func (s GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) GoString() string {
	return s.String()
}

func (s *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) SetAvatarDescription(v string) *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob {
	s.AvatarDescription = &v
	return s
}

func (s *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) SetAvatarId(v string) *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob {
	s.AvatarId = &v
	return s
}

func (s *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) SetAvatarName(v string) *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob {
	s.AvatarName = &v
	return s
}

func (s *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) SetAvatarType(v string) *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob {
	s.AvatarType = &v
	return s
}

func (s *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) SetFirstTrainingTime(v string) *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob {
	s.FirstTrainingTime = &v
	return s
}

func (s *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) SetJobId(v string) *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob {
	s.JobId = &v
	return s
}

func (s *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) SetLastTrainingTime(v string) *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob {
	s.LastTrainingTime = &v
	return s
}

func (s *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) SetMessage(v string) *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob {
	s.Message = &v
	return s
}

func (s *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) SetPortrait(v string) *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob {
	s.Portrait = &v
	return s
}

func (s *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) SetStatus(v string) *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob {
	s.Status = &v
	return s
}

func (s *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) SetThumbnail(v string) *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob {
	s.Thumbnail = &v
	return s
}

func (s *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) SetTransparent(v bool) *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob {
	s.Transparent = &v
	return s
}

func (s *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) SetVideo(v string) *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob {
	s.Video = &v
	return s
}

type GetAvatarTrainingJobResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAvatarTrainingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAvatarTrainingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAvatarTrainingJobResponse) GoString() string {
	return s.String()
}

func (s *GetAvatarTrainingJobResponse) SetHeaders(v map[string]*string) *GetAvatarTrainingJobResponse {
	s.Headers = v
	return s
}

func (s *GetAvatarTrainingJobResponse) SetStatusCode(v int32) *GetAvatarTrainingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAvatarTrainingJobResponse) SetBody(v *GetAvatarTrainingJobResponseBody) *GetAvatarTrainingJobResponse {
	s.Body = v
	return s
}

type GetBatchMediaProducingJobRequest struct {
	// The ID of the quick video production job.
	//
	// example:
	//
	// ****b4549d46c88681030f6e****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetBatchMediaProducingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBatchMediaProducingJobRequest) GoString() string {
	return s.String()
}

func (s *GetBatchMediaProducingJobRequest) SetJobId(v string) *GetBatchMediaProducingJobRequest {
	s.JobId = &v
	return s
}

type GetBatchMediaProducingJobResponseBody struct {
	// The information about the quick video production job.
	EditingBatchJob *GetBatchMediaProducingJobResponseBodyEditingBatchJob `json:"EditingBatchJob,omitempty" xml:"EditingBatchJob,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ****36-3C1E-4417-BDB2-1E034F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetBatchMediaProducingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBatchMediaProducingJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetBatchMediaProducingJobResponseBody) SetEditingBatchJob(v *GetBatchMediaProducingJobResponseBodyEditingBatchJob) *GetBatchMediaProducingJobResponseBody {
	s.EditingBatchJob = v
	return s
}

func (s *GetBatchMediaProducingJobResponseBody) SetRequestId(v string) *GetBatchMediaProducingJobResponseBody {
	s.RequestId = &v
	return s
}

type GetBatchMediaProducingJobResponseBodyEditingBatchJob struct {
	// The time when the job was complete.
	//
	// The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2024-06-13T08:57:07Z
	CompleteTime *string `json:"CompleteTime,omitempty" xml:"CompleteTime,omitempty"`
	// The time when the job was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2024-06-13T08:47:07Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The editing configurations. For more information, see [EditingConfig](~~2692547#1be9bba03b7qu~~).
	//
	// example:
	//
	// {
	//
	//   "MediaConfig": {
	//
	//       "Volume": 0
	//
	//   },
	//
	//   "SpeechConfig": {
	//
	//       "Volume": 1
	//
	//   },
	//
	//  "BackgroundMusicConfig": {
	//
	//       "Volume": 0.3
	//
	//   }
	//
	// }
	EditingConfig *string `json:"EditingConfig,omitempty" xml:"EditingConfig,omitempty"`
	// The extended information. This parameter contains the following fields:
	//
	// ErrorCode: the error code of the main job.
	//
	// ErrorMessage: the error message of the main job.
	//
	// example:
	//
	// {
	//
	// 	"ErrorCode": "InvalidMaterial.NotFound",
	//
	// 	"ErrorMessage": "The specified clips id not found:[\\"****30d0b5e871eebb2ff7f6c75a****\\"]"
	//
	// }
	Extend *string `json:"Extend,omitempty" xml:"Extend,omitempty"`
	// The input configurations. For more information, see [InputConfig](~~2692547#2faed1559549n~~).
	InputConfig *string `json:"InputConfig,omitempty" xml:"InputConfig,omitempty"`
	// The job ID.
	//
	// example:
	//
	// ****b6b2750d4308892ac3330238****
	JobId   *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	JobType *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	// The time when the job was last modified.
	//
	// The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2024-06-13T08:57:07Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The output configurations. For more information, see [OutputConfig](~~2692547#447b928fcbuoa~~).
	//
	// example:
	//
	// {
	//
	//   "MediaURL": "http://xxx.oss-cn-shanghai.aliyuncs.com/xxx_{index}.mp4",
	//
	//   "Count": 20,
	//
	//   "MaxDuration": 15,
	//
	//   "Width": 1080,
	//
	//   "Height": 1920,
	//
	//   "Video": {"Crf": 27}
	//
	// }
	OutputConfig *string `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	// The job state. Valid values:
	//
	// Init: The job is initialized.
	//
	// Processing: The job is in progress.
	//
	// Finished: The job is complete.
	//
	// example:
	//
	// Finished
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The quick video production subjobs.
	SubJobList []*GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList `json:"SubJobList,omitempty" xml:"SubJobList,omitempty" type:"Repeated"`
	// The user-defined data, including the business and callback configurations. For more information, see [UserData](https://help.aliyun.com/document_detail/357745.html).
	//
	// example:
	//
	// {"NotifyAddress":"http://xx.xx.xxx"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetBatchMediaProducingJobResponseBodyEditingBatchJob) String() string {
	return tea.Prettify(s)
}

func (s GetBatchMediaProducingJobResponseBodyEditingBatchJob) GoString() string {
	return s.String()
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJob) SetCompleteTime(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJob {
	s.CompleteTime = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJob) SetCreateTime(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJob {
	s.CreateTime = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJob) SetEditingConfig(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJob {
	s.EditingConfig = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJob) SetExtend(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJob {
	s.Extend = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJob) SetInputConfig(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJob {
	s.InputConfig = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJob) SetJobId(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJob {
	s.JobId = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJob) SetJobType(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJob {
	s.JobType = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJob) SetModifiedTime(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJob {
	s.ModifiedTime = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJob) SetOutputConfig(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJob {
	s.OutputConfig = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJob) SetStatus(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJob {
	s.Status = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJob) SetSubJobList(v []*GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList) *GetBatchMediaProducingJobResponseBodyEditingBatchJob {
	s.SubJobList = v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJob) SetUserData(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJob {
	s.UserData = &v
	return s
}

type GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList struct {
	Duration *float32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The error code that is returned if the subjob failed. This parameter is not returned if the subjob is successful.
	//
	// example:
	//
	// InvalidMaterial.NotFound
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The error message that is returned if the subjob failed. This parameter is not returned if the subjob is successful.
	//
	// example:
	//
	// The specified clips id not found:["****30d0b5e871eebb2ff7f6c75a****"]
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The subjob ID.
	//
	// example:
	//
	// ****8e81933d44e3ae69e2f81485****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The ID of the output media asset.
	//
	// example:
	//
	// ****1470b11171ee9d19e7e6c66a****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The URL of the output file.
	//
	// example:
	//
	// http:/xxx.oss-cn-shanghai.aliyuncs.com/xxx_0.mp4
	MediaURL *string `json:"MediaURL,omitempty" xml:"MediaURL,omitempty"`
	// The ID of the online editing project.
	//
	// example:
	//
	// ****7cc47fe04eaa81bd853acb6a****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The subjob state. Valid values:
	//
	// Init: The subjob is initialized.
	//
	// Processing: The subjob is in progress.
	//
	// Success: The subjob is successful.
	//
	// Failed: The subjob failed.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList) String() string {
	return tea.Prettify(s)
}

func (s GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList) GoString() string {
	return s.String()
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList) SetDuration(v float32) *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList {
	s.Duration = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList) SetErrorCode(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList {
	s.ErrorCode = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList) SetErrorMessage(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList {
	s.ErrorMessage = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList) SetJobId(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList {
	s.JobId = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList) SetMediaId(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList {
	s.MediaId = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList) SetMediaURL(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList {
	s.MediaURL = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList) SetProjectId(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList {
	s.ProjectId = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList) SetStatus(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList {
	s.Status = &v
	return s
}

type GetBatchMediaProducingJobResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBatchMediaProducingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBatchMediaProducingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBatchMediaProducingJobResponse) GoString() string {
	return s.String()
}

func (s *GetBatchMediaProducingJobResponse) SetHeaders(v map[string]*string) *GetBatchMediaProducingJobResponse {
	s.Headers = v
	return s
}

func (s *GetBatchMediaProducingJobResponse) SetStatusCode(v int32) *GetBatchMediaProducingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBatchMediaProducingJobResponse) SetBody(v *GetBatchMediaProducingJobResponseBody) *GetBatchMediaProducingJobResponse {
	s.Body = v
	return s
}

type GetCategoriesRequest struct {
	// The category ID. You can use one of the following methods to obtain the ID:
	//
	// 	- Log on to the [Intelligent Media Services (IMS) console](https://ims.console.aliyun.com) and choose **Media Asset Management*	- > **Category Management*	- to view the category ID.
	//
	// 	- View the value of CateId returned by the AddCategory operation that you called to create a category.
	//
	// 	- View the value of CateId returned by the GetCategories operation that you called to query a category.
	//
	// example:
	//
	// 33
	CateId *int64 `json:"CateId,omitempty" xml:"CateId,omitempty"`
	// The page number. Default value: 1
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Valid values: 10 to 100.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The sorting rule of results. Valid values:
	//
	// \\- CreationTime:Desc (default): The results are sorted in reverse chronological order based on the creation time.
	//
	// \\- CreationTime:Asc: The results are sorted in chronological order based on the creation time.
	//
	// example:
	//
	// CreationTime:Desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The type of the category. Valid values: default and material. A value of default indicates audio, video, and image files. This is the default value. A value of material indicates short video materials.
	//
	// example:
	//
	// default
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetCategoriesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCategoriesRequest) GoString() string {
	return s.String()
}

func (s *GetCategoriesRequest) SetCateId(v int64) *GetCategoriesRequest {
	s.CateId = &v
	return s
}

func (s *GetCategoriesRequest) SetPageNo(v int64) *GetCategoriesRequest {
	s.PageNo = &v
	return s
}

func (s *GetCategoriesRequest) SetPageSize(v int64) *GetCategoriesRequest {
	s.PageSize = &v
	return s
}

func (s *GetCategoriesRequest) SetSortBy(v string) *GetCategoriesRequest {
	s.SortBy = &v
	return s
}

func (s *GetCategoriesRequest) SetType(v string) *GetCategoriesRequest {
	s.Type = &v
	return s
}

type GetCategoriesResponseBody struct {
	// The information about the category.
	Category *GetCategoriesResponseBodyCategory `json:"Category,omitempty" xml:"Category,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The subcategories in the category.
	SubCategories *GetCategoriesResponseBodySubCategories `json:"SubCategories,omitempty" xml:"SubCategories,omitempty" type:"Struct"`
	// The total number of subcategories.
	//
	// example:
	//
	// 100
	SubTotal *int64 `json:"SubTotal,omitempty" xml:"SubTotal,omitempty"`
}

func (s GetCategoriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCategoriesResponseBody) GoString() string {
	return s.String()
}

func (s *GetCategoriesResponseBody) SetCategory(v *GetCategoriesResponseBodyCategory) *GetCategoriesResponseBody {
	s.Category = v
	return s
}

func (s *GetCategoriesResponseBody) SetRequestId(v string) *GetCategoriesResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCategoriesResponseBody) SetSubCategories(v *GetCategoriesResponseBodySubCategories) *GetCategoriesResponseBody {
	s.SubCategories = v
	return s
}

func (s *GetCategoriesResponseBody) SetSubTotal(v int64) *GetCategoriesResponseBody {
	s.SubTotal = &v
	return s
}

type GetCategoriesResponseBodyCategory struct {
	// The category ID.
	//
	// example:
	//
	// 46
	CateId *int64 `json:"CateId,omitempty" xml:"CateId,omitempty"`
	// The category name.
	CateName *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	// The level of the category. A value of **0*	- indicates a level-1 category, a value of **1*	- indicates a level-2 category, and a value of **2*	- indicates a level-3 category.
	//
	// example:
	//
	// 0
	Level *int64 `json:"Level,omitempty" xml:"Level,omitempty"`
	// The ID of the parent category.
	//
	// example:
	//
	// -1
	ParentId *int64 `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// The type of the category. Valid values:
	//
	// 	- **default**: audio, video, and image files. This is the default value.
	//
	// 	- **material**: short video materials.
	//
	// example:
	//
	// default
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetCategoriesResponseBodyCategory) String() string {
	return tea.Prettify(s)
}

func (s GetCategoriesResponseBodyCategory) GoString() string {
	return s.String()
}

func (s *GetCategoriesResponseBodyCategory) SetCateId(v int64) *GetCategoriesResponseBodyCategory {
	s.CateId = &v
	return s
}

func (s *GetCategoriesResponseBodyCategory) SetCateName(v string) *GetCategoriesResponseBodyCategory {
	s.CateName = &v
	return s
}

func (s *GetCategoriesResponseBodyCategory) SetLevel(v int64) *GetCategoriesResponseBodyCategory {
	s.Level = &v
	return s
}

func (s *GetCategoriesResponseBodyCategory) SetParentId(v int64) *GetCategoriesResponseBodyCategory {
	s.ParentId = &v
	return s
}

func (s *GetCategoriesResponseBodyCategory) SetType(v string) *GetCategoriesResponseBodyCategory {
	s.Type = &v
	return s
}

type GetCategoriesResponseBodySubCategories struct {
	Category []*GetCategoriesResponseBodySubCategoriesCategory `json:"Category,omitempty" xml:"Category,omitempty" type:"Repeated"`
}

func (s GetCategoriesResponseBodySubCategories) String() string {
	return tea.Prettify(s)
}

func (s GetCategoriesResponseBodySubCategories) GoString() string {
	return s.String()
}

func (s *GetCategoriesResponseBodySubCategories) SetCategory(v []*GetCategoriesResponseBodySubCategoriesCategory) *GetCategoriesResponseBodySubCategories {
	s.Category = v
	return s
}

type GetCategoriesResponseBodySubCategoriesCategory struct {
	// The category ID.
	//
	// example:
	//
	// 129
	CateId *int64 `json:"CateId,omitempty" xml:"CateId,omitempty"`
	// The category name.
	//
	// 	- The value can be up to 64 bytes in length.
	//
	// 	- The value is encoded in UTF-8.
	CateName *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	// The level of the category. A value of **0*	- indicates a level-1 category, a value of **1*	- indicates a level-2 category, and a value of **2*	- indicates a level-3 category.
	//
	// example:
	//
	// 1
	Level *int64 `json:"Level,omitempty" xml:"Level,omitempty"`
	// The ID of the parent category.
	//
	// example:
	//
	// 46
	ParentId *int64 `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// The total number of subcategories.
	//
	// example:
	//
	// 100
	SubTotal *int64 `json:"SubTotal,omitempty" xml:"SubTotal,omitempty"`
	// The type of the category. Valid values:
	//
	// 	- **default**: audio, video, and image files. This is the default value.
	//
	// 	- **material**: short video materials.
	//
	// example:
	//
	// default
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetCategoriesResponseBodySubCategoriesCategory) String() string {
	return tea.Prettify(s)
}

func (s GetCategoriesResponseBodySubCategoriesCategory) GoString() string {
	return s.String()
}

func (s *GetCategoriesResponseBodySubCategoriesCategory) SetCateId(v int64) *GetCategoriesResponseBodySubCategoriesCategory {
	s.CateId = &v
	return s
}

func (s *GetCategoriesResponseBodySubCategoriesCategory) SetCateName(v string) *GetCategoriesResponseBodySubCategoriesCategory {
	s.CateName = &v
	return s
}

func (s *GetCategoriesResponseBodySubCategoriesCategory) SetLevel(v int64) *GetCategoriesResponseBodySubCategoriesCategory {
	s.Level = &v
	return s
}

func (s *GetCategoriesResponseBodySubCategoriesCategory) SetParentId(v int64) *GetCategoriesResponseBodySubCategoriesCategory {
	s.ParentId = &v
	return s
}

func (s *GetCategoriesResponseBodySubCategoriesCategory) SetSubTotal(v int64) *GetCategoriesResponseBodySubCategoriesCategory {
	s.SubTotal = &v
	return s
}

func (s *GetCategoriesResponseBodySubCategoriesCategory) SetType(v string) *GetCategoriesResponseBodySubCategoriesCategory {
	s.Type = &v
	return s
}

type GetCategoriesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCategoriesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCategoriesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCategoriesResponse) GoString() string {
	return s.String()
}

func (s *GetCategoriesResponse) SetHeaders(v map[string]*string) *GetCategoriesResponse {
	s.Headers = v
	return s
}

func (s *GetCategoriesResponse) SetStatusCode(v int32) *GetCategoriesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCategoriesResponse) SetBody(v *GetCategoriesResponseBody) *GetCategoriesResponse {
	s.Body = v
	return s
}

type GetChannelRequest struct {
	// The name of the channel.
	//
	// This parameter is required.
	//
	// example:
	//
	// MyChannel
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
}

func (s GetChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s GetChannelRequest) GoString() string {
	return s.String()
}

func (s *GetChannelRequest) SetChannelName(v string) *GetChannelRequest {
	s.ChannelName = &v
	return s
}

type GetChannelResponseBody struct {
	// The channel information.
	Channel *ChannelAssemblyChannel `json:"Channel,omitempty" xml:"Channel,omitempty"`
	// **Request ID**
	//
	// example:
	//
	// xxx-xxxx-xxxxx-xxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetChannelResponseBody) GoString() string {
	return s.String()
}

func (s *GetChannelResponseBody) SetChannel(v *ChannelAssemblyChannel) *GetChannelResponseBody {
	s.Channel = v
	return s
}

func (s *GetChannelResponseBody) SetRequestId(v string) *GetChannelResponseBody {
	s.RequestId = &v
	return s
}

type GetChannelResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetChannelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s GetChannelResponse) GoString() string {
	return s.String()
}

func (s *GetChannelResponse) SetHeaders(v map[string]*string) *GetChannelResponse {
	s.Headers = v
	return s
}

func (s *GetChannelResponse) SetStatusCode(v int32) *GetChannelResponse {
	s.StatusCode = &v
	return s
}

func (s *GetChannelResponse) SetBody(v *GetChannelResponseBody) *GetChannelResponse {
	s.Body = v
	return s
}

type GetContentAnalyzeConfigResponseBody struct {
	ContentAnalyzeConfig *GetContentAnalyzeConfigResponseBodyContentAnalyzeConfig `json:"ContentAnalyzeConfig,omitempty" xml:"ContentAnalyzeConfig,omitempty" type:"Struct"`
	// example:
	//
	// 31FEC819-2344-5771-9366-9172DB0D26C9
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetContentAnalyzeConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetContentAnalyzeConfigResponseBody) GoString() string {
	return s.String()
}

func (s *GetContentAnalyzeConfigResponseBody) SetContentAnalyzeConfig(v *GetContentAnalyzeConfigResponseBodyContentAnalyzeConfig) *GetContentAnalyzeConfigResponseBody {
	s.ContentAnalyzeConfig = v
	return s
}

func (s *GetContentAnalyzeConfigResponseBody) SetRequestId(v string) *GetContentAnalyzeConfigResponseBody {
	s.RequestId = &v
	return s
}

type GetContentAnalyzeConfigResponseBodyContentAnalyzeConfig struct {
	// example:
	//
	// true
	Auto *bool `json:"Auto,omitempty" xml:"Auto,omitempty"`
	// example:
	//
	// TEXT,FACE
	SaveType *string `json:"SaveType,omitempty" xml:"SaveType,omitempty"`
	// example:
	//
	// S00000101-100070
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetContentAnalyzeConfigResponseBodyContentAnalyzeConfig) String() string {
	return tea.Prettify(s)
}

func (s GetContentAnalyzeConfigResponseBodyContentAnalyzeConfig) GoString() string {
	return s.String()
}

func (s *GetContentAnalyzeConfigResponseBodyContentAnalyzeConfig) SetAuto(v bool) *GetContentAnalyzeConfigResponseBodyContentAnalyzeConfig {
	s.Auto = &v
	return s
}

func (s *GetContentAnalyzeConfigResponseBodyContentAnalyzeConfig) SetSaveType(v string) *GetContentAnalyzeConfigResponseBodyContentAnalyzeConfig {
	s.SaveType = &v
	return s
}

func (s *GetContentAnalyzeConfigResponseBodyContentAnalyzeConfig) SetTemplateId(v string) *GetContentAnalyzeConfigResponseBodyContentAnalyzeConfig {
	s.TemplateId = &v
	return s
}

type GetContentAnalyzeConfigResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetContentAnalyzeConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetContentAnalyzeConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetContentAnalyzeConfigResponse) GoString() string {
	return s.String()
}

func (s *GetContentAnalyzeConfigResponse) SetHeaders(v map[string]*string) *GetContentAnalyzeConfigResponse {
	s.Headers = v
	return s
}

func (s *GetContentAnalyzeConfigResponse) SetStatusCode(v int32) *GetContentAnalyzeConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *GetContentAnalyzeConfigResponse) SetBody(v *GetContentAnalyzeConfigResponseBody) *GetContentAnalyzeConfigResponse {
	s.Body = v
	return s
}

type GetCustomTemplateRequest struct {
	// The template subtype.
	//
	// example:
	//
	// 1
	Subtype *int32 `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// The template ID.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The ID of the template type that is used to query the default template. This parameter is required if TemplateId is not specified.
	//
	// example:
	//
	// 1
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetCustomTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTemplateRequest) GoString() string {
	return s.String()
}

func (s *GetCustomTemplateRequest) SetSubtype(v int32) *GetCustomTemplateRequest {
	s.Subtype = &v
	return s
}

func (s *GetCustomTemplateRequest) SetTemplateId(v string) *GetCustomTemplateRequest {
	s.TemplateId = &v
	return s
}

func (s *GetCustomTemplateRequest) SetType(v int32) *GetCustomTemplateRequest {
	s.Type = &v
	return s
}

type GetCustomTemplateResponseBody struct {
	// The template information.
	CustomTemplate *GetCustomTemplateResponseBodyCustomTemplate `json:"CustomTemplate,omitempty" xml:"CustomTemplate,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetCustomTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *GetCustomTemplateResponseBody) SetCustomTemplate(v *GetCustomTemplateResponseBodyCustomTemplate) *GetCustomTemplateResponseBody {
	s.CustomTemplate = v
	return s
}

func (s *GetCustomTemplateResponseBody) SetRequestId(v string) *GetCustomTemplateResponseBody {
	s.RequestId = &v
	return s
}

type GetCustomTemplateResponseBodyCustomTemplate struct {
	// The time when the template was created.
	//
	// example:
	//
	// 2022-01-01T10:00:00Z
	CreateTime   *string                                                  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	FrontendHint *GetCustomTemplateResponseBodyCustomTemplateFrontendHint `json:"FrontendHint,omitempty" xml:"FrontendHint,omitempty" type:"Struct"`
	// Indicates whether the template is the default template.
	//
	// example:
	//
	// true
	IsDefault *bool `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	// The time when the template was last modified.
	//
	// example:
	//
	// 2022-01-01T11:00:00Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The template state.
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The subtype ID of the template.
	//
	// example:
	//
	// 1
	Subtype *int32 `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// The subtype name of the template.
	//
	// example:
	//
	// Normal
	SubtypeName *string `json:"SubtypeName,omitempty" xml:"SubtypeName,omitempty"`
	// The template parameters.
	//
	// example:
	//
	// {"Type":"Normal","FrameType":"normal","Time":0,"Count":10}
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// The template ID.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The template name.
	//
	// example:
	//
	// 测试转码模板
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// The type ID of the template.
	//
	// example:
	//
	// 2
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
	// The type name of the template.
	//
	// example:
	//
	// SnapshotTemplate
	TypeName *string `json:"TypeName,omitempty" xml:"TypeName,omitempty"`
}

func (s GetCustomTemplateResponseBodyCustomTemplate) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTemplateResponseBodyCustomTemplate) GoString() string {
	return s.String()
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetCreateTime(v string) *GetCustomTemplateResponseBodyCustomTemplate {
	s.CreateTime = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetFrontendHint(v *GetCustomTemplateResponseBodyCustomTemplateFrontendHint) *GetCustomTemplateResponseBodyCustomTemplate {
	s.FrontendHint = v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetIsDefault(v bool) *GetCustomTemplateResponseBodyCustomTemplate {
	s.IsDefault = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetModifiedTime(v string) *GetCustomTemplateResponseBodyCustomTemplate {
	s.ModifiedTime = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetStatus(v string) *GetCustomTemplateResponseBodyCustomTemplate {
	s.Status = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetSubtype(v int32) *GetCustomTemplateResponseBodyCustomTemplate {
	s.Subtype = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetSubtypeName(v string) *GetCustomTemplateResponseBodyCustomTemplate {
	s.SubtypeName = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetTemplateConfig(v string) *GetCustomTemplateResponseBodyCustomTemplate {
	s.TemplateConfig = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetTemplateId(v string) *GetCustomTemplateResponseBodyCustomTemplate {
	s.TemplateId = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetTemplateName(v string) *GetCustomTemplateResponseBodyCustomTemplate {
	s.TemplateName = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetType(v int32) *GetCustomTemplateResponseBodyCustomTemplate {
	s.Type = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetTypeName(v string) *GetCustomTemplateResponseBodyCustomTemplate {
	s.TypeName = &v
	return s
}

type GetCustomTemplateResponseBodyCustomTemplateFrontendHint struct {
	TranscodeTemplateHint *GetCustomTemplateResponseBodyCustomTemplateFrontendHintTranscodeTemplateHint `json:"TranscodeTemplateHint,omitempty" xml:"TranscodeTemplateHint,omitempty" type:"Struct"`
}

func (s GetCustomTemplateResponseBodyCustomTemplateFrontendHint) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTemplateResponseBodyCustomTemplateFrontendHint) GoString() string {
	return s.String()
}

func (s *GetCustomTemplateResponseBodyCustomTemplateFrontendHint) SetTranscodeTemplateHint(v *GetCustomTemplateResponseBodyCustomTemplateFrontendHintTranscodeTemplateHint) *GetCustomTemplateResponseBodyCustomTemplateFrontendHint {
	s.TranscodeTemplateHint = v
	return s
}

type GetCustomTemplateResponseBodyCustomTemplateFrontendHintTranscodeTemplateHint struct {
	BitrateControlType *string `json:"BitrateControlType,omitempty" xml:"BitrateControlType,omitempty"`
}

func (s GetCustomTemplateResponseBodyCustomTemplateFrontendHintTranscodeTemplateHint) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTemplateResponseBodyCustomTemplateFrontendHintTranscodeTemplateHint) GoString() string {
	return s.String()
}

func (s *GetCustomTemplateResponseBodyCustomTemplateFrontendHintTranscodeTemplateHint) SetBitrateControlType(v string) *GetCustomTemplateResponseBodyCustomTemplateFrontendHintTranscodeTemplateHint {
	s.BitrateControlType = &v
	return s
}

type GetCustomTemplateResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCustomTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCustomTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTemplateResponse) GoString() string {
	return s.String()
}

func (s *GetCustomTemplateResponse) SetHeaders(v map[string]*string) *GetCustomTemplateResponse {
	s.Headers = v
	return s
}

func (s *GetCustomTemplateResponse) SetStatusCode(v int32) *GetCustomTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCustomTemplateResponse) SetBody(v *GetCustomTemplateResponseBody) *GetCustomTemplateResponse {
	s.Body = v
	return s
}

type GetCustomizedVoiceRequest struct {
	// The voice ID.
	//
	// example:
	//
	// xiaozhuan
	VoiceId *string `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
}

func (s GetCustomizedVoiceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCustomizedVoiceRequest) GoString() string {
	return s.String()
}

func (s *GetCustomizedVoiceRequest) SetVoiceId(v string) *GetCustomizedVoiceRequest {
	s.VoiceId = &v
	return s
}

type GetCustomizedVoiceResponseBody struct {
	// The data returned.
	Data *GetCustomizedVoiceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ****63E8B7C7-4812-46AD-0FA56029AC86****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetCustomizedVoiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCustomizedVoiceResponseBody) GoString() string {
	return s.String()
}

func (s *GetCustomizedVoiceResponseBody) SetData(v *GetCustomizedVoiceResponseBodyData) *GetCustomizedVoiceResponseBody {
	s.Data = v
	return s
}

func (s *GetCustomizedVoiceResponseBody) SetRequestId(v string) *GetCustomizedVoiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCustomizedVoiceResponseBody) SetSuccess(v bool) *GetCustomizedVoiceResponseBody {
	s.Success = &v
	return s
}

type GetCustomizedVoiceResponseBodyData struct {
	// The personalized human voice.
	CustomizedVoice *GetCustomizedVoiceResponseBodyDataCustomizedVoice `json:"CustomizedVoice,omitempty" xml:"CustomizedVoice,omitempty" type:"Struct"`
}

func (s GetCustomizedVoiceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetCustomizedVoiceResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetCustomizedVoiceResponseBodyData) SetCustomizedVoice(v *GetCustomizedVoiceResponseBodyDataCustomizedVoice) *GetCustomizedVoiceResponseBodyData {
	s.CustomizedVoice = v
	return s
}

type GetCustomizedVoiceResponseBodyDataCustomizedVoice struct {
	// The media asset ID of the sample audio file.
	//
	// example:
	//
	// ****42d3c312402982be65975f5b****
	DemoAudioMediaId *string `json:"DemoAudioMediaId,omitempty" xml:"DemoAudioMediaId,omitempty"`
	// The gender. Valid values:
	//
	// 	- female
	//
	// 	- male
	//
	// example:
	//
	// female
	Gender *string `json:"Gender,omitempty" xml:"Gender,omitempty"`
	// The demonstration scenario.
	//
	// Valid values:
	//
	// 	- **story**
	//
	// 	- **interaction**
	//
	// 	- **navigation**
	//
	// example:
	//
	// interaction
	Scenario *string `json:"Scenario,omitempty" xml:"Scenario,omitempty"`
	// The voice description.
	VoiceDesc *string `json:"VoiceDesc,omitempty" xml:"VoiceDesc,omitempty"`
	// The voice ID.
	//
	// example:
	//
	// xiaozhuan
	VoiceId *string `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
	// The voice name.
	VoiceName *string `json:"VoiceName,omitempty" xml:"VoiceName,omitempty"`
}

func (s GetCustomizedVoiceResponseBodyDataCustomizedVoice) String() string {
	return tea.Prettify(s)
}

func (s GetCustomizedVoiceResponseBodyDataCustomizedVoice) GoString() string {
	return s.String()
}

func (s *GetCustomizedVoiceResponseBodyDataCustomizedVoice) SetDemoAudioMediaId(v string) *GetCustomizedVoiceResponseBodyDataCustomizedVoice {
	s.DemoAudioMediaId = &v
	return s
}

func (s *GetCustomizedVoiceResponseBodyDataCustomizedVoice) SetGender(v string) *GetCustomizedVoiceResponseBodyDataCustomizedVoice {
	s.Gender = &v
	return s
}

func (s *GetCustomizedVoiceResponseBodyDataCustomizedVoice) SetScenario(v string) *GetCustomizedVoiceResponseBodyDataCustomizedVoice {
	s.Scenario = &v
	return s
}

func (s *GetCustomizedVoiceResponseBodyDataCustomizedVoice) SetVoiceDesc(v string) *GetCustomizedVoiceResponseBodyDataCustomizedVoice {
	s.VoiceDesc = &v
	return s
}

func (s *GetCustomizedVoiceResponseBodyDataCustomizedVoice) SetVoiceId(v string) *GetCustomizedVoiceResponseBodyDataCustomizedVoice {
	s.VoiceId = &v
	return s
}

func (s *GetCustomizedVoiceResponseBodyDataCustomizedVoice) SetVoiceName(v string) *GetCustomizedVoiceResponseBodyDataCustomizedVoice {
	s.VoiceName = &v
	return s
}

type GetCustomizedVoiceResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCustomizedVoiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCustomizedVoiceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCustomizedVoiceResponse) GoString() string {
	return s.String()
}

func (s *GetCustomizedVoiceResponse) SetHeaders(v map[string]*string) *GetCustomizedVoiceResponse {
	s.Headers = v
	return s
}

func (s *GetCustomizedVoiceResponse) SetStatusCode(v int32) *GetCustomizedVoiceResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCustomizedVoiceResponse) SetBody(v *GetCustomizedVoiceResponseBody) *GetCustomizedVoiceResponse {
	s.Body = v
	return s
}

type GetCustomizedVoiceJobRequest struct {
	// The ID of the human voice cloning job.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetCustomizedVoiceJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCustomizedVoiceJobRequest) GoString() string {
	return s.String()
}

func (s *GetCustomizedVoiceJobRequest) SetJobId(v string) *GetCustomizedVoiceJobRequest {
	s.JobId = &v
	return s
}

type GetCustomizedVoiceJobResponseBody struct {
	// The data returned if the request was successful.
	Data *GetCustomizedVoiceJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ****63E8B7C7-4812-46AD-0FA56029AC86****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetCustomizedVoiceJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCustomizedVoiceJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetCustomizedVoiceJobResponseBody) SetData(v *GetCustomizedVoiceJobResponseBodyData) *GetCustomizedVoiceJobResponseBody {
	s.Data = v
	return s
}

func (s *GetCustomizedVoiceJobResponseBody) SetRequestId(v string) *GetCustomizedVoiceJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCustomizedVoiceJobResponseBody) SetSuccess(v bool) *GetCustomizedVoiceJobResponseBody {
	s.Success = &v
	return s
}

type GetCustomizedVoiceJobResponseBodyData struct {
	// The information about the human voice cloning job.
	CustomizedVoiceJob *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob `json:"CustomizedVoiceJob,omitempty" xml:"CustomizedVoiceJob,omitempty" type:"Struct"`
}

func (s GetCustomizedVoiceJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetCustomizedVoiceJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetCustomizedVoiceJobResponseBodyData) SetCustomizedVoiceJob(v *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob) *GetCustomizedVoiceJobResponseBodyData {
	s.CustomizedVoiceJob = v
	return s
}

type GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob struct {
	// The time when the job was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2023-06-07T02:27:08Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The gender. Valid values:
	//
	// 	- female
	//
	// 	- male
	//
	// example:
	//
	// female
	Gender *string `json:"Gender,omitempty" xml:"Gender,omitempty"`
	// The ID of the human voice cloning job.
	//
	// example:
	//
	// ****571c704445f9a0ee011406c2****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The status description.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The scenario. Valid values:
	//
	// 	- story
	//
	// 	- interaction
	//
	// 	- navigation
	//
	// example:
	//
	// story
	Scenario *string `json:"Scenario,omitempty" xml:"Scenario,omitempty"`
	// The job state. Valid values:
	//
	// 	- Initialization
	//
	// 	- AudioDetecting
	//
	// 	- PreTraining
	//
	// 	- Training
	//
	// 	- Success
	//
	// 	- Fail
	//
	// example:
	//
	// Fail
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the human voice cloning job. Valid values:
	//
	// 	- Basic
	//
	// 	- Standard
	//
	// example:
	//
	// Standard
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The voice description.
	//
	// example:
	//
	// This is an exclusive voice
	VoiceDesc *string `json:"VoiceDesc,omitempty" xml:"VoiceDesc,omitempty"`
	// The voice ID.
	//
	// example:
	//
	// xiaozhuan
	VoiceId *string `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
	// The voice name.
	//
	// example:
	//
	// Xiaozhuan
	VoiceName *string `json:"VoiceName,omitempty" xml:"VoiceName,omitempty"`
}

func (s GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob) String() string {
	return tea.Prettify(s)
}

func (s GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob) GoString() string {
	return s.String()
}

func (s *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob) SetCreateTime(v string) *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob {
	s.CreateTime = &v
	return s
}

func (s *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob) SetGender(v string) *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob {
	s.Gender = &v
	return s
}

func (s *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob) SetJobId(v string) *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob {
	s.JobId = &v
	return s
}

func (s *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob) SetMessage(v string) *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob {
	s.Message = &v
	return s
}

func (s *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob) SetScenario(v string) *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob {
	s.Scenario = &v
	return s
}

func (s *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob) SetStatus(v string) *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob {
	s.Status = &v
	return s
}

func (s *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob) SetType(v string) *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob {
	s.Type = &v
	return s
}

func (s *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob) SetVoiceDesc(v string) *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob {
	s.VoiceDesc = &v
	return s
}

func (s *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob) SetVoiceId(v string) *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob {
	s.VoiceId = &v
	return s
}

func (s *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob) SetVoiceName(v string) *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob {
	s.VoiceName = &v
	return s
}

type GetCustomizedVoiceJobResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCustomizedVoiceJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCustomizedVoiceJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCustomizedVoiceJobResponse) GoString() string {
	return s.String()
}

func (s *GetCustomizedVoiceJobResponse) SetHeaders(v map[string]*string) *GetCustomizedVoiceJobResponse {
	s.Headers = v
	return s
}

func (s *GetCustomizedVoiceJobResponse) SetStatusCode(v int32) *GetCustomizedVoiceJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCustomizedVoiceJobResponse) SetBody(v *GetCustomizedVoiceJobResponseBody) *GetCustomizedVoiceJobResponse {
	s.Body = v
	return s
}

type GetDefaultStorageLocationResponseBody struct {
	// example:
	//
	// oss-test-bucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// example:
	//
	// ice/dir
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// user_oss_bucket
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s GetDefaultStorageLocationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDefaultStorageLocationResponseBody) GoString() string {
	return s.String()
}

func (s *GetDefaultStorageLocationResponseBody) SetBucket(v string) *GetDefaultStorageLocationResponseBody {
	s.Bucket = &v
	return s
}

func (s *GetDefaultStorageLocationResponseBody) SetPath(v string) *GetDefaultStorageLocationResponseBody {
	s.Path = &v
	return s
}

func (s *GetDefaultStorageLocationResponseBody) SetRequestId(v string) *GetDefaultStorageLocationResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDefaultStorageLocationResponseBody) SetStatus(v string) *GetDefaultStorageLocationResponseBody {
	s.Status = &v
	return s
}

func (s *GetDefaultStorageLocationResponseBody) SetStorageType(v string) *GetDefaultStorageLocationResponseBody {
	s.StorageType = &v
	return s
}

type GetDefaultStorageLocationResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDefaultStorageLocationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDefaultStorageLocationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDefaultStorageLocationResponse) GoString() string {
	return s.String()
}

func (s *GetDefaultStorageLocationResponse) SetHeaders(v map[string]*string) *GetDefaultStorageLocationResponse {
	s.Headers = v
	return s
}

func (s *GetDefaultStorageLocationResponse) SetStatusCode(v int32) *GetDefaultStorageLocationResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDefaultStorageLocationResponse) SetBody(v *GetDefaultStorageLocationResponseBody) *GetDefaultStorageLocationResponse {
	s.Body = v
	return s
}

type GetDemonstrationForCustomizedVoiceJobRequest struct {
	// The demonstration scenario.
	//
	// Valid values:
	//
	// 	- **story**
	//
	// 	- **interaction**
	//
	// 	- **navigation**
	//
	// This parameter is required.
	//
	// example:
	//
	// story
	Scenario *string `json:"Scenario,omitempty" xml:"Scenario,omitempty"`
}

func (s GetDemonstrationForCustomizedVoiceJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDemonstrationForCustomizedVoiceJobRequest) GoString() string {
	return s.String()
}

func (s *GetDemonstrationForCustomizedVoiceJobRequest) SetScenario(v string) *GetDemonstrationForCustomizedVoiceJobRequest {
	s.Scenario = &v
	return s
}

type GetDemonstrationForCustomizedVoiceJobResponseBody struct {
	// The data returned.
	Data *GetDemonstrationForCustomizedVoiceJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDemonstrationForCustomizedVoiceJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDemonstrationForCustomizedVoiceJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetDemonstrationForCustomizedVoiceJobResponseBody) SetData(v *GetDemonstrationForCustomizedVoiceJobResponseBodyData) *GetDemonstrationForCustomizedVoiceJobResponseBody {
	s.Data = v
	return s
}

func (s *GetDemonstrationForCustomizedVoiceJobResponseBody) SetRequestId(v string) *GetDemonstrationForCustomizedVoiceJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDemonstrationForCustomizedVoiceJobResponseBody) SetSuccess(v bool) *GetDemonstrationForCustomizedVoiceJobResponseBody {
	s.Success = &v
	return s
}

type GetDemonstrationForCustomizedVoiceJobResponseBodyData struct {
	// A list of 20 text entries to be read and the corresponding sample audio.
	DemonstrationList []*GetDemonstrationForCustomizedVoiceJobResponseBodyDataDemonstrationList `json:"DemonstrationList,omitempty" xml:"DemonstrationList,omitempty" type:"Repeated"`
}

func (s GetDemonstrationForCustomizedVoiceJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDemonstrationForCustomizedVoiceJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDemonstrationForCustomizedVoiceJobResponseBodyData) SetDemonstrationList(v []*GetDemonstrationForCustomizedVoiceJobResponseBodyDataDemonstrationList) *GetDemonstrationForCustomizedVoiceJobResponseBodyData {
	s.DemonstrationList = v
	return s
}

type GetDemonstrationForCustomizedVoiceJobResponseBodyDataDemonstrationList struct {
	// The sequence number of the text, which corresponds to the AduioRecordId parameter to be passed during audio check.
	//
	// example:
	//
	// 2
	AudioId *int32 `json:"AudioId,omitempty" xml:"AudioId,omitempty"`
	// The URL of the sample audio.
	//
	// 	- The value is an Object Storage Service (OSS) URL.
	//
	//     **
	//
	//     **Note**: The URL expires in 12 hours.
	//
	// example:
	//
	// http://bucket.oss-cn-shanghai.aliyuncs.com/1.wav
	DemoAudio *string `json:"DemoAudio,omitempty" xml:"DemoAudio,omitempty"`
	// The text content to be read.
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s GetDemonstrationForCustomizedVoiceJobResponseBodyDataDemonstrationList) String() string {
	return tea.Prettify(s)
}

func (s GetDemonstrationForCustomizedVoiceJobResponseBodyDataDemonstrationList) GoString() string {
	return s.String()
}

func (s *GetDemonstrationForCustomizedVoiceJobResponseBodyDataDemonstrationList) SetAudioId(v int32) *GetDemonstrationForCustomizedVoiceJobResponseBodyDataDemonstrationList {
	s.AudioId = &v
	return s
}

func (s *GetDemonstrationForCustomizedVoiceJobResponseBodyDataDemonstrationList) SetDemoAudio(v string) *GetDemonstrationForCustomizedVoiceJobResponseBodyDataDemonstrationList {
	s.DemoAudio = &v
	return s
}

func (s *GetDemonstrationForCustomizedVoiceJobResponseBodyDataDemonstrationList) SetText(v string) *GetDemonstrationForCustomizedVoiceJobResponseBodyDataDemonstrationList {
	s.Text = &v
	return s
}

type GetDemonstrationForCustomizedVoiceJobResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDemonstrationForCustomizedVoiceJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDemonstrationForCustomizedVoiceJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDemonstrationForCustomizedVoiceJobResponse) GoString() string {
	return s.String()
}

func (s *GetDemonstrationForCustomizedVoiceJobResponse) SetHeaders(v map[string]*string) *GetDemonstrationForCustomizedVoiceJobResponse {
	s.Headers = v
	return s
}

func (s *GetDemonstrationForCustomizedVoiceJobResponse) SetStatusCode(v int32) *GetDemonstrationForCustomizedVoiceJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDemonstrationForCustomizedVoiceJobResponse) SetBody(v *GetDemonstrationForCustomizedVoiceJobResponseBody) *GetDemonstrationForCustomizedVoiceJobResponse {
	s.Body = v
	return s
}

type GetDynamicImageJobRequest struct {
	// The job ID.
	//
	// example:
	//
	// ****d80e4e4044975745c14b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetDynamicImageJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDynamicImageJobRequest) GoString() string {
	return s.String()
}

func (s *GetDynamicImageJobRequest) SetJobId(v string) *GetDynamicImageJobRequest {
	s.JobId = &v
	return s
}

type GetDynamicImageJobResponseBody struct {
	// The information about the snapshot job.
	DynamicImageJob *GetDynamicImageJobResponseBodyDynamicImageJob `json:"DynamicImageJob,omitempty" xml:"DynamicImageJob,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ******36-3C1E-4417-BDB2-1E034F******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetDynamicImageJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDynamicImageJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetDynamicImageJobResponseBody) SetDynamicImageJob(v *GetDynamicImageJobResponseBodyDynamicImageJob) *GetDynamicImageJobResponseBody {
	s.DynamicImageJob = v
	return s
}

func (s *GetDynamicImageJobResponseBody) SetRequestId(v string) *GetDynamicImageJobResponseBody {
	s.RequestId = &v
	return s
}

type GetDynamicImageJobResponseBodyDynamicImageJob struct {
	// Error codes
	//
	// example:
	//
	// ResourceNotFound
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The time when the job was created.
	//
	// example:
	//
	// 2022-07-12T16:17:54Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the job was complete.
	//
	// example:
	//
	// 2022-07-12T16:30:54Z
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The input of the job.
	Input *GetDynamicImageJobResponseBodyDynamicImageJobInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// The job ID.
	//
	// example:
	//
	// ****d80e4e4044975745c14b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The error message that is returned.
	//
	// example:
	//
	// The specified resource for "CustomTemplate" could not be found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The time when the job was last modified.
	//
	// example:
	//
	// 2022-07-12T16:30:54Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The name of the job.
	//
	// example:
	//
	// SampleJob
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output of the job.
	Output *GetDynamicImageJobResponseBodyDynamicImageJobOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// The URL of the output animated image.
	//
	// example:
	//
	// http://test-bucket.oss-cn-shanghai.aliyuncs.com/output.gif
	OutputUrl *string `json:"OutputUrl,omitempty" xml:"OutputUrl,omitempty"`
	// The ID of the MPS queue to which the job was submitted.
	//
	// example:
	//
	// ****d80e4e4044975745c14b****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The state of the job.
	//
	// Valid values:
	//
	// 	- Init: The job is submitted.
	//
	// 	- Success: The job is successful.
	//
	// 	- Fail: The job failed.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The time when the job was submitted.
	//
	// example:
	//
	// 2022-07-12T16:17:54Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// The animation template configuration.
	//
	// example:
	//
	// {"Format":"gif","Fps":5,"Height":1080,"Width":1920}
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// The template ID.
	//
	// example:
	//
	// ****d80e4e4044975745c14b****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The request trigger source.
	//
	// Valid values:
	//
	// 	- Console
	//
	// 	- Workflow
	//
	// 	- API
	//
	// example:
	//
	// API
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// The user-defined data.
	//
	// example:
	//
	// {"sampleParam": "sampleValue"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetDynamicImageJobResponseBodyDynamicImageJob) String() string {
	return tea.Prettify(s)
}

func (s GetDynamicImageJobResponseBodyDynamicImageJob) GoString() string {
	return s.String()
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetCode(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.Code = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetCreateTime(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.CreateTime = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetFinishTime(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.FinishTime = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetInput(v *GetDynamicImageJobResponseBodyDynamicImageJobInput) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.Input = v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetJobId(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.JobId = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetMessage(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.Message = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetModifiedTime(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.ModifiedTime = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetName(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.Name = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetOutput(v *GetDynamicImageJobResponseBodyDynamicImageJobOutput) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.Output = v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetOutputUrl(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.OutputUrl = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetPipelineId(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.PipelineId = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetStatus(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.Status = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetSubmitTime(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.SubmitTime = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetTemplateConfig(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.TemplateConfig = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetTemplateId(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.TemplateId = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetTriggerSource(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.TriggerSource = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetUserData(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.UserData = &v
	return s
}

type GetDynamicImageJobResponseBodyDynamicImageJobInput struct {
	// The input file. If Type is set to OSS, the URL of an OSS object is returned. If Type is set to Media, the ID of a media asset is returned. The URL of an OSS object can be in one of the following formats:
	//
	// 1.  OSS://bucket/object
	//
	// 2.  http(s)://bucket.oss-[RegionId].aliyuncs.com/object
	//
	// In the URL, bucket specifies an OSS bucket that resides in the same region as the job, and object specifies the object URL in OSS.
	//
	// example:
	//
	// oss://test-bucket/sample-input.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The three key elements of OSS.
	OssFile *GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile `json:"OssFile,omitempty" xml:"OssFile,omitempty" type:"Struct"`
	// The type of the input file. Valid values:
	//
	// 1.  OSS: an Object Storage Service (OSS) object.
	//
	// 2.  Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDynamicImageJobResponseBodyDynamicImageJobInput) String() string {
	return tea.Prettify(s)
}

func (s GetDynamicImageJobResponseBodyDynamicImageJobInput) GoString() string {
	return s.String()
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobInput) SetMedia(v string) *GetDynamicImageJobResponseBodyDynamicImageJobInput {
	s.Media = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobInput) SetOssFile(v *GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile) *GetDynamicImageJobResponseBodyDynamicImageJobInput {
	s.OssFile = v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobInput) SetType(v string) *GetDynamicImageJobResponseBodyDynamicImageJobInput {
	s.Type = &v
	return s
}

type GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile struct {
	// The OSS bucket.
	//
	// example:
	//
	// test-bucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// The OSS location.
	//
	// example:
	//
	// oss-cn-shanghai
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The OSS object.
	//
	// example:
	//
	// sample-input.mp4
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile) String() string {
	return tea.Prettify(s)
}

func (s GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile) GoString() string {
	return s.String()
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile) SetBucket(v string) *GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile {
	s.Bucket = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile) SetLocation(v string) *GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile {
	s.Location = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile) SetObject(v string) *GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile {
	s.Object = &v
	return s
}

type GetDynamicImageJobResponseBodyDynamicImageJobOutput struct {
	// The input file. If Type is set to OSS, the URL of an OSS object is returned. If Type is set to Media, the ID of a media asset is returned. The URL of an OSS object can be in one of the following formats:
	//
	// 1.  OSS://bucket/object
	//
	// 2.  http(s)://bucket.oss-[RegionId].aliyuncs.com/object In the URL, bucket specifies an OSS bucket that resides in the same region as the job, and object specifies the object URL in OSS.
	//
	// example:
	//
	// ****d80e4e4044975745c14b****
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The three key elements of OSS.
	OssFile *GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile `json:"OssFile,omitempty" xml:"OssFile,omitempty" type:"Struct"`
	// The type of the input file. Valid values: OSS: an OSS object. Media: a media asset.
	//
	// example:
	//
	// Media
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDynamicImageJobResponseBodyDynamicImageJobOutput) String() string {
	return tea.Prettify(s)
}

func (s GetDynamicImageJobResponseBodyDynamicImageJobOutput) GoString() string {
	return s.String()
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobOutput) SetMedia(v string) *GetDynamicImageJobResponseBodyDynamicImageJobOutput {
	s.Media = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobOutput) SetOssFile(v *GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile) *GetDynamicImageJobResponseBodyDynamicImageJobOutput {
	s.OssFile = v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobOutput) SetType(v string) *GetDynamicImageJobResponseBodyDynamicImageJobOutput {
	s.Type = &v
	return s
}

type GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile struct {
	// The OSS bucket.
	//
	// example:
	//
	// sample-bucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// The OSS location.
	//
	// example:
	//
	// oss-cn-shanghai
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The OSS object.
	//
	// example:
	//
	// path/to/object
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile) String() string {
	return tea.Prettify(s)
}

func (s GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile) GoString() string {
	return s.String()
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile) SetBucket(v string) *GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile {
	s.Bucket = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile) SetLocation(v string) *GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile {
	s.Location = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile) SetObject(v string) *GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile {
	s.Object = &v
	return s
}

type GetDynamicImageJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDynamicImageJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDynamicImageJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDynamicImageJobResponse) GoString() string {
	return s.String()
}

func (s *GetDynamicImageJobResponse) SetHeaders(v map[string]*string) *GetDynamicImageJobResponse {
	s.Headers = v
	return s
}

func (s *GetDynamicImageJobResponse) SetStatusCode(v int32) *GetDynamicImageJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDynamicImageJobResponse) SetBody(v *GetDynamicImageJobResponseBody) *GetDynamicImageJobResponse {
	s.Body = v
	return s
}

type GetEditingProjectRequest struct {
	// The ID of the online editing project.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****fb2101bf24b2754cb318787dc****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The ID of the request source. Valid values:
	//
	// \\- OpenAPI (default): Timeline conversion is not performed.
	//
	// \\- WebSDK: If you specify this value, the project timeline is automatically converted into the frontend style, and the materials in the timeline are associated with the project to enable preview by using frontend web SDKs.
	//
	// example:
	//
	// WebSDK
	RequestSource *string `json:"RequestSource,omitempty" xml:"RequestSource,omitempty"`
}

func (s GetEditingProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectRequest) GoString() string {
	return s.String()
}

func (s *GetEditingProjectRequest) SetProjectId(v string) *GetEditingProjectRequest {
	s.ProjectId = &v
	return s
}

func (s *GetEditingProjectRequest) SetRequestSource(v string) *GetEditingProjectRequest {
	s.RequestSource = &v
	return s
}

type GetEditingProjectResponseBody struct {
	// The information about the online editing project.
	Project *GetEditingProjectResponseBodyProject `json:"Project,omitempty" xml:"Project,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ****63E8B7C7-4812-46AD-0FA56029AC86****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetEditingProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectResponseBody) GoString() string {
	return s.String()
}

func (s *GetEditingProjectResponseBody) SetProject(v *GetEditingProjectResponseBodyProject) *GetEditingProjectResponseBody {
	s.Project = v
	return s
}

func (s *GetEditingProjectResponseBody) SetRequestId(v string) *GetEditingProjectResponseBody {
	s.RequestId = &v
	return s
}

type GetEditingProjectResponseBodyProject struct {
	// The business configuration of the project. This parameter can be ignored for general editing projects.
	//
	// example:
	//
	// { "OutputMediaConfig" : { "StorageLocation": "test-bucket.oss-cn-shanghai.aliyuncs.com", "Path": "test-path" }, "OutputMediaTarget": "oss-object", "ReservationTime": "2021-06-21T08:05:00Z" }
	BusinessConfig *string `json:"BusinessConfig,omitempty" xml:"BusinessConfig,omitempty"`
	// The business status of the project. This parameter can be ignored for general editing projects. Valid values:
	//
	// Reserving
	//
	// ReservationCanceled
	//
	// BroadCasting
	//
	// LoadingFailed
	//
	// LiveFinished
	//
	// example:
	//
	// Reserving
	BusinessStatus *string `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty"`
	// The material parameter corresponding to the template, in the JSON format. If TemplateId is specified, ClipsParam must also be specified. For more information<props="china">, see [Create and use a regular template](https://help.aliyun.com/document_detail/328557.html) and [Create and use an advanced template](https://help.aliyun.com/document_detail/291418.html).
	ClipsParam *string `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	// The thumbnail URL of the online editing project.
	//
	// example:
	//
	// oss://example-bucket/example.jpg
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// The method for creating the online editing project. Valid values:
	//
	// \\- OpenAPI
	//
	// \\- AliyunConsole
	//
	// \\- WebSDK
	//
	// \\- LiveEditingOpenAPI
	//
	// \\- LiveEditingConsole
	//
	// example:
	//
	// OpenAPI
	CreateSource *string `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	// The time when the online editing project was created.
	//
	// example:
	//
	// 2020-12-20T12:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The description of the online editing project.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The total duration of the online editing project.
	//
	// example:
	//
	// 24.120000
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The method for editing the online editing project. Valid values:
	//
	// \\- OpenAPI
	//
	// \\- AliyunConsole
	//
	// \\- WebSDK
	//
	// \\- LiveEditingOpenAPI
	//
	// \\- LiveEditingConsole
	//
	// example:
	//
	// OpenAPI
	ModifiedSource *string `json:"ModifiedSource,omitempty" xml:"ModifiedSource,omitempty"`
	// The time when the online editing project was last modified.
	//
	// example:
	//
	// 2020-12-20T13:00:00Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The ID of the online editing project.
	//
	// example:
	//
	// ****fb2101bf24b2754cb318787dc****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The type of the editing project. Default value: EditingProject. Valid values:
	//
	// \\- EditingProject: a regular editing project.
	//
	// \\- LiveEditingProject: a live stream editing project.
	//
	// example:
	//
	// EditingProject
	ProjectType *string `json:"ProjectType,omitempty" xml:"ProjectType,omitempty"`
	// The status of the online editing project. Valid values:
	//
	// \\- Draft
	//
	// \\- Editing
	//
	// \\- Producing
	//
	// \\- Produced
	//
	// \\- ProduceFailed
	//
	// \\- Deleted
	//
	// example:
	//
	// Editing
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The template ID.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The template type of the online editing project. Valid values:
	//
	// \\- Timeline
	//
	// \\- VETemplate
	//
	// example:
	//
	// Timeline
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	// The timeline of the online editing project.
	//
	// example:
	//
	// {"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****9b4d7cf14dc7b83b0e801cbe****"},{"MediaId":"****9b4d7cf14dc7b83b0e801cbe****"},{"MediaId":"****1656bca4474999c961a6d2a2****"}]}]}
	Timeline *string `json:"Timeline,omitempty" xml:"Timeline,omitempty"`
	// The error message returned if the project conversion failed. The error message displays the detailed information about the failure, and is returned only if the value of TimelineConvertStatus is ConvertFailed.
	//
	// example:
	//
	// The StorageLocation must be in the same division(apiRegion) as ICE service access point.
	TimelineConvertErrorMessage *string `json:"TimelineConvertErrorMessage,omitempty" xml:"TimelineConvertErrorMessage,omitempty"`
	// The project conversion status. Conversion of an API-style timeline into a frontend-style timeline is an asynchronous process and takes effect only if RequestSource:WebSDK is specified.
	//
	// \\- Unconverted
	//
	// \\- Converting
	//
	// \\- Converted
	//
	// \\- ConvertFailed
	//
	// example:
	//
	// Converted
	TimelineConvertStatus *string `json:"TimelineConvertStatus,omitempty" xml:"TimelineConvertStatus,omitempty"`
	// The title of the online editing project.
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s GetEditingProjectResponseBodyProject) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectResponseBodyProject) GoString() string {
	return s.String()
}

func (s *GetEditingProjectResponseBodyProject) SetBusinessConfig(v string) *GetEditingProjectResponseBodyProject {
	s.BusinessConfig = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetBusinessStatus(v string) *GetEditingProjectResponseBodyProject {
	s.BusinessStatus = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetClipsParam(v string) *GetEditingProjectResponseBodyProject {
	s.ClipsParam = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetCoverURL(v string) *GetEditingProjectResponseBodyProject {
	s.CoverURL = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetCreateSource(v string) *GetEditingProjectResponseBodyProject {
	s.CreateSource = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetCreateTime(v string) *GetEditingProjectResponseBodyProject {
	s.CreateTime = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetDescription(v string) *GetEditingProjectResponseBodyProject {
	s.Description = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetDuration(v int64) *GetEditingProjectResponseBodyProject {
	s.Duration = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetModifiedSource(v string) *GetEditingProjectResponseBodyProject {
	s.ModifiedSource = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetModifiedTime(v string) *GetEditingProjectResponseBodyProject {
	s.ModifiedTime = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetProjectId(v string) *GetEditingProjectResponseBodyProject {
	s.ProjectId = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetProjectType(v string) *GetEditingProjectResponseBodyProject {
	s.ProjectType = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetStatus(v string) *GetEditingProjectResponseBodyProject {
	s.Status = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetTemplateId(v string) *GetEditingProjectResponseBodyProject {
	s.TemplateId = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetTemplateType(v string) *GetEditingProjectResponseBodyProject {
	s.TemplateType = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetTimeline(v string) *GetEditingProjectResponseBodyProject {
	s.Timeline = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetTimelineConvertErrorMessage(v string) *GetEditingProjectResponseBodyProject {
	s.TimelineConvertErrorMessage = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetTimelineConvertStatus(v string) *GetEditingProjectResponseBodyProject {
	s.TimelineConvertStatus = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetTitle(v string) *GetEditingProjectResponseBodyProject {
	s.Title = &v
	return s
}

type GetEditingProjectResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetEditingProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetEditingProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectResponse) GoString() string {
	return s.String()
}

func (s *GetEditingProjectResponse) SetHeaders(v map[string]*string) *GetEditingProjectResponse {
	s.Headers = v
	return s
}

func (s *GetEditingProjectResponse) SetStatusCode(v int32) *GetEditingProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEditingProjectResponse) SetBody(v *GetEditingProjectResponseBody) *GetEditingProjectResponse {
	s.Body = v
	return s
}

type GetEditingProjectMaterialsRequest struct {
	// The ID of the online editing project.
	//
	// This parameter is required.
	//
	// example:
	//
	// *****fb2101cb318*****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetEditingProjectMaterialsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsRequest) GoString() string {
	return s.String()
}

func (s *GetEditingProjectMaterialsRequest) SetProjectId(v string) *GetEditingProjectMaterialsRequest {
	s.ProjectId = &v
	return s
}

type GetEditingProjectMaterialsResponseBody struct {
	// The materials associated with the live stream.
	LiveMaterials []*GetEditingProjectMaterialsResponseBodyLiveMaterials `json:"LiveMaterials,omitempty" xml:"LiveMaterials,omitempty" type:"Repeated"`
	// The media assets that meet the specified conditions.
	MediaInfos []*GetEditingProjectMaterialsResponseBodyMediaInfos `json:"MediaInfos,omitempty" xml:"MediaInfos,omitempty" type:"Repeated"`
	// The project ID.
	//
	// example:
	//
	// *****67ae06542b9b93e0d1c387*****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The materials associated with the editing project. A live stream editing project will be associated with a regular editing project after the live streaming ends.
	//
	// example:
	//
	// *****9b145c5cafc2e057304fcd*****
	ProjectMaterials []*string `json:"ProjectMaterials,omitempty" xml:"ProjectMaterials,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// ******89-C21D-4B78-AE24-3788B8******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetEditingProjectMaterialsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsResponseBody) GoString() string {
	return s.String()
}

func (s *GetEditingProjectMaterialsResponseBody) SetLiveMaterials(v []*GetEditingProjectMaterialsResponseBodyLiveMaterials) *GetEditingProjectMaterialsResponseBody {
	s.LiveMaterials = v
	return s
}

func (s *GetEditingProjectMaterialsResponseBody) SetMediaInfos(v []*GetEditingProjectMaterialsResponseBodyMediaInfos) *GetEditingProjectMaterialsResponseBody {
	s.MediaInfos = v
	return s
}

func (s *GetEditingProjectMaterialsResponseBody) SetProjectId(v string) *GetEditingProjectMaterialsResponseBody {
	s.ProjectId = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBody) SetProjectMaterials(v []*string) *GetEditingProjectMaterialsResponseBody {
	s.ProjectMaterials = v
	return s
}

func (s *GetEditingProjectMaterialsResponseBody) SetRequestId(v string) *GetEditingProjectMaterialsResponseBody {
	s.RequestId = &v
	return s
}

type GetEditingProjectMaterialsResponseBodyLiveMaterials struct {
	// The application name of the live stream.
	//
	// example:
	//
	// testrecord
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The domain name of the live stream.
	//
	// example:
	//
	// test.alivecdn.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The URL of the live stream.
	//
	// example:
	//
	// rtmp://test.alivecdn.com/testrecord/teststream
	LiveUrl *string `json:"LiveUrl,omitempty" xml:"LiveUrl,omitempty"`
	// The name of the live stream.
	//
	// example:
	//
	// testrecord
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s GetEditingProjectMaterialsResponseBodyLiveMaterials) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsResponseBodyLiveMaterials) GoString() string {
	return s.String()
}

func (s *GetEditingProjectMaterialsResponseBodyLiveMaterials) SetAppName(v string) *GetEditingProjectMaterialsResponseBodyLiveMaterials {
	s.AppName = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyLiveMaterials) SetDomainName(v string) *GetEditingProjectMaterialsResponseBodyLiveMaterials {
	s.DomainName = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyLiveMaterials) SetLiveUrl(v string) *GetEditingProjectMaterialsResponseBodyLiveMaterials {
	s.LiveUrl = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyLiveMaterials) SetStreamName(v string) *GetEditingProjectMaterialsResponseBodyLiveMaterials {
	s.StreamName = &v
	return s
}

type GetEditingProjectMaterialsResponseBodyMediaInfos struct {
	// The information about the file.
	FileInfoList []*GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoList `json:"FileInfoList,omitempty" xml:"FileInfoList,omitempty" type:"Repeated"`
	// The basic information of the media asset.
	MediaBasicInfo *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// The ID of the media asset.
	//
	// example:
	//
	// *****64623a94eca8516569c8fe*****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s GetEditingProjectMaterialsResponseBodyMediaInfos) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsResponseBodyMediaInfos) GoString() string {
	return s.String()
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfos) SetFileInfoList(v []*GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoList) *GetEditingProjectMaterialsResponseBodyMediaInfos {
	s.FileInfoList = v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfos) SetMediaBasicInfo(v *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) *GetEditingProjectMaterialsResponseBodyMediaInfos {
	s.MediaBasicInfo = v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfos) SetMediaId(v string) *GetEditingProjectMaterialsResponseBodyMediaInfos {
	s.MediaId = &v
	return s
}

type GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoList struct {
	// The basic information of the file, such as the duration and size.
	FileBasicInfo *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
}

func (s GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoList) GoString() string {
	return s.String()
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoList) SetFileBasicInfo(v *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoList {
	s.FileBasicInfo = v
	return s
}

type GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo struct {
	// The bitrate.
	//
	// example:
	//
	// 1132.68
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The duration.
	//
	// example:
	//
	// 216.206667
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The file name.
	//
	// example:
	//
	// example.mp4
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The file size. Unit: bytes.
	//
	// example:
	//
	// 30611502
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// The file status.
	//
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// The file type.
	//
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// The Object Storage Service (OSS) URL of the file.
	//
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// The container format.
	//
	// example:
	//
	// mov,mp4,m4a,3gp,3g2,mj2
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// The height.
	//
	// example:
	//
	// 540
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The region in which the file resides.
	//
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The width.
	//
	// example:
	//
	// 960
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) GoString() string {
	return s.String()
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetBitrate(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetDuration(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileName(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileSize(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileStatus(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileType(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileUrl(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFormatName(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetHeight(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Height = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetRegion(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Region = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetWidth(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Width = &v
	return s
}

type GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo struct {
	// The business type of the media asset.
	//
	// example:
	//
	// general
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// The category of the media asset.
	//
	// example:
	//
	// video
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The thumbnail URL of the media asset.
	//
	// example:
	//
	// http://sample-bucket.oss-cn-shanghai.aliyuncs.com/sample-corver.jpg?Expires=1628670610&OSSAccessKeyId=AK&Signature=signature
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// The time when the media asset was created.
	//
	// example:
	//
	// 2020-12-26T04:11:08Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the media asset was deleted.
	//
	// example:
	//
	// 2020-12-26T04:11:08Z
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	// The description of the media asset.
	//
	// example:
	//
	// sample_description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The URL of the media asset in another service.
	//
	// example:
	//
	// http://bucket.oss-cn-shanghai.aliyuncs.com/file.mp4
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// *****64623a94eca8516569c8f*****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The tags of the media asset.
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// The type of the media asset.
	//
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// The time when the media asset was last modified.
	//
	// example:
	//
	// 2020-12-26T04:11:08Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The snapshots of the media asset.
	//
	// example:
	//
	// null
	Snapshots *string `json:"Snapshots,omitempty" xml:"Snapshots,omitempty"`
	// The source of the media asset.
	//
	// example:
	//
	// oss
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The sprite of the media asset
	//
	// example:
	//
	// null
	SpriteImages *string `json:"SpriteImages,omitempty" xml:"SpriteImages,omitempty"`
	// The status of the media asset.
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The title of the media asset.
	//
	// example:
	//
	// file.mp4
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// The transcoding status of the media asset.
	//
	// Valid values:
	//
	// 	- TranscodeSuccess: transcoding completed.
	//
	// 	- TranscodeFailed: transcoding failed.
	//
	// 	- Init: initializing.
	//
	// 	- Transcoding: transcoding in progress.
	//
	// example:
	//
	// Init
	TranscodeStatus *string `json:"TranscodeStatus,omitempty" xml:"TranscodeStatus,omitempty"`
	// The user data.
	//
	// example:
	//
	// userData
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetBusinessType(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetCategory(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetCoverURL(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetCreateTime(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetDeletedTime(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetDescription(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetInputURL(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.InputURL = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetMediaId(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetMediaTags(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetMediaType(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetModifiedTime(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetSnapshots(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Snapshots = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetSource(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetSpriteImages(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.SpriteImages = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetStatus(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetTitle(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetTranscodeStatus(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.TranscodeStatus = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetUserData(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.UserData = &v
	return s
}

type GetEditingProjectMaterialsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetEditingProjectMaterialsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetEditingProjectMaterialsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsResponse) GoString() string {
	return s.String()
}

func (s *GetEditingProjectMaterialsResponse) SetHeaders(v map[string]*string) *GetEditingProjectMaterialsResponse {
	s.Headers = v
	return s
}

func (s *GetEditingProjectMaterialsResponse) SetStatusCode(v int32) *GetEditingProjectMaterialsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEditingProjectMaterialsResponse) SetBody(v *GetEditingProjectMaterialsResponseBody) *GetEditingProjectMaterialsResponse {
	s.Body = v
	return s
}

type GetEventCallbackResponseBody struct {
	// The authentication key. This parameter is returned only for HTTP callbacks.
	//
	// example:
	//
	// TestKey001
	AuthKey *string `json:"AuthKey,omitempty" xml:"AuthKey,omitempty"`
	// Specifies whether callback authentication is enabled. This parameter is returned only for **HTTP*	- callbacks. Valid values:
	//
	// 	- **on**
	//
	// 	- **off**
	//
	// example:
	//
	// on
	AuthSwitch *string `json:"AuthSwitch,omitempty" xml:"AuthSwitch,omitempty"`
	// The name of the Simple Message Queue (SMQ) queue to which callback messages are sent.
	//
	// example:
	//
	// ice-callback-queue
	CallbackQueueName *string `json:"CallbackQueueName,omitempty" xml:"CallbackQueueName,omitempty"`
	// The callback method. Valid values:
	//
	// 	- **HTTP**
	//
	// 	- **MNS**
	//
	// example:
	//
	// HTTP
	CallbackType *string `json:"CallbackType,omitempty" xml:"CallbackType,omitempty"`
	// The callback URL to which event notifications are sent.
	//
	// example:
	//
	// http://xxx.yyy/callback
	CallbackURL *string `json:"CallbackURL,omitempty" xml:"CallbackURL,omitempty"`
	// The type of the callback event. Multiple values are separated with commas (,). For more information about callback event types, see [Event notification content](https://help.aliyun.com/document_detail/610204.html).
	//
	// example:
	//
	// ProduceMediaComplete,TranscodeComplete
	EventTypeList *string `json:"EventTypeList,omitempty" xml:"EventTypeList,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetEventCallbackResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEventCallbackResponseBody) GoString() string {
	return s.String()
}

func (s *GetEventCallbackResponseBody) SetAuthKey(v string) *GetEventCallbackResponseBody {
	s.AuthKey = &v
	return s
}

func (s *GetEventCallbackResponseBody) SetAuthSwitch(v string) *GetEventCallbackResponseBody {
	s.AuthSwitch = &v
	return s
}

func (s *GetEventCallbackResponseBody) SetCallbackQueueName(v string) *GetEventCallbackResponseBody {
	s.CallbackQueueName = &v
	return s
}

func (s *GetEventCallbackResponseBody) SetCallbackType(v string) *GetEventCallbackResponseBody {
	s.CallbackType = &v
	return s
}

func (s *GetEventCallbackResponseBody) SetCallbackURL(v string) *GetEventCallbackResponseBody {
	s.CallbackURL = &v
	return s
}

func (s *GetEventCallbackResponseBody) SetEventTypeList(v string) *GetEventCallbackResponseBody {
	s.EventTypeList = &v
	return s
}

func (s *GetEventCallbackResponseBody) SetRequestId(v string) *GetEventCallbackResponseBody {
	s.RequestId = &v
	return s
}

type GetEventCallbackResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetEventCallbackResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetEventCallbackResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEventCallbackResponse) GoString() string {
	return s.String()
}

func (s *GetEventCallbackResponse) SetHeaders(v map[string]*string) *GetEventCallbackResponse {
	s.Headers = v
	return s
}

func (s *GetEventCallbackResponse) SetStatusCode(v int32) *GetEventCallbackResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEventCallbackResponse) SetBody(v *GetEventCallbackResponseBody) *GetEventCallbackResponse {
	s.Body = v
	return s
}

type GetHotwordLibraryRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	HotwordLibraryId *string `json:"HotwordLibraryId,omitempty" xml:"HotwordLibraryId,omitempty"`
}

func (s GetHotwordLibraryRequest) String() string {
	return tea.Prettify(s)
}

func (s GetHotwordLibraryRequest) GoString() string {
	return s.String()
}

func (s *GetHotwordLibraryRequest) SetHotwordLibraryId(v string) *GetHotwordLibraryRequest {
	s.HotwordLibraryId = &v
	return s
}

type GetHotwordLibraryResponseBody struct {
	// example:
	//
	// 2020-12-23T13:33:49Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// example:
	//
	// 热词库描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// ****05512043f49f697f7425****
	HotwordLibraryId *string    `json:"HotwordLibraryId,omitempty" xml:"HotwordLibraryId,omitempty"`
	Hotwords         []*Hotword `json:"Hotwords,omitempty" xml:"Hotwords,omitempty" type:"Repeated"`
	// example:
	//
	// 热词库名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ****12e8864746a0a398****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// ASR
	UsageScenario *string `json:"UsageScenario,omitempty" xml:"UsageScenario,omitempty"`
}

func (s GetHotwordLibraryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetHotwordLibraryResponseBody) GoString() string {
	return s.String()
}

func (s *GetHotwordLibraryResponseBody) SetCreationTime(v string) *GetHotwordLibraryResponseBody {
	s.CreationTime = &v
	return s
}

func (s *GetHotwordLibraryResponseBody) SetDescription(v string) *GetHotwordLibraryResponseBody {
	s.Description = &v
	return s
}

func (s *GetHotwordLibraryResponseBody) SetHotwordLibraryId(v string) *GetHotwordLibraryResponseBody {
	s.HotwordLibraryId = &v
	return s
}

func (s *GetHotwordLibraryResponseBody) SetHotwords(v []*Hotword) *GetHotwordLibraryResponseBody {
	s.Hotwords = v
	return s
}

func (s *GetHotwordLibraryResponseBody) SetName(v string) *GetHotwordLibraryResponseBody {
	s.Name = &v
	return s
}

func (s *GetHotwordLibraryResponseBody) SetRequestId(v string) *GetHotwordLibraryResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetHotwordLibraryResponseBody) SetUsageScenario(v string) *GetHotwordLibraryResponseBody {
	s.UsageScenario = &v
	return s
}

type GetHotwordLibraryResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetHotwordLibraryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetHotwordLibraryResponse) String() string {
	return tea.Prettify(s)
}

func (s GetHotwordLibraryResponse) GoString() string {
	return s.String()
}

func (s *GetHotwordLibraryResponse) SetHeaders(v map[string]*string) *GetHotwordLibraryResponse {
	s.Headers = v
	return s
}

func (s *GetHotwordLibraryResponse) SetStatusCode(v int32) *GetHotwordLibraryResponse {
	s.StatusCode = &v
	return s
}

func (s *GetHotwordLibraryResponse) SetBody(v *GetHotwordLibraryResponseBody) *GetHotwordLibraryResponse {
	s.Body = v
	return s
}

type GetLiveEditingIndexFileRequest struct {
	// The application name of the live stream.
	//
	// example:
	//
	// testrecord
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The domain name of the live stream.
	//
	// example:
	//
	// test.alivecdn.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The ID of the live stream editing project.
	//
	// example:
	//
	// *****cb6307a4edea614d8b3f3c*****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The name of the live stream.
	//
	// example:
	//
	// teststream
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s GetLiveEditingIndexFileRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingIndexFileRequest) GoString() string {
	return s.String()
}

func (s *GetLiveEditingIndexFileRequest) SetAppName(v string) *GetLiveEditingIndexFileRequest {
	s.AppName = &v
	return s
}

func (s *GetLiveEditingIndexFileRequest) SetDomainName(v string) *GetLiveEditingIndexFileRequest {
	s.DomainName = &v
	return s
}

func (s *GetLiveEditingIndexFileRequest) SetProjectId(v string) *GetLiveEditingIndexFileRequest {
	s.ProjectId = &v
	return s
}

func (s *GetLiveEditingIndexFileRequest) SetStreamName(v string) *GetLiveEditingIndexFileRequest {
	s.StreamName = &v
	return s
}

type GetLiveEditingIndexFileResponseBody struct {
	// The URL of the index file.
	IndexFile *string `json:"IndexFile,omitempty" xml:"IndexFile,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 4E84BE44-58A7-****-****-FBEBEA16EF94
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetLiveEditingIndexFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingIndexFileResponseBody) GoString() string {
	return s.String()
}

func (s *GetLiveEditingIndexFileResponseBody) SetIndexFile(v string) *GetLiveEditingIndexFileResponseBody {
	s.IndexFile = &v
	return s
}

func (s *GetLiveEditingIndexFileResponseBody) SetRequestId(v string) *GetLiveEditingIndexFileResponseBody {
	s.RequestId = &v
	return s
}

type GetLiveEditingIndexFileResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetLiveEditingIndexFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetLiveEditingIndexFileResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingIndexFileResponse) GoString() string {
	return s.String()
}

func (s *GetLiveEditingIndexFileResponse) SetHeaders(v map[string]*string) *GetLiveEditingIndexFileResponse {
	s.Headers = v
	return s
}

func (s *GetLiveEditingIndexFileResponse) SetStatusCode(v int32) *GetLiveEditingIndexFileResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLiveEditingIndexFileResponse) SetBody(v *GetLiveEditingIndexFileResponseBody) *GetLiveEditingIndexFileResponse {
	s.Body = v
	return s
}

type GetLiveEditingJobRequest struct {
	// The ID of the live editing job.
	//
	// example:
	//
	// ****d80e4e4044975745c14b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetLiveEditingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingJobRequest) GoString() string {
	return s.String()
}

func (s *GetLiveEditingJobRequest) SetJobId(v string) *GetLiveEditingJobRequest {
	s.JobId = &v
	return s
}

type GetLiveEditingJobResponseBody struct {
	// The information about the live editing job.
	LiveEditingJob *GetLiveEditingJobResponseBodyLiveEditingJob `json:"LiveEditingJob,omitempty" xml:"LiveEditingJob,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ****36-3C1E-4417-BDB2-1E034F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetLiveEditingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetLiveEditingJobResponseBody) SetLiveEditingJob(v *GetLiveEditingJobResponseBodyLiveEditingJob) *GetLiveEditingJobResponseBody {
	s.LiveEditingJob = v
	return s
}

func (s *GetLiveEditingJobResponseBody) SetRequestId(v string) *GetLiveEditingJobResponseBody {
	s.RequestId = &v
	return s
}

type GetLiveEditingJobResponseBodyLiveEditingJob struct {
	// The clips.
	//
	// example:
	//
	// [{\\"StartTime\\": \\" 2021-06-21T08:01:00Z\\",  \\"EndTime\\": \\" 2021-06-21T08:03:00Z\\" }]
	Clips *string `json:"Clips,omitempty" xml:"Clips,omitempty"`
	// The response code. Note: Pay attention to this parameter if the job failed.
	//
	// example:
	//
	// InvalidParameter
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The time when the live editing job was completed. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2020-12-23T13:33:52Z
	CompleteTime *string `json:"CompleteTime,omitempty" xml:"CompleteTime,omitempty"`
	// The time when the live editing job was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2020-12-23T13:33:40Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The ID of the live editing job.
	//
	// example:
	//
	// ****cdb3e74639973036bc84****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The live editing configurations.
	LiveStreamConfig *GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig `json:"LiveStreamConfig,omitempty" xml:"LiveStreamConfig,omitempty" type:"Struct"`
	// The media asset ID of the output file.
	//
	// example:
	//
	// ****0cc6ba49eab379332c5b****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The production configurations.
	MediaProduceConfig *GetLiveEditingJobResponseBodyLiveEditingJobMediaProduceConfig `json:"MediaProduceConfig,omitempty" xml:"MediaProduceConfig,omitempty" type:"Struct"`
	// The URL of the output file.
	//
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example2.mp4
	MediaURL *string `json:"MediaURL,omitempty" xml:"MediaURL,omitempty"`
	// The returned message. Note: Pay attention to this parameter if the job failed.
	//
	// example:
	//
	// The specific parameter LiveStreamConfig is not valid.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The time when the live editing job was last modified. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2020-12-23T13:33:49Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The storage configurations of the output file.
	OutputMediaConfig *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig `json:"OutputMediaConfig,omitempty" xml:"OutputMediaConfig,omitempty" type:"Struct"`
	// The ID of the live editing project.
	//
	// example:
	//
	// ****fddd7748b58bf1d47e95****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The state of the live editing job. Valid values: Init, Queuing, Processing, Success, and Failed.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The user-defined data.
	//
	// example:
	//
	// {"key": "value\\"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetLiveEditingJobResponseBodyLiveEditingJob) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingJobResponseBodyLiveEditingJob) GoString() string {
	return s.String()
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetClips(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.Clips = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetCode(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.Code = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetCompleteTime(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.CompleteTime = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetCreationTime(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.CreationTime = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetJobId(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.JobId = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetLiveStreamConfig(v *GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.LiveStreamConfig = v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetMediaId(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.MediaId = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetMediaProduceConfig(v *GetLiveEditingJobResponseBodyLiveEditingJobMediaProduceConfig) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.MediaProduceConfig = v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetMediaURL(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.MediaURL = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetMessage(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.Message = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetModifiedTime(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.ModifiedTime = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetOutputMediaConfig(v *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.OutputMediaConfig = v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetProjectId(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.ProjectId = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetStatus(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.Status = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetUserData(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.UserData = &v
	return s
}

type GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig struct {
	// The name of the application to which the live stream belongs.
	//
	// example:
	//
	// app
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The domain name of the live stream.
	//
	// example:
	//
	// domain.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The name of the live stream.
	//
	// example:
	//
	// streamName
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig) GoString() string {
	return s.String()
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig) SetAppName(v string) *GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig {
	s.AppName = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig) SetDomainName(v string) *GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig {
	s.DomainName = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig) SetStreamName(v string) *GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig {
	s.StreamName = &v
	return s
}

type GetLiveEditingJobResponseBodyLiveEditingJobMediaProduceConfig struct {
	// The editing mode. Default value: Accurate.
	//
	// example:
	//
	// Accurate
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
}

func (s GetLiveEditingJobResponseBodyLiveEditingJobMediaProduceConfig) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingJobResponseBodyLiveEditingJobMediaProduceConfig) GoString() string {
	return s.String()
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobMediaProduceConfig) SetMode(v string) *GetLiveEditingJobResponseBodyLiveEditingJobMediaProduceConfig {
	s.Mode = &v
	return s
}

type GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig struct {
	// The bitrate of the output file. Unit: Kbit/s. You can leave this parameter empty. The default value is the maximum bitrate of the input materials.
	//
	// example:
	//
	// 1000
	Bitrate *int64 `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// If OutputMediaTarget is set to vod-media, this parameter indicates the file name of the output file. The value contains the file name extension but not the path.
	//
	// example:
	//
	// test.mp4
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The height of the output file. You can leave this parameter empty. The default value is the maximum height of the input materials.
	//
	// example:
	//
	// 480
	Height *int32 `json:"Height,omitempty" xml:"Height,omitempty"`
	// The URL of the output file.
	//
	// example:
	//
	// https://testice-testbucket.oss-cn-shanghai.aliyuncs.com/test.mp4
	MediaURL *string `json:"MediaURL,omitempty" xml:"MediaURL,omitempty"`
	// If OutputMediaTarget is set to vod-media, this parameter indicates the storage location of the media asset in ApsaraVideo VOD. The storage location is the path of the file in ApsaraVideo VOD, excluding the prefix http://. Example: outin-xxxxxx.oss-cn-shanghai.aliyuncs.com.
	//
	// example:
	//
	// outin-xxxxxx.oss-cn-shanghai.aliyuncs.com
	StorageLocation *string `json:"StorageLocation,omitempty" xml:"StorageLocation,omitempty"`
	// The ID of the VOD transcoding template group. If VOD transcoding is not required, set the value to VOD_NO_TRANSCODE.
	//
	// example:
	//
	// VOD_NO_TRANSCODE
	VodTemplateGroupId *string `json:"VodTemplateGroupId,omitempty" xml:"VodTemplateGroupId,omitempty"`
	// The width of the output file. You can leave this parameter empty. The default value is the maximum width of the input materials.
	//
	// example:
	//
	// 640
	Width *int32 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) GoString() string {
	return s.String()
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) SetBitrate(v int64) *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig {
	s.Bitrate = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) SetFileName(v string) *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig {
	s.FileName = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) SetHeight(v int32) *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig {
	s.Height = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) SetMediaURL(v string) *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig {
	s.MediaURL = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) SetStorageLocation(v string) *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig {
	s.StorageLocation = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) SetVodTemplateGroupId(v string) *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig {
	s.VodTemplateGroupId = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) SetWidth(v int32) *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig {
	s.Width = &v
	return s
}

type GetLiveEditingJobResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetLiveEditingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetLiveEditingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingJobResponse) GoString() string {
	return s.String()
}

func (s *GetLiveEditingJobResponse) SetHeaders(v map[string]*string) *GetLiveEditingJobResponse {
	s.Headers = v
	return s
}

func (s *GetLiveEditingJobResponse) SetStatusCode(v int32) *GetLiveEditingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLiveEditingJobResponse) SetBody(v *GetLiveEditingJobResponseBody) *GetLiveEditingJobResponse {
	s.Body = v
	return s
}

type GetLivePackageChannelRequest struct {
	// The channel name.
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-1
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The channel group name.
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-group-1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s GetLivePackageChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLivePackageChannelRequest) GoString() string {
	return s.String()
}

func (s *GetLivePackageChannelRequest) SetChannelName(v string) *GetLivePackageChannelRequest {
	s.ChannelName = &v
	return s
}

func (s *GetLivePackageChannelRequest) SetGroupName(v string) *GetLivePackageChannelRequest {
	s.GroupName = &v
	return s
}

type GetLivePackageChannelResponseBody struct {
	// Details of the live package channel.
	LivePackageChannel *GetLivePackageChannelResponseBodyLivePackageChannel `json:"LivePackageChannel,omitempty" xml:"LivePackageChannel,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// RequestId-12345678
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetLivePackageChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLivePackageChannelResponseBody) GoString() string {
	return s.String()
}

func (s *GetLivePackageChannelResponseBody) SetLivePackageChannel(v *GetLivePackageChannelResponseBodyLivePackageChannel) *GetLivePackageChannelResponseBody {
	s.LivePackageChannel = v
	return s
}

func (s *GetLivePackageChannelResponseBody) SetRequestId(v string) *GetLivePackageChannelResponseBody {
	s.RequestId = &v
	return s
}

type GetLivePackageChannelResponseBodyLivePackageChannel struct {
	// The channel name.
	//
	// example:
	//
	// ch4
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The time when the channel was created.
	//
	// example:
	//
	// 2023-04-01T12:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The channel description.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The channel group name.
	//
	// example:
	//
	// channel-group-1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The ingest endpoints.
	IngestEndpoints []*GetLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints `json:"IngestEndpoints,omitempty" xml:"IngestEndpoints,omitempty" type:"Repeated"`
	// The time when the endpoint was last modified.
	//
	// example:
	//
	// 2023-04-01T12:00:00Z
	LastModified *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	// The ingest protocol. Only HLS is supported.
	//
	// example:
	//
	// HLS
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// The number of M3U8 segments.
	//
	// example:
	//
	// 3
	SegmentCount *int32 `json:"SegmentCount,omitempty" xml:"SegmentCount,omitempty"`
	// The segment duration.
	//
	// example:
	//
	// 5
	SegmentDuration *int32 `json:"SegmentDuration,omitempty" xml:"SegmentDuration,omitempty"`
}

func (s GetLivePackageChannelResponseBodyLivePackageChannel) String() string {
	return tea.Prettify(s)
}

func (s GetLivePackageChannelResponseBodyLivePackageChannel) GoString() string {
	return s.String()
}

func (s *GetLivePackageChannelResponseBodyLivePackageChannel) SetChannelName(v string) *GetLivePackageChannelResponseBodyLivePackageChannel {
	s.ChannelName = &v
	return s
}

func (s *GetLivePackageChannelResponseBodyLivePackageChannel) SetCreateTime(v string) *GetLivePackageChannelResponseBodyLivePackageChannel {
	s.CreateTime = &v
	return s
}

func (s *GetLivePackageChannelResponseBodyLivePackageChannel) SetDescription(v string) *GetLivePackageChannelResponseBodyLivePackageChannel {
	s.Description = &v
	return s
}

func (s *GetLivePackageChannelResponseBodyLivePackageChannel) SetGroupName(v string) *GetLivePackageChannelResponseBodyLivePackageChannel {
	s.GroupName = &v
	return s
}

func (s *GetLivePackageChannelResponseBodyLivePackageChannel) SetIngestEndpoints(v []*GetLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints) *GetLivePackageChannelResponseBodyLivePackageChannel {
	s.IngestEndpoints = v
	return s
}

func (s *GetLivePackageChannelResponseBodyLivePackageChannel) SetLastModified(v string) *GetLivePackageChannelResponseBodyLivePackageChannel {
	s.LastModified = &v
	return s
}

func (s *GetLivePackageChannelResponseBodyLivePackageChannel) SetProtocol(v string) *GetLivePackageChannelResponseBodyLivePackageChannel {
	s.Protocol = &v
	return s
}

func (s *GetLivePackageChannelResponseBodyLivePackageChannel) SetSegmentCount(v int32) *GetLivePackageChannelResponseBodyLivePackageChannel {
	s.SegmentCount = &v
	return s
}

func (s *GetLivePackageChannelResponseBodyLivePackageChannel) SetSegmentDuration(v int32) *GetLivePackageChannelResponseBodyLivePackageChannel {
	s.SegmentDuration = &v
	return s
}

type GetLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints struct {
	// The ingest endpoint ID.
	//
	// example:
	//
	// ingest1
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The password.
	//
	// example:
	//
	// 2F9e******b569c8
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The ingest endpoint URL.
	//
	// example:
	//
	// http://xxx-1.packagepush-abcxxx.ap-southeast-1.aliyuncsiceintl.com/v1/group01/1/ch01/manifest
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// The username.
	//
	// example:
	//
	// us12******das
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s GetLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints) String() string {
	return tea.Prettify(s)
}

func (s GetLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints) GoString() string {
	return s.String()
}

func (s *GetLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints) SetId(v string) *GetLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints {
	s.Id = &v
	return s
}

func (s *GetLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints) SetPassword(v string) *GetLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints {
	s.Password = &v
	return s
}

func (s *GetLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints) SetUrl(v string) *GetLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints {
	s.Url = &v
	return s
}

func (s *GetLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints) SetUsername(v string) *GetLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints {
	s.Username = &v
	return s
}

type GetLivePackageChannelResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetLivePackageChannelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetLivePackageChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLivePackageChannelResponse) GoString() string {
	return s.String()
}

func (s *GetLivePackageChannelResponse) SetHeaders(v map[string]*string) *GetLivePackageChannelResponse {
	s.Headers = v
	return s
}

func (s *GetLivePackageChannelResponse) SetStatusCode(v int32) *GetLivePackageChannelResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLivePackageChannelResponse) SetBody(v *GetLivePackageChannelResponseBody) *GetLivePackageChannelResponse {
	s.Body = v
	return s
}

type GetLivePackageChannelGroupRequest struct {
	// The channel group name.
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-group-1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s GetLivePackageChannelGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLivePackageChannelGroupRequest) GoString() string {
	return s.String()
}

func (s *GetLivePackageChannelGroupRequest) SetGroupName(v string) *GetLivePackageChannelGroupRequest {
	s.GroupName = &v
	return s
}

type GetLivePackageChannelGroupResponseBody struct {
	// Details of the channel group.
	LivePackageChannelGroup *GetLivePackageChannelGroupResponseBodyLivePackageChannelGroup `json:"LivePackageChannelGroup,omitempty" xml:"LivePackageChannelGroup,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// req-abcdefg123456
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetLivePackageChannelGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLivePackageChannelGroupResponseBody) GoString() string {
	return s.String()
}

func (s *GetLivePackageChannelGroupResponseBody) SetLivePackageChannelGroup(v *GetLivePackageChannelGroupResponseBodyLivePackageChannelGroup) *GetLivePackageChannelGroupResponseBody {
	s.LivePackageChannelGroup = v
	return s
}

func (s *GetLivePackageChannelGroupResponseBody) SetRequestId(v string) *GetLivePackageChannelGroupResponseBody {
	s.RequestId = &v
	return s
}

type GetLivePackageChannelGroupResponseBodyLivePackageChannelGroup struct {
	// The time when the channel group was created. It is in the yyyy-MM-ddTHH:mm:ssZ format and displayed in UTC.
	//
	// example:
	//
	// 2023-04-01T12:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The channel group description.
	//
	// example:
	//
	// Updated description of the channel group.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The channel group name.
	//
	// example:
	//
	// channel-group-1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The time when the channel group was last modified. It is in the yyyy-MM-ddTHH:mm:ssZ format and displayed in UTC.
	//
	// example:
	//
	// 2023-04-01T12:00:00Z
	LastModified *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	// The origin domain.
	//
	// example:
	//
	// example.com
	OriginDomain *string `json:"OriginDomain,omitempty" xml:"OriginDomain,omitempty"`
}

func (s GetLivePackageChannelGroupResponseBodyLivePackageChannelGroup) String() string {
	return tea.Prettify(s)
}

func (s GetLivePackageChannelGroupResponseBodyLivePackageChannelGroup) GoString() string {
	return s.String()
}

func (s *GetLivePackageChannelGroupResponseBodyLivePackageChannelGroup) SetCreateTime(v string) *GetLivePackageChannelGroupResponseBodyLivePackageChannelGroup {
	s.CreateTime = &v
	return s
}

func (s *GetLivePackageChannelGroupResponseBodyLivePackageChannelGroup) SetDescription(v string) *GetLivePackageChannelGroupResponseBodyLivePackageChannelGroup {
	s.Description = &v
	return s
}

func (s *GetLivePackageChannelGroupResponseBodyLivePackageChannelGroup) SetGroupName(v string) *GetLivePackageChannelGroupResponseBodyLivePackageChannelGroup {
	s.GroupName = &v
	return s
}

func (s *GetLivePackageChannelGroupResponseBodyLivePackageChannelGroup) SetLastModified(v string) *GetLivePackageChannelGroupResponseBodyLivePackageChannelGroup {
	s.LastModified = &v
	return s
}

func (s *GetLivePackageChannelGroupResponseBodyLivePackageChannelGroup) SetOriginDomain(v string) *GetLivePackageChannelGroupResponseBodyLivePackageChannelGroup {
	s.OriginDomain = &v
	return s
}

type GetLivePackageChannelGroupResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetLivePackageChannelGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetLivePackageChannelGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLivePackageChannelGroupResponse) GoString() string {
	return s.String()
}

func (s *GetLivePackageChannelGroupResponse) SetHeaders(v map[string]*string) *GetLivePackageChannelGroupResponse {
	s.Headers = v
	return s
}

func (s *GetLivePackageChannelGroupResponse) SetStatusCode(v int32) *GetLivePackageChannelGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLivePackageChannelGroupResponse) SetBody(v *GetLivePackageChannelGroupResponseBody) *GetLivePackageChannelGroupResponse {
	s.Body = v
	return s
}

type GetLivePackageOriginEndpointRequest struct {
	// The channel name.
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-1
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The endpoint name.
	//
	// This parameter is required.
	//
	// example:
	//
	// endpoint-1
	EndpointName *string `json:"EndpointName,omitempty" xml:"EndpointName,omitempty"`
	// The channel group name.
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-group-1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s GetLivePackageOriginEndpointRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLivePackageOriginEndpointRequest) GoString() string {
	return s.String()
}

func (s *GetLivePackageOriginEndpointRequest) SetChannelName(v string) *GetLivePackageOriginEndpointRequest {
	s.ChannelName = &v
	return s
}

func (s *GetLivePackageOriginEndpointRequest) SetEndpointName(v string) *GetLivePackageOriginEndpointRequest {
	s.EndpointName = &v
	return s
}

func (s *GetLivePackageOriginEndpointRequest) SetGroupName(v string) *GetLivePackageOriginEndpointRequest {
	s.GroupName = &v
	return s
}

type GetLivePackageOriginEndpointResponseBody struct {
	// The information about the origin endpoints.
	LivePackageOriginEndpoint *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint `json:"LivePackageOriginEndpoint,omitempty" xml:"LivePackageOriginEndpoint,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// requestIdExample123
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetLivePackageOriginEndpointResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLivePackageOriginEndpointResponseBody) GoString() string {
	return s.String()
}

func (s *GetLivePackageOriginEndpointResponseBody) SetLivePackageOriginEndpoint(v *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) *GetLivePackageOriginEndpointResponseBody {
	s.LivePackageOriginEndpoint = v
	return s
}

func (s *GetLivePackageOriginEndpointResponseBody) SetRequestId(v string) *GetLivePackageOriginEndpointResponseBody {
	s.RequestId = &v
	return s
}

type GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint struct {
	// The authorization code.
	//
	// example:
	//
	// Abc123Def456
	AuthorizationCode *string `json:"AuthorizationCode,omitempty" xml:"AuthorizationCode,omitempty"`
	// The channel name.
	//
	// example:
	//
	// channel-1
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The time when the endpoint was created.
	//
	// example:
	//
	// 2023-04-01T12:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The endpoint description.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The endpoint name.
	//
	// example:
	//
	// endpoint-1
	EndpointName *string `json:"EndpointName,omitempty" xml:"EndpointName,omitempty"`
	// The endpoint URL.
	//
	// example:
	//
	// https://xxx.packagepull-abcxxx.ap-southeast-1.aliyuncsiceintl.com/v1/group01/1/ch01/manifest
	EndpointUrl *string `json:"EndpointUrl,omitempty" xml:"EndpointUrl,omitempty"`
	// The channel group name.
	//
	// example:
	//
	// channel-group-1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The IP address blacklist.
	//
	// example:
	//
	// 10.21.222.1/32
	IpBlacklist *string `json:"IpBlacklist,omitempty" xml:"IpBlacklist,omitempty"`
	// The IP address whitelist.
	//
	// example:
	//
	// 192.168.1.0/24,10.0.0.1/24
	IpWhitelist *string `json:"IpWhitelist,omitempty" xml:"IpWhitelist,omitempty"`
	// The time when the endpoint was last modified.
	//
	// example:
	//
	// 2023-04-01T12:00:00Z
	LastModified        *string              `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	LivePackagingConfig *LivePackagingConfig `json:"LivePackagingConfig,omitempty" xml:"LivePackagingConfig,omitempty"`
	// The playlist name.
	//
	// example:
	//
	// manifest
	ManifestName *string `json:"ManifestName,omitempty" xml:"ManifestName,omitempty"`
	// The distribution protocol.
	//
	// example:
	//
	// HLS
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// The number of days that time-shifted content is available.
	//
	// example:
	//
	// 5
	TimeshiftVision *int32 `json:"TimeshiftVision,omitempty" xml:"TimeshiftVision,omitempty"`
}

func (s GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) String() string {
	return tea.Prettify(s)
}

func (s GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) GoString() string {
	return s.String()
}

func (s *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetAuthorizationCode(v string) *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.AuthorizationCode = &v
	return s
}

func (s *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetChannelName(v string) *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.ChannelName = &v
	return s
}

func (s *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetCreateTime(v string) *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.CreateTime = &v
	return s
}

func (s *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetDescription(v string) *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.Description = &v
	return s
}

func (s *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetEndpointName(v string) *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.EndpointName = &v
	return s
}

func (s *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetEndpointUrl(v string) *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.EndpointUrl = &v
	return s
}

func (s *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetGroupName(v string) *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.GroupName = &v
	return s
}

func (s *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetIpBlacklist(v string) *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.IpBlacklist = &v
	return s
}

func (s *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetIpWhitelist(v string) *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.IpWhitelist = &v
	return s
}

func (s *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetLastModified(v string) *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.LastModified = &v
	return s
}

func (s *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetLivePackagingConfig(v *LivePackagingConfig) *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.LivePackagingConfig = v
	return s
}

func (s *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetManifestName(v string) *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.ManifestName = &v
	return s
}

func (s *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetProtocol(v string) *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.Protocol = &v
	return s
}

func (s *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetTimeshiftVision(v int32) *GetLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.TimeshiftVision = &v
	return s
}

type GetLivePackageOriginEndpointResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetLivePackageOriginEndpointResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetLivePackageOriginEndpointResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLivePackageOriginEndpointResponse) GoString() string {
	return s.String()
}

func (s *GetLivePackageOriginEndpointResponse) SetHeaders(v map[string]*string) *GetLivePackageOriginEndpointResponse {
	s.Headers = v
	return s
}

func (s *GetLivePackageOriginEndpointResponse) SetStatusCode(v int32) *GetLivePackageOriginEndpointResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLivePackageOriginEndpointResponse) SetBody(v *GetLivePackageOriginEndpointResponseBody) *GetLivePackageOriginEndpointResponse {
	s.Body = v
	return s
}

type GetLiveRecordJobRequest struct {
	// The ID of the recording job.
	//
	// This parameter is required.
	//
	// example:
	//
	// ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetLiveRecordJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLiveRecordJobRequest) GoString() string {
	return s.String()
}

func (s *GetLiveRecordJobRequest) SetJobId(v string) *GetLiveRecordJobRequest {
	s.JobId = &v
	return s
}

type GetLiveRecordJobResponseBody struct {
	// The details of the recording job.
	RecordJob *GetLiveRecordJobResponseBodyRecordJob `json:"RecordJob,omitempty" xml:"RecordJob,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// B57A046C-CE33-5FBB-B57A-D2B89ACF6907
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetLiveRecordJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLiveRecordJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetLiveRecordJobResponseBody) SetRecordJob(v *GetLiveRecordJobResponseBodyRecordJob) *GetLiveRecordJobResponseBody {
	s.RecordJob = v
	return s
}

func (s *GetLiveRecordJobResponseBody) SetRequestId(v string) *GetLiveRecordJobResponseBody {
	s.RequestId = &v
	return s
}

type GetLiveRecordJobResponseBodyRecordJob struct {
	// The time when the job was created.
	//
	// Use the UTC time format: yyyy-MM-ddTHH:mmZ
	//
	// example:
	//
	// 2022-07-20T02:48:58Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the recording job.
	//
	// example:
	//
	// ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The name of the recording job.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The callback URL.
	//
	// example:
	//
	// https://example.com/imsnotify
	NotifyUrl *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	// The storage address of the recording.
	RecordOutput *GetLiveRecordJobResponseBodyRecordJobRecordOutput `json:"RecordOutput,omitempty" xml:"RecordOutput,omitempty" type:"Struct"`
	// The state of the recording job.
	//
	// Valid values:
	//
	// 	- paused: The job is paused.
	//
	// 	- initial: The job is not started.
	//
	// 	- started: The job is in progress.
	//
	// example:
	//
	// paused
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The URL of the live stream.
	StreamInput *GetLiveRecordJobResponseBodyRecordJobStreamInput `json:"StreamInput,omitempty" xml:"StreamInput,omitempty" type:"Struct"`
	// The ID of the recording template.
	//
	// example:
	//
	// 69e1f9fe-1e97-11ed-ba64-0c42a1b73d66
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The name of the recording template.
	//
	// example:
	//
	// test template
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
}

func (s GetLiveRecordJobResponseBodyRecordJob) String() string {
	return tea.Prettify(s)
}

func (s GetLiveRecordJobResponseBodyRecordJob) GoString() string {
	return s.String()
}

func (s *GetLiveRecordJobResponseBodyRecordJob) SetCreateTime(v string) *GetLiveRecordJobResponseBodyRecordJob {
	s.CreateTime = &v
	return s
}

func (s *GetLiveRecordJobResponseBodyRecordJob) SetJobId(v string) *GetLiveRecordJobResponseBodyRecordJob {
	s.JobId = &v
	return s
}

func (s *GetLiveRecordJobResponseBodyRecordJob) SetName(v string) *GetLiveRecordJobResponseBodyRecordJob {
	s.Name = &v
	return s
}

func (s *GetLiveRecordJobResponseBodyRecordJob) SetNotifyUrl(v string) *GetLiveRecordJobResponseBodyRecordJob {
	s.NotifyUrl = &v
	return s
}

func (s *GetLiveRecordJobResponseBodyRecordJob) SetRecordOutput(v *GetLiveRecordJobResponseBodyRecordJobRecordOutput) *GetLiveRecordJobResponseBodyRecordJob {
	s.RecordOutput = v
	return s
}

func (s *GetLiveRecordJobResponseBodyRecordJob) SetStatus(v string) *GetLiveRecordJobResponseBodyRecordJob {
	s.Status = &v
	return s
}

func (s *GetLiveRecordJobResponseBodyRecordJob) SetStreamInput(v *GetLiveRecordJobResponseBodyRecordJobStreamInput) *GetLiveRecordJobResponseBodyRecordJob {
	s.StreamInput = v
	return s
}

func (s *GetLiveRecordJobResponseBodyRecordJob) SetTemplateId(v string) *GetLiveRecordJobResponseBodyRecordJob {
	s.TemplateId = &v
	return s
}

func (s *GetLiveRecordJobResponseBodyRecordJob) SetTemplateName(v string) *GetLiveRecordJobResponseBodyRecordJob {
	s.TemplateName = &v
	return s
}

type GetLiveRecordJobResponseBodyRecordJobRecordOutput struct {
	// The bucket name.
	//
	// example:
	//
	// imsbucket1
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// The endpoint of the storage service.
	//
	// example:
	//
	// oss-cn-shanghai.aliyuncs.com
	Endpoint *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	// The type of the storage address.
	//
	// Valid values:
	//
	// 	- vod
	//
	// 	- oss
	//
	// example:
	//
	// oss
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetLiveRecordJobResponseBodyRecordJobRecordOutput) String() string {
	return tea.Prettify(s)
}

func (s GetLiveRecordJobResponseBodyRecordJobRecordOutput) GoString() string {
	return s.String()
}

func (s *GetLiveRecordJobResponseBodyRecordJobRecordOutput) SetBucket(v string) *GetLiveRecordJobResponseBodyRecordJobRecordOutput {
	s.Bucket = &v
	return s
}

func (s *GetLiveRecordJobResponseBodyRecordJobRecordOutput) SetEndpoint(v string) *GetLiveRecordJobResponseBodyRecordJobRecordOutput {
	s.Endpoint = &v
	return s
}

func (s *GetLiveRecordJobResponseBodyRecordJobRecordOutput) SetType(v string) *GetLiveRecordJobResponseBodyRecordJobRecordOutput {
	s.Type = &v
	return s
}

type GetLiveRecordJobResponseBodyRecordJobStreamInput struct {
	// The type of the live stream. The value can only be rtmp.
	//
	// example:
	//
	// rtmp
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The URL of the live stream.
	//
	// example:
	//
	// rtmp://example.com/app/stream
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetLiveRecordJobResponseBodyRecordJobStreamInput) String() string {
	return tea.Prettify(s)
}

func (s GetLiveRecordJobResponseBodyRecordJobStreamInput) GoString() string {
	return s.String()
}

func (s *GetLiveRecordJobResponseBodyRecordJobStreamInput) SetType(v string) *GetLiveRecordJobResponseBodyRecordJobStreamInput {
	s.Type = &v
	return s
}

func (s *GetLiveRecordJobResponseBodyRecordJobStreamInput) SetUrl(v string) *GetLiveRecordJobResponseBodyRecordJobStreamInput {
	s.Url = &v
	return s
}

type GetLiveRecordJobResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetLiveRecordJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetLiveRecordJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLiveRecordJobResponse) GoString() string {
	return s.String()
}

func (s *GetLiveRecordJobResponse) SetHeaders(v map[string]*string) *GetLiveRecordJobResponse {
	s.Headers = v
	return s
}

func (s *GetLiveRecordJobResponse) SetStatusCode(v int32) *GetLiveRecordJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLiveRecordJobResponse) SetBody(v *GetLiveRecordJobResponseBody) *GetLiveRecordJobResponse {
	s.Body = v
	return s
}

type GetLiveRecordTemplateRequest struct {
	// The ID of the recording job. You can specify the JobId parameter to retrieve the snapshot of the template used by the job.
	//
	// example:
	//
	// ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The template ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 69e1f9fe-1e97-11ed-ba64-0c42a1b73d66
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetLiveRecordTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLiveRecordTemplateRequest) GoString() string {
	return s.String()
}

func (s *GetLiveRecordTemplateRequest) SetJobId(v string) *GetLiveRecordTemplateRequest {
	s.JobId = &v
	return s
}

func (s *GetLiveRecordTemplateRequest) SetTemplateId(v string) *GetLiveRecordTemplateRequest {
	s.TemplateId = &v
	return s
}

type GetLiveRecordTemplateResponseBody struct {
	// The recording template.
	RecordTemplate *GetLiveRecordTemplateResponseBodyRecordTemplate `json:"RecordTemplate,omitempty" xml:"RecordTemplate,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// C892855F-95DF-50D6-A28C-279ABDB76810
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetLiveRecordTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLiveRecordTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *GetLiveRecordTemplateResponseBody) SetRecordTemplate(v *GetLiveRecordTemplateResponseBodyRecordTemplate) *GetLiveRecordTemplateResponseBody {
	s.RecordTemplate = v
	return s
}

func (s *GetLiveRecordTemplateResponseBody) SetRequestId(v string) *GetLiveRecordTemplateResponseBody {
	s.RequestId = &v
	return s
}

type GetLiveRecordTemplateResponseBodyRecordTemplate struct {
	// The time when the job was created.
	//
	// Use the UTC time format: yyyy-MM-ddTHH:mmZ
	//
	// example:
	//
	// 2022-07-20T03:26:36Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the template was last modified.
	//
	// Use the UTC time format: yyyy-MM-ddTHH:mmZ
	//
	// example:
	//
	// 2022-07-20T03:26:36Z
	LastModified *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	// The template name.
	//
	// example:
	//
	// test template
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The list of recording formats.
	RecordFormatList []*GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList `json:"RecordFormatList,omitempty" xml:"RecordFormatList,omitempty" type:"Repeated"`
	// The template ID.
	//
	// example:
	//
	// 69e1f9fe-1e97-11ed-ba64-0c42a1b73d66
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The type of the template.
	//
	// Valid values:
	//
	// 	- system
	//
	// 	- custom
	//
	// example:
	//
	// custom
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetLiveRecordTemplateResponseBodyRecordTemplate) String() string {
	return tea.Prettify(s)
}

func (s GetLiveRecordTemplateResponseBodyRecordTemplate) GoString() string {
	return s.String()
}

func (s *GetLiveRecordTemplateResponseBodyRecordTemplate) SetCreateTime(v string) *GetLiveRecordTemplateResponseBodyRecordTemplate {
	s.CreateTime = &v
	return s
}

func (s *GetLiveRecordTemplateResponseBodyRecordTemplate) SetLastModified(v string) *GetLiveRecordTemplateResponseBodyRecordTemplate {
	s.LastModified = &v
	return s
}

func (s *GetLiveRecordTemplateResponseBodyRecordTemplate) SetName(v string) *GetLiveRecordTemplateResponseBodyRecordTemplate {
	s.Name = &v
	return s
}

func (s *GetLiveRecordTemplateResponseBodyRecordTemplate) SetRecordFormatList(v []*GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList) *GetLiveRecordTemplateResponseBodyRecordTemplate {
	s.RecordFormatList = v
	return s
}

func (s *GetLiveRecordTemplateResponseBodyRecordTemplate) SetTemplateId(v string) *GetLiveRecordTemplateResponseBodyRecordTemplate {
	s.TemplateId = &v
	return s
}

func (s *GetLiveRecordTemplateResponseBodyRecordTemplate) SetType(v string) *GetLiveRecordTemplateResponseBodyRecordTemplate {
	s.Type = &v
	return s
}

type GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList struct {
	// The duration of the recording cycle. Unit: seconds. If you do not specify this parameter, the default value 6 hours is used.
	//
	// example:
	//
	// 7200
	CycleDuration *int32 `json:"CycleDuration,omitempty" xml:"CycleDuration,omitempty"`
	// The output file format.
	//
	// example:
	//
	// m3u8
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
	// The name of the recording file that is stored in Object Storage Service (OSS).
	//
	// example:
	//
	// record/{JobId}/{Sequence}{EscapedStartTime}{EscapedEndTime}
	OssObjectPrefix *string `json:"OssObjectPrefix,omitempty" xml:"OssObjectPrefix,omitempty"`
	// The duration of a single segment. Unit: seconds.
	//
	// example:
	//
	// 30
	SliceDuration *int32 `json:"SliceDuration,omitempty" xml:"SliceDuration,omitempty"`
	// The name of the TS segment.
	//
	// example:
	//
	// record/{JobId}/{UnixTimestamp}_{Sequence}
	SliceOssObjectPrefix *string `json:"SliceOssObjectPrefix,omitempty" xml:"SliceOssObjectPrefix,omitempty"`
}

func (s GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList) String() string {
	return tea.Prettify(s)
}

func (s GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList) GoString() string {
	return s.String()
}

func (s *GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList) SetCycleDuration(v int32) *GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList {
	s.CycleDuration = &v
	return s
}

func (s *GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList) SetFormat(v string) *GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList {
	s.Format = &v
	return s
}

func (s *GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList) SetOssObjectPrefix(v string) *GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList {
	s.OssObjectPrefix = &v
	return s
}

func (s *GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList) SetSliceDuration(v int32) *GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList {
	s.SliceDuration = &v
	return s
}

func (s *GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList) SetSliceOssObjectPrefix(v string) *GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList {
	s.SliceOssObjectPrefix = &v
	return s
}

type GetLiveRecordTemplateResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetLiveRecordTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetLiveRecordTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLiveRecordTemplateResponse) GoString() string {
	return s.String()
}

func (s *GetLiveRecordTemplateResponse) SetHeaders(v map[string]*string) *GetLiveRecordTemplateResponse {
	s.Headers = v
	return s
}

func (s *GetLiveRecordTemplateResponse) SetStatusCode(v int32) *GetLiveRecordTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLiveRecordTemplateResponse) SetBody(v *GetLiveRecordTemplateResponseBody) *GetLiveRecordTemplateResponse {
	s.Body = v
	return s
}

type GetLiveSnapshotJobRequest struct {
	// The job ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetLiveSnapshotJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLiveSnapshotJobRequest) GoString() string {
	return s.String()
}

func (s *GetLiveSnapshotJobRequest) SetJobId(v string) *GetLiveSnapshotJobRequest {
	s.JobId = &v
	return s
}

type GetLiveSnapshotJobResponseBody struct {
	// The snapshot callback URL.
	//
	// example:
	//
	// http://www.aliyun.com/snapshot/callback
	CallbackUrl *string `json:"CallbackUrl,omitempty" xml:"CallbackUrl,omitempty"`
	// The time when the file was created.
	//
	// example:
	//
	// 2022-02-02T22:22:22Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The job ID.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The name of the job.
	JobName *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	// The time when the file was last modified.
	//
	// example:
	//
	// 2022-02-02T22:22:22Z
	LastModified *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	// The naming format of the snapshot captured in overwrite mode.
	//
	// example:
	//
	// snapshot/{JobId}.jpg
	OverwriteFormat *string `json:"OverwriteFormat,omitempty" xml:"OverwriteFormat,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The naming format of the snapshot captured in time series mode.
	//
	// example:
	//
	// snapshot/{JobId}/{UnixTimestamp}.jpg
	SequenceFormat *string `json:"SequenceFormat,omitempty" xml:"SequenceFormat,omitempty"`
	// The output information.
	SnapshotOutput *GetLiveSnapshotJobResponseBodySnapshotOutput `json:"SnapshotOutput,omitempty" xml:"SnapshotOutput,omitempty" type:"Struct"`
	// The state of the job.
	//
	// Valid values:
	//
	// 	- init: The job is not started.
	//
	// 	- paused: The job is paused.
	//
	// 	- started: The job is in progress.
	//
	// example:
	//
	// started
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The input information.
	StreamInput *GetLiveSnapshotJobResponseBodyStreamInput `json:"StreamInput,omitempty" xml:"StreamInput,omitempty" type:"Struct"`
	// The template ID.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287666****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The name of the template.
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// The interval between two adjacent snapshots.
	//
	// example:
	//
	// 5
	TimeInterval *int32 `json:"TimeInterval,omitempty" xml:"TimeInterval,omitempty"`
}

func (s GetLiveSnapshotJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLiveSnapshotJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetLiveSnapshotJobResponseBody) SetCallbackUrl(v string) *GetLiveSnapshotJobResponseBody {
	s.CallbackUrl = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBody) SetCreateTime(v string) *GetLiveSnapshotJobResponseBody {
	s.CreateTime = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBody) SetJobId(v string) *GetLiveSnapshotJobResponseBody {
	s.JobId = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBody) SetJobName(v string) *GetLiveSnapshotJobResponseBody {
	s.JobName = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBody) SetLastModified(v string) *GetLiveSnapshotJobResponseBody {
	s.LastModified = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBody) SetOverwriteFormat(v string) *GetLiveSnapshotJobResponseBody {
	s.OverwriteFormat = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBody) SetRequestId(v string) *GetLiveSnapshotJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBody) SetSequenceFormat(v string) *GetLiveSnapshotJobResponseBody {
	s.SequenceFormat = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBody) SetSnapshotOutput(v *GetLiveSnapshotJobResponseBodySnapshotOutput) *GetLiveSnapshotJobResponseBody {
	s.SnapshotOutput = v
	return s
}

func (s *GetLiveSnapshotJobResponseBody) SetStatus(v string) *GetLiveSnapshotJobResponseBody {
	s.Status = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBody) SetStreamInput(v *GetLiveSnapshotJobResponseBodyStreamInput) *GetLiveSnapshotJobResponseBody {
	s.StreamInput = v
	return s
}

func (s *GetLiveSnapshotJobResponseBody) SetTemplateId(v string) *GetLiveSnapshotJobResponseBody {
	s.TemplateId = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBody) SetTemplateName(v string) *GetLiveSnapshotJobResponseBody {
	s.TemplateName = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBody) SetTimeInterval(v int32) *GetLiveSnapshotJobResponseBody {
	s.TimeInterval = &v
	return s
}

type GetLiveSnapshotJobResponseBodySnapshotOutput struct {
	// The bucket of the output endpoint. If the storage type is set to oss, the OSS bucket is returned.
	//
	// example:
	//
	// testbucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// The output endpoint. If the storage type is set to oss, the Object Storage Service (OSS) domain name is returned.
	//
	// example:
	//
	// oss-cn-shanghai.aliyuncs.com
	Endpoint *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	// The storage type. The value can only be oss.
	//
	// example:
	//
	// oss
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s GetLiveSnapshotJobResponseBodySnapshotOutput) String() string {
	return tea.Prettify(s)
}

func (s GetLiveSnapshotJobResponseBodySnapshotOutput) GoString() string {
	return s.String()
}

func (s *GetLiveSnapshotJobResponseBodySnapshotOutput) SetBucket(v string) *GetLiveSnapshotJobResponseBodySnapshotOutput {
	s.Bucket = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBodySnapshotOutput) SetEndpoint(v string) *GetLiveSnapshotJobResponseBodySnapshotOutput {
	s.Endpoint = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBodySnapshotOutput) SetStorageType(v string) *GetLiveSnapshotJobResponseBodySnapshotOutput {
	s.StorageType = &v
	return s
}

type GetLiveSnapshotJobResponseBodyStreamInput struct {
	// The type of the input stream. The value can only be rtmp.
	//
	// example:
	//
	// rtmp
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The URL of the input stream.
	//
	// example:
	//
	// rtmp://www.aliyun.com/stream
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetLiveSnapshotJobResponseBodyStreamInput) String() string {
	return tea.Prettify(s)
}

func (s GetLiveSnapshotJobResponseBodyStreamInput) GoString() string {
	return s.String()
}

func (s *GetLiveSnapshotJobResponseBodyStreamInput) SetType(v string) *GetLiveSnapshotJobResponseBodyStreamInput {
	s.Type = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBodyStreamInput) SetUrl(v string) *GetLiveSnapshotJobResponseBodyStreamInput {
	s.Url = &v
	return s
}

type GetLiveSnapshotJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetLiveSnapshotJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetLiveSnapshotJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLiveSnapshotJobResponse) GoString() string {
	return s.String()
}

func (s *GetLiveSnapshotJobResponse) SetHeaders(v map[string]*string) *GetLiveSnapshotJobResponse {
	s.Headers = v
	return s
}

func (s *GetLiveSnapshotJobResponse) SetStatusCode(v int32) *GetLiveSnapshotJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLiveSnapshotJobResponse) SetBody(v *GetLiveSnapshotJobResponseBody) *GetLiveSnapshotJobResponse {
	s.Body = v
	return s
}

type GetLiveSnapshotTemplateRequest struct {
	// The template ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetLiveSnapshotTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLiveSnapshotTemplateRequest) GoString() string {
	return s.String()
}

func (s *GetLiveSnapshotTemplateRequest) SetTemplateId(v string) *GetLiveSnapshotTemplateRequest {
	s.TemplateId = &v
	return s
}

type GetLiveSnapshotTemplateResponseBody struct {
	// The time when the configuration was modified.
	//
	// example:
	//
	// 2022-02-02T22:22:22Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the template was created.
	//
	// example:
	//
	// 2022-02-02T22:22:22Z
	LastModified *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	// The naming format of the snapshot captured in overwrite mode.
	//
	// example:
	//
	// snapshot/{JobId}.jpg
	OverwriteFormat *string `json:"OverwriteFormat,omitempty" xml:"OverwriteFormat,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The naming format of the snapshot captured in time series mode.
	//
	// example:
	//
	// snapshot/{JobId}/{UnixTimestamp}.jpg
	SequenceFormat *string `json:"SequenceFormat,omitempty" xml:"SequenceFormat,omitempty"`
	// The template ID.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The template name.
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// The interval between two adjacent snapshots.
	//
	// example:
	//
	// 5
	TimeInterval *int32 `json:"TimeInterval,omitempty" xml:"TimeInterval,omitempty"`
	// The type of the template.
	//
	// Valid values:
	//
	// 	- system
	//
	// 	- custom
	//
	// example:
	//
	// custom
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetLiveSnapshotTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLiveSnapshotTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *GetLiveSnapshotTemplateResponseBody) SetCreateTime(v string) *GetLiveSnapshotTemplateResponseBody {
	s.CreateTime = &v
	return s
}

func (s *GetLiveSnapshotTemplateResponseBody) SetLastModified(v string) *GetLiveSnapshotTemplateResponseBody {
	s.LastModified = &v
	return s
}

func (s *GetLiveSnapshotTemplateResponseBody) SetOverwriteFormat(v string) *GetLiveSnapshotTemplateResponseBody {
	s.OverwriteFormat = &v
	return s
}

func (s *GetLiveSnapshotTemplateResponseBody) SetRequestId(v string) *GetLiveSnapshotTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetLiveSnapshotTemplateResponseBody) SetSequenceFormat(v string) *GetLiveSnapshotTemplateResponseBody {
	s.SequenceFormat = &v
	return s
}

func (s *GetLiveSnapshotTemplateResponseBody) SetTemplateId(v string) *GetLiveSnapshotTemplateResponseBody {
	s.TemplateId = &v
	return s
}

func (s *GetLiveSnapshotTemplateResponseBody) SetTemplateName(v string) *GetLiveSnapshotTemplateResponseBody {
	s.TemplateName = &v
	return s
}

func (s *GetLiveSnapshotTemplateResponseBody) SetTimeInterval(v int32) *GetLiveSnapshotTemplateResponseBody {
	s.TimeInterval = &v
	return s
}

func (s *GetLiveSnapshotTemplateResponseBody) SetType(v string) *GetLiveSnapshotTemplateResponseBody {
	s.Type = &v
	return s
}

type GetLiveSnapshotTemplateResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetLiveSnapshotTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetLiveSnapshotTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLiveSnapshotTemplateResponse) GoString() string {
	return s.String()
}

func (s *GetLiveSnapshotTemplateResponse) SetHeaders(v map[string]*string) *GetLiveSnapshotTemplateResponse {
	s.Headers = v
	return s
}

func (s *GetLiveSnapshotTemplateResponse) SetStatusCode(v int32) *GetLiveSnapshotTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLiveSnapshotTemplateResponse) SetBody(v *GetLiveSnapshotTemplateResponseBody) *GetLiveSnapshotTemplateResponse {
	s.Body = v
	return s
}

type GetLiveTranscodeJobRequest struct {
	// The ID of the transcoding job.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetLiveTranscodeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeJobRequest) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeJobRequest) SetJobId(v string) *GetLiveTranscodeJobRequest {
	s.JobId = &v
	return s
}

type GetLiveTranscodeJobResponseBody struct {
	// The information about the transcoding job.
	Job *GetLiveTranscodeJobResponseBodyJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetLiveTranscodeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeJobResponseBody) SetJob(v *GetLiveTranscodeJobResponseBodyJob) *GetLiveTranscodeJobResponseBody {
	s.Job = v
	return s
}

func (s *GetLiveTranscodeJobResponseBody) SetRequestId(v string) *GetLiveTranscodeJobResponseBody {
	s.RequestId = &v
	return s
}

type GetLiveTranscodeJobResponseBodyJob struct {
	// The time when the job was created.
	//
	// example:
	//
	// 2022-07-20T02:48:58Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the transcoding job.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The name of the transcoding job.
	//
	// example:
	//
	// task1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The information about the output stream.
	OutputStream *GetLiveTranscodeJobResponseBodyJobOutputStream `json:"OutputStream,omitempty" xml:"OutputStream,omitempty" type:"Struct"`
	// The start mode of the job.
	//
	// example:
	//
	// 0
	StartMode *int32 `json:"StartMode,omitempty" xml:"StartMode,omitempty"`
	// The state of the job.
	//
	// 	- 0: The job is not started.
	//
	// 	- 1: The job is in progress.
	//
	// 	- 2: The job is stopped.
	//
	// example:
	//
	// 1
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The information about the input stream.
	StreamInput *GetLiveTranscodeJobResponseBodyJobStreamInput `json:"StreamInput,omitempty" xml:"StreamInput,omitempty" type:"Struct"`
	// The template ID.
	//
	// example:
	//
	// b6491d5b3e514b7d895d14b5453ea119
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The template name.
	//
	// example:
	//
	// basic
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// The type of the template.
	//
	// example:
	//
	// normal
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
}

func (s GetLiveTranscodeJobResponseBodyJob) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeJobResponseBodyJob) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetCreateTime(v string) *GetLiveTranscodeJobResponseBodyJob {
	s.CreateTime = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetJobId(v string) *GetLiveTranscodeJobResponseBodyJob {
	s.JobId = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetName(v string) *GetLiveTranscodeJobResponseBodyJob {
	s.Name = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetOutputStream(v *GetLiveTranscodeJobResponseBodyJobOutputStream) *GetLiveTranscodeJobResponseBodyJob {
	s.OutputStream = v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetStartMode(v int32) *GetLiveTranscodeJobResponseBodyJob {
	s.StartMode = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetStatus(v int32) *GetLiveTranscodeJobResponseBodyJob {
	s.Status = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetStreamInput(v *GetLiveTranscodeJobResponseBodyJobStreamInput) *GetLiveTranscodeJobResponseBodyJob {
	s.StreamInput = v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetTemplateId(v string) *GetLiveTranscodeJobResponseBodyJob {
	s.TemplateId = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetTemplateName(v string) *GetLiveTranscodeJobResponseBodyJob {
	s.TemplateName = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetTemplateType(v string) *GetLiveTranscodeJobResponseBodyJob {
	s.TemplateType = &v
	return s
}

type GetLiveTranscodeJobResponseBodyJobOutputStream struct {
	// The information about the output stream.
	StreamInfos []*GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos `json:"StreamInfos,omitempty" xml:"StreamInfos,omitempty" type:"Repeated"`
}

func (s GetLiveTranscodeJobResponseBodyJobOutputStream) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeJobResponseBodyJobOutputStream) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeJobResponseBodyJobOutputStream) SetStreamInfos(v []*GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos) *GetLiveTranscodeJobResponseBodyJobOutputStream {
	s.StreamInfos = v
	return s
}

type GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos struct {
	// The URL of the output stream.
	//
	// example:
	//
	// rtmp://mydomain/app/mytranscode1
	OutputUrl *string `json:"OutputUrl,omitempty" xml:"OutputUrl,omitempty"`
	// The type of the output stream protocol. Only the RTMP protocol is supported.
	//
	// example:
	//
	// rtmp
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos) SetOutputUrl(v string) *GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos {
	s.OutputUrl = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos) SetType(v string) *GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos {
	s.Type = &v
	return s
}

type GetLiveTranscodeJobResponseBodyJobStreamInput struct {
	// The URL of the input stream.
	//
	// example:
	//
	// rtmp://mydomain/app/stream1
	InputUrl *string `json:"InputUrl,omitempty" xml:"InputUrl,omitempty"`
	// The type of the input stream.
	//
	// example:
	//
	// rtmp
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetLiveTranscodeJobResponseBodyJobStreamInput) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeJobResponseBodyJobStreamInput) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeJobResponseBodyJobStreamInput) SetInputUrl(v string) *GetLiveTranscodeJobResponseBodyJobStreamInput {
	s.InputUrl = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJobStreamInput) SetType(v string) *GetLiveTranscodeJobResponseBodyJobStreamInput {
	s.Type = &v
	return s
}

type GetLiveTranscodeJobResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetLiveTranscodeJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetLiveTranscodeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeJobResponse) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeJobResponse) SetHeaders(v map[string]*string) *GetLiveTranscodeJobResponse {
	s.Headers = v
	return s
}

func (s *GetLiveTranscodeJobResponse) SetStatusCode(v int32) *GetLiveTranscodeJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLiveTranscodeJobResponse) SetBody(v *GetLiveTranscodeJobResponseBody) *GetLiveTranscodeJobResponse {
	s.Body = v
	return s
}

type GetLiveTranscodeTemplateRequest struct {
	// The template ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287666****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetLiveTranscodeTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeTemplateRequest) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeTemplateRequest) SetTemplateId(v string) *GetLiveTranscodeTemplateRequest {
	s.TemplateId = &v
	return s
}

type GetLiveTranscodeTemplateResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The content of the template.
	TemplateContent *GetLiveTranscodeTemplateResponseBodyTemplateContent `json:"TemplateContent,omitempty" xml:"TemplateContent,omitempty" type:"Struct"`
}

func (s GetLiveTranscodeTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeTemplateResponseBody) SetRequestId(v string) *GetLiveTranscodeTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBody) SetTemplateContent(v *GetLiveTranscodeTemplateResponseBodyTemplateContent) *GetLiveTranscodeTemplateResponseBody {
	s.TemplateContent = v
	return s
}

type GetLiveTranscodeTemplateResponseBodyTemplateContent struct {
	// The category of the template. Valid values:
	//
	// 	- system
	//
	// 	- customized
	//
	// example:
	//
	// customized
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The time when the template was created.
	//
	// example:
	//
	// 2022-07-25T06:15:14Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The name of the template.
	//
	// example:
	//
	// my-template
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The configuration of the template.
	TemplateConfig *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty" type:"Struct"`
	// The template ID.
	//
	// example:
	//
	// bcfa57950bc649b2abfb476ecd36ea4f
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The type of the template.
	//
	// example:
	//
	// normal
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetLiveTranscodeTemplateResponseBodyTemplateContent) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeTemplateResponseBodyTemplateContent) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContent) SetCategory(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContent {
	s.Category = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContent) SetCreateTime(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContent {
	s.CreateTime = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContent) SetName(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContent {
	s.Name = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContent) SetTemplateConfig(v *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig) *GetLiveTranscodeTemplateResponseBodyTemplateContent {
	s.TemplateConfig = v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContent) SetTemplateId(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContent {
	s.TemplateId = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContent) SetType(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContent {
	s.Type = &v
	return s
}

type GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig struct {
	// The audio parameters.
	AudioParams *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams `json:"AudioParams,omitempty" xml:"AudioParams,omitempty" type:"Struct"`
	// The video parameters.
	VideoParams *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams `json:"VideoParams,omitempty" xml:"VideoParams,omitempty" type:"Struct"`
}

func (s GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig) SetAudioParams(v *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig {
	s.AudioParams = v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig) SetVideoParams(v *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig {
	s.VideoParams = v
	return s
}

type GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams struct {
	// The bitrate of the output audio.
	//
	// example:
	//
	// 1000
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The number of sound channels.
	//
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// The audio codec.
	//
	// example:
	//
	// AAC
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// The audio codec profile.
	//
	// example:
	//
	// 1
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// The audio sampling rate.
	//
	// example:
	//
	// 44100
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
}

func (s GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams) SetBitrate(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams {
	s.Bitrate = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams) SetChannels(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams {
	s.Channels = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams) SetCodec(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams {
	s.Codec = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams) SetProfile(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams {
	s.Profile = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams) SetSamplerate(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams {
	s.Samplerate = &v
	return s
}

type GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams struct {
	// The bitrate of the output video.
	//
	// example:
	//
	// 2500
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The encoding type.
	//
	// example:
	//
	// H.264
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// The frame rate of the output video.
	//
	// example:
	//
	// 30
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// The group of pictures (GOP) of the output video.
	//
	// example:
	//
	// 1000
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// The height of the output video.
	//
	// example:
	//
	// 720
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The encoding profile.
	//
	// example:
	//
	// 2
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// The width of the output video.
	//
	// example:
	//
	// 1280
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) SetBitrate(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams {
	s.Bitrate = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) SetCodec(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams {
	s.Codec = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) SetFps(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams {
	s.Fps = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) SetGop(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams {
	s.Gop = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) SetHeight(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams {
	s.Height = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) SetProfile(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams {
	s.Profile = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) SetWidth(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams {
	s.Width = &v
	return s
}

type GetLiveTranscodeTemplateResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetLiveTranscodeTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetLiveTranscodeTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeTemplateResponse) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeTemplateResponse) SetHeaders(v map[string]*string) *GetLiveTranscodeTemplateResponse {
	s.Headers = v
	return s
}

func (s *GetLiveTranscodeTemplateResponse) SetStatusCode(v int32) *GetLiveTranscodeTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponse) SetBody(v *GetLiveTranscodeTemplateResponseBody) *GetLiveTranscodeTemplateResponse {
	s.Body = v
	return s
}

type GetMediaConnectFlowRequest struct {
	// The flow ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 34900dc6-90ec-4968-af3c-fcd87f231a5f
	FlowId *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
}

func (s GetMediaConnectFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMediaConnectFlowRequest) GoString() string {
	return s.String()
}

func (s *GetMediaConnectFlowRequest) SetFlowId(v string) *GetMediaConnectFlowRequest {
	s.FlowId = &v
	return s
}

type GetMediaConnectFlowResponseBody struct {
	// The response body.
	Content *GetMediaConnectFlowResponseBodyContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Struct"`
	// The call description.
	//
	// example:
	//
	// OK
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// FB503AEF-118E-1516-89E2-7B227EA1AC20
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The returned code. A value of 0 indicates the call is successful.
	//
	// example:
	//
	// 0
	Retcode *int32 `json:"Retcode,omitempty" xml:"Retcode,omitempty"`
}

func (s GetMediaConnectFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMediaConnectFlowResponseBody) GoString() string {
	return s.String()
}

func (s *GetMediaConnectFlowResponseBody) SetContent(v *GetMediaConnectFlowResponseBodyContent) *GetMediaConnectFlowResponseBody {
	s.Content = v
	return s
}

func (s *GetMediaConnectFlowResponseBody) SetDescription(v string) *GetMediaConnectFlowResponseBody {
	s.Description = &v
	return s
}

func (s *GetMediaConnectFlowResponseBody) SetRequestId(v string) *GetMediaConnectFlowResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMediaConnectFlowResponseBody) SetRetcode(v int32) *GetMediaConnectFlowResponseBody {
	s.Retcode = &v
	return s
}

type GetMediaConnectFlowResponseBodyContent struct {
	// The time when the flow was created.
	//
	// example:
	//
	// 2024-07-18T01:29:24Z
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	FlowFailover *string `json:"FlowFailover,omitempty" xml:"FlowFailover,omitempty"`
	// The flow ID.
	//
	// example:
	//
	// 34900dc6-90ec-4968-af3c-fcd87f231a5f
	FlowId *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	// The flow name.
	//
	// example:
	//
	// AliTestFlow
	FlowName *string `json:"FlowName,omitempty" xml:"FlowName,omitempty"`
	// The state of the flow.
	//
	// example:
	//
	// online
	FlowStatus *string `json:"FlowStatus,omitempty" xml:"FlowStatus,omitempty"`
	// The time when the flow is started.
	//
	// example:
	//
	// 2024-07-18T01:39:24Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetMediaConnectFlowResponseBodyContent) String() string {
	return tea.Prettify(s)
}

func (s GetMediaConnectFlowResponseBodyContent) GoString() string {
	return s.String()
}

func (s *GetMediaConnectFlowResponseBodyContent) SetCreateTime(v string) *GetMediaConnectFlowResponseBodyContent {
	s.CreateTime = &v
	return s
}

func (s *GetMediaConnectFlowResponseBodyContent) SetFlowFailover(v string) *GetMediaConnectFlowResponseBodyContent {
	s.FlowFailover = &v
	return s
}

func (s *GetMediaConnectFlowResponseBodyContent) SetFlowId(v string) *GetMediaConnectFlowResponseBodyContent {
	s.FlowId = &v
	return s
}

func (s *GetMediaConnectFlowResponseBodyContent) SetFlowName(v string) *GetMediaConnectFlowResponseBodyContent {
	s.FlowName = &v
	return s
}

func (s *GetMediaConnectFlowResponseBodyContent) SetFlowStatus(v string) *GetMediaConnectFlowResponseBodyContent {
	s.FlowStatus = &v
	return s
}

func (s *GetMediaConnectFlowResponseBodyContent) SetStartTime(v string) *GetMediaConnectFlowResponseBodyContent {
	s.StartTime = &v
	return s
}

type GetMediaConnectFlowResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMediaConnectFlowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMediaConnectFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMediaConnectFlowResponse) GoString() string {
	return s.String()
}

func (s *GetMediaConnectFlowResponse) SetHeaders(v map[string]*string) *GetMediaConnectFlowResponse {
	s.Headers = v
	return s
}

func (s *GetMediaConnectFlowResponse) SetStatusCode(v int32) *GetMediaConnectFlowResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMediaConnectFlowResponse) SetBody(v *GetMediaConnectFlowResponseBody) *GetMediaConnectFlowResponse {
	s.Body = v
	return s
}

type GetMediaConnectFlowInputRequest struct {
	// The flow ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 34900dc6-90ec-4968-af3c-fcd87f231a5f
	FlowId *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
}

func (s GetMediaConnectFlowInputRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMediaConnectFlowInputRequest) GoString() string {
	return s.String()
}

func (s *GetMediaConnectFlowInputRequest) SetFlowId(v string) *GetMediaConnectFlowInputRequest {
	s.FlowId = &v
	return s
}

type GetMediaConnectFlowInputResponseBody struct {
	// The response body.
	Content *GetMediaConnectFlowInputResponseBodyContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Struct"`
	// The call description.
	//
	// example:
	//
	// OK
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// D4C231DF-103A-55FF-8D09-E699552457DE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The returned error code. A value of 0 indicates the call is successful.
	//
	// example:
	//
	// 0
	RetCode *int32 `json:"RetCode,omitempty" xml:"RetCode,omitempty"`
}

func (s GetMediaConnectFlowInputResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMediaConnectFlowInputResponseBody) GoString() string {
	return s.String()
}

func (s *GetMediaConnectFlowInputResponseBody) SetContent(v *GetMediaConnectFlowInputResponseBodyContent) *GetMediaConnectFlowInputResponseBody {
	s.Content = v
	return s
}

func (s *GetMediaConnectFlowInputResponseBody) SetDescription(v string) *GetMediaConnectFlowInputResponseBody {
	s.Description = &v
	return s
}

func (s *GetMediaConnectFlowInputResponseBody) SetRequestId(v string) *GetMediaConnectFlowInputResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMediaConnectFlowInputResponseBody) SetRetCode(v int32) *GetMediaConnectFlowInputResponseBody {
	s.RetCode = &v
	return s
}

type GetMediaConnectFlowInputResponseBodyContent struct {
	BackupCidrs         *string `json:"BackupCidrs,omitempty" xml:"BackupCidrs,omitempty"`
	BackupCreateTime    *string `json:"BackupCreateTime,omitempty" xml:"BackupCreateTime,omitempty"`
	BackupInputName     *string `json:"BackupInputName,omitempty" xml:"BackupInputName,omitempty"`
	BackupInputStatus   *string `json:"BackupInputStatus,omitempty" xml:"BackupInputStatus,omitempty"`
	BackupInputUrl      *string `json:"BackupInputUrl,omitempty" xml:"BackupInputUrl,omitempty"`
	BackupMaxBitrate    *int32  `json:"BackupMaxBitrate,omitempty" xml:"BackupMaxBitrate,omitempty"`
	BackupSrtLatency    *int32  `json:"BackupSrtLatency,omitempty" xml:"BackupSrtLatency,omitempty"`
	BackupSrtPassphrase *string `json:"BackupSrtPassphrase,omitempty" xml:"BackupSrtPassphrase,omitempty"`
	BackupSrtPbkeyLen   *int32  `json:"BackupSrtPbkeyLen,omitempty" xml:"BackupSrtPbkeyLen,omitempty"`
	// The IP address whitelist in CIDR format. CIDR blocks are separated with commas (,).
	//
	// example:
	//
	// 10.211.0.0/17
	Cidrs *string `json:"Cidrs,omitempty" xml:"Cidrs,omitempty"`
	// The time when the flow was created.
	//
	// example:
	//
	// 2024-07-18T01:29:24Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The source name.
	//
	// example:
	//
	// AliTestInput
	InputName *string `json:"InputName,omitempty" xml:"InputName,omitempty"`
	// The source type.
	//
	// Valid values:
	//
	// 	- RTMP-PUSH
	//
	// 	- SRT-Caller
	//
	// 	- RTMP-PULL
	//
	// 	- SRT-Listener
	//
	// 	- Flow
	//
	// example:
	//
	// RTMP-PUSH
	InputProtocol *string `json:"InputProtocol,omitempty" xml:"InputProtocol,omitempty"`
	InputStatus   *string `json:"InputStatus,omitempty" xml:"InputStatus,omitempty"`
	// The source URL.
	//
	// example:
	//
	// rtmp://1.2.3.4:1935/live/AliTestInput_8666ec062190f00e263012666319a5be
	InputUrl *string `json:"InputUrl,omitempty" xml:"InputUrl,omitempty"`
	// The maximum bitrate. Unit: bit/s.
	//
	// example:
	//
	// 2000000
	MaxBitrate *int32 `json:"MaxBitrate,omitempty" xml:"MaxBitrate,omitempty"`
	// The ID of the source flow. This parameter is returned when the source type is Flow.
	//
	// example:
	//
	// 05c3adf4-aa0e-421d-a991-48ceae3e642e
	PairFlowId *string `json:"PairFlowId,omitempty" xml:"PairFlowId,omitempty"`
	// The output of the source flow. This parameter is returned when the source type is Flow.
	//
	// example:
	//
	// AliTestOutput
	PairOutputName *string `json:"PairOutputName,omitempty" xml:"PairOutputName,omitempty"`
	// The latency for the SRT stream. Unit: milliseconds. This parameter is returned when the source type is SRT-Listener or SRT-Caller.
	//
	// example:
	//
	// 1000
	SrtLatency *int32 `json:"SrtLatency,omitempty" xml:"SrtLatency,omitempty"`
	// The SRT key. This parameter is returned when the source type is SRT-Listener or SRT-Caller.
	//
	// example:
	//
	// FICUBPX4Q77DYHRF
	SrtPassphrase *string `json:"SrtPassphrase,omitempty" xml:"SrtPassphrase,omitempty"`
	// The encryption key length. This parameter is returned when the source type is SRT-Listener or SRT-Caller.
	//
	// Valid values:
	//
	// 	- 0
	//
	// 	- 16
	//
	// 	- 24
	//
	// 	- 32
	//
	// example:
	//
	// 32
	SrtPbkeyLen *int32 `json:"SrtPbkeyLen,omitempty" xml:"SrtPbkeyLen,omitempty"`
}

func (s GetMediaConnectFlowInputResponseBodyContent) String() string {
	return tea.Prettify(s)
}

func (s GetMediaConnectFlowInputResponseBodyContent) GoString() string {
	return s.String()
}

func (s *GetMediaConnectFlowInputResponseBodyContent) SetBackupCidrs(v string) *GetMediaConnectFlowInputResponseBodyContent {
	s.BackupCidrs = &v
	return s
}

func (s *GetMediaConnectFlowInputResponseBodyContent) SetBackupCreateTime(v string) *GetMediaConnectFlowInputResponseBodyContent {
	s.BackupCreateTime = &v
	return s
}

func (s *GetMediaConnectFlowInputResponseBodyContent) SetBackupInputName(v string) *GetMediaConnectFlowInputResponseBodyContent {
	s.BackupInputName = &v
	return s
}

func (s *GetMediaConnectFlowInputResponseBodyContent) SetBackupInputStatus(v string) *GetMediaConnectFlowInputResponseBodyContent {
	s.BackupInputStatus = &v
	return s
}

func (s *GetMediaConnectFlowInputResponseBodyContent) SetBackupInputUrl(v string) *GetMediaConnectFlowInputResponseBodyContent {
	s.BackupInputUrl = &v
	return s
}

func (s *GetMediaConnectFlowInputResponseBodyContent) SetBackupMaxBitrate(v int32) *GetMediaConnectFlowInputResponseBodyContent {
	s.BackupMaxBitrate = &v
	return s
}

func (s *GetMediaConnectFlowInputResponseBodyContent) SetBackupSrtLatency(v int32) *GetMediaConnectFlowInputResponseBodyContent {
	s.BackupSrtLatency = &v
	return s
}

func (s *GetMediaConnectFlowInputResponseBodyContent) SetBackupSrtPassphrase(v string) *GetMediaConnectFlowInputResponseBodyContent {
	s.BackupSrtPassphrase = &v
	return s
}

func (s *GetMediaConnectFlowInputResponseBodyContent) SetBackupSrtPbkeyLen(v int32) *GetMediaConnectFlowInputResponseBodyContent {
	s.BackupSrtPbkeyLen = &v
	return s
}

func (s *GetMediaConnectFlowInputResponseBodyContent) SetCidrs(v string) *GetMediaConnectFlowInputResponseBodyContent {
	s.Cidrs = &v
	return s
}

func (s *GetMediaConnectFlowInputResponseBodyContent) SetCreateTime(v string) *GetMediaConnectFlowInputResponseBodyContent {
	s.CreateTime = &v
	return s
}

func (s *GetMediaConnectFlowInputResponseBodyContent) SetInputName(v string) *GetMediaConnectFlowInputResponseBodyContent {
	s.InputName = &v
	return s
}

func (s *GetMediaConnectFlowInputResponseBodyContent) SetInputProtocol(v string) *GetMediaConnectFlowInputResponseBodyContent {
	s.InputProtocol = &v
	return s
}

func (s *GetMediaConnectFlowInputResponseBodyContent) SetInputStatus(v string) *GetMediaConnectFlowInputResponseBodyContent {
	s.InputStatus = &v
	return s
}

func (s *GetMediaConnectFlowInputResponseBodyContent) SetInputUrl(v string) *GetMediaConnectFlowInputResponseBodyContent {
	s.InputUrl = &v
	return s
}

func (s *GetMediaConnectFlowInputResponseBodyContent) SetMaxBitrate(v int32) *GetMediaConnectFlowInputResponseBodyContent {
	s.MaxBitrate = &v
	return s
}

func (s *GetMediaConnectFlowInputResponseBodyContent) SetPairFlowId(v string) *GetMediaConnectFlowInputResponseBodyContent {
	s.PairFlowId = &v
	return s
}

func (s *GetMediaConnectFlowInputResponseBodyContent) SetPairOutputName(v string) *GetMediaConnectFlowInputResponseBodyContent {
	s.PairOutputName = &v
	return s
}

func (s *GetMediaConnectFlowInputResponseBodyContent) SetSrtLatency(v int32) *GetMediaConnectFlowInputResponseBodyContent {
	s.SrtLatency = &v
	return s
}

func (s *GetMediaConnectFlowInputResponseBodyContent) SetSrtPassphrase(v string) *GetMediaConnectFlowInputResponseBodyContent {
	s.SrtPassphrase = &v
	return s
}

func (s *GetMediaConnectFlowInputResponseBodyContent) SetSrtPbkeyLen(v int32) *GetMediaConnectFlowInputResponseBodyContent {
	s.SrtPbkeyLen = &v
	return s
}

type GetMediaConnectFlowInputResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMediaConnectFlowInputResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMediaConnectFlowInputResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMediaConnectFlowInputResponse) GoString() string {
	return s.String()
}

func (s *GetMediaConnectFlowInputResponse) SetHeaders(v map[string]*string) *GetMediaConnectFlowInputResponse {
	s.Headers = v
	return s
}

func (s *GetMediaConnectFlowInputResponse) SetStatusCode(v int32) *GetMediaConnectFlowInputResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMediaConnectFlowInputResponse) SetBody(v *GetMediaConnectFlowInputResponseBody) *GetMediaConnectFlowInputResponse {
	s.Body = v
	return s
}

type GetMediaConnectFlowOutputRequest struct {
	// The flow ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0381f478-7d53-4076-9d5f-27680a6f73e7
	FlowId *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	// The name of the output that you want to query.
	//
	// This parameter is required.
	//
	// example:
	//
	// AliTestOutput
	OutputName *string `json:"OutputName,omitempty" xml:"OutputName,omitempty"`
}

func (s GetMediaConnectFlowOutputRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMediaConnectFlowOutputRequest) GoString() string {
	return s.String()
}

func (s *GetMediaConnectFlowOutputRequest) SetFlowId(v string) *GetMediaConnectFlowOutputRequest {
	s.FlowId = &v
	return s
}

func (s *GetMediaConnectFlowOutputRequest) SetOutputName(v string) *GetMediaConnectFlowOutputRequest {
	s.OutputName = &v
	return s
}

type GetMediaConnectFlowOutputResponseBody struct {
	// The response body.
	Content *GetMediaConnectFlowOutputResponseBodyContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Struct"`
	// The call description.
	//
	// example:
	//
	// OK
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 0DB23DCE-0D69-598B-AA7C-7268D55E2F89
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The returned error code. A value of 0 indicates the call is successful.
	//
	// example:
	//
	// 0
	RetCode *int32 `json:"RetCode,omitempty" xml:"RetCode,omitempty"`
}

func (s GetMediaConnectFlowOutputResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMediaConnectFlowOutputResponseBody) GoString() string {
	return s.String()
}

func (s *GetMediaConnectFlowOutputResponseBody) SetContent(v *GetMediaConnectFlowOutputResponseBodyContent) *GetMediaConnectFlowOutputResponseBody {
	s.Content = v
	return s
}

func (s *GetMediaConnectFlowOutputResponseBody) SetDescription(v string) *GetMediaConnectFlowOutputResponseBody {
	s.Description = &v
	return s
}

func (s *GetMediaConnectFlowOutputResponseBody) SetRequestId(v string) *GetMediaConnectFlowOutputResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMediaConnectFlowOutputResponseBody) SetRetCode(v int32) *GetMediaConnectFlowOutputResponseBody {
	s.RetCode = &v
	return s
}

type GetMediaConnectFlowOutputResponseBodyContent struct {
	// The IP address whitelist in CIDR format. CIDR blocks are separated with commas (,).
	//
	// example:
	//
	// 10.211.0.0/17
	Cidrs *string `json:"Cidrs,omitempty" xml:"Cidrs,omitempty"`
	// The time when the flow was created.
	//
	// example:
	//
	// 2024-07-18T01:29:24Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Forbid     *string `json:"Forbid,omitempty" xml:"Forbid,omitempty"`
	// The output name.
	//
	// example:
	//
	// AliTestInput
	OutputName *string `json:"OutputName,omitempty" xml:"OutputName,omitempty"`
	// The output type.
	//
	// Valid values:
	//
	// 	- RTMP-PUSH
	//
	// 	- SRT-Caller
	//
	// 	- RTMP-PULL
	//
	// 	- SRT-Listener
	//
	// 	- Flow
	//
	// example:
	//
	// SRT-PULL
	OutputProtocol *string `json:"OutputProtocol,omitempty" xml:"OutputProtocol,omitempty"`
	// The output URL.
	//
	// example:
	//
	// srt://1.2.3.4:1025
	OutputUrl *string `json:"OutputUrl,omitempty" xml:"OutputUrl,omitempty"`
	// The ID of the destination flow. This parameter is returned when the output type is Flow.
	//
	// example:
	//
	// 805fbdd0-575e-4146-b35d-ec7f63937b20
	PairFlowId *string `json:"PairFlowId,omitempty" xml:"PairFlowId,omitempty"`
	// The source name of the destination flow. This parameter is returned when the output type is Flow.
	//
	// example:
	//
	// AliTestInput
	PairInputName *string `json:"PairInputName,omitempty" xml:"PairInputName,omitempty"`
	// The maximum number of viewers.
	//
	// example:
	//
	// 5
	PlayerLimit *int32 `json:"PlayerLimit,omitempty" xml:"PlayerLimit,omitempty"`
	// The latency for the SRT stream. Unit: milliseconds. This parameter is returned when the source type is SRT-Listener or SRT-Caller.
	//
	// example:
	//
	// 1000
	SrtLatency *int32 `json:"SrtLatency,omitempty" xml:"SrtLatency,omitempty"`
	// The SRT key. This parameter is returned when the source type is SRT-Listener or SRT-Caller.
	//
	// example:
	//
	// FICUBPX4Q77DYHRF
	SrtPassphrase *string `json:"SrtPassphrase,omitempty" xml:"SrtPassphrase,omitempty"`
	// The encryption key length. This parameter is returned when the source type is SRT-Listener or SRT-Caller.
	//
	// Valid values:
	//
	// 	- 0
	//
	// 	- 16
	//
	// 	- 24
	//
	// 	- 32
	//
	// example:
	//
	// 32
	SrtPbkeyLen *int32 `json:"SrtPbkeyLen,omitempty" xml:"SrtPbkeyLen,omitempty"`
}

func (s GetMediaConnectFlowOutputResponseBodyContent) String() string {
	return tea.Prettify(s)
}

func (s GetMediaConnectFlowOutputResponseBodyContent) GoString() string {
	return s.String()
}

func (s *GetMediaConnectFlowOutputResponseBodyContent) SetCidrs(v string) *GetMediaConnectFlowOutputResponseBodyContent {
	s.Cidrs = &v
	return s
}

func (s *GetMediaConnectFlowOutputResponseBodyContent) SetCreateTime(v string) *GetMediaConnectFlowOutputResponseBodyContent {
	s.CreateTime = &v
	return s
}

func (s *GetMediaConnectFlowOutputResponseBodyContent) SetForbid(v string) *GetMediaConnectFlowOutputResponseBodyContent {
	s.Forbid = &v
	return s
}

func (s *GetMediaConnectFlowOutputResponseBodyContent) SetOutputName(v string) *GetMediaConnectFlowOutputResponseBodyContent {
	s.OutputName = &v
	return s
}

func (s *GetMediaConnectFlowOutputResponseBodyContent) SetOutputProtocol(v string) *GetMediaConnectFlowOutputResponseBodyContent {
	s.OutputProtocol = &v
	return s
}

func (s *GetMediaConnectFlowOutputResponseBodyContent) SetOutputUrl(v string) *GetMediaConnectFlowOutputResponseBodyContent {
	s.OutputUrl = &v
	return s
}

func (s *GetMediaConnectFlowOutputResponseBodyContent) SetPairFlowId(v string) *GetMediaConnectFlowOutputResponseBodyContent {
	s.PairFlowId = &v
	return s
}

func (s *GetMediaConnectFlowOutputResponseBodyContent) SetPairInputName(v string) *GetMediaConnectFlowOutputResponseBodyContent {
	s.PairInputName = &v
	return s
}

func (s *GetMediaConnectFlowOutputResponseBodyContent) SetPlayerLimit(v int32) *GetMediaConnectFlowOutputResponseBodyContent {
	s.PlayerLimit = &v
	return s
}

func (s *GetMediaConnectFlowOutputResponseBodyContent) SetSrtLatency(v int32) *GetMediaConnectFlowOutputResponseBodyContent {
	s.SrtLatency = &v
	return s
}

func (s *GetMediaConnectFlowOutputResponseBodyContent) SetSrtPassphrase(v string) *GetMediaConnectFlowOutputResponseBodyContent {
	s.SrtPassphrase = &v
	return s
}

func (s *GetMediaConnectFlowOutputResponseBodyContent) SetSrtPbkeyLen(v int32) *GetMediaConnectFlowOutputResponseBodyContent {
	s.SrtPbkeyLen = &v
	return s
}

type GetMediaConnectFlowOutputResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMediaConnectFlowOutputResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMediaConnectFlowOutputResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMediaConnectFlowOutputResponse) GoString() string {
	return s.String()
}

func (s *GetMediaConnectFlowOutputResponse) SetHeaders(v map[string]*string) *GetMediaConnectFlowOutputResponse {
	s.Headers = v
	return s
}

func (s *GetMediaConnectFlowOutputResponse) SetStatusCode(v int32) *GetMediaConnectFlowOutputResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMediaConnectFlowOutputResponse) SetBody(v *GetMediaConnectFlowOutputResponseBody) *GetMediaConnectFlowOutputResponse {
	s.Body = v
	return s
}

type GetMediaConvertJobRequest struct {
	// The ID of the transcoding task.
	//
	// example:
	//
	// ****d80e4e4044975745c14b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetMediaConvertJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMediaConvertJobRequest) GoString() string {
	return s.String()
}

func (s *GetMediaConvertJobRequest) SetJobId(v string) *GetMediaConvertJobRequest {
	s.JobId = &v
	return s
}

type GetMediaConvertJobResponseBody struct {
	// The transcoding task.
	Job *GetMediaConvertJobResponseBodyJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 4BAEA8E8-1C16-5CD3-AC50-CCBA81A53402
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetMediaConvertJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMediaConvertJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetMediaConvertJobResponseBody) SetJob(v *GetMediaConvertJobResponseBodyJob) *GetMediaConvertJobResponseBody {
	s.Job = v
	return s
}

func (s *GetMediaConvertJobResponseBody) SetRequestId(v string) *GetMediaConvertJobResponseBody {
	s.RequestId = &v
	return s
}

type GetMediaConvertJobResponseBodyJob struct {
	// The idempotency key of the request for creating the transcoding task.
	//
	// example:
	//
	// 780018cb-55ba-466d-8acc-946c0c319a0e
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The error code returned when the transcoding task failed.
	//
	// example:
	//
	// InvalidParameter.ResourceContentBad
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The configurations of the transcoding task.
	Config     *GetMediaConvertJobResponseBodyJobConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Struct"`
	CreateTime *string                                  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	FinishTime *string                                  `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The ID of the transcoding task, which is a 32-bit string.
	//
	// example:
	//
	// ******4579b5e748b99a27f6d6******
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The error message returned when the transcoding task failed.
	//
	// example:
	//
	// The resource operated InputFile is bad
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The details of the transcoded outputs, each corresponding to an output configuration.
	OutputDetails []*MediaConvertOutputDetail `json:"OutputDetails,omitempty" xml:"OutputDetails,omitempty" type:"Repeated"`
	// The details of the output groups, each corresponding to an output group configuration.
	OutputGroupDetails []*MediaConvertOutputGroupDetail `json:"OutputGroupDetails,omitempty" xml:"OutputGroupDetails,omitempty" type:"Repeated"`
	Percent            *int32                           `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The ID of the queue.
	//
	// example:
	//
	// 83500cb2a3b94fabb0956e38d64bd16d
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The ID of the request for creating the transcoding task.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the transcoding task. Valid values:
	//
	// 	- Inited: The task is initialized.
	//
	// 	- Running
	//
	// 	- Success
	//
	// 	- Failed
	//
	// 	- Cancelled
	//
	// example:
	//
	// Success
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The user data.
	//
	// example:
	//
	// {"videoId":"ddd333"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetMediaConvertJobResponseBodyJob) String() string {
	return tea.Prettify(s)
}

func (s GetMediaConvertJobResponseBodyJob) GoString() string {
	return s.String()
}

func (s *GetMediaConvertJobResponseBodyJob) SetClientToken(v string) *GetMediaConvertJobResponseBodyJob {
	s.ClientToken = &v
	return s
}

func (s *GetMediaConvertJobResponseBodyJob) SetCode(v string) *GetMediaConvertJobResponseBodyJob {
	s.Code = &v
	return s
}

func (s *GetMediaConvertJobResponseBodyJob) SetConfig(v *GetMediaConvertJobResponseBodyJobConfig) *GetMediaConvertJobResponseBodyJob {
	s.Config = v
	return s
}

func (s *GetMediaConvertJobResponseBodyJob) SetCreateTime(v string) *GetMediaConvertJobResponseBodyJob {
	s.CreateTime = &v
	return s
}

func (s *GetMediaConvertJobResponseBodyJob) SetFinishTime(v string) *GetMediaConvertJobResponseBodyJob {
	s.FinishTime = &v
	return s
}

func (s *GetMediaConvertJobResponseBodyJob) SetJobId(v string) *GetMediaConvertJobResponseBodyJob {
	s.JobId = &v
	return s
}

func (s *GetMediaConvertJobResponseBodyJob) SetMessage(v string) *GetMediaConvertJobResponseBodyJob {
	s.Message = &v
	return s
}

func (s *GetMediaConvertJobResponseBodyJob) SetOutputDetails(v []*MediaConvertOutputDetail) *GetMediaConvertJobResponseBodyJob {
	s.OutputDetails = v
	return s
}

func (s *GetMediaConvertJobResponseBodyJob) SetOutputGroupDetails(v []*MediaConvertOutputGroupDetail) *GetMediaConvertJobResponseBodyJob {
	s.OutputGroupDetails = v
	return s
}

func (s *GetMediaConvertJobResponseBodyJob) SetPercent(v int32) *GetMediaConvertJobResponseBodyJob {
	s.Percent = &v
	return s
}

func (s *GetMediaConvertJobResponseBodyJob) SetPipelineId(v string) *GetMediaConvertJobResponseBodyJob {
	s.PipelineId = &v
	return s
}

func (s *GetMediaConvertJobResponseBodyJob) SetRequestId(v string) *GetMediaConvertJobResponseBodyJob {
	s.RequestId = &v
	return s
}

func (s *GetMediaConvertJobResponseBodyJob) SetState(v string) *GetMediaConvertJobResponseBodyJob {
	s.State = &v
	return s
}

func (s *GetMediaConvertJobResponseBodyJob) SetUserData(v string) *GetMediaConvertJobResponseBodyJob {
	s.UserData = &v
	return s
}

type GetMediaConvertJobResponseBodyJobConfig struct {
	// The inputs of the transcoding task.
	Inputs  []*MediaConvertInput `json:"Inputs,omitempty" xml:"Inputs,omitempty" type:"Repeated"`
	JobName *string              `json:"JobName,omitempty" xml:"JobName,omitempty"`
	// The output group configurations.
	OutputGroups []*MediaConvertOutputGroup `json:"OutputGroups,omitempty" xml:"OutputGroups,omitempty" type:"Repeated"`
	// The output configurations.
	Outputs []*MediaConvertOutput `json:"Outputs,omitempty" xml:"Outputs,omitempty" type:"Repeated"`
}

func (s GetMediaConvertJobResponseBodyJobConfig) String() string {
	return tea.Prettify(s)
}

func (s GetMediaConvertJobResponseBodyJobConfig) GoString() string {
	return s.String()
}

func (s *GetMediaConvertJobResponseBodyJobConfig) SetInputs(v []*MediaConvertInput) *GetMediaConvertJobResponseBodyJobConfig {
	s.Inputs = v
	return s
}

func (s *GetMediaConvertJobResponseBodyJobConfig) SetJobName(v string) *GetMediaConvertJobResponseBodyJobConfig {
	s.JobName = &v
	return s
}

func (s *GetMediaConvertJobResponseBodyJobConfig) SetOutputGroups(v []*MediaConvertOutputGroup) *GetMediaConvertJobResponseBodyJobConfig {
	s.OutputGroups = v
	return s
}

func (s *GetMediaConvertJobResponseBodyJobConfig) SetOutputs(v []*MediaConvertOutput) *GetMediaConvertJobResponseBodyJobConfig {
	s.Outputs = v
	return s
}

type GetMediaConvertJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMediaConvertJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMediaConvertJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMediaConvertJobResponse) GoString() string {
	return s.String()
}

func (s *GetMediaConvertJobResponse) SetHeaders(v map[string]*string) *GetMediaConvertJobResponse {
	s.Headers = v
	return s
}

func (s *GetMediaConvertJobResponse) SetStatusCode(v int32) *GetMediaConvertJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMediaConvertJobResponse) SetBody(v *GetMediaConvertJobResponseBody) *GetMediaConvertJobResponse {
	s.Body = v
	return s
}

type GetMediaInfoRequest struct {
	AuthTimeout *int64 `json:"AuthTimeout,omitempty" xml:"AuthTimeout,omitempty"`
	// The input URL of the media asset in another service. The URL must be registered in the IMS content library and bound to the ID of the media asset in IMS.
	//
	// 	- For a media asset from Object Storage Service (OSS), the URL may have one of the following formats:
	//
	// http(s)://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4 or
	//
	// oss://example-bucket/example.mp4. The second format indicates that the region in which the OSS bucket of the media asset resides is the same as the region in which OSS is activated.
	//
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// The ID of the media asset in IMS. If this parameter is left empty, the InputURL parameter must be specified.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The type of the URL of the media asset to return in the response. Valid values:
	//
	// 	- oss (default): an OSS URL.
	//
	// 	- cdn: a CDN URL. A CDN URL is returned only if the media asset is imported from ApsaraVideo VOD and the relevant domain name is an accelerated domain name in ApsaraVideo VOD.
	//
	// example:
	//
	// cdn
	OutputType *string `json:"OutputType,omitempty" xml:"OutputType,omitempty"`
	// Specifies whether to return detailed information for specific media asset attributes. Supported attributes: AiRoughData.StandardSmartTagJob, which specifies whether to return detailed tag information if a tagging job has been submitted for the media asset. Valid values for the attribute:
	//
	// 	- false (default): The job result is returned as a URL.
	//
	// 	- true: The job result is returned as text.
	//
	// example:
	//
	// {"AiRoughData.StandardSmartTagJob": false}
	ReturnDetailedInfo *string `json:"ReturnDetailedInfo,omitempty" xml:"ReturnDetailedInfo,omitempty"`
}

func (s GetMediaInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoRequest) GoString() string {
	return s.String()
}

func (s *GetMediaInfoRequest) SetAuthTimeout(v int64) *GetMediaInfoRequest {
	s.AuthTimeout = &v
	return s
}

func (s *GetMediaInfoRequest) SetInputURL(v string) *GetMediaInfoRequest {
	s.InputURL = &v
	return s
}

func (s *GetMediaInfoRequest) SetMediaId(v string) *GetMediaInfoRequest {
	s.MediaId = &v
	return s
}

func (s *GetMediaInfoRequest) SetOutputType(v string) *GetMediaInfoRequest {
	s.OutputType = &v
	return s
}

func (s *GetMediaInfoRequest) SetReturnDetailedInfo(v string) *GetMediaInfoRequest {
	s.ReturnDetailedInfo = &v
	return s
}

type GetMediaInfoResponseBody struct {
	// The information about the media asset.
	MediaInfo *GetMediaInfoResponseBodyMediaInfo `json:"MediaInfo,omitempty" xml:"MediaInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 2FDE2411-DB8D-4A9A-875B-275798F14A5E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetMediaInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBody) SetMediaInfo(v *GetMediaInfoResponseBodyMediaInfo) *GetMediaInfoResponseBody {
	s.MediaInfo = v
	return s
}

func (s *GetMediaInfoResponseBody) SetRequestId(v string) *GetMediaInfoResponseBody {
	s.RequestId = &v
	return s
}

type GetMediaInfoResponseBodyMediaInfo struct {
	// The original AI analysis data.
	AiRoughData *GetMediaInfoResponseBodyMediaInfoAiRoughData `json:"AiRoughData,omitempty" xml:"AiRoughData,omitempty" type:"Struct"`
	// The file information.
	FileInfoList []*GetMediaInfoResponseBodyMediaInfoFileInfoList `json:"FileInfoList,omitempty" xml:"FileInfoList,omitempty" type:"Repeated"`
	// The basic information about the media asset.
	MediaBasicInfo *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// The ID of the media asset.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s GetMediaInfoResponseBodyMediaInfo) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfo) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfo) SetAiRoughData(v *GetMediaInfoResponseBodyMediaInfoAiRoughData) *GetMediaInfoResponseBodyMediaInfo {
	s.AiRoughData = v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfo) SetFileInfoList(v []*GetMediaInfoResponseBodyMediaInfoFileInfoList) *GetMediaInfoResponseBodyMediaInfo {
	s.FileInfoList = v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfo) SetMediaBasicInfo(v *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) *GetMediaInfoResponseBodyMediaInfo {
	s.MediaBasicInfo = v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfo) SetMediaId(v string) *GetMediaInfoResponseBodyMediaInfo {
	s.MediaId = &v
	return s
}

type GetMediaInfoResponseBodyMediaInfoAiRoughData struct {
	// The AI category. Valid values:
	//
	// 	- Life
	//
	// 	- Good-looking
	//
	// 	- Cute pets
	//
	// 	- News
	//
	// 	- Ads
	//
	// 	- Environmental resources
	//
	// 	- Automobile
	AiCategory *string `json:"AiCategory,omitempty" xml:"AiCategory,omitempty"`
	// The ID of the AI task.
	//
	// example:
	//
	// ****483915d4f2cd8ac20b48fb04****
	AiJobId *string `json:"AiJobId,omitempty" xml:"AiJobId,omitempty"`
	// The analysis result.
	//
	// example:
	//
	// https://sample-bucket.cn-shanghai.aliyuncs.com/result.json
	Result *string `json:"Result,omitempty" xml:"Result,omitempty"`
	// The storage type. This parameter indicates the library in which the analysis data is stored. Valid values:
	//
	// 	- TEXT: the text library.
	//
	// example:
	//
	// TEXT
	SaveType *string `json:"SaveType,omitempty" xml:"SaveType,omitempty"`
	// The information about the tagging job.
	StandardSmartTagJob *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJob `json:"StandardSmartTagJob,omitempty" xml:"StandardSmartTagJob,omitempty" type:"Struct"`
	// The analysis status. Valid values:
	//
	// 	- Analyzing
	//
	// 	- AnalyzeSuccess
	//
	// 	- AnalyzeFailed
	//
	// 	- Saving
	//
	// 	- SaveSuccess
	//
	// 	- SaveFailed
	//
	// 	- Deleting
	//
	// 	- DeleteSuccess
	//
	// 	- DeleteFailed
	//
	// example:
	//
	// Analyzing
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetMediaInfoResponseBodyMediaInfoAiRoughData) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfoAiRoughData) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfoAiRoughData) SetAiCategory(v string) *GetMediaInfoResponseBodyMediaInfoAiRoughData {
	s.AiCategory = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoAiRoughData) SetAiJobId(v string) *GetMediaInfoResponseBodyMediaInfoAiRoughData {
	s.AiJobId = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoAiRoughData) SetResult(v string) *GetMediaInfoResponseBodyMediaInfoAiRoughData {
	s.Result = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoAiRoughData) SetSaveType(v string) *GetMediaInfoResponseBodyMediaInfoAiRoughData {
	s.SaveType = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoAiRoughData) SetStandardSmartTagJob(v *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJob) *GetMediaInfoResponseBodyMediaInfoAiRoughData {
	s.StandardSmartTagJob = v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoAiRoughData) SetStatus(v string) *GetMediaInfoResponseBodyMediaInfoAiRoughData {
	s.Status = &v
	return s
}

type GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJob struct {
	// The ID of the AI task.
	//
	// example:
	//
	// ****483915d4f2cd8ac20b48fb04****
	AiJobId *string `json:"AiJobId,omitempty" xml:"AiJobId,omitempty"`
	// The URL of the tagging result.
	//
	// example:
	//
	// http://xx.oss-cn-shanghai.aliyuncs.com/result2.txt
	ResultUrl *string `json:"ResultUrl,omitempty" xml:"ResultUrl,omitempty"`
	// The recognized tags.
	Results []*GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJobResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
	// The analysis status. Valid values:
	//
	// 	- Analyzing
	//
	// 	- AnalyzeSuccess
	//
	// 	- AnalyzeFailed
	//
	// example:
	//
	// Analyzing
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJob) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJob) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJob) SetAiJobId(v string) *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJob {
	s.AiJobId = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJob) SetResultUrl(v string) *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJob {
	s.ResultUrl = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJob) SetResults(v []*GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJobResults) *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJob {
	s.Results = v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJob) SetStatus(v string) *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJob {
	s.Status = &v
	return s
}

type GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJobResults struct {
	// The result data. The value is a JSON string. For information about the data structures of different data types<props="china">, see [Description of the Results parameter](https://help.aliyun.com/zh/ims/developer-reference/api-ice-2020-11-09-querysmarttagjob?spm=a2c4g.11186623.0.0.521d48b7KfapOL#api-detail-40).
	//
	// example:
	//
	// {"autoChapters": [...]}
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The tagging type. Valid values:
	//
	// 	- NLP: natural language processing (NLP)-based tagging
	//
	// example:
	//
	// NLP
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJobResults) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJobResults) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJobResults) SetData(v string) *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJobResults {
	s.Data = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJobResults) SetType(v string) *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJobResults {
	s.Type = &v
	return s
}

type GetMediaInfoResponseBodyMediaInfoFileInfoList struct {
	// The information about the audio tracks. A media asset may have multiple audio tracks.
	AudioStreamInfoList []*GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList `json:"AudioStreamInfoList,omitempty" xml:"AudioStreamInfoList,omitempty" type:"Repeated"`
	// The basic information about the file, including the duration and size.
	FileBasicInfo *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
	// The information about the subtitle tracks. A media asset may have multiple subtitle tracks.
	SubtitleStreamInfoList []*GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList `json:"SubtitleStreamInfoList,omitempty" xml:"SubtitleStreamInfoList,omitempty" type:"Repeated"`
	// The information about the video tracks. A media asset may have multiple video tracks.
	VideoStreamInfoList []*GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList `json:"VideoStreamInfoList,omitempty" xml:"VideoStreamInfoList,omitempty" type:"Repeated"`
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoList) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoList) SetAudioStreamInfoList(v []*GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) *GetMediaInfoResponseBodyMediaInfoFileInfoList {
	s.AudioStreamInfoList = v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoList) SetFileBasicInfo(v *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) *GetMediaInfoResponseBodyMediaInfoFileInfoList {
	s.FileBasicInfo = v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoList) SetSubtitleStreamInfoList(v []*GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) *GetMediaInfoResponseBodyMediaInfoFileInfoList {
	s.SubtitleStreamInfoList = v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoList) SetVideoStreamInfoList(v []*GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) *GetMediaInfoResponseBodyMediaInfoFileInfoList {
	s.VideoStreamInfoList = v
	return s
}

type GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList struct {
	// The bitrate.
	//
	// example:
	//
	// 127.794
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The output layout of sound channels.
	//
	// example:
	//
	// stereo
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	// The number of sound channels.
	//
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// The full name of the codec.
	//
	// example:
	//
	// AAC (Advanced Audio Coding)
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// The short name of the codec.
	//
	// example:
	//
	// aac
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// The tag of the codec.
	//
	// example:
	//
	// 0x6134706d
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// The tag string of the codec.
	//
	// example:
	//
	// mp4a
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// The time base of the codec.
	//
	// example:
	//
	// 1/24000
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// The duration.
	//
	// example:
	//
	// 16.200998
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The audio frame rate.
	//
	// example:
	//
	// 8
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// The sequence number of the audio track.
	//
	// example:
	//
	// 1
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// The language.
	//
	// example:
	//
	// und
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The number of frames.
	//
	// example:
	//
	// 10
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// The codec profile.
	//
	// example:
	//
	// High
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// The sampling format.
	//
	// example:
	//
	// fltp
	SampleFmt *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	// The sampling rate.
	//
	// example:
	//
	// 44100
	SampleRate *string `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
	// The start time.
	//
	// example:
	//
	// 0.000000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The time base.
	//
	// example:
	//
	// 1/44100
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetBitrate(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetChannelLayout(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.ChannelLayout = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetChannels(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Channels = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecLongName(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecName(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecTag(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecTagString(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecTimeBase(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetDuration(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetFps(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Fps = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetIndex(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetLang(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetNumFrames(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetProfile(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Profile = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetSampleFmt(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.SampleFmt = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetSampleRate(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.SampleRate = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetStartTime(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetTimebase(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Timebase = &v
	return s
}

type GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo struct {
	// The bitrate.
	//
	// example:
	//
	// 1132.68
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The time when the file was created.
	//
	// example:
	//
	// 2020-12-26T04:11:08Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The duration.
	//
	// example:
	//
	// 216.206667
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The file name.
	//
	// example:
	//
	// example.mp4
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The file size. Unit: bytes.
	//
	// example:
	//
	// 30611502
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// The file status.
	//
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// The file type.
	//
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// The OSS URL of the file.
	//
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// The container format.
	//
	// example:
	//
	// mov,mp4,m4a,3gp,3g2,mj2
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// The height.
	//
	// example:
	//
	// 540
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The time when the file was last modified.
	//
	// example:
	//
	// 2020-12-26T04:11:10Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The region in which the file is stored.
	//
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The width.
	//
	// example:
	//
	// 960
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetBitrate(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetCreateTime(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetDuration(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileName(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileSize(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileStatus(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileType(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileUrl(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFormatName(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetHeight(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Height = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetModifiedTime(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetRegion(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Region = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetWidth(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Width = &v
	return s
}

type GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList struct {
	// The full name of the codec.
	//
	// example:
	//
	// SubRip Text
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// The short name of the codec.
	//
	// example:
	//
	// srt
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// The tag of the codec.
	//
	// example:
	//
	// unicode
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// The tag string of the codec.
	//
	// example:
	//
	// unicode
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// The time base of the codec.
	//
	// example:
	//
	// 29.97
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// The duration.
	//
	// example:
	//
	// 1
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The sequence number of the subtitle track.
	//
	// example:
	//
	// 1
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// The language.
	//
	// example:
	//
	// und
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The start time.
	//
	// example:
	//
	// 0
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The time base.
	//
	// example:
	//
	// 30
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecLongName(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecName(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecTag(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecTagString(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecTimeBase(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetDuration(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetIndex(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetLang(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetStartTime(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetTimebase(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.Timebase = &v
	return s
}

type GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList struct {
	// The average video frame rate.
	//
	// example:
	//
	// 24.0
	AvgFPS *string `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	// The bitrate.
	//
	// example:
	//
	// 1001.594
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The full name of the codec.
	//
	// example:
	//
	// H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// The short name of the codec.
	//
	// example:
	//
	// h264
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// The tag of the codec.
	//
	// example:
	//
	// 0x0000
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// The tag string of the codec.
	//
	// example:
	//
	// [0][0][0][0]
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// The time base of the codec.
	//
	// example:
	//
	// 1/48
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// The display aspect ratio (DAR).
	//
	// example:
	//
	// 0:1
	Dar *string `json:"Dar,omitempty" xml:"Dar,omitempty"`
	// The duration.
	//
	// example:
	//
	// 216.206706
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The video frame rate.
	//
	// example:
	//
	// 24.0
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// Indicates whether the video track contains bidirectional frames (B-frames).
	//
	// example:
	//
	// 2
	HasBFrames *string `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	// The height.
	//
	// example:
	//
	// 540
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The sequence number of the video track.
	//
	// example:
	//
	// 0
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// The language.
	//
	// example:
	//
	// und
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The codec level.
	//
	// example:
	//
	// 30
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The total number of frames.
	//
	// example:
	//
	// 5184
	NbFrames *string `json:"Nb_frames,omitempty" xml:"Nb_frames,omitempty"`
	// The number of frames.
	//
	// example:
	//
	// 5184
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// The pixel format.
	//
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// The codec profile.
	//
	// example:
	//
	// High
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// The rotation angle.
	//
	// example:
	//
	// 0
	Rotate *string `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	// The sample aspect ratio (SAR).
	//
	// example:
	//
	// 0:1
	Sar *string `json:"Sar,omitempty" xml:"Sar,omitempty"`
	// The start time.
	//
	// example:
	//
	// 0.081706
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The time base.
	//
	// example:
	//
	// 1/12288
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	// The width.
	//
	// example:
	//
	// 960
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetAvgFPS(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.AvgFPS = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetBitrate(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecLongName(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecName(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecTag(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecTagString(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecTimeBase(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetDar(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Dar = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetDuration(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetFps(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Fps = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetHasBFrames(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.HasBFrames = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetHeight(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Height = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetIndex(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetLang(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetLevel(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Level = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetNbFrames(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.NbFrames = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetNumFrames(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetPixFmt(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.PixFmt = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetProfile(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Profile = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetRotate(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Rotate = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetSar(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Sar = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetStartTime(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetTimebase(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Timebase = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetWidth(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Width = &v
	return s
}

type GetMediaInfoResponseBodyMediaInfoMediaBasicInfo struct {
	// The service to which the media asset belongs.
	//
	// example:
	//
	// ICE
	Biz *string `json:"Biz,omitempty" xml:"Biz,omitempty"`
	// The business type.
	//
	// example:
	//
	// general
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// The category ID.
	//
	// example:
	//
	// 3048
	CateId *int64 `json:"CateId,omitempty" xml:"CateId,omitempty"`
	// The category name.
	//
	// example:
	//
	// cateName
	CateName *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	// The category.
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The URL of the thumbnail.
	//
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// The time when the media asset was created.
	//
	// example:
	//
	// 2020-12-26T04:11:08Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the media asset was deleted.
	//
	// example:
	//
	// 2020-12-26T04:11:15Z
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	// The content description.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The input URL of the media asset in another service.
	//
	// example:
	//
	// https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The tags.
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// The type of the media asset.
	//
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// The time when the media asset was last modified.
	//
	// example:
	//
	// 2020-12-26T04:11:10Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The custom ID. The ID can be 6 to 64 characters in length and can contain only letters, digits, hyphens (-), and underscores (_). The ID is unique among users.
	//
	// example:
	//
	// 123-1234
	ReferenceId *string `json:"ReferenceId,omitempty" xml:"ReferenceId,omitempty"`
	// The snapshots.
	//
	// example:
	//
	// [
	//
	//     "http://example-bucket.oss-cn-shanghai.aliyuncs.com/snapshot-00001.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>",
	//
	//     "http://example-bucket.oss-cn-shanghai.aliyuncs.com/snapshot-00002.jpg?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>",
	//
	//     "http://example-bucket.oss-cn-shanghai.aliyuncs.com/snapshot-00003.jpg?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>"
	//
	// ]
	Snapshots *string `json:"Snapshots,omitempty" xml:"Snapshots,omitempty"`
	// The source.
	//
	// example:
	//
	// oss
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The sprite.
	//
	// example:
	//
	// [{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]
	SpriteImages *string `json:"SpriteImages,omitempty" xml:"SpriteImages,omitempty"`
	// The resource status.
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The title.
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// The upload source of the media asset.
	//
	// example:
	//
	// general
	UploadSource *string `json:"UploadSource,omitempty" xml:"UploadSource,omitempty"`
	// The user data.
	//
	// example:
	//
	// userDataTest
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetBiz(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Biz = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetBusinessType(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetCateId(v int64) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.CateId = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetCateName(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.CateName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetCategory(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetCoverURL(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetCreateTime(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetDeletedTime(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetDescription(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetInputURL(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.InputURL = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetMediaId(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetMediaTags(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetMediaType(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetModifiedTime(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetReferenceId(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.ReferenceId = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetSnapshots(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Snapshots = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetSource(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetSpriteImages(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.SpriteImages = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetStatus(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetTitle(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetUploadSource(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.UploadSource = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetUserData(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.UserData = &v
	return s
}

type GetMediaInfoResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMediaInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMediaInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponse) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponse) SetHeaders(v map[string]*string) *GetMediaInfoResponse {
	s.Headers = v
	return s
}

func (s *GetMediaInfoResponse) SetStatusCode(v int32) *GetMediaInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMediaInfoResponse) SetBody(v *GetMediaInfoResponseBody) *GetMediaInfoResponse {
	s.Body = v
	return s
}

type GetMediaInfoJobRequest struct {
	// The job ID.
	//
	// example:
	//
	// ab4802364a2e49208c99efab82dfa8e8
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetMediaInfoJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobRequest) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobRequest) SetJobId(v string) *GetMediaInfoJobRequest {
	s.JobId = &v
	return s
}

type GetMediaInfoJobResponseBody struct {
	// MediaInfoJobDTO
	MediaInfoJob *GetMediaInfoJobResponseBodyMediaInfoJob `json:"MediaInfoJob,omitempty" xml:"MediaInfoJob,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetMediaInfoJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponseBody) SetMediaInfoJob(v *GetMediaInfoJobResponseBodyMediaInfoJob) *GetMediaInfoJobResponseBody {
	s.MediaInfoJob = v
	return s
}

func (s *GetMediaInfoJobResponseBody) SetRequestId(v string) *GetMediaInfoJobResponseBody {
	s.RequestId = &v
	return s
}

type GetMediaInfoJobResponseBodyMediaInfoJob struct {
	// Indicates whether asynchronous processing was performed.
	//
	// example:
	//
	// true
	Async *bool `json:"Async,omitempty" xml:"Async,omitempty"`
	// The time when the job was complete.
	//
	// example:
	//
	// 2022-01-12T08:49:41Z
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The input of the job.
	Input *GetMediaInfoJobResponseBodyMediaInfoJobInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// The job ID.
	//
	// example:
	//
	// ab4802364a2e49208c99efab82dfa8e8
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The details of the media information.
	MediaInfoProperty *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty `json:"MediaInfoProperty,omitempty" xml:"MediaInfoProperty,omitempty" type:"Struct"`
	// The job name.
	//
	// example:
	//
	// job-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 4879B9DE-E4B6-19DC-91F5-9D5F4DCE4168
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The scheduling information.
	ScheduleConfig *GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// The state of the job. Valid values: Init (the job is submitted), Success (the job is successful), and Fail (the job failed).
	//
	// example:
	//
	// Init
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The job submission information.
	SubmitResultJson map[string]interface{} `json:"SubmitResultJson,omitempty" xml:"SubmitResultJson,omitempty"`
	// The time when the job was submitted.
	//
	// example:
	//
	// 2022-01-12T08:49:41Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// The source of the job. Valid values: API, WorkFlow, and Console.
	//
	// example:
	//
	// API
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// The user data.
	//
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetMediaInfoJobResponseBodyMediaInfoJob) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponseBodyMediaInfoJob) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetAsync(v bool) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.Async = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetFinishTime(v string) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.FinishTime = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetInput(v *GetMediaInfoJobResponseBodyMediaInfoJobInput) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.Input = v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetJobId(v string) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.JobId = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetMediaInfoProperty(v *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.MediaInfoProperty = v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetName(v string) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.Name = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetRequestId(v string) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.RequestId = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetScheduleConfig(v *GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.ScheduleConfig = v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetStatus(v string) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.Status = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetSubmitResultJson(v map[string]interface{}) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.SubmitResultJson = v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetSubmitTime(v string) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.SubmitTime = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetTriggerSource(v string) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.TriggerSource = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetUserData(v string) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.UserData = &v
	return s
}

type GetMediaInfoJobResponseBodyMediaInfoJobInput struct {
	// The media object. If Type is set to OSS, the URL of an OSS object is returned. Both the OSS and HTTP protocols are supported. If Type is set to Media, the ID of a media asset is returned.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an Object Storage Service (OSS) object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobInput) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobInput) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobInput) SetMedia(v string) *GetMediaInfoJobResponseBodyMediaInfoJobInput {
	s.Media = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobInput) SetType(v string) *GetMediaInfoJobResponseBodyMediaInfoJobInput {
	s.Type = &v
	return s
}

type GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty struct {
	// The information about the audio stream.
	AudioStreamInfoList []*GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList `json:"AudioStreamInfoList,omitempty" xml:"AudioStreamInfoList,omitempty" type:"Repeated"`
	// The basic file information.
	FileBasicInfo *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
	// The information about the video stream.
	VideoStreamInfoList []*GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList `json:"VideoStreamInfoList,omitempty" xml:"VideoStreamInfoList,omitempty" type:"Repeated"`
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetAudioStreamInfoList(v []*GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.AudioStreamInfoList = v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetFileBasicInfo(v *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.FileBasicInfo = v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetVideoStreamInfoList(v []*GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.VideoStreamInfoList = v
	return s
}

type GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList struct {
	// The bitrate.
	//
	// example:
	//
	// 0.f
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The sound channel layout.
	//
	// example:
	//
	// stereo
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	// The number of sound channels.
	//
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// The name of the encoding format.
	//
	// example:
	//
	// AAC (Advanced Audio Coding)
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// The encoding format.
	//
	// example:
	//
	// aac
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// The encoder tag.
	//
	// example:
	//
	// 0x000f
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// The name of the encoder tag.
	//
	// example:
	//
	// [15][0][0][0]
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// The time base of the encoder.
	//
	// example:
	//
	// 1/44100
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// The duration of the stream. Unit: seconds.
	//
	// example:
	//
	// 403.039989
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The sequence number of the stream.
	//
	// example:
	//
	// 1
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// The language of the stream.
	//
	// example:
	//
	// us
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The sample format.
	//
	// example:
	//
	// fltp
	SampleFmt *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	// The sampling rate. Unit: Hz.
	//
	// example:
	//
	// 44100
	SampleRate *string `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
	// The start time of the stream.
	//
	// example:
	//
	// 1.473556
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The time base.
	//
	// example:
	//
	// 1/90000
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetBitrate(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetChannelLayout(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.ChannelLayout = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetChannels(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Channels = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecLongName(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecName(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTag(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTagString(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTimeBase(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetDuration(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetIndex(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetLang(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetSampleFmt(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.SampleFmt = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetSampleRate(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.SampleRate = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetStartTime(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetTimebase(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Timebase = &v
	return s
}

type GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo struct {
	// The video bitrate.
	//
	// example:
	//
	// 888.563
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The duration of the video. Unit: seconds.
	//
	// example:
	//
	// 403.039999
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The file name.
	//
	// example:
	//
	// file.m3u8
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The file size.
	//
	// example:
	//
	// 31737
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// The state of the file.
	//
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// The file type.
	//
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// The URL of the file.
	//
	// example:
	//
	// http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// The name of the video format.
	//
	// example:
	//
	// hls,applehttp
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// The height of the output video.
	//
	// example:
	//
	// 478
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// e520090207114cc7a392d44f0b211574
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The region in which the file resides.
	//
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The width of the output video.
	//
	// example:
	//
	// 848
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetBitrate(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetDuration(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileName(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileSize(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileStatus(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileType(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileUrl(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFormatName(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetHeight(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Height = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetMediaId(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.MediaId = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetRegion(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Region = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetWidth(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Width = &v
	return s
}

type GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList struct {
	// The average frame rate.
	//
	// example:
	//
	// 25.0
	AvgFps *string `json:"Avg_fps,omitempty" xml:"Avg_fps,omitempty"`
	// The bitrate.
	//
	// example:
	//
	// 888.563
	BitRate *string `json:"Bit_rate,omitempty" xml:"Bit_rate,omitempty"`
	// The name of the encoding format.
	//
	// example:
	//
	// H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10
	CodecLongName *string `json:"Codec_long_name,omitempty" xml:"Codec_long_name,omitempty"`
	// The encoding format.
	//
	// example:
	//
	// h264
	CodecName *string `json:"Codec_name,omitempty" xml:"Codec_name,omitempty"`
	// The tag of the encoding format.
	//
	// example:
	//
	// 0x001b
	CodecTag *string `json:"Codec_tag,omitempty" xml:"Codec_tag,omitempty"`
	// The tag string of the encoding format.
	//
	// example:
	//
	// [27][0][0][0]
	CodecTagString *string `json:"Codec_tag_string,omitempty" xml:"Codec_tag_string,omitempty"`
	// The time base of the encoder.
	//
	// example:
	//
	// 1/50
	CodecTimeBase *string `json:"Codec_time_base,omitempty" xml:"Codec_time_base,omitempty"`
	// The display aspect ratio.
	//
	// example:
	//
	// 16:9
	Dar *string `json:"Dar,omitempty" xml:"Dar,omitempty"`
	// The duration of the file.
	//
	// example:
	//
	// 403.039989
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The frame rate.
	//
	// example:
	//
	// 25.0
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// Indicates whether the video stream contains bidirectional frames (B-frames). Valid values:
	//
	// 	- 0: The stream contains no B-frames.
	//
	// 	- 1: The stream contains one B-frame.
	//
	// 	- 2: The stream contains multiple consecutive B-frames.
	//
	// example:
	//
	// 2
	HasBFrames *string `json:"Has_b_frames,omitempty" xml:"Has_b_frames,omitempty"`
	// The height of the output video.
	//
	// example:
	//
	// 478
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The sequence number of the stream.
	//
	// example:
	//
	// 0
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// The language of the stream.
	//
	// example:
	//
	// zh
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The codec level.
	//
	// example:
	//
	// 31
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The total number of frames.
	//
	// example:
	//
	// 10040
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// The pixel format.
	//
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// The encoder profile.
	//
	// example:
	//
	// High
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// The rotation angle of the video image.
	//
	// example:
	//
	// 0
	Rotate *string `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	// The aspect ratio of the area from which the sampling points are collected.
	//
	// example:
	//
	// 478:477
	Sar *string `json:"Sar,omitempty" xml:"Sar,omitempty"`
	// The start time of the stream.
	//
	// example:
	//
	// 1.473556
	StartTime *string `json:"Start_time,omitempty" xml:"Start_time,omitempty"`
	// The time base.
	//
	// example:
	//
	// 1/90000
	TimeBase *string `json:"Time_base,omitempty" xml:"Time_base,omitempty"`
	// The width of the output video.
	//
	// example:
	//
	// 848
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetAvgFps(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.AvgFps = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetBitRate(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.BitRate = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecLongName(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecName(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTag(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTagString(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTimeBase(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetDar(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Dar = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetDuration(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetFps(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Fps = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetHasBFrames(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.HasBFrames = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetHeight(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Height = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetIndex(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetLang(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetLevel(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Level = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetNumFrames(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetPixFmt(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.PixFmt = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetProfile(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Profile = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetRotate(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Rotate = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetSar(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Sar = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetStartTime(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetTimeBase(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.TimeBase = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetWidth(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Width = &v
	return s
}

type GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig struct {
	// The ID of the MPS queue to which the job was submitted.
	//
	// example:
	//
	// e37ebee5d98b4781897f6086e89f9c56
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The priority of the job. Valid values: 1 to 10. The greater the value, the higher the priority.
	//
	// example:
	//
	// 5
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) SetPipelineId(v string) *GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) SetPriority(v int32) *GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig {
	s.Priority = &v
	return s
}

type GetMediaInfoJobResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMediaInfoJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMediaInfoJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponse) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponse) SetHeaders(v map[string]*string) *GetMediaInfoJobResponse {
	s.Headers = v
	return s
}

func (s *GetMediaInfoJobResponse) SetStatusCode(v int32) *GetMediaInfoJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMediaInfoJobResponse) SetBody(v *GetMediaInfoJobResponseBody) *GetMediaInfoJobResponse {
	s.Body = v
	return s
}

type GetMediaLiveChannelRequest struct {
	// The ID of the channel.
	//
	// This parameter is required.
	//
	// example:
	//
	// SEGK5KA6KYKAWQQH
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
}

func (s GetMediaLiveChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveChannelRequest) GoString() string {
	return s.String()
}

func (s *GetMediaLiveChannelRequest) SetChannelId(v string) *GetMediaLiveChannelRequest {
	s.ChannelId = &v
	return s
}

type GetMediaLiveChannelResponseBody struct {
	// The channel information.
	Channel *GetMediaLiveChannelResponseBodyChannel `json:"Channel,omitempty" xml:"Channel,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetMediaLiveChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveChannelResponseBody) GoString() string {
	return s.String()
}

func (s *GetMediaLiveChannelResponseBody) SetChannel(v *GetMediaLiveChannelResponseBodyChannel) *GetMediaLiveChannelResponseBody {
	s.Channel = v
	return s
}

func (s *GetMediaLiveChannelResponseBody) SetRequestId(v string) *GetMediaLiveChannelResponseBody {
	s.RequestId = &v
	return s
}

type GetMediaLiveChannelResponseBodyChannel struct {
	// The audio settings.
	AudioSettings []*GetMediaLiveChannelResponseBodyChannelAudioSettings `json:"AudioSettings,omitempty" xml:"AudioSettings,omitempty" type:"Repeated"`
	// The ID of the channel.
	//
	// example:
	//
	// SEGK5KA6KYKAWQQH
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// The time when the channel was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2024-12-03T06:56:42Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The inputs associated with the channel.
	InputAttachments []*GetMediaLiveChannelResponseBodyChannelInputAttachments `json:"InputAttachments,omitempty" xml:"InputAttachments,omitempty" type:"Repeated"`
	// The time when the channel was last started. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC. If the channel has never been started since it was created, an empty string is returned.
	//
	// example:
	//
	// 2024-12-03T06:56:42Z
	LastStartTime *string `json:"LastStartTime,omitempty" xml:"LastStartTime,omitempty"`
	// The time when the channel was last stopped. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC. If the channel has never stopped since it was created, an empty string is returned.
	//
	// example:
	//
	// 2024-12-03T06:56:42Z
	LastStopTime *string `json:"LastStopTime,omitempty" xml:"LastStopTime,omitempty"`
	// The channel name.
	//
	// example:
	//
	// mych
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output groups.
	OutputGroups []*GetMediaLiveChannelResponseBodyChannelOutputGroups `json:"OutputGroups,omitempty" xml:"OutputGroups,omitempty" type:"Repeated"`
	// The state of the channel. Valid values: IDLE, STARTING, RUNNING, RECOVERING, and STOPPING.
	//
	// example:
	//
	// IDLE
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The video settings.
	VideoSettings []*GetMediaLiveChannelResponseBodyChannelVideoSettings `json:"VideoSettings,omitempty" xml:"VideoSettings,omitempty" type:"Repeated"`
}

func (s GetMediaLiveChannelResponseBodyChannel) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveChannelResponseBodyChannel) GoString() string {
	return s.String()
}

func (s *GetMediaLiveChannelResponseBodyChannel) SetAudioSettings(v []*GetMediaLiveChannelResponseBodyChannelAudioSettings) *GetMediaLiveChannelResponseBodyChannel {
	s.AudioSettings = v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannel) SetChannelId(v string) *GetMediaLiveChannelResponseBodyChannel {
	s.ChannelId = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannel) SetCreateTime(v string) *GetMediaLiveChannelResponseBodyChannel {
	s.CreateTime = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannel) SetInputAttachments(v []*GetMediaLiveChannelResponseBodyChannelInputAttachments) *GetMediaLiveChannelResponseBodyChannel {
	s.InputAttachments = v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannel) SetLastStartTime(v string) *GetMediaLiveChannelResponseBodyChannel {
	s.LastStartTime = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannel) SetLastStopTime(v string) *GetMediaLiveChannelResponseBodyChannel {
	s.LastStopTime = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannel) SetName(v string) *GetMediaLiveChannelResponseBodyChannel {
	s.Name = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannel) SetOutputGroups(v []*GetMediaLiveChannelResponseBodyChannelOutputGroups) *GetMediaLiveChannelResponseBodyChannel {
	s.OutputGroups = v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannel) SetState(v string) *GetMediaLiveChannelResponseBodyChannel {
	s.State = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannel) SetVideoSettings(v []*GetMediaLiveChannelResponseBodyChannelVideoSettings) *GetMediaLiveChannelResponseBodyChannel {
	s.VideoSettings = v
	return s
}

type GetMediaLiveChannelResponseBodyChannelAudioSettings struct {
	// The audio codec.
	//
	// example:
	//
	// aac
	AudioCodec *string `json:"AudioCodec,omitempty" xml:"AudioCodec,omitempty"`
	// The audio encoding settings.
	AudioCodecSetting *GetMediaLiveChannelResponseBodyChannelAudioSettingsAudioCodecSetting `json:"AudioCodecSetting,omitempty" xml:"AudioCodecSetting,omitempty" type:"Struct"`
	// The name of the audio selector.
	//
	// example:
	//
	// myselector
	AudioSelectorName *string `json:"AudioSelectorName,omitempty" xml:"AudioSelectorName,omitempty"`
	// A three-letter ISO 639-2 language code.
	//
	// example:
	//
	// eng
	LanguageCode *string `json:"LanguageCode,omitempty" xml:"LanguageCode,omitempty"`
	// The name of the language.
	//
	// example:
	//
	// English
	LanguageName *string `json:"LanguageName,omitempty" xml:"LanguageName,omitempty"`
	// The name of the audio settings.
	//
	// example:
	//
	// zhuanfengzhuang
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s GetMediaLiveChannelResponseBodyChannelAudioSettings) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveChannelResponseBodyChannelAudioSettings) GoString() string {
	return s.String()
}

func (s *GetMediaLiveChannelResponseBodyChannelAudioSettings) SetAudioCodec(v string) *GetMediaLiveChannelResponseBodyChannelAudioSettings {
	s.AudioCodec = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelAudioSettings) SetAudioCodecSetting(v *GetMediaLiveChannelResponseBodyChannelAudioSettingsAudioCodecSetting) *GetMediaLiveChannelResponseBodyChannelAudioSettings {
	s.AudioCodecSetting = v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelAudioSettings) SetAudioSelectorName(v string) *GetMediaLiveChannelResponseBodyChannelAudioSettings {
	s.AudioSelectorName = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelAudioSettings) SetLanguageCode(v string) *GetMediaLiveChannelResponseBodyChannelAudioSettings {
	s.LanguageCode = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelAudioSettings) SetLanguageName(v string) *GetMediaLiveChannelResponseBodyChannelAudioSettings {
	s.LanguageName = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelAudioSettings) SetName(v string) *GetMediaLiveChannelResponseBodyChannelAudioSettings {
	s.Name = &v
	return s
}

type GetMediaLiveChannelResponseBodyChannelAudioSettingsAudioCodecSetting struct {
	// The audio bitrate. Unit: bit/s.
	//
	// example:
	//
	// 200000
	Bitrate *int32 `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The audio codec profile.
	//
	// example:
	//
	// AAC-LOW
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// The audio sample rate. Unit: Hz.
	//
	// example:
	//
	// 44100
	SampleRate *int32 `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
}

func (s GetMediaLiveChannelResponseBodyChannelAudioSettingsAudioCodecSetting) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveChannelResponseBodyChannelAudioSettingsAudioCodecSetting) GoString() string {
	return s.String()
}

func (s *GetMediaLiveChannelResponseBodyChannelAudioSettingsAudioCodecSetting) SetBitrate(v int32) *GetMediaLiveChannelResponseBodyChannelAudioSettingsAudioCodecSetting {
	s.Bitrate = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelAudioSettingsAudioCodecSetting) SetProfile(v string) *GetMediaLiveChannelResponseBodyChannelAudioSettingsAudioCodecSetting {
	s.Profile = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelAudioSettingsAudioCodecSetting) SetSampleRate(v int32) *GetMediaLiveChannelResponseBodyChannelAudioSettingsAudioCodecSetting {
	s.SampleRate = &v
	return s
}

type GetMediaLiveChannelResponseBodyChannelInputAttachments struct {
	// The audio selectors.
	AudioSelectors []*GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectors `json:"AudioSelectors,omitempty" xml:"AudioSelectors,omitempty" type:"Repeated"`
	// The ID of the associated input.
	//
	// This parameter is required.
	//
	// example:
	//
	// SEGK5KA6KYKAWQQH
	InputId *string `json:"InputId,omitempty" xml:"InputId,omitempty"`
	// The name of the input.
	//
	// example:
	//
	// myinput
	InputName *string `json:"InputName,omitempty" xml:"InputName,omitempty"`
	// The language name.
	//
	// example:
	//
	// eng
	LanguageName *string `json:"LanguageName,omitempty" xml:"LanguageName,omitempty"`
}

func (s GetMediaLiveChannelResponseBodyChannelInputAttachments) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveChannelResponseBodyChannelInputAttachments) GoString() string {
	return s.String()
}

func (s *GetMediaLiveChannelResponseBodyChannelInputAttachments) SetAudioSelectors(v []*GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectors) *GetMediaLiveChannelResponseBodyChannelInputAttachments {
	s.AudioSelectors = v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelInputAttachments) SetInputId(v string) *GetMediaLiveChannelResponseBodyChannelInputAttachments {
	s.InputId = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelInputAttachments) SetInputName(v string) *GetMediaLiveChannelResponseBodyChannelInputAttachments {
	s.InputName = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelInputAttachments) SetLanguageName(v string) *GetMediaLiveChannelResponseBodyChannelInputAttachments {
	s.LanguageName = &v
	return s
}

type GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectors struct {
	// The audio language selection.
	AudioLanguageSelection *GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectorsAudioLanguageSelection `json:"AudioLanguageSelection,omitempty" xml:"AudioLanguageSelection,omitempty" type:"Struct"`
	// The audio PID selection.
	AudioPidSelection *GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectorsAudioPidSelection `json:"AudioPidSelection,omitempty" xml:"AudioPidSelection,omitempty" type:"Struct"`
	// The audio track selection.
	AudioTrackSelection []*GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectorsAudioTrackSelection `json:"AudioTrackSelection,omitempty" xml:"AudioTrackSelection,omitempty" type:"Repeated"`
	// The name of the audio selector.
	//
	// This parameter is required.
	//
	// example:
	//
	// myselector
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectors) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectors) GoString() string {
	return s.String()
}

func (s *GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectors) SetAudioLanguageSelection(v *GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectorsAudioLanguageSelection) *GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectors {
	s.AudioLanguageSelection = v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectors) SetAudioPidSelection(v *GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectorsAudioPidSelection) *GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectors {
	s.AudioPidSelection = v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectors) SetAudioTrackSelection(v []*GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectorsAudioTrackSelection) *GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectors {
	s.AudioTrackSelection = v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectors) SetName(v string) *GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectors {
	s.Name = &v
	return s
}

type GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectorsAudioLanguageSelection struct {
	// A three-letter ISO 639-2 language code from within an audio source.
	//
	// This parameter is required.
	//
	// example:
	//
	// eng
	LanguageCode *string `json:"LanguageCode,omitempty" xml:"LanguageCode,omitempty"`
}

func (s GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectorsAudioLanguageSelection) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectorsAudioLanguageSelection) GoString() string {
	return s.String()
}

func (s *GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectorsAudioLanguageSelection) SetLanguageCode(v string) *GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectorsAudioLanguageSelection {
	s.LanguageCode = &v
	return s
}

type GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectorsAudioPidSelection struct {
	// A PID from within a source.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123
	Pid *int64 `json:"Pid,omitempty" xml:"Pid,omitempty"`
}

func (s GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectorsAudioPidSelection) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectorsAudioPidSelection) GoString() string {
	return s.String()
}

func (s *GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectorsAudioPidSelection) SetPid(v int64) *GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectorsAudioPidSelection {
	s.Pid = &v
	return s
}

type GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectorsAudioTrackSelection struct {
	// The track ID from within a source.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	TrackId *int64 `json:"TrackId,omitempty" xml:"TrackId,omitempty"`
}

func (s GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectorsAudioTrackSelection) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectorsAudioTrackSelection) GoString() string {
	return s.String()
}

func (s *GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectorsAudioTrackSelection) SetTrackId(v int64) *GetMediaLiveChannelResponseBodyChannelInputAttachmentsAudioSelectorsAudioTrackSelection {
	s.TrackId = &v
	return s
}

type GetMediaLiveChannelResponseBodyChannelOutputGroups struct {
	// The MediaPackage destination.
	MediaPackageGroupSetting *GetMediaLiveChannelResponseBodyChannelOutputGroupsMediaPackageGroupSetting `json:"MediaPackageGroupSetting,omitempty" xml:"MediaPackageGroupSetting,omitempty" type:"Struct"`
	// The URL for monitoring the output group. The parameter is returned only when the output gourp type is MediaPackage.
	//
	// example:
	//
	// rtmp://xxx
	MonitorUrl *string `json:"MonitorUrl,omitempty" xml:"MonitorUrl,omitempty"`
	// The name of the output group.
	//
	// example:
	//
	// group1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The outputs in the output group.
	Outputs []*GetMediaLiveChannelResponseBodyChannelOutputGroupsOutputs `json:"Outputs,omitempty" xml:"Outputs,omitempty" type:"Repeated"`
	// The output group type.
	//
	// example:
	//
	// MediaPackage
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetMediaLiveChannelResponseBodyChannelOutputGroups) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveChannelResponseBodyChannelOutputGroups) GoString() string {
	return s.String()
}

func (s *GetMediaLiveChannelResponseBodyChannelOutputGroups) SetMediaPackageGroupSetting(v *GetMediaLiveChannelResponseBodyChannelOutputGroupsMediaPackageGroupSetting) *GetMediaLiveChannelResponseBodyChannelOutputGroups {
	s.MediaPackageGroupSetting = v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelOutputGroups) SetMonitorUrl(v string) *GetMediaLiveChannelResponseBodyChannelOutputGroups {
	s.MonitorUrl = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelOutputGroups) SetName(v string) *GetMediaLiveChannelResponseBodyChannelOutputGroups {
	s.Name = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelOutputGroups) SetOutputs(v []*GetMediaLiveChannelResponseBodyChannelOutputGroupsOutputs) *GetMediaLiveChannelResponseBodyChannelOutputGroups {
	s.Outputs = v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelOutputGroups) SetType(v string) *GetMediaLiveChannelResponseBodyChannelOutputGroups {
	s.Type = &v
	return s
}

type GetMediaLiveChannelResponseBodyChannelOutputGroupsMediaPackageGroupSetting struct {
	// ChannelName in MediaPackage.
	//
	// example:
	//
	// myPackageChannel
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// GroupName in MediaPackage.
	//
	// example:
	//
	// myPackageGroup
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s GetMediaLiveChannelResponseBodyChannelOutputGroupsMediaPackageGroupSetting) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveChannelResponseBodyChannelOutputGroupsMediaPackageGroupSetting) GoString() string {
	return s.String()
}

func (s *GetMediaLiveChannelResponseBodyChannelOutputGroupsMediaPackageGroupSetting) SetChannelName(v string) *GetMediaLiveChannelResponseBodyChannelOutputGroupsMediaPackageGroupSetting {
	s.ChannelName = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelOutputGroupsMediaPackageGroupSetting) SetGroupName(v string) *GetMediaLiveChannelResponseBodyChannelOutputGroupsMediaPackageGroupSetting {
	s.GroupName = &v
	return s
}

type GetMediaLiveChannelResponseBodyChannelOutputGroupsOutputs struct {
	// The referenced AudioSettings.
	AudioSettingNames []*string `json:"AudioSettingNames,omitempty" xml:"AudioSettingNames,omitempty" type:"Repeated"`
	// The settings of the output delivered to MediaPackage.
	MediaPackageOutputSetting *GetMediaLiveChannelResponseBodyChannelOutputGroupsOutputsMediaPackageOutputSetting `json:"MediaPackageOutputSetting,omitempty" xml:"MediaPackageOutputSetting,omitempty" type:"Struct"`
	// The media type of the output.
	//
	// example:
	//
	// 0
	MediaType *int32 `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// The name of the output.
	//
	// example:
	//
	// output1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The name of the referenced VideoSettings.
	//
	// example:
	//
	// myVideo1
	VideoSettingName *string `json:"VideoSettingName,omitempty" xml:"VideoSettingName,omitempty"`
}

func (s GetMediaLiveChannelResponseBodyChannelOutputGroupsOutputs) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveChannelResponseBodyChannelOutputGroupsOutputs) GoString() string {
	return s.String()
}

func (s *GetMediaLiveChannelResponseBodyChannelOutputGroupsOutputs) SetAudioSettingNames(v []*string) *GetMediaLiveChannelResponseBodyChannelOutputGroupsOutputs {
	s.AudioSettingNames = v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelOutputGroupsOutputs) SetMediaPackageOutputSetting(v *GetMediaLiveChannelResponseBodyChannelOutputGroupsOutputsMediaPackageOutputSetting) *GetMediaLiveChannelResponseBodyChannelOutputGroupsOutputs {
	s.MediaPackageOutputSetting = v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelOutputGroupsOutputs) SetMediaType(v int32) *GetMediaLiveChannelResponseBodyChannelOutputGroupsOutputs {
	s.MediaType = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelOutputGroupsOutputs) SetName(v string) *GetMediaLiveChannelResponseBodyChannelOutputGroupsOutputs {
	s.Name = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelOutputGroupsOutputs) SetVideoSettingName(v string) *GetMediaLiveChannelResponseBodyChannelOutputGroupsOutputs {
	s.VideoSettingName = &v
	return s
}

type GetMediaLiveChannelResponseBodyChannelOutputGroupsOutputsMediaPackageOutputSetting struct {
	// The manifest audio group ID.
	//
	// example:
	//
	// audiogroup
	AudioGroupId *string `json:"AudioGroupId,omitempty" xml:"AudioGroupId,omitempty"`
	// The manifest name modifier. The child manifests include this modifier in their M3U8 file names.
	//
	// example:
	//
	// 480p
	NameModifier *string `json:"NameModifier,omitempty" xml:"NameModifier,omitempty"`
}

func (s GetMediaLiveChannelResponseBodyChannelOutputGroupsOutputsMediaPackageOutputSetting) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveChannelResponseBodyChannelOutputGroupsOutputsMediaPackageOutputSetting) GoString() string {
	return s.String()
}

func (s *GetMediaLiveChannelResponseBodyChannelOutputGroupsOutputsMediaPackageOutputSetting) SetAudioGroupId(v string) *GetMediaLiveChannelResponseBodyChannelOutputGroupsOutputsMediaPackageOutputSetting {
	s.AudioGroupId = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelOutputGroupsOutputsMediaPackageOutputSetting) SetNameModifier(v string) *GetMediaLiveChannelResponseBodyChannelOutputGroupsOutputsMediaPackageOutputSetting {
	s.NameModifier = &v
	return s
}

type GetMediaLiveChannelResponseBodyChannelVideoSettings struct {
	// The height of the video in pixels.
	//
	// example:
	//
	// 720
	Height *int32 `json:"Height,omitempty" xml:"Height,omitempty"`
	// The name of the video settings.
	//
	// example:
	//
	// video1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The video codec.
	//
	// example:
	//
	// H264
	VideoCodec *string `json:"VideoCodec,omitempty" xml:"VideoCodec,omitempty"`
	// The video encoding settings.
	VideoCodecSetting *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSetting `json:"VideoCodecSetting,omitempty" xml:"VideoCodecSetting,omitempty" type:"Struct"`
	// The video transcoding method. Valid values: NORMAL (regular transcoding) and NBHD (Narrowband HD™ transcoding).
	//
	// example:
	//
	// NORMAL
	VideoCodecType *string `json:"VideoCodecType,omitempty" xml:"VideoCodecType,omitempty"`
	// The width of the video in pixels.
	//
	// example:
	//
	// 1280
	Width *int32 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetMediaLiveChannelResponseBodyChannelVideoSettings) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveChannelResponseBodyChannelVideoSettings) GoString() string {
	return s.String()
}

func (s *GetMediaLiveChannelResponseBodyChannelVideoSettings) SetHeight(v int32) *GetMediaLiveChannelResponseBodyChannelVideoSettings {
	s.Height = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelVideoSettings) SetName(v string) *GetMediaLiveChannelResponseBodyChannelVideoSettings {
	s.Name = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelVideoSettings) SetVideoCodec(v string) *GetMediaLiveChannelResponseBodyChannelVideoSettings {
	s.VideoCodec = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelVideoSettings) SetVideoCodecSetting(v *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSetting) *GetMediaLiveChannelResponseBodyChannelVideoSettings {
	s.VideoCodecSetting = v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelVideoSettings) SetVideoCodecType(v string) *GetMediaLiveChannelResponseBodyChannelVideoSettings {
	s.VideoCodecType = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelVideoSettings) SetWidth(v int32) *GetMediaLiveChannelResponseBodyChannelVideoSettings {
	s.Width = &v
	return s
}

type GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSetting struct {
	// The video encoding settings.
	CodecDetail *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingCodecDetail `json:"CodecDetail,omitempty" xml:"CodecDetail,omitempty" type:"Struct"`
	// The frame rate.
	Framerate *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingFramerate `json:"Framerate,omitempty" xml:"Framerate,omitempty" type:"Struct"`
	// The GOP setting.
	Gop *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingGop `json:"Gop,omitempty" xml:"Gop,omitempty" type:"Struct"`
	// The video encoding rate.
	Rate *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingRate `json:"Rate,omitempty" xml:"Rate,omitempty" type:"Struct"`
}

func (s GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSetting) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSetting) GoString() string {
	return s.String()
}

func (s *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSetting) SetCodecDetail(v *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingCodecDetail) *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSetting {
	s.CodecDetail = v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSetting) SetFramerate(v *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingFramerate) *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSetting {
	s.Framerate = v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSetting) SetGop(v *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingGop) *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSetting {
	s.Gop = v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSetting) SetRate(v *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingRate) *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSetting {
	s.Rate = v
	return s
}

type GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingCodecDetail struct {
	// The video encoding level. It is not supported yet.
	//
	// example:
	//
	// H264_LEVEL_AUTO
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The H.264 profile.
	//
	// example:
	//
	// MAIN
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
}

func (s GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingCodecDetail) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingCodecDetail) GoString() string {
	return s.String()
}

func (s *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingCodecDetail) SetLevel(v string) *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingCodecDetail {
	s.Level = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingCodecDetail) SetProfile(v string) *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingCodecDetail {
	s.Profile = &v
	return s
}

type GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingFramerate struct {
	// The frame rate mode.
	//
	// example:
	//
	// SPECIFIED
	FramerateControl *string `json:"FramerateControl,omitempty" xml:"FramerateControl,omitempty"`
	// The denominator of the fixed frame rate.
	//
	// example:
	//
	// 1
	FramerateDenominator *int32 `json:"FramerateDenominator,omitempty" xml:"FramerateDenominator,omitempty"`
	// The numerator of the fixed frame rate.
	//
	// example:
	//
	// 25
	FramerateNumerator *int32 `json:"FramerateNumerator,omitempty" xml:"FramerateNumerator,omitempty"`
}

func (s GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingFramerate) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingFramerate) GoString() string {
	return s.String()
}

func (s *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingFramerate) SetFramerateControl(v string) *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingFramerate {
	s.FramerateControl = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingFramerate) SetFramerateDenominator(v int32) *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingFramerate {
	s.FramerateDenominator = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingFramerate) SetFramerateNumerator(v int32) *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingFramerate {
	s.FramerateNumerator = &v
	return s
}

type GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingGop struct {
	// The number of B frames.
	//
	// example:
	//
	// 3
	BframesNum *int32 `json:"BframesNum,omitempty" xml:"BframesNum,omitempty"`
	// The GOP size.
	//
	// example:
	//
	// 90
	GopSize *int32 `json:"GopSize,omitempty" xml:"GopSize,omitempty"`
	// The GOP size unit.
	//
	// example:
	//
	// FRAMES
	GopSizeUnits *string `json:"GopSizeUnits,omitempty" xml:"GopSizeUnits,omitempty"`
}

func (s GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingGop) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingGop) GoString() string {
	return s.String()
}

func (s *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingGop) SetBframesNum(v int32) *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingGop {
	s.BframesNum = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingGop) SetGopSize(v int32) *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingGop {
	s.GopSize = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingGop) SetGopSizeUnits(v string) *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingGop {
	s.GopSizeUnits = &v
	return s
}

type GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingRate struct {
	// The video bitrate. Unit: bit/s.
	//
	// example:
	//
	// 2500000
	Bitrate *int32 `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The video buffer size. Unit: bit/s.
	//
	// example:
	//
	// 6000000
	BufferSize *int32 `json:"BufferSize,omitempty" xml:"BufferSize,omitempty"`
	// The maximum bitrate. Unit: bit/s.
	//
	// example:
	//
	// 6000000
	MaxBitrate *int32 `json:"MaxBitrate,omitempty" xml:"MaxBitrate,omitempty"`
	// The bitrate control mode.
	//
	// example:
	//
	// ABR
	RateControlMode *string `json:"RateControlMode,omitempty" xml:"RateControlMode,omitempty"`
}

func (s GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingRate) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingRate) GoString() string {
	return s.String()
}

func (s *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingRate) SetBitrate(v int32) *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingRate {
	s.Bitrate = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingRate) SetBufferSize(v int32) *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingRate {
	s.BufferSize = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingRate) SetMaxBitrate(v int32) *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingRate {
	s.MaxBitrate = &v
	return s
}

func (s *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingRate) SetRateControlMode(v string) *GetMediaLiveChannelResponseBodyChannelVideoSettingsVideoCodecSettingRate {
	s.RateControlMode = &v
	return s
}

type GetMediaLiveChannelResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMediaLiveChannelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMediaLiveChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveChannelResponse) GoString() string {
	return s.String()
}

func (s *GetMediaLiveChannelResponse) SetHeaders(v map[string]*string) *GetMediaLiveChannelResponse {
	s.Headers = v
	return s
}

func (s *GetMediaLiveChannelResponse) SetStatusCode(v int32) *GetMediaLiveChannelResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMediaLiveChannelResponse) SetBody(v *GetMediaLiveChannelResponseBody) *GetMediaLiveChannelResponse {
	s.Body = v
	return s
}

type GetMediaLiveInputRequest struct {
	// The ID of the input.
	//
	// This parameter is required.
	//
	// example:
	//
	// SEGK5KA6KYKAWQQH
	InputId *string `json:"InputId,omitempty" xml:"InputId,omitempty"`
}

func (s GetMediaLiveInputRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveInputRequest) GoString() string {
	return s.String()
}

func (s *GetMediaLiveInputRequest) SetInputId(v string) *GetMediaLiveInputRequest {
	s.InputId = &v
	return s
}

type GetMediaLiveInputResponseBody struct {
	// The input information.
	Input *GetMediaLiveInputResponseBodyInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetMediaLiveInputResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveInputResponseBody) GoString() string {
	return s.String()
}

func (s *GetMediaLiveInputResponseBody) SetInput(v *GetMediaLiveInputResponseBodyInput) *GetMediaLiveInputResponseBody {
	s.Input = v
	return s
}

func (s *GetMediaLiveInputResponseBody) SetRequestId(v string) *GetMediaLiveInputResponseBody {
	s.RequestId = &v
	return s
}

type GetMediaLiveInputResponseBodyInput struct {
	// The IDs of the channels associated with the input.
	ChannelIds []*string `json:"ChannelIds,omitempty" xml:"ChannelIds,omitempty" type:"Repeated"`
	// The time when the input was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2024-12-03T06:56:42Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the input.
	//
	// example:
	//
	// SEGK5KA6KYKAWQQH
	InputId *string `json:"InputId,omitempty" xml:"InputId,omitempty"`
	// The input configurations.
	InputInfos []*GetMediaLiveInputResponseBodyInputInputInfos `json:"InputInfos,omitempty" xml:"InputInfos,omitempty" type:"Repeated"`
	// The name of the input.
	//
	// example:
	//
	// myinput
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The IDs of the security groups associated with the input.
	SecurityGroupIds []*string `json:"SecurityGroupIds,omitempty" xml:"SecurityGroupIds,omitempty" type:"Repeated"`
	// The input type.
	//
	// example:
	//
	// RTMP_PUSH
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetMediaLiveInputResponseBodyInput) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveInputResponseBodyInput) GoString() string {
	return s.String()
}

func (s *GetMediaLiveInputResponseBodyInput) SetChannelIds(v []*string) *GetMediaLiveInputResponseBodyInput {
	s.ChannelIds = v
	return s
}

func (s *GetMediaLiveInputResponseBodyInput) SetCreateTime(v string) *GetMediaLiveInputResponseBodyInput {
	s.CreateTime = &v
	return s
}

func (s *GetMediaLiveInputResponseBodyInput) SetInputId(v string) *GetMediaLiveInputResponseBodyInput {
	s.InputId = &v
	return s
}

func (s *GetMediaLiveInputResponseBodyInput) SetInputInfos(v []*GetMediaLiveInputResponseBodyInputInputInfos) *GetMediaLiveInputResponseBodyInput {
	s.InputInfos = v
	return s
}

func (s *GetMediaLiveInputResponseBodyInput) SetName(v string) *GetMediaLiveInputResponseBodyInput {
	s.Name = &v
	return s
}

func (s *GetMediaLiveInputResponseBodyInput) SetSecurityGroupIds(v []*string) *GetMediaLiveInputResponseBodyInput {
	s.SecurityGroupIds = v
	return s
}

func (s *GetMediaLiveInputResponseBodyInput) SetType(v string) *GetMediaLiveInputResponseBodyInput {
	s.Type = &v
	return s
}

type GetMediaLiveInputResponseBodyInputInputInfos struct {
	// The endpoint that the stream is pushed to. This parameter is returned for PUSH inputs.
	//
	// example:
	//
	// rtmp://domain/app/stream
	DestHost *string `json:"DestHost,omitempty" xml:"DestHost,omitempty"`
	// The ID of the flow from MediaConnect.
	//
	// example:
	//
	// ******81-9693-40dc-bbab-db5e49******
	FlowId *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	// The output name of the MediaConnect flow.
	//
	// example:
	//
	// myFlowOutputName
	FlowOutputName *string `json:"FlowOutputName,omitempty" xml:"FlowOutputName,omitempty"`
	// The URL for input monitoring.
	//
	// example:
	//
	// rtmp://domain/app/stream_for_monitor
	MonitorUrl *string `json:"MonitorUrl,omitempty" xml:"MonitorUrl,omitempty"`
	// The source URL where the stream is pulled from. This parameter is returned for PULL inputs.
	//
	// example:
	//
	// rtmp://domain/app/stream
	SourceUrl *string `json:"SourceUrl,omitempty" xml:"SourceUrl,omitempty"`
	// The name of the pushed stream. This parameter is returned for PUSH inputs.
	//
	// example:
	//
	// mystream
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s GetMediaLiveInputResponseBodyInputInputInfos) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveInputResponseBodyInputInputInfos) GoString() string {
	return s.String()
}

func (s *GetMediaLiveInputResponseBodyInputInputInfos) SetDestHost(v string) *GetMediaLiveInputResponseBodyInputInputInfos {
	s.DestHost = &v
	return s
}

func (s *GetMediaLiveInputResponseBodyInputInputInfos) SetFlowId(v string) *GetMediaLiveInputResponseBodyInputInputInfos {
	s.FlowId = &v
	return s
}

func (s *GetMediaLiveInputResponseBodyInputInputInfos) SetFlowOutputName(v string) *GetMediaLiveInputResponseBodyInputInputInfos {
	s.FlowOutputName = &v
	return s
}

func (s *GetMediaLiveInputResponseBodyInputInputInfos) SetMonitorUrl(v string) *GetMediaLiveInputResponseBodyInputInputInfos {
	s.MonitorUrl = &v
	return s
}

func (s *GetMediaLiveInputResponseBodyInputInputInfos) SetSourceUrl(v string) *GetMediaLiveInputResponseBodyInputInputInfos {
	s.SourceUrl = &v
	return s
}

func (s *GetMediaLiveInputResponseBodyInputInputInfos) SetStreamName(v string) *GetMediaLiveInputResponseBodyInputInputInfos {
	s.StreamName = &v
	return s
}

type GetMediaLiveInputResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMediaLiveInputResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMediaLiveInputResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveInputResponse) GoString() string {
	return s.String()
}

func (s *GetMediaLiveInputResponse) SetHeaders(v map[string]*string) *GetMediaLiveInputResponse {
	s.Headers = v
	return s
}

func (s *GetMediaLiveInputResponse) SetStatusCode(v int32) *GetMediaLiveInputResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMediaLiveInputResponse) SetBody(v *GetMediaLiveInputResponseBody) *GetMediaLiveInputResponse {
	s.Body = v
	return s
}

type GetMediaLiveInputSecurityGroupRequest struct {
	// The ID of the security group.
	//
	// This parameter is required.
	//
	// example:
	//
	// SEGK5KA6KYKAWQQH
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
}

func (s GetMediaLiveInputSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveInputSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *GetMediaLiveInputSecurityGroupRequest) SetSecurityGroupId(v string) *GetMediaLiveInputSecurityGroupRequest {
	s.SecurityGroupId = &v
	return s
}

type GetMediaLiveInputSecurityGroupResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// ****63E8B7C7-4812-46AD-0FA56029AC86****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The security group information.
	SecurityGroup *GetMediaLiveInputSecurityGroupResponseBodySecurityGroup `json:"SecurityGroup,omitempty" xml:"SecurityGroup,omitempty" type:"Struct"`
}

func (s GetMediaLiveInputSecurityGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveInputSecurityGroupResponseBody) GoString() string {
	return s.String()
}

func (s *GetMediaLiveInputSecurityGroupResponseBody) SetRequestId(v string) *GetMediaLiveInputSecurityGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMediaLiveInputSecurityGroupResponseBody) SetSecurityGroup(v *GetMediaLiveInputSecurityGroupResponseBodySecurityGroup) *GetMediaLiveInputSecurityGroupResponseBody {
	s.SecurityGroup = v
	return s
}

type GetMediaLiveInputSecurityGroupResponseBodySecurityGroup struct {
	// The time when the security group was created. It follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2024-06-13T08:31:56Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The IDs of the inputs associated with the security group.
	InputIds []*string `json:"InputIds,omitempty" xml:"InputIds,omitempty" type:"Repeated"`
	// The name of the security group.
	//
	// example:
	//
	// mysg
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the security group.
	//
	// example:
	//
	// SEGK5KA6KYKAWQQH
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// The security group rules.
	WhitelistRules []*string `json:"WhitelistRules,omitempty" xml:"WhitelistRules,omitempty" type:"Repeated"`
}

func (s GetMediaLiveInputSecurityGroupResponseBodySecurityGroup) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveInputSecurityGroupResponseBodySecurityGroup) GoString() string {
	return s.String()
}

func (s *GetMediaLiveInputSecurityGroupResponseBodySecurityGroup) SetCreateTime(v string) *GetMediaLiveInputSecurityGroupResponseBodySecurityGroup {
	s.CreateTime = &v
	return s
}

func (s *GetMediaLiveInputSecurityGroupResponseBodySecurityGroup) SetInputIds(v []*string) *GetMediaLiveInputSecurityGroupResponseBodySecurityGroup {
	s.InputIds = v
	return s
}

func (s *GetMediaLiveInputSecurityGroupResponseBodySecurityGroup) SetName(v string) *GetMediaLiveInputSecurityGroupResponseBodySecurityGroup {
	s.Name = &v
	return s
}

func (s *GetMediaLiveInputSecurityGroupResponseBodySecurityGroup) SetSecurityGroupId(v string) *GetMediaLiveInputSecurityGroupResponseBodySecurityGroup {
	s.SecurityGroupId = &v
	return s
}

func (s *GetMediaLiveInputSecurityGroupResponseBodySecurityGroup) SetWhitelistRules(v []*string) *GetMediaLiveInputSecurityGroupResponseBodySecurityGroup {
	s.WhitelistRules = v
	return s
}

type GetMediaLiveInputSecurityGroupResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMediaLiveInputSecurityGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMediaLiveInputSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMediaLiveInputSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *GetMediaLiveInputSecurityGroupResponse) SetHeaders(v map[string]*string) *GetMediaLiveInputSecurityGroupResponse {
	s.Headers = v
	return s
}

func (s *GetMediaLiveInputSecurityGroupResponse) SetStatusCode(v int32) *GetMediaLiveInputSecurityGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMediaLiveInputSecurityGroupResponse) SetBody(v *GetMediaLiveInputSecurityGroupResponseBody) *GetMediaLiveInputSecurityGroupResponse {
	s.Body = v
	return s
}

type GetMediaMarksRequest struct {
	// The ID of the media asset.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The mark ID. You can specify multiple mark IDs separated with commas (,).
	//
	// example:
	//
	// mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60
	MediaMarkIds *string `json:"MediaMarkIds,omitempty" xml:"MediaMarkIds,omitempty"`
}

func (s GetMediaMarksRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMediaMarksRequest) GoString() string {
	return s.String()
}

func (s *GetMediaMarksRequest) SetMediaId(v string) *GetMediaMarksRequest {
	s.MediaId = &v
	return s
}

func (s *GetMediaMarksRequest) SetMediaMarkIds(v string) *GetMediaMarksRequest {
	s.MediaMarkIds = &v
	return s
}

type GetMediaMarksResponseBody struct {
	// The ID of the media asset.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The queried marks.
	//
	// 	- The value is in the JSONArray format.
	MediaMarks *string `json:"MediaMarks,omitempty" xml:"MediaMarks,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetMediaMarksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMediaMarksResponseBody) GoString() string {
	return s.String()
}

func (s *GetMediaMarksResponseBody) SetMediaId(v string) *GetMediaMarksResponseBody {
	s.MediaId = &v
	return s
}

func (s *GetMediaMarksResponseBody) SetMediaMarks(v string) *GetMediaMarksResponseBody {
	s.MediaMarks = &v
	return s
}

func (s *GetMediaMarksResponseBody) SetRequestId(v string) *GetMediaMarksResponseBody {
	s.RequestId = &v
	return s
}

type GetMediaMarksResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMediaMarksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMediaMarksResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMediaMarksResponse) GoString() string {
	return s.String()
}

func (s *GetMediaMarksResponse) SetHeaders(v map[string]*string) *GetMediaMarksResponse {
	s.Headers = v
	return s
}

func (s *GetMediaMarksResponse) SetStatusCode(v int32) *GetMediaMarksResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMediaMarksResponse) SetBody(v *GetMediaMarksResponseBody) *GetMediaMarksResponse {
	s.Body = v
	return s
}

type GetMediaProducingJobRequest struct {
	// The ID of the media editing and production job.
	//
	// example:
	//
	// ****cdb3e74639973036bc84****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetMediaProducingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMediaProducingJobRequest) GoString() string {
	return s.String()
}

func (s *GetMediaProducingJobRequest) SetJobId(v string) *GetMediaProducingJobRequest {
	s.JobId = &v
	return s
}

type GetMediaProducingJobResponseBody struct {
	// The information about the online editing project.
	MediaProducingJob *GetMediaProducingJobResponseBodyMediaProducingJob `json:"MediaProducingJob,omitempty" xml:"MediaProducingJob,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ****83B7-7F87-4792-BFE9-63CD2137****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetMediaProducingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMediaProducingJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetMediaProducingJobResponseBody) SetMediaProducingJob(v *GetMediaProducingJobResponseBodyMediaProducingJob) *GetMediaProducingJobResponseBody {
	s.MediaProducingJob = v
	return s
}

func (s *GetMediaProducingJobResponseBody) SetRequestId(v string) *GetMediaProducingJobResponseBody {
	s.RequestId = &v
	return s
}

type GetMediaProducingJobResponseBodyMediaProducingJob struct {
	// The template parameters of the media editing and production job.
	//
	// example:
	//
	// {"VideoArray":["****05512043f49f697f7425****","****05512043f49f697f7425****","****05512043f49f697f7425****"]}
	ClipsParam *string `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	// The response code
	//
	// Note: Pay attention to this parameter if the job failed.
	//
	// example:
	//
	// ExceededMaximumValue
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The time when the media editing and production job was complete.
	//
	// The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2020-12-23T13:33:52Z
	CompleteTime *string `json:"CompleteTime,omitempty" xml:"CompleteTime,omitempty"`
	// The time when the media editing and production job was created.
	//
	// The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2020-12-23T13:33:40Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The duration of the output file.
	//
	// Note: This parameter has a value if the job is successful and the output file is an audio or video file.
	//
	// example:
	//
	// 30.500000
	Duration *float32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The ID of the media editing and production job.
	//
	// example:
	//
	// ****cdb3e74639973036bc84****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The media asset ID of the output file.
	//
	// example:
	//
	// ****0cc6ba49eab379332c5b****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The URL of the output file.
	//
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example2.mp4
	MediaURL *string `json:"MediaURL,omitempty" xml:"MediaURL,omitempty"`
	// The returned message.
	//
	// Note: Pay attention to this parameter if the job failed.
	//
	// example:
	//
	// The specified "Width_Height" has exceeded maximum value.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The time when the media editing and production job was last modified.
	//
	// The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2020-12-23T13:33:49Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	Progress     *int32  `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The ID of the online editing project.
	//
	// example:
	//
	// ****fddd7748b58bf1d47e95****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The state of the media editing and production job. Valid values:
	//
	// Init
	//
	// Queuing
	//
	// Processing
	//
	// Success
	//
	// Failed
	//
	// example:
	//
	// Failed
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The materials of the media editing and production job if the job is a subjob of a quick video production job, including the broadcast text and title.
	//
	// example:
	//
	// {"Title": "Title", "SpeechText": "Broadcast text of a quick video production job"}
	SubJobMaterials *string `json:"SubJobMaterials,omitempty" xml:"SubJobMaterials,omitempty"`
	// The ID of the template used by the media editing and production job.
	//
	// example:
	//
	// ****6e76134d739cc3e85d3e****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The timeline of the media editing and production job.
	//
	// example:
	//
	// {"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****4d7cf14dc7b83b0e801c****"},{"MediaId":"****4d7cf14dc7b83b0e801c****"}]}]}
	Timeline *string `json:"Timeline,omitempty" xml:"Timeline,omitempty"`
	// The user-defined data in the JSON format.
	//
	// example:
	//
	// {"NotifyAddress":"http://xx.xx.xxx","Key":"Valuexxx"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	// The media asset ID of the output file in ApsaraVideo VOD if the output file is stored in ApsaraVideo VOD.
	//
	// example:
	//
	// ****332c5b0cc6ba49eab379****
	VodMediaId *string `json:"VodMediaId,omitempty" xml:"VodMediaId,omitempty"`
}

func (s GetMediaProducingJobResponseBodyMediaProducingJob) String() string {
	return tea.Prettify(s)
}

func (s GetMediaProducingJobResponseBodyMediaProducingJob) GoString() string {
	return s.String()
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetClipsParam(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.ClipsParam = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetCode(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.Code = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetCompleteTime(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.CompleteTime = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetCreateTime(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.CreateTime = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetDuration(v float32) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.Duration = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetJobId(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.JobId = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetMediaId(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.MediaId = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetMediaURL(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.MediaURL = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetMessage(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.Message = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetModifiedTime(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.ModifiedTime = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetProgress(v int32) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.Progress = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetProjectId(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.ProjectId = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetStatus(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.Status = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetSubJobMaterials(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.SubJobMaterials = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetTemplateId(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.TemplateId = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetTimeline(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.Timeline = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetUserData(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.UserData = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetVodMediaId(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.VodMediaId = &v
	return s
}

type GetMediaProducingJobResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMediaProducingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMediaProducingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMediaProducingJobResponse) GoString() string {
	return s.String()
}

func (s *GetMediaProducingJobResponse) SetHeaders(v map[string]*string) *GetMediaProducingJobResponse {
	s.Headers = v
	return s
}

func (s *GetMediaProducingJobResponse) SetStatusCode(v int32) *GetMediaProducingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMediaProducingJobResponse) SetBody(v *GetMediaProducingJobResponseBody) *GetMediaProducingJobResponse {
	s.Body = v
	return s
}

type GetPackageJobRequest struct {
	// The job ID. You can obtain the job ID from the response parameters of the [SubmitPackageJob](https://help.aliyun.com/document_detail/461964.html) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// ab4802364a2e49208c99efab82dfa8e8
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetPackageJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPackageJobRequest) GoString() string {
	return s.String()
}

func (s *GetPackageJobRequest) SetJobId(v string) *GetPackageJobRequest {
	s.JobId = &v
	return s
}

type GetPackageJobResponseBody struct {
	// The information about the packaging job.
	PackageJob *GetPackageJobResponseBodyPackageJob `json:"PackageJob,omitempty" xml:"PackageJob,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetPackageJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPackageJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetPackageJobResponseBody) SetPackageJob(v *GetPackageJobResponseBodyPackageJob) *GetPackageJobResponseBody {
	s.PackageJob = v
	return s
}

func (s *GetPackageJobResponseBody) SetRequestId(v string) *GetPackageJobResponseBody {
	s.RequestId = &v
	return s
}

type GetPackageJobResponseBodyPackageJob struct {
	// The error code returned if the job fails.
	//
	// example:
	//
	// InvalidParameter
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The time when the job was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-09-08T11:34:05Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the job was complete. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-09-08T11:44:05Z
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The input of the job.
	Inputs []*GetPackageJobResponseBodyPackageJobInputs `json:"Inputs,omitempty" xml:"Inputs,omitempty" type:"Repeated"`
	// The job ID.
	//
	// example:
	//
	// ab4802364a2e49208c99efab82dfa8e8
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The error message that is returned.
	//
	// example:
	//
	// Resource content bad.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The time when the job was last modified. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-09-08T11:44:05Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The name of the job.
	//
	// example:
	//
	// job-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output of the job.
	Output *GetPackageJobResponseBodyPackageJobOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// The URL of the output file.
	//
	// example:
	//
	// http://bucket.oss-cn-shanghai.aliyuncs.com/output.m3u8
	OutputUrl *string `json:"OutputUrl,omitempty" xml:"OutputUrl,omitempty"`
	// The ID of the MPS queue to which the job was submitted.
	//
	// example:
	//
	// 36f3fee40aa047c0b067d0fb85edc12b
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The priority of the job. Valid values: 1 to 10. The greater the value, the higher the priority.
	//
	// example:
	//
	// 6
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The state of the job.
	//
	// example:
	//
	// Init
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The time when the job was submitted. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-09-08T11:34:05Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// The source of the job. Valid values:
	//
	// 	- API
	//
	// 	- WorkFlow
	//
	// 	- Console
	//
	// example:
	//
	// API
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// The user-defined data.
	//
	// example:
	//
	// {"param": "value"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetPackageJobResponseBodyPackageJob) String() string {
	return tea.Prettify(s)
}

func (s GetPackageJobResponseBodyPackageJob) GoString() string {
	return s.String()
}

func (s *GetPackageJobResponseBodyPackageJob) SetCode(v string) *GetPackageJobResponseBodyPackageJob {
	s.Code = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetCreateTime(v string) *GetPackageJobResponseBodyPackageJob {
	s.CreateTime = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetFinishTime(v string) *GetPackageJobResponseBodyPackageJob {
	s.FinishTime = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetInputs(v []*GetPackageJobResponseBodyPackageJobInputs) *GetPackageJobResponseBodyPackageJob {
	s.Inputs = v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetJobId(v string) *GetPackageJobResponseBodyPackageJob {
	s.JobId = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetMessage(v string) *GetPackageJobResponseBodyPackageJob {
	s.Message = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetModifiedTime(v string) *GetPackageJobResponseBodyPackageJob {
	s.ModifiedTime = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetName(v string) *GetPackageJobResponseBodyPackageJob {
	s.Name = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetOutput(v *GetPackageJobResponseBodyPackageJobOutput) *GetPackageJobResponseBodyPackageJob {
	s.Output = v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetOutputUrl(v string) *GetPackageJobResponseBodyPackageJob {
	s.OutputUrl = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetPipelineId(v string) *GetPackageJobResponseBodyPackageJob {
	s.PipelineId = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetPriority(v int32) *GetPackageJobResponseBodyPackageJob {
	s.Priority = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetStatus(v string) *GetPackageJobResponseBodyPackageJob {
	s.Status = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetSubmitTime(v string) *GetPackageJobResponseBodyPackageJob {
	s.SubmitTime = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetTriggerSource(v string) *GetPackageJobResponseBodyPackageJob {
	s.TriggerSource = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetUserData(v string) *GetPackageJobResponseBodyPackageJob {
	s.UserData = &v
	return s
}

type GetPackageJobResponseBodyPackageJobInputs struct {
	// The information about the input stream file.
	Input *GetPackageJobResponseBodyPackageJobInputsInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
}

func (s GetPackageJobResponseBodyPackageJobInputs) String() string {
	return tea.Prettify(s)
}

func (s GetPackageJobResponseBodyPackageJobInputs) GoString() string {
	return s.String()
}

func (s *GetPackageJobResponseBodyPackageJobInputs) SetInput(v *GetPackageJobResponseBodyPackageJobInputsInput) *GetPackageJobResponseBodyPackageJobInputs {
	s.Input = v
	return s
}

type GetPackageJobResponseBodyPackageJobInputsInput struct {
	// The media object.
	//
	// 	- If Type is set to OSS, the URL of an OSS object is returned. Both the OSS and HTTP protocols are supported.
	//
	// 	- If Type is set to Media, the ID of a media asset is returned.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an Object Storage Service (OSS) object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetPackageJobResponseBodyPackageJobInputsInput) String() string {
	return tea.Prettify(s)
}

func (s GetPackageJobResponseBodyPackageJobInputsInput) GoString() string {
	return s.String()
}

func (s *GetPackageJobResponseBodyPackageJobInputsInput) SetMedia(v string) *GetPackageJobResponseBodyPackageJobInputsInput {
	s.Media = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJobInputsInput) SetType(v string) *GetPackageJobResponseBodyPackageJobInputsInput {
	s.Type = &v
	return s
}

type GetPackageJobResponseBodyPackageJobOutput struct {
	// The media object.
	//
	// 	- If Type is set to OSS, the URL of an OSS object is returned. Both the OSS and HTTP protocols are supported.
	//
	// 	- If Type is set to Media, the ID of a media asset is returned.
	//
	// example:
	//
	// oss://bucket/path/to/video.m3u8
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an OSS object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetPackageJobResponseBodyPackageJobOutput) String() string {
	return tea.Prettify(s)
}

func (s GetPackageJobResponseBodyPackageJobOutput) GoString() string {
	return s.String()
}

func (s *GetPackageJobResponseBodyPackageJobOutput) SetMedia(v string) *GetPackageJobResponseBodyPackageJobOutput {
	s.Media = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJobOutput) SetType(v string) *GetPackageJobResponseBodyPackageJobOutput {
	s.Type = &v
	return s
}

type GetPackageJobResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPackageJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPackageJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPackageJobResponse) GoString() string {
	return s.String()
}

func (s *GetPackageJobResponse) SetHeaders(v map[string]*string) *GetPackageJobResponse {
	s.Headers = v
	return s
}

func (s *GetPackageJobResponse) SetStatusCode(v int32) *GetPackageJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPackageJobResponse) SetBody(v *GetPackageJobResponseBody) *GetPackageJobResponse {
	s.Body = v
	return s
}

type GetPipelineRequest struct {
	// The ID of the MPS queue.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
}

func (s GetPipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineRequest) GoString() string {
	return s.String()
}

func (s *GetPipelineRequest) SetPipelineId(v string) *GetPipelineRequest {
	s.PipelineId = &v
	return s
}

type GetPipelineResponseBody struct {
	// The information about the MPS queue.
	Pipeline *GetPipelineResponseBodyPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetPipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineResponseBody) GoString() string {
	return s.String()
}

func (s *GetPipelineResponseBody) SetPipeline(v *GetPipelineResponseBodyPipeline) *GetPipelineResponseBody {
	s.Pipeline = v
	return s
}

func (s *GetPipelineResponseBody) SetRequestId(v string) *GetPipelineResponseBody {
	s.RequestId = &v
	return s
}

type GetPipelineResponseBodyPipeline struct {
	// The time when the template was created.
	//
	// example:
	//
	// 2022-07-12T16:17:54Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the template was last modified.
	//
	// example:
	//
	// 2022-07-12T16:17:54Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The name of the MPS queue.
	//
	// example:
	//
	// test-pipeline
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the MPS queue.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The priority of the MPS queue. Valid values: 1 to 10.
	//
	// example:
	//
	// 6
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The type of the MPS queue.
	//
	// Valid values:
	//
	// 	- Standard: standard MPS queue.
	//
	// 	- Boost: MPS queue with transcoding speed boosted.
	//
	// 	- NarrowBandHDV2: MPS queue that supports Narrowband HD 2.0.
	//
	// example:
	//
	// Standard
	Speed *string `json:"Speed,omitempty" xml:"Speed,omitempty"`
	// The state of the MPS queue.
	//
	// Valid values:
	//
	// 	- Active
	//
	// 	- Paused
	//
	// example:
	//
	// Active
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetPipelineResponseBodyPipeline) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineResponseBodyPipeline) GoString() string {
	return s.String()
}

func (s *GetPipelineResponseBodyPipeline) SetCreateTime(v string) *GetPipelineResponseBodyPipeline {
	s.CreateTime = &v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetModifiedTime(v string) *GetPipelineResponseBodyPipeline {
	s.ModifiedTime = &v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetName(v string) *GetPipelineResponseBodyPipeline {
	s.Name = &v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetPipelineId(v string) *GetPipelineResponseBodyPipeline {
	s.PipelineId = &v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetPriority(v int32) *GetPipelineResponseBodyPipeline {
	s.Priority = &v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetSpeed(v string) *GetPipelineResponseBodyPipeline {
	s.Speed = &v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetStatus(v string) *GetPipelineResponseBodyPipeline {
	s.Status = &v
	return s
}

type GetPipelineResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPipelineResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineResponse) GoString() string {
	return s.String()
}

func (s *GetPipelineResponse) SetHeaders(v map[string]*string) *GetPipelineResponse {
	s.Headers = v
	return s
}

func (s *GetPipelineResponse) SetStatusCode(v int32) *GetPipelineResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPipelineResponse) SetBody(v *GetPipelineResponseBody) *GetPipelineResponse {
	s.Body = v
	return s
}

type GetPlayInfoRequest struct {
	AuthTimeout *int64 `json:"AuthTimeout,omitempty" xml:"AuthTimeout,omitempty"`
	// The input URL that you specified for the media asset when you registered the media asset. For more information, see [RegisterMediaInfo](https://help.aliyun.com/document_detail/441152.html).
	//
	// >  You must specify at least one of the MediaId and InputURL parameters.
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// The ID of the media asset.
	//
	// >  You must specify at least one of the MediaId and InputURL parameters.
	//
	// example:
	//
	// 86434e152b7d4f20be480574439fe***
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s GetPlayInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPlayInfoRequest) GoString() string {
	return s.String()
}

func (s *GetPlayInfoRequest) SetAuthTimeout(v int64) *GetPlayInfoRequest {
	s.AuthTimeout = &v
	return s
}

func (s *GetPlayInfoRequest) SetInputURL(v string) *GetPlayInfoRequest {
	s.InputURL = &v
	return s
}

func (s *GetPlayInfoRequest) SetMediaId(v string) *GetPlayInfoRequest {
	s.MediaId = &v
	return s
}

type GetPlayInfoResponseBody struct {
	// The information about the media asset.
	MediaBase *GetPlayInfoResponseBodyMediaBase `json:"MediaBase,omitempty" xml:"MediaBase,omitempty" type:"Struct"`
	// The information about the audio or video stream.
	PlayInfoList []*GetPlayInfoResponseBodyPlayInfoList `json:"PlayInfoList,omitempty" xml:"PlayInfoList,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetPlayInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPlayInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetPlayInfoResponseBody) SetMediaBase(v *GetPlayInfoResponseBodyMediaBase) *GetPlayInfoResponseBody {
	s.MediaBase = v
	return s
}

func (s *GetPlayInfoResponseBody) SetPlayInfoList(v []*GetPlayInfoResponseBodyPlayInfoList) *GetPlayInfoResponseBody {
	s.PlayInfoList = v
	return s
}

func (s *GetPlayInfoResponseBody) SetRequestId(v string) *GetPlayInfoResponseBody {
	s.RequestId = &v
	return s
}

type GetPlayInfoResponseBodyMediaBase struct {
	// The category ID. You can use one of the following methods to obtain the ID:
	//
	// 	- Log on to the [Intelligent Media Services (IMS) console](https://ims.console.aliyun.com) and choose **Media Asset Management*	- > **Category Management*	- to view the category ID.
	//
	// 	- View the value of the CateId parameter returned by the AddCategory operation that you called to create a category.
	//
	// 	- View the value of the CateId parameter returned by the GetCategories operation that you called to query a category.
	//
	// example:
	//
	// 4220
	CateId *int64 `json:"CateId,omitempty" xml:"CateId,omitempty"`
	// The URL of the thumbnail.
	//
	// example:
	//
	// https://***.oss-cn-shanghai.aliyuncs.com/cover/281c64d6-b5fb-4c57-97cd-84da56a8b151_large_cover_url.jpg
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// The time when the media asset was created.
	//
	// example:
	//
	// 2021-09-22T10:07:31+08:00
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The content description.
	//
	// example:
	//
	// desc
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// 2eea77a61c7b4ddd95bec34a6f65b***
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The tags.
	//
	// 	- Up to 16 tags are supported.
	//
	// 	- Multiple tags are separated by commas (,).
	//
	// 	- Each tag can be up to 32 bytes in length.
	//
	// 	- The value is encoded in UTF-8.
	//
	// example:
	//
	// test,ccc
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// The type of the media asset. Valid values:
	//
	// video audio
	//
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// The resource status. Valid values:
	//
	// Init: the initial state, which indicates that the source file is not ready.
	//
	// Preparing: The source file is being prepared. For example, the file is being uploaded or edited.
	//
	// PrepareFail: The source file failed to be prepared. For example, the information of the source file failed to be obtained.
	//
	// Normal: The source file is ready.
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The title.
	//
	// example:
	//
	// testTitle
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s GetPlayInfoResponseBodyMediaBase) String() string {
	return tea.Prettify(s)
}

func (s GetPlayInfoResponseBodyMediaBase) GoString() string {
	return s.String()
}

func (s *GetPlayInfoResponseBodyMediaBase) SetCateId(v int64) *GetPlayInfoResponseBodyMediaBase {
	s.CateId = &v
	return s
}

func (s *GetPlayInfoResponseBodyMediaBase) SetCoverURL(v string) *GetPlayInfoResponseBodyMediaBase {
	s.CoverURL = &v
	return s
}

func (s *GetPlayInfoResponseBodyMediaBase) SetCreationTime(v string) *GetPlayInfoResponseBodyMediaBase {
	s.CreationTime = &v
	return s
}

func (s *GetPlayInfoResponseBodyMediaBase) SetDescription(v string) *GetPlayInfoResponseBodyMediaBase {
	s.Description = &v
	return s
}

func (s *GetPlayInfoResponseBodyMediaBase) SetMediaId(v string) *GetPlayInfoResponseBodyMediaBase {
	s.MediaId = &v
	return s
}

func (s *GetPlayInfoResponseBodyMediaBase) SetMediaTags(v string) *GetPlayInfoResponseBodyMediaBase {
	s.MediaTags = &v
	return s
}

func (s *GetPlayInfoResponseBodyMediaBase) SetMediaType(v string) *GetPlayInfoResponseBodyMediaBase {
	s.MediaType = &v
	return s
}

func (s *GetPlayInfoResponseBodyMediaBase) SetStatus(v string) *GetPlayInfoResponseBodyMediaBase {
	s.Status = &v
	return s
}

func (s *GetPlayInfoResponseBodyMediaBase) SetTitle(v string) *GetPlayInfoResponseBodyMediaBase {
	s.Title = &v
	return s
}

type GetPlayInfoResponseBodyPlayInfoList struct {
	// The color depth.
	//
	// example:
	//
	// 8
	BitDepth *int32 `json:"BitDepth,omitempty" xml:"BitDepth,omitempty"`
	// The bitrate of the media stream. Unit: Kbit/s.
	//
	// example:
	//
	// 20
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The time when the media stream was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-05-10T02:28:49Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The quality of the media stream. Valid values:
	//
	// 	- **FD**: low definition
	//
	// 	- **LD**: standard definition
	//
	// 	- **SD**: high definition
	//
	// 	- **HD**: ultra-high definition
	//
	// 	- **OD**: original definition
	//
	// 	- **2K**
	//
	// 	- **4K**
	//
	// 	- **SQ**: standard sound quality
	//
	// 	- **HQ**: high sound quality
	//
	// 	- **AUTO**: adaptive bitrate
	//
	// example:
	//
	// HD
	Definition *string `json:"Definition,omitempty" xml:"Definition,omitempty"`
	// The duration of the media stream. Unit: seconds.
	//
	// example:
	//
	// 9.0464
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// Indicates whether the media stream is encrypted. Valid values:
	//
	// 	- **0**: The media stream is not encrypted.
	//
	// 	- **1**: The media stream is encrypted.
	//
	// example:
	//
	// 0
	Encrypt *int64 `json:"Encrypt,omitempty" xml:"Encrypt,omitempty"`
	// The encryption type of the media stream. Valid values:
	//
	// 	- **AliyunVoDEncryption**: Alibaba Cloud proprietary cryptography
	//
	// 	- **HLSEncryption**: HTTP Live Streaming (HLS) encryption
	//
	// >  If the encryption type is AliyunVoDEncryption, only ApsaraVideo Player SDK can be used to play videos.
	//
	// example:
	//
	// AliyunVoDEncryption
	EncryptType *string `json:"EncryptType,omitempty" xml:"EncryptType,omitempty"`
	// The OSS URL of the file.
	//
	// example:
	//
	// http://outin-***.oss-cn-shanghai.aliyuncs.com/sv/43a68ee9-181809b6aba/43a68ee9-181809b6aba.mpeg
	FileURL *string `json:"FileURL,omitempty" xml:"FileURL,omitempty"`
	// The format of the media stream.
	//
	// 	- If the media asset is a video file, the valid values are **mp4*	- and **m3u8**.
	//
	// 	- If the media asset is an audio-only file, the value is **mp3**.
	//
	// example:
	//
	// mp4
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
	// The frame rate of the media stream. Unit: frames per second (FPS).
	//
	// example:
	//
	// 25
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// The high dynamic range (HDR) type of the media stream. Valid values:
	//
	// 	- HDR
	//
	// 	- HDR10
	//
	// 	- HLG
	//
	// 	- DolbyVision
	//
	// 	- HDRVivid
	//
	// 	- SDR+
	//
	// example:
	//
	// HDR
	HDRType *string `json:"HDRType,omitempty" xml:"HDRType,omitempty"`
	// The height of the media stream. Unit: pixels.
	//
	// example:
	//
	// 1080
	Height *int64 `json:"Height,omitempty" xml:"Height,omitempty"`
	// The task ID.
	//
	// example:
	//
	// 36c9d38e70bf43ed9f7f8f48d6356***
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The time when the media stream was updated. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-05-13T11:39:41.714+08:00
	ModificationTime *string `json:"ModificationTime,omitempty" xml:"ModificationTime,omitempty"`
	// The type of Narrowband HD™ transcoding. Valid values:
	//
	// 	- **0**: standard transcoding
	//
	// 	- **1.0**: Narrowband HD™ 1.0 transcoding
	//
	// 	- **2.0**: Narrowband HD™ 2.0 transcoding
	//
	// This parameter is returned only when a definition that is available in the built-in Narrowband HD™ 1.0 transcoding template is specified. For more information, see the [Definition parameter in TranscodeTemplate](https://help.aliyun.com/document_detail/52839.html) table.
	//
	// example:
	//
	// 0
	NarrowBandType *string `json:"NarrowBandType,omitempty" xml:"NarrowBandType,omitempty"`
	// The playback URL of the media stream.
	//
	// example:
	//
	// https://***.aliyuncdn.com/sv/756bee1-17f980f0945/756bee1-17f980f0945.mp4
	PlayURL *string `json:"PlayURL,omitempty" xml:"PlayURL,omitempty"`
	// The size of the media stream. Unit: bytes.
	//
	// example:
	//
	// 418112
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The status of the media stream. Valid values:
	//
	// 	- **Normal**
	//
	// 	- **Invisible**
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The tags of the media stream, which are used to identify the transcoding type.
	//
	// example:
	//
	// "{\\"ims.audioServiceType\\": \\"AudioEnhancement\\"}"
	StreamTags *string `json:"StreamTags,omitempty" xml:"StreamTags,omitempty"`
	// The type of the media stream. If the media stream is a video stream, the value is **video**. If the media stream is an audio-only stream, the value is **audio**.
	//
	// example:
	//
	// video
	StreamType *string `json:"StreamType,omitempty" xml:"StreamType,omitempty"`
	// The type of the transcoding template. Valid values:
	//
	// 	- Normal: standard transcoding
	//
	// 	- AudioTranscode: audio transcoding
	//
	// 	- Remux: container format conversion
	//
	// 	- NarrowBandV1: Narrowband HD™ 1.0
	//
	// 	- NarrowBandV2: Narrowband HD™ 2.0
	//
	// 	- UHD: audio and video enhancement (ultra-high definition)
	//
	// example:
	//
	// Normal
	TransTemplateType *string `json:"TransTemplateType,omitempty" xml:"TransTemplateType,omitempty"`
	// The ID of the watermark that is associated with the media stream.
	//
	// example:
	//
	// 5bed88672b1e2520ead228935ed51***
	WatermarkId *string `json:"WatermarkId,omitempty" xml:"WatermarkId,omitempty"`
	// The width of the media stream. Unit: pixels.
	//
	// example:
	//
	// 1024
	Width *int64 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetPlayInfoResponseBodyPlayInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetPlayInfoResponseBodyPlayInfoList) GoString() string {
	return s.String()
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetBitDepth(v int32) *GetPlayInfoResponseBodyPlayInfoList {
	s.BitDepth = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetBitrate(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.Bitrate = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetCreationTime(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.CreationTime = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetDefinition(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.Definition = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetDuration(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.Duration = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetEncrypt(v int64) *GetPlayInfoResponseBodyPlayInfoList {
	s.Encrypt = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetEncryptType(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.EncryptType = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetFileURL(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.FileURL = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetFormat(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.Format = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetFps(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.Fps = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetHDRType(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.HDRType = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetHeight(v int64) *GetPlayInfoResponseBodyPlayInfoList {
	s.Height = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetJobId(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.JobId = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetModificationTime(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.ModificationTime = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetNarrowBandType(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.NarrowBandType = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetPlayURL(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.PlayURL = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetSize(v int64) *GetPlayInfoResponseBodyPlayInfoList {
	s.Size = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetStatus(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.Status = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetStreamTags(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.StreamTags = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetStreamType(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.StreamType = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetTransTemplateType(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.TransTemplateType = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetWatermarkId(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.WatermarkId = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetWidth(v int64) *GetPlayInfoResponseBodyPlayInfoList {
	s.Width = &v
	return s
}

type GetPlayInfoResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPlayInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPlayInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPlayInfoResponse) GoString() string {
	return s.String()
}

func (s *GetPlayInfoResponse) SetHeaders(v map[string]*string) *GetPlayInfoResponse {
	s.Headers = v
	return s
}

func (s *GetPlayInfoResponse) SetStatusCode(v int32) *GetPlayInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPlayInfoResponse) SetBody(v *GetPlayInfoResponseBody) *GetPlayInfoResponse {
	s.Body = v
	return s
}

type GetProgramRequest struct {
	// The name of the channel.
	//
	// This parameter is required.
	//
	// example:
	//
	// MyChannel
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The name of the program.
	//
	// This parameter is required.
	//
	// example:
	//
	// program1
	ProgramName *string `json:"ProgramName,omitempty" xml:"ProgramName,omitempty"`
}

func (s GetProgramRequest) String() string {
	return tea.Prettify(s)
}

func (s GetProgramRequest) GoString() string {
	return s.String()
}

func (s *GetProgramRequest) SetChannelName(v string) *GetProgramRequest {
	s.ChannelName = &v
	return s
}

func (s *GetProgramRequest) SetProgramName(v string) *GetProgramRequest {
	s.ProgramName = &v
	return s
}

type GetProgramResponseBody struct {
	// The information about the program.
	Program *ChannelAssemblyProgram `json:"Program,omitempty" xml:"Program,omitempty"`
	// **Request ID**
	//
	// example:
	//
	// xxx-xxxx-xxxxx-xxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetProgramResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetProgramResponseBody) GoString() string {
	return s.String()
}

func (s *GetProgramResponseBody) SetProgram(v *ChannelAssemblyProgram) *GetProgramResponseBody {
	s.Program = v
	return s
}

func (s *GetProgramResponseBody) SetRequestId(v string) *GetProgramResponseBody {
	s.RequestId = &v
	return s
}

type GetProgramResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetProgramResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetProgramResponse) String() string {
	return tea.Prettify(s)
}

func (s GetProgramResponse) GoString() string {
	return s.String()
}

func (s *GetProgramResponse) SetHeaders(v map[string]*string) *GetProgramResponse {
	s.Headers = v
	return s
}

func (s *GetProgramResponse) SetStatusCode(v int32) *GetProgramResponse {
	s.StatusCode = &v
	return s
}

func (s *GetProgramResponse) SetBody(v *GetProgramResponseBody) *GetProgramResponse {
	s.Body = v
	return s
}

type GetProjectExportJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ****cdb3e74639973036bc84****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetProjectExportJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetProjectExportJobRequest) GoString() string {
	return s.String()
}

func (s *GetProjectExportJobRequest) SetJobId(v string) *GetProjectExportJobRequest {
	s.JobId = &v
	return s
}

type GetProjectExportJobResponseBody struct {
	ProjectExportJob *GetProjectExportJobResponseBodyProjectExportJob `json:"ProjectExportJob,omitempty" xml:"ProjectExportJob,omitempty" type:"Struct"`
	// example:
	//
	// ****2876-6263-4B75-8F2C-CD0F7FCF****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetProjectExportJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetProjectExportJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetProjectExportJobResponseBody) SetProjectExportJob(v *GetProjectExportJobResponseBodyProjectExportJob) *GetProjectExportJobResponseBody {
	s.ProjectExportJob = v
	return s
}

func (s *GetProjectExportJobResponseBody) SetRequestId(v string) *GetProjectExportJobResponseBody {
	s.RequestId = &v
	return s
}

type GetProjectExportJobResponseBodyProjectExportJob struct {
	// example:
	//
	// InvalidParameter
	Code         *string                                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	ExportResult *GetProjectExportJobResponseBodyProjectExportJobExportResult `json:"ExportResult,omitempty" xml:"ExportResult,omitempty" type:"Struct"`
	// example:
	//
	// BaseTimeline
	ExportType *string `json:"ExportType,omitempty" xml:"ExportType,omitempty"`
	// example:
	//
	// ****cdb3e74639973036bc84****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// The specified parameter is not valid.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// ****fddd7748b58bf1d47e95****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// {"NotifyAddress":"http://xx.xx.xxx","Key":"Valuexxx"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetProjectExportJobResponseBodyProjectExportJob) String() string {
	return tea.Prettify(s)
}

func (s GetProjectExportJobResponseBodyProjectExportJob) GoString() string {
	return s.String()
}

func (s *GetProjectExportJobResponseBodyProjectExportJob) SetCode(v string) *GetProjectExportJobResponseBodyProjectExportJob {
	s.Code = &v
	return s
}

func (s *GetProjectExportJobResponseBodyProjectExportJob) SetExportResult(v *GetProjectExportJobResponseBodyProjectExportJobExportResult) *GetProjectExportJobResponseBodyProjectExportJob {
	s.ExportResult = v
	return s
}

func (s *GetProjectExportJobResponseBodyProjectExportJob) SetExportType(v string) *GetProjectExportJobResponseBodyProjectExportJob {
	s.ExportType = &v
	return s
}

func (s *GetProjectExportJobResponseBodyProjectExportJob) SetJobId(v string) *GetProjectExportJobResponseBodyProjectExportJob {
	s.JobId = &v
	return s
}

func (s *GetProjectExportJobResponseBodyProjectExportJob) SetMessage(v string) *GetProjectExportJobResponseBodyProjectExportJob {
	s.Message = &v
	return s
}

func (s *GetProjectExportJobResponseBodyProjectExportJob) SetProjectId(v string) *GetProjectExportJobResponseBodyProjectExportJob {
	s.ProjectId = &v
	return s
}

func (s *GetProjectExportJobResponseBodyProjectExportJob) SetStatus(v string) *GetProjectExportJobResponseBodyProjectExportJob {
	s.Status = &v
	return s
}

func (s *GetProjectExportJobResponseBodyProjectExportJob) SetUserData(v string) *GetProjectExportJobResponseBodyProjectExportJob {
	s.UserData = &v
	return s
}

type GetProjectExportJobResponseBodyProjectExportJobExportResult struct {
	ProjectUrl *string `json:"ProjectUrl,omitempty" xml:"ProjectUrl,omitempty"`
	// example:
	//
	// {"VideoTracks":[{"VideoTrackClips":[{"Type":"Video","MediaId":"****4d7cf14dc7b83b0e801c****","MediaURL":"https://test-bucket.oss-cn-shanghai.aliyuncs.com/test.mp4","TimelineIn":0.0,"TimelineOut":5.0,"In":0.0,"Out":5.0,"Speed":1.0,"Duration":5.0,"VirginDuration":13.334,"Height":1.0,"Width":1.0,"X":0.0,"Y":0.0}]}]}
	Timeline *string `json:"Timeline,omitempty" xml:"Timeline,omitempty"`
}

func (s GetProjectExportJobResponseBodyProjectExportJobExportResult) String() string {
	return tea.Prettify(s)
}

func (s GetProjectExportJobResponseBodyProjectExportJobExportResult) GoString() string {
	return s.String()
}

func (s *GetProjectExportJobResponseBodyProjectExportJobExportResult) SetProjectUrl(v string) *GetProjectExportJobResponseBodyProjectExportJobExportResult {
	s.ProjectUrl = &v
	return s
}

func (s *GetProjectExportJobResponseBodyProjectExportJobExportResult) SetTimeline(v string) *GetProjectExportJobResponseBodyProjectExportJobExportResult {
	s.Timeline = &v
	return s
}

type GetProjectExportJobResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetProjectExportJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetProjectExportJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetProjectExportJobResponse) GoString() string {
	return s.String()
}

func (s *GetProjectExportJobResponse) SetHeaders(v map[string]*string) *GetProjectExportJobResponse {
	s.Headers = v
	return s
}

func (s *GetProjectExportJobResponse) SetStatusCode(v int32) *GetProjectExportJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetProjectExportJobResponse) SetBody(v *GetProjectExportJobResponseBody) *GetProjectExportJobResponse {
	s.Body = v
	return s
}

type GetPublicMediaInfoRequest struct {
	// example:
	//
	// icepublic-****14e501538aeef0a3140176f6****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s GetPublicMediaInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoRequest) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoRequest) SetMediaId(v string) *GetPublicMediaInfoRequest {
	s.MediaId = &v
	return s
}

type GetPublicMediaInfoResponseBody struct {
	MediaInfo *GetPublicMediaInfoResponseBodyMediaInfo `json:"MediaInfo,omitempty" xml:"MediaInfo,omitempty" type:"Struct"`
	// RequestId
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetPublicMediaInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBody) SetMediaInfo(v *GetPublicMediaInfoResponseBodyMediaInfo) *GetPublicMediaInfoResponseBody {
	s.MediaInfo = v
	return s
}

func (s *GetPublicMediaInfoResponseBody) SetRequestId(v string) *GetPublicMediaInfoResponseBody {
	s.RequestId = &v
	return s
}

type GetPublicMediaInfoResponseBodyMediaInfo struct {
	DynamicMetaData *GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData `json:"DynamicMetaData,omitempty" xml:"DynamicMetaData,omitempty" type:"Struct"`
	// FileInfos
	FileInfoList []*GetPublicMediaInfoResponseBodyMediaInfoFileInfoList `json:"FileInfoList,omitempty" xml:"FileInfoList,omitempty" type:"Repeated"`
	// BasicInfo
	MediaBasicInfo *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// example:
	//
	// icepublic-****14e501538aeef0a3140176f6****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s GetPublicMediaInfoResponseBodyMediaInfo) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBodyMediaInfo) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBodyMediaInfo) SetDynamicMetaData(v *GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData) *GetPublicMediaInfoResponseBodyMediaInfo {
	s.DynamicMetaData = v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfo) SetFileInfoList(v []*GetPublicMediaInfoResponseBodyMediaInfoFileInfoList) *GetPublicMediaInfoResponseBodyMediaInfo {
	s.FileInfoList = v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfo) SetMediaBasicInfo(v *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) *GetPublicMediaInfoResponseBodyMediaInfo {
	s.MediaBasicInfo = v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfo) SetMediaId(v string) *GetPublicMediaInfoResponseBodyMediaInfo {
	s.MediaId = &v
	return s
}

type GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData struct {
	// example:
	//
	// {"AuditionUrl": "http://example-bucket.cdn.domain.com/example.mp4", "AuditionCount": 3}
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// system
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData) SetData(v string) *GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData {
	s.Data = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData) SetType(v string) *GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData {
	s.Type = &v
	return s
}

type GetPublicMediaInfoResponseBodyMediaInfoFileInfoList struct {
	AudioStreamInfoList    []*GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList    `json:"AudioStreamInfoList,omitempty" xml:"AudioStreamInfoList,omitempty" type:"Repeated"`
	FileBasicInfo          *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo            `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
	SubtitleStreamInfoList []*GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList `json:"SubtitleStreamInfoList,omitempty" xml:"SubtitleStreamInfoList,omitempty" type:"Repeated"`
	VideoStreamInfoList    []*GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList    `json:"VideoStreamInfoList,omitempty" xml:"VideoStreamInfoList,omitempty" type:"Repeated"`
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoList) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoList) SetAudioStreamInfoList(v []*GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoList {
	s.AudioStreamInfoList = v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoList) SetFileBasicInfo(v *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoList {
	s.FileBasicInfo = v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoList) SetSubtitleStreamInfoList(v []*GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoList {
	s.SubtitleStreamInfoList = v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoList) SetVideoStreamInfoList(v []*GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoList {
	s.VideoStreamInfoList = v
	return s
}

type GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList struct {
	// example:
	//
	// 192.0
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// stereo
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// example:
	//
	// AAC (Advanced Audio Coding)
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// example:
	//
	// aac
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// example:
	//
	// 0x6134706d
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// example:
	//
	// mp4a
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// example:
	//
	// 1/44100
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// example:
	//
	// 16.2
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 10
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 1
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// und
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// example:
	//
	// 162
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// example:
	//
	// High
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// fltp
	SampleFmt *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	// example:
	//
	// 44100
	SampleRate *string `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
	// example:
	//
	// 0.000000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 1/44100
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetBitrate(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetChannelLayout(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.ChannelLayout = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetChannels(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Channels = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecLongName(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecName(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecTag(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecTagString(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecTimeBase(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetDuration(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetFps(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Fps = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetIndex(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetLang(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetNumFrames(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetProfile(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Profile = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetSampleFmt(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.SampleFmt = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetSampleRate(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.SampleRate = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetStartTime(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetTimebase(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Timebase = &v
	return s
}

type GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo struct {
	// example:
	//
	// 192.0
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 16.2
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// example.mp4
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// 27007
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// example:
	//
	// http://example-bucket.cdn.domain.com/example.mp4
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// mp4
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// example:
	//
	// 0
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// 0
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetBitrate(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetDuration(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileName(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileSize(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileStatus(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileType(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileUrl(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFormatName(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetHeight(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Height = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetRegion(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Region = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetWidth(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Width = &v
	return s
}

type GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList struct {
	// example:
	//
	// SubRip Text
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// example:
	//
	// srt
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// example:
	//
	// unicode
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// example:
	//
	// unicode
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// example:
	//
	// 29.97
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// example:
	//
	// 1
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 1
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// und
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// example:
	//
	// 0
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 30
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecLongName(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecName(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecTag(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecTagString(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecTimeBase(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetDuration(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetIndex(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetLang(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetStartTime(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetTimebase(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.Timebase = &v
	return s
}

type GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList struct {
	// example:
	//
	// 24.0
	AvgFPS *string `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	// example:
	//
	// 1001.594
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// example:
	//
	// h264
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// example:
	//
	// 0x0000
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// example:
	//
	// [0][0][0][0]
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// example:
	//
	// 1/48
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// example:
	//
	// 0:1
	Dar *string `json:"Dar,omitempty" xml:"Dar,omitempty"`
	// example:
	//
	// 216.206706
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 24.0
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 2
	HasBFrames *string `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	// example:
	//
	// 540
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 0
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// und
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// example:
	//
	// 30
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// example:
	//
	// 5184
	NbFrames *string `json:"Nb_frames,omitempty" xml:"Nb_frames,omitempty"`
	// example:
	//
	// 5184
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// example:
	//
	// High
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// 0
	Rotate *string `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	// example:
	//
	// 0:1
	Sar *string `json:"Sar,omitempty" xml:"Sar,omitempty"`
	// example:
	//
	// 0.081706
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 1/12288
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	// example:
	//
	// 960
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetAvgFPS(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.AvgFPS = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetBitrate(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecLongName(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecName(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecTag(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecTagString(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecTimeBase(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetDar(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Dar = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetDuration(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetFps(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Fps = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetHasBFrames(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.HasBFrames = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetHeight(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Height = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetIndex(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetLang(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetLevel(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Level = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetNbFrames(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.NbFrames = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetNumFrames(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetPixFmt(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.PixFmt = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetProfile(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Profile = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetRotate(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Rotate = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetSar(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Sar = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetStartTime(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetTimebase(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Timebase = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetWidth(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Width = &v
	return s
}

type GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo struct {
	// example:
	//
	// general
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// example:
	//
	// category
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// example:
	//
	// 2020-12-26T04:11:08Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2020-12-26T04:11:15Z
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	// example:
	//
	// description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// MediaId
	//
	// example:
	//
	// icepublic-****14e501538aeef0a3140176f6****
	MediaId   *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// 2020-12-26T04:11:10Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// oss
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// [{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]
	SpriteImages *string `json:"SpriteImages,omitempty" xml:"SpriteImages,omitempty"`
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// title
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// {"key":"value"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetBusinessType(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetCategory(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetCoverURL(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetCreateTime(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetDeletedTime(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetDescription(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetMediaId(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetMediaTags(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetMediaType(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetModifiedTime(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetSource(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetSpriteImages(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.SpriteImages = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetStatus(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetTitle(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetUserData(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.UserData = &v
	return s
}

type GetPublicMediaInfoResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPublicMediaInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPublicMediaInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponse) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponse) SetHeaders(v map[string]*string) *GetPublicMediaInfoResponse {
	s.Headers = v
	return s
}

func (s *GetPublicMediaInfoResponse) SetStatusCode(v int32) *GetPublicMediaInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPublicMediaInfoResponse) SetBody(v *GetPublicMediaInfoResponseBody) *GetPublicMediaInfoResponse {
	s.Body = v
	return s
}

type GetSmartHandleJobRequest struct {
	// The job ID.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetSmartHandleJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSmartHandleJobRequest) GoString() string {
	return s.String()
}

func (s *GetSmartHandleJobRequest) SetJobId(v string) *GetSmartHandleJobRequest {
	s.JobId = &v
	return s
}

type GetSmartHandleJobResponseBody struct {
	// The job ID.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The job results.
	JobResult *GetSmartHandleJobResponseBodyJobResult `json:"JobResult,omitempty" xml:"JobResult,omitempty" type:"Struct"`
	// The job results.
	//
	// example:
	//
	// {}
	Output *string `json:"Output,omitempty" xml:"Output,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the intelligent job.
	SmartJobInfo *GetSmartHandleJobResponseBodySmartJobInfo `json:"SmartJobInfo,omitempty" xml:"SmartJobInfo,omitempty" type:"Struct"`
	// The job state.
	//
	// Valid values:
	//
	// 	- Finished
	//
	// 	- Failed
	//
	// 	- Executing
	//
	// 	- Created
	//
	// example:
	//
	// Finished
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The user-defined data in the JSON format.
	//
	// example:
	//
	// {"user":"data"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetSmartHandleJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSmartHandleJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetSmartHandleJobResponseBody) SetJobId(v string) *GetSmartHandleJobResponseBody {
	s.JobId = &v
	return s
}

func (s *GetSmartHandleJobResponseBody) SetJobResult(v *GetSmartHandleJobResponseBodyJobResult) *GetSmartHandleJobResponseBody {
	s.JobResult = v
	return s
}

func (s *GetSmartHandleJobResponseBody) SetOutput(v string) *GetSmartHandleJobResponseBody {
	s.Output = &v
	return s
}

func (s *GetSmartHandleJobResponseBody) SetRequestId(v string) *GetSmartHandleJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSmartHandleJobResponseBody) SetSmartJobInfo(v *GetSmartHandleJobResponseBodySmartJobInfo) *GetSmartHandleJobResponseBody {
	s.SmartJobInfo = v
	return s
}

func (s *GetSmartHandleJobResponseBody) SetState(v string) *GetSmartHandleJobResponseBody {
	s.State = &v
	return s
}

func (s *GetSmartHandleJobResponseBody) SetUserData(v string) *GetSmartHandleJobResponseBody {
	s.UserData = &v
	return s
}

type GetSmartHandleJobResponseBodyJobResult struct {
	// The AI analysis result.
	//
	// example:
	//
	// Intelligent segmentation or tagging information
	AiResult *string `json:"AiResult,omitempty" xml:"AiResult,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	MediaId  *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	MediaUrl *string `json:"MediaUrl,omitempty" xml:"MediaUrl,omitempty"`
	// The token usage. This parameter is returned only for keyword-based text generation jobs.
	//
	// example:
	//
	// {"total_tokens":100}
	Usage *string `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s GetSmartHandleJobResponseBodyJobResult) String() string {
	return tea.Prettify(s)
}

func (s GetSmartHandleJobResponseBodyJobResult) GoString() string {
	return s.String()
}

func (s *GetSmartHandleJobResponseBodyJobResult) SetAiResult(v string) *GetSmartHandleJobResponseBodyJobResult {
	s.AiResult = &v
	return s
}

func (s *GetSmartHandleJobResponseBodyJobResult) SetMediaId(v string) *GetSmartHandleJobResponseBodyJobResult {
	s.MediaId = &v
	return s
}

func (s *GetSmartHandleJobResponseBodyJobResult) SetMediaUrl(v string) *GetSmartHandleJobResponseBodyJobResult {
	s.MediaUrl = &v
	return s
}

func (s *GetSmartHandleJobResponseBodyJobResult) SetUsage(v string) *GetSmartHandleJobResponseBodyJobResult {
	s.Usage = &v
	return s
}

type GetSmartHandleJobResponseBodySmartJobInfo struct {
	// The time when the job was created.
	//
	// example:
	//
	// 2020-12-26T04:11:10Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The job description.
	//
	// example:
	//
	// 测试描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The input configurations.
	InputConfig *GetSmartHandleJobResponseBodySmartJobInfoInputConfig `json:"InputConfig,omitempty" xml:"InputConfig,omitempty" type:"Struct"`
	// The job type.
	//
	// example:
	//
	// ASR
	JobType *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	// The time when the job was last modified.
	//
	// example:
	//
	// 2020-12-26T04:11:10Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The output configurations.
	OutputConfig *GetSmartHandleJobResponseBodySmartJobInfoOutputConfig `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty" type:"Struct"`
	// The job title.
	//
	// example:
	//
	// 测试标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// The user ID.
	//
	// example:
	//
	// 1974526429******
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetSmartHandleJobResponseBodySmartJobInfo) String() string {
	return tea.Prettify(s)
}

func (s GetSmartHandleJobResponseBodySmartJobInfo) GoString() string {
	return s.String()
}

func (s *GetSmartHandleJobResponseBodySmartJobInfo) SetCreateTime(v string) *GetSmartHandleJobResponseBodySmartJobInfo {
	s.CreateTime = &v
	return s
}

func (s *GetSmartHandleJobResponseBodySmartJobInfo) SetDescription(v string) *GetSmartHandleJobResponseBodySmartJobInfo {
	s.Description = &v
	return s
}

func (s *GetSmartHandleJobResponseBodySmartJobInfo) SetInputConfig(v *GetSmartHandleJobResponseBodySmartJobInfoInputConfig) *GetSmartHandleJobResponseBodySmartJobInfo {
	s.InputConfig = v
	return s
}

func (s *GetSmartHandleJobResponseBodySmartJobInfo) SetJobType(v string) *GetSmartHandleJobResponseBodySmartJobInfo {
	s.JobType = &v
	return s
}

func (s *GetSmartHandleJobResponseBodySmartJobInfo) SetModifiedTime(v string) *GetSmartHandleJobResponseBodySmartJobInfo {
	s.ModifiedTime = &v
	return s
}

func (s *GetSmartHandleJobResponseBodySmartJobInfo) SetOutputConfig(v *GetSmartHandleJobResponseBodySmartJobInfoOutputConfig) *GetSmartHandleJobResponseBodySmartJobInfo {
	s.OutputConfig = v
	return s
}

func (s *GetSmartHandleJobResponseBodySmartJobInfo) SetTitle(v string) *GetSmartHandleJobResponseBodySmartJobInfo {
	s.Title = &v
	return s
}

func (s *GetSmartHandleJobResponseBodySmartJobInfo) SetUserId(v string) *GetSmartHandleJobResponseBodySmartJobInfo {
	s.UserId = &v
	return s
}

type GetSmartHandleJobResponseBodySmartJobInfoInputConfig struct {
	// The OSS URL or the ID of the material in the media asset library.
	//
	// example:
	//
	// oss://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4 或 ******11-DB8D-4A9A-875B-275798******
	InputFile *string `json:"InputFile,omitempty" xml:"InputFile,omitempty"`
}

func (s GetSmartHandleJobResponseBodySmartJobInfoInputConfig) String() string {
	return tea.Prettify(s)
}

func (s GetSmartHandleJobResponseBodySmartJobInfoInputConfig) GoString() string {
	return s.String()
}

func (s *GetSmartHandleJobResponseBodySmartJobInfoInputConfig) SetInputFile(v string) *GetSmartHandleJobResponseBodySmartJobInfoInputConfig {
	s.InputFile = &v
	return s
}

type GetSmartHandleJobResponseBodySmartJobInfoOutputConfig struct {
	// The OSS bucket.
	//
	// example:
	//
	// test-bucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// The OSS object.
	//
	// example:
	//
	// test-object
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s GetSmartHandleJobResponseBodySmartJobInfoOutputConfig) String() string {
	return tea.Prettify(s)
}

func (s GetSmartHandleJobResponseBodySmartJobInfoOutputConfig) GoString() string {
	return s.String()
}

func (s *GetSmartHandleJobResponseBodySmartJobInfoOutputConfig) SetBucket(v string) *GetSmartHandleJobResponseBodySmartJobInfoOutputConfig {
	s.Bucket = &v
	return s
}

func (s *GetSmartHandleJobResponseBodySmartJobInfoOutputConfig) SetObject(v string) *GetSmartHandleJobResponseBodySmartJobInfoOutputConfig {
	s.Object = &v
	return s
}

type GetSmartHandleJobResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSmartHandleJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSmartHandleJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSmartHandleJobResponse) GoString() string {
	return s.String()
}

func (s *GetSmartHandleJobResponse) SetHeaders(v map[string]*string) *GetSmartHandleJobResponse {
	s.Headers = v
	return s
}

func (s *GetSmartHandleJobResponse) SetStatusCode(v int32) *GetSmartHandleJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSmartHandleJobResponse) SetBody(v *GetSmartHandleJobResponseBody) *GetSmartHandleJobResponse {
	s.Body = v
	return s
}

type GetSnapshotJobRequest struct {
	// The ID of the snapshot job.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****d80e4e4044975745c14b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetSnapshotJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotJobRequest) GoString() string {
	return s.String()
}

func (s *GetSnapshotJobRequest) SetJobId(v string) *GetSnapshotJobRequest {
	s.JobId = &v
	return s
}

type GetSnapshotJobResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the snapshot job.
	SnapshotJob *GetSnapshotJobResponseBodySnapshotJob `json:"SnapshotJob,omitempty" xml:"SnapshotJob,omitempty" type:"Struct"`
}

func (s GetSnapshotJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetSnapshotJobResponseBody) SetRequestId(v string) *GetSnapshotJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSnapshotJobResponseBody) SetSnapshotJob(v *GetSnapshotJobResponseBodySnapshotJob) *GetSnapshotJobResponseBody {
	s.SnapshotJob = v
	return s
}

type GetSnapshotJobResponseBodySnapshotJob struct {
	// Indicates whether the snapshots were captured in asynchronous mode. Default value: true.
	//
	// example:
	//
	// true
	Async *bool `json:"Async,omitempty" xml:"Async,omitempty"`
	// Error codes
	//
	// example:
	//
	// ResourceNotFound
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The number of snapshots.
	//
	// example:
	//
	// 8
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The time when the job was created.
	//
	// example:
	//
	// 2022-07-12T16:17:54Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the job was complete.
	//
	// example:
	//
	// 2022-07-12T16:30:54Z
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The input of the job.
	Input *GetSnapshotJobResponseBodySnapshotJobInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// The job ID.
	//
	// example:
	//
	// ****d80e4e4044975745c14b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The error message that is returned.
	//
	// example:
	//
	// The specified resource for "Pipeline" could not be found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The time when the job was last modified.
	//
	// example:
	//
	// 2022-07-12T16:30:54Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The name of the job.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output of the job.
	Output *GetSnapshotJobResponseBodySnapshotJobOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// The ID of the MPS queue to which the job was submitted.
	//
	// example:
	//
	// ****d80e4e4044975745c14b****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The state of the job.
	//
	// Valid values:
	//
	// 	- Init: The job is submitted.
	//
	// 	- Success: The job is successful.
	//
	// 	- Fail: The job failed.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The time when the job was submitted.
	//
	// example:
	//
	// 2022-07-12T16:17:54Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// The snapshot template configuration.
	//
	// example:
	//
	// {"Type":"Normal","FrameType":"normal","Time":0,"Count":10}
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// The template ID.
	//
	// example:
	//
	// ****d80e4e4044975745c14b****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The request trigger source.
	//
	// Valid values:
	//
	// 	- Console
	//
	// 	- Workflow
	//
	// 	- API
	//
	// example:
	//
	// API
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// Snapshot types
	//
	// Valid values:
	//
	// 	- WebVtt
	//
	// 	- Sprite
	//
	// 	- Normal
	//
	// example:
	//
	// Sprite
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The user-defined parameters.
	//
	// example:
	//
	// {"test parameter": "test value"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetSnapshotJobResponseBodySnapshotJob) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotJobResponseBodySnapshotJob) GoString() string {
	return s.String()
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetAsync(v bool) *GetSnapshotJobResponseBodySnapshotJob {
	s.Async = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetCode(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.Code = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetCount(v int32) *GetSnapshotJobResponseBodySnapshotJob {
	s.Count = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetCreateTime(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.CreateTime = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetFinishTime(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.FinishTime = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetInput(v *GetSnapshotJobResponseBodySnapshotJobInput) *GetSnapshotJobResponseBodySnapshotJob {
	s.Input = v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetJobId(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.JobId = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetMessage(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.Message = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetModifiedTime(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.ModifiedTime = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetName(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.Name = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetOutput(v *GetSnapshotJobResponseBodySnapshotJobOutput) *GetSnapshotJobResponseBodySnapshotJob {
	s.Output = v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetPipelineId(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.PipelineId = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetStatus(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.Status = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetSubmitTime(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.SubmitTime = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetTemplateConfig(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.TemplateConfig = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetTemplateId(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.TemplateId = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetTriggerSource(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.TriggerSource = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetType(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.Type = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetUserData(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.UserData = &v
	return s
}

type GetSnapshotJobResponseBodySnapshotJobInput struct {
	// The input file. If Type is set to OSS, the URL of an OSS object is returned. If Type is set to Media, the ID of a media asset is returned. The URL of an OSS object can be in one of the following formats:
	//
	// 1.  oss://bucket/object
	//
	// 2.  http(s)://bucket.oss-[RegionId].aliyuncs.com/object In the URL, bucket specifies an OSS bucket that resides in the same region as the job, and object specifies the object URL in OSS.
	//
	// example:
	//
	// oss://test-bucket/object.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The three key elements of OSS.
	OssFile *GetSnapshotJobResponseBodySnapshotJobInputOssFile `json:"OssFile,omitempty" xml:"OssFile,omitempty" type:"Struct"`
	// The type of the input file. Valid values:
	//
	// 1.  OSS: an Object Storage Service (OSS) object.
	//
	// 2.  Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetSnapshotJobResponseBodySnapshotJobInput) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotJobResponseBodySnapshotJobInput) GoString() string {
	return s.String()
}

func (s *GetSnapshotJobResponseBodySnapshotJobInput) SetMedia(v string) *GetSnapshotJobResponseBodySnapshotJobInput {
	s.Media = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJobInput) SetOssFile(v *GetSnapshotJobResponseBodySnapshotJobInputOssFile) *GetSnapshotJobResponseBodySnapshotJobInput {
	s.OssFile = v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJobInput) SetType(v string) *GetSnapshotJobResponseBodySnapshotJobInput {
	s.Type = &v
	return s
}

type GetSnapshotJobResponseBodySnapshotJobInputOssFile struct {
	// The OSS bucket.
	//
	// example:
	//
	// test-bucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// The OSS location.
	//
	// example:
	//
	// oss-cn-shanghai
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The OSS object.
	//
	// example:
	//
	// object.mp4
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s GetSnapshotJobResponseBodySnapshotJobInputOssFile) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotJobResponseBodySnapshotJobInputOssFile) GoString() string {
	return s.String()
}

func (s *GetSnapshotJobResponseBodySnapshotJobInputOssFile) SetBucket(v string) *GetSnapshotJobResponseBodySnapshotJobInputOssFile {
	s.Bucket = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJobInputOssFile) SetLocation(v string) *GetSnapshotJobResponseBodySnapshotJobInputOssFile {
	s.Location = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJobInputOssFile) SetObject(v string) *GetSnapshotJobResponseBodySnapshotJobInputOssFile {
	s.Object = &v
	return s
}

type GetSnapshotJobResponseBodySnapshotJobOutput struct {
	// The output file. If Type is set to OSS, the URL of an OSS object is returned. If Type is set to Media, the ID of a media asset is returned. The URL of an OSS object can be in one of the following formats:
	//
	// 1.  oss://bucket/object
	//
	// 2.  http(s)://bucket.oss-[RegionId].aliyuncs.com/object
	//
	// In the URL, bucket specifies an OSS bucket that resides in the same region as the job, and object specifies the object URL in OSS. If multiple static snapshots were captured, the object must contain the "{Count}" placeholder. In the case of a sprite, the object must contain the "{TileCount}" placeholder. The suffix of the WebVTT snapshot objects must be ".vtt".
	//
	// example:
	//
	// http://test-bucket.oss-cn-shanghai.aliyuncs.com/output-{Count}.jpg
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The three key elements of OSS.
	OssFile *GetSnapshotJobResponseBodySnapshotJobOutputOssFile `json:"OssFile,omitempty" xml:"OssFile,omitempty" type:"Struct"`
	// The type of the output file. Valid values:
	//
	// 1.  OSS: an OSS object.
	//
	// 2.  Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetSnapshotJobResponseBodySnapshotJobOutput) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotJobResponseBodySnapshotJobOutput) GoString() string {
	return s.String()
}

func (s *GetSnapshotJobResponseBodySnapshotJobOutput) SetMedia(v string) *GetSnapshotJobResponseBodySnapshotJobOutput {
	s.Media = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJobOutput) SetOssFile(v *GetSnapshotJobResponseBodySnapshotJobOutputOssFile) *GetSnapshotJobResponseBodySnapshotJobOutput {
	s.OssFile = v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJobOutput) SetType(v string) *GetSnapshotJobResponseBodySnapshotJobOutput {
	s.Type = &v
	return s
}

type GetSnapshotJobResponseBodySnapshotJobOutputOssFile struct {
	// The OSS bucket.
	//
	// example:
	//
	// test-bucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// The OSS location.
	//
	// example:
	//
	// oss-cn-shanghai
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The OSS object.
	//
	// example:
	//
	// output-{Count}.jpg
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s GetSnapshotJobResponseBodySnapshotJobOutputOssFile) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotJobResponseBodySnapshotJobOutputOssFile) GoString() string {
	return s.String()
}

func (s *GetSnapshotJobResponseBodySnapshotJobOutputOssFile) SetBucket(v string) *GetSnapshotJobResponseBodySnapshotJobOutputOssFile {
	s.Bucket = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJobOutputOssFile) SetLocation(v string) *GetSnapshotJobResponseBodySnapshotJobOutputOssFile {
	s.Location = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJobOutputOssFile) SetObject(v string) *GetSnapshotJobResponseBodySnapshotJobOutputOssFile {
	s.Object = &v
	return s
}

type GetSnapshotJobResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSnapshotJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSnapshotJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotJobResponse) GoString() string {
	return s.String()
}

func (s *GetSnapshotJobResponse) SetHeaders(v map[string]*string) *GetSnapshotJobResponse {
	s.Headers = v
	return s
}

func (s *GetSnapshotJobResponse) SetStatusCode(v int32) *GetSnapshotJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSnapshotJobResponse) SetBody(v *GetSnapshotJobResponseBody) *GetSnapshotJobResponse {
	s.Body = v
	return s
}

type GetSnapshotUrlsRequest struct {
	// The job ID.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The order that you use to sort the query results. Valid values: Asc and Desc.
	//
	// - Asc
	//
	// - Desc
	//
	// example:
	//
	// Asc
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values: 1 to 30. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The authentication timeout period. Unit: seconds Default value: 3600. Maximum value: 129600 (36 hours).
	//
	// example:
	//
	// 3600
	Timeout *int64 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s GetSnapshotUrlsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotUrlsRequest) GoString() string {
	return s.String()
}

func (s *GetSnapshotUrlsRequest) SetJobId(v string) *GetSnapshotUrlsRequest {
	s.JobId = &v
	return s
}

func (s *GetSnapshotUrlsRequest) SetOrderBy(v string) *GetSnapshotUrlsRequest {
	s.OrderBy = &v
	return s
}

func (s *GetSnapshotUrlsRequest) SetPageNumber(v int32) *GetSnapshotUrlsRequest {
	s.PageNumber = &v
	return s
}

func (s *GetSnapshotUrlsRequest) SetPageSize(v int32) *GetSnapshotUrlsRequest {
	s.PageSize = &v
	return s
}

func (s *GetSnapshotUrlsRequest) SetTimeout(v int64) *GetSnapshotUrlsRequest {
	s.Timeout = &v
	return s
}

type GetSnapshotUrlsResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The list of snapshot URLs.
	SnapshotUrls []*string `json:"SnapshotUrls,omitempty" xml:"SnapshotUrls,omitempty" type:"Repeated"`
	// The total number of snapshots.
	//
	// example:
	//
	// 30
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
	// The URL of the WebVTT file.
	//
	// example:
	//
	// http://test-bucket.oss-cn-shanghai.aliyuncs.com/ouoput.vtt
	WebVTTUrl *string `json:"WebVTTUrl,omitempty" xml:"WebVTTUrl,omitempty"`
}

func (s GetSnapshotUrlsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotUrlsResponseBody) GoString() string {
	return s.String()
}

func (s *GetSnapshotUrlsResponseBody) SetRequestId(v string) *GetSnapshotUrlsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSnapshotUrlsResponseBody) SetSnapshotUrls(v []*string) *GetSnapshotUrlsResponseBody {
	s.SnapshotUrls = v
	return s
}

func (s *GetSnapshotUrlsResponseBody) SetTotal(v int32) *GetSnapshotUrlsResponseBody {
	s.Total = &v
	return s
}

func (s *GetSnapshotUrlsResponseBody) SetWebVTTUrl(v string) *GetSnapshotUrlsResponseBody {
	s.WebVTTUrl = &v
	return s
}

type GetSnapshotUrlsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSnapshotUrlsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSnapshotUrlsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotUrlsResponse) GoString() string {
	return s.String()
}

func (s *GetSnapshotUrlsResponse) SetHeaders(v map[string]*string) *GetSnapshotUrlsResponse {
	s.Headers = v
	return s
}

func (s *GetSnapshotUrlsResponse) SetStatusCode(v int32) *GetSnapshotUrlsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSnapshotUrlsResponse) SetBody(v *GetSnapshotUrlsResponseBody) *GetSnapshotUrlsResponse {
	s.Body = v
	return s
}

type GetSourceRequest struct {
	// The source location.
	//
	// This parameter is required.
	//
	// example:
	//
	// MySourceLocation
	SourceLocationName *string `json:"SourceLocationName,omitempty" xml:"SourceLocationName,omitempty"`
	// The name of the source.
	//
	// This parameter is required.
	//
	// example:
	//
	// MyVodSource
	SourceName *string `json:"SourceName,omitempty" xml:"SourceName,omitempty"`
	// The source type. Valid values: vodSource and liveSource.
	//
	// This parameter is required.
	//
	// example:
	//
	// vodSource
	SourceType *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
}

func (s GetSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSourceRequest) GoString() string {
	return s.String()
}

func (s *GetSourceRequest) SetSourceLocationName(v string) *GetSourceRequest {
	s.SourceLocationName = &v
	return s
}

func (s *GetSourceRequest) SetSourceName(v string) *GetSourceRequest {
	s.SourceName = &v
	return s
}

func (s *GetSourceRequest) SetSourceType(v string) *GetSourceRequest {
	s.SourceType = &v
	return s
}

type GetSourceResponseBody struct {
	// **Request ID**
	//
	// example:
	//
	// xxx-xxxx-xxxxx-xxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The source information.
	Source *ChannelAssemblySource `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s GetSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSourceResponseBody) GoString() string {
	return s.String()
}

func (s *GetSourceResponseBody) SetRequestId(v string) *GetSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSourceResponseBody) SetSource(v *ChannelAssemblySource) *GetSourceResponseBody {
	s.Source = v
	return s
}

type GetSourceResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSourceResponse) GoString() string {
	return s.String()
}

func (s *GetSourceResponse) SetHeaders(v map[string]*string) *GetSourceResponse {
	s.Headers = v
	return s
}

func (s *GetSourceResponse) SetStatusCode(v int32) *GetSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSourceResponse) SetBody(v *GetSourceResponseBody) *GetSourceResponse {
	s.Body = v
	return s
}

type GetSourceLocationRequest struct {
	// The name of the source location.
	//
	// This parameter is required.
	//
	// example:
	//
	// MySourceLocation
	SourceLocationName *string `json:"SourceLocationName,omitempty" xml:"SourceLocationName,omitempty"`
}

func (s GetSourceLocationRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSourceLocationRequest) GoString() string {
	return s.String()
}

func (s *GetSourceLocationRequest) SetSourceLocationName(v string) *GetSourceLocationRequest {
	s.SourceLocationName = &v
	return s
}

type GetSourceLocationResponseBody struct {
	// **Request ID**
	//
	// example:
	//
	// xxx-xxxx-xxxxx-xxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The source location information.
	SourceLocation *ChannelAssemblySourceLocation `json:"SourceLocation,omitempty" xml:"SourceLocation,omitempty"`
}

func (s GetSourceLocationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSourceLocationResponseBody) GoString() string {
	return s.String()
}

func (s *GetSourceLocationResponseBody) SetRequestId(v string) *GetSourceLocationResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSourceLocationResponseBody) SetSourceLocation(v *ChannelAssemblySourceLocation) *GetSourceLocationResponseBody {
	s.SourceLocation = v
	return s
}

type GetSourceLocationResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSourceLocationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSourceLocationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSourceLocationResponse) GoString() string {
	return s.String()
}

func (s *GetSourceLocationResponse) SetHeaders(v map[string]*string) *GetSourceLocationResponse {
	s.Headers = v
	return s
}

func (s *GetSourceLocationResponse) SetStatusCode(v int32) *GetSourceLocationResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSourceLocationResponse) SetBody(v *GetSourceLocationResponseBody) *GetSourceLocationResponse {
	s.Body = v
	return s
}

type GetStorageListRequest struct {
	// example:
	//
	// app-****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// vod_oss_bucket
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s GetStorageListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetStorageListRequest) GoString() string {
	return s.String()
}

func (s *GetStorageListRequest) SetAppId(v string) *GetStorageListRequest {
	s.AppId = &v
	return s
}

func (s *GetStorageListRequest) SetStatus(v string) *GetStorageListRequest {
	s.Status = &v
	return s
}

func (s *GetStorageListRequest) SetStorageType(v string) *GetStorageListRequest {
	s.StorageType = &v
	return s
}

type GetStorageListResponseBody struct {
	// Id of the request
	//
	// example:
	//
	// ******73-8B78-5D86-A50C-49B96C******
	RequestId       *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StorageInfoList []*GetStorageListResponseBodyStorageInfoList `json:"StorageInfoList,omitempty" xml:"StorageInfoList,omitempty" type:"Repeated"`
}

func (s GetStorageListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetStorageListResponseBody) GoString() string {
	return s.String()
}

func (s *GetStorageListResponseBody) SetRequestId(v string) *GetStorageListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetStorageListResponseBody) SetStorageInfoList(v []*GetStorageListResponseBodyStorageInfoList) *GetStorageListResponseBody {
	s.StorageInfoList = v
	return s
}

type GetStorageListResponseBodyStorageInfoList struct {
	// example:
	//
	// app-****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// example:
	//
	// 2024-06-06T01:55:07Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// example:
	//
	// true
	DefaultStorage *bool `json:"DefaultStorage,omitempty" xml:"DefaultStorage,omitempty"`
	// example:
	//
	// false
	EditingTempFileStorage *bool `json:"EditingTempFileStorage,omitempty" xml:"EditingTempFileStorage,omitempty"`
	// example:
	//
	// 2024-06-06T03:07:07Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// your-path/
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// your-bucket
	StorageLocation *string `json:"StorageLocation,omitempty" xml:"StorageLocation,omitempty"`
	// example:
	//
	// vod_oss_bucket
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s GetStorageListResponseBodyStorageInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetStorageListResponseBodyStorageInfoList) GoString() string {
	return s.String()
}

func (s *GetStorageListResponseBodyStorageInfoList) SetAppId(v string) *GetStorageListResponseBodyStorageInfoList {
	s.AppId = &v
	return s
}

func (s *GetStorageListResponseBodyStorageInfoList) SetCreationTime(v string) *GetStorageListResponseBodyStorageInfoList {
	s.CreationTime = &v
	return s
}

func (s *GetStorageListResponseBodyStorageInfoList) SetDefaultStorage(v bool) *GetStorageListResponseBodyStorageInfoList {
	s.DefaultStorage = &v
	return s
}

func (s *GetStorageListResponseBodyStorageInfoList) SetEditingTempFileStorage(v bool) *GetStorageListResponseBodyStorageInfoList {
	s.EditingTempFileStorage = &v
	return s
}

func (s *GetStorageListResponseBodyStorageInfoList) SetModifiedTime(v string) *GetStorageListResponseBodyStorageInfoList {
	s.ModifiedTime = &v
	return s
}

func (s *GetStorageListResponseBodyStorageInfoList) SetPath(v string) *GetStorageListResponseBodyStorageInfoList {
	s.Path = &v
	return s
}

func (s *GetStorageListResponseBodyStorageInfoList) SetStatus(v string) *GetStorageListResponseBodyStorageInfoList {
	s.Status = &v
	return s
}

func (s *GetStorageListResponseBodyStorageInfoList) SetStorageLocation(v string) *GetStorageListResponseBodyStorageInfoList {
	s.StorageLocation = &v
	return s
}

func (s *GetStorageListResponseBodyStorageInfoList) SetStorageType(v string) *GetStorageListResponseBodyStorageInfoList {
	s.StorageType = &v
	return s
}

type GetStorageListResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetStorageListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetStorageListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetStorageListResponse) GoString() string {
	return s.String()
}

func (s *GetStorageListResponse) SetHeaders(v map[string]*string) *GetStorageListResponse {
	s.Headers = v
	return s
}

func (s *GetStorageListResponse) SetStatusCode(v int32) *GetStorageListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetStorageListResponse) SetBody(v *GetStorageListResponseBody) *GetStorageListResponse {
	s.Body = v
	return s
}

type GetSystemTemplateRequest struct {
	// The template ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// S00000001-100060
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetSystemTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSystemTemplateRequest) GoString() string {
	return s.String()
}

func (s *GetSystemTemplateRequest) SetTemplateId(v string) *GetSystemTemplateRequest {
	s.TemplateId = &v
	return s
}

type GetSystemTemplateResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The template information.
	SystemTemplate *GetSystemTemplateResponseBodySystemTemplate `json:"SystemTemplate,omitempty" xml:"SystemTemplate,omitempty" type:"Struct"`
}

func (s GetSystemTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSystemTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *GetSystemTemplateResponseBody) SetRequestId(v string) *GetSystemTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSystemTemplateResponseBody) SetSystemTemplate(v *GetSystemTemplateResponseBodySystemTemplate) *GetSystemTemplateResponseBody {
	s.SystemTemplate = v
	return s
}

type GetSystemTemplateResponseBodySystemTemplate struct {
	// The template state.
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The subtype ID of the template.
	//
	// example:
	//
	// 1
	Subtype *int32 `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// The subtype name of the template.
	//
	// example:
	//
	// Normal
	SubtypeName *string `json:"SubtypeName,omitempty" xml:"SubtypeName,omitempty"`
	// The template parameters.
	//
	// example:
	//
	// {"Container":{"Format":"m3u8"},"TransConfig":{"TransMode":"onepass"},"Video":{"Codec":"H.264","Maxrate":8000,"Preset":"medium","PixFmt":"yuv420p","Width":2048,"Bitrate":3500},"Audio":{"Codec":"aac","Bitrate":160,"Samplerate":44100,"Channels":2}}
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// The template ID.
	//
	// example:
	//
	// S00000001-100060
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The template name.
	//
	// example:
	//
	// M3U8-2K
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// The type ID of the template.
	//
	// example:
	//
	// 1
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
	// The type name of the template.
	//
	// example:
	//
	// TranscodeTemplate
	TypeName *string `json:"TypeName,omitempty" xml:"TypeName,omitempty"`
}

func (s GetSystemTemplateResponseBodySystemTemplate) String() string {
	return tea.Prettify(s)
}

func (s GetSystemTemplateResponseBodySystemTemplate) GoString() string {
	return s.String()
}

func (s *GetSystemTemplateResponseBodySystemTemplate) SetStatus(v string) *GetSystemTemplateResponseBodySystemTemplate {
	s.Status = &v
	return s
}

func (s *GetSystemTemplateResponseBodySystemTemplate) SetSubtype(v int32) *GetSystemTemplateResponseBodySystemTemplate {
	s.Subtype = &v
	return s
}

func (s *GetSystemTemplateResponseBodySystemTemplate) SetSubtypeName(v string) *GetSystemTemplateResponseBodySystemTemplate {
	s.SubtypeName = &v
	return s
}

func (s *GetSystemTemplateResponseBodySystemTemplate) SetTemplateConfig(v string) *GetSystemTemplateResponseBodySystemTemplate {
	s.TemplateConfig = &v
	return s
}

func (s *GetSystemTemplateResponseBodySystemTemplate) SetTemplateId(v string) *GetSystemTemplateResponseBodySystemTemplate {
	s.TemplateId = &v
	return s
}

func (s *GetSystemTemplateResponseBodySystemTemplate) SetTemplateName(v string) *GetSystemTemplateResponseBodySystemTemplate {
	s.TemplateName = &v
	return s
}

func (s *GetSystemTemplateResponseBodySystemTemplate) SetType(v int32) *GetSystemTemplateResponseBodySystemTemplate {
	s.Type = &v
	return s
}

func (s *GetSystemTemplateResponseBodySystemTemplate) SetTypeName(v string) *GetSystemTemplateResponseBodySystemTemplate {
	s.TypeName = &v
	return s
}

type GetSystemTemplateResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSystemTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSystemTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSystemTemplateResponse) GoString() string {
	return s.String()
}

func (s *GetSystemTemplateResponse) SetHeaders(v map[string]*string) *GetSystemTemplateResponse {
	s.Headers = v
	return s
}

func (s *GetSystemTemplateResponse) SetStatusCode(v int32) *GetSystemTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSystemTemplateResponse) SetBody(v *GetSystemTemplateResponseBody) *GetSystemTemplateResponse {
	s.Body = v
	return s
}

type GetTemplateRequest struct {
	// Specifies whether to return the information about the associated materials. Default value: 0. Valid values: 0 and 1. A value of 1 specifies that the information about the associated materials is returned. This parameter is valid only for regular templates.
	//
	// example:
	//
	// 0
	RelatedMediaidFlag *string `json:"RelatedMediaidFlag,omitempty" xml:"RelatedMediaidFlag,omitempty"`
	// The template ID.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateRequest) GoString() string {
	return s.String()
}

func (s *GetTemplateRequest) SetRelatedMediaidFlag(v string) *GetTemplateRequest {
	s.RelatedMediaidFlag = &v
	return s
}

func (s *GetTemplateRequest) SetTemplateId(v string) *GetTemplateRequest {
	s.TemplateId = &v
	return s
}

type GetTemplateResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The template information.
	Template *GetTemplateResponseBodyTemplate `json:"Template,omitempty" xml:"Template,omitempty" type:"Struct"`
}

func (s GetTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *GetTemplateResponseBody) SetRequestId(v string) *GetTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTemplateResponseBody) SetTemplate(v *GetTemplateResponseBodyTemplate) *GetTemplateResponseBody {
	s.Template = v
	return s
}

type GetTemplateResponseBodyTemplate struct {
	// The clip parameters for submitting a video production job. You can replace mediaId and text with real values to submit a job. References:
	//
	// 	- [Create and use a regular template](https://help.aliyun.com/document_detail/445399.html)
	//
	// 	- [Create and use advanced templates](https://help.aliyun.com/document_detail/445389.html)
	//
	// example:
	//
	// {"Media1":"mediaId","Text1":"text"}
	ClipsParam *string `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	// The template configurations.
	//
	// 	- For more information about the configurations of a regular template, see [Config object of a regular template](https://help.aliyun.com/document_detail/456193.html).
	//
	// 	- For more information about the configurations of an advanced template, see [Create and use advanced templates](https://help.aliyun.com/document_detail/445389.html).
	//
	// example:
	//
	// 参考Timeline模板配置详解
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// The thumbnail URL.
	//
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// The source from which the template was created. Valid values:
	//
	// 	- AliyunConsole
	//
	// 	- OpenAPI
	//
	// 	- WebSDK
	//
	// example:
	//
	// OpenAPI
	CreateSource *string `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	// The time when the template was created.
	//
	// example:
	//
	// 2020-12-26T04:11:10Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The source from which the template was modified. Valid values:
	//
	// 	- AliyunConsole
	//
	// 	- OpenAPI
	//
	// 	- WebSDK
	//
	// example:
	//
	// OpenAPI
	ModifiedSource *string `json:"ModifiedSource,omitempty" xml:"ModifiedSource,omitempty"`
	// The time when the template was last modified.
	//
	// example:
	//
	// 2020-12-26T04:11:10Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The template name.
	//
	// example:
	//
	// 视频添加水印模板
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The preview media asset.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	PreviewMedia *string `json:"PreviewMedia,omitempty" xml:"PreviewMedia,omitempty"`
	// The state of the preview media asset. Valid values:
	//
	// 	- Init: the initial state, which indicates that the source file is not ready.
	//
	// 	- Preparing: The source file is being prepared. For example, the file is being uploaded or edited.
	//
	// 	- PrepareFail: The source file failed to be prepared. For example, the information about the source file failed to be obtained.
	//
	// 	- Normal: The source file is ready.
	//
	// example:
	//
	// Normal
	PreviewMediaStatus *string `json:"PreviewMediaStatus,omitempty" xml:"PreviewMediaStatus,omitempty"`
	// The IDs of the materials associated with the template for use by the regular template editor.
	//
	// example:
	//
	// {"video":["******c04f1d4a06996144cc1a******"],"audio":["******c04f1d4a06996144cc1a******"],"image":["******c04f1d4a06996144cc1a******"]}
	RelatedMediaids *string `json:"RelatedMediaids,omitempty" xml:"RelatedMediaids,omitempty"`
	// The template state. Valid values:
	//
	// 	- Available
	//
	// 	- Created
	//
	// 	- Uploading
	//
	// 	- Processing
	//
	// 	- UploadFailed
	//
	// 	- ProcessFailed
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The template ID.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The template type. Valid values:
	//
	// 	- Timeline
	//
	// 	- VETemplate
	//
	// example:
	//
	// Timeline
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTemplateResponseBodyTemplate) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateResponseBodyTemplate) GoString() string {
	return s.String()
}

func (s *GetTemplateResponseBodyTemplate) SetClipsParam(v string) *GetTemplateResponseBodyTemplate {
	s.ClipsParam = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetConfig(v string) *GetTemplateResponseBodyTemplate {
	s.Config = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetCoverURL(v string) *GetTemplateResponseBodyTemplate {
	s.CoverURL = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetCreateSource(v string) *GetTemplateResponseBodyTemplate {
	s.CreateSource = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetCreationTime(v string) *GetTemplateResponseBodyTemplate {
	s.CreationTime = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetModifiedSource(v string) *GetTemplateResponseBodyTemplate {
	s.ModifiedSource = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetModifiedTime(v string) *GetTemplateResponseBodyTemplate {
	s.ModifiedTime = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetName(v string) *GetTemplateResponseBodyTemplate {
	s.Name = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetPreviewMedia(v string) *GetTemplateResponseBodyTemplate {
	s.PreviewMedia = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetPreviewMediaStatus(v string) *GetTemplateResponseBodyTemplate {
	s.PreviewMediaStatus = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetRelatedMediaids(v string) *GetTemplateResponseBodyTemplate {
	s.RelatedMediaids = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetStatus(v string) *GetTemplateResponseBodyTemplate {
	s.Status = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetTemplateId(v string) *GetTemplateResponseBodyTemplate {
	s.TemplateId = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetType(v string) *GetTemplateResponseBodyTemplate {
	s.Type = &v
	return s
}

type GetTemplateResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateResponse) GoString() string {
	return s.String()
}

func (s *GetTemplateResponse) SetHeaders(v map[string]*string) *GetTemplateResponse {
	s.Headers = v
	return s
}

func (s *GetTemplateResponse) SetStatusCode(v int32) *GetTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTemplateResponse) SetBody(v *GetTemplateResponseBody) *GetTemplateResponse {
	s.Body = v
	return s
}

type GetTemplateMaterialsRequest struct {
	// The materials that you want to query.
	//
	// example:
	//
	// ["music.mp3","config.json","assets/1.jpg"]
	FileList *string `json:"FileList,omitempty" xml:"FileList,omitempty"`
	// The template ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTemplateMaterialsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateMaterialsRequest) GoString() string {
	return s.String()
}

func (s *GetTemplateMaterialsRequest) SetFileList(v string) *GetTemplateMaterialsRequest {
	s.FileList = &v
	return s
}

func (s *GetTemplateMaterialsRequest) SetTemplateId(v string) *GetTemplateMaterialsRequest {
	s.TemplateId = &v
	return s
}

type GetTemplateMaterialsResponseBody struct {
	// The URLs of the associated materials.
	//
	// example:
	//
	// {"music.mp3":"https://bucket.oss-cn-shanghai.aliyuncs.com/music.mp3?sign=xxx","config.json":"https://bucket.oss-cn-shanghai.aliyuncs.com/config.json?sign=xxx","assets/1.jpg":"https://bucket.oss-cn-shanghai.aliyuncs.com/assets/1.jpg?sign=xxx"}
	MaterialUrls *string `json:"MaterialUrls,omitempty" xml:"MaterialUrls,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetTemplateMaterialsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateMaterialsResponseBody) GoString() string {
	return s.String()
}

func (s *GetTemplateMaterialsResponseBody) SetMaterialUrls(v string) *GetTemplateMaterialsResponseBody {
	s.MaterialUrls = &v
	return s
}

func (s *GetTemplateMaterialsResponseBody) SetRequestId(v string) *GetTemplateMaterialsResponseBody {
	s.RequestId = &v
	return s
}

type GetTemplateMaterialsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTemplateMaterialsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTemplateMaterialsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateMaterialsResponse) GoString() string {
	return s.String()
}

func (s *GetTemplateMaterialsResponse) SetHeaders(v map[string]*string) *GetTemplateMaterialsResponse {
	s.Headers = v
	return s
}

func (s *GetTemplateMaterialsResponse) SetStatusCode(v int32) *GetTemplateMaterialsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTemplateMaterialsResponse) SetBody(v *GetTemplateMaterialsResponseBody) *GetTemplateMaterialsResponse {
	s.Body = v
	return s
}

type GetTemplateParamsRequest struct {
	// The template ID.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTemplateParamsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateParamsRequest) GoString() string {
	return s.String()
}

func (s *GetTemplateParamsRequest) SetTemplateId(v string) *GetTemplateParamsRequest {
	s.TemplateId = &v
	return s
}

type GetTemplateParamsResponseBody struct {
	// The queried parameters.
	ParamList []*GetTemplateParamsResponseBodyParamList `json:"ParamList,omitempty" xml:"ParamList,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// ****2876-6263-4B75-8F2C-CD0F7FCF****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The template ID.
	//
	// example:
	//
	// ******419c8741c1b4325f035b******
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTemplateParamsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateParamsResponseBody) GoString() string {
	return s.String()
}

func (s *GetTemplateParamsResponseBody) SetParamList(v []*GetTemplateParamsResponseBodyParamList) *GetTemplateParamsResponseBody {
	s.ParamList = v
	return s
}

func (s *GetTemplateParamsResponseBody) SetRequestId(v string) *GetTemplateParamsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTemplateParamsResponseBody) SetTemplateId(v string) *GetTemplateParamsResponseBody {
	s.TemplateId = &v
	return s
}

type GetTemplateParamsResponseBodyParamList struct {
	// The original subtitle content.
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The thumbnail URL of the original material.
	CoverUrl *string `json:"CoverUrl,omitempty" xml:"CoverUrl,omitempty"`
	// The parameter name.
	//
	// example:
	//
	// video1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The URL of the original material.
	MediaUrl *string `json:"MediaUrl,omitempty" xml:"MediaUrl,omitempty"`
	// The material type.
	//
	// Valid values:
	//
	// 	- Video
	//
	// 	- Text
	//
	// 	- Image
	//
	// example:
	//
	// Image
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTemplateParamsResponseBodyParamList) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateParamsResponseBodyParamList) GoString() string {
	return s.String()
}

func (s *GetTemplateParamsResponseBodyParamList) SetContent(v string) *GetTemplateParamsResponseBodyParamList {
	s.Content = &v
	return s
}

func (s *GetTemplateParamsResponseBodyParamList) SetCoverUrl(v string) *GetTemplateParamsResponseBodyParamList {
	s.CoverUrl = &v
	return s
}

func (s *GetTemplateParamsResponseBodyParamList) SetKey(v string) *GetTemplateParamsResponseBodyParamList {
	s.Key = &v
	return s
}

func (s *GetTemplateParamsResponseBodyParamList) SetMediaUrl(v string) *GetTemplateParamsResponseBodyParamList {
	s.MediaUrl = &v
	return s
}

func (s *GetTemplateParamsResponseBodyParamList) SetType(v string) *GetTemplateParamsResponseBodyParamList {
	s.Type = &v
	return s
}

type GetTemplateParamsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTemplateParamsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTemplateParamsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateParamsResponse) GoString() string {
	return s.String()
}

func (s *GetTemplateParamsResponse) SetHeaders(v map[string]*string) *GetTemplateParamsResponse {
	s.Headers = v
	return s
}

func (s *GetTemplateParamsResponse) SetStatusCode(v int32) *GetTemplateParamsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTemplateParamsResponse) SetBody(v *GetTemplateParamsResponseBody) *GetTemplateParamsResponse {
	s.Body = v
	return s
}

type GetTranscodeJobRequest struct {
	// The job ID.
	//
	// example:
	//
	// ab4802364a2e49208c99efab82dfa8e8
	ParentJobId *string `json:"ParentJobId,omitempty" xml:"ParentJobId,omitempty"`
}

func (s GetTranscodeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobRequest) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobRequest) SetParentJobId(v string) *GetTranscodeJobRequest {
	s.ParentJobId = &v
	return s
}

type GetTranscodeJobResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 9EDC30DC-0050-5459-B788-F761B2BE359B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// TranscodeParentJobWithSubJobDTO
	TranscodeParentJob *GetTranscodeJobResponseBodyTranscodeParentJob `json:"TranscodeParentJob,omitempty" xml:"TranscodeParentJob,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBody) SetRequestId(v string) *GetTranscodeJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTranscodeJobResponseBody) SetTranscodeParentJob(v *GetTranscodeJobResponseBodyTranscodeParentJob) *GetTranscodeJobResponseBody {
	s.TranscodeParentJob = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJob struct {
	// The time when the job was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-01-12T08:49:41Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the job was complete. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-01-12T08:49:41Z
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The input group of the job. An input of a single file indicates a transcoding job. An input of multiple files indicates an audio and video stream merge job.
	InputGroup []*GetTranscodeJobResponseBodyTranscodeParentJobInputGroup `json:"InputGroup,omitempty" xml:"InputGroup,omitempty" type:"Repeated"`
	// The number of subjobs.
	//
	// example:
	//
	// 1
	JobCount *int32 `json:"JobCount,omitempty" xml:"JobCount,omitempty"`
	// The job name.
	//
	// example:
	//
	// transcode-job
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output group of the job.
	OutputGroup []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup `json:"OutputGroup,omitempty" xml:"OutputGroup,omitempty" type:"Repeated"`
	// The main job ID.
	//
	// example:
	//
	// 8b2198504dd340b7b3c9842a74fc9baa
	ParentJobId *string `json:"ParentJobId,omitempty" xml:"ParentJobId,omitempty"`
	// The completion percentage of the job.
	//
	// example:
	//
	// 0
	Percent *int32 `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The ID of the request that submitted the job.
	//
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The scheduling configuration of the job.
	ScheduleConfig *GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// The state of the job.
	//
	// 	- Success: At least one of the subjobs is successful.
	//
	// 	- Fail: All subjobs failed.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The time when the job was submitted. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-01-12T08:49:41Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// The list of subjobs.
	TranscodeJobList []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList `json:"TranscodeJobList,omitempty" xml:"TranscodeJobList,omitempty" type:"Repeated"`
	// The source of the job. Valid values:
	//
	// 	- API
	//
	// 	- WorkFlow
	//
	// 	- Console
	//
	// example:
	//
	// API
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// The user data.
	//
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJob) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJob) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetCreateTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.CreateTime = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetFinishTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.FinishTime = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetInputGroup(v []*GetTranscodeJobResponseBodyTranscodeParentJobInputGroup) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.InputGroup = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetJobCount(v int32) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.JobCount = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetName(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.Name = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetOutputGroup(v []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.OutputGroup = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetParentJobId(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.ParentJobId = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetPercent(v int32) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.Percent = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetRequestId(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.RequestId = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetScheduleConfig(v *GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.ScheduleConfig = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetStatus(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.Status = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetSubmitTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.SubmitTime = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetTranscodeJobList(v []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.TranscodeJobList = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetTriggerSource(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.TriggerSource = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetUserData(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.UserData = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobInputGroup struct {
	// The media object.
	//
	// 	- If Type is set to OSS, the URL of an OSS object is returned. Both the OSS and HTTP protocols are supported.
	//
	// 	- If Type is set to Media, the ID of a media asset is returned.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an OSS object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobInputGroup) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobInputGroup) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobInputGroup) SetMedia(v string) *GetTranscodeJobResponseBodyTranscodeParentJobInputGroup {
	s.Media = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobInputGroup) SetType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobInputGroup {
	s.Type = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup struct {
	// The output file configuration.
	Output *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// The job processing configuration.
	ProcessConfig *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig `json:"ProcessConfig,omitempty" xml:"ProcessConfig,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup) SetOutput(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup {
	s.Output = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup) SetProcessConfig(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup {
	s.ProcessConfig = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput struct {
	// The media object.
	//
	// 	- If Type is set to OSS, the URL of an OSS object is returned. Both the OSS and HTTP protocols are supported.
	//
	// 	- If Type is set to Media, the ID of a media asset is returned.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The URL of the output stream.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	OutputUrl *string `json:"OutputUrl,omitempty" xml:"OutputUrl,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an OSS object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) SetMedia(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput {
	s.Media = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) SetOutputUrl(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput {
	s.OutputUrl = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) SetType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput {
	s.Type = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig struct {
	// The multi-input stream merge configuration.
	CombineConfigs []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs `json:"CombineConfigs,omitempty" xml:"CombineConfigs,omitempty" type:"Repeated"`
	// The encryption settings.
	Encryption *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption `json:"Encryption,omitempty" xml:"Encryption,omitempty" type:"Struct"`
	// The watermark configuration of an image.
	ImageWatermarks []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks `json:"ImageWatermarks,omitempty" xml:"ImageWatermarks,omitempty" type:"Repeated"`
	// The subtitle configuration.
	Subtitles []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles `json:"Subtitles,omitempty" xml:"Subtitles,omitempty" type:"Repeated"`
	// The configurations of the text watermark.
	TextWatermarks []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks `json:"TextWatermarks,omitempty" xml:"TextWatermarks,omitempty" type:"Repeated"`
	// The transcoding configuration.
	Transcode *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode `json:"Transcode,omitempty" xml:"Transcode,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetCombineConfigs(v []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.CombineConfigs = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetEncryption(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.Encryption = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetImageWatermarks(v []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.ImageWatermarks = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetSubtitles(v []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.Subtitles = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetTextWatermarks(v []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.TextWatermarks = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetTranscode(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.Transcode = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs struct {
	// The audio stream index.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0 或 exclude
	AudioIndex *string `json:"AudioIndex,omitempty" xml:"AudioIndex,omitempty"`
	// The duration of the input stream. The default value is the duration of the video.
	//
	// example:
	//
	// 20.0
	Duration *float64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The start time of the input stream. Default value: 0.
	//
	// example:
	//
	// 0.0
	Start *float64 `json:"Start,omitempty" xml:"Start,omitempty"`
	// The video stream index.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0 或 exclude
	VideoIndex *string `json:"VideoIndex,omitempty" xml:"VideoIndex,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) SetAudioIndex(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs {
	s.AudioIndex = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) SetDuration(v float64) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs {
	s.Duration = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) SetStart(v float64) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs {
	s.Start = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) SetVideoIndex(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs {
	s.VideoIndex = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption struct {
	// The ciphertext of HLS encryption.
	//
	// example:
	//
	// MTYi00NDU0LTg5O****
	CipherText *string `json:"CipherText,omitempty" xml:"CipherText,omitempty"`
	// The endpoint of the decryption service for HLS encryption.
	//
	// example:
	//
	// https://sample.com/path?CipherText=MTYi00NDU0LTg5O****
	DecryptKeyUri *string `json:"DecryptKeyUri,omitempty" xml:"DecryptKeyUri,omitempty"`
	// The encryption type.
	//
	// example:
	//
	// PrivateEncryption
	EncryptType *string `json:"EncryptType,omitempty" xml:"EncryptType,omitempty"`
	// The type of the key service. Valid values: KMS and Base64.
	//
	// example:
	//
	// KMS
	KeyServiceType *string `json:"KeyServiceType,omitempty" xml:"KeyServiceType,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) SetCipherText(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption {
	s.CipherText = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) SetDecryptKeyUri(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption {
	s.DecryptKeyUri = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) SetEncryptType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption {
	s.EncryptType = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) SetKeyServiceType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption {
	s.KeyServiceType = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks struct {
	// The parameters that are used to overwrite the corresponding parameters of the template.
	OverwriteParams *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// The template ID.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) SetOverwriteParams(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) SetTemplateId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks {
	s.TemplateId = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams struct {
	// The position of the watermark on the x-axis.
	//
	// example:
	//
	// 10
	Dx *string `json:"Dx,omitempty" xml:"Dx,omitempty"`
	// The position of the watermark on the y-axis.
	//
	// example:
	//
	// 10
	Dy *string `json:"Dy,omitempty" xml:"Dy,omitempty"`
	// The watermark image file.
	File *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// The height of the output video.
	//
	// example:
	//
	// 32
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The reference position of the watermark. Valid values: TopLeft, TopRight, BottomLeft, and BottomRight. Default value: TopLeft.
	//
	// example:
	//
	// TopLeft
	ReferPos *string `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	// The timeline settings.
	Timeline *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	// The width of the output video.
	//
	// example:
	//
	// 32
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetDx(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Dx = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetDy(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Dy = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetFile(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.File = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetHeight(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Height = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetReferPos(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.ReferPos = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetTimeline(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Timeline = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetWidth(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Width = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile struct {
	// The media object.
	//
	// 	- If Type is set to OSS, the URL of an OSS object is returned. Both the OSS and HTTP protocols are supported.
	//
	// 	- If Type is set to Media, the ID of a media asset is returned.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an OSS object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) SetMedia(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) SetType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile {
	s.Type = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline struct {
	// The duration of the stream. Valid values: the number of seconds or "ToEND".
	//
	// example:
	//
	// ToEND
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The start time of the stream.
	//
	// example:
	//
	// 00:00:05
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) SetDuration(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Duration = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) SetStart(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Start = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles struct {
	// The parameters that are used to overwrite the corresponding parameters of the template.
	OverwriteParams *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// The template ID.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) SetOverwriteParams(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles {
	s.OverwriteParams = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) SetTemplateId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles {
	s.TemplateId = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams struct {
	// The file encoding format.
	//
	// example:
	//
	// UTF-8
	CharEnc *string `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	// The subtitle file.
	File *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// The format of the subtitle file.
	//
	// example:
	//
	// vtt
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) SetCharEnc(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.CharEnc = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) SetFile(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.File = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) SetFormat(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.Format = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile struct {
	// The media object.
	//
	// 	- If Type is set to OSS, the URL of an OSS object is returned. Both the OSS and HTTP protocols are supported.
	//
	// 	- If Type is set to Media, the ID of a media asset is returned.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an OSS object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) SetMedia(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) SetType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile {
	s.Type = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks struct {
	// The parameters that are used to overwrite the corresponding parameters of the template.
	OverwriteParams *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// The template ID.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) SetOverwriteParams(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) SetTemplateId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks {
	s.TemplateId = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams struct {
	// Indicates whether the text size was adjusted based on the output video dimensions. Valid values: true and false. Default value: false.
	//
	// example:
	//
	// false
	Adaptive *string `json:"Adaptive,omitempty" xml:"Adaptive,omitempty"`
	// The border color.
	//
	// example:
	//
	// #006400
	BorderColor *string `json:"BorderColor,omitempty" xml:"BorderColor,omitempty"`
	// The border width.
	//
	// example:
	//
	// 0
	BorderWidth *int32 `json:"BorderWidth,omitempty" xml:"BorderWidth,omitempty"`
	// The watermark text. Base64 encoding is not required. The string must be encoded in UTF-8.
	//
	// example:
	//
	// 测试水印
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The transparency of the watermark.
	//
	// example:
	//
	// 1.0
	FontAlpha *string `json:"FontAlpha,omitempty" xml:"FontAlpha,omitempty"`
	// The color of the text.
	//
	// example:
	//
	// #006400
	FontColor *string `json:"FontColor,omitempty" xml:"FontColor,omitempty"`
	// The font of the text.
	//
	// example:
	//
	// SimSun
	FontName *string `json:"FontName,omitempty" xml:"FontName,omitempty"`
	// The size of the text.
	//
	// example:
	//
	// 16
	FontSize *int32 `json:"FontSize,omitempty" xml:"FontSize,omitempty"`
	// The distance of the watermark from the left edge.
	//
	// example:
	//
	// 10
	Left *string `json:"Left,omitempty" xml:"Left,omitempty"`
	// The distance of the watermark from the top edge.
	//
	// example:
	//
	// 10
	Top *string `json:"Top,omitempty" xml:"Top,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetAdaptive(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Adaptive = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetBorderColor(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.BorderColor = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetBorderWidth(v int32) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.BorderWidth = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetContent(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Content = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontAlpha(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontAlpha = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontColor(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontColor = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontName = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontSize(v int32) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontSize = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetLeft(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Left = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetTop(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Top = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode struct {
	// The parameters that are used to overwrite the corresponding parameters of the template.
	OverwriteParams *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// The template ID.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) SetOverwriteParams(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode {
	s.OverwriteParams = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) SetTemplateId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode {
	s.TemplateId = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams struct {
	// The audio settings.
	Audio *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	// The encapsulation format settings.
	Container *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	// The encapsulation settings.
	MuxConfig *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	// The conditional transcoding configurations.
	TransConfig *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	// The video settings.
	Video *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetAudio(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Audio = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetContainer(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Container = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetMuxConfig(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.MuxConfig = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetTransConfig(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.TransConfig = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetVideo(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Video = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio struct {
	// The audio bitrate of the output file.
	//
	// 	- Valid values: [8,1000].
	//
	// 	- Unit: Kbit/s.
	//
	// 	- Default value: 128.
	//
	// example:
	//
	// 128
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The number of sound channels. Default value: 2.
	//
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// The audio codec. Valid values: AAC, MP3, VORBIS, and FLAC. Default value: AAC.
	//
	// example:
	//
	// AAC
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// The audio codec profile. If the Codec parameter is set to AAC, the valid values are aac_low, aac_he, aac_he_v2, aac_ld, and aac_eld.
	//
	// example:
	//
	// aac_low
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// Indicates whether the audio stream is deleted.
	//
	// example:
	//
	// false
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// The sampling rate.
	//
	// 	- Default value: 44100.
	//
	// 	- Valid values: 22050, 32000, 44100, 48000, and 96000.
	//
	// 	- Unit: Hz.
	//
	// example:
	//
	// 44100
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	// The volume configurations.
	Volume *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetBitrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Bitrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetChannels(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Channels = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetCodec(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Codec = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetProfile(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Profile = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetRemove(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Remove = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetSamplerate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Samplerate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetVolume(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Volume = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume struct {
	// The output volume.
	//
	// example:
	//
	// -6
	IntegratedLoudnessTarget *string `json:"IntegratedLoudnessTarget,omitempty" xml:"IntegratedLoudnessTarget,omitempty"`
	// The volume range.
	//
	// example:
	//
	// 8
	LoudnessRangeTarget *string `json:"LoudnessRangeTarget,omitempty" xml:"LoudnessRangeTarget,omitempty"`
	// The volume adjustment method. Valid values:
	//
	// example:
	//
	// auto
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// The peak volume.
	//
	// example:
	//
	// -1
	TruePeak *string `json:"TruePeak,omitempty" xml:"TruePeak,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetIntegratedLoudnessTarget(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.IntegratedLoudnessTarget = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetLoudnessRangeTarget(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.LoudnessRangeTarget = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetMethod(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.Method = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetTruePeak(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.TruePeak = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer struct {
	// The container format.
	//
	// example:
	//
	// mp4
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer) SetFormat(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer {
	s.Format = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig struct {
	// The segment settings.
	Segment *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) SetSegment(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig {
	s.Segment = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment struct {
	// The segment length.
	//
	// example:
	//
	// 10
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The forced segmentation point in time.
	//
	// example:
	//
	// 2,3
	ForceSegTime *string `json:"ForceSegTime,omitempty" xml:"ForceSegTime,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetDuration(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.Duration = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetForceSegTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.ForceSegTime = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig struct {
	// The method that is used to adjust the resolution. This parameter takes effect only if both the Width and Height parameters are specified. You can use this parameter together with the LongShortMode parameter.
	//
	// Valid values: rescale, crop, pad, and none.
	//
	// Default value: none.
	//
	// example:
	//
	// none
	AdjDarMethod *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	// Indicates whether the audio bitrate was checked. You can specify only one of the IsCheckAudioBitrate and IsCheckAudioBitrateFail parameters. The priority of the IsCheckAudioBitrateFail parameter is higher. Valid values:
	//
	// 	- true If the bitrate of the input audio is less than that of the output audio, the bitrate of the input audio is used for transcoding.
	//
	// 	- false
	//
	// Default value:
	//
	// 	- If this parameter is not specified and the codec of the output audio is different from that of the input audio, the default value is false.
	//
	// 	- If this parameter is not specified and the codec of the output audio is the same as that of the input audio, the default value is true.
	//
	// example:
	//
	// true
	IsCheckAudioBitrate *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	// Indicates whether the audio bitrate was checked. You can specify only one of the IsCheckAudioBitrate and IsCheckAudioBitrateFail parameters. The priority of the IsCheckAudioBitrateFail parameter is higher. Valid values:
	//
	// 	- true If the bitrate of the input audio is less than that of the output audio, the transcoding job fails.
	//
	// 	- false
	//
	// Default value: false.
	//
	// example:
	//
	// true
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
	// Indicates whether the video resolution was checked. You can specify only one of the IsCheckReso and IsCheckResoFail parameters. The priority of the IsCheckResoFail parameter is higher. Valid values:
	//
	// 	- true If the width or height of the input video is less than that of the output video, the resolution of the input video is used for transcoding.
	//
	// 	- false
	//
	// Default value: false.
	//
	// example:
	//
	// true
	IsCheckReso *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	// Indicates whether the video resolution was checked. You can specify only one of the IsCheckReso and IsCheckResoFail parameters. The priority of the IsCheckResoFail parameter is higher. Valid values:
	//
	// 	- true If the width or height of the input video is less than that of the output video, the transcoding job fails.
	//
	// 	- false
	//
	// Default value: false.
	//
	// example:
	//
	// true
	IsCheckResoFail *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	// Indicates whether the video bitrate was checked. You can specify only one of the IsCheckVideoBitrate and IsCheckVideoBitrateFail parameters. The priority of the IsCheckVideoBitrateFail parameter is higher. Valid values:
	//
	// 	- true If the bitrate of the input video is less than that of the output video, the bitrate of the input video is used for transcoding.
	//
	// 	- false
	//
	// Default value: false.
	//
	// example:
	//
	// true
	IsCheckVideoBitrate *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	// Indicates whether the video bitrate was checked. You can specify only one of the IsCheckVideoBitrate and IsCheckVideoBitrateFail parameters. The priority of the IsCheckVideoBitrateFail parameter is higher. Valid values:
	//
	// 	- true If the bitrate of the input video is less than that of the output video, the transcoding job fails.
	//
	// 	- false
	//
	// Default value: false.
	//
	// example:
	//
	// true
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	// The video transcoding mode. Valid values:
	//
	// 	- onepass: You can set this parameter to onepass if the Bitrate parameter is set to ABR. The encoding speed of this mode is faster than that of the twopass mode.
	//
	// 	- twopass: You can set this parameter to twopass if the Bitrate parameter is set to VBR. The encoding speed of this mode is slower than that of the onepass mode.
	//
	// 	- CBR: the constant bitrate mode.
	//
	// Default value: onepass.
	//
	// example:
	//
	// onepass
	TransMode *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetAdjDarMethod(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckAudioBitrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckAudioBitrateFail(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckReso(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckResoFail(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckVideoBitrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckVideoBitrateFail(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetTransMode(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.TransMode = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo struct {
	// The maximum ABR. This parameter takes effect only for Narrowband HD 1.0.
	//
	// 	- Valid values: [10,50000].
	//
	// 	- Unit: Kbit/s.
	//
	// example:
	//
	// 6000
	AbrMax *string `json:"AbrMax,omitempty" xml:"AbrMax,omitempty"`
	// The average bitrate of the video.
	//
	// 	- Valid values: [10,50000].
	//
	// 	- Unit: Kbit/s.
	//
	// example:
	//
	// 3000
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The buffer size.
	//
	// 	- Valid values: [1000,128000].
	//
	// 	- Default value: 6000.
	//
	// 	- Unit: KB.
	//
	// example:
	//
	// 6000
	Bufsize *string `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	// The encoding format.
	//
	// example:
	//
	// H.264
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// The constant rate factor.
	//
	// 	- Valid values: [0,51].
	//
	// 	- Default value: 23 if the encoding format is H.264, or 26 if the encoding format is H.265.
	//
	// 	- If this parameter is specified, the value of Bitrate becomes invalid.
	//
	// example:
	//
	// 23
	Crf *string `json:"Crf,omitempty" xml:"Crf,omitempty"`
	// The method of video cropping. Valid values: border: automatically detects and removes black bars. A value in the width:height:left:top format: crops the videos based on the custom settings. Example: 1280:800:0:140.
	//
	// example:
	//
	// 1280:800:0:140
	Crop *string `json:"Crop,omitempty" xml:"Crop,omitempty"`
	// The frame rate.
	//
	// 	- Valid values: (0,60].
	//
	// 	- The value is 60 if the frame rate of the input video exceeds 60.
	//
	// 	- Default value: the frame rate of the input video.
	//
	// example:
	//
	// 25
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// The maximum number of frames between two keyframes.
	//
	// 	- Valid values: [1,1080000].
	//
	// 	- Default value: 250.
	//
	// example:
	//
	// 250
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// The height of the output video.
	//
	// 	- Valid values: [128,4096].
	//
	// 	- Unit: pixels.
	//
	// 	- Default value: the height of the input video.
	//
	// example:
	//
	// 1080
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// Indicates whether the auto-rotate screen feature is enabled.
	//
	// example:
	//
	// false
	LongShortMode *string `json:"LongShortMode,omitempty" xml:"LongShortMode,omitempty"`
	// The maximum bitrate of the output video.
	//
	// 	- Valid values: [10,50000].
	//
	// 	- Unit: Kbit/s.
	//
	// example:
	//
	// 9000
	Maxrate *string `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	// The black bars added to the video.
	//
	// 	- Format: width:height:left:top.
	//
	// 	- Example: 1280:800:0:140.
	//
	// example:
	//
	// 1280:800:0:140
	Pad *string `json:"Pad,omitempty" xml:"Pad,omitempty"`
	// The pixel format of the video. Valid values: standard pixel formats such as yuv420p and yuvj420p.
	//
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// The preset video algorithm. This parameter takes effect only if the encoding format is H.264. Valid values: veryfast, fast, medium, slow, and slower. Default value: medium.
	//
	// example:
	//
	// medium
	Preset *string `json:"Preset,omitempty" xml:"Preset,omitempty"`
	// The encoding profile. Valid values: baseline, main, and high.
	//
	// 	- baseline: applicable to mobile devices.
	//
	// 	- main: applicable to standard-definition devices.
	//
	// 	- high: applicable to high-definition devices.
	//
	// Default value: high.
	//
	// example:
	//
	// Main
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// Indicates whether the video was removed.
	//
	// example:
	//
	// false
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// The scan mode. Valid values: interlaced and progressive.
	//
	// example:
	//
	// progressive
	ScanMode *string `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	// The width of the output video.
	//
	// 	- Valid values: [128,4096].
	//
	// 	- Unit: pixels.
	//
	// 	- Default value: the width of the input video.
	//
	// example:
	//
	// 1920
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetAbrMax(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.AbrMax = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetBitrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Bitrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetBufsize(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Bufsize = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCodec(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Codec = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCrf(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Crf = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCrop(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Crop = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetFps(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Fps = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetGop(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Gop = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetHeight(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Height = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetLongShortMode(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.LongShortMode = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetMaxrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Maxrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPad(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Pad = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPixFmt(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.PixFmt = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPreset(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Preset = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetProfile(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Profile = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetRemove(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Remove = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetScanMode(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.ScanMode = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetWidth(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Width = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig struct {
	// The ID of the ApsaraVideo Media Processing (MPS) queue to which the snapshot job was submitted.
	//
	// example:
	//
	// e37ebee5d98b4781897f6086e89f9c56
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The priority of the job. Valid values: 1 to 10. The greater the value, the higher the priority.
	//
	// example:
	//
	// 5
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) SetPipelineId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) SetPriority(v int32) *GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig {
	s.Priority = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList struct {
	// The time when the job was created.
	//
	// example:
	//
	// 2022-01-12T08:49:41Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the job was complete.
	//
	// example:
	//
	// 2022-01-12T08:49:41Z
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The input group of the job. An input of a single file indicates a transcoding job. An input of multiple files indicates an audio and video stream merge job.
	InputGroup []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup `json:"InputGroup,omitempty" xml:"InputGroup,omitempty" type:"Repeated"`
	// The subjob ID.
	//
	// example:
	//
	// 7d6a7e0d4db2457a8d45ff5d43e1bf0a
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The index number of the subjob in the entire job.
	//
	// example:
	//
	// 0
	JobIndex *int32 `json:"JobIndex,omitempty" xml:"JobIndex,omitempty"`
	// The job name.
	//
	// example:
	//
	// transcode-job
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The media information about the video generated by the job.
	OutFileMeta *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta `json:"OutFileMeta,omitempty" xml:"OutFileMeta,omitempty" type:"Struct"`
	// The output file configuration.
	Output *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// The main job ID.
	//
	// example:
	//
	// 8b2198504dd340b7b3c9842a74fc9baa
	ParentJobId *string `json:"ParentJobId,omitempty" xml:"ParentJobId,omitempty"`
	// The transcoding configuration.
	ProcessConfig *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig `json:"ProcessConfig,omitempty" xml:"ProcessConfig,omitempty" type:"Struct"`
	// The ID of the request that submitted the job.
	//
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The scheduling information about the job.
	ScheduleConfig *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// The state of the transcoding job. Valid values: Init (the job is submitted), Success (the job is successful), Fail (the job failed), and Deleted (the job is deleted).
	//
	// example:
	//
	// Init
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The job submission result.
	//
	// example:
	//
	// {}
	SubmitResultJson map[string]interface{} `json:"SubmitResultJson,omitempty" xml:"SubmitResultJson,omitempty"`
	// The time when the job was submitted.
	//
	// example:
	//
	// 2022-01-12T08:49:41Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// The user data.
	//
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetCreateTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.CreateTime = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetFinishTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.FinishTime = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetInputGroup(v []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.InputGroup = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetJobId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.JobId = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetJobIndex(v int32) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.JobIndex = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.Name = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetOutFileMeta(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.OutFileMeta = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetOutput(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.Output = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetParentJobId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.ParentJobId = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetProcessConfig(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.ProcessConfig = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetRequestId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.RequestId = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetScheduleConfig(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.ScheduleConfig = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetStatus(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.Status = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetSubmitResultJson(v map[string]interface{}) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.SubmitResultJson = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetSubmitTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.SubmitTime = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetUserData(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.UserData = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup struct {
	// The URL of the media asset. This parameter is specified only when the media asset is transcoded.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	InputUrl *string `json:"InputUrl,omitempty" xml:"InputUrl,omitempty"`
	// The media object.
	//
	// 	- If Type is set to OSS, the URL of an OSS object is returned. Both the OSS and HTTP protocols are supported.
	//
	// 	- If Type is set to Media, the ID of a media asset is returned.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an Object Storage Service (OSS) object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) SetInputUrl(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup {
	s.InputUrl = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) SetMedia(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup {
	s.Media = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) SetType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup {
	s.Type = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta struct {
	// The information about the audio stream.
	AudioStreamInfoList []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList `json:"AudioStreamInfoList,omitempty" xml:"AudioStreamInfoList,omitempty" type:"Repeated"`
	// The basic file information.
	FileBasicInfo *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
	// The information about the video stream.
	VideoStreamInfoList []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList `json:"VideoStreamInfoList,omitempty" xml:"VideoStreamInfoList,omitempty" type:"Repeated"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) SetAudioStreamInfoList(v []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta {
	s.AudioStreamInfoList = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) SetFileBasicInfo(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta {
	s.FileBasicInfo = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) SetVideoStreamInfoList(v []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta {
	s.VideoStreamInfoList = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList struct {
	// The bitrate.
	//
	// example:
	//
	// 0.f
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The sound channel layout.
	//
	// example:
	//
	// stereo
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	// The number of sound channels.
	//
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// The name of the encoding format.
	//
	// example:
	//
	// AAC (Advanced Audio Coding)
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// The encoding format.
	//
	// example:
	//
	// aac
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// The encoder tag.
	//
	// example:
	//
	// 0x000f
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// The name of the encoder tag.
	//
	// example:
	//
	// [15][0][0][0]
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// The time base of the encoder.
	//
	// example:
	//
	// 1/44100
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// The duration of the stream. Unit: seconds.
	//
	// example:
	//
	// 403.039989
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The sequence number of the stream.
	//
	// example:
	//
	// 1
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// The language of the stream.
	//
	// example:
	//
	// cn
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The sample format.
	//
	// example:
	//
	// fltp
	SampleFmt *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	// The sampling rate. Unit: Hz.
	//
	// example:
	//
	// 44100
	SampleRate *string `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
	// The start time of the stream.
	//
	// example:
	//
	// 1.473556
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The time base.
	//
	// example:
	//
	// 1/90000
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetBitrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetChannelLayout(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.ChannelLayout = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetChannels(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Channels = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecLongName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecTag(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecTagString(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecTimeBase(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetDuration(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetIndex(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetLang(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetSampleFmt(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.SampleFmt = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetSampleRate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.SampleRate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetStartTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetTimebase(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Timebase = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo struct {
	// The video bitrate.
	//
	// example:
	//
	// 888.563
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The duration of the video. Unit: seconds.
	//
	// example:
	//
	// 403.039999
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The file name.
	//
	// example:
	//
	// file.m3u8
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The file size. Unit: bytes.
	//
	// example:
	//
	// 31737
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// The state of the file.
	//
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// The file type. Valid values: source_file and transcode_file.
	//
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// The URL of the file.
	//
	// example:
	//
	// http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// The name of the video format.
	//
	// example:
	//
	// hls,applehttp
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// The height of the output video.
	//
	// example:
	//
	// 478
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// 486c2890096871edba6f81848c016303
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The region in which the file resides.
	//
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The width of the output video.
	//
	// example:
	//
	// 848
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetBitrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetDuration(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileSize(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileStatus(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileUrl(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFormatName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetHeight(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Height = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetMediaId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.MediaId = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetRegion(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Region = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetWidth(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Width = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList struct {
	// The average frame rate.
	//
	// example:
	//
	// 25.0
	AvgFps *string `json:"Avg_fps,omitempty" xml:"Avg_fps,omitempty"`
	// The bitrate.
	//
	// example:
	//
	// 888.563
	BitRate *string `json:"Bit_rate,omitempty" xml:"Bit_rate,omitempty"`
	// The name of the encoding format.
	//
	// example:
	//
	// H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10
	CodecLongName *string `json:"Codec_long_name,omitempty" xml:"Codec_long_name,omitempty"`
	// The encoding format.
	//
	// example:
	//
	// h264
	CodecName *string `json:"Codec_name,omitempty" xml:"Codec_name,omitempty"`
	// The tag of the encoding format.
	//
	// example:
	//
	// 0x001b
	CodecTag *string `json:"Codec_tag,omitempty" xml:"Codec_tag,omitempty"`
	// The tag string of the encoding format.
	//
	// example:
	//
	// [27][0][0][0]
	CodecTagString *string `json:"Codec_tag_string,omitempty" xml:"Codec_tag_string,omitempty"`
	// The time base of the encoder.
	//
	// example:
	//
	// 1/50
	CodecTimeBase *string `json:"Codec_time_base,omitempty" xml:"Codec_time_base,omitempty"`
	// The display aspect ratio.
	//
	// example:
	//
	// 16:9
	Dar *string `json:"Dar,omitempty" xml:"Dar,omitempty"`
	// The duration of the stream. Unit: seconds.
	//
	// example:
	//
	// 403.039989
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The frame rate.
	//
	// example:
	//
	// 25.0
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// Indicates whether the video stream contains bidirectional frames (B-frames). Valid values:
	//
	// 	- 0: The stream contains no B-frames.
	//
	// 	- 1: The stream contains one B-frame.
	//
	// 	- 2: The stream contains multiple consecutive B-frames.
	//
	// example:
	//
	// 2
	HasBFrames *string `json:"Has_b_frames,omitempty" xml:"Has_b_frames,omitempty"`
	// The height of the output video.
	//
	// example:
	//
	// 478
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The sequence number of the stream.
	//
	// example:
	//
	// 0
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// The language of the stream.
	//
	// example:
	//
	// cn
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The codec level.
	//
	// example:
	//
	// 31
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The total number of frames.
	//
	// example:
	//
	// 10040
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// The pixel format.
	//
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// The encoder profile.
	//
	// example:
	//
	// High
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// The rotation angle of the video image. Valid values: 0, 90, 180, and 270. Default value: 0.
	//
	// example:
	//
	// 0
	Rotate *string `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	// The aspect ratio of the area from which the sampling points are collected.
	//
	// example:
	//
	// 478:477
	Sar *string `json:"Sar,omitempty" xml:"Sar,omitempty"`
	// The start time of the stream.
	//
	// example:
	//
	// 1.473556
	StartTime *string `json:"Start_time,omitempty" xml:"Start_time,omitempty"`
	// The time base.
	//
	// example:
	//
	// 1/90000
	TimeBase *string `json:"Time_base,omitempty" xml:"Time_base,omitempty"`
	// The width of the output video.
	//
	// example:
	//
	// 848
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetAvgFps(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.AvgFps = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetBitRate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.BitRate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecLongName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecTag(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecTagString(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecTimeBase(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetDar(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Dar = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetDuration(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetFps(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Fps = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetHasBFrames(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.HasBFrames = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetHeight(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Height = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetIndex(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetLang(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetLevel(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Level = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetNumFrames(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetPixFmt(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.PixFmt = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetProfile(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Profile = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetRotate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Rotate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetSar(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Sar = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetStartTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetTimeBase(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.TimeBase = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetWidth(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Width = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput struct {
	// The media object.
	//
	// 	- If Type is set to OSS, the URL of an OSS object is returned. Both the OSS and HTTP protocols are supported.
	//
	// 	- If Type is set to Media, the ID of a media asset is returned.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The path of the transcoded output stream. This parameter is required only when the output is a media asset.
	//
	// example:
	//
	// oss://bucket/path/to/{MediaId}/{JobId}.mp4
	OutputUrl *string `json:"OutputUrl,omitempty" xml:"OutputUrl,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an OSS object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) SetMedia(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput {
	s.Media = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) SetOutputUrl(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput {
	s.OutputUrl = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) SetType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput {
	s.Type = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig struct {
	// The multi-input stream merge configuration.
	CombineConfigs []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs `json:"CombineConfigs,omitempty" xml:"CombineConfigs,omitempty" type:"Repeated"`
	// The encryption settings.
	Encryption *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption `json:"Encryption,omitempty" xml:"Encryption,omitempty" type:"Struct"`
	// The watermark configuration of an image.
	ImageWatermarks []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks `json:"ImageWatermarks,omitempty" xml:"ImageWatermarks,omitempty" type:"Repeated"`
	// Indicates whether the tags of the input stream are inherited in the output stream. This parameter does not take effect when the input is not a media asset. Default value: false.
	//
	// example:
	//
	// true
	IsInheritTags *bool `json:"IsInheritTags,omitempty" xml:"IsInheritTags,omitempty"`
	// The subtitle configuration.
	Subtitles []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles `json:"Subtitles,omitempty" xml:"Subtitles,omitempty" type:"Repeated"`
	// The configurations of the text watermark.
	TextWatermarks []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks `json:"TextWatermarks,omitempty" xml:"TextWatermarks,omitempty" type:"Repeated"`
	// The transcoding configuration.
	Transcode *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode `json:"Transcode,omitempty" xml:"Transcode,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetCombineConfigs(v []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.CombineConfigs = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetEncryption(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.Encryption = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetImageWatermarks(v []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.ImageWatermarks = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetIsInheritTags(v bool) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.IsInheritTags = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetSubtitles(v []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.Subtitles = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetTextWatermarks(v []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.TextWatermarks = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetTranscode(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.Transcode = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs struct {
	// The audio stream index.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0 或 exclude
	AudioIndex *string `json:"AudioIndex,omitempty" xml:"AudioIndex,omitempty"`
	// The duration of the input stream. The default value is the duration of the video.
	//
	// example:
	//
	// 20.0
	Duration *float64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The start time of the input stream. Default value: 0.
	//
	// example:
	//
	// 0.0
	Start *float64 `json:"Start,omitempty" xml:"Start,omitempty"`
	// The video stream index.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0 或 exclude
	VideoIndex *string `json:"VideoIndex,omitempty" xml:"VideoIndex,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) SetAudioIndex(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs {
	s.AudioIndex = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) SetDuration(v float64) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs {
	s.Duration = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) SetStart(v float64) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs {
	s.Start = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) SetVideoIndex(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs {
	s.VideoIndex = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption struct {
	// The ciphertext of HTTP Live Streaming (HLS) encryption.
	//
	// example:
	//
	// MTYi00NDU0LTg5O****
	CipherText *string `json:"CipherText,omitempty" xml:"CipherText,omitempty"`
	// The endpoint of the decryption service for HLS encryption.
	//
	// example:
	//
	// https://sample.com/path?CipherText=MTYi00NDU0LTg5O****
	DecryptKeyUri *string `json:"DecryptKeyUri,omitempty" xml:"DecryptKeyUri,omitempty"`
	// The encryption type.
	//
	// example:
	//
	// PrivateEncryption
	EncryptType *string `json:"EncryptType,omitempty" xml:"EncryptType,omitempty"`
	// The type of the key service. Valid values: KMS and Base64.
	//
	// example:
	//
	// KMS
	KeyServiceType *string `json:"KeyServiceType,omitempty" xml:"KeyServiceType,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) SetCipherText(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption {
	s.CipherText = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) SetDecryptKeyUri(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption {
	s.DecryptKeyUri = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) SetEncryptType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption {
	s.EncryptType = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) SetKeyServiceType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption {
	s.KeyServiceType = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks struct {
	// The parameters that are used to overwrite the corresponding parameters of the template.
	OverwriteParams *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// The template ID.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) SetOverwriteParams(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) SetTemplateId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks {
	s.TemplateId = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams struct {
	// The position of the watermark on the x-axis.
	//
	// example:
	//
	// 10
	Dx *string `json:"Dx,omitempty" xml:"Dx,omitempty"`
	// The position of the watermark on the y-axis.
	//
	// example:
	//
	// 10
	Dy *string `json:"Dy,omitempty" xml:"Dy,omitempty"`
	// The watermark image file.
	File *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// The height of the output video.
	//
	// example:
	//
	// 32
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The reference position of the watermark. Valid values: TopLeft, TopRight, BottomLeft, and BottomRight. Default value: TopLeft.
	//
	// example:
	//
	// TopLeft
	ReferPos *string `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	// The timeline settings.
	Timeline *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	// The width of the output video.
	//
	// example:
	//
	// 32
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetDx(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Dx = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetDy(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Dy = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetFile(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.File = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetHeight(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Height = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetReferPos(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.ReferPos = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetTimeline(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Timeline = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetWidth(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Width = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile struct {
	// The media object.
	//
	// 	- If Type is set to OSS, the URL of an OSS object is returned. Both the OSS and HTTP protocols are supported.
	//
	// 	- If Type is set to Media, the ID of a media asset is returned.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an OSS object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) SetMedia(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) SetType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile {
	s.Type = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline struct {
	// The duration of the stream. Valid values: the number of seconds or "ToEND".
	//
	// example:
	//
	// ToEND
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The start time of the stream.
	//
	// example:
	//
	// 00:00:05
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) SetDuration(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Duration = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) SetStart(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Start = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles struct {
	// The parameters that are used to overwrite the corresponding parameters of the template.
	OverwriteParams *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// The template ID.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) SetOverwriteParams(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles {
	s.OverwriteParams = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) SetTemplateId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles {
	s.TemplateId = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams struct {
	// The file encoding format.
	//
	// example:
	//
	// UTF-8
	CharEnc *string `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	// The subtitle file.
	File *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// The format of the subtitle file.
	//
	// example:
	//
	// vtt
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) SetCharEnc(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams {
	s.CharEnc = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) SetFile(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams {
	s.File = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) SetFormat(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams {
	s.Format = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile struct {
	// The media object.
	//
	// 	- If Type is set to OSS, the URL of an OSS object is returned. Both the OSS and HTTP protocols are supported.
	//
	// 	- If Type is set to Media, the ID of a media asset is returned.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an OSS object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) SetMedia(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) SetType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile {
	s.Type = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks struct {
	// The parameters that are used to overwrite the corresponding parameters of the template.
	OverwriteParams *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// The template ID.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) SetOverwriteParams(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) SetTemplateId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks {
	s.TemplateId = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams struct {
	// Indicates whether the text size was adjusted based on the output video dimensions. Valid values: true and false. Default value: false.
	//
	// example:
	//
	// false
	Adaptive *string `json:"Adaptive,omitempty" xml:"Adaptive,omitempty"`
	// The border color.
	//
	// example:
	//
	// #006400
	BorderColor *string `json:"BorderColor,omitempty" xml:"BorderColor,omitempty"`
	// The border width.
	//
	// example:
	//
	// 0
	BorderWidth *int32 `json:"BorderWidth,omitempty" xml:"BorderWidth,omitempty"`
	// The watermark text. Base64 encoding is not required. The string must be encoded in UTF-8.
	//
	// example:
	//
	// 测试水印
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The transparency of the watermark.
	//
	// example:
	//
	// 1.0
	FontAlpha *string `json:"FontAlpha,omitempty" xml:"FontAlpha,omitempty"`
	// The color of the text.
	//
	// example:
	//
	// #006400
	FontColor *string `json:"FontColor,omitempty" xml:"FontColor,omitempty"`
	// The font of the text.
	//
	// example:
	//
	// SimSun
	FontName *string `json:"FontName,omitempty" xml:"FontName,omitempty"`
	// The size of the text.
	//
	// example:
	//
	// 16
	FontSize *int32 `json:"FontSize,omitempty" xml:"FontSize,omitempty"`
	// The distance of the watermark from the left edge.
	//
	// example:
	//
	// 10
	Left *string `json:"Left,omitempty" xml:"Left,omitempty"`
	// The distance of the watermark from the top edge.
	//
	// example:
	//
	// 10
	Top *string `json:"Top,omitempty" xml:"Top,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetAdaptive(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.Adaptive = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetBorderColor(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.BorderColor = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetBorderWidth(v int32) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.BorderWidth = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetContent(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.Content = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetFontAlpha(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.FontAlpha = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetFontColor(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.FontColor = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetFontName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.FontName = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetFontSize(v int32) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.FontSize = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetLeft(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.Left = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetTop(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.Top = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode struct {
	// The parameters that are used to overwrite the corresponding parameters of the template.
	OverwriteParams *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// The template ID.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) SetOverwriteParams(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode {
	s.OverwriteParams = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) SetTemplateId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode {
	s.TemplateId = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams struct {
	// The audio settings.
	Audio *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	// The encapsulation format settings.
	Container *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	// The encapsulation settings.
	MuxConfig *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	Tags      map[string]*string                                                                                           `json:"Tags,omitempty" xml:"Tags,omitempty"`
	// The conditional transcoding configurations.
	TransConfig *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	// The video settings.
	Video *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetAudio(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.Audio = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetContainer(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.Container = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetMuxConfig(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.MuxConfig = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetTags(v map[string]*string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.Tags = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetTransConfig(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.TransConfig = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetVideo(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.Video = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio struct {
	// The audio bitrate of the output file.
	//
	// 	- Valid values: [8,1000].
	//
	// 	- Unit: Kbit/s.
	//
	// 	- Default value: 128.
	//
	// example:
	//
	// 128
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The number of sound channels. Default value: 2.
	//
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// The audio codec. Valid values: AAC, MP3, VORBIS, and FLAC. Default value: AAC.
	//
	// example:
	//
	// AAC
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// The audio codec profile. If the Codec parameter is set to AAC, the valid values are aac_low, aac_he, aac_he_v2, aac_ld, and aac_eld.
	//
	// example:
	//
	// aac_low
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// Indicates whether the audio stream is deleted.
	//
	// example:
	//
	// false
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// The sampling rate.
	//
	// 	- Default value: 44100. Valid values: 22050, 32000, 44100, 48000, and 96000.
	//
	// 	- Unit: Hz.
	//
	// example:
	//
	// 44100
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	// The volume configurations.
	Volume *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetBitrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Bitrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetChannels(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Channels = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetCodec(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Codec = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetProfile(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Profile = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetRemove(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Remove = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetSamplerate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Samplerate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetVolume(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Volume = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume struct {
	// The output volume.
	//
	// example:
	//
	// -6
	IntegratedLoudnessTarget *string `json:"IntegratedLoudnessTarget,omitempty" xml:"IntegratedLoudnessTarget,omitempty"`
	// The volume range.
	//
	// example:
	//
	// 8
	LoudnessRangeTarget *string `json:"LoudnessRangeTarget,omitempty" xml:"LoudnessRangeTarget,omitempty"`
	// The volume adjustment method. Valid values:
	//
	// example:
	//
	// auto
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// The peak volume.
	//
	// example:
	//
	// -1
	TruePeak *string `json:"TruePeak,omitempty" xml:"TruePeak,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) SetIntegratedLoudnessTarget(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.IntegratedLoudnessTarget = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) SetLoudnessRangeTarget(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.LoudnessRangeTarget = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) SetMethod(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.Method = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) SetTruePeak(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.TruePeak = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer struct {
	// The container format.
	//
	// example:
	//
	// mp4
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer) SetFormat(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer {
	s.Format = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig struct {
	// The segment settings.
	Segment *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig) SetSegment(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig {
	s.Segment = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment struct {
	// The segment length.
	//
	// example:
	//
	// 10
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The forced segmentation point in time.
	//
	// example:
	//
	// 2,3
	ForceSegTime *string `json:"ForceSegTime,omitempty" xml:"ForceSegTime,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetDuration(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.Duration = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetForceSegTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.ForceSegTime = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig struct {
	// The method that is used to adjust the resolution. This parameter takes effect only if both the Width and Height parameters are specified. You can use this parameter together with the LongShortMode parameter.
	//
	// Valid values: rescale, crop, pad, and none.
	//
	// Default value: none.
	//
	// For more information about examples, see How do I set the resolution for an output video?
	//
	// example:
	//
	// none
	AdjDarMethod *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	// Indicates whether the audio bitrate was checked. You can specify only one of the IsCheckAudioBitrate and IsCheckAudioBitrateFail parameters. The priority of the IsCheckAudioBitrateFail parameter is higher. Valid values:
	//
	// 	- true If the bitrate of the input audio is less than that of the output audio, the bitrate of the input audio is used for transcoding.
	//
	// 	- false
	//
	// Default value:
	//
	// 	- If this parameter is not specified and the codec of the output audio is different from that of the input audio, the default value is false.
	//
	// 	- If this parameter is not specified and the codec of the output audio is the same as that of the input audio, the default value is true.
	//
	// example:
	//
	// true
	IsCheckAudioBitrate *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	// Indicates whether the audio bitrate was checked. You can specify only one of the IsCheckAudioBitrate and IsCheckAudioBitrateFail parameters. The priority of the IsCheckAudioBitrateFail parameter is higher. Valid values:
	//
	// 	- true If the bitrate of the input audio is less than that of the output audio, the transcoding job fails.
	//
	// 	- false
	//
	// Default value: false.
	//
	// example:
	//
	// true
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
	// Indicates whether the video resolution was checked. You can specify only one of the IsCheckReso and IsCheckResoFail parameters. The priority of the IsCheckResoFail parameter is higher. Valid values:
	//
	// 	- true If the width or height of the input video is less than that of the output video, the resolution of the input video is used for transcoding.
	//
	// 	- false
	//
	// Default value: false.
	//
	// example:
	//
	// true
	IsCheckReso *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	// Indicates whether the video resolution was checked. You can specify only one of the IsCheckReso and IsCheckResoFail parameters. The priority of the IsCheckResoFail parameter is higher. Valid values:
	//
	// 	- true If the width or height of the input video is less than that of the output video, the transcoding job fails.
	//
	// 	- false
	//
	// Default value: false.
	//
	// example:
	//
	// true
	IsCheckResoFail *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	// Indicates whether the video bitrate was checked. You can specify only one of the IsCheckVideoBitrate and IsCheckVideoBitrateFail parameters. The priority of the IsCheckVideoBitrateFail parameter is higher. Valid values:
	//
	// 	- true If the bitrate of the input video is less than that of the output video, the bitrate of the input video is used for transcoding.
	//
	// 	- false
	//
	// Default value: false.
	//
	// example:
	//
	// true
	IsCheckVideoBitrate *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	// Indicates whether the video bitrate was checked. You can specify only one of the IsCheckVideoBitrate and IsCheckVideoBitrateFail parameters. The priority of the IsCheckVideoBitrateFail parameter is higher. Valid values:
	//
	// 	- true If the bitrate of the input video is less than that of the output video, the transcoding job fails.
	//
	// 	- false
	//
	// Default value: false.
	//
	// example:
	//
	// true
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	// The video transcoding mode. Valid values:
	//
	// 	- onepass: You can set this parameter to onepass if the Bitrate parameter is set to ABR. The encoding speed of this mode is faster than that of the twopass mode.
	//
	// 	- twopass: You can set this parameter to twopass if the Bitrate parameter is set to VBR. The encoding speed of this mode is slower than that of the onepass mode.
	//
	// 	- CBR: the constant bitrate mode.
	//
	// Default value: onepass.
	//
	// example:
	//
	// onepass
	TransMode *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetAdjDarMethod(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckAudioBitrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckAudioBitrateFail(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckReso(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckResoFail(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckVideoBitrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckVideoBitrateFail(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetTransMode(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.TransMode = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo struct {
	// The maximum adaptive bitrate (ABR). This parameter takes effect only for Narrowband HD 1.0.
	//
	// 	- Valid values: [10,50000].
	//
	// 	- Unit: Kbit/s.
	//
	// example:
	//
	// 6000
	AbrMax *string `json:"AbrMax,omitempty" xml:"AbrMax,omitempty"`
	// The average bitrate of the video.
	//
	// 	- Valid values: [10,50000].
	//
	// 	- Unit: Kbit/s.
	//
	// example:
	//
	// 3000
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The buffer size.
	//
	// 	- Valid values: [1000,128000].
	//
	// 	- Default value: 6000.
	//
	// 	- Unit: Kbit/s.
	//
	// example:
	//
	// 6000
	Bufsize *string `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	// The encoding format.
	//
	// example:
	//
	// H.264
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// The constant rate factor.
	//
	// 	- Valid values: [0,51].
	//
	// 	- Default value: 23 if the encoding format is H.264, or 26 if the encoding format is H.265.
	//
	// If this parameter is specified, the value of Bitrate becomes invalid.
	//
	// example:
	//
	// 23
	Crf *string `json:"Crf,omitempty" xml:"Crf,omitempty"`
	// The method of video cropping. Valid values:
	//
	// 	- border: automatically detects and removes black bars.
	//
	// 	- A value in the width:height:left:top format: crops the videos based on the custom settings.
	//
	// example:
	//
	// 1280:800:0:140
	Crop *string `json:"Crop,omitempty" xml:"Crop,omitempty"`
	// The frame rate.
	//
	// 	- Valid values: (0,60]. The value is 60 if the frame rate of the input video exceeds 60.
	//
	// 	- Default value: the frame rate of the input video.
	//
	// example:
	//
	// 25
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// The maximum number of frames between two keyframes.
	//
	// 	- Valid values: [1,1080000].
	//
	// 	- Default value: 250.
	//
	// example:
	//
	// 250
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// The height of the output video.
	//
	// 	- Valid values: [128,4096].
	//
	// 	- Unit: pixels.
	//
	// Default value: the height of the input video.
	//
	// example:
	//
	// 1080
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// Indicates whether the auto-rotate screen feature is enabled.
	//
	// example:
	//
	// false
	LongShortMode *string `json:"LongShortMode,omitempty" xml:"LongShortMode,omitempty"`
	// The maximum bitrate of the output video.
	//
	// 	- Valid values: [10,50000].
	//
	// 	- Unit: Kbit/s.
	//
	// example:
	//
	// 9000
	Maxrate *string `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	// The black bars added to the video. Format: width:height:left:top.
	//
	// example:
	//
	// 1280:800:0:140
	Pad *string `json:"Pad,omitempty" xml:"Pad,omitempty"`
	// The pixel format of the video. Valid values: standard pixel formats such as yuv420p and yuvj420p.
	//
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// The preset video algorithm. This parameter takes effect only if the encoding format is H.264. Valid values: veryfast, fast, medium, slow, and slower. Default value: medium.
	//
	// example:
	//
	// medium
	Preset *string `json:"Preset,omitempty" xml:"Preset,omitempty"`
	// The encoding profile. Valid values: baseline, main, and high.
	//
	// 	- baseline: applicable to mobile devices.
	//
	// 	- main: applicable to standard-definition devices.
	//
	// 	- high: applicable to high-definition devices.
	//
	// Default value: high.
	//
	// example:
	//
	// Main
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// Indicates whether the video was removed.
	//
	// example:
	//
	// false
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// The scan mode. Valid values: interlaced and progressive.
	//
	// example:
	//
	// progressive
	ScanMode *string `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	// The width of the output video.
	//
	// 	- Valid values: [128,4096].
	//
	// 	- Unit: pixels.
	//
	// Default value: the width of the input video.
	//
	// example:
	//
	// 1920
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetAbrMax(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.AbrMax = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetBitrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Bitrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetBufsize(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Bufsize = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetCodec(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Codec = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetCrf(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Crf = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetCrop(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Crop = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetFps(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Fps = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetGop(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Gop = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetHeight(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Height = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetLongShortMode(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.LongShortMode = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetMaxrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Maxrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetPad(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Pad = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetPixFmt(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.PixFmt = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetPreset(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Preset = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetProfile(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Profile = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetRemove(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Remove = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetScanMode(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.ScanMode = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetWidth(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Width = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig struct {
	// The ID of the ApsaraVideo Media Processing (MPS) queue to which the snapshot job was submitted.
	//
	// example:
	//
	// e37ebee5d98b4781897f6086e89f9c56
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The priority of the job. Valid values: 1 to 10. The greater the value, the higher the priority.
	//
	// example:
	//
	// 5
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) SetPipelineId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) SetPriority(v int32) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig {
	s.Priority = &v
	return s
}

type GetTranscodeJobResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTranscodeJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTranscodeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponse) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponse) SetHeaders(v map[string]*string) *GetTranscodeJobResponse {
	s.Headers = v
	return s
}

func (s *GetTranscodeJobResponse) SetStatusCode(v int32) *GetTranscodeJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTranscodeJobResponse) SetBody(v *GetTranscodeJobResponseBody) *GetTranscodeJobResponse {
	s.Body = v
	return s
}

type GetUrlUploadInfosRequest struct {
	// The IDs of the upload jobs. You can specify one or more job IDs. You can obtain the job IDs from the response parameter JobId of the [UploadMediaByURL](https://help.aliyun.com/document_detail/86311.html) operation.
	//
	// 	- You can specify a maximum of 10 job IDs.
	//
	// 	- Separate the job IDs with commas (,).
	//
	// >  You must specify either JobIds or UploadURLs. If you specify both parameters, only the value of JobIds takes effect.
	//
	// example:
	//
	// df2ac80b481346daa1db6a7c40edc7f8
	JobIds *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	// The upload URLs of the source files. You can specify a maximum of 10 URLs. Separate the URLs with commas (,).
	//
	// >
	//
	// 	- The URLs must be encoded.
	//
	// 	- If a media file is uploaded multiple times, we recommend that you specify the URL of the media file only once in this parameter.
	//
	// 	- You must specify either JobIds or UploadURLs. If you specify both parameters, only the value of JobIds takes effect.
	//
	// example:
	//
	// https://media.w3.org/2010/05/sintel/trailer.mp4
	UploadURLs *string `json:"UploadURLs,omitempty" xml:"UploadURLs,omitempty"`
}

func (s GetUrlUploadInfosRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUrlUploadInfosRequest) GoString() string {
	return s.String()
}

func (s *GetUrlUploadInfosRequest) SetJobIds(v string) *GetUrlUploadInfosRequest {
	s.JobIds = &v
	return s
}

func (s *GetUrlUploadInfosRequest) SetUploadURLs(v string) *GetUrlUploadInfosRequest {
	s.UploadURLs = &v
	return s
}

type GetUrlUploadInfosResponseBody struct {
	// The job IDs or upload URLs that do not exist.
	NonExists []*string `json:"NonExists,omitempty" xml:"NonExists,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The details about URL-based upload jobs.
	URLUploadInfoList []*GetUrlUploadInfosResponseBodyURLUploadInfoList `json:"URLUploadInfoList,omitempty" xml:"URLUploadInfoList,omitempty" type:"Repeated"`
}

func (s GetUrlUploadInfosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUrlUploadInfosResponseBody) GoString() string {
	return s.String()
}

func (s *GetUrlUploadInfosResponseBody) SetNonExists(v []*string) *GetUrlUploadInfosResponseBody {
	s.NonExists = v
	return s
}

func (s *GetUrlUploadInfosResponseBody) SetRequestId(v string) *GetUrlUploadInfosResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetUrlUploadInfosResponseBody) SetURLUploadInfoList(v []*GetUrlUploadInfosResponseBodyURLUploadInfoList) *GetUrlUploadInfosResponseBody {
	s.URLUploadInfoList = v
	return s
}

type GetUrlUploadInfosResponseBodyURLUploadInfoList struct {
	// The time when the upload job was complete. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	//
	// example:
	//
	// 2021-11-26 21:47:37
	CompleteTime *string `json:"CompleteTime,omitempty" xml:"CompleteTime,omitempty"`
	// The time when the upload job was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	//
	// example:
	//
	// 2021-11-07T10:03:37Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The error code returned if the upload job failed.
	//
	// example:
	//
	// 200
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The error message returned if the upload job failed.
	//
	// example:
	//
	// Success
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The file size. Unit: bytes.
	//
	// example:
	//
	// 64610
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// The ID of the upload job.
	//
	// example:
	//
	// 3829500c0fef429fa4ec1680b122d***
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The ID of the uploaded media file.
	//
	// example:
	//
	// 5014ca70f08171ecbf940764a0fd6***
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The status of the upload job. For more information about the valid values of the parameter, see the "Status: the status of a URL-based upload job" section of the [Basic data types](https://help.aliyun.com/document_detail/52839.html) topic.
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The upload URL of the source file.
	//
	// >  A maximum of 100 URLs can be returned.
	//
	// example:
	//
	// http://****.mp4
	UploadURL *string `json:"UploadURL,omitempty" xml:"UploadURL,omitempty"`
	// The user data. The value is a JSON string.
	//
	// example:
	//
	// {"MessageCallback":"{"CallbackURL":"http://example.aliyundoc.com"}", "Extend":"{"localId":"***", "test":"www"}"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetUrlUploadInfosResponseBodyURLUploadInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetUrlUploadInfosResponseBodyURLUploadInfoList) GoString() string {
	return s.String()
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetCompleteTime(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.CompleteTime = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetCreationTime(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.CreationTime = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetErrorCode(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.ErrorCode = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetErrorMessage(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.ErrorMessage = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetFileSize(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.FileSize = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetJobId(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.JobId = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetMediaId(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.MediaId = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetStatus(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.Status = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetUploadURL(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.UploadURL = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetUserData(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.UserData = &v
	return s
}

type GetUrlUploadInfosResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetUrlUploadInfosResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetUrlUploadInfosResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUrlUploadInfosResponse) GoString() string {
	return s.String()
}

func (s *GetUrlUploadInfosResponse) SetHeaders(v map[string]*string) *GetUrlUploadInfosResponse {
	s.Headers = v
	return s
}

func (s *GetUrlUploadInfosResponse) SetStatusCode(v int32) *GetUrlUploadInfosResponse {
	s.StatusCode = &v
	return s
}

func (s *GetUrlUploadInfosResponse) SetBody(v *GetUrlUploadInfosResponseBody) *GetUrlUploadInfosResponse {
	s.Body = v
	return s
}

type GetVideoListRequest struct {
	// The ID of the category.
	//
	// example:
	//
	// 781111
	CateId *int64 `json:"CateId,omitempty" xml:"CateId,omitempty"`
	// The end of the time range to query. The end time must be later than the start time. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// example:
	//
	// 2017-01-11T12:59:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 50.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The sorting method of the results. Valid values:
	//
	// 	- CreationTime:Desc (default): sorts results in reverse chronological order.
	//
	// 	- CreationTime:Asc: sorts results in chronological order.
	//
	// example:
	//
	// CreationTime:Asc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// example:
	//
	// 2017-01-11T12:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The status of the video. You can specify multiple video statuses and separate them with commas (,).
	//
	// Valid values:
	//
	// 	- PrepareFail: The file is abnormal.
	//
	// 	- UploadFail: The video failed to be uploaded.
	//
	// 	- UploadSucc: The video is uploaded.
	//
	// 	- Transcoding: The video is being transcoded.
	//
	// 	- TranscodeFail: The video failed to be transcoded.
	//
	// 	- ProduceFail: The video failed to be produced.
	//
	// 	- Normal: The video is normal.
	//
	// 	- Uploading: The video is being uploaded.
	//
	// 	- Preparing: The file is being generated.
	//
	// 	- Blocked: The video is blocked.
	//
	// 	- checking: The video is being reviewed.
	//
	// example:
	//
	// Uploading,Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetVideoListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetVideoListRequest) GoString() string {
	return s.String()
}

func (s *GetVideoListRequest) SetCateId(v int64) *GetVideoListRequest {
	s.CateId = &v
	return s
}

func (s *GetVideoListRequest) SetEndTime(v string) *GetVideoListRequest {
	s.EndTime = &v
	return s
}

func (s *GetVideoListRequest) SetPageNo(v int32) *GetVideoListRequest {
	s.PageNo = &v
	return s
}

func (s *GetVideoListRequest) SetPageSize(v int32) *GetVideoListRequest {
	s.PageSize = &v
	return s
}

func (s *GetVideoListRequest) SetSortBy(v string) *GetVideoListRequest {
	s.SortBy = &v
	return s
}

func (s *GetVideoListRequest) SetStartTime(v string) *GetVideoListRequest {
	s.StartTime = &v
	return s
}

func (s *GetVideoListRequest) SetStatus(v string) *GetVideoListRequest {
	s.Status = &v
	return s
}

type GetVideoListResponseBody struct {
	// The status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the audio and video files.
	MediaList []*GetVideoListResponseBodyMediaList `json:"MediaList,omitempty" xml:"MediaList,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of audio and video files that meet the conditions.
	//
	// example:
	//
	// 163
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetVideoListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetVideoListResponseBody) GoString() string {
	return s.String()
}

func (s *GetVideoListResponseBody) SetCode(v string) *GetVideoListResponseBody {
	s.Code = &v
	return s
}

func (s *GetVideoListResponseBody) SetMediaList(v []*GetVideoListResponseBodyMediaList) *GetVideoListResponseBody {
	s.MediaList = v
	return s
}

func (s *GetVideoListResponseBody) SetRequestId(v string) *GetVideoListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetVideoListResponseBody) SetSuccess(v string) *GetVideoListResponseBody {
	s.Success = &v
	return s
}

func (s *GetVideoListResponseBody) SetTotal(v int64) *GetVideoListResponseBody {
	s.Total = &v
	return s
}

type GetVideoListResponseBodyMediaList struct {
	// The ID of the application. Default value: app-1000000.
	//
	// example:
	//
	// app-1000000
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The ID of the category.
	//
	// example:
	//
	// 3679
	CateId *int64 `json:"CateId,omitempty" xml:"CateId,omitempty"`
	// The name of the category.
	CateName *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	// The URL of the thumbnail.
	//
	// example:
	//
	// http://example.aliyundoc.com/snapshot/****.jpg?auth_key=1498476426-0-0-f00b9455c49a423ce69cf4e27333****
	CoverUrl *string `json:"CoverUrl,omitempty" xml:"CoverUrl,omitempty"`
	// The time when the audio or video file was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2017-11-14T09:15:50Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The description of the audio or video file.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The duration. Unit: seconds.
	//
	// example:
	//
	// 135.6
	Duration *float32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The ID of the audio or video file.
	//
	// example:
	//
	// 1c6ce34007d571ed94667630a6bc****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The time when the audio or video file was updated. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2017-11-14T09:16:50Z
	ModificationTime *string `json:"ModificationTime,omitempty" xml:"ModificationTime,omitempty"`
	// The size of the source file. Unit: bytes.
	//
	// example:
	//
	// 10897890
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The array of video snapshot URLs.
	Snapshots []*string `json:"Snapshots,omitempty" xml:"Snapshots,omitempty" type:"Repeated"`
	// The status of the video.
	//
	// Valid values:
	//
	// 	- PrepareFail: The file is abnormal.
	//
	// 	- UploadFail: The video failed to be uploaded.
	//
	// 	- UploadSucc: The video is uploaded.
	//
	// 	- Transcoding: The video is being transcoded.
	//
	// 	- TranscodeFail: The video failed to be transcoded.
	//
	// 	- ProduceFail: The video failed to be produced.
	//
	// 	- Normal: The video is normal.
	//
	// 	- Uploading: The video is being uploaded.
	//
	// 	- Preparing: The file is being generated.
	//
	// 	- Blocked: The video is blocked.
	//
	// 	- checking: The video is being reviewed.
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The storage address.
	//
	// example:
	//
	// out-****.oss-cn-shanghai.aliyuncs.com
	StorageLocation *string `json:"StorageLocation,omitempty" xml:"StorageLocation,omitempty"`
	// The tags of the audio or video file.
	Tags *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	// The title of the audio or video file.
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s GetVideoListResponseBodyMediaList) String() string {
	return tea.Prettify(s)
}

func (s GetVideoListResponseBodyMediaList) GoString() string {
	return s.String()
}

func (s *GetVideoListResponseBodyMediaList) SetAppId(v string) *GetVideoListResponseBodyMediaList {
	s.AppId = &v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetCateId(v int64) *GetVideoListResponseBodyMediaList {
	s.CateId = &v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetCateName(v string) *GetVideoListResponseBodyMediaList {
	s.CateName = &v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetCoverUrl(v string) *GetVideoListResponseBodyMediaList {
	s.CoverUrl = &v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetCreationTime(v string) *GetVideoListResponseBodyMediaList {
	s.CreationTime = &v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetDescription(v string) *GetVideoListResponseBodyMediaList {
	s.Description = &v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetDuration(v float32) *GetVideoListResponseBodyMediaList {
	s.Duration = &v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetMediaId(v string) *GetVideoListResponseBodyMediaList {
	s.MediaId = &v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetModificationTime(v string) *GetVideoListResponseBodyMediaList {
	s.ModificationTime = &v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetSize(v int64) *GetVideoListResponseBodyMediaList {
	s.Size = &v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetSnapshots(v []*string) *GetVideoListResponseBodyMediaList {
	s.Snapshots = v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetStatus(v string) *GetVideoListResponseBodyMediaList {
	s.Status = &v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetStorageLocation(v string) *GetVideoListResponseBodyMediaList {
	s.StorageLocation = &v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetTags(v string) *GetVideoListResponseBodyMediaList {
	s.Tags = &v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetTitle(v string) *GetVideoListResponseBodyMediaList {
	s.Title = &v
	return s
}

type GetVideoListResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetVideoListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetVideoListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetVideoListResponse) GoString() string {
	return s.String()
}

func (s *GetVideoListResponse) SetHeaders(v map[string]*string) *GetVideoListResponse {
	s.Headers = v
	return s
}

func (s *GetVideoListResponse) SetStatusCode(v int32) *GetVideoListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetVideoListResponse) SetBody(v *GetVideoListResponseBody) *GetVideoListResponse {
	s.Body = v
	return s
}

type GetVodPackagingAssetRequest struct {
	// The name of the VOD packaging asset.
	//
	// example:
	//
	// 30min_movie
	AssetName *string `json:"AssetName,omitempty" xml:"AssetName,omitempty"`
}

func (s GetVodPackagingAssetRequest) String() string {
	return tea.Prettify(s)
}

func (s GetVodPackagingAssetRequest) GoString() string {
	return s.String()
}

func (s *GetVodPackagingAssetRequest) SetAssetName(v string) *GetVodPackagingAssetRequest {
	s.AssetName = &v
	return s
}

type GetVodPackagingAssetResponseBody struct {
	// The information about the asset.
	Asset *GetVodPackagingAssetResponseBodyAsset `json:"Asset,omitempty" xml:"Asset,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 0622C702-41BE-467E-AF2E-883D4517962E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetVodPackagingAssetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetVodPackagingAssetResponseBody) GoString() string {
	return s.String()
}

func (s *GetVodPackagingAssetResponseBody) SetAsset(v *GetVodPackagingAssetResponseBodyAsset) *GetVodPackagingAssetResponseBody {
	s.Asset = v
	return s
}

func (s *GetVodPackagingAssetResponseBody) SetRequestId(v string) *GetVodPackagingAssetResponseBody {
	s.RequestId = &v
	return s
}

type GetVodPackagingAssetResponseBodyAsset struct {
	// The name of the asset.
	//
	// example:
	//
	// 30min_movie
	AssetName *string `json:"AssetName,omitempty" xml:"AssetName,omitempty"`
	// The content ID in the DRM system. The maximum length is 256 characters. Letters, digits, underscores (_), and hyphens (-) are supported.
	//
	// example:
	//
	// movie
	ContentId *string `json:"ContentId,omitempty" xml:"ContentId,omitempty"`
	// The time when the asset was created. It follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2024-11-21T06:45:32Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The egress endpoints, each corresponding to a packaging configuration.
	EgressEndpoints []*GetVodPackagingAssetResponseBodyAssetEgressEndpoints `json:"EgressEndpoints,omitempty" xml:"EgressEndpoints,omitempty" type:"Repeated"`
	// The name of the packaging group.
	//
	// example:
	//
	// vod_hls
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The asset input configurations.
	Input *GetVodPackagingAssetResponseBodyAssetInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
}

func (s GetVodPackagingAssetResponseBodyAsset) String() string {
	return tea.Prettify(s)
}

func (s GetVodPackagingAssetResponseBodyAsset) GoString() string {
	return s.String()
}

func (s *GetVodPackagingAssetResponseBodyAsset) SetAssetName(v string) *GetVodPackagingAssetResponseBodyAsset {
	s.AssetName = &v
	return s
}

func (s *GetVodPackagingAssetResponseBodyAsset) SetContentId(v string) *GetVodPackagingAssetResponseBodyAsset {
	s.ContentId = &v
	return s
}

func (s *GetVodPackagingAssetResponseBodyAsset) SetCreateTime(v string) *GetVodPackagingAssetResponseBodyAsset {
	s.CreateTime = &v
	return s
}

func (s *GetVodPackagingAssetResponseBodyAsset) SetEgressEndpoints(v []*GetVodPackagingAssetResponseBodyAssetEgressEndpoints) *GetVodPackagingAssetResponseBodyAsset {
	s.EgressEndpoints = v
	return s
}

func (s *GetVodPackagingAssetResponseBodyAsset) SetGroupName(v string) *GetVodPackagingAssetResponseBodyAsset {
	s.GroupName = &v
	return s
}

func (s *GetVodPackagingAssetResponseBodyAsset) SetInput(v *GetVodPackagingAssetResponseBodyAssetInput) *GetVodPackagingAssetResponseBodyAsset {
	s.Input = v
	return s
}

type GetVodPackagingAssetResponseBodyAssetEgressEndpoints struct {
	// The name of the packaging configuration.
	//
	// example:
	//
	// hls_3s
	ConfigurationName *string `json:"ConfigurationName,omitempty" xml:"ConfigurationName,omitempty"`
	// The asset status. Valid values:
	//
	// 	- Queuing: The asset is waiting for packaging.
	//
	// 	- Playable: The asset is packaged and playable.
	//
	// 	- Failed: The asset fails to be packaged.
	//
	// example:
	//
	// Playable
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The playback URL. If the asset fails to be packaged, no playback URL is returned.
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetVodPackagingAssetResponseBodyAssetEgressEndpoints) String() string {
	return tea.Prettify(s)
}

func (s GetVodPackagingAssetResponseBodyAssetEgressEndpoints) GoString() string {
	return s.String()
}

func (s *GetVodPackagingAssetResponseBodyAssetEgressEndpoints) SetConfigurationName(v string) *GetVodPackagingAssetResponseBodyAssetEgressEndpoints {
	s.ConfigurationName = &v
	return s
}

func (s *GetVodPackagingAssetResponseBodyAssetEgressEndpoints) SetStatus(v string) *GetVodPackagingAssetResponseBodyAssetEgressEndpoints {
	s.Status = &v
	return s
}

func (s *GetVodPackagingAssetResponseBodyAssetEgressEndpoints) SetUrl(v string) *GetVodPackagingAssetResponseBodyAssetEgressEndpoints {
	s.Url = &v
	return s
}

type GetVodPackagingAssetResponseBodyAssetInput struct {
	// The URL of the media file. Only M3U8 files stored in OSS are supported.
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The input type. Only Object Storage Service (OSS) is supported.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetVodPackagingAssetResponseBodyAssetInput) String() string {
	return tea.Prettify(s)
}

func (s GetVodPackagingAssetResponseBodyAssetInput) GoString() string {
	return s.String()
}

func (s *GetVodPackagingAssetResponseBodyAssetInput) SetMedia(v string) *GetVodPackagingAssetResponseBodyAssetInput {
	s.Media = &v
	return s
}

func (s *GetVodPackagingAssetResponseBodyAssetInput) SetType(v string) *GetVodPackagingAssetResponseBodyAssetInput {
	s.Type = &v
	return s
}

type GetVodPackagingAssetResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetVodPackagingAssetResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetVodPackagingAssetResponse) String() string {
	return tea.Prettify(s)
}

func (s GetVodPackagingAssetResponse) GoString() string {
	return s.String()
}

func (s *GetVodPackagingAssetResponse) SetHeaders(v map[string]*string) *GetVodPackagingAssetResponse {
	s.Headers = v
	return s
}

func (s *GetVodPackagingAssetResponse) SetStatusCode(v int32) *GetVodPackagingAssetResponse {
	s.StatusCode = &v
	return s
}

func (s *GetVodPackagingAssetResponse) SetBody(v *GetVodPackagingAssetResponseBody) *GetVodPackagingAssetResponse {
	s.Body = v
	return s
}

type GetVodPackagingConfigurationRequest struct {
	// The name of the packaging configuration.
	//
	// example:
	//
	// hls_3s
	ConfigurationName *string `json:"ConfigurationName,omitempty" xml:"ConfigurationName,omitempty"`
}

func (s GetVodPackagingConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s GetVodPackagingConfigurationRequest) GoString() string {
	return s.String()
}

func (s *GetVodPackagingConfigurationRequest) SetConfigurationName(v string) *GetVodPackagingConfigurationRequest {
	s.ConfigurationName = &v
	return s
}

type GetVodPackagingConfigurationResponseBody struct {
	// The information about the packaging configuration.
	PackagingConfiguration *VodPackagingConfiguration `json:"PackagingConfiguration,omitempty" xml:"PackagingConfiguration,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetVodPackagingConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetVodPackagingConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *GetVodPackagingConfigurationResponseBody) SetPackagingConfiguration(v *VodPackagingConfiguration) *GetVodPackagingConfigurationResponseBody {
	s.PackagingConfiguration = v
	return s
}

func (s *GetVodPackagingConfigurationResponseBody) SetRequestId(v string) *GetVodPackagingConfigurationResponseBody {
	s.RequestId = &v
	return s
}

type GetVodPackagingConfigurationResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetVodPackagingConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetVodPackagingConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetVodPackagingConfigurationResponse) GoString() string {
	return s.String()
}

func (s *GetVodPackagingConfigurationResponse) SetHeaders(v map[string]*string) *GetVodPackagingConfigurationResponse {
	s.Headers = v
	return s
}

func (s *GetVodPackagingConfigurationResponse) SetStatusCode(v int32) *GetVodPackagingConfigurationResponse {
	s.StatusCode = &v
	return s
}

func (s *GetVodPackagingConfigurationResponse) SetBody(v *GetVodPackagingConfigurationResponseBody) *GetVodPackagingConfigurationResponse {
	s.Body = v
	return s
}

type GetVodPackagingGroupRequest struct {
	// The name of the packaging group. The name must be unique and can be up to 128 characters in length. Letters, digits, underscores (_), and hyphens (-) are supported.
	//
	// example:
	//
	// vod_hls
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s GetVodPackagingGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s GetVodPackagingGroupRequest) GoString() string {
	return s.String()
}

func (s *GetVodPackagingGroupRequest) SetGroupName(v string) *GetVodPackagingGroupRequest {
	s.GroupName = &v
	return s
}

type GetVodPackagingGroupResponseBody struct {
	// The information about the packaging group.
	PackagingGroup *VodPackagingGroup `json:"PackagingGroup,omitempty" xml:"PackagingGroup,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// ****36-3C1E-4417-BDB2-1E034F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetVodPackagingGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetVodPackagingGroupResponseBody) GoString() string {
	return s.String()
}

func (s *GetVodPackagingGroupResponseBody) SetPackagingGroup(v *VodPackagingGroup) *GetVodPackagingGroupResponseBody {
	s.PackagingGroup = v
	return s
}

func (s *GetVodPackagingGroupResponseBody) SetRequestId(v string) *GetVodPackagingGroupResponseBody {
	s.RequestId = &v
	return s
}

type GetVodPackagingGroupResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetVodPackagingGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetVodPackagingGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s GetVodPackagingGroupResponse) GoString() string {
	return s.String()
}

func (s *GetVodPackagingGroupResponse) SetHeaders(v map[string]*string) *GetVodPackagingGroupResponse {
	s.Headers = v
	return s
}

func (s *GetVodPackagingGroupResponse) SetStatusCode(v int32) *GetVodPackagingGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *GetVodPackagingGroupResponse) SetBody(v *GetVodPackagingGroupResponseBody) *GetVodPackagingGroupResponse {
	s.Body = v
	return s
}

type GetWorkflowTaskRequest struct {
	// The ID of the workflow task.
	//
	// example:
	//
	// ******4215e042b3966ca5441e******
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s GetWorkflowTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowTaskRequest) GoString() string {
	return s.String()
}

func (s *GetWorkflowTaskRequest) SetTaskId(v string) *GetWorkflowTaskRequest {
	s.TaskId = &v
	return s
}

type GetWorkflowTaskResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******0C-7870-15FE-B96F-8880BB******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the workflow task.
	WorkflowTask *GetWorkflowTaskResponseBodyWorkflowTask `json:"WorkflowTask,omitempty" xml:"WorkflowTask,omitempty" type:"Struct"`
}

func (s GetWorkflowTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowTaskResponseBody) GoString() string {
	return s.String()
}

func (s *GetWorkflowTaskResponseBody) SetRequestId(v string) *GetWorkflowTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetWorkflowTaskResponseBody) SetWorkflowTask(v *GetWorkflowTaskResponseBodyWorkflowTask) *GetWorkflowTaskResponseBody {
	s.WorkflowTask = v
	return s
}

type GetWorkflowTaskResponseBodyWorkflowTask struct {
	// The results for all nodes of the workflow task.
	ActivityResults *string `json:"ActivityResults,omitempty" xml:"ActivityResults,omitempty"`
	// The time when the task was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2023-01-04T02:05:17Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the task was complete. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2023-01-04T02:06:19Z
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The task state.
	//
	// Valid values:
	//
	// 	- Init: The task is being initialized.
	//
	// 	- Failed: The task failed.
	//
	// 	- Canceled: The task is canceled.
	//
	// 	- Processing: The task is in progress.
	//
	// 	- Succeed: The task is successful.
	//
	// example:
	//
	// Succeed
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the workflow task.
	//
	// example:
	//
	// ******4215e042b3966ca5441e******
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The input of the workflow task.
	//
	// example:
	//
	// {
	//
	//       "Type": "Media",
	//
	//       "Media": "******30706071edbfe290b488******"
	//
	// }
	TaskInput *string `json:"TaskInput,omitempty" xml:"TaskInput,omitempty"`
	// The user-defined field that was specified when the workflow task was submitted.
	//
	// example:
	//
	// {"NotifyAddress":"http://xx.xx.xxx"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	// The workflow Information.
	Workflow *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow `json:"Workflow,omitempty" xml:"Workflow,omitempty" type:"Struct"`
}

func (s GetWorkflowTaskResponseBodyWorkflowTask) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowTaskResponseBodyWorkflowTask) GoString() string {
	return s.String()
}

func (s *GetWorkflowTaskResponseBodyWorkflowTask) SetActivityResults(v string) *GetWorkflowTaskResponseBodyWorkflowTask {
	s.ActivityResults = &v
	return s
}

func (s *GetWorkflowTaskResponseBodyWorkflowTask) SetCreateTime(v string) *GetWorkflowTaskResponseBodyWorkflowTask {
	s.CreateTime = &v
	return s
}

func (s *GetWorkflowTaskResponseBodyWorkflowTask) SetFinishTime(v string) *GetWorkflowTaskResponseBodyWorkflowTask {
	s.FinishTime = &v
	return s
}

func (s *GetWorkflowTaskResponseBodyWorkflowTask) SetStatus(v string) *GetWorkflowTaskResponseBodyWorkflowTask {
	s.Status = &v
	return s
}

func (s *GetWorkflowTaskResponseBodyWorkflowTask) SetTaskId(v string) *GetWorkflowTaskResponseBodyWorkflowTask {
	s.TaskId = &v
	return s
}

func (s *GetWorkflowTaskResponseBodyWorkflowTask) SetTaskInput(v string) *GetWorkflowTaskResponseBodyWorkflowTask {
	s.TaskInput = &v
	return s
}

func (s *GetWorkflowTaskResponseBodyWorkflowTask) SetUserData(v string) *GetWorkflowTaskResponseBodyWorkflowTask {
	s.UserData = &v
	return s
}

func (s *GetWorkflowTaskResponseBodyWorkflowTask) SetWorkflow(v *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow) *GetWorkflowTaskResponseBodyWorkflowTask {
	s.Workflow = v
	return s
}

type GetWorkflowTaskResponseBodyWorkflowTaskWorkflow struct {
	// The time when the workflow was created.
	//
	// example:
	//
	// 2022-11-27T10:02:12Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the workflow was last modified.
	//
	// example:
	//
	// 2022-11-29T02:06:19Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The workflow name.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The workflow state.
	//
	// Valid values:
	//
	// 	- Active
	//
	// 	- Inactive
	//
	// example:
	//
	// Active
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The workflow type.
	//
	// Valid values:
	//
	// 	- Customize: custom workflow.
	//
	// 	- System: system workflow.
	//
	// 	- Common: user-created workflow.
	//
	// example:
	//
	// Common
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The workflow ID.
	//
	// example:
	//
	// ******63dca94c609de02ac0d1******
	WorkflowId *string `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
}

func (s GetWorkflowTaskResponseBodyWorkflowTaskWorkflow) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowTaskResponseBodyWorkflowTaskWorkflow) GoString() string {
	return s.String()
}

func (s *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow) SetCreateTime(v string) *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow {
	s.CreateTime = &v
	return s
}

func (s *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow) SetModifiedTime(v string) *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow {
	s.ModifiedTime = &v
	return s
}

func (s *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow) SetName(v string) *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow {
	s.Name = &v
	return s
}

func (s *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow) SetStatus(v string) *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow {
	s.Status = &v
	return s
}

func (s *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow) SetType(v string) *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow {
	s.Type = &v
	return s
}

func (s *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow) SetWorkflowId(v string) *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow {
	s.WorkflowId = &v
	return s
}

type GetWorkflowTaskResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetWorkflowTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetWorkflowTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowTaskResponse) GoString() string {
	return s.String()
}

func (s *GetWorkflowTaskResponse) SetHeaders(v map[string]*string) *GetWorkflowTaskResponse {
	s.Headers = v
	return s
}

func (s *GetWorkflowTaskResponse) SetStatusCode(v int32) *GetWorkflowTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *GetWorkflowTaskResponse) SetBody(v *GetWorkflowTaskResponseBody) *GetWorkflowTaskResponse {
	s.Body = v
	return s
}

type InsertMediaToSearchLibRequest struct {
	ImagesInput *string `json:"ImagesInput,omitempty" xml:"ImagesInput,omitempty"`
	// The URL of the video, audio, or image file that you want to import to the search library.
	//
	// Note: Make sure that you specify a correct file name and the bucket in which the file resides is in the same region where this operation is called. Otherwise, the file cannot be found or the operation may fail.
	//
	// Specify an Object Storage Service (OSS) URL in the following format: oss://[Bucket name]/[File path]. For example, you can specify oss://[example-bucket-****]/[object_path-****].
	//
	// Specify an HTTP URL in the following format: public endpoint. For example, you can specify http://example-test-\\*\\*\\*\\*.mp4.
	//
	// This parameter is required.
	//
	// example:
	//
	// http://example-test-****.mp4
	Input *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// The ID of the media asset. Each media ID is unique. If you leave this parameter empty, a media ID is automatically generated for this parameter.
	//
	// example:
	//
	// 411bed50018971edb60b0764a0ec6***
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The type of the media asset. Valid values:
	//
	// 	- video (default)
	//
	// 	- image
	//
	// 	- audio
	//
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// The message body.
	//
	// example:
	//
	// {}
	MsgBody *string `json:"MsgBody,omitempty" xml:"MsgBody,omitempty"`
	// The name of the search library. Default value: ims-default-search-lib.
	//
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
}

func (s InsertMediaToSearchLibRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertMediaToSearchLibRequest) GoString() string {
	return s.String()
}

func (s *InsertMediaToSearchLibRequest) SetImagesInput(v string) *InsertMediaToSearchLibRequest {
	s.ImagesInput = &v
	return s
}

func (s *InsertMediaToSearchLibRequest) SetInput(v string) *InsertMediaToSearchLibRequest {
	s.Input = &v
	return s
}

func (s *InsertMediaToSearchLibRequest) SetMediaId(v string) *InsertMediaToSearchLibRequest {
	s.MediaId = &v
	return s
}

func (s *InsertMediaToSearchLibRequest) SetMediaType(v string) *InsertMediaToSearchLibRequest {
	s.MediaType = &v
	return s
}

func (s *InsertMediaToSearchLibRequest) SetMsgBody(v string) *InsertMediaToSearchLibRequest {
	s.MsgBody = &v
	return s
}

func (s *InsertMediaToSearchLibRequest) SetSearchLibName(v string) *InsertMediaToSearchLibRequest {
	s.SearchLibName = &v
	return s
}

type InsertMediaToSearchLibResponseBody struct {
	// The status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// *****ACB-44F2-5F2D-88D7-1283E70*****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s InsertMediaToSearchLibResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertMediaToSearchLibResponseBody) GoString() string {
	return s.String()
}

func (s *InsertMediaToSearchLibResponseBody) SetCode(v string) *InsertMediaToSearchLibResponseBody {
	s.Code = &v
	return s
}

func (s *InsertMediaToSearchLibResponseBody) SetMediaId(v string) *InsertMediaToSearchLibResponseBody {
	s.MediaId = &v
	return s
}

func (s *InsertMediaToSearchLibResponseBody) SetRequestId(v string) *InsertMediaToSearchLibResponseBody {
	s.RequestId = &v
	return s
}

func (s *InsertMediaToSearchLibResponseBody) SetSuccess(v string) *InsertMediaToSearchLibResponseBody {
	s.Success = &v
	return s
}

type InsertMediaToSearchLibResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InsertMediaToSearchLibResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InsertMediaToSearchLibResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertMediaToSearchLibResponse) GoString() string {
	return s.String()
}

func (s *InsertMediaToSearchLibResponse) SetHeaders(v map[string]*string) *InsertMediaToSearchLibResponse {
	s.Headers = v
	return s
}

func (s *InsertMediaToSearchLibResponse) SetStatusCode(v int32) *InsertMediaToSearchLibResponse {
	s.StatusCode = &v
	return s
}

func (s *InsertMediaToSearchLibResponse) SetBody(v *InsertMediaToSearchLibResponseBody) *InsertMediaToSearchLibResponse {
	s.Body = v
	return s
}

type ListAIAgentDialoguesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 17358082464030
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// DESC
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 20
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RoundLimit *string `json:"RoundLimit,omitempty" xml:"RoundLimit,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// f27f9b9be28642a88e18****
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListAIAgentDialoguesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAIAgentDialoguesRequest) GoString() string {
	return s.String()
}

func (s *ListAIAgentDialoguesRequest) SetEndTime(v int64) *ListAIAgentDialoguesRequest {
	s.EndTime = &v
	return s
}

func (s *ListAIAgentDialoguesRequest) SetOrder(v string) *ListAIAgentDialoguesRequest {
	s.Order = &v
	return s
}

func (s *ListAIAgentDialoguesRequest) SetPageNumber(v int64) *ListAIAgentDialoguesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListAIAgentDialoguesRequest) SetPageSize(v int32) *ListAIAgentDialoguesRequest {
	s.PageSize = &v
	return s
}

func (s *ListAIAgentDialoguesRequest) SetRoundLimit(v string) *ListAIAgentDialoguesRequest {
	s.RoundLimit = &v
	return s
}

func (s *ListAIAgentDialoguesRequest) SetSessionId(v string) *ListAIAgentDialoguesRequest {
	s.SessionId = &v
	return s
}

func (s *ListAIAgentDialoguesRequest) SetStartTime(v int64) *ListAIAgentDialoguesRequest {
	s.StartTime = &v
	return s
}

type ListAIAgentDialoguesResponseBody struct {
	Dialogues []*ListAIAgentDialoguesResponseBodyDialogues `json:"Dialogues,omitempty" xml:"Dialogues,omitempty" type:"Repeated"`
	// example:
	//
	// 7B117AF5-***************
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListAIAgentDialoguesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAIAgentDialoguesResponseBody) GoString() string {
	return s.String()
}

func (s *ListAIAgentDialoguesResponseBody) SetDialogues(v []*ListAIAgentDialoguesResponseBodyDialogues) *ListAIAgentDialoguesResponseBody {
	s.Dialogues = v
	return s
}

func (s *ListAIAgentDialoguesResponseBody) SetRequestId(v string) *ListAIAgentDialoguesResponseBody {
	s.RequestId = &v
	return s
}

type ListAIAgentDialoguesResponseBodyDialogues struct {
	AttachedFileList []*ListAIAgentDialoguesResponseBodyDialoguesAttachedFileList `json:"AttachedFileList,omitempty" xml:"AttachedFileList,omitempty" type:"Repeated"`
	// example:
	//
	// 19de81b3b3d94abda22****
	DialogueId *string `json:"DialogueId,omitempty" xml:"DialogueId,omitempty"`
	Extend     *string `json:"Extend,omitempty" xml:"Extend,omitempty"`
	NodeId     *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// example:
	//
	// user
	Producer      *string `json:"Producer,omitempty" xml:"Producer,omitempty"`
	ReasoningText *string `json:"ReasoningText,omitempty" xml:"ReasoningText,omitempty"`
	// example:
	//
	// f27f9b9be28642a88e18****
	RoundId *string `json:"RoundId,omitempty" xml:"RoundId,omitempty"`
	Source  *string `json:"Source,omitempty" xml:"Source,omitempty"`
	Text    *string `json:"Text,omitempty" xml:"Text,omitempty"`
	// example:
	//
	// 1734511087000
	Time *int64  `json:"Time,omitempty" xml:"Time,omitempty"`
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListAIAgentDialoguesResponseBodyDialogues) String() string {
	return tea.Prettify(s)
}

func (s ListAIAgentDialoguesResponseBodyDialogues) GoString() string {
	return s.String()
}

func (s *ListAIAgentDialoguesResponseBodyDialogues) SetAttachedFileList(v []*ListAIAgentDialoguesResponseBodyDialoguesAttachedFileList) *ListAIAgentDialoguesResponseBodyDialogues {
	s.AttachedFileList = v
	return s
}

func (s *ListAIAgentDialoguesResponseBodyDialogues) SetDialogueId(v string) *ListAIAgentDialoguesResponseBodyDialogues {
	s.DialogueId = &v
	return s
}

func (s *ListAIAgentDialoguesResponseBodyDialogues) SetExtend(v string) *ListAIAgentDialoguesResponseBodyDialogues {
	s.Extend = &v
	return s
}

func (s *ListAIAgentDialoguesResponseBodyDialogues) SetNodeId(v string) *ListAIAgentDialoguesResponseBodyDialogues {
	s.NodeId = &v
	return s
}

func (s *ListAIAgentDialoguesResponseBodyDialogues) SetProducer(v string) *ListAIAgentDialoguesResponseBodyDialogues {
	s.Producer = &v
	return s
}

func (s *ListAIAgentDialoguesResponseBodyDialogues) SetReasoningText(v string) *ListAIAgentDialoguesResponseBodyDialogues {
	s.ReasoningText = &v
	return s
}

func (s *ListAIAgentDialoguesResponseBodyDialogues) SetRoundId(v string) *ListAIAgentDialoguesResponseBodyDialogues {
	s.RoundId = &v
	return s
}

func (s *ListAIAgentDialoguesResponseBodyDialogues) SetSource(v string) *ListAIAgentDialoguesResponseBodyDialogues {
	s.Source = &v
	return s
}

func (s *ListAIAgentDialoguesResponseBodyDialogues) SetText(v string) *ListAIAgentDialoguesResponseBodyDialogues {
	s.Text = &v
	return s
}

func (s *ListAIAgentDialoguesResponseBodyDialogues) SetTime(v int64) *ListAIAgentDialoguesResponseBodyDialogues {
	s.Time = &v
	return s
}

func (s *ListAIAgentDialoguesResponseBodyDialogues) SetType(v string) *ListAIAgentDialoguesResponseBodyDialogues {
	s.Type = &v
	return s
}

type ListAIAgentDialoguesResponseBodyDialoguesAttachedFileList struct {
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
	Id     *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Type   *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	Url    *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s ListAIAgentDialoguesResponseBodyDialoguesAttachedFileList) String() string {
	return tea.Prettify(s)
}

func (s ListAIAgentDialoguesResponseBodyDialoguesAttachedFileList) GoString() string {
	return s.String()
}

func (s *ListAIAgentDialoguesResponseBodyDialoguesAttachedFileList) SetFormat(v string) *ListAIAgentDialoguesResponseBodyDialoguesAttachedFileList {
	s.Format = &v
	return s
}

func (s *ListAIAgentDialoguesResponseBodyDialoguesAttachedFileList) SetId(v string) *ListAIAgentDialoguesResponseBodyDialoguesAttachedFileList {
	s.Id = &v
	return s
}

func (s *ListAIAgentDialoguesResponseBodyDialoguesAttachedFileList) SetName(v string) *ListAIAgentDialoguesResponseBodyDialoguesAttachedFileList {
	s.Name = &v
	return s
}

func (s *ListAIAgentDialoguesResponseBodyDialoguesAttachedFileList) SetType(v int32) *ListAIAgentDialoguesResponseBodyDialoguesAttachedFileList {
	s.Type = &v
	return s
}

func (s *ListAIAgentDialoguesResponseBodyDialoguesAttachedFileList) SetUrl(v string) *ListAIAgentDialoguesResponseBodyDialoguesAttachedFileList {
	s.Url = &v
	return s
}

type ListAIAgentDialoguesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAIAgentDialoguesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAIAgentDialoguesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAIAgentDialoguesResponse) GoString() string {
	return s.String()
}

func (s *ListAIAgentDialoguesResponse) SetHeaders(v map[string]*string) *ListAIAgentDialoguesResponse {
	s.Headers = v
	return s
}

func (s *ListAIAgentDialoguesResponse) SetStatusCode(v int32) *ListAIAgentDialoguesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAIAgentDialoguesResponse) SetBody(v *ListAIAgentDialoguesResponseBody) *ListAIAgentDialoguesResponse {
	s.Body = v
	return s
}

type ListAIAgentInstanceRequest struct {
	// The ID of the AI agent.
	//
	// This parameter is required.
	//
	// example:
	//
	// 39f8e0bc005e4f309379701645f4***
	AIAgentId *string `json:"AIAgentId,omitempty" xml:"AIAgentId,omitempty"`
	// The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. This parameter does not have a default value.
	//
	// example:
	//
	// 2023-01-02T00:00:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The page number. Default value: 1. Valid values: 1 to 100.
	//
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Valid values: 0 to 100.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. This parameter does not have a default value.
	//
	// example:
	//
	// 2023-01-01T00:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListAIAgentInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAIAgentInstanceRequest) GoString() string {
	return s.String()
}

func (s *ListAIAgentInstanceRequest) SetAIAgentId(v string) *ListAIAgentInstanceRequest {
	s.AIAgentId = &v
	return s
}

func (s *ListAIAgentInstanceRequest) SetEndTime(v string) *ListAIAgentInstanceRequest {
	s.EndTime = &v
	return s
}

func (s *ListAIAgentInstanceRequest) SetPageNumber(v int64) *ListAIAgentInstanceRequest {
	s.PageNumber = &v
	return s
}

func (s *ListAIAgentInstanceRequest) SetPageSize(v int64) *ListAIAgentInstanceRequest {
	s.PageSize = &v
	return s
}

func (s *ListAIAgentInstanceRequest) SetStartTime(v string) *ListAIAgentInstanceRequest {
	s.StartTime = &v
	return s
}

type ListAIAgentInstanceResponseBody struct {
	// The list of the AI agents.
	Instances []*ListAIAgentInstanceResponseBodyInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 7B117AF5-2A16-412C-B127-FA6175ED1AD0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListAIAgentInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAIAgentInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ListAIAgentInstanceResponseBody) SetInstances(v []*ListAIAgentInstanceResponseBodyInstances) *ListAIAgentInstanceResponseBody {
	s.Instances = v
	return s
}

func (s *ListAIAgentInstanceResponseBody) SetRequestId(v string) *ListAIAgentInstanceResponseBody {
	s.RequestId = &v
	return s
}

type ListAIAgentInstanceResponseBodyInstances struct {
	AgentConfig *AIAgentConfig `json:"AgentConfig,omitempty" xml:"AgentConfig,omitempty"`
	// The URL of the call log file for the AI agent. The structure of the file is CallLog in the JSON format.
	//
	// example:
	//
	// https://example.com/call_logs/12345.json
	CallLogUrl *string `json:"CallLogUrl,omitempty" xml:"CallLogUrl,omitempty"`
	// The runtime configurations of the AI agent.
	//
	// example:
	//
	// {"VoiceChat":{"AgentUserId":"voice_agent_001","ChannelId":"voice_channel_001","AuthToken":"your_voice_chat_auth_token"}}
	RuntimeConfig *AIAgentRuntimeConfig `json:"RuntimeConfig,omitempty" xml:"RuntimeConfig,omitempty"`
	// The state of the instance. Valid values:
	//
	// 	- Executing
	//
	// 	- Finished
	//
	// example:
	//
	// Finished
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// Deprecated
	//
	// The template configurations of the AI agent.
	//
	// example:
	//
	// {"VoiceChat": {"VoiceId": "zhixiaoxia"}}
	TemplateConfig *AIAgentTemplateConfig `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// The custom information.
	//
	// example:
	//
	// {"Email":"johndoe@example.com","Preferences":{"Language":"en"}}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s ListAIAgentInstanceResponseBodyInstances) String() string {
	return tea.Prettify(s)
}

func (s ListAIAgentInstanceResponseBodyInstances) GoString() string {
	return s.String()
}

func (s *ListAIAgentInstanceResponseBodyInstances) SetAgentConfig(v *AIAgentConfig) *ListAIAgentInstanceResponseBodyInstances {
	s.AgentConfig = v
	return s
}

func (s *ListAIAgentInstanceResponseBodyInstances) SetCallLogUrl(v string) *ListAIAgentInstanceResponseBodyInstances {
	s.CallLogUrl = &v
	return s
}

func (s *ListAIAgentInstanceResponseBodyInstances) SetRuntimeConfig(v *AIAgentRuntimeConfig) *ListAIAgentInstanceResponseBodyInstances {
	s.RuntimeConfig = v
	return s
}

func (s *ListAIAgentInstanceResponseBodyInstances) SetStatus(v string) *ListAIAgentInstanceResponseBodyInstances {
	s.Status = &v
	return s
}

func (s *ListAIAgentInstanceResponseBodyInstances) SetTemplateConfig(v *AIAgentTemplateConfig) *ListAIAgentInstanceResponseBodyInstances {
	s.TemplateConfig = v
	return s
}

func (s *ListAIAgentInstanceResponseBodyInstances) SetUserData(v string) *ListAIAgentInstanceResponseBodyInstances {
	s.UserData = &v
	return s
}

type ListAIAgentInstanceResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAIAgentInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAIAgentInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAIAgentInstanceResponse) GoString() string {
	return s.String()
}

func (s *ListAIAgentInstanceResponse) SetHeaders(v map[string]*string) *ListAIAgentInstanceResponse {
	s.Headers = v
	return s
}

func (s *ListAIAgentInstanceResponse) SetStatusCode(v int32) *ListAIAgentInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAIAgentInstanceResponse) SetBody(v *ListAIAgentInstanceResponseBody) *ListAIAgentInstanceResponse {
	s.Body = v
	return s
}

type ListAIAgentPhoneNumberRequest struct {
	Number *string `json:"Number,omitempty" xml:"Number,omitempty"`
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 50
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Status   *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListAIAgentPhoneNumberRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAIAgentPhoneNumberRequest) GoString() string {
	return s.String()
}

func (s *ListAIAgentPhoneNumberRequest) SetNumber(v string) *ListAIAgentPhoneNumberRequest {
	s.Number = &v
	return s
}

func (s *ListAIAgentPhoneNumberRequest) SetPageNumber(v int64) *ListAIAgentPhoneNumberRequest {
	s.PageNumber = &v
	return s
}

func (s *ListAIAgentPhoneNumberRequest) SetPageSize(v int64) *ListAIAgentPhoneNumberRequest {
	s.PageSize = &v
	return s
}

func (s *ListAIAgentPhoneNumberRequest) SetStatus(v int32) *ListAIAgentPhoneNumberRequest {
	s.Status = &v
	return s
}

type ListAIAgentPhoneNumberResponseBody struct {
	Data []*ListAIAgentPhoneNumberResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// ************16-412C-B127-******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 186
	TotalNumber *int32 `json:"TotalNumber,omitempty" xml:"TotalNumber,omitempty"`
}

func (s ListAIAgentPhoneNumberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAIAgentPhoneNumberResponseBody) GoString() string {
	return s.String()
}

func (s *ListAIAgentPhoneNumberResponseBody) SetData(v []*ListAIAgentPhoneNumberResponseBodyData) *ListAIAgentPhoneNumberResponseBody {
	s.Data = v
	return s
}

func (s *ListAIAgentPhoneNumberResponseBody) SetPageNumber(v int32) *ListAIAgentPhoneNumberResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListAIAgentPhoneNumberResponseBody) SetPageSize(v int32) *ListAIAgentPhoneNumberResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListAIAgentPhoneNumberResponseBody) SetRequestId(v string) *ListAIAgentPhoneNumberResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAIAgentPhoneNumberResponseBody) SetTotalNumber(v int32) *ListAIAgentPhoneNumberResponseBody {
	s.TotalNumber = &v
	return s
}

type ListAIAgentPhoneNumberResponseBodyData struct {
	// example:
	//
	// 132*****683
	PhoneNumber *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	// example:
	//
	// 1
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListAIAgentPhoneNumberResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListAIAgentPhoneNumberResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListAIAgentPhoneNumberResponseBodyData) SetPhoneNumber(v string) *ListAIAgentPhoneNumberResponseBodyData {
	s.PhoneNumber = &v
	return s
}

func (s *ListAIAgentPhoneNumberResponseBodyData) SetStatus(v int32) *ListAIAgentPhoneNumberResponseBodyData {
	s.Status = &v
	return s
}

type ListAIAgentPhoneNumberResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAIAgentPhoneNumberResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAIAgentPhoneNumberResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAIAgentPhoneNumberResponse) GoString() string {
	return s.String()
}

func (s *ListAIAgentPhoneNumberResponse) SetHeaders(v map[string]*string) *ListAIAgentPhoneNumberResponse {
	s.Headers = v
	return s
}

func (s *ListAIAgentPhoneNumberResponse) SetStatusCode(v int32) *ListAIAgentPhoneNumberResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAIAgentPhoneNumberResponse) SetBody(v *ListAIAgentPhoneNumberResponseBody) *ListAIAgentPhoneNumberResponse {
	s.Body = v
	return s
}

type ListAdInsertionsRequest struct {
	// The configuration name. Fuzzy match is supported.
	//
	// example:
	//
	// ad
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The maximum number of entries to retrieve in a subsequent request. If this parameter is used, the pagination parameters become invalid. Default value: 10.
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token that is used in the next request to retrieve a new page of results. If this parameter is used, the pagination parameters become invalid.
	//
	// example:
	//
	// ******8EqYpQbZ6Eh7+Zz8DxVYoQ*****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The sorting order of the configurations by creation time. asc: ascending. desc: descending.
	//
	// example:
	//
	// asc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
}

func (s ListAdInsertionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAdInsertionsRequest) GoString() string {
	return s.String()
}

func (s *ListAdInsertionsRequest) SetKeyword(v string) *ListAdInsertionsRequest {
	s.Keyword = &v
	return s
}

func (s *ListAdInsertionsRequest) SetMaxResults(v int32) *ListAdInsertionsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListAdInsertionsRequest) SetNextToken(v string) *ListAdInsertionsRequest {
	s.NextToken = &v
	return s
}

func (s *ListAdInsertionsRequest) SetPageNo(v int64) *ListAdInsertionsRequest {
	s.PageNo = &v
	return s
}

func (s *ListAdInsertionsRequest) SetPageSize(v int64) *ListAdInsertionsRequest {
	s.PageSize = &v
	return s
}

func (s *ListAdInsertionsRequest) SetSortBy(v string) *ListAdInsertionsRequest {
	s.SortBy = &v
	return s
}

type ListAdInsertionsResponseBody struct {
	// Array
	Configs []*ListAdInsertionsResponseBodyConfigs `json:"Configs,omitempty" xml:"Configs,omitempty" type:"Repeated"`
	// The maximum number of entries to retrieve in a subsequent request. If this parameter is used, the pagination parameters become invalid.
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token that is used in the next request to retrieve a new page of results. If this parameter is used, the pagination parameters become invalid.
	//
	// example:
	//
	// ******8EqYpQbZ6Eh7+Zz8DxVYoQ*****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The sorting order of the configurations by creation time. asc: ascending. desc: descending.
	//
	// example:
	//
	// asc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 10
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListAdInsertionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAdInsertionsResponseBody) GoString() string {
	return s.String()
}

func (s *ListAdInsertionsResponseBody) SetConfigs(v []*ListAdInsertionsResponseBodyConfigs) *ListAdInsertionsResponseBody {
	s.Configs = v
	return s
}

func (s *ListAdInsertionsResponseBody) SetMaxResults(v int32) *ListAdInsertionsResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListAdInsertionsResponseBody) SetNextToken(v string) *ListAdInsertionsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListAdInsertionsResponseBody) SetPageNo(v int64) *ListAdInsertionsResponseBody {
	s.PageNo = &v
	return s
}

func (s *ListAdInsertionsResponseBody) SetPageSize(v int64) *ListAdInsertionsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListAdInsertionsResponseBody) SetRequestId(v string) *ListAdInsertionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAdInsertionsResponseBody) SetSortBy(v string) *ListAdInsertionsResponseBody {
	s.SortBy = &v
	return s
}

func (s *ListAdInsertionsResponseBody) SetTotalCount(v int64) *ListAdInsertionsResponseBody {
	s.TotalCount = &v
	return s
}

type ListAdInsertionsResponseBodyConfigs struct {
	// Indicates whether ad marker passthrough is enabled.
	//
	// example:
	//
	// ON
	AdMarkerPassthrough *string `json:"AdMarkerPassthrough,omitempty" xml:"AdMarkerPassthrough,omitempty"`
	// The request URL of the ad decision server (ADS).
	//
	// example:
	//
	// http://ads.com/ad1?param1=[palyer_params.p1]
	AdsUrl *string `json:"AdsUrl,omitempty" xml:"AdsUrl,omitempty"`
	// The CDN configurations.
	CdnConfig *ListAdInsertionsResponseBodyConfigsCdnConfig `json:"CdnConfig,omitempty" xml:"CdnConfig,omitempty" type:"Struct"`
	// The player parameter variables and aliases.
	//
	// example:
	//
	// {
	//
	//       "player_params.p1": {
	//
	//             "1": "abc"
	//
	//       }
	//
	// }
	ConfigAliases *string `json:"ConfigAliases,omitempty" xml:"ConfigAliases,omitempty"`
	// The URL prefix for the source content.
	//
	// example:
	//
	// https://source.com/
	ContentUrlPrefix *string `json:"ContentUrlPrefix,omitempty" xml:"ContentUrlPrefix,omitempty"`
	// The time when the configuration was created.
	//
	// example:
	//
	// 2024-06-13T08:26:09Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the configuration was last modified.
	//
	// example:
	//
	// 2024-06-13T08:26:09Z
	LastModified *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	// The playback endpoint configuration.
	ManifestEndpointConfig *ListAdInsertionsResponseBodyConfigsManifestEndpointConfig `json:"ManifestEndpointConfig,omitempty" xml:"ManifestEndpointConfig,omitempty" type:"Struct"`
	// The name of the ad insertion configuration.
	//
	// example:
	//
	// my_ad
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The personalization threshold that defines the maximum duration of underfilled time allowed in an ad break.
	//
	// example:
	//
	// 5
	PersonalizationThreshold *int32 `json:"PersonalizationThreshold,omitempty" xml:"PersonalizationThreshold,omitempty"`
	// The URL of the slate ad.
	//
	// example:
	//
	// http://storage.com/slate1.mp4
	SlateAdUrl *string `json:"SlateAdUrl,omitempty" xml:"SlateAdUrl,omitempty"`
}

func (s ListAdInsertionsResponseBodyConfigs) String() string {
	return tea.Prettify(s)
}

func (s ListAdInsertionsResponseBodyConfigs) GoString() string {
	return s.String()
}

func (s *ListAdInsertionsResponseBodyConfigs) SetAdMarkerPassthrough(v string) *ListAdInsertionsResponseBodyConfigs {
	s.AdMarkerPassthrough = &v
	return s
}

func (s *ListAdInsertionsResponseBodyConfigs) SetAdsUrl(v string) *ListAdInsertionsResponseBodyConfigs {
	s.AdsUrl = &v
	return s
}

func (s *ListAdInsertionsResponseBodyConfigs) SetCdnConfig(v *ListAdInsertionsResponseBodyConfigsCdnConfig) *ListAdInsertionsResponseBodyConfigs {
	s.CdnConfig = v
	return s
}

func (s *ListAdInsertionsResponseBodyConfigs) SetConfigAliases(v string) *ListAdInsertionsResponseBodyConfigs {
	s.ConfigAliases = &v
	return s
}

func (s *ListAdInsertionsResponseBodyConfigs) SetContentUrlPrefix(v string) *ListAdInsertionsResponseBodyConfigs {
	s.ContentUrlPrefix = &v
	return s
}

func (s *ListAdInsertionsResponseBodyConfigs) SetCreateTime(v string) *ListAdInsertionsResponseBodyConfigs {
	s.CreateTime = &v
	return s
}

func (s *ListAdInsertionsResponseBodyConfigs) SetLastModified(v string) *ListAdInsertionsResponseBodyConfigs {
	s.LastModified = &v
	return s
}

func (s *ListAdInsertionsResponseBodyConfigs) SetManifestEndpointConfig(v *ListAdInsertionsResponseBodyConfigsManifestEndpointConfig) *ListAdInsertionsResponseBodyConfigs {
	s.ManifestEndpointConfig = v
	return s
}

func (s *ListAdInsertionsResponseBodyConfigs) SetName(v string) *ListAdInsertionsResponseBodyConfigs {
	s.Name = &v
	return s
}

func (s *ListAdInsertionsResponseBodyConfigs) SetPersonalizationThreshold(v int32) *ListAdInsertionsResponseBodyConfigs {
	s.PersonalizationThreshold = &v
	return s
}

func (s *ListAdInsertionsResponseBodyConfigs) SetSlateAdUrl(v string) *ListAdInsertionsResponseBodyConfigs {
	s.SlateAdUrl = &v
	return s
}

type ListAdInsertionsResponseBodyConfigsCdnConfig struct {
	// The CDN prefix for ad segments.
	//
	// example:
	//
	// http://cdn.com/
	AdSegmentUrlPrefix *string `json:"AdSegmentUrlPrefix,omitempty" xml:"AdSegmentUrlPrefix,omitempty"`
	// The CDN prefix for content segments.
	//
	// example:
	//
	// http://cdn.com/
	ContentSegmentUrlPrefix *string `json:"ContentSegmentUrlPrefix,omitempty" xml:"ContentSegmentUrlPrefix,omitempty"`
}

func (s ListAdInsertionsResponseBodyConfigsCdnConfig) String() string {
	return tea.Prettify(s)
}

func (s ListAdInsertionsResponseBodyConfigsCdnConfig) GoString() string {
	return s.String()
}

func (s *ListAdInsertionsResponseBodyConfigsCdnConfig) SetAdSegmentUrlPrefix(v string) *ListAdInsertionsResponseBodyConfigsCdnConfig {
	s.AdSegmentUrlPrefix = &v
	return s
}

func (s *ListAdInsertionsResponseBodyConfigsCdnConfig) SetContentSegmentUrlPrefix(v string) *ListAdInsertionsResponseBodyConfigsCdnConfig {
	s.ContentSegmentUrlPrefix = &v
	return s
}

type ListAdInsertionsResponseBodyConfigsManifestEndpointConfig struct {
	// DASH清单播放端点前缀
	DashPrefix *string `json:"DashPrefix,omitempty" xml:"DashPrefix,omitempty"`
	// The prefix of the playback endpoint for HLS manifests.
	HlsPrefix *string `json:"HlsPrefix,omitempty" xml:"HlsPrefix,omitempty"`
}

func (s ListAdInsertionsResponseBodyConfigsManifestEndpointConfig) String() string {
	return tea.Prettify(s)
}

func (s ListAdInsertionsResponseBodyConfigsManifestEndpointConfig) GoString() string {
	return s.String()
}

func (s *ListAdInsertionsResponseBodyConfigsManifestEndpointConfig) SetDashPrefix(v string) *ListAdInsertionsResponseBodyConfigsManifestEndpointConfig {
	s.DashPrefix = &v
	return s
}

func (s *ListAdInsertionsResponseBodyConfigsManifestEndpointConfig) SetHlsPrefix(v string) *ListAdInsertionsResponseBodyConfigsManifestEndpointConfig {
	s.HlsPrefix = &v
	return s
}

type ListAdInsertionsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAdInsertionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAdInsertionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAdInsertionsResponse) GoString() string {
	return s.String()
}

func (s *ListAdInsertionsResponse) SetHeaders(v map[string]*string) *ListAdInsertionsResponse {
	s.Headers = v
	return s
}

func (s *ListAdInsertionsResponse) SetStatusCode(v int32) *ListAdInsertionsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAdInsertionsResponse) SetBody(v *ListAdInsertionsResponseBody) *ListAdInsertionsResponse {
	s.Body = v
	return s
}

type ListAlertsRequest struct {
	// The alert type.
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The end of the time range to query.
	//
	// example:
	//
	// 2024-11-22T16:10:45Z
	GmtEnd *string `json:"GmtEnd,omitempty" xml:"GmtEnd,omitempty"`
	// The beginning of the time range to query.
	//
	// example:
	//
	// 2024-11-21T16:10:45Z
	GmtStart *string `json:"GmtStart,omitempty" xml:"GmtStart,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ARN of the source or program.
	//
	// This parameter is required.
	//
	// example:
	//
	// acs:ims:mediaweaver:<regionId>:<userId>:vodSource/mySourceLocation/MySource
	ResourceArn *string `json:"ResourceArn,omitempty" xml:"ResourceArn,omitempty"`
	// The sorting order. By default, the query results are sorted by creation time in descending order. Valid values: asc and desc.
	//
	// example:
	//
	// asc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The sorting order by modification time. Valid values: asc and desc.
	//
	// example:
	//
	// asc
	SortByModifiedTime *string `json:"SortByModifiedTime,omitempty" xml:"SortByModifiedTime,omitempty"`
}

func (s ListAlertsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAlertsRequest) GoString() string {
	return s.String()
}

func (s *ListAlertsRequest) SetCategory(v string) *ListAlertsRequest {
	s.Category = &v
	return s
}

func (s *ListAlertsRequest) SetGmtEnd(v string) *ListAlertsRequest {
	s.GmtEnd = &v
	return s
}

func (s *ListAlertsRequest) SetGmtStart(v string) *ListAlertsRequest {
	s.GmtStart = &v
	return s
}

func (s *ListAlertsRequest) SetPageNo(v int32) *ListAlertsRequest {
	s.PageNo = &v
	return s
}

func (s *ListAlertsRequest) SetPageSize(v int32) *ListAlertsRequest {
	s.PageSize = &v
	return s
}

func (s *ListAlertsRequest) SetResourceArn(v string) *ListAlertsRequest {
	s.ResourceArn = &v
	return s
}

func (s *ListAlertsRequest) SetSortBy(v string) *ListAlertsRequest {
	s.SortBy = &v
	return s
}

func (s *ListAlertsRequest) SetSortByModifiedTime(v string) *ListAlertsRequest {
	s.SortByModifiedTime = &v
	return s
}

type ListAlertsResponseBody struct {
	// The alerts.
	Alerts []*ListAlertsResponseBodyAlerts `json:"Alerts,omitempty" xml:"Alerts,omitempty" type:"Repeated"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10. Valid values: 1 to 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// **Request ID**
	//
	// example:
	//
	// xxx-xxxx-xxxxx-xxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListAlertsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAlertsResponseBody) GoString() string {
	return s.String()
}

func (s *ListAlertsResponseBody) SetAlerts(v []*ListAlertsResponseBodyAlerts) *ListAlertsResponseBody {
	s.Alerts = v
	return s
}

func (s *ListAlertsResponseBody) SetPageNo(v int32) *ListAlertsResponseBody {
	s.PageNo = &v
	return s
}

func (s *ListAlertsResponseBody) SetPageSize(v int32) *ListAlertsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListAlertsResponseBody) SetRequestId(v string) *ListAlertsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAlertsResponseBody) SetTotalCount(v int32) *ListAlertsResponseBody {
	s.TotalCount = &v
	return s
}

type ListAlertsResponseBodyAlerts struct {
	// The alert type.
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The error code.
	//
	// example:
	//
	// ScheduleError
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The time when the alert was received in UTC.
	//
	// example:
	//
	// 2024-07-16T10:03Z
	GmtCreate *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	// The time when the alert was modified in UTC.
	//
	// example:
	//
	// 2024-07-16T10:03Z
	GmtModified *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	// The error message.
	//
	// example:
	//
	// xxxxx
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ARN of the related resource.
	//
	// example:
	//
	// acs:ims:mediaweaver:<regionId>:<userId>:vodSource/mySourceLocation/MySource
	RelatedResourceArns *string `json:"RelatedResourceArns,omitempty" xml:"RelatedResourceArns,omitempty"`
	// The ARN of the resource.
	//
	// example:
	//
	// acs:ims:mediaweaver:<regionId>:<userId>:vodSource/mySourceLocation/MySource
	ResourceArn *string `json:"ResourceArn,omitempty" xml:"ResourceArn,omitempty"`
}

func (s ListAlertsResponseBodyAlerts) String() string {
	return tea.Prettify(s)
}

func (s ListAlertsResponseBodyAlerts) GoString() string {
	return s.String()
}

func (s *ListAlertsResponseBodyAlerts) SetCategory(v string) *ListAlertsResponseBodyAlerts {
	s.Category = &v
	return s
}

func (s *ListAlertsResponseBodyAlerts) SetCode(v string) *ListAlertsResponseBodyAlerts {
	s.Code = &v
	return s
}

func (s *ListAlertsResponseBodyAlerts) SetGmtCreate(v string) *ListAlertsResponseBodyAlerts {
	s.GmtCreate = &v
	return s
}

func (s *ListAlertsResponseBodyAlerts) SetGmtModified(v string) *ListAlertsResponseBodyAlerts {
	s.GmtModified = &v
	return s
}

func (s *ListAlertsResponseBodyAlerts) SetMessage(v string) *ListAlertsResponseBodyAlerts {
	s.Message = &v
	return s
}

func (s *ListAlertsResponseBodyAlerts) SetRelatedResourceArns(v string) *ListAlertsResponseBodyAlerts {
	s.RelatedResourceArns = &v
	return s
}

func (s *ListAlertsResponseBodyAlerts) SetResourceArn(v string) *ListAlertsResponseBodyAlerts {
	s.ResourceArn = &v
	return s
}

type ListAlertsResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAlertsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAlertsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAlertsResponse) GoString() string {
	return s.String()
}

func (s *ListAlertsResponse) SetHeaders(v map[string]*string) *ListAlertsResponse {
	s.Headers = v
	return s
}

func (s *ListAlertsResponse) SetStatusCode(v int32) *ListAlertsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAlertsResponse) SetBody(v *ListAlertsResponseBody) *ListAlertsResponse {
	s.Body = v
	return s
}

type ListAllPublicMediaTagsRequest struct {
	// The business type of the media asset.
	//
	// example:
	//
	// "sticker"
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// The entity ID, which is used to distinguish between media assets of different types in the public domain.
	//
	// Set this parameter to Copyright_Music, which indicates music in the public domain.
	//
	// example:
	//
	// Copyright_Music
	EntityId *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
}

func (s ListAllPublicMediaTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAllPublicMediaTagsRequest) GoString() string {
	return s.String()
}

func (s *ListAllPublicMediaTagsRequest) SetBusinessType(v string) *ListAllPublicMediaTagsRequest {
	s.BusinessType = &v
	return s
}

func (s *ListAllPublicMediaTagsRequest) SetEntityId(v string) *ListAllPublicMediaTagsRequest {
	s.EntityId = &v
	return s
}

type ListAllPublicMediaTagsResponseBody struct {
	// The tags of media assets in the public media library.
	MediaTagList []*ListAllPublicMediaTagsResponseBodyMediaTagList `json:"MediaTagList,omitempty" xml:"MediaTagList,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// B45F83B7-7F87-4792-BFE9-63CD2137CAF0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListAllPublicMediaTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAllPublicMediaTagsResponseBody) GoString() string {
	return s.String()
}

func (s *ListAllPublicMediaTagsResponseBody) SetMediaTagList(v []*ListAllPublicMediaTagsResponseBodyMediaTagList) *ListAllPublicMediaTagsResponseBody {
	s.MediaTagList = v
	return s
}

func (s *ListAllPublicMediaTagsResponseBody) SetRequestId(v string) *ListAllPublicMediaTagsResponseBody {
	s.RequestId = &v
	return s
}

type ListAllPublicMediaTagsResponseBodyMediaTagList struct {
	// The ID of the media tag.
	//
	// example:
	//
	// sticker-gif
	MediaTagId *string `json:"MediaTagId,omitempty" xml:"MediaTagId,omitempty"`
	// The name of the media tag in Chinese.
	//
	// example:
	//
	// Gif
	MediaTagNameChinese *string `json:"MediaTagNameChinese,omitempty" xml:"MediaTagNameChinese,omitempty"`
	// The name of the material tag in English.
	MediaTagNameEnglish *string `json:"MediaTagNameEnglish,omitempty" xml:"MediaTagNameEnglish,omitempty"`
	// The options.
	Options []*ListAllPublicMediaTagsResponseBodyMediaTagListOptions `json:"Options,omitempty" xml:"Options,omitempty" type:"Repeated"`
}

func (s ListAllPublicMediaTagsResponseBodyMediaTagList) String() string {
	return tea.Prettify(s)
}

func (s ListAllPublicMediaTagsResponseBodyMediaTagList) GoString() string {
	return s.String()
}

func (s *ListAllPublicMediaTagsResponseBodyMediaTagList) SetMediaTagId(v string) *ListAllPublicMediaTagsResponseBodyMediaTagList {
	s.MediaTagId = &v
	return s
}

func (s *ListAllPublicMediaTagsResponseBodyMediaTagList) SetMediaTagNameChinese(v string) *ListAllPublicMediaTagsResponseBodyMediaTagList {
	s.MediaTagNameChinese = &v
	return s
}

func (s *ListAllPublicMediaTagsResponseBodyMediaTagList) SetMediaTagNameEnglish(v string) *ListAllPublicMediaTagsResponseBodyMediaTagList {
	s.MediaTagNameEnglish = &v
	return s
}

func (s *ListAllPublicMediaTagsResponseBodyMediaTagList) SetOptions(v []*ListAllPublicMediaTagsResponseBodyMediaTagListOptions) *ListAllPublicMediaTagsResponseBodyMediaTagList {
	s.Options = v
	return s
}

type ListAllPublicMediaTagsResponseBodyMediaTagListOptions struct {
	// The option name in Chinese.
	OptionChineseName *string `json:"OptionChineseName,omitempty" xml:"OptionChineseName,omitempty"`
	// The option name in English.
	//
	// example:
	//
	// Angry
	OptionEnglishName *string `json:"OptionEnglishName,omitempty" xml:"OptionEnglishName,omitempty"`
	// The option ID.
	//
	// example:
	//
	// Angry
	OptionId *string `json:"OptionId,omitempty" xml:"OptionId,omitempty"`
}

func (s ListAllPublicMediaTagsResponseBodyMediaTagListOptions) String() string {
	return tea.Prettify(s)
}

func (s ListAllPublicMediaTagsResponseBodyMediaTagListOptions) GoString() string {
	return s.String()
}

func (s *ListAllPublicMediaTagsResponseBodyMediaTagListOptions) SetOptionChineseName(v string) *ListAllPublicMediaTagsResponseBodyMediaTagListOptions {
	s.OptionChineseName = &v
	return s
}

func (s *ListAllPublicMediaTagsResponseBodyMediaTagListOptions) SetOptionEnglishName(v string) *ListAllPublicMediaTagsResponseBodyMediaTagListOptions {
	s.OptionEnglishName = &v
	return s
}

func (s *ListAllPublicMediaTagsResponseBodyMediaTagListOptions) SetOptionId(v string) *ListAllPublicMediaTagsResponseBodyMediaTagListOptions {
	s.OptionId = &v
	return s
}

type ListAllPublicMediaTagsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAllPublicMediaTagsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAllPublicMediaTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAllPublicMediaTagsResponse) GoString() string {
	return s.String()
}

func (s *ListAllPublicMediaTagsResponse) SetHeaders(v map[string]*string) *ListAllPublicMediaTagsResponse {
	s.Headers = v
	return s
}

func (s *ListAllPublicMediaTagsResponse) SetStatusCode(v int32) *ListAllPublicMediaTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAllPublicMediaTagsResponse) SetBody(v *ListAllPublicMediaTagsResponseBody) *ListAllPublicMediaTagsResponse {
	s.Body = v
	return s
}

type ListAvatarTrainingJobsRequest struct {
	// 	- The page number.
	//
	// 	- Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// 	- The number of entries per page.
	//
	// 	- Default value: 10.
	//
	// 	- Valid values: 1 to 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// 	- The job state.
	//
	// 	- Valid values: Init, Queuing, Training, Success, and Fail.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListAvatarTrainingJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAvatarTrainingJobsRequest) GoString() string {
	return s.String()
}

func (s *ListAvatarTrainingJobsRequest) SetPageNo(v int32) *ListAvatarTrainingJobsRequest {
	s.PageNo = &v
	return s
}

func (s *ListAvatarTrainingJobsRequest) SetPageSize(v int32) *ListAvatarTrainingJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListAvatarTrainingJobsRequest) SetStatus(v string) *ListAvatarTrainingJobsRequest {
	s.Status = &v
	return s
}

type ListAvatarTrainingJobsResponseBody struct {
	// The data returned.
	Data *ListAvatarTrainingJobsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ****63E8B7C7-4812-46AD-0FA56029AC86****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListAvatarTrainingJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAvatarTrainingJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListAvatarTrainingJobsResponseBody) SetData(v *ListAvatarTrainingJobsResponseBodyData) *ListAvatarTrainingJobsResponseBody {
	s.Data = v
	return s
}

func (s *ListAvatarTrainingJobsResponseBody) SetRequestId(v string) *ListAvatarTrainingJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAvatarTrainingJobsResponseBody) SetSuccess(v bool) *ListAvatarTrainingJobsResponseBody {
	s.Success = &v
	return s
}

type ListAvatarTrainingJobsResponseBodyData struct {
	// The list of digital human training jobs.
	AvatarTrainingJobList []*ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList `json:"AvatarTrainingJobList,omitempty" xml:"AvatarTrainingJobList,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 3
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListAvatarTrainingJobsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListAvatarTrainingJobsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListAvatarTrainingJobsResponseBodyData) SetAvatarTrainingJobList(v []*ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) *ListAvatarTrainingJobsResponseBodyData {
	s.AvatarTrainingJobList = v
	return s
}

func (s *ListAvatarTrainingJobsResponseBodyData) SetTotalCount(v int64) *ListAvatarTrainingJobsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList struct {
	// The description of the digital human.
	AvatarDescription *string `json:"AvatarDescription,omitempty" xml:"AvatarDescription,omitempty"`
	// The ID of the digital human.
	//
	// example:
	//
	// Avatar-XXX
	AvatarId *string `json:"AvatarId,omitempty" xml:"AvatarId,omitempty"`
	// The name of the digital human.
	AvatarName *string `json:"AvatarName,omitempty" xml:"AvatarName,omitempty"`
	// The type of the digital human.
	//
	// example:
	//
	// 2DAvatar
	AvatarType *string `json:"AvatarType,omitempty" xml:"AvatarType,omitempty"`
	// 	- The time when the job was created.
	//
	// 	- The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2020-12-23T13:33:40Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 	- The time when the first training was initiated.
	//
	// 	- The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2020-12-23T13:33:40Z
	FirstTrainingTime *string `json:"FirstTrainingTime,omitempty" xml:"FirstTrainingTime,omitempty"`
	// The ID of the digital human training job.
	//
	// example:
	//
	// *****aded114489ea02e0addf93*****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// 	- The time when the last training was initiated.
	//
	// 	- The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2020-12-23T13:33:40Z
	LastTrainingTime *string `json:"LastTrainingTime,omitempty" xml:"LastTrainingTime,omitempty"`
	// The status description.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The media asset ID of the portrait image.
	//
	// example:
	//
	// *****aded114489ea02e0addf93*****
	Portrait *string `json:"Portrait,omitempty" xml:"Portrait,omitempty"`
	// The state of the digital human training job.
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) String() string {
	return tea.Prettify(s)
}

func (s ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) GoString() string {
	return s.String()
}

func (s *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) SetAvatarDescription(v string) *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList {
	s.AvatarDescription = &v
	return s
}

func (s *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) SetAvatarId(v string) *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList {
	s.AvatarId = &v
	return s
}

func (s *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) SetAvatarName(v string) *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList {
	s.AvatarName = &v
	return s
}

func (s *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) SetAvatarType(v string) *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList {
	s.AvatarType = &v
	return s
}

func (s *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) SetCreateTime(v string) *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList {
	s.CreateTime = &v
	return s
}

func (s *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) SetFirstTrainingTime(v string) *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList {
	s.FirstTrainingTime = &v
	return s
}

func (s *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) SetJobId(v string) *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList {
	s.JobId = &v
	return s
}

func (s *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) SetLastTrainingTime(v string) *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList {
	s.LastTrainingTime = &v
	return s
}

func (s *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) SetMessage(v string) *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList {
	s.Message = &v
	return s
}

func (s *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) SetPortrait(v string) *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList {
	s.Portrait = &v
	return s
}

func (s *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) SetStatus(v string) *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList {
	s.Status = &v
	return s
}

type ListAvatarTrainingJobsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAvatarTrainingJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAvatarTrainingJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAvatarTrainingJobsResponse) GoString() string {
	return s.String()
}

func (s *ListAvatarTrainingJobsResponse) SetHeaders(v map[string]*string) *ListAvatarTrainingJobsResponse {
	s.Headers = v
	return s
}

func (s *ListAvatarTrainingJobsResponse) SetStatusCode(v int32) *ListAvatarTrainingJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAvatarTrainingJobsResponse) SetBody(v *ListAvatarTrainingJobsResponseBody) *ListAvatarTrainingJobsResponse {
	s.Body = v
	return s
}

type ListAvatarsRequest struct {
	// 	- The type of the digital human.
	//
	// 	- 2DAvatar
	//
	// example:
	//
	// 2DAvatar
	AvatarType *string `json:"AvatarType,omitempty" xml:"AvatarType,omitempty"`
	// 	- The page number.
	//
	// 	- Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// 	- The number of entries per page.
	//
	// 	- Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListAvatarsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAvatarsRequest) GoString() string {
	return s.String()
}

func (s *ListAvatarsRequest) SetAvatarType(v string) *ListAvatarsRequest {
	s.AvatarType = &v
	return s
}

func (s *ListAvatarsRequest) SetPageNo(v int32) *ListAvatarsRequest {
	s.PageNo = &v
	return s
}

func (s *ListAvatarsRequest) SetPageSize(v int32) *ListAvatarsRequest {
	s.PageSize = &v
	return s
}

type ListAvatarsResponseBody struct {
	// The data returned.
	Data *ListAvatarsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListAvatarsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAvatarsResponseBody) GoString() string {
	return s.String()
}

func (s *ListAvatarsResponseBody) SetData(v *ListAvatarsResponseBodyData) *ListAvatarsResponseBody {
	s.Data = v
	return s
}

func (s *ListAvatarsResponseBody) SetRequestId(v string) *ListAvatarsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAvatarsResponseBody) SetSuccess(v bool) *ListAvatarsResponseBody {
	s.Success = &v
	return s
}

type ListAvatarsResponseBodyData struct {
	// The queried digital humans.
	AvatarList []*ListAvatarsResponseBodyDataAvatarList `json:"AvatarList,omitempty" xml:"AvatarList,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListAvatarsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListAvatarsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListAvatarsResponseBodyData) SetAvatarList(v []*ListAvatarsResponseBodyDataAvatarList) *ListAvatarsResponseBodyData {
	s.AvatarList = v
	return s
}

func (s *ListAvatarsResponseBodyData) SetTotalCount(v int64) *ListAvatarsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListAvatarsResponseBodyDataAvatarList struct {
	// The description of the digital human.
	AvatarDescription *string `json:"AvatarDescription,omitempty" xml:"AvatarDescription,omitempty"`
	// The ID of the digital human.
	//
	// example:
	//
	// Avatar-XXX
	AvatarId *string `json:"AvatarId,omitempty" xml:"AvatarId,omitempty"`
	// The name of the digital human.
	AvatarName *string `json:"AvatarName,omitempty" xml:"AvatarName,omitempty"`
	// The type of the digital human.
	//
	// example:
	//
	// 2DAvatar
	AvatarType *string `json:"AvatarType,omitempty" xml:"AvatarType,omitempty"`
	// The media asset ID of the portrait image.
	//
	// example:
	//
	// ****571c704445f9a0ee011406c2****
	Portrait *string `json:"Portrait,omitempty" xml:"Portrait,omitempty"`
	// The thumbnail URL.
	//
	// example:
	//
	// https://your-bucket.oss-cn-hangzhou.aliyuncs.com/thumbnail.png
	Thumbnail *string `json:"Thumbnail,omitempty" xml:"Thumbnail,omitempty"`
	// Indicates whether the digital human image supports the alpha channels.
	//
	// example:
	//
	// true
	Transparent *bool `json:"Transparent,omitempty" xml:"Transparent,omitempty"`
}

func (s ListAvatarsResponseBodyDataAvatarList) String() string {
	return tea.Prettify(s)
}

func (s ListAvatarsResponseBodyDataAvatarList) GoString() string {
	return s.String()
}

func (s *ListAvatarsResponseBodyDataAvatarList) SetAvatarDescription(v string) *ListAvatarsResponseBodyDataAvatarList {
	s.AvatarDescription = &v
	return s
}

func (s *ListAvatarsResponseBodyDataAvatarList) SetAvatarId(v string) *ListAvatarsResponseBodyDataAvatarList {
	s.AvatarId = &v
	return s
}

func (s *ListAvatarsResponseBodyDataAvatarList) SetAvatarName(v string) *ListAvatarsResponseBodyDataAvatarList {
	s.AvatarName = &v
	return s
}

func (s *ListAvatarsResponseBodyDataAvatarList) SetAvatarType(v string) *ListAvatarsResponseBodyDataAvatarList {
	s.AvatarType = &v
	return s
}

func (s *ListAvatarsResponseBodyDataAvatarList) SetPortrait(v string) *ListAvatarsResponseBodyDataAvatarList {
	s.Portrait = &v
	return s
}

func (s *ListAvatarsResponseBodyDataAvatarList) SetThumbnail(v string) *ListAvatarsResponseBodyDataAvatarList {
	s.Thumbnail = &v
	return s
}

func (s *ListAvatarsResponseBodyDataAvatarList) SetTransparent(v bool) *ListAvatarsResponseBodyDataAvatarList {
	s.Transparent = &v
	return s
}

type ListAvatarsResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAvatarsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAvatarsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAvatarsResponse) GoString() string {
	return s.String()
}

func (s *ListAvatarsResponse) SetHeaders(v map[string]*string) *ListAvatarsResponse {
	s.Headers = v
	return s
}

func (s *ListAvatarsResponse) SetStatusCode(v int32) *ListAvatarsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAvatarsResponse) SetBody(v *ListAvatarsResponseBody) *ListAvatarsResponse {
	s.Body = v
	return s
}

type ListBatchMediaProducingJobsRequest struct {
	// The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// example:
	//
	// 2023-06-05T15:59:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the quick video production job.
	//
	// example:
	//
	// ****d80e4e4044975745c14b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The job type.
	//
	// Valid values:
	//
	// 	- Script: script-based editing job that mixes media assets.
	//
	// 	- Smart_Mix: intelligent editing job that mixes media assets.
	//
	// example:
	//
	// Script
	JobType *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	// The maximum number of entries to return.
	//
	// example:
	//
	// 100
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results.
	//
	// example:
	//
	// mRZkKAovub0xWVfH14he4Q==
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The sorting parameter. Valid values:
	//
	// 	- desc (default): sorted by creation time in descending order.
	//
	// 	- asc: sorted by creation time in ascending order.
	//
	// <!---->
	//
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// example:
	//
	// 2022-02-02T00:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The job state.
	//
	// Valid values:
	//
	// 	- Finished
	//
	// 	- Init
	//
	// 	- Failed
	//
	// 	- Processing
	//
	// example:
	//
	// Finished
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListBatchMediaProducingJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListBatchMediaProducingJobsRequest) GoString() string {
	return s.String()
}

func (s *ListBatchMediaProducingJobsRequest) SetEndTime(v string) *ListBatchMediaProducingJobsRequest {
	s.EndTime = &v
	return s
}

func (s *ListBatchMediaProducingJobsRequest) SetJobId(v string) *ListBatchMediaProducingJobsRequest {
	s.JobId = &v
	return s
}

func (s *ListBatchMediaProducingJobsRequest) SetJobType(v string) *ListBatchMediaProducingJobsRequest {
	s.JobType = &v
	return s
}

func (s *ListBatchMediaProducingJobsRequest) SetMaxResults(v int32) *ListBatchMediaProducingJobsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListBatchMediaProducingJobsRequest) SetNextToken(v string) *ListBatchMediaProducingJobsRequest {
	s.NextToken = &v
	return s
}

func (s *ListBatchMediaProducingJobsRequest) SetSortBy(v string) *ListBatchMediaProducingJobsRequest {
	s.SortBy = &v
	return s
}

func (s *ListBatchMediaProducingJobsRequest) SetStartTime(v string) *ListBatchMediaProducingJobsRequest {
	s.StartTime = &v
	return s
}

func (s *ListBatchMediaProducingJobsRequest) SetStatus(v string) *ListBatchMediaProducingJobsRequest {
	s.Status = &v
	return s
}

type ListBatchMediaProducingJobsResponseBody struct {
	// The queried quick video production jobs.
	EditingBatchJobList []*ListBatchMediaProducingJobsResponseBodyEditingBatchJobList `json:"EditingBatchJobList,omitempty" xml:"EditingBatchJobList,omitempty" type:"Repeated"`
	// The number of entries per page. Valid values: 1 to 100.
	//
	// Default value: 10.
	//
	// example:
	//
	// 100
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// A pagination token. It can be used in the next request to retrieve a new page of results.
	//
	// example:
	//
	// 8EqYpQbZ6Eh7+Zz8DxVYoQ==
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListBatchMediaProducingJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListBatchMediaProducingJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListBatchMediaProducingJobsResponseBody) SetEditingBatchJobList(v []*ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) *ListBatchMediaProducingJobsResponseBody {
	s.EditingBatchJobList = v
	return s
}

func (s *ListBatchMediaProducingJobsResponseBody) SetMaxResults(v int32) *ListBatchMediaProducingJobsResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListBatchMediaProducingJobsResponseBody) SetNextToken(v string) *ListBatchMediaProducingJobsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListBatchMediaProducingJobsResponseBody) SetRequestId(v string) *ListBatchMediaProducingJobsResponseBody {
	s.RequestId = &v
	return s
}

type ListBatchMediaProducingJobsResponseBodyEditingBatchJobList struct {
	// The time when the job was complete. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	//
	// example:
	//
	// 2023-06-09T06:38:09Z
	CompleteTime *string `json:"CompleteTime,omitempty" xml:"CompleteTime,omitempty"`
	// The time when the job was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2023-06-09T06:36:48Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The editing configurations. For more information, see [EditingConfig](~~2692547#1be9bba03b7qu~~).
	//
	// example:
	//
	// {
	//
	//   "MediaConfig": {
	//
	//       "Volume": 0
	//
	//   },
	//
	//   "SpeechConfig": {
	//
	//       "Volume": 1
	//
	//   },
	//
	//  "BackgroundMusicConfig": {
	//
	//       "Volume": 0.3
	//
	//   }
	//
	// }
	EditingConfig *string `json:"EditingConfig,omitempty" xml:"EditingConfig,omitempty"`
	// The extended information of the job.
	//
	// example:
	//
	// {}
	Extend *string `json:"Extend,omitempty" xml:"Extend,omitempty"`
	// The input configurations.
	InputConfig *string `json:"InputConfig,omitempty" xml:"InputConfig,omitempty"`
	// The ID of the quick video production job.
	//
	// example:
	//
	// ******7ecbee4c6d9b8474498e******
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The job type.
	//
	// Valid values:
	//
	// 	- Script: script-based editing job that mixes media assets.
	//
	// 	- Smart_Mix: intelligent editing job that mixes media assets.
	//
	// example:
	//
	// Script
	JobType *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	// The time when the job was last modified.
	//
	// example:
	//
	// 2023-06-09T06:37:58Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The output configurations. For more information, see [OutputConfig](~~2692547#447b928fcbuoa~~).
	//
	// example:
	//
	// {
	//
	//   "MediaURL": "http://xxx.oss-cn-shanghai.aliyuncs.com/xxx_{index}.mp4",
	//
	//   "Count": 20,
	//
	//   "MaxDuration": 15,
	//
	//   "Width": 1080,
	//
	//   "Height": 1920,
	//
	//   "Video": {"Crf": 27}
	//
	// }
	OutputConfig *string `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	// The job state.
	//
	// Valid values:
	//
	// 	- Finished
	//
	// 	- Init
	//
	// 	- Failed
	//
	// 	- Processing
	//
	// example:
	//
	// Finished
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The user-defined data in the JSON format, which can be up to 512 bytes in length. You can specify a custom callback URL. For more information, see [Configure a callback upon editing completion](https://help.aliyun.com/document_detail/451631.html).
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) String() string {
	return tea.Prettify(s)
}

func (s ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) GoString() string {
	return s.String()
}

func (s *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) SetCompleteTime(v string) *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList {
	s.CompleteTime = &v
	return s
}

func (s *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) SetCreateTime(v string) *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList {
	s.CreateTime = &v
	return s
}

func (s *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) SetEditingConfig(v string) *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList {
	s.EditingConfig = &v
	return s
}

func (s *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) SetExtend(v string) *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList {
	s.Extend = &v
	return s
}

func (s *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) SetInputConfig(v string) *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList {
	s.InputConfig = &v
	return s
}

func (s *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) SetJobId(v string) *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList {
	s.JobId = &v
	return s
}

func (s *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) SetJobType(v string) *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList {
	s.JobType = &v
	return s
}

func (s *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) SetModifiedTime(v string) *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList {
	s.ModifiedTime = &v
	return s
}

func (s *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) SetOutputConfig(v string) *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList {
	s.OutputConfig = &v
	return s
}

func (s *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) SetStatus(v string) *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList {
	s.Status = &v
	return s
}

func (s *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) SetUserData(v string) *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList {
	s.UserData = &v
	return s
}

type ListBatchMediaProducingJobsResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListBatchMediaProducingJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListBatchMediaProducingJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListBatchMediaProducingJobsResponse) GoString() string {
	return s.String()
}

func (s *ListBatchMediaProducingJobsResponse) SetHeaders(v map[string]*string) *ListBatchMediaProducingJobsResponse {
	s.Headers = v
	return s
}

func (s *ListBatchMediaProducingJobsResponse) SetStatusCode(v int32) *ListBatchMediaProducingJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListBatchMediaProducingJobsResponse) SetBody(v *ListBatchMediaProducingJobsResponseBody) *ListBatchMediaProducingJobsResponse {
	s.Body = v
	return s
}

type ListChannelAlertsRequest struct {
	// The alert type.
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The end of the time range to query.
	//
	// example:
	//
	// 2024-11-21T16:10:45Z
	GmtEnd *string `json:"GmtEnd,omitempty" xml:"GmtEnd,omitempty"`
	// The beginning of the time range to query.
	//
	// example:
	//
	// 2024-11-21T16:10:45Z
	GmtStart *string `json:"GmtStart,omitempty" xml:"GmtStart,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ARN of the channel.
	//
	// This parameter is required.
	//
	// example:
	//
	// acs:ims:mediaweaver:<regionId>:<userId>:channel/myChannel
	ResourceArn *string `json:"ResourceArn,omitempty" xml:"ResourceArn,omitempty"`
	// The sorting order by modification time. Valid values: asc and desc.
	//
	// example:
	//
	// desc
	SortByModifiedTime *string `json:"SortByModifiedTime,omitempty" xml:"SortByModifiedTime,omitempty"`
}

func (s ListChannelAlertsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListChannelAlertsRequest) GoString() string {
	return s.String()
}

func (s *ListChannelAlertsRequest) SetCategory(v string) *ListChannelAlertsRequest {
	s.Category = &v
	return s
}

func (s *ListChannelAlertsRequest) SetGmtEnd(v string) *ListChannelAlertsRequest {
	s.GmtEnd = &v
	return s
}

func (s *ListChannelAlertsRequest) SetGmtStart(v string) *ListChannelAlertsRequest {
	s.GmtStart = &v
	return s
}

func (s *ListChannelAlertsRequest) SetPageNo(v int32) *ListChannelAlertsRequest {
	s.PageNo = &v
	return s
}

func (s *ListChannelAlertsRequest) SetPageSize(v int32) *ListChannelAlertsRequest {
	s.PageSize = &v
	return s
}

func (s *ListChannelAlertsRequest) SetResourceArn(v string) *ListChannelAlertsRequest {
	s.ResourceArn = &v
	return s
}

func (s *ListChannelAlertsRequest) SetSortByModifiedTime(v string) *ListChannelAlertsRequest {
	s.SortByModifiedTime = &v
	return s
}

type ListChannelAlertsResponseBody struct {
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The alerts.
	ProgramAlerts []*ListChannelAlertsResponseBodyProgramAlerts `json:"ProgramAlerts,omitempty" xml:"ProgramAlerts,omitempty" type:"Repeated"`
	// **Request ID**
	//
	// example:
	//
	// xxx-xxxx-xxxxx-xxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of alerts returned.
	//
	// example:
	//
	// 4
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListChannelAlertsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListChannelAlertsResponseBody) GoString() string {
	return s.String()
}

func (s *ListChannelAlertsResponseBody) SetPageNo(v int32) *ListChannelAlertsResponseBody {
	s.PageNo = &v
	return s
}

func (s *ListChannelAlertsResponseBody) SetPageSize(v int32) *ListChannelAlertsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListChannelAlertsResponseBody) SetProgramAlerts(v []*ListChannelAlertsResponseBodyProgramAlerts) *ListChannelAlertsResponseBody {
	s.ProgramAlerts = v
	return s
}

func (s *ListChannelAlertsResponseBody) SetRequestId(v string) *ListChannelAlertsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListChannelAlertsResponseBody) SetTotalCount(v int32) *ListChannelAlertsResponseBody {
	s.TotalCount = &v
	return s
}

type ListChannelAlertsResponseBodyProgramAlerts struct {
	// The ARN of the program.
	//
	// example:
	//
	// acs:ims:mediaweaver:<regionId>:<userId>:program/myChannel/MyProgram
	Arn *string `json:"Arn,omitempty" xml:"Arn,omitempty"`
	// The alert type.
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The number of alerts.
	//
	// example:
	//
	// 4
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The time when the alert was last modified in UTC.
	//
	// example:
	//
	// 2024-07-16T10:03Z
	GmtModified *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	// The name of the program.
	//
	// example:
	//
	// program_name
	ProgramName *string `json:"ProgramName,omitempty" xml:"ProgramName,omitempty"`
}

func (s ListChannelAlertsResponseBodyProgramAlerts) String() string {
	return tea.Prettify(s)
}

func (s ListChannelAlertsResponseBodyProgramAlerts) GoString() string {
	return s.String()
}

func (s *ListChannelAlertsResponseBodyProgramAlerts) SetArn(v string) *ListChannelAlertsResponseBodyProgramAlerts {
	s.Arn = &v
	return s
}

func (s *ListChannelAlertsResponseBodyProgramAlerts) SetCategory(v string) *ListChannelAlertsResponseBodyProgramAlerts {
	s.Category = &v
	return s
}

func (s *ListChannelAlertsResponseBodyProgramAlerts) SetCount(v int32) *ListChannelAlertsResponseBodyProgramAlerts {
	s.Count = &v
	return s
}

func (s *ListChannelAlertsResponseBodyProgramAlerts) SetGmtModified(v string) *ListChannelAlertsResponseBodyProgramAlerts {
	s.GmtModified = &v
	return s
}

func (s *ListChannelAlertsResponseBodyProgramAlerts) SetProgramName(v string) *ListChannelAlertsResponseBodyProgramAlerts {
	s.ProgramName = &v
	return s
}

type ListChannelAlertsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListChannelAlertsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListChannelAlertsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListChannelAlertsResponse) GoString() string {
	return s.String()
}

func (s *ListChannelAlertsResponse) SetHeaders(v map[string]*string) *ListChannelAlertsResponse {
	s.Headers = v
	return s
}

func (s *ListChannelAlertsResponse) SetStatusCode(v int32) *ListChannelAlertsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListChannelAlertsResponse) SetBody(v *ListChannelAlertsResponseBody) *ListChannelAlertsResponse {
	s.Body = v
	return s
}

type ListChannelsRequest struct {
	// The name of the channel.
	//
	// example:
	//
	// MyChannel
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The tier of the channel. Valid values: basic and standard.
	//
	// example:
	//
	// basic
	ChannelTier *string `json:"ChannelTier,omitempty" xml:"ChannelTier,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Valid values: 1 to 100. Default value: 10.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The playback mode. Valid values: loop and linear.
	//
	// example:
	//
	// loop
	PlaybackMode *string `json:"PlaybackMode,omitempty" xml:"PlaybackMode,omitempty"`
	// The sorting order by creation time. Valid values: asc and desc.
	//
	// example:
	//
	// asc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The sorting order by modification time. Valid values: asc and desc.
	//
	// example:
	//
	// desc
	SortByModifiedTime *string `json:"SortByModifiedTime,omitempty" xml:"SortByModifiedTime,omitempty"`
	// The channel status. A value of 0 specifies stopped. A value of 1 specifies started.
	//
	// example:
	//
	// 0
	State *int32 `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ListChannelsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListChannelsRequest) GoString() string {
	return s.String()
}

func (s *ListChannelsRequest) SetChannelName(v string) *ListChannelsRequest {
	s.ChannelName = &v
	return s
}

func (s *ListChannelsRequest) SetChannelTier(v string) *ListChannelsRequest {
	s.ChannelTier = &v
	return s
}

func (s *ListChannelsRequest) SetPageNo(v int32) *ListChannelsRequest {
	s.PageNo = &v
	return s
}

func (s *ListChannelsRequest) SetPageSize(v int32) *ListChannelsRequest {
	s.PageSize = &v
	return s
}

func (s *ListChannelsRequest) SetPlaybackMode(v string) *ListChannelsRequest {
	s.PlaybackMode = &v
	return s
}

func (s *ListChannelsRequest) SetSortBy(v string) *ListChannelsRequest {
	s.SortBy = &v
	return s
}

func (s *ListChannelsRequest) SetSortByModifiedTime(v string) *ListChannelsRequest {
	s.SortByModifiedTime = &v
	return s
}

func (s *ListChannelsRequest) SetState(v int32) *ListChannelsRequest {
	s.State = &v
	return s
}

type ListChannelsResponseBody struct {
	// The channels.
	ChannelList []*ChannelAssemblyChannel `json:"ChannelList,omitempty" xml:"ChannelList,omitempty" type:"Repeated"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Valid values: 1 to 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// **Request ID**
	//
	// example:
	//
	// xxx-xxxx-xxxxx-xxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of channels returned.
	//
	// example:
	//
	// 180
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListChannelsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListChannelsResponseBody) GoString() string {
	return s.String()
}

func (s *ListChannelsResponseBody) SetChannelList(v []*ChannelAssemblyChannel) *ListChannelsResponseBody {
	s.ChannelList = v
	return s
}

func (s *ListChannelsResponseBody) SetPageNo(v int32) *ListChannelsResponseBody {
	s.PageNo = &v
	return s
}

func (s *ListChannelsResponseBody) SetPageSize(v int32) *ListChannelsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListChannelsResponseBody) SetRequestId(v string) *ListChannelsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListChannelsResponseBody) SetTotalCount(v int32) *ListChannelsResponseBody {
	s.TotalCount = &v
	return s
}

type ListChannelsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListChannelsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListChannelsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListChannelsResponse) GoString() string {
	return s.String()
}

func (s *ListChannelsResponse) SetHeaders(v map[string]*string) *ListChannelsResponse {
	s.Headers = v
	return s
}

func (s *ListChannelsResponse) SetStatusCode(v int32) *ListChannelsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListChannelsResponse) SetBody(v *ListChannelsResponseBody) *ListChannelsResponse {
	s.Body = v
	return s
}

type ListCustomTemplatesRequest struct {
	// The template name.
	//
	// example:
	//
	// test-template
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The order in which the entries are sorted. Valid values:
	//
	// 	- CreateTimeDesc: sorted by creation time in descending order.
	//
	// 	- CreateTimeAsc: sorted by creation time in ascending order.
	//
	// example:
	//
	// CreateTimeDesc
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The subtype ID of the template.
	//
	// 	- Valid values for transcoding templates:
	//
	//     	- 1 (Normal): regular template.
	//
	//     	- 2 (AudioTranscode): audio transcoding template.
	//
	//     	- 3 (Remux): container format conversion template.
	//
	//     	- 4 (NarrowBandV1): Narrowband HD 1.0 template.
	//
	//     	- 5 (NarrowBandV2): Narrowband HD 2.0 template.
	//
	// 	- Valid values for snapshot templates:
	//
	//     	- 1 (Normal): regular template.
	//
	//     	- 2 (Sprite): sprite template.
	//
	//     	- 3 (WebVtt): WebVTT template.
	//
	// 	- Valid values for AI-assisted content moderation templates:
	//
	//     	- 1 (Video): video moderation template.
	//
	//     	- 2 (Audio): audio moderation template.
	//
	//     	- 3 (Image): image moderation template.
	//
	// 	- Valid values for AI-assisted intelligent erasure templates:
	//
	//     	- 1 (VideoDelogo): logo erasure template.
	//
	//     	- 2 (VideoDetext): subtitle erasure template.
	//
	// example:
	//
	// 2
	Subtype *string `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// The template ID.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The template type. Valid values:
	//
	// 	- 1: transcoding template.
	//
	// 	- 2: snapshot template.
	//
	// 	- 3: animated image template.
	//
	// 	- 4\\. image watermark template.
	//
	// 	- 5: text watermark template.
	//
	// 	- 6: subtitle template.
	//
	// 	- 7: AI-assisted content moderation template.
	//
	// 	- 8: AI-assisted intelligent thumbnail template.
	//
	// 	- 9: AI-assisted intelligent erasure template.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListCustomTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCustomTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListCustomTemplatesRequest) SetName(v string) *ListCustomTemplatesRequest {
	s.Name = &v
	return s
}

func (s *ListCustomTemplatesRequest) SetOrderBy(v string) *ListCustomTemplatesRequest {
	s.OrderBy = &v
	return s
}

func (s *ListCustomTemplatesRequest) SetPageNumber(v int32) *ListCustomTemplatesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListCustomTemplatesRequest) SetPageSize(v int32) *ListCustomTemplatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListCustomTemplatesRequest) SetSubtype(v string) *ListCustomTemplatesRequest {
	s.Subtype = &v
	return s
}

func (s *ListCustomTemplatesRequest) SetTemplateId(v string) *ListCustomTemplatesRequest {
	s.TemplateId = &v
	return s
}

func (s *ListCustomTemplatesRequest) SetType(v string) *ListCustomTemplatesRequest {
	s.Type = &v
	return s
}

type ListCustomTemplatesResponseBody struct {
	// The queried templates.
	CustomTemplateList []*ListCustomTemplatesResponseBodyCustomTemplateList `json:"CustomTemplateList,omitempty" xml:"CustomTemplateList,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of templates.
	//
	// example:
	//
	// 20
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListCustomTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCustomTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListCustomTemplatesResponseBody) SetCustomTemplateList(v []*ListCustomTemplatesResponseBodyCustomTemplateList) *ListCustomTemplatesResponseBody {
	s.CustomTemplateList = v
	return s
}

func (s *ListCustomTemplatesResponseBody) SetRequestId(v string) *ListCustomTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCustomTemplatesResponseBody) SetTotal(v int32) *ListCustomTemplatesResponseBody {
	s.Total = &v
	return s
}

type ListCustomTemplatesResponseBodyCustomTemplateList struct {
	// The time when the template was created.
	//
	// example:
	//
	// 2022-07-12T16:17:54Z
	CreateTime   *string                                                        `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	FrontendHint *ListCustomTemplatesResponseBodyCustomTemplateListFrontendHint `json:"FrontendHint,omitempty" xml:"FrontendHint,omitempty" type:"Struct"`
	// Indicates whether the template is the default template.
	//
	// Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	IsDefault *bool `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	// The time when the template was last modified.
	//
	// example:
	//
	// 2022-07-12T16:17:54Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The template state.
	//
	// Valid values:
	//
	// 	- Normal
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The subtype ID of the template.
	//
	// example:
	//
	// 2
	Subtype *int32 `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// The subtype name of the template.
	//
	// example:
	//
	// AudioTranscode
	SubtypeName *string `json:"SubtypeName,omitempty" xml:"SubtypeName,omitempty"`
	// The template parameters.
	//
	// example:
	//
	// {"Container":{"Format":"mp3"},"Audio":{"Codec":"mp3","Bitrate":"64","Samplerate":"22050","Channels":"2"}}
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// The template ID.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The template name.
	//
	// example:
	//
	// test-template
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// The type ID of the template.
	//
	// example:
	//
	// 1
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
	// The type name of the template.
	//
	// example:
	//
	// TranscodeTemplate
	TypeName *string `json:"TypeName,omitempty" xml:"TypeName,omitempty"`
}

func (s ListCustomTemplatesResponseBodyCustomTemplateList) String() string {
	return tea.Prettify(s)
}

func (s ListCustomTemplatesResponseBodyCustomTemplateList) GoString() string {
	return s.String()
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetCreateTime(v string) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.CreateTime = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetFrontendHint(v *ListCustomTemplatesResponseBodyCustomTemplateListFrontendHint) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.FrontendHint = v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetIsDefault(v bool) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.IsDefault = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetModifiedTime(v string) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.ModifiedTime = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetStatus(v string) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.Status = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetSubtype(v int32) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.Subtype = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetSubtypeName(v string) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.SubtypeName = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetTemplateConfig(v string) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.TemplateConfig = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetTemplateId(v string) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.TemplateId = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetTemplateName(v string) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.TemplateName = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetType(v int32) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.Type = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetTypeName(v string) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.TypeName = &v
	return s
}

type ListCustomTemplatesResponseBodyCustomTemplateListFrontendHint struct {
	TranscodeTemplateHint *ListCustomTemplatesResponseBodyCustomTemplateListFrontendHintTranscodeTemplateHint `json:"TranscodeTemplateHint,omitempty" xml:"TranscodeTemplateHint,omitempty" type:"Struct"`
}

func (s ListCustomTemplatesResponseBodyCustomTemplateListFrontendHint) String() string {
	return tea.Prettify(s)
}

func (s ListCustomTemplatesResponseBodyCustomTemplateListFrontendHint) GoString() string {
	return s.String()
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateListFrontendHint) SetTranscodeTemplateHint(v *ListCustomTemplatesResponseBodyCustomTemplateListFrontendHintTranscodeTemplateHint) *ListCustomTemplatesResponseBodyCustomTemplateListFrontendHint {
	s.TranscodeTemplateHint = v
	return s
}

type ListCustomTemplatesResponseBodyCustomTemplateListFrontendHintTranscodeTemplateHint struct {
	BitrateControlType *string `json:"BitrateControlType,omitempty" xml:"BitrateControlType,omitempty"`
}

func (s ListCustomTemplatesResponseBodyCustomTemplateListFrontendHintTranscodeTemplateHint) String() string {
	return tea.Prettify(s)
}

func (s ListCustomTemplatesResponseBodyCustomTemplateListFrontendHintTranscodeTemplateHint) GoString() string {
	return s.String()
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateListFrontendHintTranscodeTemplateHint) SetBitrateControlType(v string) *ListCustomTemplatesResponseBodyCustomTemplateListFrontendHintTranscodeTemplateHint {
	s.BitrateControlType = &v
	return s
}

type ListCustomTemplatesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCustomTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCustomTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCustomTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListCustomTemplatesResponse) SetHeaders(v map[string]*string) *ListCustomTemplatesResponse {
	s.Headers = v
	return s
}

func (s *ListCustomTemplatesResponse) SetStatusCode(v int32) *ListCustomTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCustomTemplatesResponse) SetBody(v *ListCustomTemplatesResponseBody) *ListCustomTemplatesResponse {
	s.Body = v
	return s
}

type ListCustomizedVoiceJobsRequest struct {
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10. Valid values: 1 to 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The type of the human voice cloning job. Valid values:
	//
	// 	- Basic
	//
	// 	- Standard
	//
	// > : If you do not specify this parameter, the default value Basic is used.
	//
	// example:
	//
	// Standard
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListCustomizedVoiceJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCustomizedVoiceJobsRequest) GoString() string {
	return s.String()
}

func (s *ListCustomizedVoiceJobsRequest) SetPageNo(v int32) *ListCustomizedVoiceJobsRequest {
	s.PageNo = &v
	return s
}

func (s *ListCustomizedVoiceJobsRequest) SetPageSize(v int32) *ListCustomizedVoiceJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListCustomizedVoiceJobsRequest) SetType(v string) *ListCustomizedVoiceJobsRequest {
	s.Type = &v
	return s
}

type ListCustomizedVoiceJobsResponseBody struct {
	// The data returned.
	Data *ListCustomizedVoiceJobsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values: true false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListCustomizedVoiceJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCustomizedVoiceJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListCustomizedVoiceJobsResponseBody) SetData(v *ListCustomizedVoiceJobsResponseBodyData) *ListCustomizedVoiceJobsResponseBody {
	s.Data = v
	return s
}

func (s *ListCustomizedVoiceJobsResponseBody) SetRequestId(v string) *ListCustomizedVoiceJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCustomizedVoiceJobsResponseBody) SetSuccess(v bool) *ListCustomizedVoiceJobsResponseBody {
	s.Success = &v
	return s
}

type ListCustomizedVoiceJobsResponseBodyData struct {
	// The queried human voice cloning jobs.
	CustomizedVoiceJobList []*ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList `json:"CustomizedVoiceJobList,omitempty" xml:"CustomizedVoiceJobList,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 271
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListCustomizedVoiceJobsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListCustomizedVoiceJobsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListCustomizedVoiceJobsResponseBodyData) SetCustomizedVoiceJobList(v []*ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) *ListCustomizedVoiceJobsResponseBodyData {
	s.CustomizedVoiceJobList = v
	return s
}

func (s *ListCustomizedVoiceJobsResponseBodyData) SetTotalCount(v int32) *ListCustomizedVoiceJobsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList struct {
	// 	- The time when the job was created.
	//
	// 	- The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2023-04-01T06:23:59Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The gender. Valid values:
	//
	// 	- female
	//
	// 	- male
	//
	// example:
	//
	// female
	Gender *string `json:"Gender,omitempty" xml:"Gender,omitempty"`
	// The time when the job was created.
	//
	// example:
	//
	// 2022-06-27T02:42:28Z
	GmtCreate *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	// The ID of the human voice cloning job.
	//
	// example:
	//
	// 2245ab99a7fd4116a4fd3f499b7a56c5
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The returned message.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The scenario. Valid values:
	//
	// 	- story
	//
	// 	- interaction
	//
	// 	- navigation
	//
	// example:
	//
	// story
	Scenario *string `json:"Scenario,omitempty" xml:"Scenario,omitempty"`
	// The job state. Valid values:
	//
	// 	- Initialization
	//
	// 	- AudioDetecting
	//
	// 	- PreTraining
	//
	// 	- Training
	//
	// 	- Success
	//
	// 	- Fail
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 	- The voice type. Valid values:
	//
	//     	- Basic
	//
	//     	- Standard
	//
	// example:
	//
	// Standard
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The voice description.
	//
	// 	- The description can be up to 256 characters in length.
	VoiceDesc *string `json:"VoiceDesc,omitempty" xml:"VoiceDesc,omitempty"`
	// The voice ID.
	//
	// example:
	//
	// xiaozhuan
	VoiceId *string `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
	// The voice name.
	//
	// 	- The name can be up to 32 characters in length.
	VoiceName *string `json:"VoiceName,omitempty" xml:"VoiceName,omitempty"`
}

func (s ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) String() string {
	return tea.Prettify(s)
}

func (s ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) GoString() string {
	return s.String()
}

func (s *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) SetCreateTime(v string) *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList {
	s.CreateTime = &v
	return s
}

func (s *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) SetGender(v string) *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList {
	s.Gender = &v
	return s
}

func (s *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) SetGmtCreate(v string) *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList {
	s.GmtCreate = &v
	return s
}

func (s *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) SetJobId(v string) *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList {
	s.JobId = &v
	return s
}

func (s *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) SetMessage(v string) *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList {
	s.Message = &v
	return s
}

func (s *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) SetScenario(v string) *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList {
	s.Scenario = &v
	return s
}

func (s *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) SetStatus(v string) *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList {
	s.Status = &v
	return s
}

func (s *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) SetType(v string) *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList {
	s.Type = &v
	return s
}

func (s *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) SetVoiceDesc(v string) *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList {
	s.VoiceDesc = &v
	return s
}

func (s *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) SetVoiceId(v string) *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList {
	s.VoiceId = &v
	return s
}

func (s *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) SetVoiceName(v string) *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList {
	s.VoiceName = &v
	return s
}

type ListCustomizedVoiceJobsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCustomizedVoiceJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCustomizedVoiceJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCustomizedVoiceJobsResponse) GoString() string {
	return s.String()
}

func (s *ListCustomizedVoiceJobsResponse) SetHeaders(v map[string]*string) *ListCustomizedVoiceJobsResponse {
	s.Headers = v
	return s
}

func (s *ListCustomizedVoiceJobsResponse) SetStatusCode(v int32) *ListCustomizedVoiceJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCustomizedVoiceJobsResponse) SetBody(v *ListCustomizedVoiceJobsResponseBody) *ListCustomizedVoiceJobsResponse {
	s.Body = v
	return s
}

type ListCustomizedVoicesRequest struct {
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10. Valid values: 1 to 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// 	- The voice type. Valid values:
	//
	//     	- Basic
	//
	//     	- Standard
	//
	// 	- If you do not specify this parameter, the default value Basic is used.
	//
	// example:
	//
	// Standard
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListCustomizedVoicesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCustomizedVoicesRequest) GoString() string {
	return s.String()
}

func (s *ListCustomizedVoicesRequest) SetPageNo(v int32) *ListCustomizedVoicesRequest {
	s.PageNo = &v
	return s
}

func (s *ListCustomizedVoicesRequest) SetPageSize(v int32) *ListCustomizedVoicesRequest {
	s.PageSize = &v
	return s
}

func (s *ListCustomizedVoicesRequest) SetType(v string) *ListCustomizedVoicesRequest {
	s.Type = &v
	return s
}

type ListCustomizedVoicesResponseBody struct {
	// The data returned.
	Data *ListCustomizedVoicesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListCustomizedVoicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCustomizedVoicesResponseBody) GoString() string {
	return s.String()
}

func (s *ListCustomizedVoicesResponseBody) SetData(v *ListCustomizedVoicesResponseBodyData) *ListCustomizedVoicesResponseBody {
	s.Data = v
	return s
}

func (s *ListCustomizedVoicesResponseBody) SetRequestId(v string) *ListCustomizedVoicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCustomizedVoicesResponseBody) SetSuccess(v bool) *ListCustomizedVoicesResponseBody {
	s.Success = &v
	return s
}

type ListCustomizedVoicesResponseBodyData struct {
	// The queried personalized human voices.
	CustomizedVoiceList []*ListCustomizedVoicesResponseBodyDataCustomizedVoiceList `json:"CustomizedVoiceList,omitempty" xml:"CustomizedVoiceList,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 41
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListCustomizedVoicesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListCustomizedVoicesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListCustomizedVoicesResponseBodyData) SetCustomizedVoiceList(v []*ListCustomizedVoicesResponseBodyDataCustomizedVoiceList) *ListCustomizedVoicesResponseBodyData {
	s.CustomizedVoiceList = v
	return s
}

func (s *ListCustomizedVoicesResponseBodyData) SetTotalCount(v int32) *ListCustomizedVoicesResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListCustomizedVoicesResponseBodyDataCustomizedVoiceList struct {
	// The media asset ID of the sample audio file.
	//
	// example:
	//
	// ****4d5e829d498aaf966b119348****
	DemoAudioMediaId *string `json:"DemoAudioMediaId,omitempty" xml:"DemoAudioMediaId,omitempty"`
	// The gender. Valid values:
	//
	// 	- female
	//
	// 	- male
	//
	// example:
	//
	// male
	Gender *string `json:"Gender,omitempty" xml:"Gender,omitempty"`
	// The scenario. Valid values:
	//
	// 	- story
	//
	// 	- interaction
	//
	// 	- navigation
	//
	// example:
	//
	// story
	Scenario *string `json:"Scenario,omitempty" xml:"Scenario,omitempty"`
	// 	- The voice type. Valid values:
	//
	//     	- Basic
	//
	//     	- Standard
	//
	// example:
	//
	// Standard
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The voice description.
	VoiceDesc *string `json:"VoiceDesc,omitempty" xml:"VoiceDesc,omitempty"`
	// The voice ID.
	//
	// example:
	//
	// xiaozhuan
	VoiceId *string `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
	// The voice name.
	VoiceName *string `json:"VoiceName,omitempty" xml:"VoiceName,omitempty"`
}

func (s ListCustomizedVoicesResponseBodyDataCustomizedVoiceList) String() string {
	return tea.Prettify(s)
}

func (s ListCustomizedVoicesResponseBodyDataCustomizedVoiceList) GoString() string {
	return s.String()
}

func (s *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList) SetDemoAudioMediaId(v string) *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList {
	s.DemoAudioMediaId = &v
	return s
}

func (s *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList) SetGender(v string) *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList {
	s.Gender = &v
	return s
}

func (s *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList) SetScenario(v string) *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList {
	s.Scenario = &v
	return s
}

func (s *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList) SetType(v string) *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList {
	s.Type = &v
	return s
}

func (s *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList) SetVoiceDesc(v string) *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList {
	s.VoiceDesc = &v
	return s
}

func (s *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList) SetVoiceId(v string) *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList {
	s.VoiceId = &v
	return s
}

func (s *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList) SetVoiceName(v string) *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList {
	s.VoiceName = &v
	return s
}

type ListCustomizedVoicesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCustomizedVoicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCustomizedVoicesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCustomizedVoicesResponse) GoString() string {
	return s.String()
}

func (s *ListCustomizedVoicesResponse) SetHeaders(v map[string]*string) *ListCustomizedVoicesResponse {
	s.Headers = v
	return s
}

func (s *ListCustomizedVoicesResponse) SetStatusCode(v int32) *ListCustomizedVoicesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCustomizedVoicesResponse) SetBody(v *ListCustomizedVoicesResponseBody) *ListCustomizedVoicesResponse {
	s.Body = v
	return s
}

type ListDNADBRequest struct {
	// The IDs of the media fingerprint libraries. We recommend that you query at most 10 libraries at a time. Separate multiple library IDs with commas (,).
	//
	// example:
	//
	// 2288c6ca184c0e47098a5b665e2a12****,78dc866518b843259669df58ed30****
	DBIds                *string `json:"DBIds,omitempty" xml:"DBIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ListDNADBRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDNADBRequest) GoString() string {
	return s.String()
}

func (s *ListDNADBRequest) SetDBIds(v string) *ListDNADBRequest {
	s.DBIds = &v
	return s
}

func (s *ListDNADBRequest) SetOwnerAccount(v string) *ListDNADBRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ListDNADBRequest) SetOwnerId(v int64) *ListDNADBRequest {
	s.OwnerId = &v
	return s
}

func (s *ListDNADBRequest) SetResourceOwnerAccount(v string) *ListDNADBRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListDNADBRequest) SetResourceOwnerId(v int64) *ListDNADBRequest {
	s.ResourceOwnerId = &v
	return s
}

type ListDNADBResponseBody struct {
	// The queried media fingerprint libraries.
	DBList []*ListDNADBResponseBodyDBList `json:"DBList,omitempty" xml:"DBList,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 25818875-5F78-4A13-BEF6-D7393642CA58
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDNADBResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDNADBResponseBody) GoString() string {
	return s.String()
}

func (s *ListDNADBResponseBody) SetDBList(v []*ListDNADBResponseBodyDBList) *ListDNADBResponseBody {
	s.DBList = v
	return s
}

func (s *ListDNADBResponseBody) SetRequestId(v string) *ListDNADBResponseBody {
	s.RequestId = &v
	return s
}

type ListDNADBResponseBodyDBList struct {
	// The ID of the media fingerprint library.
	//
	// example:
	//
	// 88c6ca184c0e47098a5b665e2a12****
	DBId *string `json:"DBId,omitempty" xml:"DBId,omitempty"`
	// The description of the media fingerprint library.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The model of the media fingerprint library. Valid values:
	//
	// 	- **Video**
	//
	// 	- **Audio**
	//
	// 	- **Image**
	//
	// 	- **Text*	- (supported only in the China (Shanghai) region)
	//
	// example:
	//
	// Video
	Model *string `json:"Model,omitempty" xml:"Model,omitempty"`
	// The name of the media fingerprint library.
	//
	// example:
	//
	// example-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The state of the media fingerprint library. Default value: **offline**. ****Valid values:
	//
	// 	- **offline**: The media fingerprint library is offline.
	//
	// 	- **active**: The media fingerprint library is online.
	//
	// 	- **deleted**: The media fingerprint library is deleted.
	//
	// example:
	//
	// active
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListDNADBResponseBodyDBList) String() string {
	return tea.Prettify(s)
}

func (s ListDNADBResponseBodyDBList) GoString() string {
	return s.String()
}

func (s *ListDNADBResponseBodyDBList) SetDBId(v string) *ListDNADBResponseBodyDBList {
	s.DBId = &v
	return s
}

func (s *ListDNADBResponseBodyDBList) SetDescription(v string) *ListDNADBResponseBodyDBList {
	s.Description = &v
	return s
}

func (s *ListDNADBResponseBodyDBList) SetModel(v string) *ListDNADBResponseBodyDBList {
	s.Model = &v
	return s
}

func (s *ListDNADBResponseBodyDBList) SetName(v string) *ListDNADBResponseBodyDBList {
	s.Name = &v
	return s
}

func (s *ListDNADBResponseBodyDBList) SetStatus(v string) *ListDNADBResponseBodyDBList {
	s.Status = &v
	return s
}

type ListDNADBResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDNADBResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDNADBResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDNADBResponse) GoString() string {
	return s.String()
}

func (s *ListDNADBResponse) SetHeaders(v map[string]*string) *ListDNADBResponse {
	s.Headers = v
	return s
}

func (s *ListDNADBResponse) SetStatusCode(v int32) *ListDNADBResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDNADBResponse) SetBody(v *ListDNADBResponseBody) *ListDNADBResponse {
	s.Body = v
	return s
}

type ListDNAFilesRequest struct {
	// The ID of the media fingerprint library.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2288c6ca184c0e47098a5b665e2a12****
	DBId *string `json:"DBId,omitempty" xml:"DBId,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.
	//
	// example:
	//
	// ae0fd49c0840e14daf0d66a75b83****
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	OwnerAccount  *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The number of entries per page. Default value: 20. Valid values: 1 to 100.
	//
	// example:
	//
	// 10
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ListDNAFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDNAFilesRequest) GoString() string {
	return s.String()
}

func (s *ListDNAFilesRequest) SetDBId(v string) *ListDNAFilesRequest {
	s.DBId = &v
	return s
}

func (s *ListDNAFilesRequest) SetNextPageToken(v string) *ListDNAFilesRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListDNAFilesRequest) SetOwnerAccount(v string) *ListDNAFilesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ListDNAFilesRequest) SetOwnerId(v int64) *ListDNAFilesRequest {
	s.OwnerId = &v
	return s
}

func (s *ListDNAFilesRequest) SetPageSize(v int32) *ListDNAFilesRequest {
	s.PageSize = &v
	return s
}

func (s *ListDNAFilesRequest) SetResourceOwnerAccount(v string) *ListDNAFilesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListDNAFilesRequest) SetResourceOwnerId(v int64) *ListDNAFilesRequest {
	s.ResourceOwnerId = &v
	return s
}

type ListDNAFilesResponseBody struct {
	// The queried files.
	FileList []*ListDNAFilesResponseBodyFileList `json:"FileList,omitempty" xml:"FileList,omitempty" type:"Repeated"`
	// A pagination token. It can be used in the next request to retrieve a new page of results.
	//
	// example:
	//
	// ae0fd49c0840e14daf0d66a75b83****
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 2AE89FA5-E620-56C7-9B80-75D09757385A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDNAFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDNAFilesResponseBody) GoString() string {
	return s.String()
}

func (s *ListDNAFilesResponseBody) SetFileList(v []*ListDNAFilesResponseBodyFileList) *ListDNAFilesResponseBody {
	s.FileList = v
	return s
}

func (s *ListDNAFilesResponseBody) SetNextPageToken(v string) *ListDNAFilesResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *ListDNAFilesResponseBody) SetRequestId(v string) *ListDNAFilesResponseBody {
	s.RequestId = &v
	return s
}

type ListDNAFilesResponseBodyFileList struct {
	// The Object Storage Service (OSS) information about the input file.
	InputFile *ListDNAFilesResponseBodyFileListInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	// The primary key of the file.
	//
	// example:
	//
	// ae0fd49c0840e14daf0d66a75b83****
	PrimaryKey *string `json:"PrimaryKey,omitempty" xml:"PrimaryKey,omitempty"`
}

func (s ListDNAFilesResponseBodyFileList) String() string {
	return tea.Prettify(s)
}

func (s ListDNAFilesResponseBodyFileList) GoString() string {
	return s.String()
}

func (s *ListDNAFilesResponseBodyFileList) SetInputFile(v *ListDNAFilesResponseBodyFileListInputFile) *ListDNAFilesResponseBodyFileList {
	s.InputFile = v
	return s
}

func (s *ListDNAFilesResponseBodyFileList) SetPrimaryKey(v string) *ListDNAFilesResponseBodyFileList {
	s.PrimaryKey = &v
	return s
}

type ListDNAFilesResponseBodyFileListInputFile struct {
	// The name of the OSS bucket in which the input file is stored.
	//
	// example:
	//
	// example-bucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// The OSS region in which the input file resides.
	//
	// example:
	//
	// oss-cn-beijing
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The name of the OSS object that is used as the input file.
	//
	// example:
	//
	// example-****.mp4
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s ListDNAFilesResponseBodyFileListInputFile) String() string {
	return tea.Prettify(s)
}

func (s ListDNAFilesResponseBodyFileListInputFile) GoString() string {
	return s.String()
}

func (s *ListDNAFilesResponseBodyFileListInputFile) SetBucket(v string) *ListDNAFilesResponseBodyFileListInputFile {
	s.Bucket = &v
	return s
}

func (s *ListDNAFilesResponseBodyFileListInputFile) SetLocation(v string) *ListDNAFilesResponseBodyFileListInputFile {
	s.Location = &v
	return s
}

func (s *ListDNAFilesResponseBodyFileListInputFile) SetObject(v string) *ListDNAFilesResponseBodyFileListInputFile {
	s.Object = &v
	return s
}

type ListDNAFilesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDNAFilesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDNAFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDNAFilesResponse) GoString() string {
	return s.String()
}

func (s *ListDNAFilesResponse) SetHeaders(v map[string]*string) *ListDNAFilesResponse {
	s.Headers = v
	return s
}

func (s *ListDNAFilesResponse) SetStatusCode(v int32) *ListDNAFilesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDNAFilesResponse) SetBody(v *ListDNAFilesResponseBody) *ListDNAFilesResponse {
	s.Body = v
	return s
}

type ListDynamicImageJobsRequest struct {
	// The end of the time range during which the jobs to be queried were created.
	//
	// example:
	//
	// 2022-07-14T00:00:00Z
	EndOfCreateTime *string `json:"EndOfCreateTime,omitempty" xml:"EndOfCreateTime,omitempty"`
	// The job ID.
	//
	// example:
	//
	// ****cdb3e74639973036bc84****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results.
	//
	// example:
	//
	// cdb3e74639973036bc84
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// The order that you use to sort the query results. Valid values:
	//
	// 1.  CreateTimeAsc: sorts the jobs by creation time in ascending order.
	//
	// 2.  CreateTimeDesc: sorts the jobs by creation time in descending order.
	//
	// example:
	//
	// CreateTimeDesc
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The number of entries per page. Default value: 20. Maximum value: 100.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range during which the jobs to be queried were created.
	//
	// example:
	//
	// 2022-07-12T00:00:00Z
	StartOfCreateTime *string `json:"StartOfCreateTime,omitempty" xml:"StartOfCreateTime,omitempty"`
	// The state of the job.
	//
	// Valid values:
	//
	// 	- Init: The job is submitted.
	//
	// 	- Success: The job is successful.
	//
	// 	- Fail: The job failed.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListDynamicImageJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDynamicImageJobsRequest) GoString() string {
	return s.String()
}

func (s *ListDynamicImageJobsRequest) SetEndOfCreateTime(v string) *ListDynamicImageJobsRequest {
	s.EndOfCreateTime = &v
	return s
}

func (s *ListDynamicImageJobsRequest) SetJobId(v string) *ListDynamicImageJobsRequest {
	s.JobId = &v
	return s
}

func (s *ListDynamicImageJobsRequest) SetNextPageToken(v string) *ListDynamicImageJobsRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListDynamicImageJobsRequest) SetOrderBy(v string) *ListDynamicImageJobsRequest {
	s.OrderBy = &v
	return s
}

func (s *ListDynamicImageJobsRequest) SetPageSize(v int32) *ListDynamicImageJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListDynamicImageJobsRequest) SetStartOfCreateTime(v string) *ListDynamicImageJobsRequest {
	s.StartOfCreateTime = &v
	return s
}

func (s *ListDynamicImageJobsRequest) SetStatus(v string) *ListDynamicImageJobsRequest {
	s.Status = &v
	return s
}

type ListDynamicImageJobsResponseBody struct {
	// The list of jobs.
	Jobs []*ListDynamicImageJobsResponseBodyJobs `json:"Jobs,omitempty" xml:"Jobs,omitempty" type:"Repeated"`
	// The pagination token that is used in the next request to retrieve a new page of results.
	//
	// example:
	//
	// ****cdb3e74639973036bc84****
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDynamicImageJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDynamicImageJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDynamicImageJobsResponseBody) SetJobs(v []*ListDynamicImageJobsResponseBodyJobs) *ListDynamicImageJobsResponseBody {
	s.Jobs = v
	return s
}

func (s *ListDynamicImageJobsResponseBody) SetNextPageToken(v string) *ListDynamicImageJobsResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *ListDynamicImageJobsResponseBody) SetRequestId(v string) *ListDynamicImageJobsResponseBody {
	s.RequestId = &v
	return s
}

type ListDynamicImageJobsResponseBodyJobs struct {
	// The time when the job was created.
	//
	// example:
	//
	// 2022-07-12T16:17:54Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the job was complete.
	//
	// example:
	//
	// 2022-07-12T16:30:54Z
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The input of the job.
	Input *ListDynamicImageJobsResponseBodyJobsInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// The job ID.
	//
	// example:
	//
	// ****cdb3e74639973036bc84****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The time when the job was last modified.
	//
	// example:
	//
	// 2022-07-12T16:30:54Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The name of the job.
	//
	// example:
	//
	// SampleJob
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output of the job.
	Output *ListDynamicImageJobsResponseBodyJobsOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// The ID of the MPS queue to which the job was submitted.
	//
	// example:
	//
	// ****cdb3e74639973036bc84****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The state of the job.
	//
	// 	- **Success**: The job is successful.
	//
	// 	- **Fail**: The job failed.
	//
	// 	- **Init**: The job is submitted.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The time when the job was submitted.
	//
	// example:
	//
	// 2022-07-12T16:17:54Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// The template ID.
	//
	// example:
	//
	// ****cdb3e74639973036bc84****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The request trigger source.
	//
	// Valid values:
	//
	// 	- Console
	//
	// 	- Workflow
	//
	// 	- API
	//
	// example:
	//
	// API
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
}

func (s ListDynamicImageJobsResponseBodyJobs) String() string {
	return tea.Prettify(s)
}

func (s ListDynamicImageJobsResponseBodyJobs) GoString() string {
	return s.String()
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetCreateTime(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.CreateTime = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetFinishTime(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.FinishTime = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetInput(v *ListDynamicImageJobsResponseBodyJobsInput) *ListDynamicImageJobsResponseBodyJobs {
	s.Input = v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetJobId(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.JobId = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetModifiedTime(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.ModifiedTime = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetName(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.Name = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetOutput(v *ListDynamicImageJobsResponseBodyJobsOutput) *ListDynamicImageJobsResponseBodyJobs {
	s.Output = v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetPipelineId(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.PipelineId = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetStatus(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.Status = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetSubmitTime(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.SubmitTime = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetTemplateId(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.TemplateId = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetTriggerSource(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.TriggerSource = &v
	return s
}

type ListDynamicImageJobsResponseBodyJobsInput struct {
	// The input file. The file can be an OSS object or a media asset. The URL of an OSS object can be in one of the following formats:
	//
	// 1.  OSS://bucket/object
	//
	// 2.  http(s)://bucket.oss-[regionId].aliyuncs.com/object In the URL, bucket specifies an OSS bucket that resides in the same region as the job, and object specifies the object URL in OSS.
	//
	// example:
	//
	// oss://bucket/object
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the input file. Valid values:
	//
	// 1.  OSS: an Object Storage Service (OSS) object.
	//
	// 2.  Media: a media asset.
	//
	// *
	//
	// *
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDynamicImageJobsResponseBodyJobsInput) String() string {
	return tea.Prettify(s)
}

func (s ListDynamicImageJobsResponseBodyJobsInput) GoString() string {
	return s.String()
}

func (s *ListDynamicImageJobsResponseBodyJobsInput) SetMedia(v string) *ListDynamicImageJobsResponseBodyJobsInput {
	s.Media = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobsInput) SetType(v string) *ListDynamicImageJobsResponseBodyJobsInput {
	s.Type = &v
	return s
}

type ListDynamicImageJobsResponseBodyJobsOutput struct {
	// The input file. If Type is set to OSS, the URL of an OSS object is returned. If Type is set to Media, the ID of a media asset is returned. The URL of an OSS object can be in one of the following formats:
	//
	// 1.  OSS://bucket/object
	//
	// 2.  http(s)://bucket.oss-[RegionId].aliyuncs.com/object In the URL, bucket specifies an OSS bucket that resides in the same region as the job, and object specifies the object URL in OSS.
	//
	// example:
	//
	// ****cdb3e74639973036bc84****
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the output file. Valid values:
	//
	// 1.  OSS: an OSS object.
	//
	// 2.  Media: a media asset.
	//
	// *
	//
	// *
	//
	// example:
	//
	// Media
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDynamicImageJobsResponseBodyJobsOutput) String() string {
	return tea.Prettify(s)
}

func (s ListDynamicImageJobsResponseBodyJobsOutput) GoString() string {
	return s.String()
}

func (s *ListDynamicImageJobsResponseBodyJobsOutput) SetMedia(v string) *ListDynamicImageJobsResponseBodyJobsOutput {
	s.Media = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobsOutput) SetType(v string) *ListDynamicImageJobsResponseBodyJobsOutput {
	s.Type = &v
	return s
}

type ListDynamicImageJobsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDynamicImageJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDynamicImageJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDynamicImageJobsResponse) GoString() string {
	return s.String()
}

func (s *ListDynamicImageJobsResponse) SetHeaders(v map[string]*string) *ListDynamicImageJobsResponse {
	s.Headers = v
	return s
}

func (s *ListDynamicImageJobsResponse) SetStatusCode(v int32) *ListDynamicImageJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDynamicImageJobsResponse) SetBody(v *ListDynamicImageJobsResponseBody) *ListDynamicImageJobsResponse {
	s.Body = v
	return s
}

type ListEditingProjectsRequest struct {
	// The method for creating the online editing project. Valid values:
	//
	// \\- OpenAPI
	//
	// \\- AliyunConsole
	//
	// \\- WebSDK
	//
	// example:
	//
	// OpenAPI
	CreateSource *string `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	// The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// example:
	//
	// 2022-02-02T23:59:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The search keyword. You can search by job ID.
	//
	// example:
	//
	// ******6f36bc45d09a9d5cde49******
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The number of entries per page. A maximum of 100 entries can be returned on each page.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	MaxResults *string `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results.
	//
	// example:
	//
	// 8EqYpQbZ6Eh7+Zz8DxVYoQ==
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The type of the editing project. Valid values:
	//
	// 	- EditingProject: a regular editing project.
	//
	// 	- LiveEditingProject: a live stream editing project.
	//
	// example:
	//
	// EditingProject
	ProjectType *string `json:"ProjectType,omitempty" xml:"ProjectType,omitempty"`
	// The order of sorting of the results. Valid values:
	//
	// 	- CreationTime:Desc (default): sorts the results in reverse chronological order.
	//
	// 	- CreationTime:Asc: sorts the results in chronological order.
	//
	// example:
	//
	// CreationTime:Desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// example:
	//
	// 2017-12-21T08:00:01Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The status of the online editing project. By default, online editing projects in all states are queried.
	//
	// example:
	//
	// Produced
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The template type. This parameter is required if you create a template-based online editing project. Default value: Timeline.
	//
	// *
	//
	// *
	//
	// Valid values:
	//
	// 	- Timeline: a regular template.
	//
	// 	- VETemplate: an advanced template.
	//
	// 	- None: general editing.
	//
	// example:
	//
	// None
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
}

func (s ListEditingProjectsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEditingProjectsRequest) GoString() string {
	return s.String()
}

func (s *ListEditingProjectsRequest) SetCreateSource(v string) *ListEditingProjectsRequest {
	s.CreateSource = &v
	return s
}

func (s *ListEditingProjectsRequest) SetEndTime(v string) *ListEditingProjectsRequest {
	s.EndTime = &v
	return s
}

func (s *ListEditingProjectsRequest) SetKeyword(v string) *ListEditingProjectsRequest {
	s.Keyword = &v
	return s
}

func (s *ListEditingProjectsRequest) SetMaxResults(v string) *ListEditingProjectsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListEditingProjectsRequest) SetNextToken(v string) *ListEditingProjectsRequest {
	s.NextToken = &v
	return s
}

func (s *ListEditingProjectsRequest) SetProjectType(v string) *ListEditingProjectsRequest {
	s.ProjectType = &v
	return s
}

func (s *ListEditingProjectsRequest) SetSortBy(v string) *ListEditingProjectsRequest {
	s.SortBy = &v
	return s
}

func (s *ListEditingProjectsRequest) SetStartTime(v string) *ListEditingProjectsRequest {
	s.StartTime = &v
	return s
}

func (s *ListEditingProjectsRequest) SetStatus(v string) *ListEditingProjectsRequest {
	s.Status = &v
	return s
}

func (s *ListEditingProjectsRequest) SetTemplateType(v string) *ListEditingProjectsRequest {
	s.TemplateType = &v
	return s
}

type ListEditingProjectsResponseBody struct {
	// The maximum number of entries returned.
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.
	//
	// This parameter is required.
	//
	// example:
	//
	// Nzv3rcKla9wHUGua9YXHNA==
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The queried online editing projects.
	ProjectList []*ListEditingProjectsResponseBodyProjectList `json:"ProjectList,omitempty" xml:"ProjectList,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// *****ACB-44F2-5F2D-88D7-1283E70*****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListEditingProjectsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListEditingProjectsResponseBody) GoString() string {
	return s.String()
}

func (s *ListEditingProjectsResponseBody) SetMaxResults(v int32) *ListEditingProjectsResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListEditingProjectsResponseBody) SetNextToken(v string) *ListEditingProjectsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListEditingProjectsResponseBody) SetProjectList(v []*ListEditingProjectsResponseBodyProjectList) *ListEditingProjectsResponseBody {
	s.ProjectList = v
	return s
}

func (s *ListEditingProjectsResponseBody) SetRequestId(v string) *ListEditingProjectsResponseBody {
	s.RequestId = &v
	return s
}

type ListEditingProjectsResponseBodyProjectList struct {
	// The business configuration of the project. This parameter can be ignored for general editing projects.
	//
	// example:
	//
	// {}
	BusinessConfig *string `json:"BusinessConfig,omitempty" xml:"BusinessConfig,omitempty"`
	// The business status of the project. This parameter can be ignored for general editing projects.
	//
	// example:
	//
	// {}
	BusinessStatus *string `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty"`
	// The thumbnail URL of the online editing project.
	//
	// example:
	//
	// https://xxx.com/cover/xxx.jpg
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// The method for editing the online editing project. Valid values:
	//
	// \\- OpenAPI
	//
	// \\- AliyunConsole
	//
	// \\- WebSDK
	//
	// example:
	//
	// OpenAPI
	CreateSource *string `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	// The time when the online editing project was created.
	//
	// example:
	//
	// 2017-01-11T12:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The description of the online editing project.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The error code returned if the production of the online editing project failed.
	//
	// example:
	//
	// InvalidParameter
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The error message returned if the production of the online editing project failed.
	//
	// example:
	//
	// The specified parameter \\"LiveStreamConfig\\" is not valid. specified parameter example is not valid.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The method for modifying the online editing project last time.
	//
	// example:
	//
	// OpenAPI
	ModifiedSource *string `json:"ModifiedSource,omitempty" xml:"ModifiedSource,omitempty"`
	// The time when the online editing project was last modified.
	//
	// example:
	//
	// 2017-01-11T12:00:00Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The ID of the online editing project.
	//
	// example:
	//
	// ****fddd7748b58bf1d47e95****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The type of the editing project. Valid values:
	//
	// 	- EditingProject: a regular editing project.
	//
	// 	- LiveEditingProject: a live stream editing project.
	//
	// example:
	//
	// EditingProject
	ProjectType *string `json:"ProjectType,omitempty" xml:"ProjectType,omitempty"`
	// The status of the online editing project. Valid values:
	//
	// \\- Draft
	//
	// \\- Editing
	//
	// \\- Producing
	//
	// \\- Produced
	//
	// \\- ProduceFailed
	//
	// example:
	//
	// Produced
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The template type. Valid values:
	//
	// 	- Timeline: a regular template.
	//
	// 	- VETemplate: an advanced template.
	//
	// example:
	//
	// Timeline
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	// The title of the online editing project.
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s ListEditingProjectsResponseBodyProjectList) String() string {
	return tea.Prettify(s)
}

func (s ListEditingProjectsResponseBodyProjectList) GoString() string {
	return s.String()
}

func (s *ListEditingProjectsResponseBodyProjectList) SetBusinessConfig(v string) *ListEditingProjectsResponseBodyProjectList {
	s.BusinessConfig = &v
	return s
}

func (s *ListEditingProjectsResponseBodyProjectList) SetBusinessStatus(v string) *ListEditingProjectsResponseBodyProjectList {
	s.BusinessStatus = &v
	return s
}

func (s *ListEditingProjectsResponseBodyProjectList) SetCoverURL(v string) *ListEditingProjectsResponseBodyProjectList {
	s.CoverURL = &v
	return s
}

func (s *ListEditingProjectsResponseBodyProjectList) SetCreateSource(v string) *ListEditingProjectsResponseBodyProjectList {
	s.CreateSource = &v
	return s
}

func (s *ListEditingProjectsResponseBodyProjectList) SetCreateTime(v string) *ListEditingProjectsResponseBodyProjectList {
	s.CreateTime = &v
	return s
}

func (s *ListEditingProjectsResponseBodyProjectList) SetDescription(v string) *ListEditingProjectsResponseBodyProjectList {
	s.Description = &v
	return s
}

func (s *ListEditingProjectsResponseBodyProjectList) SetErrorCode(v string) *ListEditingProjectsResponseBodyProjectList {
	s.ErrorCode = &v
	return s
}

func (s *ListEditingProjectsResponseBodyProjectList) SetErrorMessage(v string) *ListEditingProjectsResponseBodyProjectList {
	s.ErrorMessage = &v
	return s
}

func (s *ListEditingProjectsResponseBodyProjectList) SetModifiedSource(v string) *ListEditingProjectsResponseBodyProjectList {
	s.ModifiedSource = &v
	return s
}

func (s *ListEditingProjectsResponseBodyProjectList) SetModifiedTime(v string) *ListEditingProjectsResponseBodyProjectList {
	s.ModifiedTime = &v
	return s
}

func (s *ListEditingProjectsResponseBodyProjectList) SetProjectId(v string) *ListEditingProjectsResponseBodyProjectList {
	s.ProjectId = &v
	return s
}

func (s *ListEditingProjectsResponseBodyProjectList) SetProjectType(v string) *ListEditingProjectsResponseBodyProjectList {
	s.ProjectType = &v
	return s
}

func (s *ListEditingProjectsResponseBodyProjectList) SetStatus(v string) *ListEditingProjectsResponseBodyProjectList {
	s.Status = &v
	return s
}

func (s *ListEditingProjectsResponseBodyProjectList) SetTemplateType(v string) *ListEditingProjectsResponseBodyProjectList {
	s.TemplateType = &v
	return s
}

func (s *ListEditingProjectsResponseBodyProjectList) SetTitle(v string) *ListEditingProjectsResponseBodyProjectList {
	s.Title = &v
	return s
}

type ListEditingProjectsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListEditingProjectsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListEditingProjectsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEditingProjectsResponse) GoString() string {
	return s.String()
}

func (s *ListEditingProjectsResponse) SetHeaders(v map[string]*string) *ListEditingProjectsResponse {
	s.Headers = v
	return s
}

func (s *ListEditingProjectsResponse) SetStatusCode(v int32) *ListEditingProjectsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListEditingProjectsResponse) SetBody(v *ListEditingProjectsResponseBody) *ListEditingProjectsResponse {
	s.Body = v
	return s
}

type ListHotwordLibrariesRequest struct {
	// example:
	//
	// 2020-12-26T04:11:10Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 热词库使用名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// ****73f33c91-d59383e8280b****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// CreationTime:Desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// example:
	//
	// 2020-12-26T04:11:10Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// ASR
	UsageScenario *string `json:"UsageScenario,omitempty" xml:"UsageScenario,omitempty"`
}

func (s ListHotwordLibrariesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHotwordLibrariesRequest) GoString() string {
	return s.String()
}

func (s *ListHotwordLibrariesRequest) SetEndTime(v string) *ListHotwordLibrariesRequest {
	s.EndTime = &v
	return s
}

func (s *ListHotwordLibrariesRequest) SetMaxResults(v int32) *ListHotwordLibrariesRequest {
	s.MaxResults = &v
	return s
}

func (s *ListHotwordLibrariesRequest) SetName(v string) *ListHotwordLibrariesRequest {
	s.Name = &v
	return s
}

func (s *ListHotwordLibrariesRequest) SetNextToken(v string) *ListHotwordLibrariesRequest {
	s.NextToken = &v
	return s
}

func (s *ListHotwordLibrariesRequest) SetPageNo(v int64) *ListHotwordLibrariesRequest {
	s.PageNo = &v
	return s
}

func (s *ListHotwordLibrariesRequest) SetPageSize(v int64) *ListHotwordLibrariesRequest {
	s.PageSize = &v
	return s
}

func (s *ListHotwordLibrariesRequest) SetSortBy(v string) *ListHotwordLibrariesRequest {
	s.SortBy = &v
	return s
}

func (s *ListHotwordLibrariesRequest) SetStartTime(v string) *ListHotwordLibrariesRequest {
	s.StartTime = &v
	return s
}

func (s *ListHotwordLibrariesRequest) SetUsageScenario(v string) *ListHotwordLibrariesRequest {
	s.UsageScenario = &v
	return s
}

type ListHotwordLibrariesResponseBody struct {
	HotwordLibraryList []*ListHotwordLibrariesResponseBodyHotwordLibraryList `json:"HotwordLibraryList,omitempty" xml:"HotwordLibraryList,omitempty" type:"Repeated"`
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// CBB6BC61D08
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// ****9262E3DA-07FA-4862-FCBB6BC61D08*****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 20
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListHotwordLibrariesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHotwordLibrariesResponseBody) GoString() string {
	return s.String()
}

func (s *ListHotwordLibrariesResponseBody) SetHotwordLibraryList(v []*ListHotwordLibrariesResponseBodyHotwordLibraryList) *ListHotwordLibrariesResponseBody {
	s.HotwordLibraryList = v
	return s
}

func (s *ListHotwordLibrariesResponseBody) SetMaxResults(v int32) *ListHotwordLibrariesResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListHotwordLibrariesResponseBody) SetNextToken(v string) *ListHotwordLibrariesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListHotwordLibrariesResponseBody) SetRequestId(v string) *ListHotwordLibrariesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListHotwordLibrariesResponseBody) SetTotalCount(v int32) *ListHotwordLibrariesResponseBody {
	s.TotalCount = &v
	return s
}

type ListHotwordLibrariesResponseBodyHotwordLibraryList struct {
	// example:
	//
	// 2017-01-11T12:00:00Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// a93b91141c0f422fa114af203f8b****
	HotwordLibraryId *string `json:"HotwordLibraryId,omitempty" xml:"HotwordLibraryId,omitempty"`
	// example:
	//
	// 2017-01-11T12:00:00Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// my_hotwords
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// ASR
	UsageScenario *string `json:"UsageScenario,omitempty" xml:"UsageScenario,omitempty"`
}

func (s ListHotwordLibrariesResponseBodyHotwordLibraryList) String() string {
	return tea.Prettify(s)
}

func (s ListHotwordLibrariesResponseBodyHotwordLibraryList) GoString() string {
	return s.String()
}

func (s *ListHotwordLibrariesResponseBodyHotwordLibraryList) SetCreationTime(v string) *ListHotwordLibrariesResponseBodyHotwordLibraryList {
	s.CreationTime = &v
	return s
}

func (s *ListHotwordLibrariesResponseBodyHotwordLibraryList) SetDescription(v string) *ListHotwordLibrariesResponseBodyHotwordLibraryList {
	s.Description = &v
	return s
}

func (s *ListHotwordLibrariesResponseBodyHotwordLibraryList) SetHotwordLibraryId(v string) *ListHotwordLibrariesResponseBodyHotwordLibraryList {
	s.HotwordLibraryId = &v
	return s
}

func (s *ListHotwordLibrariesResponseBodyHotwordLibraryList) SetModifiedTime(v string) *ListHotwordLibrariesResponseBodyHotwordLibraryList {
	s.ModifiedTime = &v
	return s
}

func (s *ListHotwordLibrariesResponseBodyHotwordLibraryList) SetName(v string) *ListHotwordLibrariesResponseBodyHotwordLibraryList {
	s.Name = &v
	return s
}

func (s *ListHotwordLibrariesResponseBodyHotwordLibraryList) SetUsageScenario(v string) *ListHotwordLibrariesResponseBodyHotwordLibraryList {
	s.UsageScenario = &v
	return s
}

type ListHotwordLibrariesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListHotwordLibrariesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListHotwordLibrariesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHotwordLibrariesResponse) GoString() string {
	return s.String()
}

func (s *ListHotwordLibrariesResponse) SetHeaders(v map[string]*string) *ListHotwordLibrariesResponse {
	s.Headers = v
	return s
}

func (s *ListHotwordLibrariesResponse) SetStatusCode(v int32) *ListHotwordLibrariesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHotwordLibrariesResponse) SetBody(v *ListHotwordLibrariesResponseBody) *ListHotwordLibrariesResponse {
	s.Body = v
	return s
}

type ListLivePackageChannelGroupsRequest struct {
	// The channel group name or description. Fuzzy match is supported.
	//
	// example:
	//
	// channel-group
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Valid values: 1 to 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The sort order by creation time. Default value: desc.
	//
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
}

func (s ListLivePackageChannelGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLivePackageChannelGroupsRequest) GoString() string {
	return s.String()
}

func (s *ListLivePackageChannelGroupsRequest) SetKeyword(v string) *ListLivePackageChannelGroupsRequest {
	s.Keyword = &v
	return s
}

func (s *ListLivePackageChannelGroupsRequest) SetPageNo(v int64) *ListLivePackageChannelGroupsRequest {
	s.PageNo = &v
	return s
}

func (s *ListLivePackageChannelGroupsRequest) SetPageSize(v int64) *ListLivePackageChannelGroupsRequest {
	s.PageSize = &v
	return s
}

func (s *ListLivePackageChannelGroupsRequest) SetSortBy(v string) *ListLivePackageChannelGroupsRequest {
	s.SortBy = &v
	return s
}

type ListLivePackageChannelGroupsResponseBody struct {
	// The channel groups returned.
	LivePackageChannelGroups []*ListLivePackageChannelGroupsResponseBodyLivePackageChannelGroups `json:"LivePackageChannelGroups,omitempty" xml:"LivePackageChannelGroups,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 5D87B753-0250-5D9D-B248-D40C3271F864
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The sort order.
	//
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListLivePackageChannelGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLivePackageChannelGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListLivePackageChannelGroupsResponseBody) SetLivePackageChannelGroups(v []*ListLivePackageChannelGroupsResponseBodyLivePackageChannelGroups) *ListLivePackageChannelGroupsResponseBody {
	s.LivePackageChannelGroups = v
	return s
}

func (s *ListLivePackageChannelGroupsResponseBody) SetPageNo(v int64) *ListLivePackageChannelGroupsResponseBody {
	s.PageNo = &v
	return s
}

func (s *ListLivePackageChannelGroupsResponseBody) SetPageSize(v int64) *ListLivePackageChannelGroupsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListLivePackageChannelGroupsResponseBody) SetRequestId(v string) *ListLivePackageChannelGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLivePackageChannelGroupsResponseBody) SetSortBy(v string) *ListLivePackageChannelGroupsResponseBody {
	s.SortBy = &v
	return s
}

func (s *ListLivePackageChannelGroupsResponseBody) SetTotalCount(v int64) *ListLivePackageChannelGroupsResponseBody {
	s.TotalCount = &v
	return s
}

type ListLivePackageChannelGroupsResponseBodyLivePackageChannelGroups struct {
	// The time when the channel group was created. It is in the `yyyy-MM-ddTHH:mm:ssZ` format and displayed in UTC.
	//
	// example:
	//
	// 2023-04-01T12:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The channel group description.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The channel group name.
	//
	// example:
	//
	// testChannelGroup
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The time when the channel group was last modified. It is in the `yyyy-MM-ddTHH:mm:ssZ` format and displayed in UTC.
	//
	// example:
	//
	// 2023-04-02T12:00:00Z
	LastModified *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	// The origin domain.
	//
	// example:
	//
	// origin.example.com
	OriginDomain *string `json:"OriginDomain,omitempty" xml:"OriginDomain,omitempty"`
}

func (s ListLivePackageChannelGroupsResponseBodyLivePackageChannelGroups) String() string {
	return tea.Prettify(s)
}

func (s ListLivePackageChannelGroupsResponseBodyLivePackageChannelGroups) GoString() string {
	return s.String()
}

func (s *ListLivePackageChannelGroupsResponseBodyLivePackageChannelGroups) SetCreateTime(v string) *ListLivePackageChannelGroupsResponseBodyLivePackageChannelGroups {
	s.CreateTime = &v
	return s
}

func (s *ListLivePackageChannelGroupsResponseBodyLivePackageChannelGroups) SetDescription(v string) *ListLivePackageChannelGroupsResponseBodyLivePackageChannelGroups {
	s.Description = &v
	return s
}

func (s *ListLivePackageChannelGroupsResponseBodyLivePackageChannelGroups) SetGroupName(v string) *ListLivePackageChannelGroupsResponseBodyLivePackageChannelGroups {
	s.GroupName = &v
	return s
}

func (s *ListLivePackageChannelGroupsResponseBodyLivePackageChannelGroups) SetLastModified(v string) *ListLivePackageChannelGroupsResponseBodyLivePackageChannelGroups {
	s.LastModified = &v
	return s
}

func (s *ListLivePackageChannelGroupsResponseBodyLivePackageChannelGroups) SetOriginDomain(v string) *ListLivePackageChannelGroupsResponseBodyLivePackageChannelGroups {
	s.OriginDomain = &v
	return s
}

type ListLivePackageChannelGroupsResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListLivePackageChannelGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListLivePackageChannelGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLivePackageChannelGroupsResponse) GoString() string {
	return s.String()
}

func (s *ListLivePackageChannelGroupsResponse) SetHeaders(v map[string]*string) *ListLivePackageChannelGroupsResponse {
	s.Headers = v
	return s
}

func (s *ListLivePackageChannelGroupsResponse) SetStatusCode(v int32) *ListLivePackageChannelGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLivePackageChannelGroupsResponse) SetBody(v *ListLivePackageChannelGroupsResponseBody) *ListLivePackageChannelGroupsResponse {
	s.Body = v
	return s
}

type ListLivePackageChannelsRequest struct {
	// The channel group name.
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-group-1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The channel name or description. Fuzzy match is supported.
	//
	// example:
	//
	// group-1
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The sort order by creation time. Default value: desc.
	//
	// Valid values:
	//
	// 	- asc
	//
	// 	- desc
	//
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
}

func (s ListLivePackageChannelsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLivePackageChannelsRequest) GoString() string {
	return s.String()
}

func (s *ListLivePackageChannelsRequest) SetGroupName(v string) *ListLivePackageChannelsRequest {
	s.GroupName = &v
	return s
}

func (s *ListLivePackageChannelsRequest) SetKeyword(v string) *ListLivePackageChannelsRequest {
	s.Keyword = &v
	return s
}

func (s *ListLivePackageChannelsRequest) SetPageNo(v int64) *ListLivePackageChannelsRequest {
	s.PageNo = &v
	return s
}

func (s *ListLivePackageChannelsRequest) SetPageSize(v int64) *ListLivePackageChannelsRequest {
	s.PageSize = &v
	return s
}

func (s *ListLivePackageChannelsRequest) SetSortBy(v string) *ListLivePackageChannelsRequest {
	s.SortBy = &v
	return s
}

type ListLivePackageChannelsResponseBody struct {
	// The live package channels.
	LivePackageChannels []*ListLivePackageChannelsResponseBodyLivePackageChannels `json:"LivePackageChannels,omitempty" xml:"LivePackageChannels,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Valid values: 1 to 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The sort order. Valid values: asc and desc (default).
	//
	// example:
	//
	// asc/desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 15
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListLivePackageChannelsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLivePackageChannelsResponseBody) GoString() string {
	return s.String()
}

func (s *ListLivePackageChannelsResponseBody) SetLivePackageChannels(v []*ListLivePackageChannelsResponseBodyLivePackageChannels) *ListLivePackageChannelsResponseBody {
	s.LivePackageChannels = v
	return s
}

func (s *ListLivePackageChannelsResponseBody) SetPageNo(v int64) *ListLivePackageChannelsResponseBody {
	s.PageNo = &v
	return s
}

func (s *ListLivePackageChannelsResponseBody) SetPageSize(v int64) *ListLivePackageChannelsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListLivePackageChannelsResponseBody) SetRequestId(v string) *ListLivePackageChannelsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLivePackageChannelsResponseBody) SetSortBy(v string) *ListLivePackageChannelsResponseBody {
	s.SortBy = &v
	return s
}

func (s *ListLivePackageChannelsResponseBody) SetTotalCount(v int64) *ListLivePackageChannelsResponseBody {
	s.TotalCount = &v
	return s
}

type ListLivePackageChannelsResponseBodyLivePackageChannels struct {
	// The channel name.
	//
	// example:
	//
	// ch3
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The time when the channel was created.
	//
	// example:
	//
	// 2023-04-01T12:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The channel description.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The channel group name.
	//
	// example:
	//
	// channel-group-1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The ingest endpoints.
	IngestEndpoints []*ListLivePackageChannelsResponseBodyLivePackageChannelsIngestEndpoints `json:"IngestEndpoints,omitempty" xml:"IngestEndpoints,omitempty" type:"Repeated"`
	// The time when the channel was last modified.
	//
	// example:
	//
	// 2023-04-01T12:00:00Z
	LastModified *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	// The ingest protocol. Only HLS is supported.
	//
	// example:
	//
	// HLS
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// The number of M3U8 segments.
	//
	// example:
	//
	// 3
	SegmentCount *int32 `json:"SegmentCount,omitempty" xml:"SegmentCount,omitempty"`
	// The segment duration.
	//
	// example:
	//
	// 5
	SegmentDuration *int32 `json:"SegmentDuration,omitempty" xml:"SegmentDuration,omitempty"`
}

func (s ListLivePackageChannelsResponseBodyLivePackageChannels) String() string {
	return tea.Prettify(s)
}

func (s ListLivePackageChannelsResponseBodyLivePackageChannels) GoString() string {
	return s.String()
}

func (s *ListLivePackageChannelsResponseBodyLivePackageChannels) SetChannelName(v string) *ListLivePackageChannelsResponseBodyLivePackageChannels {
	s.ChannelName = &v
	return s
}

func (s *ListLivePackageChannelsResponseBodyLivePackageChannels) SetCreateTime(v string) *ListLivePackageChannelsResponseBodyLivePackageChannels {
	s.CreateTime = &v
	return s
}

func (s *ListLivePackageChannelsResponseBodyLivePackageChannels) SetDescription(v string) *ListLivePackageChannelsResponseBodyLivePackageChannels {
	s.Description = &v
	return s
}

func (s *ListLivePackageChannelsResponseBodyLivePackageChannels) SetGroupName(v string) *ListLivePackageChannelsResponseBodyLivePackageChannels {
	s.GroupName = &v
	return s
}

func (s *ListLivePackageChannelsResponseBodyLivePackageChannels) SetIngestEndpoints(v []*ListLivePackageChannelsResponseBodyLivePackageChannelsIngestEndpoints) *ListLivePackageChannelsResponseBodyLivePackageChannels {
	s.IngestEndpoints = v
	return s
}

func (s *ListLivePackageChannelsResponseBodyLivePackageChannels) SetLastModified(v string) *ListLivePackageChannelsResponseBodyLivePackageChannels {
	s.LastModified = &v
	return s
}

func (s *ListLivePackageChannelsResponseBodyLivePackageChannels) SetProtocol(v string) *ListLivePackageChannelsResponseBodyLivePackageChannels {
	s.Protocol = &v
	return s
}

func (s *ListLivePackageChannelsResponseBodyLivePackageChannels) SetSegmentCount(v int32) *ListLivePackageChannelsResponseBodyLivePackageChannels {
	s.SegmentCount = &v
	return s
}

func (s *ListLivePackageChannelsResponseBodyLivePackageChannels) SetSegmentDuration(v int32) *ListLivePackageChannelsResponseBodyLivePackageChannels {
	s.SegmentDuration = &v
	return s
}

type ListLivePackageChannelsResponseBodyLivePackageChannelsIngestEndpoints struct {
	// The ingest endpoint ID.
	//
	// example:
	//
	// ingest1
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The password.
	//
	// example:
	//
	// 2F9e9******18b569c8
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The ingest endpoint URL.
	//
	// example:
	//
	// http://xxx-1.packagepush-abcxxx.ap-southeast-1.aliyuncsiceintl.com/v1/group01/1/ch01/manifest
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// The username.
	//
	// example:
	//
	// us12******das
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s ListLivePackageChannelsResponseBodyLivePackageChannelsIngestEndpoints) String() string {
	return tea.Prettify(s)
}

func (s ListLivePackageChannelsResponseBodyLivePackageChannelsIngestEndpoints) GoString() string {
	return s.String()
}

func (s *ListLivePackageChannelsResponseBodyLivePackageChannelsIngestEndpoints) SetId(v string) *ListLivePackageChannelsResponseBodyLivePackageChannelsIngestEndpoints {
	s.Id = &v
	return s
}

func (s *ListLivePackageChannelsResponseBodyLivePackageChannelsIngestEndpoints) SetPassword(v string) *ListLivePackageChannelsResponseBodyLivePackageChannelsIngestEndpoints {
	s.Password = &v
	return s
}

func (s *ListLivePackageChannelsResponseBodyLivePackageChannelsIngestEndpoints) SetUrl(v string) *ListLivePackageChannelsResponseBodyLivePackageChannelsIngestEndpoints {
	s.Url = &v
	return s
}

func (s *ListLivePackageChannelsResponseBodyLivePackageChannelsIngestEndpoints) SetUsername(v string) *ListLivePackageChannelsResponseBodyLivePackageChannelsIngestEndpoints {
	s.Username = &v
	return s
}

type ListLivePackageChannelsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListLivePackageChannelsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListLivePackageChannelsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLivePackageChannelsResponse) GoString() string {
	return s.String()
}

func (s *ListLivePackageChannelsResponse) SetHeaders(v map[string]*string) *ListLivePackageChannelsResponse {
	s.Headers = v
	return s
}

func (s *ListLivePackageChannelsResponse) SetStatusCode(v int32) *ListLivePackageChannelsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLivePackageChannelsResponse) SetBody(v *ListLivePackageChannelsResponseBody) *ListLivePackageChannelsResponse {
	s.Body = v
	return s
}

type ListLivePackageOriginEndpointsRequest struct {
	// The channel name.
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-1
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The channel group name.
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-group-1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The endpoint name or description. Fuzzy match is supported.
	//
	// example:
	//
	// endpoint-
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The sort order by creation time. Valid values: asc and desc (default).
	//
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
}

func (s ListLivePackageOriginEndpointsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLivePackageOriginEndpointsRequest) GoString() string {
	return s.String()
}

func (s *ListLivePackageOriginEndpointsRequest) SetChannelName(v string) *ListLivePackageOriginEndpointsRequest {
	s.ChannelName = &v
	return s
}

func (s *ListLivePackageOriginEndpointsRequest) SetGroupName(v string) *ListLivePackageOriginEndpointsRequest {
	s.GroupName = &v
	return s
}

func (s *ListLivePackageOriginEndpointsRequest) SetKeyword(v string) *ListLivePackageOriginEndpointsRequest {
	s.Keyword = &v
	return s
}

func (s *ListLivePackageOriginEndpointsRequest) SetPageNo(v int64) *ListLivePackageOriginEndpointsRequest {
	s.PageNo = &v
	return s
}

func (s *ListLivePackageOriginEndpointsRequest) SetPageSize(v int64) *ListLivePackageOriginEndpointsRequest {
	s.PageSize = &v
	return s
}

func (s *ListLivePackageOriginEndpointsRequest) SetSortBy(v string) *ListLivePackageOriginEndpointsRequest {
	s.SortBy = &v
	return s
}

type ListLivePackageOriginEndpointsResponseBody struct {
	// The origin endpoints returned.
	LivePackageOriginEndpoints []*ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints `json:"LivePackageOriginEndpoints,omitempty" xml:"LivePackageOriginEndpoints,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// b9f90a7ac8904db28dc18e0c2a72c75d
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The sort order. Valid values: `asc` and `desc` (default).
	//
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 10
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListLivePackageOriginEndpointsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLivePackageOriginEndpointsResponseBody) GoString() string {
	return s.String()
}

func (s *ListLivePackageOriginEndpointsResponseBody) SetLivePackageOriginEndpoints(v []*ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints) *ListLivePackageOriginEndpointsResponseBody {
	s.LivePackageOriginEndpoints = v
	return s
}

func (s *ListLivePackageOriginEndpointsResponseBody) SetPageNo(v int64) *ListLivePackageOriginEndpointsResponseBody {
	s.PageNo = &v
	return s
}

func (s *ListLivePackageOriginEndpointsResponseBody) SetPageSize(v int64) *ListLivePackageOriginEndpointsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListLivePackageOriginEndpointsResponseBody) SetRequestId(v string) *ListLivePackageOriginEndpointsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLivePackageOriginEndpointsResponseBody) SetSortBy(v string) *ListLivePackageOriginEndpointsResponseBody {
	s.SortBy = &v
	return s
}

func (s *ListLivePackageOriginEndpointsResponseBody) SetTotalCount(v int64) *ListLivePackageOriginEndpointsResponseBody {
	s.TotalCount = &v
	return s
}

type ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints struct {
	// The authorization code.
	//
	// example:
	//
	// Abc123Def456
	AuthorizationCode *string `json:"AuthorizationCode,omitempty" xml:"AuthorizationCode,omitempty"`
	// The channel name.
	//
	// example:
	//
	// channel-1
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The time when the endpoint was created.
	//
	// example:
	//
	// 2023-04-01T12:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The endpoint description.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The endpoint name.
	//
	// example:
	//
	// endpoint-1
	EndpointName *string `json:"EndpointName,omitempty" xml:"EndpointName,omitempty"`
	// The endpoint URL.
	//
	// example:
	//
	// https://xxx.packagepull-abcxxx.ap-southeast-1.aliyuncsiceintl.com/v1/group01/1/ch01/manifest.m3u8
	EndpointUrl *string `json:"EndpointUrl,omitempty" xml:"EndpointUrl,omitempty"`
	// The channel group name.
	//
	// example:
	//
	// channel-group-1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The IP address blacklist.
	//
	// example:
	//
	// 10.21.222.1/32,192.168.100.0/24
	IpBlacklist *string `json:"IpBlacklist,omitempty" xml:"IpBlacklist,omitempty"`
	// The IP address whitelist.
	//
	// example:
	//
	// 192.168.1.0/24,10.0.0.1/24
	IpWhitelist *string `json:"IpWhitelist,omitempty" xml:"IpWhitelist,omitempty"`
	// The time when the endpoint was last modified.
	//
	// example:
	//
	// 2023-04-01T12:00:00Z
	LastModified *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	// The playlist name.
	//
	// example:
	//
	// manifest
	ManifestName *string `json:"ManifestName,omitempty" xml:"ManifestName,omitempty"`
	// The distribution protocol.
	//
	// example:
	//
	// HLS
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// The number of days that time-shifted content is available.
	//
	// example:
	//
	// 1
	TimeshiftVision *int32 `json:"TimeshiftVision,omitempty" xml:"TimeshiftVision,omitempty"`
}

func (s ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints) String() string {
	return tea.Prettify(s)
}

func (s ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints) GoString() string {
	return s.String()
}

func (s *ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints) SetAuthorizationCode(v string) *ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints {
	s.AuthorizationCode = &v
	return s
}

func (s *ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints) SetChannelName(v string) *ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints {
	s.ChannelName = &v
	return s
}

func (s *ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints) SetCreateTime(v string) *ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints {
	s.CreateTime = &v
	return s
}

func (s *ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints) SetDescription(v string) *ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints {
	s.Description = &v
	return s
}

func (s *ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints) SetEndpointName(v string) *ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints {
	s.EndpointName = &v
	return s
}

func (s *ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints) SetEndpointUrl(v string) *ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints {
	s.EndpointUrl = &v
	return s
}

func (s *ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints) SetGroupName(v string) *ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints {
	s.GroupName = &v
	return s
}

func (s *ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints) SetIpBlacklist(v string) *ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints {
	s.IpBlacklist = &v
	return s
}

func (s *ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints) SetIpWhitelist(v string) *ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints {
	s.IpWhitelist = &v
	return s
}

func (s *ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints) SetLastModified(v string) *ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints {
	s.LastModified = &v
	return s
}

func (s *ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints) SetManifestName(v string) *ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints {
	s.ManifestName = &v
	return s
}

func (s *ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints) SetProtocol(v string) *ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints {
	s.Protocol = &v
	return s
}

func (s *ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints) SetTimeshiftVision(v int32) *ListLivePackageOriginEndpointsResponseBodyLivePackageOriginEndpoints {
	s.TimeshiftVision = &v
	return s
}

type ListLivePackageOriginEndpointsResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListLivePackageOriginEndpointsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListLivePackageOriginEndpointsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLivePackageOriginEndpointsResponse) GoString() string {
	return s.String()
}

func (s *ListLivePackageOriginEndpointsResponse) SetHeaders(v map[string]*string) *ListLivePackageOriginEndpointsResponse {
	s.Headers = v
	return s
}

func (s *ListLivePackageOriginEndpointsResponse) SetStatusCode(v int32) *ListLivePackageOriginEndpointsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLivePackageOriginEndpointsResponse) SetBody(v *ListLivePackageOriginEndpointsResponseBody) *ListLivePackageOriginEndpointsResponse {
	s.Body = v
	return s
}

type ListLiveRecordFilesRequest struct {
	// The end of the time range to query. The maximum time range to query is four days. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// example:
	//
	// 2017-12-22T08:00:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The list of job IDs.
	JobIds []*string `json:"JobIds,omitempty" xml:"JobIds,omitempty" type:"Repeated"`
	// The page number of the page to return. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Valid values: 5 to 30. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The format of the recording file. Valid values:
	//
	// M3U8, FLV, and MP4
	//
	// example:
	//
	// m3u8
	RecordFormat *string `json:"RecordFormat,omitempty" xml:"RecordFormat,omitempty"`
	// The sorting order of the index files by creation time. Valid values:
	//
	// asc: The query results are displayed in ascending order. This is the default value.
	//
	// desc: The query results are displayed in descending order.
	//
	// example:
	//
	// asc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// example:
	//
	// 2017-12-21T08:00:01Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListLiveRecordFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordFilesRequest) GoString() string {
	return s.String()
}

func (s *ListLiveRecordFilesRequest) SetEndTime(v string) *ListLiveRecordFilesRequest {
	s.EndTime = &v
	return s
}

func (s *ListLiveRecordFilesRequest) SetJobIds(v []*string) *ListLiveRecordFilesRequest {
	s.JobIds = v
	return s
}

func (s *ListLiveRecordFilesRequest) SetPageNo(v int32) *ListLiveRecordFilesRequest {
	s.PageNo = &v
	return s
}

func (s *ListLiveRecordFilesRequest) SetPageSize(v int32) *ListLiveRecordFilesRequest {
	s.PageSize = &v
	return s
}

func (s *ListLiveRecordFilesRequest) SetRecordFormat(v string) *ListLiveRecordFilesRequest {
	s.RecordFormat = &v
	return s
}

func (s *ListLiveRecordFilesRequest) SetSortBy(v string) *ListLiveRecordFilesRequest {
	s.SortBy = &v
	return s
}

func (s *ListLiveRecordFilesRequest) SetStartTime(v string) *ListLiveRecordFilesRequest {
	s.StartTime = &v
	return s
}

type ListLiveRecordFilesResponseBody struct {
	// The list of index files.
	Files []*ListLiveRecordFilesResponseBodyFiles `json:"Files,omitempty" xml:"Files,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// DE24625C-7C0F-4020-8448-****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The sorting order of the index files by creation time.
	//
	// example:
	//
	// asc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The total number of files that meet the specified conditions.
	//
	// example:
	//
	// 100
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListLiveRecordFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordFilesResponseBody) GoString() string {
	return s.String()
}

func (s *ListLiveRecordFilesResponseBody) SetFiles(v []*ListLiveRecordFilesResponseBodyFiles) *ListLiveRecordFilesResponseBody {
	s.Files = v
	return s
}

func (s *ListLiveRecordFilesResponseBody) SetPageNo(v int64) *ListLiveRecordFilesResponseBody {
	s.PageNo = &v
	return s
}

func (s *ListLiveRecordFilesResponseBody) SetPageSize(v string) *ListLiveRecordFilesResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListLiveRecordFilesResponseBody) SetRequestId(v string) *ListLiveRecordFilesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLiveRecordFilesResponseBody) SetSortBy(v string) *ListLiveRecordFilesResponseBody {
	s.SortBy = &v
	return s
}

func (s *ListLiveRecordFilesResponseBody) SetTotalCount(v string) *ListLiveRecordFilesResponseBody {
	s.TotalCount = &v
	return s
}

type ListLiveRecordFilesResponseBodyFiles struct {
	// The time when the file was created in UTC.
	//
	// example:
	//
	// 2016-05-27T09:40:56Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The recording length. Unit: seconds.
	//
	// example:
	//
	// 100.0
	Duration *float32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The end of the time range to query. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2015-12-01T07:36:10Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The format of the recording file.
	//
	// example:
	//
	// m3u8
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
	// The height of the video.
	//
	// example:
	//
	// 640
	Height *int32 `json:"Height,omitempty" xml:"Height,omitempty"`
	// The ID of the recording job.
	//
	// example:
	//
	// c4d7f0a4-b506-43f9-8de3-07732c3f****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The name of the recording job.
	//
	// example:
	//
	// LiveRecordJob***
	JobName *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	// The ID of the index file.
	//
	// example:
	//
	// c4d7f0a4-b506-43f9-8de3-07732c3f****
	RecordId *string `json:"RecordId,omitempty" xml:"RecordId,omitempty"`
	// The storage information about the recording file.
	//
	// example:
	//
	// { "Type": "oss", "Endpoint":"oss-cn-shanghai.aliyuncs.com", "Bucket": "test-bucket" }
	RecordOutput *string `json:"RecordOutput,omitempty" xml:"RecordOutput,omitempty"`
	// The URL of the index file.
	RecordUrl *string `json:"RecordUrl,omitempty" xml:"RecordUrl,omitempty"`
	// The beginning of the time range to query. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2015-12-01T07:36:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The name of the live stream.
	//
	// example:
	//
	// LiveStream***
	StreamUrl *string `json:"StreamUrl,omitempty" xml:"StreamUrl,omitempty"`
	// The width of the video.
	//
	// example:
	//
	// 480
	Width *int32 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListLiveRecordFilesResponseBodyFiles) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordFilesResponseBodyFiles) GoString() string {
	return s.String()
}

func (s *ListLiveRecordFilesResponseBodyFiles) SetCreateTime(v string) *ListLiveRecordFilesResponseBodyFiles {
	s.CreateTime = &v
	return s
}

func (s *ListLiveRecordFilesResponseBodyFiles) SetDuration(v float32) *ListLiveRecordFilesResponseBodyFiles {
	s.Duration = &v
	return s
}

func (s *ListLiveRecordFilesResponseBodyFiles) SetEndTime(v string) *ListLiveRecordFilesResponseBodyFiles {
	s.EndTime = &v
	return s
}

func (s *ListLiveRecordFilesResponseBodyFiles) SetFormat(v string) *ListLiveRecordFilesResponseBodyFiles {
	s.Format = &v
	return s
}

func (s *ListLiveRecordFilesResponseBodyFiles) SetHeight(v int32) *ListLiveRecordFilesResponseBodyFiles {
	s.Height = &v
	return s
}

func (s *ListLiveRecordFilesResponseBodyFiles) SetJobId(v string) *ListLiveRecordFilesResponseBodyFiles {
	s.JobId = &v
	return s
}

func (s *ListLiveRecordFilesResponseBodyFiles) SetJobName(v string) *ListLiveRecordFilesResponseBodyFiles {
	s.JobName = &v
	return s
}

func (s *ListLiveRecordFilesResponseBodyFiles) SetRecordId(v string) *ListLiveRecordFilesResponseBodyFiles {
	s.RecordId = &v
	return s
}

func (s *ListLiveRecordFilesResponseBodyFiles) SetRecordOutput(v string) *ListLiveRecordFilesResponseBodyFiles {
	s.RecordOutput = &v
	return s
}

func (s *ListLiveRecordFilesResponseBodyFiles) SetRecordUrl(v string) *ListLiveRecordFilesResponseBodyFiles {
	s.RecordUrl = &v
	return s
}

func (s *ListLiveRecordFilesResponseBodyFiles) SetStartTime(v string) *ListLiveRecordFilesResponseBodyFiles {
	s.StartTime = &v
	return s
}

func (s *ListLiveRecordFilesResponseBodyFiles) SetStreamUrl(v string) *ListLiveRecordFilesResponseBodyFiles {
	s.StreamUrl = &v
	return s
}

func (s *ListLiveRecordFilesResponseBodyFiles) SetWidth(v int32) *ListLiveRecordFilesResponseBodyFiles {
	s.Width = &v
	return s
}

type ListLiveRecordFilesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListLiveRecordFilesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListLiveRecordFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordFilesResponse) GoString() string {
	return s.String()
}

func (s *ListLiveRecordFilesResponse) SetHeaders(v map[string]*string) *ListLiveRecordFilesResponse {
	s.Headers = v
	return s
}

func (s *ListLiveRecordFilesResponse) SetStatusCode(v int32) *ListLiveRecordFilesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLiveRecordFilesResponse) SetBody(v *ListLiveRecordFilesResponseBody) *ListLiveRecordFilesResponse {
	s.Body = v
	return s
}

type ListLiveRecordJobsRequest struct {
	// The end of the time range to query. The maximum time range between EndTime and StartTime cannot exceed 30 days. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// Use the UTC time format: yyyy-MM-ddTHH:mmZ
	//
	// example:
	//
	// 2022-07-11T08:00:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The search keyword. You can use the job ID or name as the keyword to search for jobs.
	//
	// example:
	//
	// ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 20
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The sorting order. By default, the query results are sorted by creation time in descending order.
	//
	// Valid values:
	//
	// 	- asc: sorts the query results in ascending order.
	//
	// 	- desc: sorts the query results in descending order.
	//
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// Use the UTC time format: yyyy-MM-ddTHH:mmZ
	//
	// example:
	//
	// 2022-07-15T08:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The state of the job. By default, the state is not filtered.
	//
	// Valid values:
	//
	// 	- paused: The job is paused.
	//
	// 	- initial: The job is not started.
	//
	// 	- started: The job is in progress.
	//
	// example:
	//
	// started
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListLiveRecordJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordJobsRequest) GoString() string {
	return s.String()
}

func (s *ListLiveRecordJobsRequest) SetEndTime(v string) *ListLiveRecordJobsRequest {
	s.EndTime = &v
	return s
}

func (s *ListLiveRecordJobsRequest) SetKeyword(v string) *ListLiveRecordJobsRequest {
	s.Keyword = &v
	return s
}

func (s *ListLiveRecordJobsRequest) SetPageNo(v int64) *ListLiveRecordJobsRequest {
	s.PageNo = &v
	return s
}

func (s *ListLiveRecordJobsRequest) SetPageSize(v int64) *ListLiveRecordJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListLiveRecordJobsRequest) SetSortBy(v string) *ListLiveRecordJobsRequest {
	s.SortBy = &v
	return s
}

func (s *ListLiveRecordJobsRequest) SetStartTime(v string) *ListLiveRecordJobsRequest {
	s.StartTime = &v
	return s
}

func (s *ListLiveRecordJobsRequest) SetStatus(v string) *ListLiveRecordJobsRequest {
	s.Status = &v
	return s
}

type ListLiveRecordJobsResponseBody struct {
	// The list of live stream recording jobs.
	LiveRecordJobs []*ListLiveRecordJobsResponseBodyLiveRecordJobs `json:"LiveRecordJobs,omitempty" xml:"LiveRecordJobs,omitempty" type:"Repeated"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 20
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// A27DFFA4-F272-5563-8363-CB0BC42740BA
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The sorting order. By default, the query results are sorted by creation time in descending order.
	//
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 180
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListLiveRecordJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListLiveRecordJobsResponseBody) SetLiveRecordJobs(v []*ListLiveRecordJobsResponseBodyLiveRecordJobs) *ListLiveRecordJobsResponseBody {
	s.LiveRecordJobs = v
	return s
}

func (s *ListLiveRecordJobsResponseBody) SetPageNo(v int64) *ListLiveRecordJobsResponseBody {
	s.PageNo = &v
	return s
}

func (s *ListLiveRecordJobsResponseBody) SetPageSize(v int64) *ListLiveRecordJobsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListLiveRecordJobsResponseBody) SetRequestId(v string) *ListLiveRecordJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLiveRecordJobsResponseBody) SetSortBy(v string) *ListLiveRecordJobsResponseBody {
	s.SortBy = &v
	return s
}

func (s *ListLiveRecordJobsResponseBody) SetTotalCount(v int64) *ListLiveRecordJobsResponseBody {
	s.TotalCount = &v
	return s
}

type ListLiveRecordJobsResponseBodyLiveRecordJobs struct {
	// The time when the job was created.
	//
	// Use the UTC time format: yyyy-MM-ddTHH:mmZ
	//
	// example:
	//
	// 2022-07-20T03:26:36Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the recording job.
	//
	// example:
	//
	// ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The name of the recording job.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The callback URL.
	//
	// example:
	//
	// https://example.com/imsnotify
	NotifyUrl *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	// The storage address of the recording.
	RecordOutput *ListLiveRecordJobsResponseBodyLiveRecordJobsRecordOutput `json:"RecordOutput,omitempty" xml:"RecordOutput,omitempty" type:"Struct"`
	// The state of the recording job.
	//
	// example:
	//
	// paused
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The URL of the live stream.
	StreamInput *ListLiveRecordJobsResponseBodyLiveRecordJobsStreamInput `json:"StreamInput,omitempty" xml:"StreamInput,omitempty" type:"Struct"`
	// The ID of the recording template.
	//
	// example:
	//
	// 69e1f9fe-1e97-11ed-ba64-0c42a1b73d66
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The name of the recording template.
	//
	// example:
	//
	// test template
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
}

func (s ListLiveRecordJobsResponseBodyLiveRecordJobs) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordJobsResponseBodyLiveRecordJobs) GoString() string {
	return s.String()
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobs) SetCreateTime(v string) *ListLiveRecordJobsResponseBodyLiveRecordJobs {
	s.CreateTime = &v
	return s
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobs) SetJobId(v string) *ListLiveRecordJobsResponseBodyLiveRecordJobs {
	s.JobId = &v
	return s
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobs) SetName(v string) *ListLiveRecordJobsResponseBodyLiveRecordJobs {
	s.Name = &v
	return s
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobs) SetNotifyUrl(v string) *ListLiveRecordJobsResponseBodyLiveRecordJobs {
	s.NotifyUrl = &v
	return s
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobs) SetRecordOutput(v *ListLiveRecordJobsResponseBodyLiveRecordJobsRecordOutput) *ListLiveRecordJobsResponseBodyLiveRecordJobs {
	s.RecordOutput = v
	return s
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobs) SetStatus(v string) *ListLiveRecordJobsResponseBodyLiveRecordJobs {
	s.Status = &v
	return s
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobs) SetStreamInput(v *ListLiveRecordJobsResponseBodyLiveRecordJobsStreamInput) *ListLiveRecordJobsResponseBodyLiveRecordJobs {
	s.StreamInput = v
	return s
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobs) SetTemplateId(v string) *ListLiveRecordJobsResponseBodyLiveRecordJobs {
	s.TemplateId = &v
	return s
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobs) SetTemplateName(v string) *ListLiveRecordJobsResponseBodyLiveRecordJobs {
	s.TemplateName = &v
	return s
}

type ListLiveRecordJobsResponseBodyLiveRecordJobsRecordOutput struct {
	// The bucket name.
	//
	// example:
	//
	// imsbucket1
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// The endpoint of the storage service.
	//
	// example:
	//
	// oss-cn-hangzhou.aliyuncs.com
	Endpoint *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	// The type of the storage address.
	//
	// Valid values:
	//
	// 	- vod
	//
	// 	- oss
	//
	// example:
	//
	// oss
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListLiveRecordJobsResponseBodyLiveRecordJobsRecordOutput) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordJobsResponseBodyLiveRecordJobsRecordOutput) GoString() string {
	return s.String()
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobsRecordOutput) SetBucket(v string) *ListLiveRecordJobsResponseBodyLiveRecordJobsRecordOutput {
	s.Bucket = &v
	return s
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobsRecordOutput) SetEndpoint(v string) *ListLiveRecordJobsResponseBodyLiveRecordJobsRecordOutput {
	s.Endpoint = &v
	return s
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobsRecordOutput) SetType(v string) *ListLiveRecordJobsResponseBodyLiveRecordJobsRecordOutput {
	s.Type = &v
	return s
}

type ListLiveRecordJobsResponseBodyLiveRecordJobsStreamInput struct {
	// The type of the live stream URL.
	//
	// example:
	//
	// rtmp
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The URL of the live stream.
	//
	// example:
	//
	// rtmp://example-live.com/live/stream1
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s ListLiveRecordJobsResponseBodyLiveRecordJobsStreamInput) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordJobsResponseBodyLiveRecordJobsStreamInput) GoString() string {
	return s.String()
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobsStreamInput) SetType(v string) *ListLiveRecordJobsResponseBodyLiveRecordJobsStreamInput {
	s.Type = &v
	return s
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobsStreamInput) SetUrl(v string) *ListLiveRecordJobsResponseBodyLiveRecordJobsStreamInput {
	s.Url = &v
	return s
}

type ListLiveRecordJobsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListLiveRecordJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListLiveRecordJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordJobsResponse) GoString() string {
	return s.String()
}

func (s *ListLiveRecordJobsResponse) SetHeaders(v map[string]*string) *ListLiveRecordJobsResponse {
	s.Headers = v
	return s
}

func (s *ListLiveRecordJobsResponse) SetStatusCode(v int32) *ListLiveRecordJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLiveRecordJobsResponse) SetBody(v *ListLiveRecordJobsResponseBody) *ListLiveRecordJobsResponse {
	s.Body = v
	return s
}

type ListLiveRecordTemplatesRequest struct {
	// The search keyword. You can use the template ID or name as the keyword to search for templates. If you search for templates by name, fuzzy match is supported.
	//
	// example:
	//
	// test template
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The page number. Minimum value: 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Valid values: 1 to 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The sorting order. By default, the query results are sorted by creation time in descending order.
	//
	// Valid values:
	//
	// 	- asc: sorts the query results in ascending order.
	//
	// 	- desc: sorts the query results in descending order.
	//
	// example:
	//
	// desc
	SortBy      *string   `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	TemplateIds []*string `json:"TemplateIds,omitempty" xml:"TemplateIds,omitempty" type:"Repeated"`
	// The type of the template.
	//
	// Valid values:
	//
	// 	- system
	//
	// 	- custom
	//
	// example:
	//
	// custom
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListLiveRecordTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListLiveRecordTemplatesRequest) SetKeyword(v string) *ListLiveRecordTemplatesRequest {
	s.Keyword = &v
	return s
}

func (s *ListLiveRecordTemplatesRequest) SetPageNo(v int64) *ListLiveRecordTemplatesRequest {
	s.PageNo = &v
	return s
}

func (s *ListLiveRecordTemplatesRequest) SetPageSize(v int64) *ListLiveRecordTemplatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListLiveRecordTemplatesRequest) SetSortBy(v string) *ListLiveRecordTemplatesRequest {
	s.SortBy = &v
	return s
}

func (s *ListLiveRecordTemplatesRequest) SetTemplateIds(v []*string) *ListLiveRecordTemplatesRequest {
	s.TemplateIds = v
	return s
}

func (s *ListLiveRecordTemplatesRequest) SetType(v string) *ListLiveRecordTemplatesRequest {
	s.Type = &v
	return s
}

type ListLiveRecordTemplatesResponseBody struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The list of recording templates.
	RecordTemplateList []*ListLiveRecordTemplatesResponseBodyRecordTemplateList `json:"RecordTemplateList,omitempty" xml:"RecordTemplateList,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// BEA98A0C-7870-15FE-B96F-8880BB600A2C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The sorting order. By default, the query results are sorted by creation time in descending order.
	//
	// Valid values:
	//
	// 	- asc: sorts the query results in ascending order.
	//
	// 	- desc: sorts the query results in descending order.
	//
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 5
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListLiveRecordTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListLiveRecordTemplatesResponseBody) SetPageNo(v int64) *ListLiveRecordTemplatesResponseBody {
	s.PageNo = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBody) SetPageSize(v int64) *ListLiveRecordTemplatesResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBody) SetRecordTemplateList(v []*ListLiveRecordTemplatesResponseBodyRecordTemplateList) *ListLiveRecordTemplatesResponseBody {
	s.RecordTemplateList = v
	return s
}

func (s *ListLiveRecordTemplatesResponseBody) SetRequestId(v string) *ListLiveRecordTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBody) SetSortBy(v string) *ListLiveRecordTemplatesResponseBody {
	s.SortBy = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBody) SetTotalCount(v int64) *ListLiveRecordTemplatesResponseBody {
	s.TotalCount = &v
	return s
}

type ListLiveRecordTemplatesResponseBodyRecordTemplateList struct {
	// The time when the job was created.
	//
	// Use the UTC time format: yyyy-MM-ddTHH:mmZ
	//
	// example:
	//
	// 2022-07-20T02:48:58Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the template was last modified.
	//
	// Use the UTC time format: yyyy-MM-ddTHH:mmZ
	//
	// example:
	//
	// 2022-07-20T03:26:36Z
	LastModified *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	// The template name.
	//
	// example:
	//
	// test template
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The list of recording formats.
	RecordFormatList []*ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList `json:"RecordFormatList,omitempty" xml:"RecordFormatList,omitempty" type:"Repeated"`
	// The template ID.
	//
	// example:
	//
	// 69e1f9fe-1e97-11ed-ba64-0c42a1b73d66
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The type of the template.
	//
	// example:
	//
	// custom
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListLiveRecordTemplatesResponseBodyRecordTemplateList) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordTemplatesResponseBodyRecordTemplateList) GoString() string {
	return s.String()
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateList) SetCreateTime(v string) *ListLiveRecordTemplatesResponseBodyRecordTemplateList {
	s.CreateTime = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateList) SetLastModified(v string) *ListLiveRecordTemplatesResponseBodyRecordTemplateList {
	s.LastModified = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateList) SetName(v string) *ListLiveRecordTemplatesResponseBodyRecordTemplateList {
	s.Name = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateList) SetRecordFormatList(v []*ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList) *ListLiveRecordTemplatesResponseBodyRecordTemplateList {
	s.RecordFormatList = v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateList) SetTemplateId(v string) *ListLiveRecordTemplatesResponseBodyRecordTemplateList {
	s.TemplateId = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateList) SetType(v string) *ListLiveRecordTemplatesResponseBodyRecordTemplateList {
	s.Type = &v
	return s
}

type ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList struct {
	// The duration of the recording cycle. Unit: seconds.
	//
	// example:
	//
	// 21600
	CycleDuration *int32 `json:"CycleDuration,omitempty" xml:"CycleDuration,omitempty"`
	// The output file format.
	//
	// example:
	//
	// m3u8
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
	// The name of the recording file that is stored in Object Storage Service (OSS).
	//
	// example:
	//
	// record/{JobId}/{Sequence}_{EscapedStartTime}_{EscapedEndTime}
	OssObjectPrefix *string `json:"OssObjectPrefix,omitempty" xml:"OssObjectPrefix,omitempty"`
	// The duration of a single segment. Unit: seconds.
	//
	// example:
	//
	// 30
	SliceDuration *int32 `json:"SliceDuration,omitempty" xml:"SliceDuration,omitempty"`
	// The name of the TS segment.
	//
	// example:
	//
	// record/{JobId}/{UnixTimestamp}_{Sequence}
	SliceOssObjectPrefix *string `json:"SliceOssObjectPrefix,omitempty" xml:"SliceOssObjectPrefix,omitempty"`
}

func (s ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList) GoString() string {
	return s.String()
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList) SetCycleDuration(v int32) *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList {
	s.CycleDuration = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList) SetFormat(v string) *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList {
	s.Format = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList) SetOssObjectPrefix(v string) *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList {
	s.OssObjectPrefix = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList) SetSliceDuration(v int32) *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList {
	s.SliceDuration = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList) SetSliceOssObjectPrefix(v string) *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList {
	s.SliceOssObjectPrefix = &v
	return s
}

type ListLiveRecordTemplatesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListLiveRecordTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListLiveRecordTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListLiveRecordTemplatesResponse) SetHeaders(v map[string]*string) *ListLiveRecordTemplatesResponse {
	s.Headers = v
	return s
}

func (s *ListLiveRecordTemplatesResponse) SetStatusCode(v int32) *ListLiveRecordTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLiveRecordTemplatesResponse) SetBody(v *ListLiveRecordTemplatesResponseBody) *ListLiveRecordTemplatesResponse {
	s.Body = v
	return s
}

type ListLiveSnapshotFilesRequest struct {
	// The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// 	- The maximum time range that can be specified is one day.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-02-02T23:59:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the snapshot job.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The number of results to return each time. Valid values: 1 to 100. Default value: 10.
	//
	// example:
	//
	// 10
	Limit *int32 `json:"Limit,omitempty" xml:"Limit,omitempty"`
	// The sorting order. Default value: asc.
	//
	// Valid values:
	//
	// 	- asc: sorts the query results by creation time in ascending order.
	//
	// 	- desc: sorts the query results by creation time in descending order.
	//
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-02-02T00:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListLiveSnapshotFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLiveSnapshotFilesRequest) GoString() string {
	return s.String()
}

func (s *ListLiveSnapshotFilesRequest) SetEndTime(v string) *ListLiveSnapshotFilesRequest {
	s.EndTime = &v
	return s
}

func (s *ListLiveSnapshotFilesRequest) SetJobId(v string) *ListLiveSnapshotFilesRequest {
	s.JobId = &v
	return s
}

func (s *ListLiveSnapshotFilesRequest) SetLimit(v int32) *ListLiveSnapshotFilesRequest {
	s.Limit = &v
	return s
}

func (s *ListLiveSnapshotFilesRequest) SetSortBy(v string) *ListLiveSnapshotFilesRequest {
	s.SortBy = &v
	return s
}

func (s *ListLiveSnapshotFilesRequest) SetStartTime(v string) *ListLiveSnapshotFilesRequest {
	s.StartTime = &v
	return s
}

type ListLiveSnapshotFilesResponseBody struct {
	// The list of files.
	FileList []*ListLiveSnapshotFilesResponseBodyFileList `json:"FileList,omitempty" xml:"FileList,omitempty" type:"Repeated"`
	// The start time of the next page. If no value is returned, the pagination ends.
	//
	// example:
	//
	// 2022-02-02T22:22:22Z
	NextStartTime *string `json:"NextStartTime,omitempty" xml:"NextStartTime,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListLiveSnapshotFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLiveSnapshotFilesResponseBody) GoString() string {
	return s.String()
}

func (s *ListLiveSnapshotFilesResponseBody) SetFileList(v []*ListLiveSnapshotFilesResponseBodyFileList) *ListLiveSnapshotFilesResponseBody {
	s.FileList = v
	return s
}

func (s *ListLiveSnapshotFilesResponseBody) SetNextStartTime(v string) *ListLiveSnapshotFilesResponseBody {
	s.NextStartTime = &v
	return s
}

func (s *ListLiveSnapshotFilesResponseBody) SetRequestId(v string) *ListLiveSnapshotFilesResponseBody {
	s.RequestId = &v
	return s
}

type ListLiveSnapshotFilesResponseBodyFileList struct {
	// The time when the template was created.
	//
	// example:
	//
	// 2022-02-02T22:22:22Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The creation timestamp that is used as an input parameter for a delete API operation.
	//
	// example:
	//
	// 1619503516000
	CreateTimestamp *int64 `json:"CreateTimestamp,omitempty" xml:"CreateTimestamp,omitempty"`
	// Specifies whether to overlay snapshots.
	//
	// example:
	//
	// true
	IsOverlay *bool `json:"IsOverlay,omitempty" xml:"IsOverlay,omitempty"`
	// The OSS bucket.
	//
	// example:
	//
	// testbucket
	OssBucket *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	// The Object Storage Service (OSS) domain name.
	//
	// example:
	//
	// oss-cn-shanghai.aliyuncs.com
	OssEndpoint *string `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	// The location in which the OSS object is stored.
	OssObject *string `json:"OssObject,omitempty" xml:"OssObject,omitempty"`
}

func (s ListLiveSnapshotFilesResponseBodyFileList) String() string {
	return tea.Prettify(s)
}

func (s ListLiveSnapshotFilesResponseBodyFileList) GoString() string {
	return s.String()
}

func (s *ListLiveSnapshotFilesResponseBodyFileList) SetCreateTime(v string) *ListLiveSnapshotFilesResponseBodyFileList {
	s.CreateTime = &v
	return s
}

func (s *ListLiveSnapshotFilesResponseBodyFileList) SetCreateTimestamp(v int64) *ListLiveSnapshotFilesResponseBodyFileList {
	s.CreateTimestamp = &v
	return s
}

func (s *ListLiveSnapshotFilesResponseBodyFileList) SetIsOverlay(v bool) *ListLiveSnapshotFilesResponseBodyFileList {
	s.IsOverlay = &v
	return s
}

func (s *ListLiveSnapshotFilesResponseBodyFileList) SetOssBucket(v string) *ListLiveSnapshotFilesResponseBodyFileList {
	s.OssBucket = &v
	return s
}

func (s *ListLiveSnapshotFilesResponseBodyFileList) SetOssEndpoint(v string) *ListLiveSnapshotFilesResponseBodyFileList {
	s.OssEndpoint = &v
	return s
}

func (s *ListLiveSnapshotFilesResponseBodyFileList) SetOssObject(v string) *ListLiveSnapshotFilesResponseBodyFileList {
	s.OssObject = &v
	return s
}

type ListLiveSnapshotFilesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListLiveSnapshotFilesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListLiveSnapshotFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLiveSnapshotFilesResponse) GoString() string {
	return s.String()
}

func (s *ListLiveSnapshotFilesResponse) SetHeaders(v map[string]*string) *ListLiveSnapshotFilesResponse {
	s.Headers = v
	return s
}

func (s *ListLiveSnapshotFilesResponse) SetStatusCode(v int32) *ListLiveSnapshotFilesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLiveSnapshotFilesResponse) SetBody(v *ListLiveSnapshotFilesResponseBody) *ListLiveSnapshotFilesResponse {
	s.Body = v
	return s
}

type ListLiveSnapshotJobsRequest struct {
	// The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// 	- By default, EndTime is seven days later than StartTime.
	//
	// 	- The time range specified by the StartTime and EndTime parameters cannot exceed 30 days.
	//
	// example:
	//
	// 2022-02-02T23:59:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The page number. Valid values: [1,n). Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Valid values: 1 to 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The search keyword. You can use the job ID or name as the keyword to search for jobs. If you search for jobs by name, fuzzy match is supported.
	//
	// 	- It cannot exceed 128 characters in length.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	SearchKeyWord *string `json:"SearchKeyWord,omitempty" xml:"SearchKeyWord,omitempty"`
	// The sorting order. By default, the query results are sorted by creation time in descending order.
	//
	// Valid values:
	//
	// 	- asc: sorts the query results by creation time in ascending order.
	//
	// 	- desc: sorts the query results by creation time in descending order.
	//
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// 	- The default value is seven days ago.
	//
	// 	- The time range specified by the StartTime and EndTime parameters cannot exceed 30 days.
	//
	// example:
	//
	// 2022-02-02T00:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The job state filter. By default, all jobs are queried.
	//
	// Valid values:
	//
	// 	- init: The job is not started.
	//
	// 	- paused: The job is paused.
	//
	// 	- started: The job is in progress.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListLiveSnapshotJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLiveSnapshotJobsRequest) GoString() string {
	return s.String()
}

func (s *ListLiveSnapshotJobsRequest) SetEndTime(v string) *ListLiveSnapshotJobsRequest {
	s.EndTime = &v
	return s
}

func (s *ListLiveSnapshotJobsRequest) SetPageNo(v int32) *ListLiveSnapshotJobsRequest {
	s.PageNo = &v
	return s
}

func (s *ListLiveSnapshotJobsRequest) SetPageSize(v int32) *ListLiveSnapshotJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListLiveSnapshotJobsRequest) SetSearchKeyWord(v string) *ListLiveSnapshotJobsRequest {
	s.SearchKeyWord = &v
	return s
}

func (s *ListLiveSnapshotJobsRequest) SetSortBy(v string) *ListLiveSnapshotJobsRequest {
	s.SortBy = &v
	return s
}

func (s *ListLiveSnapshotJobsRequest) SetStartTime(v string) *ListLiveSnapshotJobsRequest {
	s.StartTime = &v
	return s
}

func (s *ListLiveSnapshotJobsRequest) SetStatus(v string) *ListLiveSnapshotJobsRequest {
	s.Status = &v
	return s
}

type ListLiveSnapshotJobsResponseBody struct {
	// The list of jobs.
	JobList []*ListLiveSnapshotJobsResponseBodyJobList `json:"JobList,omitempty" xml:"JobList,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The sorting order of the jobs by creation time.
	//
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListLiveSnapshotJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLiveSnapshotJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListLiveSnapshotJobsResponseBody) SetJobList(v []*ListLiveSnapshotJobsResponseBodyJobList) *ListLiveSnapshotJobsResponseBody {
	s.JobList = v
	return s
}

func (s *ListLiveSnapshotJobsResponseBody) SetPageNo(v int32) *ListLiveSnapshotJobsResponseBody {
	s.PageNo = &v
	return s
}

func (s *ListLiveSnapshotJobsResponseBody) SetPageSize(v int32) *ListLiveSnapshotJobsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListLiveSnapshotJobsResponseBody) SetRequestId(v string) *ListLiveSnapshotJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLiveSnapshotJobsResponseBody) SetSortBy(v string) *ListLiveSnapshotJobsResponseBody {
	s.SortBy = &v
	return s
}

func (s *ListLiveSnapshotJobsResponseBody) SetTotalCount(v int64) *ListLiveSnapshotJobsResponseBody {
	s.TotalCount = &v
	return s
}

type ListLiveSnapshotJobsResponseBodyJobList struct {
	// The time when the template was created.
	//
	// example:
	//
	// 2022-07-20T02:48:58Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The job ID.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The name of the job.
	JobName *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	// The output information.
	SnapshotOutput *ListLiveSnapshotJobsResponseBodyJobListSnapshotOutput `json:"SnapshotOutput,omitempty" xml:"SnapshotOutput,omitempty" type:"Struct"`
	// The state of the job.
	//
	// Valid values:
	//
	// 	- init: The job is not started.
	//
	// 	- paused: The job is paused.
	//
	// 	- started: The job is in progress.
	//
	// example:
	//
	// started
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The template ID.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287666****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The template name.
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// The interval between two adjacent snapshots. Unit: seconds.
	//
	// example:
	//
	// 5
	TimeInterval *int32 `json:"TimeInterval,omitempty" xml:"TimeInterval,omitempty"`
}

func (s ListLiveSnapshotJobsResponseBodyJobList) String() string {
	return tea.Prettify(s)
}

func (s ListLiveSnapshotJobsResponseBodyJobList) GoString() string {
	return s.String()
}

func (s *ListLiveSnapshotJobsResponseBodyJobList) SetCreateTime(v string) *ListLiveSnapshotJobsResponseBodyJobList {
	s.CreateTime = &v
	return s
}

func (s *ListLiveSnapshotJobsResponseBodyJobList) SetJobId(v string) *ListLiveSnapshotJobsResponseBodyJobList {
	s.JobId = &v
	return s
}

func (s *ListLiveSnapshotJobsResponseBodyJobList) SetJobName(v string) *ListLiveSnapshotJobsResponseBodyJobList {
	s.JobName = &v
	return s
}

func (s *ListLiveSnapshotJobsResponseBodyJobList) SetSnapshotOutput(v *ListLiveSnapshotJobsResponseBodyJobListSnapshotOutput) *ListLiveSnapshotJobsResponseBodyJobList {
	s.SnapshotOutput = v
	return s
}

func (s *ListLiveSnapshotJobsResponseBodyJobList) SetStatus(v string) *ListLiveSnapshotJobsResponseBodyJobList {
	s.Status = &v
	return s
}

func (s *ListLiveSnapshotJobsResponseBodyJobList) SetTemplateId(v string) *ListLiveSnapshotJobsResponseBodyJobList {
	s.TemplateId = &v
	return s
}

func (s *ListLiveSnapshotJobsResponseBodyJobList) SetTemplateName(v string) *ListLiveSnapshotJobsResponseBodyJobList {
	s.TemplateName = &v
	return s
}

func (s *ListLiveSnapshotJobsResponseBodyJobList) SetTimeInterval(v int32) *ListLiveSnapshotJobsResponseBodyJobList {
	s.TimeInterval = &v
	return s
}

type ListLiveSnapshotJobsResponseBodyJobListSnapshotOutput struct {
	// The bucket of the output endpoint. If the storage type is set to oss, the OSS bucket is returned.
	//
	// example:
	//
	// testbucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// The output endpoint. If the storage type is set to oss, the Object Storage Service (OSS) domain name is returned.
	//
	// example:
	//
	// oss-cn-shanghai.aliyuncs.com
	Endpoint *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	// The storage type. The value can only be oss.
	//
	// example:
	//
	// oss
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s ListLiveSnapshotJobsResponseBodyJobListSnapshotOutput) String() string {
	return tea.Prettify(s)
}

func (s ListLiveSnapshotJobsResponseBodyJobListSnapshotOutput) GoString() string {
	return s.String()
}

func (s *ListLiveSnapshotJobsResponseBodyJobListSnapshotOutput) SetBucket(v string) *ListLiveSnapshotJobsResponseBodyJobListSnapshotOutput {
	s.Bucket = &v
	return s
}

func (s *ListLiveSnapshotJobsResponseBodyJobListSnapshotOutput) SetEndpoint(v string) *ListLiveSnapshotJobsResponseBodyJobListSnapshotOutput {
	s.Endpoint = &v
	return s
}

func (s *ListLiveSnapshotJobsResponseBodyJobListSnapshotOutput) SetStorageType(v string) *ListLiveSnapshotJobsResponseBodyJobListSnapshotOutput {
	s.StorageType = &v
	return s
}

type ListLiveSnapshotJobsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListLiveSnapshotJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListLiveSnapshotJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLiveSnapshotJobsResponse) GoString() string {
	return s.String()
}

func (s *ListLiveSnapshotJobsResponse) SetHeaders(v map[string]*string) *ListLiveSnapshotJobsResponse {
	s.Headers = v
	return s
}

func (s *ListLiveSnapshotJobsResponse) SetStatusCode(v int32) *ListLiveSnapshotJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLiveSnapshotJobsResponse) SetBody(v *ListLiveSnapshotJobsResponseBody) *ListLiveSnapshotJobsResponse {
	s.Body = v
	return s
}

type ListLiveSnapshotTemplatesRequest struct {
	// The page number. Valid values: [1,n). Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Valid values: 1 to 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The search keyword. You can use the template ID or name as the keyword to search for templates. If you search for templates by name, fuzzy match is supported.
	//
	// 	- It cannot exceed 128 characters in length.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	SearchKeyWord *string `json:"SearchKeyWord,omitempty" xml:"SearchKeyWord,omitempty"`
	// The sorting order. By default, the query results are sorted by creation time in descending order.
	//
	// Valid values:
	//
	// 	- asc: sorts the query results by creation time in ascending order.
	//
	// 	- desc: sorts the query results by creation time in descending order.
	//
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The template IDs.
	//
	// 	- If you specify the SearchKeyWord parameter, this condition does not take effect.
	//
	// 	- The maximum length of the array is 200.
	TemplateIds []*string `json:"TemplateIds,omitempty" xml:"TemplateIds,omitempty" type:"Repeated"`
	// The type of the template. By default, all types are queried.
	//
	// Valid values:
	//
	// 	- system
	//
	// 	- custom
	//
	// example:
	//
	// custom
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListLiveSnapshotTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLiveSnapshotTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListLiveSnapshotTemplatesRequest) SetPageNo(v int32) *ListLiveSnapshotTemplatesRequest {
	s.PageNo = &v
	return s
}

func (s *ListLiveSnapshotTemplatesRequest) SetPageSize(v int32) *ListLiveSnapshotTemplatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListLiveSnapshotTemplatesRequest) SetSearchKeyWord(v string) *ListLiveSnapshotTemplatesRequest {
	s.SearchKeyWord = &v
	return s
}

func (s *ListLiveSnapshotTemplatesRequest) SetSortBy(v string) *ListLiveSnapshotTemplatesRequest {
	s.SortBy = &v
	return s
}

func (s *ListLiveSnapshotTemplatesRequest) SetTemplateIds(v []*string) *ListLiveSnapshotTemplatesRequest {
	s.TemplateIds = v
	return s
}

func (s *ListLiveSnapshotTemplatesRequest) SetType(v string) *ListLiveSnapshotTemplatesRequest {
	s.Type = &v
	return s
}

type ListLiveSnapshotTemplatesResponseBody struct {
	// The number of the returned page.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The sorting order of the results by creation time.
	//
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The list of the templates.
	TemplateList []*ListLiveSnapshotTemplatesResponseBodyTemplateList `json:"TemplateList,omitempty" xml:"TemplateList,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListLiveSnapshotTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLiveSnapshotTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListLiveSnapshotTemplatesResponseBody) SetPageNo(v int32) *ListLiveSnapshotTemplatesResponseBody {
	s.PageNo = &v
	return s
}

func (s *ListLiveSnapshotTemplatesResponseBody) SetPageSize(v int32) *ListLiveSnapshotTemplatesResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListLiveSnapshotTemplatesResponseBody) SetRequestId(v string) *ListLiveSnapshotTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLiveSnapshotTemplatesResponseBody) SetSortBy(v string) *ListLiveSnapshotTemplatesResponseBody {
	s.SortBy = &v
	return s
}

func (s *ListLiveSnapshotTemplatesResponseBody) SetTemplateList(v []*ListLiveSnapshotTemplatesResponseBodyTemplateList) *ListLiveSnapshotTemplatesResponseBody {
	s.TemplateList = v
	return s
}

func (s *ListLiveSnapshotTemplatesResponseBody) SetTotalCount(v int64) *ListLiveSnapshotTemplatesResponseBody {
	s.TotalCount = &v
	return s
}

type ListLiveSnapshotTemplatesResponseBodyTemplateList struct {
	// The time when the job was created.
	//
	// example:
	//
	// 2022-07-20T02:48:58Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The template ID.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The template name.
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// The interval between two adjacent snapshots. Unit: seconds.
	//
	// example:
	//
	// 10
	TimeInterval *int32 `json:"TimeInterval,omitempty" xml:"TimeInterval,omitempty"`
	// The type of the template.
	//
	// Valid values:
	//
	// 	- system
	//
	// 	- custom
	//
	// example:
	//
	// custom
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListLiveSnapshotTemplatesResponseBodyTemplateList) String() string {
	return tea.Prettify(s)
}

func (s ListLiveSnapshotTemplatesResponseBodyTemplateList) GoString() string {
	return s.String()
}

func (s *ListLiveSnapshotTemplatesResponseBodyTemplateList) SetCreateTime(v string) *ListLiveSnapshotTemplatesResponseBodyTemplateList {
	s.CreateTime = &v
	return s
}

func (s *ListLiveSnapshotTemplatesResponseBodyTemplateList) SetTemplateId(v string) *ListLiveSnapshotTemplatesResponseBodyTemplateList {
	s.TemplateId = &v
	return s
}

func (s *ListLiveSnapshotTemplatesResponseBodyTemplateList) SetTemplateName(v string) *ListLiveSnapshotTemplatesResponseBodyTemplateList {
	s.TemplateName = &v
	return s
}

func (s *ListLiveSnapshotTemplatesResponseBodyTemplateList) SetTimeInterval(v int32) *ListLiveSnapshotTemplatesResponseBodyTemplateList {
	s.TimeInterval = &v
	return s
}

func (s *ListLiveSnapshotTemplatesResponseBodyTemplateList) SetType(v string) *ListLiveSnapshotTemplatesResponseBodyTemplateList {
	s.Type = &v
	return s
}

type ListLiveSnapshotTemplatesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListLiveSnapshotTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListLiveSnapshotTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLiveSnapshotTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListLiveSnapshotTemplatesResponse) SetHeaders(v map[string]*string) *ListLiveSnapshotTemplatesResponse {
	s.Headers = v
	return s
}

func (s *ListLiveSnapshotTemplatesResponse) SetStatusCode(v int32) *ListLiveSnapshotTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLiveSnapshotTemplatesResponse) SetBody(v *ListLiveSnapshotTemplatesResponseBody) *ListLiveSnapshotTemplatesResponse {
	s.Body = v
	return s
}

type ListLiveTranscodeJobsRequest struct {
	// The search keyword. You can use the job ID or name as the keyword to search for jobs. If you search for jobs by name, fuzzy match is supported.
	//
	// example:
	//
	// 24ecbb5c-4f98-4194-9400-f17102e27fc5
	KeyWord *string `json:"KeyWord,omitempty" xml:"KeyWord,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 100.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The sorting order. By default, the query results are sorted by creation time in descending order. Valid values:
	//
	// 	- asc
	//
	// 	- desc
	//
	// example:
	//
	// asc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The start mode of the transcoding job.
	//
	// 	- 0: The transcoding job immediately starts.
	//
	// 	- 1: The transcoding job starts at the scheduled time.
	//
	// example:
	//
	// 0
	StartMode *int32 `json:"StartMode,omitempty" xml:"StartMode,omitempty"`
	// The state of the job.
	//
	// 0: The job is not started. 1: The job is in progress. 2: The job is stopped.
	//
	// example:
	//
	// 1
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the template used by the transcoding job.
	//
	// 	- normal
	//
	// 	- narrow-band
	//
	// 	- audio-only
	//
	// 	- origin
	//
	// example:
	//
	// normal
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListLiveTranscodeJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeJobsRequest) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeJobsRequest) SetKeyWord(v string) *ListLiveTranscodeJobsRequest {
	s.KeyWord = &v
	return s
}

func (s *ListLiveTranscodeJobsRequest) SetPageNo(v int32) *ListLiveTranscodeJobsRequest {
	s.PageNo = &v
	return s
}

func (s *ListLiveTranscodeJobsRequest) SetPageSize(v int32) *ListLiveTranscodeJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListLiveTranscodeJobsRequest) SetSortBy(v string) *ListLiveTranscodeJobsRequest {
	s.SortBy = &v
	return s
}

func (s *ListLiveTranscodeJobsRequest) SetStartMode(v int32) *ListLiveTranscodeJobsRequest {
	s.StartMode = &v
	return s
}

func (s *ListLiveTranscodeJobsRequest) SetStatus(v int32) *ListLiveTranscodeJobsRequest {
	s.Status = &v
	return s
}

func (s *ListLiveTranscodeJobsRequest) SetType(v string) *ListLiveTranscodeJobsRequest {
	s.Type = &v
	return s
}

type ListLiveTranscodeJobsResponseBody struct {
	// The list of transcoding jobs.
	JobList []*ListLiveTranscodeJobsResponseBodyJobList `json:"JobList,omitempty" xml:"JobList,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListLiveTranscodeJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeJobsResponseBody) SetJobList(v []*ListLiveTranscodeJobsResponseBodyJobList) *ListLiveTranscodeJobsResponseBody {
	s.JobList = v
	return s
}

func (s *ListLiveTranscodeJobsResponseBody) SetRequestId(v string) *ListLiveTranscodeJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBody) SetTotalCount(v int32) *ListLiveTranscodeJobsResponseBody {
	s.TotalCount = &v
	return s
}

type ListLiveTranscodeJobsResponseBodyJobList struct {
	// The time when the job was created.
	//
	// example:
	//
	// 2022-07-20T02:48:58Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The job ID.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The name of the transcoding job.
	//
	// example:
	//
	// mytask
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The information about the output stream.
	OutputStream *ListLiveTranscodeJobsResponseBodyJobListOutputStream `json:"OutputStream,omitempty" xml:"OutputStream,omitempty" type:"Struct"`
	// The start mode of the job.
	//
	// example:
	//
	// 0
	StartMode *int32 `json:"StartMode,omitempty" xml:"StartMode,omitempty"`
	// The state of the job.
	//
	// example:
	//
	// 1
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The information about the input stream.
	StreamInput *ListLiveTranscodeJobsResponseBodyJobListStreamInput `json:"StreamInput,omitempty" xml:"StreamInput,omitempty" type:"Struct"`
	// The ID of the transcoding template used by the transcoding job.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287666****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The template name.
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// The type of the transcoding template used by the transcoding job.
	//
	// example:
	//
	// normal
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
}

func (s ListLiveTranscodeJobsResponseBodyJobList) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeJobsResponseBodyJobList) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetCreateTime(v string) *ListLiveTranscodeJobsResponseBodyJobList {
	s.CreateTime = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetJobId(v string) *ListLiveTranscodeJobsResponseBodyJobList {
	s.JobId = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetName(v string) *ListLiveTranscodeJobsResponseBodyJobList {
	s.Name = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetOutputStream(v *ListLiveTranscodeJobsResponseBodyJobListOutputStream) *ListLiveTranscodeJobsResponseBodyJobList {
	s.OutputStream = v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetStartMode(v int32) *ListLiveTranscodeJobsResponseBodyJobList {
	s.StartMode = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetStatus(v int32) *ListLiveTranscodeJobsResponseBodyJobList {
	s.Status = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetStreamInput(v *ListLiveTranscodeJobsResponseBodyJobListStreamInput) *ListLiveTranscodeJobsResponseBodyJobList {
	s.StreamInput = v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetTemplateId(v string) *ListLiveTranscodeJobsResponseBodyJobList {
	s.TemplateId = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetTemplateName(v string) *ListLiveTranscodeJobsResponseBodyJobList {
	s.TemplateName = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetTemplateType(v string) *ListLiveTranscodeJobsResponseBodyJobList {
	s.TemplateType = &v
	return s
}

type ListLiveTranscodeJobsResponseBodyJobListOutputStream struct {
	// The list of stream URLs.
	StreamInfos []*ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos `json:"StreamInfos,omitempty" xml:"StreamInfos,omitempty" type:"Repeated"`
}

func (s ListLiveTranscodeJobsResponseBodyJobListOutputStream) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeJobsResponseBodyJobListOutputStream) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeJobsResponseBodyJobListOutputStream) SetStreamInfos(v []*ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos) *ListLiveTranscodeJobsResponseBodyJobListOutputStream {
	s.StreamInfos = v
	return s
}

type ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos struct {
	// The URL of the output stream.
	//
	// example:
	//
	// rtmp://mydomain/app/mytranscode1
	OutputUrl *string `json:"OutputUrl,omitempty" xml:"OutputUrl,omitempty"`
	// The type of the output stream protocol. Only the RTMP protocol is supported.
	//
	// example:
	//
	// rtmp
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos) SetOutputUrl(v string) *ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos {
	s.OutputUrl = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos) SetType(v string) *ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos {
	s.Type = &v
	return s
}

type ListLiveTranscodeJobsResponseBodyJobListStreamInput struct {
	// The URL of the input stream.
	//
	// example:
	//
	// rtmp://mydomain/app/stream1
	InputUrl *string `json:"InputUrl,omitempty" xml:"InputUrl,omitempty"`
	// The type of the input stream.
	//
	// example:
	//
	// rtmp
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListLiveTranscodeJobsResponseBodyJobListStreamInput) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeJobsResponseBodyJobListStreamInput) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeJobsResponseBodyJobListStreamInput) SetInputUrl(v string) *ListLiveTranscodeJobsResponseBodyJobListStreamInput {
	s.InputUrl = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobListStreamInput) SetType(v string) *ListLiveTranscodeJobsResponseBodyJobListStreamInput {
	s.Type = &v
	return s
}

type ListLiveTranscodeJobsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListLiveTranscodeJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListLiveTranscodeJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeJobsResponse) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeJobsResponse) SetHeaders(v map[string]*string) *ListLiveTranscodeJobsResponse {
	s.Headers = v
	return s
}

func (s *ListLiveTranscodeJobsResponse) SetStatusCode(v int32) *ListLiveTranscodeJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLiveTranscodeJobsResponse) SetBody(v *ListLiveTranscodeJobsResponseBody) *ListLiveTranscodeJobsResponse {
	s.Body = v
	return s
}

type ListLiveTranscodeTemplatesRequest struct {
	// The category of the template. Valid values:
	//
	// 	- system
	//
	// 	- customized
	//
	// example:
	//
	// customized
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The search keyword. You can use the template ID or name as the keyword to search for templates. If you search for templates by name, fuzzy match is supported.
	//
	// example:
	//
	// my_template
	KeyWord *string `json:"KeyWord,omitempty" xml:"KeyWord,omitempty"`
	// The page number of the page to return. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 100.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The sorting order. By default, the query results are sorted by creation time in descending order. Valid values:
	//
	// 	- asc
	//
	// 	- desc
	//
	// example:
	//
	// asc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The type of the template. Valid values:
	//
	// 	- normal
	//
	// 	- narrow-band
	//
	// 	- audio-only
	//
	// 	- origin
	//
	// example:
	//
	// normal
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The video codec. Valid values:
	//
	// 	- H.264
	//
	// 	- H.265
	//
	// example:
	//
	// H.264
	VideoCodec *string `json:"VideoCodec,omitempty" xml:"VideoCodec,omitempty"`
}

func (s ListLiveTranscodeTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeTemplatesRequest) SetCategory(v string) *ListLiveTranscodeTemplatesRequest {
	s.Category = &v
	return s
}

func (s *ListLiveTranscodeTemplatesRequest) SetKeyWord(v string) *ListLiveTranscodeTemplatesRequest {
	s.KeyWord = &v
	return s
}

func (s *ListLiveTranscodeTemplatesRequest) SetPageNo(v int32) *ListLiveTranscodeTemplatesRequest {
	s.PageNo = &v
	return s
}

func (s *ListLiveTranscodeTemplatesRequest) SetPageSize(v int32) *ListLiveTranscodeTemplatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListLiveTranscodeTemplatesRequest) SetSortBy(v string) *ListLiveTranscodeTemplatesRequest {
	s.SortBy = &v
	return s
}

func (s *ListLiveTranscodeTemplatesRequest) SetType(v string) *ListLiveTranscodeTemplatesRequest {
	s.Type = &v
	return s
}

func (s *ListLiveTranscodeTemplatesRequest) SetVideoCodec(v string) *ListLiveTranscodeTemplatesRequest {
	s.VideoCodec = &v
	return s
}

type ListLiveTranscodeTemplatesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The list of transcoding templates.
	TemplateContentList []*ListLiveTranscodeTemplatesResponseBodyTemplateContentList `json:"TemplateContentList,omitempty" xml:"TemplateContentList,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListLiveTranscodeTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeTemplatesResponseBody) SetRequestId(v string) *ListLiveTranscodeTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBody) SetTemplateContentList(v []*ListLiveTranscodeTemplatesResponseBodyTemplateContentList) *ListLiveTranscodeTemplatesResponseBody {
	s.TemplateContentList = v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBody) SetTotalCount(v int32) *ListLiveTranscodeTemplatesResponseBody {
	s.TotalCount = &v
	return s
}

type ListLiveTranscodeTemplatesResponseBodyTemplateContentList struct {
	// The category of the template. Valid values:
	//
	// example:
	//
	// system
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The time when the job was created.
	//
	// example:
	//
	// 2022-07-20T03:26:36Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The template name.
	//
	// example:
	//
	// my_template
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The configuration of the template.
	TemplateConfig *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty" type:"Struct"`
	// The template ID.
	//
	// example:
	//
	// 9b1571b513cb44f7a1ba6ae561ff46f7
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The type of the template.
	//
	// example:
	//
	// normal
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListLiveTranscodeTemplatesResponseBodyTemplateContentList) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeTemplatesResponseBodyTemplateContentList) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentList) SetCategory(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentList {
	s.Category = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentList) SetCreateTime(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentList {
	s.CreateTime = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentList) SetName(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentList {
	s.Name = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentList) SetTemplateConfig(v *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig) *ListLiveTranscodeTemplatesResponseBodyTemplateContentList {
	s.TemplateConfig = v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentList) SetTemplateId(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentList {
	s.TemplateId = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentList) SetType(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentList {
	s.Type = &v
	return s
}

type ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig struct {
	// The audio parameters.
	AudioParams *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams `json:"AudioParams,omitempty" xml:"AudioParams,omitempty" type:"Struct"`
	// The video parameters.
	VideoParams *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams `json:"VideoParams,omitempty" xml:"VideoParams,omitempty" type:"Struct"`
}

func (s ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig) SetAudioParams(v *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig {
	s.AudioParams = v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig) SetVideoParams(v *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig {
	s.VideoParams = v
	return s
}

type ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams struct {
	// The audio bitrate.
	//
	// example:
	//
	// 1000
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The number of sound channels.
	//
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// The audio codec.
	//
	// example:
	//
	// AAC
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// The encoding profile.
	//
	// example:
	//
	// aac_low
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// The audio sampling rate.
	//
	// example:
	//
	// 44100
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
}

func (s ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams) SetBitrate(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams {
	s.Bitrate = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams) SetChannels(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams {
	s.Channels = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams) SetCodec(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams {
	s.Codec = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams) SetProfile(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams {
	s.Profile = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams) SetSamplerate(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams {
	s.Samplerate = &v
	return s
}

type ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams struct {
	// The video bitrate.
	//
	// example:
	//
	// 2500
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The encoding format.
	//
	// example:
	//
	// 264
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// The video frame rate.
	//
	// example:
	//
	// 30
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// The group of pictures (GOP) of the output video. Unit: frame.
	//
	// example:
	//
	// 1000
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// The vertical resolution of the video.
	//
	// example:
	//
	// 1280
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The encoding profile.
	//
	// example:
	//
	// 3
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// The horizontal resolution of the video.
	//
	// example:
	//
	// 720
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) SetBitrate(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams {
	s.Bitrate = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) SetCodec(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams {
	s.Codec = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) SetFps(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams {
	s.Fps = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) SetGop(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams {
	s.Gop = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) SetHeight(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams {
	s.Height = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) SetProfile(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams {
	s.Profile = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) SetWidth(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams {
	s.Width = &v
	return s
}

type ListLiveTranscodeTemplatesResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListLiveTranscodeTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListLiveTranscodeTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeTemplatesResponse) SetHeaders(v map[string]*string) *ListLiveTranscodeTemplatesResponse {
	s.Headers = v
	return s
}

func (s *ListLiveTranscodeTemplatesResponse) SetStatusCode(v int32) *ListLiveTranscodeTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponse) SetBody(v *ListLiveTranscodeTemplatesResponseBody) *ListLiveTranscodeTemplatesResponse {
	s.Body = v
	return s
}

type ListMediaBasicInfosRequest struct {
	AuthTimeout *int64 `json:"AuthTimeout,omitempty" xml:"AuthTimeout,omitempty"`
	// The business type of the media asset. Valid values:
	//
	// \\- subtitles
	//
	// \\- watermark
	//
	// \\- opening
	//
	// \\- ending
	//
	// \\- general
	//
	// example:
	//
	// opening
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// The end time of utcCreated.
	//
	// \\- The value is the end of the left-open right-closed interval.
	//
	// \\- Specify the time in the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. For example, 2017-01-11T12:00:00Z indicates 20:00:00 on January 11, 2017 (UTC +8).
	//
	// example:
	//
	// 2020-12-20T13:00:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// Specifies whether to return the basic information of the source file.
	//
	// example:
	//
	// true
	IncludeFileBasicInfo *bool `json:"IncludeFileBasicInfo,omitempty" xml:"IncludeFileBasicInfo,omitempty"`
	// The maximum number of entries to return.
	//
	// Maximum value: 100. Default value: 10.
	//
	// example:
	//
	// 5
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// ****019b82e24b37a1c2958dec38****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The type of the media asset. Valid values:
	//
	// \\- image
	//
	// \\- video
	//
	// \\- audio
	//
	// \\- text
	//
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.
	//
	// example:
	//
	// pSa1SQ0wCe5pzVrQ6mWZEw==
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The order of sorting by utcCreated. Default value: desc. Valid values:
	//
	// \\- desc
	//
	// \\- asc
	//
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The source of the media asset. Valid values:
	//
	// \\- oss: Object Storage Service (OSS).
	//
	// \\- vod: ApsaraVideo VOD.
	//
	// \\- live: ApsaraVideo Live.
	//
	// \\- general: other sources. This is the default value.
	//
	// example:
	//
	// oss
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The start time of utcCreated.
	//
	// \\- The value is the beginning of a left-open right-closed interval.
	//
	// \\- Specify the time in the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. For example, 2017-01-11T12:00:00Z indicates 20:00:00 on January 11, 2017 (UTC +8).
	//
	// example:
	//
	// 2020-12-20T12:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The status of the media asset. Valid values:
	//
	// \\- Init: the initial state, which indicates that the source file is not ready.
	//
	// \\- Preparing: The source file is being prepared. For example, the file is being uploaded or edited.
	//
	// \\- PrepareFail: The source file failed to be prepared. For example, the information of the source file failed to be obtained.
	//
	// \\- Normal: The source file is ready.
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListMediaBasicInfosRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMediaBasicInfosRequest) GoString() string {
	return s.String()
}

func (s *ListMediaBasicInfosRequest) SetAuthTimeout(v int64) *ListMediaBasicInfosRequest {
	s.AuthTimeout = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetBusinessType(v string) *ListMediaBasicInfosRequest {
	s.BusinessType = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetEndTime(v string) *ListMediaBasicInfosRequest {
	s.EndTime = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetIncludeFileBasicInfo(v bool) *ListMediaBasicInfosRequest {
	s.IncludeFileBasicInfo = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetMaxResults(v int32) *ListMediaBasicInfosRequest {
	s.MaxResults = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetMediaId(v string) *ListMediaBasicInfosRequest {
	s.MediaId = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetMediaType(v string) *ListMediaBasicInfosRequest {
	s.MediaType = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetNextToken(v string) *ListMediaBasicInfosRequest {
	s.NextToken = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetSortBy(v string) *ListMediaBasicInfosRequest {
	s.SortBy = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetSource(v string) *ListMediaBasicInfosRequest {
	s.Source = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetStartTime(v string) *ListMediaBasicInfosRequest {
	s.StartTime = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetStatus(v string) *ListMediaBasicInfosRequest {
	s.Status = &v
	return s
}

type ListMediaBasicInfosResponseBody struct {
	// The maximum number of entries returned in the query.
	//
	// example:
	//
	// 2
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The media assets that meet the specified conditions.
	MediaInfos []*ListMediaBasicInfosResponseBodyMediaInfos `json:"MediaInfos,omitempty" xml:"MediaInfos,omitempty" type:"Repeated"`
	// A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.
	//
	// example:
	//
	// 8EqYpQbZ6Eh7+Zz8DxVYoQ==
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******B7-7F87-4792-BFE9-63CD21******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 4
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListMediaBasicInfosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMediaBasicInfosResponseBody) GoString() string {
	return s.String()
}

func (s *ListMediaBasicInfosResponseBody) SetMaxResults(v int32) *ListMediaBasicInfosResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListMediaBasicInfosResponseBody) SetMediaInfos(v []*ListMediaBasicInfosResponseBodyMediaInfos) *ListMediaBasicInfosResponseBody {
	s.MediaInfos = v
	return s
}

func (s *ListMediaBasicInfosResponseBody) SetNextToken(v string) *ListMediaBasicInfosResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListMediaBasicInfosResponseBody) SetRequestId(v string) *ListMediaBasicInfosResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMediaBasicInfosResponseBody) SetTotalCount(v int64) *ListMediaBasicInfosResponseBody {
	s.TotalCount = &v
	return s
}

type ListMediaBasicInfosResponseBodyMediaInfos struct {
	// FileInfos
	FileInfoList []*ListMediaBasicInfosResponseBodyMediaInfosFileInfoList `json:"FileInfoList,omitempty" xml:"FileInfoList,omitempty" type:"Repeated"`
	// BasicInfo
	MediaBasicInfo *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// The ID of the media asset.
	//
	// example:
	//
	// ****019b82e24b37a1c2958dec38****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s ListMediaBasicInfosResponseBodyMediaInfos) String() string {
	return tea.Prettify(s)
}

func (s ListMediaBasicInfosResponseBodyMediaInfos) GoString() string {
	return s.String()
}

func (s *ListMediaBasicInfosResponseBodyMediaInfos) SetFileInfoList(v []*ListMediaBasicInfosResponseBodyMediaInfosFileInfoList) *ListMediaBasicInfosResponseBodyMediaInfos {
	s.FileInfoList = v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfos) SetMediaBasicInfo(v *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) *ListMediaBasicInfosResponseBodyMediaInfos {
	s.MediaBasicInfo = v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfos) SetMediaId(v string) *ListMediaBasicInfosResponseBodyMediaInfos {
	s.MediaId = &v
	return s
}

type ListMediaBasicInfosResponseBodyMediaInfosFileInfoList struct {
	// The basic information of the file, including the duration and size.
	FileBasicInfo *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
}

func (s ListMediaBasicInfosResponseBodyMediaInfosFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListMediaBasicInfosResponseBodyMediaInfosFileInfoList) GoString() string {
	return s.String()
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoList) SetFileBasicInfo(v *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoList {
	s.FileBasicInfo = v
	return s
}

type ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo struct {
	// The bitrate.
	//
	// example:
	//
	// 1912.13
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The time when the file was created.
	//
	// example:
	//
	// 2021-01-08T16:52:04Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The duration.
	//
	// example:
	//
	// 60.00000
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The file name.
	//
	// example:
	//
	// example.mp4
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The file size. Unit: bytes.
	//
	// example:
	//
	// 14340962
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// The file status.
	//
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// The file type.
	//
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// The OSS URL of the file.
	//
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example2.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// The container format.
	//
	// example:
	//
	// mov,mp4,m4a,3gp,3g2,mj2
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// The height.
	//
	// example:
	//
	// 720
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The time when the file was last modified.
	//
	// example:
	//
	// 2021-01-08T16:52:07Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The region in which the file resides.
	//
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The width.
	//
	// example:
	//
	// 1280
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) GoString() string {
	return s.String()
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetBitrate(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetCreateTime(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetDuration(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileName(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileSize(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileStatus(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileType(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileUrl(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFormatName(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetHeight(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Height = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetModifiedTime(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetRegion(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Region = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetWidth(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Width = &v
	return s
}

type ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo struct {
	// The service to which the media asset belongs.
	//
	// example:
	//
	// ICE
	Biz *string `json:"Biz,omitempty" xml:"Biz,omitempty"`
	// The business type of the media asset.
	//
	// example:
	//
	// opening
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// The category ID.
	//
	// example:
	//
	// 3049
	CateId *int64 `json:"CateId,omitempty" xml:"CateId,omitempty"`
	// The category of the media asset.
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The thumbnail URL of the media asset.
	//
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// The time when the media asset was created.
	//
	// example:
	//
	// 2021-01-08T16:52:04Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the media asset was deleted.
	//
	// example:
	//
	// 2021-01-08T16:52:07Z
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	// The description of the media asset.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The URL of the media asset in another service.
	//
	// example:
	//
	// https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// ****019b82e24b37a1c2958dec38****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The tags of the media asset.
	//
	// example:
	//
	// tags,tags2
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// The type of the media asset.
	//
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// The time when the media asset was last modified.
	//
	// example:
	//
	// 2021-01-08T16:52:07Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The custom ID of the media asset. The ID is a string that contains 6 to 64 characters. Only letters, digits, hyphens (-), and underscores (_) are supported. The ID is unique among users.
	//
	// example:
	//
	// 123-123
	ReferenceId *string `json:"ReferenceId,omitempty" xml:"ReferenceId,omitempty"`
	// The snapshots of the media asset.
	//
	// example:
	//
	// [{"bucket":"example-bucket","count":"3","iceJobId":"******f48f0e4154976b2b8c45******","location":"oss-cn-beijing","snapshotRegular":"example.jpg","templateId":"******e6a6440b29eb60bd7c******"}]
	Snapshots *string `json:"Snapshots,omitempty" xml:"Snapshots,omitempty"`
	// The source of the media asset.
	//
	// example:
	//
	// oss
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The sprite.
	//
	// example:
	//
	// [{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]
	SpriteImages *string `json:"SpriteImages,omitempty" xml:"SpriteImages,omitempty"`
	// The status of the media asset.
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The title of the media asset.
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// The transcoding status of the media asset.
	//
	// example:
	//
	// Init
	TranscodeStatus *string `json:"TranscodeStatus,omitempty" xml:"TranscodeStatus,omitempty"`
	// The upload source of the media asset.
	//
	// example:
	//
	// general
	UploadSource *string `json:"UploadSource,omitempty" xml:"UploadSource,omitempty"`
	// The user data.
	//
	// example:
	//
	// userData
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetBiz(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Biz = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetBusinessType(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetCateId(v int64) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.CateId = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetCategory(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetCoverURL(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetCreateTime(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetDeletedTime(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetDescription(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetInputURL(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.InputURL = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaId(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaTags(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaType(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetModifiedTime(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetReferenceId(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.ReferenceId = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetSnapshots(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Snapshots = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetSource(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetSpriteImages(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.SpriteImages = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetStatus(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetTitle(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetTranscodeStatus(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.TranscodeStatus = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetUploadSource(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.UploadSource = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetUserData(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.UserData = &v
	return s
}

type ListMediaBasicInfosResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListMediaBasicInfosResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListMediaBasicInfosResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMediaBasicInfosResponse) GoString() string {
	return s.String()
}

func (s *ListMediaBasicInfosResponse) SetHeaders(v map[string]*string) *ListMediaBasicInfosResponse {
	s.Headers = v
	return s
}

func (s *ListMediaBasicInfosResponse) SetStatusCode(v int32) *ListMediaBasicInfosResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMediaBasicInfosResponse) SetBody(v *ListMediaBasicInfosResponseBody) *ListMediaBasicInfosResponse {
	s.Body = v
	return s
}

type ListMediaConvertJobsRequest struct {
	// example:
	//
	// 2022-07-15T00:00:00Z
	EndOfCreateTime *string `json:"EndOfCreateTime,omitempty" xml:"EndOfCreateTime,omitempty"`
	// example:
	//
	// 88c6ca184c0e47098a5b665e2****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// ab4802364a2e49208c99efab82dfa8e8
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// example:
	//
	// CreateTimeDesc
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 2022-07-01T00:00:00Z
	StartOfCreateTime *string `json:"StartOfCreateTime,omitempty" xml:"StartOfCreateTime,omitempty"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListMediaConvertJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMediaConvertJobsRequest) GoString() string {
	return s.String()
}

func (s *ListMediaConvertJobsRequest) SetEndOfCreateTime(v string) *ListMediaConvertJobsRequest {
	s.EndOfCreateTime = &v
	return s
}

func (s *ListMediaConvertJobsRequest) SetJobId(v string) *ListMediaConvertJobsRequest {
	s.JobId = &v
	return s
}

func (s *ListMediaConvertJobsRequest) SetNextPageToken(v string) *ListMediaConvertJobsRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListMediaConvertJobsRequest) SetOrderBy(v string) *ListMediaConvertJobsRequest {
	s.OrderBy = &v
	return s
}

func (s *ListMediaConvertJobsRequest) SetPageSize(v int32) *ListMediaConvertJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListMediaConvertJobsRequest) SetStartOfCreateTime(v string) *ListMediaConvertJobsRequest {
	s.StartOfCreateTime = &v
	return s
}

func (s *ListMediaConvertJobsRequest) SetStatus(v string) *ListMediaConvertJobsRequest {
	s.Status = &v
	return s
}

type ListMediaConvertJobsResponseBody struct {
	Jobs []*MediaConvertJobWithoutDetail `json:"Jobs,omitempty" xml:"Jobs,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// ****cdb3e74639973036bc84****
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListMediaConvertJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMediaConvertJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMediaConvertJobsResponseBody) SetJobs(v []*MediaConvertJobWithoutDetail) *ListMediaConvertJobsResponseBody {
	s.Jobs = v
	return s
}

func (s *ListMediaConvertJobsResponseBody) SetNextPageToken(v string) *ListMediaConvertJobsResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *ListMediaConvertJobsResponseBody) SetRequestId(v string) *ListMediaConvertJobsResponseBody {
	s.RequestId = &v
	return s
}

type ListMediaConvertJobsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListMediaConvertJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListMediaConvertJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMediaConvertJobsResponse) GoString() string {
	return s.String()
}

func (s *ListMediaConvertJobsResponse) SetHeaders(v map[string]*string) *ListMediaConvertJobsResponse {
	s.Headers = v
	return s
}

func (s *ListMediaConvertJobsResponse) SetStatusCode(v int32) *ListMediaConvertJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMediaConvertJobsResponse) SetBody(v *ListMediaConvertJobsResponseBody) *ListMediaConvertJobsResponse {
	s.Body = v
	return s
}

type ListMediaInfoJobsRequest struct {
	// The end of the time range during which the jobs to be queried were created. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// example:
	//
	// 2022-07-15T00:00:00Z
	EndOfCreateTime *string `json:"EndOfCreateTime,omitempty" xml:"EndOfCreateTime,omitempty"`
	// The job ID.
	//
	// example:
	//
	// 7b38a5d86f1e47838927b6e7ccb11cbe
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request.
	//
	// example:
	//
	// ab4802364a2e49208c99efab82dfa8e8
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// The order that you use to sort the query results. Valid values:
	//
	// 	- CreateTimeDesc: sorts the query results by creation time in descending order.
	//
	// 	- CreateTimeAsc: sorts the query results by creation time in ascending order.
	//
	// example:
	//
	// CreateTimeDesc
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range during which the jobs to be queried were created. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// example:
	//
	// 2022-07-01T00:00:00Z
	StartOfCreateTime *string `json:"StartOfCreateTime,omitempty" xml:"StartOfCreateTime,omitempty"`
	// The state of the job. Valid values:
	//
	// 	- Init: The job is submitted.
	//
	// 	- Success: The job is successful.
	//
	// 	- Fail: The job failed.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListMediaInfoJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsRequest) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsRequest) SetEndOfCreateTime(v string) *ListMediaInfoJobsRequest {
	s.EndOfCreateTime = &v
	return s
}

func (s *ListMediaInfoJobsRequest) SetJobId(v string) *ListMediaInfoJobsRequest {
	s.JobId = &v
	return s
}

func (s *ListMediaInfoJobsRequest) SetNextPageToken(v string) *ListMediaInfoJobsRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListMediaInfoJobsRequest) SetOrderBy(v string) *ListMediaInfoJobsRequest {
	s.OrderBy = &v
	return s
}

func (s *ListMediaInfoJobsRequest) SetPageSize(v int32) *ListMediaInfoJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListMediaInfoJobsRequest) SetStartOfCreateTime(v string) *ListMediaInfoJobsRequest {
	s.StartOfCreateTime = &v
	return s
}

func (s *ListMediaInfoJobsRequest) SetStatus(v string) *ListMediaInfoJobsRequest {
	s.Status = &v
	return s
}

type ListMediaInfoJobsResponseBody struct {
	// The list of media information analysis jobs.
	Jobs []*ListMediaInfoJobsResponseBodyJobs `json:"Jobs,omitempty" xml:"Jobs,omitempty" type:"Repeated"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. The token of the next page is returned after you call this operation for the first time.
	//
	// example:
	//
	// 019daf5780f74831b0e1a767c9f1c178
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListMediaInfoJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponseBody) SetJobs(v []*ListMediaInfoJobsResponseBodyJobs) *ListMediaInfoJobsResponseBody {
	s.Jobs = v
	return s
}

func (s *ListMediaInfoJobsResponseBody) SetNextPageToken(v string) *ListMediaInfoJobsResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *ListMediaInfoJobsResponseBody) SetRequestId(v string) *ListMediaInfoJobsResponseBody {
	s.RequestId = &v
	return s
}

type ListMediaInfoJobsResponseBodyJobs struct {
	// Indicates whether asynchronous processing was performed.
	//
	// example:
	//
	// true
	Async *bool `json:"Async,omitempty" xml:"Async,omitempty"`
	// The time when the job was complete. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-01-12T08:49:41Z
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The input of the job.
	Input *ListMediaInfoJobsResponseBodyJobsInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// The job ID.
	//
	// example:
	//
	// ab4802364a2e49208c99efab82dfa8e8
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The details of the media information.
	MediaInfoProperty *ListMediaInfoJobsResponseBodyJobsMediaInfoProperty `json:"MediaInfoProperty,omitempty" xml:"MediaInfoProperty,omitempty" type:"Struct"`
	// The job name.
	//
	// example:
	//
	// job-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 4879B9DE-E4B6-19DC-91F5-9D5F4DCE4168
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The scheduling information.
	ScheduleConfig *ListMediaInfoJobsResponseBodyJobsScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// The state of the job. Valid values:
	//
	// 	- Init: The job is submitted.
	//
	// 	- Success: The job is successful.
	//
	// 	- Fail: The job failed.
	//
	// example:
	//
	// Init
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The job submission information.
	SubmitResultJson map[string]interface{} `json:"SubmitResultJson,omitempty" xml:"SubmitResultJson,omitempty"`
	// The time when the job was submitted. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-01-12T08:49:41Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// The source of the job. Valid values:
	//
	// 	- API
	//
	// 	- WorkFlow
	//
	// 	- Console
	//
	// example:
	//
	// API
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// The user data.
	//
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s ListMediaInfoJobsResponseBodyJobs) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponseBodyJobs) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetAsync(v bool) *ListMediaInfoJobsResponseBodyJobs {
	s.Async = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetFinishTime(v string) *ListMediaInfoJobsResponseBodyJobs {
	s.FinishTime = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetInput(v *ListMediaInfoJobsResponseBodyJobsInput) *ListMediaInfoJobsResponseBodyJobs {
	s.Input = v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetJobId(v string) *ListMediaInfoJobsResponseBodyJobs {
	s.JobId = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetMediaInfoProperty(v *ListMediaInfoJobsResponseBodyJobsMediaInfoProperty) *ListMediaInfoJobsResponseBodyJobs {
	s.MediaInfoProperty = v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetName(v string) *ListMediaInfoJobsResponseBodyJobs {
	s.Name = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetRequestId(v string) *ListMediaInfoJobsResponseBodyJobs {
	s.RequestId = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetScheduleConfig(v *ListMediaInfoJobsResponseBodyJobsScheduleConfig) *ListMediaInfoJobsResponseBodyJobs {
	s.ScheduleConfig = v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetStatus(v string) *ListMediaInfoJobsResponseBodyJobs {
	s.Status = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetSubmitResultJson(v map[string]interface{}) *ListMediaInfoJobsResponseBodyJobs {
	s.SubmitResultJson = v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetSubmitTime(v string) *ListMediaInfoJobsResponseBodyJobs {
	s.SubmitTime = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetTriggerSource(v string) *ListMediaInfoJobsResponseBodyJobs {
	s.TriggerSource = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetUserData(v string) *ListMediaInfoJobsResponseBodyJobs {
	s.UserData = &v
	return s
}

type ListMediaInfoJobsResponseBodyJobsInput struct {
	// The media object.
	//
	// 	- If Type is set to OSS, the URL of an OSS object is returned. Both the OSS and HTTP protocols are supported.
	//
	// 	- If Type is set to Media, the ID of a media asset is returned.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an Object Storage Service (OSS) object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListMediaInfoJobsResponseBodyJobsInput) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponseBodyJobsInput) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponseBodyJobsInput) SetMedia(v string) *ListMediaInfoJobsResponseBodyJobsInput {
	s.Media = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsInput) SetType(v string) *ListMediaInfoJobsResponseBodyJobsInput {
	s.Type = &v
	return s
}

type ListMediaInfoJobsResponseBodyJobsMediaInfoProperty struct {
	// The information about the audio stream.
	AudioStreamInfoList []*ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList `json:"AudioStreamInfoList,omitempty" xml:"AudioStreamInfoList,omitempty" type:"Repeated"`
	// The basic file information.
	FileBasicInfo *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
	// The information about the video stream.
	VideoStreamInfoList []*ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList `json:"VideoStreamInfoList,omitempty" xml:"VideoStreamInfoList,omitempty" type:"Repeated"`
}

func (s ListMediaInfoJobsResponseBodyJobsMediaInfoProperty) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponseBodyJobsMediaInfoProperty) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoProperty) SetAudioStreamInfoList(v []*ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) *ListMediaInfoJobsResponseBodyJobsMediaInfoProperty {
	s.AudioStreamInfoList = v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoProperty) SetFileBasicInfo(v *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) *ListMediaInfoJobsResponseBodyJobsMediaInfoProperty {
	s.FileBasicInfo = v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoProperty) SetVideoStreamInfoList(v []*ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) *ListMediaInfoJobsResponseBodyJobsMediaInfoProperty {
	s.VideoStreamInfoList = v
	return s
}

type ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList struct {
	// The bitrate.
	//
	// example:
	//
	// 0.f
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The sound channel layout.
	//
	// example:
	//
	// stereo
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	// The number of sound channels.
	//
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// The name of the encoding format.
	//
	// example:
	//
	// AAC (Advanced Audio Coding)
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// The encoding format.
	//
	// example:
	//
	// aac
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// The encoder tag.
	//
	// example:
	//
	// 0x000f
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// The name of the encoder tag.
	//
	// example:
	//
	// [15][0][0][0]
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// The time base of the encoder.
	//
	// example:
	//
	// 1/44100
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// The duration of the stream. Unit: seconds.
	//
	// example:
	//
	// 403.039989
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The sequence number of the stream.
	//
	// example:
	//
	// 1
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// The language of the stream.
	//
	// example:
	//
	// cn
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The sampling format.
	//
	// example:
	//
	// fltp
	SampleFmt *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	// The sampling rate. Unit: Hz.
	//
	// example:
	//
	// 44100
	SampleRate *string `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
	// The start time of the stream.
	//
	// example:
	//
	// 1.473556
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The time base.
	//
	// example:
	//
	// 1/90000
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetBitrate(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetChannelLayout(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.ChannelLayout = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetChannels(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.Channels = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetCodecLongName(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetCodecName(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetCodecTag(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetCodecTagString(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetCodecTimeBase(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetDuration(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.Duration = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetIndex(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.Index = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetLang(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.Lang = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetSampleFmt(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.SampleFmt = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetSampleRate(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.SampleRate = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetStartTime(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetTimebase(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.Timebase = &v
	return s
}

type ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo struct {
	// The video bitrate.
	//
	// example:
	//
	// 888.563
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The duration of the video. Unit: seconds.
	//
	// example:
	//
	// 403.039999
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The file name.
	//
	// example:
	//
	// file.m3u8
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The file size. Unit: bytes.
	//
	// example:
	//
	// 31737
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// The state of the file.
	//
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// The file type. Valid values: source_file and transcode_file.
	//
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// The URL of the file.
	//
	// example:
	//
	// http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// The name of the video format.
	//
	// example:
	//
	// hls,applehttp
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// The height.
	//
	// example:
	//
	// 478
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// 4765337007f571edbfdf81848c016303
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The region in which the file resides.
	//
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The width.
	//
	// example:
	//
	// 848
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetBitrate(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetDuration(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetFileName(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetFileSize(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetFileStatus(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetFileType(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetFileUrl(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetFormatName(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetHeight(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.Height = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetMediaId(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.MediaId = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetRegion(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.Region = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetWidth(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.Width = &v
	return s
}

type ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList struct {
	// The average frame rate.
	//
	// example:
	//
	// 25.0
	AvgFps *string `json:"Avg_fps,omitempty" xml:"Avg_fps,omitempty"`
	// The bitrate.
	//
	// example:
	//
	// 888.563
	BitRate *string `json:"Bit_rate,omitempty" xml:"Bit_rate,omitempty"`
	// The name of the encoding format.
	//
	// example:
	//
	// H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10
	CodecLongName *string `json:"Codec_long_name,omitempty" xml:"Codec_long_name,omitempty"`
	// The encoding format.
	//
	// example:
	//
	// h264
	CodecName *string `json:"Codec_name,omitempty" xml:"Codec_name,omitempty"`
	// The tag of the encoding format.
	//
	// example:
	//
	// 0x001b
	CodecTag *string `json:"Codec_tag,omitempty" xml:"Codec_tag,omitempty"`
	// The tag string of the encoding format.
	//
	// example:
	//
	// [27][0][0][0]
	CodecTagString *string `json:"Codec_tag_string,omitempty" xml:"Codec_tag_string,omitempty"`
	// The time base of the encoder.
	//
	// example:
	//
	// 1/50
	CodecTimeBase *string `json:"Codec_time_base,omitempty" xml:"Codec_time_base,omitempty"`
	// The display aspect ratio.
	//
	// example:
	//
	// 16:9
	Dar *string `json:"Dar,omitempty" xml:"Dar,omitempty"`
	// The duration of the stream. Unit: seconds.
	//
	// example:
	//
	// 403.039989
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The frame rate.
	//
	// example:
	//
	// 25.0
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// Indicates whether the video stream contains bidirectional frames (B-frames). Valid values:
	//
	// 	- 0: The stream contains no B-frames.
	//
	// 	- 1: The stream contains one B-frame.
	//
	// 	- 2: The stream contains multiple consecutive B-frames.
	//
	// example:
	//
	// 2
	HasBFrames *string `json:"Has_b_frames,omitempty" xml:"Has_b_frames,omitempty"`
	// The height.
	//
	// example:
	//
	// 478
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The sequence number of the stream.
	//
	// example:
	//
	// 0
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// The language of the stream.
	//
	// example:
	//
	// cn
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The codec level.
	//
	// example:
	//
	// 31
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The total number of frames.
	//
	// example:
	//
	// 10040
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// The pixel format.
	//
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// The encoder profile.
	//
	// example:
	//
	// High
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// The rotation angle of the video image.
	//
	// 	- Valid values: 0, 90, 180, and 270.
	//
	// 	- Default value: 0.
	//
	// example:
	//
	// 0
	Rotate *string `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	// The aspect ratio of the area from which the sampling points are collected.
	//
	// example:
	//
	// 478:477
	Sar *string `json:"Sar,omitempty" xml:"Sar,omitempty"`
	// The start time of the stream.
	//
	// example:
	//
	// 1.473556
	StartTime *string `json:"Start_time,omitempty" xml:"Start_time,omitempty"`
	// The time base.
	//
	// example:
	//
	// 1/90000
	TimeBase *string `json:"Time_base,omitempty" xml:"Time_base,omitempty"`
	// The width.
	//
	// example:
	//
	// 848
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetAvgFps(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.AvgFps = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetBitRate(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.BitRate = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetCodecLongName(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetCodecName(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetCodecTag(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetCodecTagString(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetCodecTimeBase(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetDar(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Dar = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetDuration(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Duration = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetFps(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Fps = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetHasBFrames(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.HasBFrames = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetHeight(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Height = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetIndex(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Index = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetLang(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Lang = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetLevel(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Level = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetNumFrames(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetPixFmt(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.PixFmt = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetProfile(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Profile = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetRotate(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Rotate = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetSar(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Sar = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetStartTime(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetTimeBase(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.TimeBase = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetWidth(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Width = &v
	return s
}

type ListMediaInfoJobsResponseBodyJobsScheduleConfig struct {
	// The ID of the MPS queue to which the job was submitted.
	//
	// example:
	//
	// e37ebee5d98b4781897f6086e89f9c56
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The priority of the job. Valid values: 1 to 10. The greater the value, the higher the priority.
	//
	// example:
	//
	// 5
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s ListMediaInfoJobsResponseBodyJobsScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponseBodyJobsScheduleConfig) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponseBodyJobsScheduleConfig) SetPipelineId(v string) *ListMediaInfoJobsResponseBodyJobsScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsScheduleConfig) SetPriority(v int32) *ListMediaInfoJobsResponseBodyJobsScheduleConfig {
	s.Priority = &v
	return s
}

type ListMediaInfoJobsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListMediaInfoJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListMediaInfoJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponse) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponse) SetHeaders(v map[string]*string) *ListMediaInfoJobsResponse {
	s.Headers = v
	return s
}

func (s *ListMediaInfoJobsResponse) SetStatusCode(v int32) *ListMediaInfoJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMediaInfoJobsResponse) SetBody(v *ListMediaInfoJobsResponseBody) *ListMediaInfoJobsResponse {
	s.Body = v
	return s
}

type ListMediaLiveChannelsRequest struct {
	// The keyword of the query. You can perform a fuzzy search on channel ID or name.
	//
	// example:
	//
	// 123
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The number of entries per page. Valid values: 1 to 100. Default value:
	//
	// 	- If you do not specify this parameter or if you set a value smaller than 10, the default value is 10.
	//
	// 	- If you set a value greater than 100, the default value is 100.
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The number of entries to be skipped in the query. If the number of entries you attempt to skip exceeds the number of entries that meet the condition, an empty list is returned.
	//
	// example:
	//
	// 20
	Skip *int32 `json:"Skip,omitempty" xml:"Skip,omitempty"`
	// The sorting order of the channels by creation time. Default value: asc. Valid values: desc and asc. asc indicates the ascending order, and desc indicates the descending order.
	//
	// example:
	//
	// desc
	SortOrder *string `json:"SortOrder,omitempty" xml:"SortOrder,omitempty"`
	// The state of channels you want to query. You can separate multiple states with commas (,) in a JSON array.
	//
	// example:
	//
	// ["IDLE","RUNNING"]
	States *string `json:"States,omitempty" xml:"States,omitempty"`
}

func (s ListMediaLiveChannelsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveChannelsRequest) GoString() string {
	return s.String()
}

func (s *ListMediaLiveChannelsRequest) SetKeyword(v string) *ListMediaLiveChannelsRequest {
	s.Keyword = &v
	return s
}

func (s *ListMediaLiveChannelsRequest) SetMaxResults(v int32) *ListMediaLiveChannelsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListMediaLiveChannelsRequest) SetNextToken(v string) *ListMediaLiveChannelsRequest {
	s.NextToken = &v
	return s
}

func (s *ListMediaLiveChannelsRequest) SetSkip(v int32) *ListMediaLiveChannelsRequest {
	s.Skip = &v
	return s
}

func (s *ListMediaLiveChannelsRequest) SetSortOrder(v string) *ListMediaLiveChannelsRequest {
	s.SortOrder = &v
	return s
}

func (s *ListMediaLiveChannelsRequest) SetStates(v string) *ListMediaLiveChannelsRequest {
	s.States = &v
	return s
}

type ListMediaLiveChannelsResponseBody struct {
	// The channels.
	Channels []*ListMediaLiveChannelsResponseBodyChannels `json:"Channels,omitempty" xml:"Channels,omitempty" type:"Repeated"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// A pagination token. It can be used in the next request to retrieve a new page of results.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListMediaLiveChannelsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveChannelsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMediaLiveChannelsResponseBody) SetChannels(v []*ListMediaLiveChannelsResponseBodyChannels) *ListMediaLiveChannelsResponseBody {
	s.Channels = v
	return s
}

func (s *ListMediaLiveChannelsResponseBody) SetMaxResults(v int32) *ListMediaLiveChannelsResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBody) SetNextToken(v string) *ListMediaLiveChannelsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBody) SetRequestId(v string) *ListMediaLiveChannelsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBody) SetTotalCount(v int32) *ListMediaLiveChannelsResponseBody {
	s.TotalCount = &v
	return s
}

type ListMediaLiveChannelsResponseBodyChannels struct {
	// The audio settings.
	AudioSettings []*ListMediaLiveChannelsResponseBodyChannelsAudioSettings `json:"AudioSettings,omitempty" xml:"AudioSettings,omitempty" type:"Repeated"`
	// The ID of the channel.
	//
	// example:
	//
	// SEGK5KA6KYKAWQQH
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// The time when the channel was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2024-12-03T06:56:42Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The inputs associated with the channel.
	InputAttachments []*ListMediaLiveChannelsResponseBodyChannelsInputAttachments `json:"InputAttachments,omitempty" xml:"InputAttachments,omitempty" type:"Repeated"`
	// The time when the channel was last started. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC. If the channel has never been started since it was created, an empty string is returned.
	//
	// example:
	//
	// 2024-12-03T06:56:42Z
	LastStartTime *string `json:"LastStartTime,omitempty" xml:"LastStartTime,omitempty"`
	// The time when the channel was last stopped. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC. If the channel has never stopped since it was created, an empty string is returned.
	//
	// example:
	//
	// 2024-12-03T06:56:42Z
	LastStopTime *string `json:"LastStopTime,omitempty" xml:"LastStopTime,omitempty"`
	// The name of the channel.
	//
	// example:
	//
	// mych
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output groups.
	OutputGroups []*ListMediaLiveChannelsResponseBodyChannelsOutputGroups `json:"OutputGroups,omitempty" xml:"OutputGroups,omitempty" type:"Repeated"`
	// The state of the channel. Valid values: IDLE, STARTING, RUNNING, RECOVERING, and STOPPING.
	//
	// example:
	//
	// IDLE
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The video settings.
	VideoSettings []*ListMediaLiveChannelsResponseBodyChannelsVideoSettings `json:"VideoSettings,omitempty" xml:"VideoSettings,omitempty" type:"Repeated"`
}

func (s ListMediaLiveChannelsResponseBodyChannels) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveChannelsResponseBodyChannels) GoString() string {
	return s.String()
}

func (s *ListMediaLiveChannelsResponseBodyChannels) SetAudioSettings(v []*ListMediaLiveChannelsResponseBodyChannelsAudioSettings) *ListMediaLiveChannelsResponseBodyChannels {
	s.AudioSettings = v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannels) SetChannelId(v string) *ListMediaLiveChannelsResponseBodyChannels {
	s.ChannelId = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannels) SetCreateTime(v string) *ListMediaLiveChannelsResponseBodyChannels {
	s.CreateTime = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannels) SetInputAttachments(v []*ListMediaLiveChannelsResponseBodyChannelsInputAttachments) *ListMediaLiveChannelsResponseBodyChannels {
	s.InputAttachments = v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannels) SetLastStartTime(v string) *ListMediaLiveChannelsResponseBodyChannels {
	s.LastStartTime = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannels) SetLastStopTime(v string) *ListMediaLiveChannelsResponseBodyChannels {
	s.LastStopTime = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannels) SetName(v string) *ListMediaLiveChannelsResponseBodyChannels {
	s.Name = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannels) SetOutputGroups(v []*ListMediaLiveChannelsResponseBodyChannelsOutputGroups) *ListMediaLiveChannelsResponseBodyChannels {
	s.OutputGroups = v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannels) SetState(v string) *ListMediaLiveChannelsResponseBodyChannels {
	s.State = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannels) SetVideoSettings(v []*ListMediaLiveChannelsResponseBodyChannelsVideoSettings) *ListMediaLiveChannelsResponseBodyChannels {
	s.VideoSettings = v
	return s
}

type ListMediaLiveChannelsResponseBodyChannelsAudioSettings struct {
	// The audio codec.
	//
	// example:
	//
	// aac
	AudioCodec *string `json:"AudioCodec,omitempty" xml:"AudioCodec,omitempty"`
	// The audio encoding settings.
	AudioCodecSetting *ListMediaLiveChannelsResponseBodyChannelsAudioSettingsAudioCodecSetting `json:"AudioCodecSetting,omitempty" xml:"AudioCodecSetting,omitempty" type:"Struct"`
	// The name of the audio selector.
	//
	// example:
	//
	// myselector
	AudioSelectorName *string `json:"AudioSelectorName,omitempty" xml:"AudioSelectorName,omitempty"`
	// A three-letter ISO 639-2 language code.
	//
	// example:
	//
	// eng
	LanguageCode *string `json:"LanguageCode,omitempty" xml:"LanguageCode,omitempty"`
	// The name of the language.
	//
	// example:
	//
	// English
	LanguageName *string `json:"LanguageName,omitempty" xml:"LanguageName,omitempty"`
	// The name of the audio settings.
	//
	// example:
	//
	// zhuanfengzhuang
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListMediaLiveChannelsResponseBodyChannelsAudioSettings) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveChannelsResponseBodyChannelsAudioSettings) GoString() string {
	return s.String()
}

func (s *ListMediaLiveChannelsResponseBodyChannelsAudioSettings) SetAudioCodec(v string) *ListMediaLiveChannelsResponseBodyChannelsAudioSettings {
	s.AudioCodec = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsAudioSettings) SetAudioCodecSetting(v *ListMediaLiveChannelsResponseBodyChannelsAudioSettingsAudioCodecSetting) *ListMediaLiveChannelsResponseBodyChannelsAudioSettings {
	s.AudioCodecSetting = v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsAudioSettings) SetAudioSelectorName(v string) *ListMediaLiveChannelsResponseBodyChannelsAudioSettings {
	s.AudioSelectorName = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsAudioSettings) SetLanguageCode(v string) *ListMediaLiveChannelsResponseBodyChannelsAudioSettings {
	s.LanguageCode = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsAudioSettings) SetLanguageName(v string) *ListMediaLiveChannelsResponseBodyChannelsAudioSettings {
	s.LanguageName = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsAudioSettings) SetName(v string) *ListMediaLiveChannelsResponseBodyChannelsAudioSettings {
	s.Name = &v
	return s
}

type ListMediaLiveChannelsResponseBodyChannelsAudioSettingsAudioCodecSetting struct {
	// The audio bitrate. Unit: bit/s.
	//
	// example:
	//
	// 200000
	Bitrate *int32 `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The audio codec profile.
	//
	// example:
	//
	// AAC-LOW
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// The audio sample rate. Unit: Hz.
	//
	// example:
	//
	// 44100
	SampleRate *int32 `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
}

func (s ListMediaLiveChannelsResponseBodyChannelsAudioSettingsAudioCodecSetting) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveChannelsResponseBodyChannelsAudioSettingsAudioCodecSetting) GoString() string {
	return s.String()
}

func (s *ListMediaLiveChannelsResponseBodyChannelsAudioSettingsAudioCodecSetting) SetBitrate(v int32) *ListMediaLiveChannelsResponseBodyChannelsAudioSettingsAudioCodecSetting {
	s.Bitrate = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsAudioSettingsAudioCodecSetting) SetProfile(v string) *ListMediaLiveChannelsResponseBodyChannelsAudioSettingsAudioCodecSetting {
	s.Profile = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsAudioSettingsAudioCodecSetting) SetSampleRate(v int32) *ListMediaLiveChannelsResponseBodyChannelsAudioSettingsAudioCodecSetting {
	s.SampleRate = &v
	return s
}

type ListMediaLiveChannelsResponseBodyChannelsInputAttachments struct {
	// The audio selectors.
	AudioSelectors []*ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectors `json:"AudioSelectors,omitempty" xml:"AudioSelectors,omitempty" type:"Repeated"`
	// The ID of the input.
	//
	// This parameter is required.
	//
	// example:
	//
	// SEGK5KA6KYKAWQQH
	InputId *string `json:"InputId,omitempty" xml:"InputId,omitempty"`
	// The name of the input.
	//
	// example:
	//
	// myinput
	InputName *string `json:"InputName,omitempty" xml:"InputName,omitempty"`
	// The name of the language.
	//
	// example:
	//
	// eng
	LanguageName *string `json:"LanguageName,omitempty" xml:"LanguageName,omitempty"`
}

func (s ListMediaLiveChannelsResponseBodyChannelsInputAttachments) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveChannelsResponseBodyChannelsInputAttachments) GoString() string {
	return s.String()
}

func (s *ListMediaLiveChannelsResponseBodyChannelsInputAttachments) SetAudioSelectors(v []*ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectors) *ListMediaLiveChannelsResponseBodyChannelsInputAttachments {
	s.AudioSelectors = v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsInputAttachments) SetInputId(v string) *ListMediaLiveChannelsResponseBodyChannelsInputAttachments {
	s.InputId = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsInputAttachments) SetInputName(v string) *ListMediaLiveChannelsResponseBodyChannelsInputAttachments {
	s.InputName = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsInputAttachments) SetLanguageName(v string) *ListMediaLiveChannelsResponseBodyChannelsInputAttachments {
	s.LanguageName = &v
	return s
}

type ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectors struct {
	// The audio language selection.
	AudioLanguageSelection *ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectorsAudioLanguageSelection `json:"AudioLanguageSelection,omitempty" xml:"AudioLanguageSelection,omitempty" type:"Struct"`
	// The audio PID selection.
	AudioPidSelection *ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectorsAudioPidSelection `json:"AudioPidSelection,omitempty" xml:"AudioPidSelection,omitempty" type:"Struct"`
	// The audio track selection.
	AudioTrackSelection []*ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectorsAudioTrackSelection `json:"AudioTrackSelection,omitempty" xml:"AudioTrackSelection,omitempty" type:"Repeated"`
	// The name of the audio selector.
	//
	// This parameter is required.
	//
	// example:
	//
	// myselector
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectors) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectors) GoString() string {
	return s.String()
}

func (s *ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectors) SetAudioLanguageSelection(v *ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectorsAudioLanguageSelection) *ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectors {
	s.AudioLanguageSelection = v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectors) SetAudioPidSelection(v *ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectorsAudioPidSelection) *ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectors {
	s.AudioPidSelection = v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectors) SetAudioTrackSelection(v []*ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectorsAudioTrackSelection) *ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectors {
	s.AudioTrackSelection = v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectors) SetName(v string) *ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectors {
	s.Name = &v
	return s
}

type ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectorsAudioLanguageSelection struct {
	// A three-letter ISO 639-2 language code from within an audio source.
	//
	// This parameter is required.
	//
	// example:
	//
	// eng
	LanguageCode *string `json:"LanguageCode,omitempty" xml:"LanguageCode,omitempty"`
}

func (s ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectorsAudioLanguageSelection) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectorsAudioLanguageSelection) GoString() string {
	return s.String()
}

func (s *ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectorsAudioLanguageSelection) SetLanguageCode(v string) *ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectorsAudioLanguageSelection {
	s.LanguageCode = &v
	return s
}

type ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectorsAudioPidSelection struct {
	// A PID from within a source.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123
	Pid *int64 `json:"Pid,omitempty" xml:"Pid,omitempty"`
}

func (s ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectorsAudioPidSelection) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectorsAudioPidSelection) GoString() string {
	return s.String()
}

func (s *ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectorsAudioPidSelection) SetPid(v int64) *ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectorsAudioPidSelection {
	s.Pid = &v
	return s
}

type ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectorsAudioTrackSelection struct {
	// The track ID from within a source.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	TrackId *int64 `json:"TrackId,omitempty" xml:"TrackId,omitempty"`
}

func (s ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectorsAudioTrackSelection) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectorsAudioTrackSelection) GoString() string {
	return s.String()
}

func (s *ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectorsAudioTrackSelection) SetTrackId(v int64) *ListMediaLiveChannelsResponseBodyChannelsInputAttachmentsAudioSelectorsAudioTrackSelection {
	s.TrackId = &v
	return s
}

type ListMediaLiveChannelsResponseBodyChannelsOutputGroups struct {
	// The MediaPackage destination.
	MediaPackageGroupSetting *ListMediaLiveChannelsResponseBodyChannelsOutputGroupsMediaPackageGroupSetting `json:"MediaPackageGroupSetting,omitempty" xml:"MediaPackageGroupSetting,omitempty" type:"Struct"`
	// The URL for monitoring the output group. The parameter is returned only when the output gourp type is MediaPackage.
	//
	// example:
	//
	// rtmp://xxx
	MonitorUrl *string `json:"MonitorUrl,omitempty" xml:"MonitorUrl,omitempty"`
	// The name of the output group.
	//
	// example:
	//
	// group1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The outputs in the output group.
	Outputs []*ListMediaLiveChannelsResponseBodyChannelsOutputGroupsOutputs `json:"Outputs,omitempty" xml:"Outputs,omitempty" type:"Repeated"`
	// The output group type.
	//
	// example:
	//
	// MediaPackage
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListMediaLiveChannelsResponseBodyChannelsOutputGroups) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveChannelsResponseBodyChannelsOutputGroups) GoString() string {
	return s.String()
}

func (s *ListMediaLiveChannelsResponseBodyChannelsOutputGroups) SetMediaPackageGroupSetting(v *ListMediaLiveChannelsResponseBodyChannelsOutputGroupsMediaPackageGroupSetting) *ListMediaLiveChannelsResponseBodyChannelsOutputGroups {
	s.MediaPackageGroupSetting = v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsOutputGroups) SetMonitorUrl(v string) *ListMediaLiveChannelsResponseBodyChannelsOutputGroups {
	s.MonitorUrl = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsOutputGroups) SetName(v string) *ListMediaLiveChannelsResponseBodyChannelsOutputGroups {
	s.Name = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsOutputGroups) SetOutputs(v []*ListMediaLiveChannelsResponseBodyChannelsOutputGroupsOutputs) *ListMediaLiveChannelsResponseBodyChannelsOutputGroups {
	s.Outputs = v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsOutputGroups) SetType(v string) *ListMediaLiveChannelsResponseBodyChannelsOutputGroups {
	s.Type = &v
	return s
}

type ListMediaLiveChannelsResponseBodyChannelsOutputGroupsMediaPackageGroupSetting struct {
	// ChannelName in MediaPackage.
	//
	// example:
	//
	// myPackageChannel
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// GroupName in MediaPackage.
	//
	// example:
	//
	// myPackageGroup
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s ListMediaLiveChannelsResponseBodyChannelsOutputGroupsMediaPackageGroupSetting) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveChannelsResponseBodyChannelsOutputGroupsMediaPackageGroupSetting) GoString() string {
	return s.String()
}

func (s *ListMediaLiveChannelsResponseBodyChannelsOutputGroupsMediaPackageGroupSetting) SetChannelName(v string) *ListMediaLiveChannelsResponseBodyChannelsOutputGroupsMediaPackageGroupSetting {
	s.ChannelName = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsOutputGroupsMediaPackageGroupSetting) SetGroupName(v string) *ListMediaLiveChannelsResponseBodyChannelsOutputGroupsMediaPackageGroupSetting {
	s.GroupName = &v
	return s
}

type ListMediaLiveChannelsResponseBodyChannelsOutputGroupsOutputs struct {
	// The referenced AudioSettings.
	AudioSettingNames []*string `json:"AudioSettingNames,omitempty" xml:"AudioSettingNames,omitempty" type:"Repeated"`
	// The settings of the output delivered to MediaPackage.
	MediaPackageOutputSetting *ListMediaLiveChannelsResponseBodyChannelsOutputGroupsOutputsMediaPackageOutputSetting `json:"MediaPackageOutputSetting,omitempty" xml:"MediaPackageOutputSetting,omitempty" type:"Struct"`
	// The media type of the output.
	//
	// example:
	//
	// 0
	MediaType *int32 `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// The name of the output.
	//
	// example:
	//
	// output1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The name of the referenced VideoSettings.
	//
	// example:
	//
	// myVideo1
	VideoSettingName *string `json:"VideoSettingName,omitempty" xml:"VideoSettingName,omitempty"`
}

func (s ListMediaLiveChannelsResponseBodyChannelsOutputGroupsOutputs) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveChannelsResponseBodyChannelsOutputGroupsOutputs) GoString() string {
	return s.String()
}

func (s *ListMediaLiveChannelsResponseBodyChannelsOutputGroupsOutputs) SetAudioSettingNames(v []*string) *ListMediaLiveChannelsResponseBodyChannelsOutputGroupsOutputs {
	s.AudioSettingNames = v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsOutputGroupsOutputs) SetMediaPackageOutputSetting(v *ListMediaLiveChannelsResponseBodyChannelsOutputGroupsOutputsMediaPackageOutputSetting) *ListMediaLiveChannelsResponseBodyChannelsOutputGroupsOutputs {
	s.MediaPackageOutputSetting = v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsOutputGroupsOutputs) SetMediaType(v int32) *ListMediaLiveChannelsResponseBodyChannelsOutputGroupsOutputs {
	s.MediaType = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsOutputGroupsOutputs) SetName(v string) *ListMediaLiveChannelsResponseBodyChannelsOutputGroupsOutputs {
	s.Name = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsOutputGroupsOutputs) SetVideoSettingName(v string) *ListMediaLiveChannelsResponseBodyChannelsOutputGroupsOutputs {
	s.VideoSettingName = &v
	return s
}

type ListMediaLiveChannelsResponseBodyChannelsOutputGroupsOutputsMediaPackageOutputSetting struct {
	// The manifest audio group ID.
	//
	// example:
	//
	// audiogroup
	AudioGroupId *string `json:"AudioGroupId,omitempty" xml:"AudioGroupId,omitempty"`
	// The manifest name modifier. The child manifests include this modifier in their M3U8 file names.
	//
	// example:
	//
	// 480p
	NameModifier *string `json:"NameModifier,omitempty" xml:"NameModifier,omitempty"`
}

func (s ListMediaLiveChannelsResponseBodyChannelsOutputGroupsOutputsMediaPackageOutputSetting) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveChannelsResponseBodyChannelsOutputGroupsOutputsMediaPackageOutputSetting) GoString() string {
	return s.String()
}

func (s *ListMediaLiveChannelsResponseBodyChannelsOutputGroupsOutputsMediaPackageOutputSetting) SetAudioGroupId(v string) *ListMediaLiveChannelsResponseBodyChannelsOutputGroupsOutputsMediaPackageOutputSetting {
	s.AudioGroupId = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsOutputGroupsOutputsMediaPackageOutputSetting) SetNameModifier(v string) *ListMediaLiveChannelsResponseBodyChannelsOutputGroupsOutputsMediaPackageOutputSetting {
	s.NameModifier = &v
	return s
}

type ListMediaLiveChannelsResponseBodyChannelsVideoSettings struct {
	// The height of the video in pixels.
	//
	// example:
	//
	// 720
	Height *int32 `json:"Height,omitempty" xml:"Height,omitempty"`
	// The name of the video settings.
	//
	// example:
	//
	// video1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The video codec.
	//
	// example:
	//
	// H264
	VideoCodec *string `json:"VideoCodec,omitempty" xml:"VideoCodec,omitempty"`
	// The video encoding settings.
	VideoCodecSetting *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSetting `json:"VideoCodecSetting,omitempty" xml:"VideoCodecSetting,omitempty" type:"Struct"`
	// The video transcoding method. Valid values: NORMAL (regular transcoding) and NBHD (Narrowband HD™ transcoding).
	//
	// example:
	//
	// NORMAL
	VideoCodecType *string `json:"VideoCodecType,omitempty" xml:"VideoCodecType,omitempty"`
	// The width of the video in pixels.
	//
	// example:
	//
	// 1280
	Width *int32 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListMediaLiveChannelsResponseBodyChannelsVideoSettings) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveChannelsResponseBodyChannelsVideoSettings) GoString() string {
	return s.String()
}

func (s *ListMediaLiveChannelsResponseBodyChannelsVideoSettings) SetHeight(v int32) *ListMediaLiveChannelsResponseBodyChannelsVideoSettings {
	s.Height = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsVideoSettings) SetName(v string) *ListMediaLiveChannelsResponseBodyChannelsVideoSettings {
	s.Name = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsVideoSettings) SetVideoCodec(v string) *ListMediaLiveChannelsResponseBodyChannelsVideoSettings {
	s.VideoCodec = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsVideoSettings) SetVideoCodecSetting(v *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSetting) *ListMediaLiveChannelsResponseBodyChannelsVideoSettings {
	s.VideoCodecSetting = v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsVideoSettings) SetVideoCodecType(v string) *ListMediaLiveChannelsResponseBodyChannelsVideoSettings {
	s.VideoCodecType = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsVideoSettings) SetWidth(v int32) *ListMediaLiveChannelsResponseBodyChannelsVideoSettings {
	s.Width = &v
	return s
}

type ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSetting struct {
	// The video encoding settings.
	CodecDetail *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingCodecDetail `json:"CodecDetail,omitempty" xml:"CodecDetail,omitempty" type:"Struct"`
	// The frame rate.
	Framerate *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingFramerate `json:"Framerate,omitempty" xml:"Framerate,omitempty" type:"Struct"`
	// The GOP setting.
	Gop *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingGop `json:"Gop,omitempty" xml:"Gop,omitempty" type:"Struct"`
	// The video encoding rate.
	Rate *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingRate `json:"Rate,omitempty" xml:"Rate,omitempty" type:"Struct"`
}

func (s ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSetting) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSetting) GoString() string {
	return s.String()
}

func (s *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSetting) SetCodecDetail(v *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingCodecDetail) *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSetting {
	s.CodecDetail = v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSetting) SetFramerate(v *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingFramerate) *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSetting {
	s.Framerate = v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSetting) SetGop(v *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingGop) *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSetting {
	s.Gop = v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSetting) SetRate(v *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingRate) *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSetting {
	s.Rate = v
	return s
}

type ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingCodecDetail struct {
	// The video encoding level. It is not supported yet.
	//
	// example:
	//
	// H264_LEVEL_AUTO
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The H.264 profile.
	//
	// example:
	//
	// MAIN
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
}

func (s ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingCodecDetail) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingCodecDetail) GoString() string {
	return s.String()
}

func (s *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingCodecDetail) SetLevel(v string) *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingCodecDetail {
	s.Level = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingCodecDetail) SetProfile(v string) *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingCodecDetail {
	s.Profile = &v
	return s
}

type ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingFramerate struct {
	// The frame rate mode.
	//
	// example:
	//
	// SPECIFIED
	FramerateControl *string `json:"FramerateControl,omitempty" xml:"FramerateControl,omitempty"`
	// The denominator of the fixed frame rate.
	//
	// example:
	//
	// 1
	FramerateDenominator *int32 `json:"FramerateDenominator,omitempty" xml:"FramerateDenominator,omitempty"`
	// The numerator of the fixed frame rate.
	//
	// example:
	//
	// 25
	FramerateNumerator *int32 `json:"FramerateNumerator,omitempty" xml:"FramerateNumerator,omitempty"`
}

func (s ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingFramerate) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingFramerate) GoString() string {
	return s.String()
}

func (s *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingFramerate) SetFramerateControl(v string) *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingFramerate {
	s.FramerateControl = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingFramerate) SetFramerateDenominator(v int32) *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingFramerate {
	s.FramerateDenominator = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingFramerate) SetFramerateNumerator(v int32) *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingFramerate {
	s.FramerateNumerator = &v
	return s
}

type ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingGop struct {
	// The number of B frames.
	//
	// example:
	//
	// 3
	BframesNum *int32 `json:"BframesNum,omitempty" xml:"BframesNum,omitempty"`
	// The GOP size.
	//
	// example:
	//
	// 90
	GopSize *int32 `json:"GopSize,omitempty" xml:"GopSize,omitempty"`
	// The GOP size unit.
	//
	// example:
	//
	// FRAMES
	GopSizeUnits *string `json:"GopSizeUnits,omitempty" xml:"GopSizeUnits,omitempty"`
}

func (s ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingGop) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingGop) GoString() string {
	return s.String()
}

func (s *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingGop) SetBframesNum(v int32) *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingGop {
	s.BframesNum = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingGop) SetGopSize(v int32) *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingGop {
	s.GopSize = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingGop) SetGopSizeUnits(v string) *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingGop {
	s.GopSizeUnits = &v
	return s
}

type ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingRate struct {
	// The video bitrate. Unit: bit/s.
	//
	// example:
	//
	// 2500000
	Bitrate *int32 `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The video buffer size. Unit: bit/s.
	//
	// example:
	//
	// 6000000
	BufferSize *int32 `json:"BufferSize,omitempty" xml:"BufferSize,omitempty"`
	// The maximum bitrate. Unit: bit/s.
	//
	// example:
	//
	// 6000000
	MaxBitrate *int32 `json:"MaxBitrate,omitempty" xml:"MaxBitrate,omitempty"`
	// The bitrate control mode.
	//
	// example:
	//
	// ABR
	RateControlMode *string `json:"RateControlMode,omitempty" xml:"RateControlMode,omitempty"`
}

func (s ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingRate) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingRate) GoString() string {
	return s.String()
}

func (s *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingRate) SetBitrate(v int32) *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingRate {
	s.Bitrate = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingRate) SetBufferSize(v int32) *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingRate {
	s.BufferSize = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingRate) SetMaxBitrate(v int32) *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingRate {
	s.MaxBitrate = &v
	return s
}

func (s *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingRate) SetRateControlMode(v string) *ListMediaLiveChannelsResponseBodyChannelsVideoSettingsVideoCodecSettingRate {
	s.RateControlMode = &v
	return s
}

type ListMediaLiveChannelsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListMediaLiveChannelsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListMediaLiveChannelsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveChannelsResponse) GoString() string {
	return s.String()
}

func (s *ListMediaLiveChannelsResponse) SetHeaders(v map[string]*string) *ListMediaLiveChannelsResponse {
	s.Headers = v
	return s
}

func (s *ListMediaLiveChannelsResponse) SetStatusCode(v int32) *ListMediaLiveChannelsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMediaLiveChannelsResponse) SetBody(v *ListMediaLiveChannelsResponseBody) *ListMediaLiveChannelsResponse {
	s.Body = v
	return s
}

type ListMediaLiveInputSecurityGroupsRequest struct {
	// The keyword of the query. You can perform a fuzzy search on security group ID or name.
	//
	// example:
	//
	// 123
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The number of entries per page. Valid values: 1 to 100. Default value: If you do not specify this parameter or if you set a value smaller than 10, the default value is 10. If you set a value greater than 100, the default value is 100.
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The number of entries to be skipped in the query. If the number of entries you attempt to skip exceeds the number of entries that meet the condition, an empty list is returned.
	//
	// example:
	//
	// 20
	Skip *int32 `json:"Skip,omitempty" xml:"Skip,omitempty"`
	// The sorting order of the security groups by creation time. Default value: asc. Valid values: desc and asc. asc indicates the ascending order, and desc indicates the descending order.
	//
	// example:
	//
	// desc
	SortOrder *string `json:"SortOrder,omitempty" xml:"SortOrder,omitempty"`
}

func (s ListMediaLiveInputSecurityGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveInputSecurityGroupsRequest) GoString() string {
	return s.String()
}

func (s *ListMediaLiveInputSecurityGroupsRequest) SetKeyword(v string) *ListMediaLiveInputSecurityGroupsRequest {
	s.Keyword = &v
	return s
}

func (s *ListMediaLiveInputSecurityGroupsRequest) SetMaxResults(v int32) *ListMediaLiveInputSecurityGroupsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListMediaLiveInputSecurityGroupsRequest) SetNextToken(v string) *ListMediaLiveInputSecurityGroupsRequest {
	s.NextToken = &v
	return s
}

func (s *ListMediaLiveInputSecurityGroupsRequest) SetSkip(v int32) *ListMediaLiveInputSecurityGroupsRequest {
	s.Skip = &v
	return s
}

func (s *ListMediaLiveInputSecurityGroupsRequest) SetSortOrder(v string) *ListMediaLiveInputSecurityGroupsRequest {
	s.SortOrder = &v
	return s
}

type ListMediaLiveInputSecurityGroupsResponseBody struct {
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// A pagination token. It can be used in the next request to retrieve a new page of results.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426614174000
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The security groups.
	SecurityGroups []*ListMediaLiveInputSecurityGroupsResponseBodySecurityGroups `json:"SecurityGroups,omitempty" xml:"SecurityGroups,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListMediaLiveInputSecurityGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveInputSecurityGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMediaLiveInputSecurityGroupsResponseBody) SetMaxResults(v int32) *ListMediaLiveInputSecurityGroupsResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListMediaLiveInputSecurityGroupsResponseBody) SetNextToken(v string) *ListMediaLiveInputSecurityGroupsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListMediaLiveInputSecurityGroupsResponseBody) SetRequestId(v string) *ListMediaLiveInputSecurityGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMediaLiveInputSecurityGroupsResponseBody) SetSecurityGroups(v []*ListMediaLiveInputSecurityGroupsResponseBodySecurityGroups) *ListMediaLiveInputSecurityGroupsResponseBody {
	s.SecurityGroups = v
	return s
}

func (s *ListMediaLiveInputSecurityGroupsResponseBody) SetTotalCount(v int32) *ListMediaLiveInputSecurityGroupsResponseBody {
	s.TotalCount = &v
	return s
}

type ListMediaLiveInputSecurityGroupsResponseBodySecurityGroups struct {
	// The time when the security group was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2024-12-03T06:56:42Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The IDs of the inputs associated with the security group.
	InputIds []*string `json:"InputIds,omitempty" xml:"InputIds,omitempty" type:"Repeated"`
	// The security group name.
	//
	// example:
	//
	// mysg
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the security group.
	//
	// example:
	//
	// SEGK5KA6KYKAWQQH
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// The security group rules.
	WhitelistRules []*string `json:"WhitelistRules,omitempty" xml:"WhitelistRules,omitempty" type:"Repeated"`
}

func (s ListMediaLiveInputSecurityGroupsResponseBodySecurityGroups) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveInputSecurityGroupsResponseBodySecurityGroups) GoString() string {
	return s.String()
}

func (s *ListMediaLiveInputSecurityGroupsResponseBodySecurityGroups) SetCreateTime(v string) *ListMediaLiveInputSecurityGroupsResponseBodySecurityGroups {
	s.CreateTime = &v
	return s
}

func (s *ListMediaLiveInputSecurityGroupsResponseBodySecurityGroups) SetInputIds(v []*string) *ListMediaLiveInputSecurityGroupsResponseBodySecurityGroups {
	s.InputIds = v
	return s
}

func (s *ListMediaLiveInputSecurityGroupsResponseBodySecurityGroups) SetName(v string) *ListMediaLiveInputSecurityGroupsResponseBodySecurityGroups {
	s.Name = &v
	return s
}

func (s *ListMediaLiveInputSecurityGroupsResponseBodySecurityGroups) SetSecurityGroupId(v string) *ListMediaLiveInputSecurityGroupsResponseBodySecurityGroups {
	s.SecurityGroupId = &v
	return s
}

func (s *ListMediaLiveInputSecurityGroupsResponseBodySecurityGroups) SetWhitelistRules(v []*string) *ListMediaLiveInputSecurityGroupsResponseBodySecurityGroups {
	s.WhitelistRules = v
	return s
}

type ListMediaLiveInputSecurityGroupsResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListMediaLiveInputSecurityGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListMediaLiveInputSecurityGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveInputSecurityGroupsResponse) GoString() string {
	return s.String()
}

func (s *ListMediaLiveInputSecurityGroupsResponse) SetHeaders(v map[string]*string) *ListMediaLiveInputSecurityGroupsResponse {
	s.Headers = v
	return s
}

func (s *ListMediaLiveInputSecurityGroupsResponse) SetStatusCode(v int32) *ListMediaLiveInputSecurityGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMediaLiveInputSecurityGroupsResponse) SetBody(v *ListMediaLiveInputSecurityGroupsResponseBody) *ListMediaLiveInputSecurityGroupsResponse {
	s.Body = v
	return s
}

type ListMediaLiveInputsRequest struct {
	// The keyword of the query. You can perform a fuzzy search on input ID or name.
	//
	// example:
	//
	// 123
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The number of entries per page. Valid values: 1 to 100. Default value: If you do not specify this parameter or if you set a value smaller than 10, the default value is 10. If you set a value greater than 100, the default value is 100.
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The number of entries to be skipped in the query. If the number of entries you attempt to skip exceeds the number of entries that meet the condition, an empty list is returned.
	//
	// example:
	//
	// 20
	Skip *int32 `json:"Skip,omitempty" xml:"Skip,omitempty"`
	// The sorting order of the inputs by creation time. Default value: asc. Valid values: desc and asc. asc indicates the ascending order, and desc indicates the descending order.
	//
	// example:
	//
	// desc
	SortOrder *string `json:"SortOrder,omitempty" xml:"SortOrder,omitempty"`
	// The type of inputs you want to query. You can separate multiple input types with commas (,) in a JSON array.
	//
	// example:
	//
	// ["RTMP_PUSH","SRT_PULL"]
	Types *string `json:"Types,omitempty" xml:"Types,omitempty"`
}

func (s ListMediaLiveInputsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveInputsRequest) GoString() string {
	return s.String()
}

func (s *ListMediaLiveInputsRequest) SetKeyword(v string) *ListMediaLiveInputsRequest {
	s.Keyword = &v
	return s
}

func (s *ListMediaLiveInputsRequest) SetMaxResults(v int32) *ListMediaLiveInputsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListMediaLiveInputsRequest) SetNextToken(v string) *ListMediaLiveInputsRequest {
	s.NextToken = &v
	return s
}

func (s *ListMediaLiveInputsRequest) SetSkip(v int32) *ListMediaLiveInputsRequest {
	s.Skip = &v
	return s
}

func (s *ListMediaLiveInputsRequest) SetSortOrder(v string) *ListMediaLiveInputsRequest {
	s.SortOrder = &v
	return s
}

func (s *ListMediaLiveInputsRequest) SetTypes(v string) *ListMediaLiveInputsRequest {
	s.Types = &v
	return s
}

type ListMediaLiveInputsResponseBody struct {
	// The inputs.
	Inputs []*ListMediaLiveInputsResponseBodyInputs `json:"Inputs,omitempty" xml:"Inputs,omitempty" type:"Repeated"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// A pagination token. It can be used in the next request to retrieve a new page of results.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 200
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListMediaLiveInputsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveInputsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMediaLiveInputsResponseBody) SetInputs(v []*ListMediaLiveInputsResponseBodyInputs) *ListMediaLiveInputsResponseBody {
	s.Inputs = v
	return s
}

func (s *ListMediaLiveInputsResponseBody) SetMaxResults(v int32) *ListMediaLiveInputsResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListMediaLiveInputsResponseBody) SetNextToken(v string) *ListMediaLiveInputsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListMediaLiveInputsResponseBody) SetRequestId(v string) *ListMediaLiveInputsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMediaLiveInputsResponseBody) SetTotalCount(v int32) *ListMediaLiveInputsResponseBody {
	s.TotalCount = &v
	return s
}

type ListMediaLiveInputsResponseBodyInputs struct {
	// The IDs of the channels associated with the input.
	ChannelIds []*string `json:"ChannelIds,omitempty" xml:"ChannelIds,omitempty" type:"Repeated"`
	// The time when the input was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2024-12-03T06:56:42Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the input.
	//
	// example:
	//
	// SEGK5KA6KYKAWQQH
	InputId *string `json:"InputId,omitempty" xml:"InputId,omitempty"`
	// The input configurations.
	InputInfos []*ListMediaLiveInputsResponseBodyInputsInputInfos `json:"InputInfos,omitempty" xml:"InputInfos,omitempty" type:"Repeated"`
	// The name of the input.
	//
	// example:
	//
	// myinput
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The IDs of the security groups associated with the input.
	SecurityGroupIds []*string `json:"SecurityGroupIds,omitempty" xml:"SecurityGroupIds,omitempty" type:"Repeated"`
	// The input type.
	//
	// example:
	//
	// RTMP_PUSH
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListMediaLiveInputsResponseBodyInputs) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveInputsResponseBodyInputs) GoString() string {
	return s.String()
}

func (s *ListMediaLiveInputsResponseBodyInputs) SetChannelIds(v []*string) *ListMediaLiveInputsResponseBodyInputs {
	s.ChannelIds = v
	return s
}

func (s *ListMediaLiveInputsResponseBodyInputs) SetCreateTime(v string) *ListMediaLiveInputsResponseBodyInputs {
	s.CreateTime = &v
	return s
}

func (s *ListMediaLiveInputsResponseBodyInputs) SetInputId(v string) *ListMediaLiveInputsResponseBodyInputs {
	s.InputId = &v
	return s
}

func (s *ListMediaLiveInputsResponseBodyInputs) SetInputInfos(v []*ListMediaLiveInputsResponseBodyInputsInputInfos) *ListMediaLiveInputsResponseBodyInputs {
	s.InputInfos = v
	return s
}

func (s *ListMediaLiveInputsResponseBodyInputs) SetName(v string) *ListMediaLiveInputsResponseBodyInputs {
	s.Name = &v
	return s
}

func (s *ListMediaLiveInputsResponseBodyInputs) SetSecurityGroupIds(v []*string) *ListMediaLiveInputsResponseBodyInputs {
	s.SecurityGroupIds = v
	return s
}

func (s *ListMediaLiveInputsResponseBodyInputs) SetType(v string) *ListMediaLiveInputsResponseBodyInputs {
	s.Type = &v
	return s
}

type ListMediaLiveInputsResponseBodyInputsInputInfos struct {
	// The endpoint that the stream is pushed to. This parameter is returned for PUSH inputs.
	//
	// example:
	//
	// rtmp://domain/app/stream
	DestHost *string `json:"DestHost,omitempty" xml:"DestHost,omitempty"`
	// The ID of the flow from MediaConnect.
	//
	// example:
	//
	// ******81-9693-40dc-bbab-db5e49******
	FlowId *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	// The output name of the MediaConnect flow.
	//
	// example:
	//
	// myFlowOutputName
	FlowOutputName *string `json:"FlowOutputName,omitempty" xml:"FlowOutputName,omitempty"`
	// The URL for input monitoring.
	//
	// example:
	//
	// rtmp://domain/app/stream_for_monitor
	MonitorUrl *string `json:"MonitorUrl,omitempty" xml:"MonitorUrl,omitempty"`
	// The source URL where the stream is pulled from. This parameter is returned for PULL inputs.
	//
	// example:
	//
	// rtmp://domain/app/stream
	SourceUrl *string `json:"SourceUrl,omitempty" xml:"SourceUrl,omitempty"`
	// The name of the pushed stream. This parameter is returned for PUSH inputs.
	//
	// example:
	//
	// mystream
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s ListMediaLiveInputsResponseBodyInputsInputInfos) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveInputsResponseBodyInputsInputInfos) GoString() string {
	return s.String()
}

func (s *ListMediaLiveInputsResponseBodyInputsInputInfos) SetDestHost(v string) *ListMediaLiveInputsResponseBodyInputsInputInfos {
	s.DestHost = &v
	return s
}

func (s *ListMediaLiveInputsResponseBodyInputsInputInfos) SetFlowId(v string) *ListMediaLiveInputsResponseBodyInputsInputInfos {
	s.FlowId = &v
	return s
}

func (s *ListMediaLiveInputsResponseBodyInputsInputInfos) SetFlowOutputName(v string) *ListMediaLiveInputsResponseBodyInputsInputInfos {
	s.FlowOutputName = &v
	return s
}

func (s *ListMediaLiveInputsResponseBodyInputsInputInfos) SetMonitorUrl(v string) *ListMediaLiveInputsResponseBodyInputsInputInfos {
	s.MonitorUrl = &v
	return s
}

func (s *ListMediaLiveInputsResponseBodyInputsInputInfos) SetSourceUrl(v string) *ListMediaLiveInputsResponseBodyInputsInputInfos {
	s.SourceUrl = &v
	return s
}

func (s *ListMediaLiveInputsResponseBodyInputsInputInfos) SetStreamName(v string) *ListMediaLiveInputsResponseBodyInputsInputInfos {
	s.StreamName = &v
	return s
}

type ListMediaLiveInputsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListMediaLiveInputsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListMediaLiveInputsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMediaLiveInputsResponse) GoString() string {
	return s.String()
}

func (s *ListMediaLiveInputsResponse) SetHeaders(v map[string]*string) *ListMediaLiveInputsResponse {
	s.Headers = v
	return s
}

func (s *ListMediaLiveInputsResponse) SetStatusCode(v int32) *ListMediaLiveInputsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMediaLiveInputsResponse) SetBody(v *ListMediaLiveInputsResponseBody) *ListMediaLiveInputsResponse {
	s.Body = v
	return s
}

type ListMediaMarksRequest struct {
	// The ID of the media asset.
	//
	// example:
	//
	// 411bed50018971edb60b0764a0ec6***
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The mark ID. You can specify multiple IDs separated with commas (,). This parameter is discontinued.
	//
	// example:
	//
	// mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60
	MediaMarkIds *string `json:"MediaMarkIds,omitempty" xml:"MediaMarkIds,omitempty"`
}

func (s ListMediaMarksRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMediaMarksRequest) GoString() string {
	return s.String()
}

func (s *ListMediaMarksRequest) SetMediaId(v string) *ListMediaMarksRequest {
	s.MediaId = &v
	return s
}

func (s *ListMediaMarksRequest) SetMediaMarkIds(v string) *ListMediaMarksRequest {
	s.MediaMarkIds = &v
	return s
}

type ListMediaMarksResponseBody struct {
	// The ID of the media asset.
	//
	// example:
	//
	// ******b48fb04483915d4f2cd8******
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The marks of the media asset, in the JSONArray format.
	MediaMarks *string `json:"MediaMarks,omitempty" xml:"MediaMarks,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListMediaMarksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMediaMarksResponseBody) GoString() string {
	return s.String()
}

func (s *ListMediaMarksResponseBody) SetMediaId(v string) *ListMediaMarksResponseBody {
	s.MediaId = &v
	return s
}

func (s *ListMediaMarksResponseBody) SetMediaMarks(v string) *ListMediaMarksResponseBody {
	s.MediaMarks = &v
	return s
}

func (s *ListMediaMarksResponseBody) SetRequestId(v string) *ListMediaMarksResponseBody {
	s.RequestId = &v
	return s
}

type ListMediaMarksResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListMediaMarksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListMediaMarksResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMediaMarksResponse) GoString() string {
	return s.String()
}

func (s *ListMediaMarksResponse) SetHeaders(v map[string]*string) *ListMediaMarksResponse {
	s.Headers = v
	return s
}

func (s *ListMediaMarksResponse) SetStatusCode(v int32) *ListMediaMarksResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMediaMarksResponse) SetBody(v *ListMediaMarksResponseBody) *ListMediaMarksResponse {
	s.Body = v
	return s
}

type ListMediaProducingJobsRequest struct {
	// The end of the time range to query. The maximum time range between EndTime and StartTime cannot exceed 30 days. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// example:
	//
	// 2022-02-02T23:59:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The job type.
	//
	// Valid values:
	//
	// 	- LiveEditingJob: live editing job.
	//
	// 	- EditingJob: regular template-based editing job
	//
	// 	- VETemplateJob: advanced template-based editing job.
	//
	// example:
	//
	// EditingJob
	JobType *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	// The search keyword. For example, you can use a job ID as the keyword to search for jobs.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The ID of the quick video production job. If this parameter is specified, the subjobs of the quick video production job are queried.
	//
	// example:
	//
	// ******8750b54e3c976a47da6f******
	MasterJobId *string `json:"MasterJobId,omitempty" xml:"MasterJobId,omitempty"`
	// The maximum number of entries to return.
	//
	// Default value: 10. Valid values: 1 to 100.
	//
	// example:
	//
	// 100
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results.
	//
	// example:
	//
	// 8EqYpQbZ6Eh7+Zz8DxVYoQ==
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the online editing project.
	//
	// example:
	//
	// ******927cfb53d05b96c1bfe1******
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The sorting parameter. By default, the query results are sorted by creation time in descending order.
	//
	// Valid values:
	//
	// 	- CreationTime:Asc: sorted by creation time in ascending order.
	//
	// 	- CreationTime:Desc: sorted by creation time in descending order.
	//
	// example:
	//
	// CreationTime:Desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// example:
	//
	// 2017-01-11T12:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The job state.
	//
	// Valid values:
	//
	// 	- Init: The job is initialized.
	//
	// 	- Failed: The job failed.
	//
	// 	- Success: The job is successful.
	//
	// 	- Processing: The job is in progress.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListMediaProducingJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMediaProducingJobsRequest) GoString() string {
	return s.String()
}

func (s *ListMediaProducingJobsRequest) SetEndTime(v string) *ListMediaProducingJobsRequest {
	s.EndTime = &v
	return s
}

func (s *ListMediaProducingJobsRequest) SetJobType(v string) *ListMediaProducingJobsRequest {
	s.JobType = &v
	return s
}

func (s *ListMediaProducingJobsRequest) SetKeyword(v string) *ListMediaProducingJobsRequest {
	s.Keyword = &v
	return s
}

func (s *ListMediaProducingJobsRequest) SetMasterJobId(v string) *ListMediaProducingJobsRequest {
	s.MasterJobId = &v
	return s
}

func (s *ListMediaProducingJobsRequest) SetMaxResults(v int32) *ListMediaProducingJobsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListMediaProducingJobsRequest) SetNextToken(v string) *ListMediaProducingJobsRequest {
	s.NextToken = &v
	return s
}

func (s *ListMediaProducingJobsRequest) SetProjectId(v string) *ListMediaProducingJobsRequest {
	s.ProjectId = &v
	return s
}

func (s *ListMediaProducingJobsRequest) SetSortBy(v string) *ListMediaProducingJobsRequest {
	s.SortBy = &v
	return s
}

func (s *ListMediaProducingJobsRequest) SetStartTime(v string) *ListMediaProducingJobsRequest {
	s.StartTime = &v
	return s
}

func (s *ListMediaProducingJobsRequest) SetStatus(v string) *ListMediaProducingJobsRequest {
	s.Status = &v
	return s
}

type ListMediaProducingJobsResponseBody struct {
	// The maximum number of entries returned.
	//
	// Default value: 10. Valid values: 1 to 100.
	//
	// example:
	//
	// 100
	MaxResults *string `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The queried media editing and production jobs.
	MediaProducingJobList []*ListMediaProducingJobsResponseBodyMediaProducingJobList `json:"MediaProducingJobList,omitempty" xml:"MediaProducingJobList,omitempty" type:"Repeated"`
	// A pagination token. It can be used in the next request to retrieve a new page of results.
	//
	// example:
	//
	// 8EqYpQbZ6Eh7+Zz8DxVYoQ==
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListMediaProducingJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMediaProducingJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMediaProducingJobsResponseBody) SetMaxResults(v string) *ListMediaProducingJobsResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListMediaProducingJobsResponseBody) SetMediaProducingJobList(v []*ListMediaProducingJobsResponseBodyMediaProducingJobList) *ListMediaProducingJobsResponseBody {
	s.MediaProducingJobList = v
	return s
}

func (s *ListMediaProducingJobsResponseBody) SetNextToken(v string) *ListMediaProducingJobsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListMediaProducingJobsResponseBody) SetRequestId(v string) *ListMediaProducingJobsResponseBody {
	s.RequestId = &v
	return s
}

type ListMediaProducingJobsResponseBodyMediaProducingJobList struct {
	// The template material parameters.
	//
	// example:
	//
	// {"Text1":"text","Text0":"text","Media1":"mediaId","Media0":"mediaId"}
	ClipsParam *string `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	// The response code.
	//
	// example:
	//
	// Success
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The time when the job was complete. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-03-21T16:40:30Z
	CompleteTime *string `json:"CompleteTime,omitempty" xml:"CompleteTime,omitempty"`
	// The time when the job was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-03-21T16:40:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The duration of the output file. Unit: seconds.
	//
	// example:
	//
	// 15.5
	Duration *float32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The ID of the online editing job.
	//
	// example:
	//
	// ******8750b54e3c976a47da6f******
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The media asset ID of the output file.
	//
	// example:
	//
	// 0ce4ea70f52471edab61f7e7d6786302
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The URL of the output file.
	//
	// example:
	//
	// http://your-bucket.oss-cn-shanghai.aliyuncs.com/your-video.mp4
	MediaURL *string `json:"MediaURL,omitempty" xml:"MediaURL,omitempty"`
	// The returned message. Note: Pay attention to this parameter if the job failed.
	//
	// example:
	//
	// The resource operated InputFile is bad
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The time when the job was last modified.
	//
	// example:
	//
	// 2022-03-21T16:41:00Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The ID of the online editing project.
	//
	// example:
	//
	// ******faa3b542f5a6135217e3******
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The job state.
	//
	// example:
	//
	// Sucess
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the online editing template.
	//
	// example:
	//
	// cb786a39c5d44cecb23d8c864facffc1
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The user-defined data in the JSON format.
	//
	// example:
	//
	// {"key":"value"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s ListMediaProducingJobsResponseBodyMediaProducingJobList) String() string {
	return tea.Prettify(s)
}

func (s ListMediaProducingJobsResponseBodyMediaProducingJobList) GoString() string {
	return s.String()
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetClipsParam(v string) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.ClipsParam = &v
	return s
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetCode(v string) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.Code = &v
	return s
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetCompleteTime(v string) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.CompleteTime = &v
	return s
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetCreateTime(v string) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.CreateTime = &v
	return s
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetDuration(v float32) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.Duration = &v
	return s
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetJobId(v string) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.JobId = &v
	return s
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetMediaId(v string) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.MediaId = &v
	return s
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetMediaURL(v string) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.MediaURL = &v
	return s
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetMessage(v string) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.Message = &v
	return s
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetModifiedTime(v string) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.ModifiedTime = &v
	return s
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetProjectId(v string) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.ProjectId = &v
	return s
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetStatus(v string) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.Status = &v
	return s
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetTemplateId(v string) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.TemplateId = &v
	return s
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetUserData(v string) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.UserData = &v
	return s
}

type ListMediaProducingJobsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListMediaProducingJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListMediaProducingJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMediaProducingJobsResponse) GoString() string {
	return s.String()
}

func (s *ListMediaProducingJobsResponse) SetHeaders(v map[string]*string) *ListMediaProducingJobsResponse {
	s.Headers = v
	return s
}

func (s *ListMediaProducingJobsResponse) SetStatusCode(v int32) *ListMediaProducingJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMediaProducingJobsResponse) SetBody(v *ListMediaProducingJobsResponseBody) *ListMediaProducingJobsResponse {
	s.Body = v
	return s
}

type ListPackageJobsRequest struct {
	// The end of the time range during which the jobs to be queried were created. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// example:
	//
	// 2022-07-15T00:00:00Z
	EndOfCreateTime *string `json:"EndOfCreateTime,omitempty" xml:"EndOfCreateTime,omitempty"`
	// The job ID.
	//
	// example:
	//
	// 7b38a5d86f1e47838927b6e7ccb11cbe
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request.
	//
	// example:
	//
	// ab4802364a2e49208c99efab82dfa8e8
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// The order that you use to sort the query results. Valid values:
	//
	// 	- CreateTimeDesc: sorts the jobs by creation time in descending order.
	//
	// 	- CreateTimeAsc: sorts the jobs by creation time in ascending order.
	//
	// example:
	//
	// CreateTimeDesc
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The number of entries per page. Valid values: 0 to 100. Default value: 20.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range during which the jobs to be queried were created. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// example:
	//
	// 2022-07-01T00:00:00Z
	StartOfCreateTime *string `json:"StartOfCreateTime,omitempty" xml:"StartOfCreateTime,omitempty"`
	// The state of the job.
	//
	// 	- Init: The job is submitted.
	//
	// 	- Success: The job is successful.
	//
	// 	- Fail: The job failed.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListPackageJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPackageJobsRequest) GoString() string {
	return s.String()
}

func (s *ListPackageJobsRequest) SetEndOfCreateTime(v string) *ListPackageJobsRequest {
	s.EndOfCreateTime = &v
	return s
}

func (s *ListPackageJobsRequest) SetJobId(v string) *ListPackageJobsRequest {
	s.JobId = &v
	return s
}

func (s *ListPackageJobsRequest) SetNextPageToken(v string) *ListPackageJobsRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListPackageJobsRequest) SetOrderBy(v string) *ListPackageJobsRequest {
	s.OrderBy = &v
	return s
}

func (s *ListPackageJobsRequest) SetPageSize(v int32) *ListPackageJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListPackageJobsRequest) SetStartOfCreateTime(v string) *ListPackageJobsRequest {
	s.StartOfCreateTime = &v
	return s
}

func (s *ListPackageJobsRequest) SetStatus(v string) *ListPackageJobsRequest {
	s.Status = &v
	return s
}

type ListPackageJobsResponseBody struct {
	// The list of packaging jobs.
	PackageJobList *ListPackageJobsResponseBodyPackageJobList `json:"PackageJobList,omitempty" xml:"PackageJobList,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListPackageJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPackageJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListPackageJobsResponseBody) SetPackageJobList(v *ListPackageJobsResponseBodyPackageJobList) *ListPackageJobsResponseBody {
	s.PackageJobList = v
	return s
}

func (s *ListPackageJobsResponseBody) SetRequestId(v string) *ListPackageJobsResponseBody {
	s.RequestId = &v
	return s
}

type ListPackageJobsResponseBodyPackageJobList struct {
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. The token of the next page is returned after you call this operation for the first time.
	//
	// example:
	//
	// 019daf5780f74831b0e1a767c9f1c178
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// The list of packaging jobs.
	PackageJobs []*ListPackageJobsResponseBodyPackageJobListPackageJobs `json:"PackageJobs,omitempty" xml:"PackageJobs,omitempty" type:"Repeated"`
}

func (s ListPackageJobsResponseBodyPackageJobList) String() string {
	return tea.Prettify(s)
}

func (s ListPackageJobsResponseBodyPackageJobList) GoString() string {
	return s.String()
}

func (s *ListPackageJobsResponseBodyPackageJobList) SetNextPageToken(v string) *ListPackageJobsResponseBodyPackageJobList {
	s.NextPageToken = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobList) SetPackageJobs(v []*ListPackageJobsResponseBodyPackageJobListPackageJobs) *ListPackageJobsResponseBodyPackageJobList {
	s.PackageJobs = v
	return s
}

type ListPackageJobsResponseBodyPackageJobListPackageJobs struct {
	// The error code returned if the job fails.
	//
	// example:
	//
	// InvalidParameter
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The time when the job was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-07-07T14:00:32Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the job was complete. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-07-07T15:00:32Z
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The input of the job.
	Inputs []*ListPackageJobsResponseBodyPackageJobListPackageJobsInputs `json:"Inputs,omitempty" xml:"Inputs,omitempty" type:"Repeated"`
	// The job ID.
	//
	// example:
	//
	// 7b38a5d86f1e47838927b6e7ccb11cbe
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The error message that is returned.
	//
	// example:
	//
	// Resource content bad.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The time when the job was last modified. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-07-07T15:00:32Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The name of the job.
	//
	// example:
	//
	// job-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output of the job.
	Output *ListPackageJobsResponseBodyPackageJobListPackageJobsOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// The ID of the ApsaraVideo Media Processing (MPS) queue that is used to run the job.
	//
	// example:
	//
	// 5b40833e4c3e4d4e95a866abb9a42510
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The priority of the job. Valid values: 1 to 10. The greater the value, the higher the priority. Default value: 6.
	//
	// example:
	//
	// 6
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The state of the job.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The time when the job was submitted. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-07-07T14:00:32Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// The source of the job. Valid values:
	//
	// 	- API
	//
	// 	- WorkFlow
	//
	// 	- Console
	//
	// example:
	//
	// API
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// The user-defined data.
	//
	// example:
	//
	// {"param": "value"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s ListPackageJobsResponseBodyPackageJobListPackageJobs) String() string {
	return tea.Prettify(s)
}

func (s ListPackageJobsResponseBodyPackageJobListPackageJobs) GoString() string {
	return s.String()
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetCode(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.Code = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetCreateTime(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.CreateTime = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetFinishTime(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.FinishTime = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetInputs(v []*ListPackageJobsResponseBodyPackageJobListPackageJobsInputs) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.Inputs = v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetJobId(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.JobId = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetMessage(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.Message = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetModifiedTime(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.ModifiedTime = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetName(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.Name = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetOutput(v *ListPackageJobsResponseBodyPackageJobListPackageJobsOutput) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.Output = v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetPipelineId(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.PipelineId = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetPriority(v int32) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.Priority = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetStatus(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.Status = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetSubmitTime(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.SubmitTime = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetTriggerSource(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.TriggerSource = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetUserData(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.UserData = &v
	return s
}

type ListPackageJobsResponseBodyPackageJobListPackageJobsInputs struct {
	// The information about the input stream file.
	Input *ListPackageJobsResponseBodyPackageJobListPackageJobsInputsInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
}

func (s ListPackageJobsResponseBodyPackageJobListPackageJobsInputs) String() string {
	return tea.Prettify(s)
}

func (s ListPackageJobsResponseBodyPackageJobListPackageJobsInputs) GoString() string {
	return s.String()
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobsInputs) SetInput(v *ListPackageJobsResponseBodyPackageJobListPackageJobsInputsInput) *ListPackageJobsResponseBodyPackageJobListPackageJobsInputs {
	s.Input = v
	return s
}

type ListPackageJobsResponseBodyPackageJobListPackageJobsInputsInput struct {
	// The media object.
	//
	// 	- If Type is set to OSS, the URL of an OSS object is returned. Both the OSS and HTTP protocols are supported.
	//
	// 	- If Type is set to Media, set this parameter to the ID of a media asset.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an Object Storage Service (OSS) object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListPackageJobsResponseBodyPackageJobListPackageJobsInputsInput) String() string {
	return tea.Prettify(s)
}

func (s ListPackageJobsResponseBodyPackageJobListPackageJobsInputsInput) GoString() string {
	return s.String()
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobsInputsInput) SetMedia(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobsInputsInput {
	s.Media = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobsInputsInput) SetType(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobsInputsInput {
	s.Type = &v
	return s
}

type ListPackageJobsResponseBodyPackageJobListPackageJobsOutput struct {
	// The media object.
	//
	// 	- If Type is set to OSS, the URL of an OSS object is returned. Both the OSS and HTTP protocols are supported.
	//
	// 	- If Type is set to Media, set this parameter to the ID of a media asset.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an OSS object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListPackageJobsResponseBodyPackageJobListPackageJobsOutput) String() string {
	return tea.Prettify(s)
}

func (s ListPackageJobsResponseBodyPackageJobListPackageJobsOutput) GoString() string {
	return s.String()
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobsOutput) SetMedia(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobsOutput {
	s.Media = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobsOutput) SetType(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobsOutput {
	s.Type = &v
	return s
}

type ListPackageJobsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPackageJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPackageJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPackageJobsResponse) GoString() string {
	return s.String()
}

func (s *ListPackageJobsResponse) SetHeaders(v map[string]*string) *ListPackageJobsResponse {
	s.Headers = v
	return s
}

func (s *ListPackageJobsResponse) SetStatusCode(v int32) *ListPackageJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPackageJobsResponse) SetBody(v *ListPackageJobsResponseBody) *ListPackageJobsResponse {
	s.Body = v
	return s
}

type ListPipelinesRequest struct {
	// The type of the MPS queue.
	//
	// Valid values:
	//
	// 	- Boost: MPS queue with transcoding speed boosted.
	//
	// 	- Standard: standard MPS queue.
	//
	// 	- NarrowBandHDV2: MPS queue that supports Narrowband HD 2.0.
	//
	// example:
	//
	// Standard
	Speed *string `json:"Speed,omitempty" xml:"Speed,omitempty"`
}

func (s ListPipelinesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPipelinesRequest) GoString() string {
	return s.String()
}

func (s *ListPipelinesRequest) SetSpeed(v string) *ListPipelinesRequest {
	s.Speed = &v
	return s
}

type ListPipelinesResponseBody struct {
	// The queried MPS queues.
	PipelineList []*ListPipelinesResponseBodyPipelineList `json:"PipelineList,omitempty" xml:"PipelineList,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListPipelinesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPipelinesResponseBody) GoString() string {
	return s.String()
}

func (s *ListPipelinesResponseBody) SetPipelineList(v []*ListPipelinesResponseBodyPipelineList) *ListPipelinesResponseBody {
	s.PipelineList = v
	return s
}

func (s *ListPipelinesResponseBody) SetRequestId(v string) *ListPipelinesResponseBody {
	s.RequestId = &v
	return s
}

type ListPipelinesResponseBodyPipelineList struct {
	// The time when the template was created.
	//
	// example:
	//
	// 2022-07-12T16:17:54Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the template was last modified.
	//
	// example:
	//
	// 2022-07-12T16:17:54Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The name of the MPS queue.
	//
	// example:
	//
	// test-pipeline
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the MPS queue.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The priority of the MPS queue.
	//
	// example:
	//
	// 6
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The type of the MPS queue.
	//
	// example:
	//
	// Standard
	Speed *string `json:"Speed,omitempty" xml:"Speed,omitempty"`
	// The state of the MPS queue.
	//
	// Valid values:
	//
	// 	- Active
	//
	// 	- Paused
	//
	// example:
	//
	// Active
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListPipelinesResponseBodyPipelineList) String() string {
	return tea.Prettify(s)
}

func (s ListPipelinesResponseBodyPipelineList) GoString() string {
	return s.String()
}

func (s *ListPipelinesResponseBodyPipelineList) SetCreateTime(v string) *ListPipelinesResponseBodyPipelineList {
	s.CreateTime = &v
	return s
}

func (s *ListPipelinesResponseBodyPipelineList) SetModifiedTime(v string) *ListPipelinesResponseBodyPipelineList {
	s.ModifiedTime = &v
	return s
}

func (s *ListPipelinesResponseBodyPipelineList) SetName(v string) *ListPipelinesResponseBodyPipelineList {
	s.Name = &v
	return s
}

func (s *ListPipelinesResponseBodyPipelineList) SetPipelineId(v string) *ListPipelinesResponseBodyPipelineList {
	s.PipelineId = &v
	return s
}

func (s *ListPipelinesResponseBodyPipelineList) SetPriority(v int32) *ListPipelinesResponseBodyPipelineList {
	s.Priority = &v
	return s
}

func (s *ListPipelinesResponseBodyPipelineList) SetSpeed(v string) *ListPipelinesResponseBodyPipelineList {
	s.Speed = &v
	return s
}

func (s *ListPipelinesResponseBodyPipelineList) SetStatus(v string) *ListPipelinesResponseBodyPipelineList {
	s.Status = &v
	return s
}

type ListPipelinesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPipelinesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPipelinesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPipelinesResponse) GoString() string {
	return s.String()
}

func (s *ListPipelinesResponse) SetHeaders(v map[string]*string) *ListPipelinesResponse {
	s.Headers = v
	return s
}

func (s *ListPipelinesResponse) SetStatusCode(v int32) *ListPipelinesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPipelinesResponse) SetBody(v *ListPipelinesResponseBody) *ListPipelinesResponse {
	s.Body = v
	return s
}

type ListProgramsRequest struct {
	// The name of the channel.
	//
	// This parameter is required.
	//
	// example:
	//
	// MyChannel
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *string `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 20. Valid values: 1 to 100.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The name of the program.
	//
	// example:
	//
	// program1
	ProgramName *string `json:"ProgramName,omitempty" xml:"ProgramName,omitempty"`
	// The sorting order. By default, the query results are sorted by creation time in descending order. Valid values:
	//
	// 	- asc: ascending order.
	//
	// 	- desc: descending order.
	//
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
}

func (s ListProgramsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProgramsRequest) GoString() string {
	return s.String()
}

func (s *ListProgramsRequest) SetChannelName(v string) *ListProgramsRequest {
	s.ChannelName = &v
	return s
}

func (s *ListProgramsRequest) SetPageNo(v string) *ListProgramsRequest {
	s.PageNo = &v
	return s
}

func (s *ListProgramsRequest) SetPageSize(v string) *ListProgramsRequest {
	s.PageSize = &v
	return s
}

func (s *ListProgramsRequest) SetProgramName(v string) *ListProgramsRequest {
	s.ProgramName = &v
	return s
}

func (s *ListProgramsRequest) SetSortBy(v string) *ListProgramsRequest {
	s.SortBy = &v
	return s
}

type ListProgramsResponseBody struct {
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 20. Valid values: 1 to 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The programs.
	Programs []*ChannelAssemblyProgram `json:"Programs,omitempty" xml:"Programs,omitempty" type:"Repeated"`
	// **Request ID**
	//
	// example:
	//
	// xxx-xxxx-xxxxx-xxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of programs returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListProgramsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListProgramsResponseBody) GoString() string {
	return s.String()
}

func (s *ListProgramsResponseBody) SetPageNo(v int32) *ListProgramsResponseBody {
	s.PageNo = &v
	return s
}

func (s *ListProgramsResponseBody) SetPageSize(v int32) *ListProgramsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListProgramsResponseBody) SetPrograms(v []*ChannelAssemblyProgram) *ListProgramsResponseBody {
	s.Programs = v
	return s
}

func (s *ListProgramsResponseBody) SetRequestId(v string) *ListProgramsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListProgramsResponseBody) SetTotalCount(v int32) *ListProgramsResponseBody {
	s.TotalCount = &v
	return s
}

type ListProgramsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListProgramsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListProgramsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListProgramsResponse) GoString() string {
	return s.String()
}

func (s *ListProgramsResponse) SetHeaders(v map[string]*string) *ListProgramsResponse {
	s.Headers = v
	return s
}

func (s *ListProgramsResponse) SetStatusCode(v int32) *ListProgramsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListProgramsResponse) SetBody(v *ListProgramsResponseBody) *ListProgramsResponse {
	s.Body = v
	return s
}

type ListPublicMediaBasicInfosRequest struct {
	// The business type of the media asset. Valid values:
	//
	// 	- sticker
	//
	// 	- bgm
	//
	// 	- bgi
	//
	// example:
	//
	// sticker
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// Specifies whether to return the basic information of the media asset.
	//
	// example:
	//
	// true
	IncludeFileBasicInfo *bool `json:"IncludeFileBasicInfo,omitempty" xml:"IncludeFileBasicInfo,omitempty"`
	// The maximum number of entries to return.
	//
	// Maximum value: 100. Default value: 10.
	//
	// example:
	//
	// 5
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The media tag. All media assets that contain the specified media tag are returned. Valid values:
	//
	// 	- Sticker tags:
	//
	//     	- sticker-atmosphere
	//
	//     	- sticker-bubble
	//
	//     	- sticker-cute
	//
	//     	- sticker-daily
	//
	//     	- sticker-expression
	//
	//     	- sticker-gif
	//
	// 	- Background music (BGM) tags:
	//
	//     	- bgm-romantic
	//
	//     	- bgm-cuisine
	//
	//     	- bgm-chinese-style
	//
	//     	- bgm-upbeat
	//
	//     	- bgm-dynamic
	//
	//     	- bgm-relaxing
	//
	//     	- bgm-quirky
	//
	//     	- bgm-beauty
	//
	// 	- Background image (BGI) tags:
	//
	//     	- bgi-grad
	//
	//     	- bgi-solid
	//
	//     	- bgi-pic
	//
	// example:
	//
	// ticker-atmosphere
	MediaTagId *string `json:"MediaTagId,omitempty" xml:"MediaTagId,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.
	//
	// example:
	//
	// pSa1SQ0wCe5pzVrQ6mWZEw==
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The page number. Default value: 1
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListPublicMediaBasicInfosRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPublicMediaBasicInfosRequest) GoString() string {
	return s.String()
}

func (s *ListPublicMediaBasicInfosRequest) SetBusinessType(v string) *ListPublicMediaBasicInfosRequest {
	s.BusinessType = &v
	return s
}

func (s *ListPublicMediaBasicInfosRequest) SetIncludeFileBasicInfo(v bool) *ListPublicMediaBasicInfosRequest {
	s.IncludeFileBasicInfo = &v
	return s
}

func (s *ListPublicMediaBasicInfosRequest) SetMaxResults(v int32) *ListPublicMediaBasicInfosRequest {
	s.MaxResults = &v
	return s
}

func (s *ListPublicMediaBasicInfosRequest) SetMediaTagId(v string) *ListPublicMediaBasicInfosRequest {
	s.MediaTagId = &v
	return s
}

func (s *ListPublicMediaBasicInfosRequest) SetNextToken(v string) *ListPublicMediaBasicInfosRequest {
	s.NextToken = &v
	return s
}

func (s *ListPublicMediaBasicInfosRequest) SetPageNo(v int32) *ListPublicMediaBasicInfosRequest {
	s.PageNo = &v
	return s
}

func (s *ListPublicMediaBasicInfosRequest) SetPageSize(v int32) *ListPublicMediaBasicInfosRequest {
	s.PageSize = &v
	return s
}

type ListPublicMediaBasicInfosResponseBody struct {
	// The maximum number of entries returned.
	//
	// example:
	//
	// 2
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The media assets that meet the specified conditions.
	MediaInfos []*ListPublicMediaBasicInfosResponseBodyMediaInfos `json:"MediaInfos,omitempty" xml:"MediaInfos,omitempty" type:"Repeated"`
	// A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.
	//
	// example:
	//
	// 8EqYpQbZ6Eh7+Zz8DxVYoQ==
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******B7-7F87-4792-BFE9-63CD21******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of media assets that meet the specified conditions.
	//
	// example:
	//
	// 2
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListPublicMediaBasicInfosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPublicMediaBasicInfosResponseBody) GoString() string {
	return s.String()
}

func (s *ListPublicMediaBasicInfosResponseBody) SetMaxResults(v int32) *ListPublicMediaBasicInfosResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBody) SetMediaInfos(v []*ListPublicMediaBasicInfosResponseBodyMediaInfos) *ListPublicMediaBasicInfosResponseBody {
	s.MediaInfos = v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBody) SetNextToken(v string) *ListPublicMediaBasicInfosResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBody) SetRequestId(v string) *ListPublicMediaBasicInfosResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBody) SetTotalCount(v int64) *ListPublicMediaBasicInfosResponseBody {
	s.TotalCount = &v
	return s
}

type ListPublicMediaBasicInfosResponseBodyMediaInfos struct {
	// The file information of the media asset.
	FileInfoList []*ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoList `json:"FileInfoList,omitempty" xml:"FileInfoList,omitempty" type:"Repeated"`
	// The basic information of the media asset.
	MediaBasicInfo *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// The ID of the media asset.
	//
	// example:
	//
	// ****019b82e24b37a1c2958dec38****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s ListPublicMediaBasicInfosResponseBodyMediaInfos) String() string {
	return tea.Prettify(s)
}

func (s ListPublicMediaBasicInfosResponseBodyMediaInfos) GoString() string {
	return s.String()
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfos) SetFileInfoList(v []*ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoList) *ListPublicMediaBasicInfosResponseBodyMediaInfos {
	s.FileInfoList = v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfos) SetMediaBasicInfo(v *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) *ListPublicMediaBasicInfosResponseBodyMediaInfos {
	s.MediaBasicInfo = v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfos) SetMediaId(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfos {
	s.MediaId = &v
	return s
}

type ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoList struct {
	// The basic information of the file, such as the duration and size.
	FileBasicInfo *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
}

func (s ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoList) GoString() string {
	return s.String()
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoList) SetFileBasicInfo(v *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoList {
	s.FileBasicInfo = v
	return s
}

type ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo struct {
	// The bitrate.
	//
	// example:
	//
	// 270112.12
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The duration.
	//
	// example:
	//
	// 10.040000
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The file name.
	//
	// example:
	//
	// example.mp4
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The file size. Unit: bytes.
	//
	// example:
	//
	// 338990717
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// The file status.
	//
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// The file type.
	//
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// The Object Storage Service (OSS) URL of the file.
	//
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// The container format.
	//
	// example:
	//
	// mov,mp4,m4a,3gp,3g2,mj2
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// The height.
	//
	// example:
	//
	// 1080
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The region in which the file resides.
	//
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The width.
	//
	// example:
	//
	// 1920
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) GoString() string {
	return s.String()
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetBitrate(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetDuration(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileName(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileSize(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileStatus(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileType(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileUrl(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFormatName(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetHeight(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Height = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetRegion(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Region = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetWidth(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Width = &v
	return s
}

type ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo struct {
	// The business type of the media asset.
	//
	// example:
	//
	// general
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// The category of the media asset.
	//
	// example:
	//
	// video
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The thumbnail URL of the media asset.
	//
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// The time when the media asset was created.
	//
	// example:
	//
	// 2021-01-08T16:52:04Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the media asset was deleted.
	//
	// example:
	//
	// 2021-01-08T16:52:04Z
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	// The description of the media asset.
	//
	// example:
	//
	// description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The URL of the media asset in another service.
	//
	// example:
	//
	// https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// ****019b82e24b37a1c2958dec38****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The tags of the media asset.
	//
	// example:
	//
	// sticker-daily
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// The type of the media asset.
	//
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// The time when the media asset was last modified.
	//
	// example:
	//
	// 2021-01-08T16:52:04Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The snapshots of the media asset.
	//
	// example:
	//
	// null
	Snapshots *string `json:"Snapshots,omitempty" xml:"Snapshots,omitempty"`
	// The source of the media asset.
	//
	// example:
	//
	// oss
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The status of the media asset.
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The title of the media asset.
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// The transcoding status of the media asset.
	//
	// example:
	//
	// Init
	TranscodeStatus *string `json:"TranscodeStatus,omitempty" xml:"TranscodeStatus,omitempty"`
	// The user data.
	//
	// example:
	//
	// userData
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetBusinessType(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetCategory(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetCoverURL(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetCreateTime(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetDeletedTime(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetDescription(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetInputURL(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.InputURL = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaId(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaTags(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaType(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetModifiedTime(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetSnapshots(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Snapshots = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetSource(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetStatus(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetTitle(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetTranscodeStatus(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.TranscodeStatus = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetUserData(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.UserData = &v
	return s
}

type ListPublicMediaBasicInfosResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPublicMediaBasicInfosResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPublicMediaBasicInfosResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPublicMediaBasicInfosResponse) GoString() string {
	return s.String()
}

func (s *ListPublicMediaBasicInfosResponse) SetHeaders(v map[string]*string) *ListPublicMediaBasicInfosResponse {
	s.Headers = v
	return s
}

func (s *ListPublicMediaBasicInfosResponse) SetStatusCode(v int32) *ListPublicMediaBasicInfosResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponse) SetBody(v *ListPublicMediaBasicInfosResponseBody) *ListPublicMediaBasicInfosResponse {
	s.Body = v
	return s
}

type ListRecognitionEntitiesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// landmark
	Algorithm *string `json:"Algorithm,omitempty" xml:"Algorithm,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1965304870001
	LibId        *string `json:"LibId,omitempty" xml:"LibId,omitempty"`
	OwnerAccount *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ListRecognitionEntitiesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRecognitionEntitiesRequest) GoString() string {
	return s.String()
}

func (s *ListRecognitionEntitiesRequest) SetAlgorithm(v string) *ListRecognitionEntitiesRequest {
	s.Algorithm = &v
	return s
}

func (s *ListRecognitionEntitiesRequest) SetLibId(v string) *ListRecognitionEntitiesRequest {
	s.LibId = &v
	return s
}

func (s *ListRecognitionEntitiesRequest) SetOwnerAccount(v string) *ListRecognitionEntitiesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ListRecognitionEntitiesRequest) SetOwnerId(v int64) *ListRecognitionEntitiesRequest {
	s.OwnerId = &v
	return s
}

func (s *ListRecognitionEntitiesRequest) SetPageNumber(v int32) *ListRecognitionEntitiesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListRecognitionEntitiesRequest) SetPageSize(v int32) *ListRecognitionEntitiesRequest {
	s.PageSize = &v
	return s
}

func (s *ListRecognitionEntitiesRequest) SetResourceOwnerAccount(v string) *ListRecognitionEntitiesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListRecognitionEntitiesRequest) SetResourceOwnerId(v int64) *ListRecognitionEntitiesRequest {
	s.ResourceOwnerId = &v
	return s
}

type ListRecognitionEntitiesResponseBody struct {
	Entities *ListRecognitionEntitiesResponseBodyEntities `json:"Entities,omitempty" xml:"Entities,omitempty" type:"Struct"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 100
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListRecognitionEntitiesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRecognitionEntitiesResponseBody) GoString() string {
	return s.String()
}

func (s *ListRecognitionEntitiesResponseBody) SetEntities(v *ListRecognitionEntitiesResponseBodyEntities) *ListRecognitionEntitiesResponseBody {
	s.Entities = v
	return s
}

func (s *ListRecognitionEntitiesResponseBody) SetPageNumber(v int32) *ListRecognitionEntitiesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListRecognitionEntitiesResponseBody) SetPageSize(v int32) *ListRecognitionEntitiesResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListRecognitionEntitiesResponseBody) SetRequestId(v string) *ListRecognitionEntitiesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRecognitionEntitiesResponseBody) SetTotalCount(v int64) *ListRecognitionEntitiesResponseBody {
	s.TotalCount = &v
	return s
}

type ListRecognitionEntitiesResponseBodyEntities struct {
	Entity []*ListRecognitionEntitiesResponseBodyEntitiesEntity `json:"Entity,omitempty" xml:"Entity,omitempty" type:"Repeated"`
}

func (s ListRecognitionEntitiesResponseBodyEntities) String() string {
	return tea.Prettify(s)
}

func (s ListRecognitionEntitiesResponseBodyEntities) GoString() string {
	return s.String()
}

func (s *ListRecognitionEntitiesResponseBodyEntities) SetEntity(v []*ListRecognitionEntitiesResponseBodyEntitiesEntity) *ListRecognitionEntitiesResponseBodyEntities {
	s.Entity = v
	return s
}

type ListRecognitionEntitiesResponseBodyEntitiesEntity struct {
	// example:
	//
	// **************544cb84754************
	EntityId *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	// example:
	//
	// {}
	EntityInfo *string `json:"EntityInfo,omitempty" xml:"EntityInfo,omitempty"`
	EntityName *string `json:"EntityName,omitempty" xml:"EntityName,omitempty"`
}

func (s ListRecognitionEntitiesResponseBodyEntitiesEntity) String() string {
	return tea.Prettify(s)
}

func (s ListRecognitionEntitiesResponseBodyEntitiesEntity) GoString() string {
	return s.String()
}

func (s *ListRecognitionEntitiesResponseBodyEntitiesEntity) SetEntityId(v string) *ListRecognitionEntitiesResponseBodyEntitiesEntity {
	s.EntityId = &v
	return s
}

func (s *ListRecognitionEntitiesResponseBodyEntitiesEntity) SetEntityInfo(v string) *ListRecognitionEntitiesResponseBodyEntitiesEntity {
	s.EntityInfo = &v
	return s
}

func (s *ListRecognitionEntitiesResponseBodyEntitiesEntity) SetEntityName(v string) *ListRecognitionEntitiesResponseBodyEntitiesEntity {
	s.EntityName = &v
	return s
}

type ListRecognitionEntitiesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListRecognitionEntitiesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListRecognitionEntitiesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRecognitionEntitiesResponse) GoString() string {
	return s.String()
}

func (s *ListRecognitionEntitiesResponse) SetHeaders(v map[string]*string) *ListRecognitionEntitiesResponse {
	s.Headers = v
	return s
}

func (s *ListRecognitionEntitiesResponse) SetStatusCode(v int32) *ListRecognitionEntitiesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRecognitionEntitiesResponse) SetBody(v *ListRecognitionEntitiesResponseBody) *ListRecognitionEntitiesResponse {
	s.Body = v
	return s
}

type ListRecognitionLibsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// landmark
	Algorithm    *string `json:"Algorithm,omitempty" xml:"Algorithm,omitempty"`
	OwnerAccount *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ListRecognitionLibsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRecognitionLibsRequest) GoString() string {
	return s.String()
}

func (s *ListRecognitionLibsRequest) SetAlgorithm(v string) *ListRecognitionLibsRequest {
	s.Algorithm = &v
	return s
}

func (s *ListRecognitionLibsRequest) SetOwnerAccount(v string) *ListRecognitionLibsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ListRecognitionLibsRequest) SetOwnerId(v int64) *ListRecognitionLibsRequest {
	s.OwnerId = &v
	return s
}

func (s *ListRecognitionLibsRequest) SetPageNumber(v int32) *ListRecognitionLibsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListRecognitionLibsRequest) SetPageSize(v int32) *ListRecognitionLibsRequest {
	s.PageSize = &v
	return s
}

func (s *ListRecognitionLibsRequest) SetResourceOwnerAccount(v string) *ListRecognitionLibsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListRecognitionLibsRequest) SetResourceOwnerId(v int64) *ListRecognitionLibsRequest {
	s.ResourceOwnerId = &v
	return s
}

type ListRecognitionLibsResponseBody struct {
	Libs *ListRecognitionLibsResponseBodyLibs `json:"Libs,omitempty" xml:"Libs,omitempty" type:"Struct"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 180
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListRecognitionLibsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRecognitionLibsResponseBody) GoString() string {
	return s.String()
}

func (s *ListRecognitionLibsResponseBody) SetLibs(v *ListRecognitionLibsResponseBodyLibs) *ListRecognitionLibsResponseBody {
	s.Libs = v
	return s
}

func (s *ListRecognitionLibsResponseBody) SetPageNumber(v int32) *ListRecognitionLibsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListRecognitionLibsResponseBody) SetPageSize(v int32) *ListRecognitionLibsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListRecognitionLibsResponseBody) SetRequestId(v string) *ListRecognitionLibsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRecognitionLibsResponseBody) SetTotalCount(v int64) *ListRecognitionLibsResponseBody {
	s.TotalCount = &v
	return s
}

type ListRecognitionLibsResponseBodyLibs struct {
	Lib []*ListRecognitionLibsResponseBodyLibsLib `json:"Lib,omitempty" xml:"Lib,omitempty" type:"Repeated"`
}

func (s ListRecognitionLibsResponseBodyLibs) String() string {
	return tea.Prettify(s)
}

func (s ListRecognitionLibsResponseBodyLibs) GoString() string {
	return s.String()
}

func (s *ListRecognitionLibsResponseBodyLibs) SetLib(v []*ListRecognitionLibsResponseBodyLibsLib) *ListRecognitionLibsResponseBodyLibs {
	s.Lib = v
	return s
}

type ListRecognitionLibsResponseBodyLibsLib struct {
	LibDescription *string `json:"LibDescription,omitempty" xml:"LibDescription,omitempty"`
	// example:
	//
	// *************24b47865c6**************
	LibId   *string `json:"LibId,omitempty" xml:"LibId,omitempty"`
	LibName *string `json:"LibName,omitempty" xml:"LibName,omitempty"`
}

func (s ListRecognitionLibsResponseBodyLibsLib) String() string {
	return tea.Prettify(s)
}

func (s ListRecognitionLibsResponseBodyLibsLib) GoString() string {
	return s.String()
}

func (s *ListRecognitionLibsResponseBodyLibsLib) SetLibDescription(v string) *ListRecognitionLibsResponseBodyLibsLib {
	s.LibDescription = &v
	return s
}

func (s *ListRecognitionLibsResponseBodyLibsLib) SetLibId(v string) *ListRecognitionLibsResponseBodyLibsLib {
	s.LibId = &v
	return s
}

func (s *ListRecognitionLibsResponseBodyLibsLib) SetLibName(v string) *ListRecognitionLibsResponseBodyLibsLib {
	s.LibName = &v
	return s
}

type ListRecognitionLibsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListRecognitionLibsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListRecognitionLibsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRecognitionLibsResponse) GoString() string {
	return s.String()
}

func (s *ListRecognitionLibsResponse) SetHeaders(v map[string]*string) *ListRecognitionLibsResponse {
	s.Headers = v
	return s
}

func (s *ListRecognitionLibsResponse) SetStatusCode(v int32) *ListRecognitionLibsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRecognitionLibsResponse) SetBody(v *ListRecognitionLibsResponseBody) *ListRecognitionLibsResponse {
	s.Body = v
	return s
}

type ListRecognitionSamplesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// landmark
	Algorithm *string `json:"Algorithm,omitempty" xml:"Algorithm,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// e6b985c05174412dbc77c92496b7373b
	EntityId *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxxxxxxxxx
	LibId        *string `json:"LibId,omitempty" xml:"LibId,omitempty"`
	OwnerAccount *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ListRecognitionSamplesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRecognitionSamplesRequest) GoString() string {
	return s.String()
}

func (s *ListRecognitionSamplesRequest) SetAlgorithm(v string) *ListRecognitionSamplesRequest {
	s.Algorithm = &v
	return s
}

func (s *ListRecognitionSamplesRequest) SetEntityId(v string) *ListRecognitionSamplesRequest {
	s.EntityId = &v
	return s
}

func (s *ListRecognitionSamplesRequest) SetLibId(v string) *ListRecognitionSamplesRequest {
	s.LibId = &v
	return s
}

func (s *ListRecognitionSamplesRequest) SetOwnerAccount(v string) *ListRecognitionSamplesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ListRecognitionSamplesRequest) SetOwnerId(v int64) *ListRecognitionSamplesRequest {
	s.OwnerId = &v
	return s
}

func (s *ListRecognitionSamplesRequest) SetPageNumber(v int32) *ListRecognitionSamplesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListRecognitionSamplesRequest) SetPageSize(v int32) *ListRecognitionSamplesRequest {
	s.PageSize = &v
	return s
}

func (s *ListRecognitionSamplesRequest) SetResourceOwnerAccount(v string) *ListRecognitionSamplesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListRecognitionSamplesRequest) SetResourceOwnerId(v int64) *ListRecognitionSamplesRequest {
	s.ResourceOwnerId = &v
	return s
}

type ListRecognitionSamplesResponseBody struct {
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// xxx-xxxx-xxxxx-xxxx
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Samples   *ListRecognitionSamplesResponseBodySamples `json:"Samples,omitempty" xml:"Samples,omitempty" type:"Struct"`
	// example:
	//
	// 5
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListRecognitionSamplesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRecognitionSamplesResponseBody) GoString() string {
	return s.String()
}

func (s *ListRecognitionSamplesResponseBody) SetPageNumber(v int32) *ListRecognitionSamplesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListRecognitionSamplesResponseBody) SetPageSize(v int32) *ListRecognitionSamplesResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListRecognitionSamplesResponseBody) SetRequestId(v string) *ListRecognitionSamplesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRecognitionSamplesResponseBody) SetSamples(v *ListRecognitionSamplesResponseBodySamples) *ListRecognitionSamplesResponseBody {
	s.Samples = v
	return s
}

func (s *ListRecognitionSamplesResponseBody) SetTotalCount(v int64) *ListRecognitionSamplesResponseBody {
	s.TotalCount = &v
	return s
}

type ListRecognitionSamplesResponseBodySamples struct {
	Sample []*ListRecognitionSamplesResponseBodySamplesSample `json:"Sample,omitempty" xml:"Sample,omitempty" type:"Repeated"`
}

func (s ListRecognitionSamplesResponseBodySamples) String() string {
	return tea.Prettify(s)
}

func (s ListRecognitionSamplesResponseBodySamples) GoString() string {
	return s.String()
}

func (s *ListRecognitionSamplesResponseBodySamples) SetSample(v []*ListRecognitionSamplesResponseBodySamplesSample) *ListRecognitionSamplesResponseBodySamples {
	s.Sample = v
	return s
}

type ListRecognitionSamplesResponseBodySamplesSample struct {
	// example:
	//
	// https://example.com/sample.png
	ImageUrl *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	// example:
	//
	// xxxxxxxxxxxxx
	SampleId *string `json:"SampleId,omitempty" xml:"SampleId,omitempty"`
}

func (s ListRecognitionSamplesResponseBodySamplesSample) String() string {
	return tea.Prettify(s)
}

func (s ListRecognitionSamplesResponseBodySamplesSample) GoString() string {
	return s.String()
}

func (s *ListRecognitionSamplesResponseBodySamplesSample) SetImageUrl(v string) *ListRecognitionSamplesResponseBodySamplesSample {
	s.ImageUrl = &v
	return s
}

func (s *ListRecognitionSamplesResponseBodySamplesSample) SetSampleId(v string) *ListRecognitionSamplesResponseBodySamplesSample {
	s.SampleId = &v
	return s
}

type ListRecognitionSamplesResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListRecognitionSamplesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListRecognitionSamplesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRecognitionSamplesResponse) GoString() string {
	return s.String()
}

func (s *ListRecognitionSamplesResponse) SetHeaders(v map[string]*string) *ListRecognitionSamplesResponse {
	s.Headers = v
	return s
}

func (s *ListRecognitionSamplesResponse) SetStatusCode(v int32) *ListRecognitionSamplesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRecognitionSamplesResponse) SetBody(v *ListRecognitionSamplesResponseBody) *ListRecognitionSamplesResponse {
	s.Body = v
	return s
}

type ListSchedulesRequest struct {
	// The name of the channel.
	//
	// This parameter is required.
	//
	// example:
	//
	// MyChannel
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The time window of the program schedule.
	//
	// This parameter is required.
	//
	// example:
	//
	// 14400
	WindowDurationSeconds *int64 `json:"WindowDurationSeconds,omitempty" xml:"WindowDurationSeconds,omitempty"`
}

func (s ListSchedulesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSchedulesRequest) GoString() string {
	return s.String()
}

func (s *ListSchedulesRequest) SetChannelName(v string) *ListSchedulesRequest {
	s.ChannelName = &v
	return s
}

func (s *ListSchedulesRequest) SetPageNo(v int32) *ListSchedulesRequest {
	s.PageNo = &v
	return s
}

func (s *ListSchedulesRequest) SetPageSize(v int32) *ListSchedulesRequest {
	s.PageSize = &v
	return s
}

func (s *ListSchedulesRequest) SetWindowDurationSeconds(v int64) *ListSchedulesRequest {
	s.WindowDurationSeconds = &v
	return s
}

type ListSchedulesResponseBody struct {
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 20. Valid values: 1 to 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The program schedule.
	Programs []*ChannelAssemblyScheduleData `json:"Programs,omitempty" xml:"Programs,omitempty" type:"Repeated"`
	// **Request ID**
	//
	// example:
	//
	// xxx-xxxx-xxxxx-xxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 5
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListSchedulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSchedulesResponseBody) GoString() string {
	return s.String()
}

func (s *ListSchedulesResponseBody) SetPageNo(v int32) *ListSchedulesResponseBody {
	s.PageNo = &v
	return s
}

func (s *ListSchedulesResponseBody) SetPageSize(v int32) *ListSchedulesResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListSchedulesResponseBody) SetPrograms(v []*ChannelAssemblyScheduleData) *ListSchedulesResponseBody {
	s.Programs = v
	return s
}

func (s *ListSchedulesResponseBody) SetRequestId(v string) *ListSchedulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSchedulesResponseBody) SetTotalCount(v int32) *ListSchedulesResponseBody {
	s.TotalCount = &v
	return s
}

type ListSchedulesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSchedulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSchedulesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSchedulesResponse) GoString() string {
	return s.String()
}

func (s *ListSchedulesResponse) SetHeaders(v map[string]*string) *ListSchedulesResponse {
	s.Headers = v
	return s
}

func (s *ListSchedulesResponse) SetStatusCode(v int32) *ListSchedulesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSchedulesResponse) SetBody(v *ListSchedulesResponseBody) *ListSchedulesResponse {
	s.Body = v
	return s
}

type ListSearchLibRequest struct {
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 50.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListSearchLibRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSearchLibRequest) GoString() string {
	return s.String()
}

func (s *ListSearchLibRequest) SetPageNo(v int32) *ListSearchLibRequest {
	s.PageNo = &v
	return s
}

func (s *ListSearchLibRequest) SetPageSize(v int32) *ListSearchLibRequest {
	s.PageSize = &v
	return s
}

type ListSearchLibResponseBody struct {
	// The status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Information about search libraries.
	SearchLibInfoList []*ListSearchLibResponseBodySearchLibInfoList `json:"SearchLibInfoList,omitempty" xml:"SearchLibInfoList,omitempty" type:"Repeated"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 8
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListSearchLibResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSearchLibResponseBody) GoString() string {
	return s.String()
}

func (s *ListSearchLibResponseBody) SetCode(v string) *ListSearchLibResponseBody {
	s.Code = &v
	return s
}

func (s *ListSearchLibResponseBody) SetRequestId(v string) *ListSearchLibResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSearchLibResponseBody) SetSearchLibInfoList(v []*ListSearchLibResponseBodySearchLibInfoList) *ListSearchLibResponseBody {
	s.SearchLibInfoList = v
	return s
}

func (s *ListSearchLibResponseBody) SetSuccess(v string) *ListSearchLibResponseBody {
	s.Success = &v
	return s
}

func (s *ListSearchLibResponseBody) SetTotal(v int64) *ListSearchLibResponseBody {
	s.Total = &v
	return s
}

type ListSearchLibResponseBodySearchLibInfoList struct {
	IndexInfo []*ListSearchLibResponseBodySearchLibInfoListIndexInfo `json:"IndexInfo,omitempty" xml:"IndexInfo,omitempty" type:"Repeated"`
	// The search library.
	//
	// example:
	//
	// faceSearchLib
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
	// The status of the search library.
	//
	// 	- normal
	//
	// 	- deleting
	//
	// 	- deleteFail
	//
	// example:
	//
	// normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListSearchLibResponseBodySearchLibInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListSearchLibResponseBodySearchLibInfoList) GoString() string {
	return s.String()
}

func (s *ListSearchLibResponseBodySearchLibInfoList) SetIndexInfo(v []*ListSearchLibResponseBodySearchLibInfoListIndexInfo) *ListSearchLibResponseBodySearchLibInfoList {
	s.IndexInfo = v
	return s
}

func (s *ListSearchLibResponseBodySearchLibInfoList) SetSearchLibName(v string) *ListSearchLibResponseBodySearchLibInfoList {
	s.SearchLibName = &v
	return s
}

func (s *ListSearchLibResponseBodySearchLibInfoList) SetStatus(v string) *ListSearchLibResponseBodySearchLibInfoList {
	s.Status = &v
	return s
}

type ListSearchLibResponseBodySearchLibInfoListIndexInfo struct {
	// example:
	//
	// Normal
	IndexReadiness *string `json:"IndexReadiness,omitempty" xml:"IndexReadiness,omitempty"`
	// example:
	//
	// Active
	IndexStatus *string `json:"IndexStatus,omitempty" xml:"IndexStatus,omitempty"`
	// example:
	//
	// face
	IndexType *string `json:"IndexType,omitempty" xml:"IndexType,omitempty"`
}

func (s ListSearchLibResponseBodySearchLibInfoListIndexInfo) String() string {
	return tea.Prettify(s)
}

func (s ListSearchLibResponseBodySearchLibInfoListIndexInfo) GoString() string {
	return s.String()
}

func (s *ListSearchLibResponseBodySearchLibInfoListIndexInfo) SetIndexReadiness(v string) *ListSearchLibResponseBodySearchLibInfoListIndexInfo {
	s.IndexReadiness = &v
	return s
}

func (s *ListSearchLibResponseBodySearchLibInfoListIndexInfo) SetIndexStatus(v string) *ListSearchLibResponseBodySearchLibInfoListIndexInfo {
	s.IndexStatus = &v
	return s
}

func (s *ListSearchLibResponseBodySearchLibInfoListIndexInfo) SetIndexType(v string) *ListSearchLibResponseBodySearchLibInfoListIndexInfo {
	s.IndexType = &v
	return s
}

type ListSearchLibResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSearchLibResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSearchLibResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSearchLibResponse) GoString() string {
	return s.String()
}

func (s *ListSearchLibResponse) SetHeaders(v map[string]*string) *ListSearchLibResponse {
	s.Headers = v
	return s
}

func (s *ListSearchLibResponse) SetStatusCode(v int32) *ListSearchLibResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSearchLibResponse) SetBody(v *ListSearchLibResponseBody) *ListSearchLibResponse {
	s.Body = v
	return s
}

type ListSmartJobsRequest struct {
	// The job state.
	//
	// Valid values:
	//
	// 	- Finished: The job is complete.
	//
	// 	- Failed: The job failed.
	//
	// 	- Executing: The job is in progress.
	//
	// 	- Created: The job is created.
	//
	// example:
	//
	// Finished
	JobState *string `json:"JobState,omitempty" xml:"JobState,omitempty"`
	// The job type.
	//
	// Valid values:
	//
	// 	- ASR: automatic speech recognition(job) job.
	//
	// 	- DynamicChart: dynamic chart job.
	//
	// 	- VideoTranslation: video translation job.
	//
	// 	- TextToSpeech: intelligent audio production job.
	//
	// example:
	//
	// ASR
	JobType *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	// The maximum number of entries to return.
	//
	// Default value: 10. Valid values: 1 to 100.
	//
	// example:
	//
	// 10
	MaxResults *int64 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results.
	//
	// example:
	//
	// ****73f33c91-d59383e8280b****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10. Valid values: 1 to 100.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The sorting parameter. By default, the query results are sorted by creation time in descending order.
	//
	// Valid values:
	//
	// 	- CreationTime:Asc: sorted by creation time in ascending order.
	//
	// 	- CreationTime:Desc: sorted by creation time in descending order.
	//
	// example:
	//
	// CreationTime:Desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
}

func (s ListSmartJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSmartJobsRequest) GoString() string {
	return s.String()
}

func (s *ListSmartJobsRequest) SetJobState(v string) *ListSmartJobsRequest {
	s.JobState = &v
	return s
}

func (s *ListSmartJobsRequest) SetJobType(v string) *ListSmartJobsRequest {
	s.JobType = &v
	return s
}

func (s *ListSmartJobsRequest) SetMaxResults(v int64) *ListSmartJobsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListSmartJobsRequest) SetNextToken(v string) *ListSmartJobsRequest {
	s.NextToken = &v
	return s
}

func (s *ListSmartJobsRequest) SetPageNo(v int64) *ListSmartJobsRequest {
	s.PageNo = &v
	return s
}

func (s *ListSmartJobsRequest) SetPageSize(v int64) *ListSmartJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListSmartJobsRequest) SetSortBy(v string) *ListSmartJobsRequest {
	s.SortBy = &v
	return s
}

type ListSmartJobsResponseBody struct {
	// The maximum number of entries returned on a single page. The value is set to the maximum number of entries returned on each page except for the last page. Valid example: 10,10,5. Invalid example: 10,5,10.
	//
	// example:
	//
	// 10
	MaxResults *string `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.
	//
	// example:
	//
	// CBB6BC61D08
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ****9262E3DA-07FA-4862-FCBB6BC61D08*****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The queried intelligent jobs.
	SmartJobList []*ListSmartJobsResponseBodySmartJobList `json:"SmartJobList,omitempty" xml:"SmartJobList,omitempty" type:"Repeated"`
	// Optional. The total number of entries returned. By default, this parameter is not returned.
	//
	// example:
	//
	// 110
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListSmartJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSmartJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListSmartJobsResponseBody) SetMaxResults(v string) *ListSmartJobsResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListSmartJobsResponseBody) SetNextToken(v string) *ListSmartJobsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListSmartJobsResponseBody) SetRequestId(v string) *ListSmartJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSmartJobsResponseBody) SetSmartJobList(v []*ListSmartJobsResponseBodySmartJobList) *ListSmartJobsResponseBody {
	s.SmartJobList = v
	return s
}

func (s *ListSmartJobsResponseBody) SetTotalCount(v string) *ListSmartJobsResponseBody {
	s.TotalCount = &v
	return s
}

type ListSmartJobsResponseBodySmartJobList struct {
	// The time when the job was created.
	//
	// example:
	//
	// 2020-12-26T04:11:10Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The job description.
	//
	// example:
	//
	// 测试描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The editing configurations.
	//
	// example:
	//
	// {"AudioConfig":{},"InputConfig":""}
	EditingConfig *string `json:"EditingConfig,omitempty" xml:"EditingConfig,omitempty"`
	// The input configurations.
	InputConfig *ListSmartJobsResponseBodySmartJobListInputConfig `json:"InputConfig,omitempty" xml:"InputConfig,omitempty" type:"Struct"`
	// The job ID.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The job state.
	//
	// Valid values:
	//
	// 	- Finished: The job is complete.
	//
	// 	- Failed: The job failed.
	//
	// 	- Executing: The job is in progress.
	//
	// 	- Created: The job is created.
	//
	// example:
	//
	// Finished
	JobState *string `json:"JobState,omitempty" xml:"JobState,omitempty"`
	// The job type.
	//
	// Valid values:
	//
	// 	- ASR: ASR job.
	//
	// 	- DynamicChart: dynamic chart job.
	//
	// 	- TextToSpeech: intelligent audio production job.
	//
	// example:
	//
	// ASR
	JobType *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	// The time when the job was last modified.
	//
	// example:
	//
	// 2020-12-26T04:11:10Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The output configurations.
	OutputConfig *ListSmartJobsResponseBodySmartJobListOutputConfig `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty" type:"Struct"`
	// The job title.
	//
	// example:
	//
	// 测试标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// The user-defined data.
	//
	// example:
	//
	// {"user":"data"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	// The user ID.
	//
	// example:
	//
	// 1084506228******
	UserId *int64 `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListSmartJobsResponseBodySmartJobList) String() string {
	return tea.Prettify(s)
}

func (s ListSmartJobsResponseBodySmartJobList) GoString() string {
	return s.String()
}

func (s *ListSmartJobsResponseBodySmartJobList) SetCreateTime(v string) *ListSmartJobsResponseBodySmartJobList {
	s.CreateTime = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetDescription(v string) *ListSmartJobsResponseBodySmartJobList {
	s.Description = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetEditingConfig(v string) *ListSmartJobsResponseBodySmartJobList {
	s.EditingConfig = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetInputConfig(v *ListSmartJobsResponseBodySmartJobListInputConfig) *ListSmartJobsResponseBodySmartJobList {
	s.InputConfig = v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetJobId(v string) *ListSmartJobsResponseBodySmartJobList {
	s.JobId = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetJobState(v string) *ListSmartJobsResponseBodySmartJobList {
	s.JobState = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetJobType(v string) *ListSmartJobsResponseBodySmartJobList {
	s.JobType = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetModifiedTime(v string) *ListSmartJobsResponseBodySmartJobList {
	s.ModifiedTime = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetOutputConfig(v *ListSmartJobsResponseBodySmartJobListOutputConfig) *ListSmartJobsResponseBodySmartJobList {
	s.OutputConfig = v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetTitle(v string) *ListSmartJobsResponseBodySmartJobList {
	s.Title = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetUserData(v string) *ListSmartJobsResponseBodySmartJobList {
	s.UserData = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetUserId(v int64) *ListSmartJobsResponseBodySmartJobList {
	s.UserId = &v
	return s
}

type ListSmartJobsResponseBodySmartJobListInputConfig struct {
	// The information about the input file.
	//
	// example:
	//
	// oss://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4
	InputFile *string `json:"InputFile,omitempty" xml:"InputFile,omitempty"`
	// The keyword information.
	//
	// example:
	//
	// 测试关键词
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
}

func (s ListSmartJobsResponseBodySmartJobListInputConfig) String() string {
	return tea.Prettify(s)
}

func (s ListSmartJobsResponseBodySmartJobListInputConfig) GoString() string {
	return s.String()
}

func (s *ListSmartJobsResponseBodySmartJobListInputConfig) SetInputFile(v string) *ListSmartJobsResponseBodySmartJobListInputConfig {
	s.InputFile = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobListInputConfig) SetKeyword(v string) *ListSmartJobsResponseBodySmartJobListInputConfig {
	s.Keyword = &v
	return s
}

type ListSmartJobsResponseBodySmartJobListOutputConfig struct {
	// The Object Storage Service (OSS) bucket.
	//
	// example:
	//
	// test-bucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// The OSS object.
	//
	// example:
	//
	// test-object
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s ListSmartJobsResponseBodySmartJobListOutputConfig) String() string {
	return tea.Prettify(s)
}

func (s ListSmartJobsResponseBodySmartJobListOutputConfig) GoString() string {
	return s.String()
}

func (s *ListSmartJobsResponseBodySmartJobListOutputConfig) SetBucket(v string) *ListSmartJobsResponseBodySmartJobListOutputConfig {
	s.Bucket = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobListOutputConfig) SetObject(v string) *ListSmartJobsResponseBodySmartJobListOutputConfig {
	s.Object = &v
	return s
}

type ListSmartJobsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSmartJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSmartJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSmartJobsResponse) GoString() string {
	return s.String()
}

func (s *ListSmartJobsResponse) SetHeaders(v map[string]*string) *ListSmartJobsResponse {
	s.Headers = v
	return s
}

func (s *ListSmartJobsResponse) SetStatusCode(v int32) *ListSmartJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSmartJobsResponse) SetBody(v *ListSmartJobsResponseBody) *ListSmartJobsResponse {
	s.Body = v
	return s
}

type ListSmartSysAvatarModelsRequest struct {
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10. Valid values: 1 to 100.
	//
	// example:
	//
	// 10
	PageSize   *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SdkVersion *string `json:"SdkVersion,omitempty" xml:"SdkVersion,omitempty"`
}

func (s ListSmartSysAvatarModelsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSmartSysAvatarModelsRequest) GoString() string {
	return s.String()
}

func (s *ListSmartSysAvatarModelsRequest) SetPageNo(v int64) *ListSmartSysAvatarModelsRequest {
	s.PageNo = &v
	return s
}

func (s *ListSmartSysAvatarModelsRequest) SetPageSize(v int64) *ListSmartSysAvatarModelsRequest {
	s.PageSize = &v
	return s
}

func (s *ListSmartSysAvatarModelsRequest) SetSdkVersion(v string) *ListSmartSysAvatarModelsRequest {
	s.SdkVersion = &v
	return s
}

type ListSmartSysAvatarModelsResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ****63E8B7C7-4812-46AD-0FA56029AC86****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The queried digital humans.
	SmartSysAvatarModelList []*ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList `json:"SmartSysAvatarModelList,omitempty" xml:"SmartSysAvatarModelList,omitempty" type:"Repeated"`
	// The total number of system digital human images returned.
	//
	// example:
	//
	// 4
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListSmartSysAvatarModelsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSmartSysAvatarModelsResponseBody) GoString() string {
	return s.String()
}

func (s *ListSmartSysAvatarModelsResponseBody) SetRequestId(v string) *ListSmartSysAvatarModelsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSmartSysAvatarModelsResponseBody) SetSmartSysAvatarModelList(v []*ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList) *ListSmartSysAvatarModelsResponseBody {
	s.SmartSysAvatarModelList = v
	return s
}

func (s *ListSmartSysAvatarModelsResponseBody) SetTotalCount(v int32) *ListSmartSysAvatarModelsResponseBody {
	s.TotalCount = &v
	return s
}

type ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList struct {
	// The ID of the digital human. The ID is required to submit a separate digital human rendering job or use the digital human image in an intelligent timeline.
	//
	// example:
	//
	// yunqiao
	AvatarId *string `json:"AvatarId,omitempty" xml:"AvatarId,omitempty"`
	// The name of the digital human.
	AvatarName *string `json:"AvatarName,omitempty" xml:"AvatarName,omitempty"`
	// The video bitrate.
	//
	// example:
	//
	// 4000
	Bitrate *int32 `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The sample thumbnail URL of the digital human.
	//
	// example:
	//
	// http://ice-pub-media.myalicdn.com/smart/avatarModel/coverDemo/yunqiao.mp4
	CoverUrl *string `json:"CoverUrl,omitempty" xml:"CoverUrl,omitempty"`
	// The video height.
	//
	// example:
	//
	// 1920
	Height *int32 `json:"Height,omitempty" xml:"Height,omitempty"`
	// Indicates whether portrait mask rendering is supported.
	//
	// example:
	//
	// false
	OutputMask *bool `json:"OutputMask,omitempty" xml:"OutputMask,omitempty"`
	// The sample video URL of the digital human.
	//
	// example:
	//
	// http://ice-pub-media.myalicdn.com/smart/avatarModel/videoDemo/yunqiao.mp4
	VideoUrl *string `json:"VideoUrl,omitempty" xml:"VideoUrl,omitempty"`
	// The video width.
	//
	// example:
	//
	// 1080
	Width *int32 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList) String() string {
	return tea.Prettify(s)
}

func (s ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList) GoString() string {
	return s.String()
}

func (s *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList) SetAvatarId(v string) *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList {
	s.AvatarId = &v
	return s
}

func (s *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList) SetAvatarName(v string) *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList {
	s.AvatarName = &v
	return s
}

func (s *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList) SetBitrate(v int32) *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList {
	s.Bitrate = &v
	return s
}

func (s *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList) SetCoverUrl(v string) *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList {
	s.CoverUrl = &v
	return s
}

func (s *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList) SetHeight(v int32) *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList {
	s.Height = &v
	return s
}

func (s *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList) SetOutputMask(v bool) *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList {
	s.OutputMask = &v
	return s
}

func (s *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList) SetVideoUrl(v string) *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList {
	s.VideoUrl = &v
	return s
}

func (s *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList) SetWidth(v int32) *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList {
	s.Width = &v
	return s
}

type ListSmartSysAvatarModelsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSmartSysAvatarModelsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSmartSysAvatarModelsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSmartSysAvatarModelsResponse) GoString() string {
	return s.String()
}

func (s *ListSmartSysAvatarModelsResponse) SetHeaders(v map[string]*string) *ListSmartSysAvatarModelsResponse {
	s.Headers = v
	return s
}

func (s *ListSmartSysAvatarModelsResponse) SetStatusCode(v int32) *ListSmartSysAvatarModelsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSmartSysAvatarModelsResponse) SetBody(v *ListSmartSysAvatarModelsResponseBody) *ListSmartSysAvatarModelsResponse {
	s.Body = v
	return s
}

type ListSmartVoiceGroupsRequest struct {
	VoiceType *string `json:"VoiceType,omitempty" xml:"VoiceType,omitempty"`
}

func (s ListSmartVoiceGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSmartVoiceGroupsRequest) GoString() string {
	return s.String()
}

func (s *ListSmartVoiceGroupsRequest) SetVoiceType(v string) *ListSmartVoiceGroupsRequest {
	s.VoiceType = &v
	return s
}

type ListSmartVoiceGroupsResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 627B30EB-1D0A-5C6D-8467-431626E0FA10
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The queried speaker groups.
	VoiceGroups []*ListSmartVoiceGroupsResponseBodyVoiceGroups `json:"VoiceGroups,omitempty" xml:"VoiceGroups,omitempty" type:"Repeated"`
}

func (s ListSmartVoiceGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSmartVoiceGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListSmartVoiceGroupsResponseBody) SetRequestId(v string) *ListSmartVoiceGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSmartVoiceGroupsResponseBody) SetVoiceGroups(v []*ListSmartVoiceGroupsResponseBodyVoiceGroups) *ListSmartVoiceGroupsResponseBody {
	s.VoiceGroups = v
	return s
}

type ListSmartVoiceGroupsResponseBodyVoiceGroups struct {
	// The name of the speaker group.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The speakers.
	VoiceList []*ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList `json:"VoiceList,omitempty" xml:"VoiceList,omitempty" type:"Repeated"`
}

func (s ListSmartVoiceGroupsResponseBodyVoiceGroups) String() string {
	return tea.Prettify(s)
}

func (s ListSmartVoiceGroupsResponseBodyVoiceGroups) GoString() string {
	return s.String()
}

func (s *ListSmartVoiceGroupsResponseBodyVoiceGroups) SetType(v string) *ListSmartVoiceGroupsResponseBodyVoiceGroups {
	s.Type = &v
	return s
}

func (s *ListSmartVoiceGroupsResponseBodyVoiceGroups) SetVoiceList(v []*ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList) *ListSmartVoiceGroupsResponseBodyVoiceGroups {
	s.VoiceList = v
	return s
}

type ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList struct {
	// The speaker description.
	Desc *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	// The speaker name.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The remarks of the speaker.
	Remark            *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	SupportSampleRate *string `json:"SupportSampleRate,omitempty" xml:"SupportSampleRate,omitempty"`
	// The tag of the speaker type.
	Tag *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	// The speaker ID.
	//
	// example:
	//
	// zhitian
	Voice *string `json:"Voice,omitempty" xml:"Voice,omitempty"`
	// The speaker type.
	//
	// Valid values:
	//
	// 	- Male
	//
	// 	- Female
	//
	// 	- Boy
	//
	// 	- Girl
	//
	// example:
	//
	// Female
	VoiceType *string `json:"VoiceType,omitempty" xml:"VoiceType,omitempty"`
	// The URL of the sample audio file.
	//
	// example:
	//
	// https://***.com/zhiqing.mp3
	VoiceUrl *string `json:"VoiceUrl,omitempty" xml:"VoiceUrl,omitempty"`
}

func (s ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList) String() string {
	return tea.Prettify(s)
}

func (s ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList) GoString() string {
	return s.String()
}

func (s *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList) SetDesc(v string) *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList {
	s.Desc = &v
	return s
}

func (s *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList) SetName(v string) *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList {
	s.Name = &v
	return s
}

func (s *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList) SetRemark(v string) *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList {
	s.Remark = &v
	return s
}

func (s *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList) SetSupportSampleRate(v string) *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList {
	s.SupportSampleRate = &v
	return s
}

func (s *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList) SetTag(v string) *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList {
	s.Tag = &v
	return s
}

func (s *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList) SetVoice(v string) *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList {
	s.Voice = &v
	return s
}

func (s *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList) SetVoiceType(v string) *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList {
	s.VoiceType = &v
	return s
}

func (s *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList) SetVoiceUrl(v string) *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList {
	s.VoiceUrl = &v
	return s
}

type ListSmartVoiceGroupsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSmartVoiceGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSmartVoiceGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSmartVoiceGroupsResponse) GoString() string {
	return s.String()
}

func (s *ListSmartVoiceGroupsResponse) SetHeaders(v map[string]*string) *ListSmartVoiceGroupsResponse {
	s.Headers = v
	return s
}

func (s *ListSmartVoiceGroupsResponse) SetStatusCode(v int32) *ListSmartVoiceGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSmartVoiceGroupsResponse) SetBody(v *ListSmartVoiceGroupsResponseBody) *ListSmartVoiceGroupsResponse {
	s.Body = v
	return s
}

type ListSnapshotJobsRequest struct {
	// The end of the time range during which the jobs to be queried were created.
	//
	// example:
	//
	// 2022-07-14T00:00:00Z
	EndOfCreateTime *string `json:"EndOfCreateTime,omitempty" xml:"EndOfCreateTime,omitempty"`
	// The job ID.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// The order that you use to sort the query results.
	//
	// 1.  CreateTimeDesc
	//
	// 2.  CreateTimeAsc
	//
	// Valid values:
	//
	// 	- CreateTimeDesc: sorts the jobs by creation time in descending order
	//
	// 	- CreateTimeAsc: sorts the jobs by creation time in ascending order.
	//
	// example:
	//
	// CreateTimeDesc
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The number of entries per page. Default value: 20. Maximum value: 100.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range during which the jobs to be queried were created.
	//
	// example:
	//
	// 2022-07-12T00:00:00Z
	StartOfCreateTime *string `json:"StartOfCreateTime,omitempty" xml:"StartOfCreateTime,omitempty"`
	// The state of the job.
	//
	// Valid values:
	//
	// 	- Init: The job is submitted.
	//
	// 	- Success: The job is successful.
	//
	// 	- Fail: The job failed.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListSnapshotJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSnapshotJobsRequest) GoString() string {
	return s.String()
}

func (s *ListSnapshotJobsRequest) SetEndOfCreateTime(v string) *ListSnapshotJobsRequest {
	s.EndOfCreateTime = &v
	return s
}

func (s *ListSnapshotJobsRequest) SetJobId(v string) *ListSnapshotJobsRequest {
	s.JobId = &v
	return s
}

func (s *ListSnapshotJobsRequest) SetNextPageToken(v string) *ListSnapshotJobsRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListSnapshotJobsRequest) SetOrderBy(v string) *ListSnapshotJobsRequest {
	s.OrderBy = &v
	return s
}

func (s *ListSnapshotJobsRequest) SetPageSize(v int32) *ListSnapshotJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListSnapshotJobsRequest) SetStartOfCreateTime(v string) *ListSnapshotJobsRequest {
	s.StartOfCreateTime = &v
	return s
}

func (s *ListSnapshotJobsRequest) SetStatus(v string) *ListSnapshotJobsRequest {
	s.Status = &v
	return s
}

type ListSnapshotJobsResponseBody struct {
	// The list of jobs.
	Jobs []*ListSnapshotJobsResponseBodyJobs `json:"Jobs,omitempty" xml:"Jobs,omitempty" type:"Repeated"`
	// The pagination token that is used in the next request to retrieve a new page of results.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListSnapshotJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSnapshotJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListSnapshotJobsResponseBody) SetJobs(v []*ListSnapshotJobsResponseBodyJobs) *ListSnapshotJobsResponseBody {
	s.Jobs = v
	return s
}

func (s *ListSnapshotJobsResponseBody) SetNextPageToken(v string) *ListSnapshotJobsResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *ListSnapshotJobsResponseBody) SetRequestId(v string) *ListSnapshotJobsResponseBody {
	s.RequestId = &v
	return s
}

type ListSnapshotJobsResponseBodyJobs struct {
	// Indicates whether the snapshots were captured in asynchronous mode.
	//
	// example:
	//
	// true
	Async *bool `json:"Async,omitempty" xml:"Async,omitempty"`
	// The number of snapshots.
	//
	// example:
	//
	// 10
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The time when the job was created.
	//
	// example:
	//
	// 2022-07-12T16:17:54Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the job was complete.
	//
	// example:
	//
	// 2022-07-12T16:30:54Z
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The input of the job.
	Input *ListSnapshotJobsResponseBodyJobsInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// The job ID.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The time when the job was last modified.
	//
	// example:
	//
	// 2022-07-12T16:30:54Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The name of the job.
	//
	// example:
	//
	// SampleJob
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output of the job.
	Output *ListSnapshotJobsResponseBodyJobsOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// The ID of the MPS queue to which the job was submitted.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The state of the job.
	//
	// 	- **Success**: The job is successful.
	//
	// 	- **Fail**: The job failed.
	//
	// 	- **Init**: The job is submitted.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The time when the job was submitted.
	//
	// example:
	//
	// 2022-07-12T16:17:54Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// The template ID.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The request trigger source.
	//
	// Valid values:
	//
	// 	- Console
	//
	// 	- Workflow
	//
	// 	- API
	//
	// example:
	//
	// API
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// The type of the job.
	//
	// Valid values:
	//
	// 	- WebVtt
	//
	// 	- Sprite
	//
	// 	- Normal
	//
	// example:
	//
	// Sprite
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListSnapshotJobsResponseBodyJobs) String() string {
	return tea.Prettify(s)
}

func (s ListSnapshotJobsResponseBodyJobs) GoString() string {
	return s.String()
}

func (s *ListSnapshotJobsResponseBodyJobs) SetAsync(v bool) *ListSnapshotJobsResponseBodyJobs {
	s.Async = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetCount(v int32) *ListSnapshotJobsResponseBodyJobs {
	s.Count = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetCreateTime(v string) *ListSnapshotJobsResponseBodyJobs {
	s.CreateTime = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetFinishTime(v string) *ListSnapshotJobsResponseBodyJobs {
	s.FinishTime = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetInput(v *ListSnapshotJobsResponseBodyJobsInput) *ListSnapshotJobsResponseBodyJobs {
	s.Input = v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetJobId(v string) *ListSnapshotJobsResponseBodyJobs {
	s.JobId = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetModifiedTime(v string) *ListSnapshotJobsResponseBodyJobs {
	s.ModifiedTime = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetName(v string) *ListSnapshotJobsResponseBodyJobs {
	s.Name = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetOutput(v *ListSnapshotJobsResponseBodyJobsOutput) *ListSnapshotJobsResponseBodyJobs {
	s.Output = v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetPipelineId(v string) *ListSnapshotJobsResponseBodyJobs {
	s.PipelineId = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetStatus(v string) *ListSnapshotJobsResponseBodyJobs {
	s.Status = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetSubmitTime(v string) *ListSnapshotJobsResponseBodyJobs {
	s.SubmitTime = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetTemplateId(v string) *ListSnapshotJobsResponseBodyJobs {
	s.TemplateId = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetTriggerSource(v string) *ListSnapshotJobsResponseBodyJobs {
	s.TriggerSource = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetType(v string) *ListSnapshotJobsResponseBodyJobs {
	s.Type = &v
	return s
}

type ListSnapshotJobsResponseBodyJobsInput struct {
	// The input file. If Type is set to OSS, the URL of an OSS object is returned. If Type is set to Media, the ID of a media asset is returned. The URL of an OSS object can be in one of the following formats: 1. OSS://bucket/object 2. http(s)://bucket.oss-[RegionId].aliyuncs.com/object In the URL, bucket specifies an OSS bucket that resides in the same region as the job, and object specifies the object URL in OSS.
	//
	// example:
	//
	// oss://bucket/object.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the input file. Valid values:
	//
	// 1.  OSS: an Object Storage Service (OSS) object.
	//
	// 2.  Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListSnapshotJobsResponseBodyJobsInput) String() string {
	return tea.Prettify(s)
}

func (s ListSnapshotJobsResponseBodyJobsInput) GoString() string {
	return s.String()
}

func (s *ListSnapshotJobsResponseBodyJobsInput) SetMedia(v string) *ListSnapshotJobsResponseBodyJobsInput {
	s.Media = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobsInput) SetType(v string) *ListSnapshotJobsResponseBodyJobsInput {
	s.Type = &v
	return s
}

type ListSnapshotJobsResponseBodyJobsOutput struct {
	// The output file. If Type is set to OSS, the URL of an OSS object is returned. If Type is set to Media, the ID of a media asset is returned. The URL of an OSS object can be in one of the following formats:
	//
	// 1.  OSS://bucket/object
	//
	// 2.  http(s)://bucket.oss-[RegionId].aliyuncs.com/object
	//
	// In the URL, bucket specifies an OSS bucket that resides in the same region as the job, and object specifies the object URL in OSS. If multiple static snapshots were captured, the object must contain the "{Count}" placeholder. In the case of a sprite, the object must contain the "{TileCount}" placeholder. The suffix of the WebVTT snapshot objects must be ".vtt".
	//
	// example:
	//
	// http://test-bucket.oss-cn-shanghai.aliyuncs.com/output-{Count}.jpg
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the output file. Valid values:
	//
	// 1.  OSS: an OSS object.
	//
	// 2.  Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListSnapshotJobsResponseBodyJobsOutput) String() string {
	return tea.Prettify(s)
}

func (s ListSnapshotJobsResponseBodyJobsOutput) GoString() string {
	return s.String()
}

func (s *ListSnapshotJobsResponseBodyJobsOutput) SetMedia(v string) *ListSnapshotJobsResponseBodyJobsOutput {
	s.Media = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobsOutput) SetType(v string) *ListSnapshotJobsResponseBodyJobsOutput {
	s.Type = &v
	return s
}

type ListSnapshotJobsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSnapshotJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSnapshotJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSnapshotJobsResponse) GoString() string {
	return s.String()
}

func (s *ListSnapshotJobsResponse) SetHeaders(v map[string]*string) *ListSnapshotJobsResponse {
	s.Headers = v
	return s
}

func (s *ListSnapshotJobsResponse) SetStatusCode(v int32) *ListSnapshotJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSnapshotJobsResponse) SetBody(v *ListSnapshotJobsResponseBody) *ListSnapshotJobsResponse {
	s.Body = v
	return s
}

type ListSourceLocationsRequest struct {
	// Specifies whether to ignore source locations marked as deleted. A value of true means ignoring source locations marked as deleted.
	//
	// example:
	//
	// true
	FilterState *bool `json:"FilterState,omitempty" xml:"FilterState,omitempty"`
	// 	- The page number.
	//
	// 	- Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 20. Valid values: 1 to 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The sorting order. By default, the query results are sorted by creation time in descending order.
	//
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The sorting order of the source locations based on the time when they were last modified.
	//
	// example:
	//
	// desc
	SortByModifiedTime *string `json:"SortByModifiedTime,omitempty" xml:"SortByModifiedTime,omitempty"`
	// The name of the source location.
	//
	// example:
	//
	// MySourceLocation
	SourceLocationName *string `json:"SourceLocationName,omitempty" xml:"SourceLocationName,omitempty"`
}

func (s ListSourceLocationsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSourceLocationsRequest) GoString() string {
	return s.String()
}

func (s *ListSourceLocationsRequest) SetFilterState(v bool) *ListSourceLocationsRequest {
	s.FilterState = &v
	return s
}

func (s *ListSourceLocationsRequest) SetPageNo(v int32) *ListSourceLocationsRequest {
	s.PageNo = &v
	return s
}

func (s *ListSourceLocationsRequest) SetPageSize(v int32) *ListSourceLocationsRequest {
	s.PageSize = &v
	return s
}

func (s *ListSourceLocationsRequest) SetSortBy(v string) *ListSourceLocationsRequest {
	s.SortBy = &v
	return s
}

func (s *ListSourceLocationsRequest) SetSortByModifiedTime(v string) *ListSourceLocationsRequest {
	s.SortByModifiedTime = &v
	return s
}

func (s *ListSourceLocationsRequest) SetSourceLocationName(v string) *ListSourceLocationsRequest {
	s.SourceLocationName = &v
	return s
}

type ListSourceLocationsResponseBody struct {
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 20. Valid values: 1 to 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// **Request ID**
	//
	// example:
	//
	// xxx-xxxx-xxxxx-xxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The source locations.
	SourceLocationList []*ChannelAssemblySourceLocation `json:"SourceLocationList,omitempty" xml:"SourceLocationList,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListSourceLocationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSourceLocationsResponseBody) GoString() string {
	return s.String()
}

func (s *ListSourceLocationsResponseBody) SetPageNo(v int32) *ListSourceLocationsResponseBody {
	s.PageNo = &v
	return s
}

func (s *ListSourceLocationsResponseBody) SetPageSize(v int32) *ListSourceLocationsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListSourceLocationsResponseBody) SetRequestId(v string) *ListSourceLocationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSourceLocationsResponseBody) SetSourceLocationList(v []*ChannelAssemblySourceLocation) *ListSourceLocationsResponseBody {
	s.SourceLocationList = v
	return s
}

func (s *ListSourceLocationsResponseBody) SetTotalCount(v int32) *ListSourceLocationsResponseBody {
	s.TotalCount = &v
	return s
}

type ListSourceLocationsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSourceLocationsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSourceLocationsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSourceLocationsResponse) GoString() string {
	return s.String()
}

func (s *ListSourceLocationsResponse) SetHeaders(v map[string]*string) *ListSourceLocationsResponse {
	s.Headers = v
	return s
}

func (s *ListSourceLocationsResponse) SetStatusCode(v int32) *ListSourceLocationsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSourceLocationsResponse) SetBody(v *ListSourceLocationsResponseBody) *ListSourceLocationsResponse {
	s.Body = v
	return s
}

type ListSourcesRequest struct {
	// Specifies whether to ignore sources marked as deleted.
	//
	// example:
	//
	// true
	FilterState *bool `json:"FilterState,omitempty" xml:"FilterState,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *string `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The sorting order. By default, the query results are sorted by creation time in descending order. Valid values: asc and desc.
	//
	// example:
	//
	// asc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The sorting order by modification time. Valid values: asc and desc.
	//
	// example:
	//
	// desc
	SortByModifiedTime *string `json:"SortByModifiedTime,omitempty" xml:"SortByModifiedTime,omitempty"`
	// The name of the source location.
	//
	// example:
	//
	// MySourceLocation
	SourceLocationName *string `json:"SourceLocationName,omitempty" xml:"SourceLocationName,omitempty"`
	// The name of the source.
	//
	// example:
	//
	// MyVodSource
	SourceName *string `json:"SourceName,omitempty" xml:"SourceName,omitempty"`
	// The source type. Valid values: vodSource and liveSource.
	//
	// example:
	//
	// vodSource
	SourceType *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
}

func (s ListSourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSourcesRequest) GoString() string {
	return s.String()
}

func (s *ListSourcesRequest) SetFilterState(v bool) *ListSourcesRequest {
	s.FilterState = &v
	return s
}

func (s *ListSourcesRequest) SetPageNo(v string) *ListSourcesRequest {
	s.PageNo = &v
	return s
}

func (s *ListSourcesRequest) SetPageSize(v string) *ListSourcesRequest {
	s.PageSize = &v
	return s
}

func (s *ListSourcesRequest) SetSortBy(v string) *ListSourcesRequest {
	s.SortBy = &v
	return s
}

func (s *ListSourcesRequest) SetSortByModifiedTime(v string) *ListSourcesRequest {
	s.SortByModifiedTime = &v
	return s
}

func (s *ListSourcesRequest) SetSourceLocationName(v string) *ListSourcesRequest {
	s.SourceLocationName = &v
	return s
}

func (s *ListSourcesRequest) SetSourceName(v string) *ListSourcesRequest {
	s.SourceName = &v
	return s
}

func (s *ListSourcesRequest) SetSourceType(v string) *ListSourcesRequest {
	s.SourceType = &v
	return s
}

type ListSourcesResponseBody struct {
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 20. Valid values: 1 to 100.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// **Request ID**
	//
	// example:
	//
	// xxx-xxxx-xxxxx-xxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The sources.
	SourceList []*ChannelAssemblySource `json:"SourceList,omitempty" xml:"SourceList,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListSourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListSourcesResponseBody) SetPageNo(v int32) *ListSourcesResponseBody {
	s.PageNo = &v
	return s
}

func (s *ListSourcesResponseBody) SetPageSize(v int32) *ListSourcesResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListSourcesResponseBody) SetRequestId(v string) *ListSourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSourcesResponseBody) SetSourceList(v []*ChannelAssemblySource) *ListSourcesResponseBody {
	s.SourceList = v
	return s
}

func (s *ListSourcesResponseBody) SetTotalCount(v int32) *ListSourcesResponseBody {
	s.TotalCount = &v
	return s
}

type ListSourcesResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSourcesResponse) GoString() string {
	return s.String()
}

func (s *ListSourcesResponse) SetHeaders(v map[string]*string) *ListSourcesResponse {
	s.Headers = v
	return s
}

func (s *ListSourcesResponse) SetStatusCode(v int32) *ListSourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSourcesResponse) SetBody(v *ListSourcesResponseBody) *ListSourcesResponse {
	s.Body = v
	return s
}

type ListSystemTemplatesRequest struct {
	// The template name.
	//
	// example:
	//
	// SampleTemplate
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 20 Valid values: 1 to 100.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The template state. Valid values: Normal, Invisible, and All.
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The subtype ID of the template.
	//
	// example:
	//
	// 1
	Subtype *string `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// The template ID.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The template type. Separate multiple types with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// 1,2
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListSystemTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSystemTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListSystemTemplatesRequest) SetName(v string) *ListSystemTemplatesRequest {
	s.Name = &v
	return s
}

func (s *ListSystemTemplatesRequest) SetPageNumber(v int32) *ListSystemTemplatesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListSystemTemplatesRequest) SetPageSize(v int32) *ListSystemTemplatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListSystemTemplatesRequest) SetStatus(v string) *ListSystemTemplatesRequest {
	s.Status = &v
	return s
}

func (s *ListSystemTemplatesRequest) SetSubtype(v string) *ListSystemTemplatesRequest {
	s.Subtype = &v
	return s
}

func (s *ListSystemTemplatesRequest) SetTemplateId(v string) *ListSystemTemplatesRequest {
	s.TemplateId = &v
	return s
}

func (s *ListSystemTemplatesRequest) SetType(v string) *ListSystemTemplatesRequest {
	s.Type = &v
	return s
}

type ListSystemTemplatesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The queried templates.
	SystemTemplateList []*ListSystemTemplatesResponseBodySystemTemplateList `json:"SystemTemplateList,omitempty" xml:"SystemTemplateList,omitempty" type:"Repeated"`
	// The total number of templates.
	//
	// example:
	//
	// 20
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListSystemTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSystemTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListSystemTemplatesResponseBody) SetRequestId(v string) *ListSystemTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSystemTemplatesResponseBody) SetSystemTemplateList(v []*ListSystemTemplatesResponseBodySystemTemplateList) *ListSystemTemplatesResponseBody {
	s.SystemTemplateList = v
	return s
}

func (s *ListSystemTemplatesResponseBody) SetTotal(v int32) *ListSystemTemplatesResponseBody {
	s.Total = &v
	return s
}

type ListSystemTemplatesResponseBodySystemTemplateList struct {
	// The template state.
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The subtype ID of the template.
	//
	// example:
	//
	// 1
	Subtype *int32 `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// The subtype name of the template.
	//
	// example:
	//
	// Remux
	SubtypeName *string `json:"SubtypeName,omitempty" xml:"SubtypeName,omitempty"`
	// The template parameters.
	//
	// example:
	//
	// {"Container":{"Format":"flv"},"Video":{},"Audio":{}}
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// The template ID.
	//
	// example:
	//
	// S00000001-000000
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The template name.
	//
	// example:
	//
	// FLV-COPY
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// The type ID of the template.
	//
	// example:
	//
	// 1
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
	// The type name of the template.
	//
	// example:
	//
	// TranscodeTemplate
	TypeName *string `json:"TypeName,omitempty" xml:"TypeName,omitempty"`
}

func (s ListSystemTemplatesResponseBodySystemTemplateList) String() string {
	return tea.Prettify(s)
}

func (s ListSystemTemplatesResponseBodySystemTemplateList) GoString() string {
	return s.String()
}

func (s *ListSystemTemplatesResponseBodySystemTemplateList) SetStatus(v string) *ListSystemTemplatesResponseBodySystemTemplateList {
	s.Status = &v
	return s
}

func (s *ListSystemTemplatesResponseBodySystemTemplateList) SetSubtype(v int32) *ListSystemTemplatesResponseBodySystemTemplateList {
	s.Subtype = &v
	return s
}

func (s *ListSystemTemplatesResponseBodySystemTemplateList) SetSubtypeName(v string) *ListSystemTemplatesResponseBodySystemTemplateList {
	s.SubtypeName = &v
	return s
}

func (s *ListSystemTemplatesResponseBodySystemTemplateList) SetTemplateConfig(v string) *ListSystemTemplatesResponseBodySystemTemplateList {
	s.TemplateConfig = &v
	return s
}

func (s *ListSystemTemplatesResponseBodySystemTemplateList) SetTemplateId(v string) *ListSystemTemplatesResponseBodySystemTemplateList {
	s.TemplateId = &v
	return s
}

func (s *ListSystemTemplatesResponseBodySystemTemplateList) SetTemplateName(v string) *ListSystemTemplatesResponseBodySystemTemplateList {
	s.TemplateName = &v
	return s
}

func (s *ListSystemTemplatesResponseBodySystemTemplateList) SetType(v int32) *ListSystemTemplatesResponseBodySystemTemplateList {
	s.Type = &v
	return s
}

func (s *ListSystemTemplatesResponseBodySystemTemplateList) SetTypeName(v string) *ListSystemTemplatesResponseBodySystemTemplateList {
	s.TypeName = &v
	return s
}

type ListSystemTemplatesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSystemTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSystemTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSystemTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListSystemTemplatesResponse) SetHeaders(v map[string]*string) *ListSystemTemplatesResponse {
	s.Headers = v
	return s
}

func (s *ListSystemTemplatesResponse) SetStatusCode(v int32) *ListSystemTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSystemTemplatesResponse) SetBody(v *ListSystemTemplatesResponseBody) *ListSystemTemplatesResponse {
	s.Body = v
	return s
}

type ListTemplatesRequest struct {
	// The source from which the template was created.
	//
	// Valid values:
	//
	// 	- AliyunConsole
	//
	// 	- WebSDK
	//
	// 	- OpenAPI
	//
	// example:
	//
	// OpenAPI
	CreateSource *string `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	// The search keyword. You can use the template ID or title as the keyword to search for templates.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 20. Valid values: 1 to 100.
	//
	// example:
	//
	// 20
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The sorting parameter. By default, the query results are sorted by creation time in descending order.
	//
	// Valid values:
	//
	// 	- CreationTime:Asc: sorted by creation time in ascending order.
	//
	// 	- CreationTime:Desc: sorted by creation time in descending order.
	//
	// example:
	//
	// CreationTime:Desc
	SortType *string `json:"SortType,omitempty" xml:"SortType,omitempty"`
	// The template state.
	//
	// Valid values:
	//
	// 	- UploadFailed: Failed to upload the video.
	//
	// 	- ProcessFailed: Failed to process the advanced template.
	//
	// 	- Available: The template is available.
	//
	// 	- Uploading: The video is being uploaded.
	//
	// 	- Created: The template is created but not ready for use.
	//
	// 	- Processing: The advanced template is being processed.
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The template type.
	//
	// Valid values:
	//
	// 	- Timeline
	//
	// 	- VETemplate
	//
	// example:
	//
	// Timeline
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListTemplatesRequest) SetCreateSource(v string) *ListTemplatesRequest {
	s.CreateSource = &v
	return s
}

func (s *ListTemplatesRequest) SetKeyword(v string) *ListTemplatesRequest {
	s.Keyword = &v
	return s
}

func (s *ListTemplatesRequest) SetPageNo(v int64) *ListTemplatesRequest {
	s.PageNo = &v
	return s
}

func (s *ListTemplatesRequest) SetPageSize(v int64) *ListTemplatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListTemplatesRequest) SetSortType(v string) *ListTemplatesRequest {
	s.SortType = &v
	return s
}

func (s *ListTemplatesRequest) SetStatus(v string) *ListTemplatesRequest {
	s.Status = &v
	return s
}

func (s *ListTemplatesRequest) SetType(v string) *ListTemplatesRequest {
	s.Type = &v
	return s
}

type ListTemplatesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The queried templates.
	Templates []*ListTemplatesResponseBodyTemplates `json:"Templates,omitempty" xml:"Templates,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTemplatesResponseBody) SetRequestId(v string) *ListTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTemplatesResponseBody) SetTemplates(v []*ListTemplatesResponseBodyTemplates) *ListTemplatesResponseBody {
	s.Templates = v
	return s
}

func (s *ListTemplatesResponseBody) SetTotalCount(v int32) *ListTemplatesResponseBody {
	s.TotalCount = &v
	return s
}

type ListTemplatesResponseBodyTemplates struct {
	// The clip parameters.
	//
	// example:
	//
	// {"Media1":"mediaId","Text1":"text"}
	ClipsParam *string `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	// The template configurations.
	//
	// example:
	//
	// 参考Timeline模板配置详解
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// The thumbnail URL.
	//
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// The source from which the template was created.
	//
	// Valid values:
	//
	// 	- AliyunConsole
	//
	// 	- WebSDK
	//
	// 	- OpenAPI
	//
	// example:
	//
	// OpenAPI
	CreateSource *string `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	// The time when the template was created.
	//
	// example:
	//
	// 2020-12-26T04:11:10Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The source from which the template was modified.
	//
	// Valid values:
	//
	// 	- AliyunConsole
	//
	// 	- WebSDK
	//
	// 	- OpenAPI
	//
	// example:
	//
	// OpenAPI
	ModifiedSource *string `json:"ModifiedSource,omitempty" xml:"ModifiedSource,omitempty"`
	// The time when the template was last modified.
	//
	// example:
	//
	// 2020-12-26T04:11:10Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The template name.
	//
	// example:
	//
	// 视频添加水印模板
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The preview media asset.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	PreviewMedia *string `json:"PreviewMedia,omitempty" xml:"PreviewMedia,omitempty"`
	// The state of the preview media asset.
	//
	// Valid values:
	//
	// 	- PrepareFail
	//
	// 	- Init
	//
	// 	- Normal
	//
	// 	- Preparing
	//
	// example:
	//
	// Normal
	PreviewMediaStatus *string `json:"PreviewMediaStatus,omitempty" xml:"PreviewMediaStatus,omitempty"`
	// The template state.
	//
	// Valid values:
	//
	// 	- UploadFailed: Failed to upload the video.
	//
	// 	- ProcessFailed: Failed to process the advanced template.
	//
	// 	- Available: The template is available.
	//
	// 	- Uploading: The video is being uploaded.
	//
	// 	- Created: The template is created but not ready for use.
	//
	// 	- Processing: The advanced template is being processed.
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The template ID.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The template type.
	//
	// Valid values:
	//
	// 	- Timeline: regular template.
	//
	// 	- VETemplate: advanced template.
	//
	// example:
	//
	// Timeline
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListTemplatesResponseBodyTemplates) String() string {
	return tea.Prettify(s)
}

func (s ListTemplatesResponseBodyTemplates) GoString() string {
	return s.String()
}

func (s *ListTemplatesResponseBodyTemplates) SetClipsParam(v string) *ListTemplatesResponseBodyTemplates {
	s.ClipsParam = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetConfig(v string) *ListTemplatesResponseBodyTemplates {
	s.Config = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetCoverURL(v string) *ListTemplatesResponseBodyTemplates {
	s.CoverURL = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetCreateSource(v string) *ListTemplatesResponseBodyTemplates {
	s.CreateSource = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetCreationTime(v string) *ListTemplatesResponseBodyTemplates {
	s.CreationTime = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetModifiedSource(v string) *ListTemplatesResponseBodyTemplates {
	s.ModifiedSource = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetModifiedTime(v string) *ListTemplatesResponseBodyTemplates {
	s.ModifiedTime = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetName(v string) *ListTemplatesResponseBodyTemplates {
	s.Name = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetPreviewMedia(v string) *ListTemplatesResponseBodyTemplates {
	s.PreviewMedia = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetPreviewMediaStatus(v string) *ListTemplatesResponseBodyTemplates {
	s.PreviewMediaStatus = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetStatus(v string) *ListTemplatesResponseBodyTemplates {
	s.Status = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetTemplateId(v string) *ListTemplatesResponseBodyTemplates {
	s.TemplateId = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetType(v string) *ListTemplatesResponseBodyTemplates {
	s.Type = &v
	return s
}

type ListTemplatesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListTemplatesResponse) SetHeaders(v map[string]*string) *ListTemplatesResponse {
	s.Headers = v
	return s
}

func (s *ListTemplatesResponse) SetStatusCode(v int32) *ListTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTemplatesResponse) SetBody(v *ListTemplatesResponseBody) *ListTemplatesResponse {
	s.Body = v
	return s
}

type ListTranscodeJobsRequest struct {
	// The end of the time range during which the jobs to be queried were created. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// example:
	//
	// 2022-07-15T00:00:00Z
	EndOfCreateTime *string `json:"EndOfCreateTime,omitempty" xml:"EndOfCreateTime,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request.
	//
	// example:
	//
	// ab4802364a2e49208c99efab82dfa8e8
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// The order that you use to sort the query results. Valid values:
	//
	// 	- CreateTimeDesc: sorts the query results by creation time in descending order.
	//
	// 	- CreateTimeAsc: sorts the query results by creation time in ascending order.
	//
	// example:
	//
	// CreateTimeDesc
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The number of entries per page. Valid values: 0 to 100. Default value: 20.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The job ID.
	//
	// example:
	//
	// 7b38a5d86f1e47838927b6e7ccb1****
	ParentJobId *string `json:"ParentJobId,omitempty" xml:"ParentJobId,omitempty"`
	// The beginning of the time range during which the jobs to be queried were created. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// example:
	//
	// 2022-07-01T00:00:00Z
	StartOfCreateTime *string `json:"StartOfCreateTime,omitempty" xml:"StartOfCreateTime,omitempty"`
	// The state of the job.
	//
	// 	- Init: The job is submitted.
	//
	// 	- Success: The job is successful.
	//
	// 	- Fail: The job failed.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListTranscodeJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsRequest) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsRequest) SetEndOfCreateTime(v string) *ListTranscodeJobsRequest {
	s.EndOfCreateTime = &v
	return s
}

func (s *ListTranscodeJobsRequest) SetNextPageToken(v string) *ListTranscodeJobsRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListTranscodeJobsRequest) SetOrderBy(v string) *ListTranscodeJobsRequest {
	s.OrderBy = &v
	return s
}

func (s *ListTranscodeJobsRequest) SetPageSize(v int32) *ListTranscodeJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListTranscodeJobsRequest) SetParentJobId(v string) *ListTranscodeJobsRequest {
	s.ParentJobId = &v
	return s
}

func (s *ListTranscodeJobsRequest) SetStartOfCreateTime(v string) *ListTranscodeJobsRequest {
	s.StartOfCreateTime = &v
	return s
}

func (s *ListTranscodeJobsRequest) SetStatus(v string) *ListTranscodeJobsRequest {
	s.Status = &v
	return s
}

type ListTranscodeJobsResponseBody struct {
	// The list of jobs.
	Jobs []*ListTranscodeJobsResponseBodyJobs `json:"Jobs,omitempty" xml:"Jobs,omitempty" type:"Repeated"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. The token of the next page is returned after you call this operation for the first time.
	//
	// example:
	//
	// 019daf5780f74831b0e1a767c9f1c178
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListTranscodeJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBody) SetJobs(v []*ListTranscodeJobsResponseBodyJobs) *ListTranscodeJobsResponseBody {
	s.Jobs = v
	return s
}

func (s *ListTranscodeJobsResponseBody) SetNextPageToken(v string) *ListTranscodeJobsResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *ListTranscodeJobsResponseBody) SetRequestId(v string) *ListTranscodeJobsResponseBody {
	s.RequestId = &v
	return s
}

type ListTranscodeJobsResponseBodyJobs struct {
	// The time when the job was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-01-12T08:49:41Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the job was complete. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-01-12T08:49:41Z
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The input group of the job. An input of a single file indicates a transcoding job. An input of multiple files indicates an audio and video stream merge job.
	InputGroup []*ListTranscodeJobsResponseBodyJobsInputGroup `json:"InputGroup,omitempty" xml:"InputGroup,omitempty" type:"Repeated"`
	// The number of subjobs.
	//
	// example:
	//
	// 1
	JobCount *int32 `json:"JobCount,omitempty" xml:"JobCount,omitempty"`
	// The job name.
	//
	// example:
	//
	// transcode-job
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output group of the job.
	OutputGroup []*ListTranscodeJobsResponseBodyJobsOutputGroup `json:"OutputGroup,omitempty" xml:"OutputGroup,omitempty" type:"Repeated"`
	// The main job ID.
	//
	// example:
	//
	// 8b2198504dd340b7b3c9842a74fc9baa
	ParentJobId *string `json:"ParentJobId,omitempty" xml:"ParentJobId,omitempty"`
	// The completion percentage of the job.
	//
	// example:
	//
	// 0
	Percent *int32 `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The ID of the request that submitted the job.
	//
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The scheduling configuration of the job.
	ScheduleConfig *ListTranscodeJobsResponseBodyJobsScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// The state of the job.
	//
	// 	- Success: At least one of the subjobs is successful.
	//
	// 	- Fail: All subjobs failed.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The time when the job was submitted. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-01-12T08:49:41Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// The source of the job. Valid values:
	//
	// 	- API
	//
	// 	- WorkFlow
	//
	// 	- Console
	//
	// example:
	//
	// API
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// The user data.
	//
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobs) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobs) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobs) SetCreateTime(v string) *ListTranscodeJobsResponseBodyJobs {
	s.CreateTime = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetFinishTime(v string) *ListTranscodeJobsResponseBodyJobs {
	s.FinishTime = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetInputGroup(v []*ListTranscodeJobsResponseBodyJobsInputGroup) *ListTranscodeJobsResponseBodyJobs {
	s.InputGroup = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetJobCount(v int32) *ListTranscodeJobsResponseBodyJobs {
	s.JobCount = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetName(v string) *ListTranscodeJobsResponseBodyJobs {
	s.Name = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetOutputGroup(v []*ListTranscodeJobsResponseBodyJobsOutputGroup) *ListTranscodeJobsResponseBodyJobs {
	s.OutputGroup = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetParentJobId(v string) *ListTranscodeJobsResponseBodyJobs {
	s.ParentJobId = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetPercent(v int32) *ListTranscodeJobsResponseBodyJobs {
	s.Percent = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetRequestId(v string) *ListTranscodeJobsResponseBodyJobs {
	s.RequestId = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetScheduleConfig(v *ListTranscodeJobsResponseBodyJobsScheduleConfig) *ListTranscodeJobsResponseBodyJobs {
	s.ScheduleConfig = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetStatus(v string) *ListTranscodeJobsResponseBodyJobs {
	s.Status = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetSubmitTime(v string) *ListTranscodeJobsResponseBodyJobs {
	s.SubmitTime = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetTriggerSource(v string) *ListTranscodeJobsResponseBodyJobs {
	s.TriggerSource = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetUserData(v string) *ListTranscodeJobsResponseBodyJobs {
	s.UserData = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsInputGroup struct {
	// The URL of the media asset. This parameter is specified only when the media asset is transcoded.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	InputUrl *string `json:"InputUrl,omitempty" xml:"InputUrl,omitempty"`
	// The media object.
	//
	// 	- If Type is set to OSS, the URL of an OSS object is returned. Both the OSS and HTTP protocols are supported.
	//
	// 	- If Type is set to Media, the ID of a media asset is returned.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an Object Storage Service (OSS) object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsInputGroup) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsInputGroup) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsInputGroup) SetInputUrl(v string) *ListTranscodeJobsResponseBodyJobsInputGroup {
	s.InputUrl = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsInputGroup) SetMedia(v string) *ListTranscodeJobsResponseBodyJobsInputGroup {
	s.Media = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsInputGroup) SetType(v string) *ListTranscodeJobsResponseBodyJobsInputGroup {
	s.Type = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroup struct {
	// The output file configuration.
	Output *ListTranscodeJobsResponseBodyJobsOutputGroupOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// The job processing configuration.
	ProcessConfig *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig `json:"ProcessConfig,omitempty" xml:"ProcessConfig,omitempty" type:"Struct"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroup) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroup) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroup) SetOutput(v *ListTranscodeJobsResponseBodyJobsOutputGroupOutput) *ListTranscodeJobsResponseBodyJobsOutputGroup {
	s.Output = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroup) SetProcessConfig(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) *ListTranscodeJobsResponseBodyJobsOutputGroup {
	s.ProcessConfig = v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupOutput struct {
	// The media object. If Type is set to OSS, the URL of an OSS object is returned. Both the OSS and HTTP protocols are supported. If Type is set to Media, the ID of a media asset is returned.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The URL of the transcoded output stream. This parameter is required only when the output is a media asset.
	//
	// example:
	//
	// oss://bucket/path/to/{MediaId}/{JobId}.mp4
	OutputUrl *string `json:"OutputUrl,omitempty" xml:"OutputUrl,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an OSS object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupOutput) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupOutput) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupOutput) SetMedia(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupOutput {
	s.Media = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupOutput) SetOutputUrl(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupOutput {
	s.OutputUrl = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupOutput) SetType(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupOutput {
	s.Type = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig struct {
	// The multi-input stream merge configuration.
	CombineConfigs []*ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigCombineConfigs `json:"CombineConfigs,omitempty" xml:"CombineConfigs,omitempty" type:"Repeated"`
	// The encryption settings.
	Encryption *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigEncryption `json:"Encryption,omitempty" xml:"Encryption,omitempty" type:"Struct"`
	// The watermark configuration for an image.
	ImageWatermarks []*ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks `json:"ImageWatermarks,omitempty" xml:"ImageWatermarks,omitempty" type:"Repeated"`
	// Indicates whether the tags of the input stream are inherited in the output stream. This parameter does not take effect when the input is not a media asset. Default value: false.
	IsInheritTags *bool `json:"IsInheritTags,omitempty" xml:"IsInheritTags,omitempty"`
	// The subtitle configuration.
	Subtitles []*ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles `json:"Subtitles,omitempty" xml:"Subtitles,omitempty" type:"Repeated"`
	// The configurations of the text watermarks.
	TextWatermarks []*ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks `json:"TextWatermarks,omitempty" xml:"TextWatermarks,omitempty" type:"Repeated"`
	// The transcoding configuration.
	Transcode *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode `json:"Transcode,omitempty" xml:"Transcode,omitempty" type:"Struct"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) SetCombineConfigs(v []*ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigCombineConfigs) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig {
	s.CombineConfigs = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) SetEncryption(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigEncryption) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig {
	s.Encryption = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) SetImageWatermarks(v []*ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig {
	s.ImageWatermarks = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) SetIsInheritTags(v bool) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig {
	s.IsInheritTags = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) SetSubtitles(v []*ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig {
	s.Subtitles = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) SetTextWatermarks(v []*ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig {
	s.TextWatermarks = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) SetTranscode(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig {
	s.Transcode = v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigCombineConfigs struct {
	// The audio stream index.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0 或 exclude
	AudioIndex *string `json:"AudioIndex,omitempty" xml:"AudioIndex,omitempty"`
	// The duration of the input stream. The default value is the duration of the video.
	//
	// example:
	//
	// 20.0
	Duration *float64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The start time of the input stream. Default value: 0.
	//
	// example:
	//
	// 0.0
	Start *float64 `json:"Start,omitempty" xml:"Start,omitempty"`
	// The video stream index.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0 或 exclude
	VideoIndex *string `json:"VideoIndex,omitempty" xml:"VideoIndex,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigCombineConfigs) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigCombineConfigs) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigCombineConfigs) SetAudioIndex(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigCombineConfigs {
	s.AudioIndex = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigCombineConfigs) SetDuration(v float64) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigCombineConfigs {
	s.Duration = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigCombineConfigs) SetStart(v float64) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigCombineConfigs {
	s.Start = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigCombineConfigs) SetVideoIndex(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigCombineConfigs {
	s.VideoIndex = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigEncryption struct {
	// The ciphertext of HTTP Live Streaming (HLS) encryption.
	//
	// example:
	//
	// MTYi00NDU0LTg5O****
	CipherText *string `json:"CipherText,omitempty" xml:"CipherText,omitempty"`
	// The endpoint of the decryption service for HLS encryption.
	//
	// example:
	//
	// https://sample.com/path?CipherText=MTYi00NDU0LTg5O****
	DecryptKeyUri *string `json:"DecryptKeyUri,omitempty" xml:"DecryptKeyUri,omitempty"`
	// The encryption type.
	//
	// example:
	//
	// PrivateEncryption
	EncryptType *string `json:"EncryptType,omitempty" xml:"EncryptType,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigEncryption) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigEncryption) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigEncryption) SetCipherText(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigEncryption {
	s.CipherText = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigEncryption) SetDecryptKeyUri(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigEncryption {
	s.DecryptKeyUri = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigEncryption) SetEncryptType(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigEncryption {
	s.EncryptType = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks struct {
	// The parameters that are used to overwrite the corresponding parameters of the template.
	OverwriteParams *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// The template ID.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks) SetOverwriteParams(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks) SetTemplateId(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks {
	s.TemplateId = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams struct {
	// The position of the watermark on the x-axis.
	//
	// example:
	//
	// 10
	Dx *string `json:"Dx,omitempty" xml:"Dx,omitempty"`
	// The position of the watermark on the y-axis.
	//
	// example:
	//
	// 10
	Dy *string `json:"Dy,omitempty" xml:"Dy,omitempty"`
	// The watermark image file.
	File *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// The height of the output video.
	//
	// example:
	//
	// 32
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The reference position of the watermark. Valid values: TopLeft, TopRight, BottomLeft, and BottomRight. Default value: TopLeft.
	//
	// example:
	//
	// TopLeft
	ReferPos *string `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	// The timeline settings.
	Timeline *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	// The width of the output video.
	//
	// example:
	//
	// 32
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) SetDx(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Dx = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) SetDy(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Dy = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) SetFile(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.File = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) SetHeight(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Height = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) SetReferPos(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.ReferPos = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) SetTimeline(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Timeline = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) SetWidth(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Width = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile struct {
	// The media object. If Type is set to OSS, the URL of an OSS object is returned. Both the OSS and HTTP protocols are supported. If Type is set to Media, the ID of a media asset is returned.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an OSS object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) SetMedia(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) SetType(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile {
	s.Type = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline struct {
	// The duration of the stream. Valid values: the number of seconds or "ToEND".
	//
	// example:
	//
	// ToEND
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The beginning of the time range for which data was queried.
	//
	// example:
	//
	// 00:00:05
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) SetDuration(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Duration = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) SetStart(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Start = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles struct {
	// The parameters that are used to overwrite the corresponding parameters of the template.
	OverwriteParams *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// The template ID.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles) SetOverwriteParams(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles {
	s.OverwriteParams = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles) SetTemplateId(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles {
	s.TemplateId = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams struct {
	// The file encoding format.
	//
	// example:
	//
	// UTF-8
	CharEnc *string `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	// The subtitle file.
	File *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// The format of the subtitle file.
	//
	// example:
	//
	// vtt
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams) SetCharEnc(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.CharEnc = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams) SetFile(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.File = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams) SetFormat(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.Format = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile struct {
	// The media object.
	//
	// 	- If Type is set to OSS, the URL of an OSS object is returned. Both the OSS and HTTP protocols are supported.
	//
	// 	- If Type is set to Media, the ID of a media asset is returned.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an OSS object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile) SetMedia(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile) SetType(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile {
	s.Type = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks struct {
	// The parameters that are used to overwrite the corresponding parameters of the template.
	OverwriteParams *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// The template ID.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks) SetOverwriteParams(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks) SetTemplateId(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks {
	s.TemplateId = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams struct {
	// Indicates whether the text size was adjusted based on the output video dimensions. true / false, default: false
	//
	// example:
	//
	// false
	Adaptive *string `json:"Adaptive,omitempty" xml:"Adaptive,omitempty"`
	// The border color.
	//
	// example:
	//
	// #006400
	BorderColor *string `json:"BorderColor,omitempty" xml:"BorderColor,omitempty"`
	// The border width.
	//
	// example:
	//
	// 0
	BorderWidth *int32 `json:"BorderWidth,omitempty" xml:"BorderWidth,omitempty"`
	// The watermark text. Base64 encoding is not required. The string must be encoded in UTF-8.
	//
	// example:
	//
	// 测试水印
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The transparency of the watermark.
	//
	// example:
	//
	// 1.0
	FontAlpha *string `json:"FontAlpha,omitempty" xml:"FontAlpha,omitempty"`
	// The color of the text.
	//
	// example:
	//
	// #006400
	FontColor *string `json:"FontColor,omitempty" xml:"FontColor,omitempty"`
	// The font of the text.
	//
	// example:
	//
	// SimSun
	FontName *string `json:"FontName,omitempty" xml:"FontName,omitempty"`
	// The size of the text.
	//
	// example:
	//
	// 16
	FontSize *int32 `json:"FontSize,omitempty" xml:"FontSize,omitempty"`
	// The distance of the watermark from the left edge.
	//
	// example:
	//
	// 10
	Left *string `json:"Left,omitempty" xml:"Left,omitempty"`
	// The distance of the watermark from the top edge.
	//
	// example:
	//
	// 10
	Top *string `json:"Top,omitempty" xml:"Top,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetAdaptive(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Adaptive = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetBorderColor(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.BorderColor = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetBorderWidth(v int32) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.BorderWidth = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetContent(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Content = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontAlpha(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontAlpha = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontColor(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontColor = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontName(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontName = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontSize(v int32) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontSize = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetLeft(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Left = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetTop(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Top = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode struct {
	// The parameters that are used to overwrite the corresponding parameters of the template.
	OverwriteParams *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// The template ID.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode) SetOverwriteParams(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode {
	s.OverwriteParams = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode) SetTemplateId(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode {
	s.TemplateId = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams struct {
	// The audio settings.
	Audio *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	// The encapsulation format settings.
	Container *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsContainer `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	// The encapsulation settings.
	MuxConfig *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	Tags      map[string]*string                                                                          `json:"Tags,omitempty" xml:"Tags,omitempty"`
	// The video settings.
	Video *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams) SetAudio(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Audio = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams) SetContainer(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsContainer) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Container = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams) SetMuxConfig(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams {
	s.MuxConfig = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams) SetTags(v map[string]*string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Tags = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams) SetVideo(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Video = v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio struct {
	// The audio bitrate of the output file.
	//
	// 	- Valid values: [8,1000].
	//
	// 	- Unit: Kbit/s.
	//
	// 	- Default value: 128.
	//
	// example:
	//
	// 128
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The number of sound channels. Default value: 2.
	//
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// The audio codec. Valid values: AAC, MP3, VORBIS, and FLAC. Default value: AAC.
	//
	// example:
	//
	// AAC
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// The audio codec profile. If the Codec parameter is set to AAC, the valid values are aac_low, aac_he, aac_he_v2, aac_ld, and aac_eld.
	//
	// example:
	//
	// aac_low
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// Indicates whether the audio stream is deleted.
	//
	// example:
	//
	// false
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// The sampling rate.
	//
	// 	- Default value: 44100.
	//
	// 	- Valid values: 22050, 32000, 44100, 48000, and 96000.
	//
	// 	- Unit: Hz.
	//
	// example:
	//
	// 44100
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	// The volume configurations.
	Volume *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetBitrate(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Bitrate = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetChannels(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Channels = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetCodec(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Codec = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetProfile(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Profile = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetRemove(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Remove = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetSamplerate(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Samplerate = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetVolume(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Volume = v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume struct {
	// The output volume.
	//
	// example:
	//
	// -6
	IntegratedLoudnessTarget *string `json:"IntegratedLoudnessTarget,omitempty" xml:"IntegratedLoudnessTarget,omitempty"`
	// The volume range.
	//
	// example:
	//
	// 8
	LoudnessRangeTarget *string `json:"LoudnessRangeTarget,omitempty" xml:"LoudnessRangeTarget,omitempty"`
	// The volume adjustment method. Valid values:
	//
	// example:
	//
	// auto
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// The peak volume.
	//
	// example:
	//
	// -1
	TruePeak *string `json:"TruePeak,omitempty" xml:"TruePeak,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetIntegratedLoudnessTarget(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.IntegratedLoudnessTarget = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetLoudnessRangeTarget(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.LoudnessRangeTarget = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetMethod(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.Method = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetTruePeak(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.TruePeak = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsContainer struct {
	// The container format.
	//
	// example:
	//
	// mp4
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsContainer) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsContainer) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsContainer) SetFormat(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsContainer {
	s.Format = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig struct {
	// The segment settings.
	Segment *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) SetSegment(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig {
	s.Segment = v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment struct {
	// The segment length.
	//
	// example:
	//
	// 10
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The forced segmentation point in time.
	//
	// example:
	//
	// 2,3
	ForceSegTime *string `json:"ForceSegTime,omitempty" xml:"ForceSegTime,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetDuration(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.Duration = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetForceSegTime(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.ForceSegTime = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo struct {
	// The maximum adaptive bitrate (ABR). This parameter takes effect only for Narrowband HD 1.0. Valid values: [10,50000]. Unit: Kbit/s.
	//
	// example:
	//
	// 6000
	AbrMax *string `json:"AbrMax,omitempty" xml:"AbrMax,omitempty"`
	// The average bitrate of the video.
	//
	// 	- Valid values: [10,50000].
	//
	// 	- Unit: Kbit/s.
	//
	// example:
	//
	// 3000
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The buffer size.
	//
	// 	- Valid values: [1000,128000].
	//
	// 	- Default value: 6000.
	//
	// 	- Unit: KB.
	//
	// example:
	//
	// 6000
	Bufsize *string `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	// The encoding format.
	//
	// example:
	//
	// H.264
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// The constant rate factor.
	//
	// 	- Valid values: [0,51].
	//
	// 	- Default value: 23 if the encoding format is H.264, or 26 if the encoding format is H.265.
	//
	// If this parameter is set, the value of Bitrate becomes invalid.
	//
	// example:
	//
	// 23
	Crf *string `json:"Crf,omitempty" xml:"Crf,omitempty"`
	// The method of video cropping. Valid values:
	//
	// 	- border: automatically detects and removes black bars.
	//
	// 	- A value in the width:height:left:top format: crops the videos based on the custom settings. Example: 1280:800:0:140.
	//
	// example:
	//
	// 1280:800:0:140
	Crop *string `json:"Crop,omitempty" xml:"Crop,omitempty"`
	// The frame rate.
	//
	// 	- Valid values: (0,60].
	//
	// 	- The value is 60 if the frame rate of the input video exceeds 60.
	//
	// 	- Default value: the frame rate of the input video.
	//
	// example:
	//
	// 25
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// The maximum number of frames between two keyframes.
	//
	// 	- Valid values: [1,1080000].
	//
	// 	- Default value: 250.
	//
	// example:
	//
	// 250
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// The height of the output video.
	//
	// 	- Valid values: [128,4096].
	//
	// 	- Unit: pixels.
	//
	// 	- Default value: the height of the input video.
	//
	// example:
	//
	// 1080
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// Indicates whether the auto-rotate screen feature is enabled.
	//
	// example:
	//
	// false
	LongShortMode *string `json:"LongShortMode,omitempty" xml:"LongShortMode,omitempty"`
	// The maximum bitrate of the output video. Valid values: [10,50000]. Unit: Kbit/s.
	//
	// example:
	//
	// 9000
	Maxrate *string `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	// The black bars added to the video.
	//
	// 	- Format: width:height:left:top.
	//
	// 	- Example: 1280:800:0:140.
	//
	// example:
	//
	// 1280:800:0:140
	Pad *string `json:"Pad,omitempty" xml:"Pad,omitempty"`
	// The pixel format of the video. Valid values: standard pixel formats such as yuv420p and yuvj420p.
	//
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// The preset video algorithm. This parameter takes effect only if the encoding format is H.264. Valid values: veryfast, fast, medium, slow, and slower. Default value: medium.
	//
	// example:
	//
	// medium
	Preset *string `json:"Preset,omitempty" xml:"Preset,omitempty"`
	// The encoding profile. Valid values: baseline, main, and high.
	//
	// 	- baseline: applicable to mobile devices.
	//
	// 	- main: applicable to standard-definition devices.
	//
	// 	- high: applicable to high-definition devices.
	//
	// Default value: high.
	//
	// example:
	//
	// Main
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// Indicates whether the video was removed.
	//
	// example:
	//
	// false
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// The scan mode. Valid values: interlaced and progressive.
	//
	// example:
	//
	// progressive
	ScanMode *string `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	// The width of the output video.
	//
	// 	- Valid values: [128,4096].
	//
	// 	- Unit: pixels.
	//
	// 	- Default value: the width of the input video.
	//
	// example:
	//
	// 1920
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetAbrMax(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.AbrMax = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetBitrate(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Bitrate = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetBufsize(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Bufsize = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCodec(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Codec = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCrf(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Crf = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCrop(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Crop = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetFps(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Fps = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetGop(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Gop = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetHeight(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Height = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetLongShortMode(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.LongShortMode = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetMaxrate(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Maxrate = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPad(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Pad = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPixFmt(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.PixFmt = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPreset(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Preset = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetProfile(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Profile = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetRemove(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Remove = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetScanMode(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.ScanMode = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetWidth(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Width = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsScheduleConfig struct {
	// The ID of the MPS queue to which the job was submitted.
	//
	// example:
	//
	// e37ebee5d98b4781897f6086e89f9c56
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The priority of the job. Valid values: 1 to 10. The greater the value, the higher the priority.
	//
	// example:
	//
	// 5
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsScheduleConfig) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsScheduleConfig) SetPipelineId(v string) *ListTranscodeJobsResponseBodyJobsScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsScheduleConfig) SetPriority(v int32) *ListTranscodeJobsResponseBodyJobsScheduleConfig {
	s.Priority = &v
	return s
}

type ListTranscodeJobsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTranscodeJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTranscodeJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponse) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponse) SetHeaders(v map[string]*string) *ListTranscodeJobsResponse {
	s.Headers = v
	return s
}

func (s *ListTranscodeJobsResponse) SetStatusCode(v int32) *ListTranscodeJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTranscodeJobsResponse) SetBody(v *ListTranscodeJobsResponseBody) *ListTranscodeJobsResponse {
	s.Body = v
	return s
}

type ListVodPackagingAssetsRequest struct {
	// The name of the packaging group.
	//
	// example:
	//
	// vod_hls
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The search keyword. The names of the returned assets are prefixed with this keyword.
	//
	// example:
	//
	// movie
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The sorting order of the assets based on the time when they were ingested. Valid values:
	//
	// 	- desc (default): descending order.
	//
	// 	- asc: ascending order.
	//
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
}

func (s ListVodPackagingAssetsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListVodPackagingAssetsRequest) GoString() string {
	return s.String()
}

func (s *ListVodPackagingAssetsRequest) SetGroupName(v string) *ListVodPackagingAssetsRequest {
	s.GroupName = &v
	return s
}

func (s *ListVodPackagingAssetsRequest) SetKeyword(v string) *ListVodPackagingAssetsRequest {
	s.Keyword = &v
	return s
}

func (s *ListVodPackagingAssetsRequest) SetPageNo(v int32) *ListVodPackagingAssetsRequest {
	s.PageNo = &v
	return s
}

func (s *ListVodPackagingAssetsRequest) SetPageSize(v int32) *ListVodPackagingAssetsRequest {
	s.PageSize = &v
	return s
}

func (s *ListVodPackagingAssetsRequest) SetSortBy(v string) *ListVodPackagingAssetsRequest {
	s.SortBy = &v
	return s
}

type ListVodPackagingAssetsResponseBody struct {
	// The VOD packaging assets.
	Assets []*ListVodPackagingAssetsResponseBodyAssets `json:"Assets,omitempty" xml:"Assets,omitempty" type:"Repeated"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The sorting order of the assets based on the time when they were ingested. Valid values:
	//
	// 	- desc: descending order.
	//
	// 	- asc: ascending order.
	//
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListVodPackagingAssetsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListVodPackagingAssetsResponseBody) GoString() string {
	return s.String()
}

func (s *ListVodPackagingAssetsResponseBody) SetAssets(v []*ListVodPackagingAssetsResponseBodyAssets) *ListVodPackagingAssetsResponseBody {
	s.Assets = v
	return s
}

func (s *ListVodPackagingAssetsResponseBody) SetPageNo(v int32) *ListVodPackagingAssetsResponseBody {
	s.PageNo = &v
	return s
}

func (s *ListVodPackagingAssetsResponseBody) SetPageSize(v int32) *ListVodPackagingAssetsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListVodPackagingAssetsResponseBody) SetRequestId(v string) *ListVodPackagingAssetsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListVodPackagingAssetsResponseBody) SetSortBy(v string) *ListVodPackagingAssetsResponseBody {
	s.SortBy = &v
	return s
}

func (s *ListVodPackagingAssetsResponseBody) SetTotalCount(v int32) *ListVodPackagingAssetsResponseBody {
	s.TotalCount = &v
	return s
}

type ListVodPackagingAssetsResponseBodyAssets struct {
	// The name of the VOD packaging asset.
	//
	// example:
	//
	// 30min_movie
	AssetName *string `json:"AssetName,omitempty" xml:"AssetName,omitempty"`
	// The time when the asset was ingested. It follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2024-11-21T06:45:32Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The asset description.
	//
	// example:
	//
	// movie 30min
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the packaging group.
	//
	// example:
	//
	// vod_hls
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The asset input configurations.
	Input *ListVodPackagingAssetsResponseBodyAssetsInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
}

func (s ListVodPackagingAssetsResponseBodyAssets) String() string {
	return tea.Prettify(s)
}

func (s ListVodPackagingAssetsResponseBodyAssets) GoString() string {
	return s.String()
}

func (s *ListVodPackagingAssetsResponseBodyAssets) SetAssetName(v string) *ListVodPackagingAssetsResponseBodyAssets {
	s.AssetName = &v
	return s
}

func (s *ListVodPackagingAssetsResponseBodyAssets) SetCreateTime(v string) *ListVodPackagingAssetsResponseBodyAssets {
	s.CreateTime = &v
	return s
}

func (s *ListVodPackagingAssetsResponseBodyAssets) SetDescription(v string) *ListVodPackagingAssetsResponseBodyAssets {
	s.Description = &v
	return s
}

func (s *ListVodPackagingAssetsResponseBodyAssets) SetGroupName(v string) *ListVodPackagingAssetsResponseBodyAssets {
	s.GroupName = &v
	return s
}

func (s *ListVodPackagingAssetsResponseBodyAssets) SetInput(v *ListVodPackagingAssetsResponseBodyAssetsInput) *ListVodPackagingAssetsResponseBodyAssets {
	s.Input = v
	return s
}

type ListVodPackagingAssetsResponseBodyAssetsInput struct {
	// The URL of the media file. Only M3U8 files stored in OSS are supported.
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The input type. Only Object Storage Service (OSS) is supported.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListVodPackagingAssetsResponseBodyAssetsInput) String() string {
	return tea.Prettify(s)
}

func (s ListVodPackagingAssetsResponseBodyAssetsInput) GoString() string {
	return s.String()
}

func (s *ListVodPackagingAssetsResponseBodyAssetsInput) SetMedia(v string) *ListVodPackagingAssetsResponseBodyAssetsInput {
	s.Media = &v
	return s
}

func (s *ListVodPackagingAssetsResponseBodyAssetsInput) SetType(v string) *ListVodPackagingAssetsResponseBodyAssetsInput {
	s.Type = &v
	return s
}

type ListVodPackagingAssetsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListVodPackagingAssetsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListVodPackagingAssetsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListVodPackagingAssetsResponse) GoString() string {
	return s.String()
}

func (s *ListVodPackagingAssetsResponse) SetHeaders(v map[string]*string) *ListVodPackagingAssetsResponse {
	s.Headers = v
	return s
}

func (s *ListVodPackagingAssetsResponse) SetStatusCode(v int32) *ListVodPackagingAssetsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListVodPackagingAssetsResponse) SetBody(v *ListVodPackagingAssetsResponseBody) *ListVodPackagingAssetsResponse {
	s.Body = v
	return s
}

type ListVodPackagingConfigurationsRequest struct {
	// The name of the packaging group.
	//
	// example:
	//
	// vod_hls
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The search keyword. The names of the returned packaging configurations contain the keyword.
	//
	// example:
	//
	// hls
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The sorting order of the packaging configurations based on the time when they were created. Valid values:
	//
	// 	- desc (default): descending order.
	//
	// 	- asc: ascending order.
	//
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
}

func (s ListVodPackagingConfigurationsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListVodPackagingConfigurationsRequest) GoString() string {
	return s.String()
}

func (s *ListVodPackagingConfigurationsRequest) SetGroupName(v string) *ListVodPackagingConfigurationsRequest {
	s.GroupName = &v
	return s
}

func (s *ListVodPackagingConfigurationsRequest) SetKeyword(v string) *ListVodPackagingConfigurationsRequest {
	s.Keyword = &v
	return s
}

func (s *ListVodPackagingConfigurationsRequest) SetPageNo(v int64) *ListVodPackagingConfigurationsRequest {
	s.PageNo = &v
	return s
}

func (s *ListVodPackagingConfigurationsRequest) SetPageSize(v int64) *ListVodPackagingConfigurationsRequest {
	s.PageSize = &v
	return s
}

func (s *ListVodPackagingConfigurationsRequest) SetSortBy(v string) *ListVodPackagingConfigurationsRequest {
	s.SortBy = &v
	return s
}

type ListVodPackagingConfigurationsResponseBody struct {
	// The packaging configurations.
	PackagingConfigurations []*VodPackagingConfiguration `json:"PackagingConfigurations,omitempty" xml:"PackagingConfigurations,omitempty" type:"Repeated"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The sorting order of the packaging configurations based on the time when they were created. Valid values:
	//
	// 	- desc: descending order.
	//
	// 	- asc: ascending order.
	//
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 5
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListVodPackagingConfigurationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListVodPackagingConfigurationsResponseBody) GoString() string {
	return s.String()
}

func (s *ListVodPackagingConfigurationsResponseBody) SetPackagingConfigurations(v []*VodPackagingConfiguration) *ListVodPackagingConfigurationsResponseBody {
	s.PackagingConfigurations = v
	return s
}

func (s *ListVodPackagingConfigurationsResponseBody) SetPageNo(v int64) *ListVodPackagingConfigurationsResponseBody {
	s.PageNo = &v
	return s
}

func (s *ListVodPackagingConfigurationsResponseBody) SetPageSize(v int64) *ListVodPackagingConfigurationsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListVodPackagingConfigurationsResponseBody) SetRequestId(v string) *ListVodPackagingConfigurationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListVodPackagingConfigurationsResponseBody) SetSortBy(v string) *ListVodPackagingConfigurationsResponseBody {
	s.SortBy = &v
	return s
}

func (s *ListVodPackagingConfigurationsResponseBody) SetTotalCount(v int32) *ListVodPackagingConfigurationsResponseBody {
	s.TotalCount = &v
	return s
}

type ListVodPackagingConfigurationsResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListVodPackagingConfigurationsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListVodPackagingConfigurationsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListVodPackagingConfigurationsResponse) GoString() string {
	return s.String()
}

func (s *ListVodPackagingConfigurationsResponse) SetHeaders(v map[string]*string) *ListVodPackagingConfigurationsResponse {
	s.Headers = v
	return s
}

func (s *ListVodPackagingConfigurationsResponse) SetStatusCode(v int32) *ListVodPackagingConfigurationsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListVodPackagingConfigurationsResponse) SetBody(v *ListVodPackagingConfigurationsResponseBody) *ListVodPackagingConfigurationsResponse {
	s.Body = v
	return s
}

type ListVodPackagingGroupsRequest struct {
	// The search keyword. The names of the returned packaging groups contain the keyword.
	//
	// example:
	//
	// hls
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The sorting order of the packaging groups based on the time when they were created. Valid values:
	//
	// 	- desc (default): descending order.
	//
	// 	- asc: ascending order.
	//
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
}

func (s ListVodPackagingGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListVodPackagingGroupsRequest) GoString() string {
	return s.String()
}

func (s *ListVodPackagingGroupsRequest) SetKeyword(v string) *ListVodPackagingGroupsRequest {
	s.Keyword = &v
	return s
}

func (s *ListVodPackagingGroupsRequest) SetPageNo(v int64) *ListVodPackagingGroupsRequest {
	s.PageNo = &v
	return s
}

func (s *ListVodPackagingGroupsRequest) SetPageSize(v int64) *ListVodPackagingGroupsRequest {
	s.PageSize = &v
	return s
}

func (s *ListVodPackagingGroupsRequest) SetSortBy(v string) *ListVodPackagingGroupsRequest {
	s.SortBy = &v
	return s
}

type ListVodPackagingGroupsResponseBody struct {
	// The packaging groups.
	PackagingGroups []*VodPackagingGroup `json:"PackagingGroups,omitempty" xml:"PackagingGroups,omitempty" type:"Repeated"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The sorting order of the packaging groups based on the time when they were created. Valid values:
	//
	// 	- desc: descending order.
	//
	// 	- asc: ascending order.
	//
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 5
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListVodPackagingGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListVodPackagingGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListVodPackagingGroupsResponseBody) SetPackagingGroups(v []*VodPackagingGroup) *ListVodPackagingGroupsResponseBody {
	s.PackagingGroups = v
	return s
}

func (s *ListVodPackagingGroupsResponseBody) SetPageNo(v int32) *ListVodPackagingGroupsResponseBody {
	s.PageNo = &v
	return s
}

func (s *ListVodPackagingGroupsResponseBody) SetPageSize(v int32) *ListVodPackagingGroupsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListVodPackagingGroupsResponseBody) SetRequestId(v string) *ListVodPackagingGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListVodPackagingGroupsResponseBody) SetSortBy(v string) *ListVodPackagingGroupsResponseBody {
	s.SortBy = &v
	return s
}

func (s *ListVodPackagingGroupsResponseBody) SetTotalCount(v int64) *ListVodPackagingGroupsResponseBody {
	s.TotalCount = &v
	return s
}

type ListVodPackagingGroupsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListVodPackagingGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListVodPackagingGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListVodPackagingGroupsResponse) GoString() string {
	return s.String()
}

func (s *ListVodPackagingGroupsResponse) SetHeaders(v map[string]*string) *ListVodPackagingGroupsResponse {
	s.Headers = v
	return s
}

func (s *ListVodPackagingGroupsResponse) SetStatusCode(v int32) *ListVodPackagingGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListVodPackagingGroupsResponse) SetBody(v *ListVodPackagingGroupsResponseBody) *ListVodPackagingGroupsResponse {
	s.Body = v
	return s
}

type QueryCopyrightExtractJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2288c6ca184c0e47098a5b665e2a12****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s QueryCopyrightExtractJobRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCopyrightExtractJobRequest) GoString() string {
	return s.String()
}

func (s *QueryCopyrightExtractJobRequest) SetJobId(v string) *QueryCopyrightExtractJobRequest {
	s.JobId = &v
	return s
}

type QueryCopyrightExtractJobResponseBody struct {
	Data *QueryCopyrightExtractJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// ok
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// *****ACB-44F2-5F2D-88D7-1283E70*****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 200
	StatusCode *int64 `json:"StatusCode,omitempty" xml:"StatusCode,omitempty"`
}

func (s QueryCopyrightExtractJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCopyrightExtractJobResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCopyrightExtractJobResponseBody) SetData(v *QueryCopyrightExtractJobResponseBodyData) *QueryCopyrightExtractJobResponseBody {
	s.Data = v
	return s
}

func (s *QueryCopyrightExtractJobResponseBody) SetMessage(v string) *QueryCopyrightExtractJobResponseBody {
	s.Message = &v
	return s
}

func (s *QueryCopyrightExtractJobResponseBody) SetRequestId(v string) *QueryCopyrightExtractJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryCopyrightExtractJobResponseBody) SetStatusCode(v int64) *QueryCopyrightExtractJobResponseBody {
	s.StatusCode = &v
	return s
}

type QueryCopyrightExtractJobResponseBodyData struct {
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s QueryCopyrightExtractJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryCopyrightExtractJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryCopyrightExtractJobResponseBodyData) SetMessage(v string) *QueryCopyrightExtractJobResponseBodyData {
	s.Message = &v
	return s
}

type QueryCopyrightExtractJobResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryCopyrightExtractJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryCopyrightExtractJobResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCopyrightExtractJobResponse) GoString() string {
	return s.String()
}

func (s *QueryCopyrightExtractJobResponse) SetHeaders(v map[string]*string) *QueryCopyrightExtractJobResponse {
	s.Headers = v
	return s
}

func (s *QueryCopyrightExtractJobResponse) SetStatusCode(v int32) *QueryCopyrightExtractJobResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryCopyrightExtractJobResponse) SetBody(v *QueryCopyrightExtractJobResponseBody) *QueryCopyrightExtractJobResponse {
	s.Body = v
	return s
}

type QueryCopyrightJobListRequest struct {
	// example:
	//
	// 1627357325
	CreateTimeEnd *int64 `json:"CreateTimeEnd,omitempty" xml:"CreateTimeEnd,omitempty"`
	// example:
	//
	// 1627357322
	CreateTimeStart *int64 `json:"CreateTimeStart,omitempty" xml:"CreateTimeStart,omitempty"`
	// example:
	//
	// ****cdb3e74639973036bc84****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 0
	Level *int64 `json:"Level,omitempty" xml:"Level,omitempty"`
	// example:
	//
	// 0
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s QueryCopyrightJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCopyrightJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryCopyrightJobListRequest) SetCreateTimeEnd(v int64) *QueryCopyrightJobListRequest {
	s.CreateTimeEnd = &v
	return s
}

func (s *QueryCopyrightJobListRequest) SetCreateTimeStart(v int64) *QueryCopyrightJobListRequest {
	s.CreateTimeStart = &v
	return s
}

func (s *QueryCopyrightJobListRequest) SetJobId(v string) *QueryCopyrightJobListRequest {
	s.JobId = &v
	return s
}

func (s *QueryCopyrightJobListRequest) SetLevel(v int64) *QueryCopyrightJobListRequest {
	s.Level = &v
	return s
}

func (s *QueryCopyrightJobListRequest) SetPageNumber(v int64) *QueryCopyrightJobListRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryCopyrightJobListRequest) SetPageSize(v int64) *QueryCopyrightJobListRequest {
	s.PageSize = &v
	return s
}

type QueryCopyrightJobListResponseBody struct {
	Data []*QueryCopyrightJobListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// ok
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ******36-3C1E-4417-BDB2-1E034F******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 200
	StatusCode *int64 `json:"StatusCode,omitempty" xml:"StatusCode,omitempty"`
}

func (s QueryCopyrightJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCopyrightJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCopyrightJobListResponseBody) SetData(v []*QueryCopyrightJobListResponseBodyData) *QueryCopyrightJobListResponseBody {
	s.Data = v
	return s
}

func (s *QueryCopyrightJobListResponseBody) SetMessage(v string) *QueryCopyrightJobListResponseBody {
	s.Message = &v
	return s
}

func (s *QueryCopyrightJobListResponseBody) SetRequestId(v string) *QueryCopyrightJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryCopyrightJobListResponseBody) SetStatusCode(v int64) *QueryCopyrightJobListResponseBody {
	s.StatusCode = &v
	return s
}

type QueryCopyrightJobListResponseBodyData struct {
	// example:
	//
	// 1627357322
	GmtCreate *int64 `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	// example:
	//
	// 1627357322
	GmtModified *int64                                      `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Input       *QueryCopyrightJobListResponseBodyDataInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// example:
	//
	// bfb786c639894f4d80648792021****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 2
	Level *int64 `json:"Level,omitempty" xml:"Level,omitempty"`
	// example:
	//
	// test
	Message *string                                      `json:"Message,omitempty" xml:"Message,omitempty"`
	Output  *QueryCopyrightJobListResponseBodyDataOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// example:
	//
	// {"Code":"success","Message":"ok"}
	Result *string `json:"Result,omitempty" xml:"Result,omitempty"`
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 123
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	// example:
	//
	// 1346693***
	UserId *int64 `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s QueryCopyrightJobListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryCopyrightJobListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryCopyrightJobListResponseBodyData) SetGmtCreate(v int64) *QueryCopyrightJobListResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *QueryCopyrightJobListResponseBodyData) SetGmtModified(v int64) *QueryCopyrightJobListResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *QueryCopyrightJobListResponseBodyData) SetInput(v *QueryCopyrightJobListResponseBodyDataInput) *QueryCopyrightJobListResponseBodyData {
	s.Input = v
	return s
}

func (s *QueryCopyrightJobListResponseBodyData) SetJobId(v string) *QueryCopyrightJobListResponseBodyData {
	s.JobId = &v
	return s
}

func (s *QueryCopyrightJobListResponseBodyData) SetLevel(v int64) *QueryCopyrightJobListResponseBodyData {
	s.Level = &v
	return s
}

func (s *QueryCopyrightJobListResponseBodyData) SetMessage(v string) *QueryCopyrightJobListResponseBodyData {
	s.Message = &v
	return s
}

func (s *QueryCopyrightJobListResponseBodyData) SetOutput(v *QueryCopyrightJobListResponseBodyDataOutput) *QueryCopyrightJobListResponseBodyData {
	s.Output = v
	return s
}

func (s *QueryCopyrightJobListResponseBodyData) SetResult(v string) *QueryCopyrightJobListResponseBodyData {
	s.Result = &v
	return s
}

func (s *QueryCopyrightJobListResponseBodyData) SetStatus(v string) *QueryCopyrightJobListResponseBodyData {
	s.Status = &v
	return s
}

func (s *QueryCopyrightJobListResponseBodyData) SetUserData(v string) *QueryCopyrightJobListResponseBodyData {
	s.UserData = &v
	return s
}

func (s *QueryCopyrightJobListResponseBodyData) SetUserId(v int64) *QueryCopyrightJobListResponseBodyData {
	s.UserId = &v
	return s
}

type QueryCopyrightJobListResponseBodyDataInput struct {
	// example:
	//
	// oss://bucket/object
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryCopyrightJobListResponseBodyDataInput) String() string {
	return tea.Prettify(s)
}

func (s QueryCopyrightJobListResponseBodyDataInput) GoString() string {
	return s.String()
}

func (s *QueryCopyrightJobListResponseBodyDataInput) SetMedia(v string) *QueryCopyrightJobListResponseBodyDataInput {
	s.Media = &v
	return s
}

func (s *QueryCopyrightJobListResponseBodyDataInput) SetType(v string) *QueryCopyrightJobListResponseBodyDataInput {
	s.Type = &v
	return s
}

type QueryCopyrightJobListResponseBodyDataOutput struct {
	// example:
	//
	// oss://bucket/object
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryCopyrightJobListResponseBodyDataOutput) String() string {
	return tea.Prettify(s)
}

func (s QueryCopyrightJobListResponseBodyDataOutput) GoString() string {
	return s.String()
}

func (s *QueryCopyrightJobListResponseBodyDataOutput) SetMedia(v string) *QueryCopyrightJobListResponseBodyDataOutput {
	s.Media = &v
	return s
}

func (s *QueryCopyrightJobListResponseBodyDataOutput) SetType(v string) *QueryCopyrightJobListResponseBodyDataOutput {
	s.Type = &v
	return s
}

type QueryCopyrightJobListResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryCopyrightJobListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryCopyrightJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCopyrightJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryCopyrightJobListResponse) SetHeaders(v map[string]*string) *QueryCopyrightJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryCopyrightJobListResponse) SetStatusCode(v int32) *QueryCopyrightJobListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryCopyrightJobListResponse) SetBody(v *QueryCopyrightJobListResponseBody) *QueryCopyrightJobListResponse {
	s.Body = v
	return s
}

type QueryDNAJobListRequest struct {
	// The IDs of the media fingerprint analysis jobs that you want to query. We recommend that you query at most 10 jobs at a time. Separate multiple job IDs with commas (,).
	//
	// example:
	//
	// 88c6ca184c0e47098a5b665e2a12****
	JobIds               *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryDNAJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDNAJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryDNAJobListRequest) SetJobIds(v string) *QueryDNAJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QueryDNAJobListRequest) SetOwnerAccount(v string) *QueryDNAJobListRequest {
	s.OwnerAccount = &v
	return s
}

func (s *QueryDNAJobListRequest) SetOwnerId(v int64) *QueryDNAJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryDNAJobListRequest) SetResourceOwnerAccount(v string) *QueryDNAJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryDNAJobListRequest) SetResourceOwnerId(v int64) *QueryDNAJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryDNAJobListResponseBody struct {
	// The queried media fingerprint analysis jobs.
	JobList []*QueryDNAJobListResponseBodyJobList `json:"JobList,omitempty" xml:"JobList,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 25818875-5F78-4A13-BEF6-D7393642CA58
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryDNAJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDNAJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDNAJobListResponseBody) SetJobList(v []*QueryDNAJobListResponseBodyJobList) *QueryDNAJobListResponseBody {
	s.JobList = v
	return s
}

func (s *QueryDNAJobListResponseBody) SetRequestId(v string) *QueryDNAJobListResponseBody {
	s.RequestId = &v
	return s
}

type QueryDNAJobListResponseBodyJobList struct {
	// The response code.
	//
	// example:
	//
	// "InvalidParameter.ResourceNotFound"
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The configurations of the media fingerprint analysis job.
	//
	// example:
	//
	// {"SaveType": "save","MediaType"":"video"}
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// The time when the job was created.
	//
	// example:
	//
	// 2022-12-28T03:21:37Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The ID of the media fingerprint library.
	//
	// example:
	//
	// 2288c6ca184c0e47098a5b665e2a12****
	DBId *string `json:"DBId,omitempty" xml:"DBId,omitempty"`
	// The URL of the media fingerprint analysis result.
	//
	// example:
	//
	// http://test_bucket.oss-cn-shanghai.aliyuncs.com/fingerprint/video/search_result/5/5.txt
	DNAResult *string `json:"DNAResult,omitempty" xml:"DNAResult,omitempty"`
	// The time when the job was complete.
	//
	// example:
	//
	// 2022-12-28T03:21:44Z
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The job ID.
	//
	// example:
	//
	// 88c6ca184c0e47098a5b665e2a12****
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The details of the input file.
	Input *QueryDNAJobListResponseBodyJobListInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// "The resource operated \\"a887d0b***d805ef6f7f6786302\\" cannot be found"
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The primary key of the video. You must make sure that each primary key is unique.
	//
	// example:
	//
	// 3ca84a39a9024f19853b21be9cf9****
	PrimaryKey *string `json:"PrimaryKey,omitempty" xml:"PrimaryKey,omitempty"`
	// The job state. Valid values:
	//
	// 	- **Queuing**: The job is waiting in the queue.
	//
	// 	- **Analysing**: The job is in progress.
	//
	// 	- **Success**: The job is successful.
	//
	// 	- **Fail**: The job failed.
	//
	// example:
	//
	// Queuing
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The user-defined data.
	//
	// example:
	//
	// testdna
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s QueryDNAJobListResponseBodyJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryDNAJobListResponseBodyJobList) GoString() string {
	return s.String()
}

func (s *QueryDNAJobListResponseBodyJobList) SetCode(v string) *QueryDNAJobListResponseBodyJobList {
	s.Code = &v
	return s
}

func (s *QueryDNAJobListResponseBodyJobList) SetConfig(v string) *QueryDNAJobListResponseBodyJobList {
	s.Config = &v
	return s
}

func (s *QueryDNAJobListResponseBodyJobList) SetCreationTime(v string) *QueryDNAJobListResponseBodyJobList {
	s.CreationTime = &v
	return s
}

func (s *QueryDNAJobListResponseBodyJobList) SetDBId(v string) *QueryDNAJobListResponseBodyJobList {
	s.DBId = &v
	return s
}

func (s *QueryDNAJobListResponseBodyJobList) SetDNAResult(v string) *QueryDNAJobListResponseBodyJobList {
	s.DNAResult = &v
	return s
}

func (s *QueryDNAJobListResponseBodyJobList) SetFinishTime(v string) *QueryDNAJobListResponseBodyJobList {
	s.FinishTime = &v
	return s
}

func (s *QueryDNAJobListResponseBodyJobList) SetId(v string) *QueryDNAJobListResponseBodyJobList {
	s.Id = &v
	return s
}

func (s *QueryDNAJobListResponseBodyJobList) SetInput(v *QueryDNAJobListResponseBodyJobListInput) *QueryDNAJobListResponseBodyJobList {
	s.Input = v
	return s
}

func (s *QueryDNAJobListResponseBodyJobList) SetMessage(v string) *QueryDNAJobListResponseBodyJobList {
	s.Message = &v
	return s
}

func (s *QueryDNAJobListResponseBodyJobList) SetPrimaryKey(v string) *QueryDNAJobListResponseBodyJobList {
	s.PrimaryKey = &v
	return s
}

func (s *QueryDNAJobListResponseBodyJobList) SetStatus(v string) *QueryDNAJobListResponseBodyJobList {
	s.Status = &v
	return s
}

func (s *QueryDNAJobListResponseBodyJobList) SetUserData(v string) *QueryDNAJobListResponseBodyJobList {
	s.UserData = &v
	return s
}

type QueryDNAJobListResponseBodyJobListInput struct {
	// The input file. The file can be an OSS object or a media asset. The path of an OSS object can be in one of the following formats:
	//
	// 1\\. oss://bucket/object
	//
	// 2\\. http(s)://bucket.oss-[regionId].aliyuncs.com/object
	//
	// In the preceding paths, bucket indicates an OSS bucket that resides in the same region as the current project, and object indicates the path of the object in the bucket.
	//
	// example:
	//
	// 1b1b9cd148034739af413150fded****
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the input file. Valid values:
	//
	// 1.  OSS: Object Storage Service (OSS) object.
	//
	// 2.  Media: media asset.
	//
	// example:
	//
	// Media
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryDNAJobListResponseBodyJobListInput) String() string {
	return tea.Prettify(s)
}

func (s QueryDNAJobListResponseBodyJobListInput) GoString() string {
	return s.String()
}

func (s *QueryDNAJobListResponseBodyJobListInput) SetMedia(v string) *QueryDNAJobListResponseBodyJobListInput {
	s.Media = &v
	return s
}

func (s *QueryDNAJobListResponseBodyJobListInput) SetType(v string) *QueryDNAJobListResponseBodyJobListInput {
	s.Type = &v
	return s
}

type QueryDNAJobListResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryDNAJobListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryDNAJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDNAJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryDNAJobListResponse) SetHeaders(v map[string]*string) *QueryDNAJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryDNAJobListResponse) SetStatusCode(v int32) *QueryDNAJobListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryDNAJobListResponse) SetBody(v *QueryDNAJobListResponseBody) *QueryDNAJobListResponse {
	s.Body = v
	return s
}

type QueryIProductionJobRequest struct {
	// The client token that is used to ensure the idempotence of the request.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the intelligent production job.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s QueryIProductionJobRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIProductionJobRequest) GoString() string {
	return s.String()
}

func (s *QueryIProductionJobRequest) SetClientToken(v string) *QueryIProductionJobRequest {
	s.ClientToken = &v
	return s
}

func (s *QueryIProductionJobRequest) SetJobId(v string) *QueryIProductionJobRequest {
	s.JobId = &v
	return s
}

type QueryIProductionJobResponseBody struct {
	// The time when the job was created.
	//
	// example:
	//
	// 2022-07-07T07:16:11Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the job was complete.
	//
	// example:
	//
	// 2021-11-26T14:50:25Z
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The name of the algorithm that you want to use for the job. Valid values:
	//
	// 	- **Cover**: This algorithm intelligently generates a thumbnail image for a video.
	//
	// 	- **VideoClip**: This algorithm intelligently generates a summary for a video.
	//
	// 	- **VideoDelogo**: This algorithm removes logos from a video.
	//
	// 	- **VideoDetext**: This algorithm removes captions from a video.
	//
	// example:
	//
	// Cover
	FunctionName *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	// The input file.
	Input *QueryIProductionJobResponseBodyInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// The ID of the intelligent production job.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The algorithm-specific parameters. The parameters are specified as JSON objects and vary based on the algorithm.
	//
	// example:
	//
	// {"Model":"gif"}
	JobParams *string `json:"JobParams,omitempty" xml:"JobParams,omitempty"`
	// The name of the intelligent production job.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output file.
	Output *QueryIProductionJobResponseBodyOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// The output files.
	OutputFiles    []*string `json:"OutputFiles,omitempty" xml:"OutputFiles,omitempty" type:"Repeated"`
	OutputMediaIds []*string `json:"OutputMediaIds,omitempty" xml:"OutputMediaIds,omitempty" type:"Repeated"`
	// The URLs of the output files.
	OutputUrls []*string `json:"OutputUrls,omitempty" xml:"OutputUrls,omitempty" type:"Repeated"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The output of the algorithm. The output is in JSON format and varies based on the algorithm. For more information, see the "Parameters of Result" section of this topic.
	//
	// example:
	//
	// {}
	Result *string `json:"Result,omitempty" xml:"Result,omitempty"`
	// The scheduling configuration.
	ScheduleConfig *QueryIProductionJobResponseBodyScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// The status of the job. Valid values:
	//
	// 	- Queuing: The job is waiting in the queue.
	//
	// 	- Analysing: The job is in progress.
	//
	// 	- Fail: The job failed.
	//
	// 	- Success: The job was successful.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The template ID.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The user-defined data that is returned in the response.
	//
	// example:
	//
	// {"test":1}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s QueryIProductionJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryIProductionJobResponseBody) GoString() string {
	return s.String()
}

func (s *QueryIProductionJobResponseBody) SetCreateTime(v string) *QueryIProductionJobResponseBody {
	s.CreateTime = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetFinishTime(v string) *QueryIProductionJobResponseBody {
	s.FinishTime = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetFunctionName(v string) *QueryIProductionJobResponseBody {
	s.FunctionName = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetInput(v *QueryIProductionJobResponseBodyInput) *QueryIProductionJobResponseBody {
	s.Input = v
	return s
}

func (s *QueryIProductionJobResponseBody) SetJobId(v string) *QueryIProductionJobResponseBody {
	s.JobId = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetJobParams(v string) *QueryIProductionJobResponseBody {
	s.JobParams = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetName(v string) *QueryIProductionJobResponseBody {
	s.Name = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetOutput(v *QueryIProductionJobResponseBodyOutput) *QueryIProductionJobResponseBody {
	s.Output = v
	return s
}

func (s *QueryIProductionJobResponseBody) SetOutputFiles(v []*string) *QueryIProductionJobResponseBody {
	s.OutputFiles = v
	return s
}

func (s *QueryIProductionJobResponseBody) SetOutputMediaIds(v []*string) *QueryIProductionJobResponseBody {
	s.OutputMediaIds = v
	return s
}

func (s *QueryIProductionJobResponseBody) SetOutputUrls(v []*string) *QueryIProductionJobResponseBody {
	s.OutputUrls = v
	return s
}

func (s *QueryIProductionJobResponseBody) SetRequestId(v string) *QueryIProductionJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetResult(v string) *QueryIProductionJobResponseBody {
	s.Result = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetScheduleConfig(v *QueryIProductionJobResponseBodyScheduleConfig) *QueryIProductionJobResponseBody {
	s.ScheduleConfig = v
	return s
}

func (s *QueryIProductionJobResponseBody) SetStatus(v string) *QueryIProductionJobResponseBody {
	s.Status = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetTemplateId(v string) *QueryIProductionJobResponseBody {
	s.TemplateId = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetUserData(v string) *QueryIProductionJobResponseBody {
	s.UserData = &v
	return s
}

type QueryIProductionJobResponseBodyInput struct {
	// The input file. If Type is set to OSS, set this parameter to the path of an OSS object. If Type is set to Media, set this parameter to the ID of a media asset. You can specify the path of an OSS object in one of the following formats:
	//
	// 1.  oss://bucket/object
	//
	// 2.  http(s)://bucket.oss-[RegionId].aliyuncs.com/object bucket in the path specifies an OSS bucket that resides in the same region as the intelligent production job. object in the path specifies the object path in OSS.
	//
	// example:
	//
	// oss://bucket/object
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The media type. Valid values:
	//
	// 1.  OSS: Object Storage Service (OSS) object
	//
	// 2.  Media: media asset
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryIProductionJobResponseBodyInput) String() string {
	return tea.Prettify(s)
}

func (s QueryIProductionJobResponseBodyInput) GoString() string {
	return s.String()
}

func (s *QueryIProductionJobResponseBodyInput) SetMedia(v string) *QueryIProductionJobResponseBodyInput {
	s.Media = &v
	return s
}

func (s *QueryIProductionJobResponseBodyInput) SetType(v string) *QueryIProductionJobResponseBodyInput {
	s.Type = &v
	return s
}

type QueryIProductionJobResponseBodyOutput struct {
	Biz *string `json:"Biz,omitempty" xml:"Biz,omitempty"`
	// The output file. If Type is set to OSS, set this parameter to the path of an OSS object. If Type is set to Media, set this parameter to the ID of a media asset. You can specify the path of an OSS object in one of the following formats:
	//
	// 1.  oss://bucket/object
	//
	// 2.  http(s)://bucket.oss-[RegionId].aliyuncs.com/object bucket in the path specifies an OSS bucket that resides in the same region as the intelligent production job. object in the path specifies the object path in OSS.
	//
	// example:
	//
	// oss://bucket/object
	Media     *string `json:"Media,omitempty" xml:"Media,omitempty"`
	OutputUrl *string `json:"OutputUrl,omitempty" xml:"OutputUrl,omitempty"`
	// The media type. Valid values:
	//
	// 	- OSS: OSS object
	//
	// 	- Media: media asset
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryIProductionJobResponseBodyOutput) String() string {
	return tea.Prettify(s)
}

func (s QueryIProductionJobResponseBodyOutput) GoString() string {
	return s.String()
}

func (s *QueryIProductionJobResponseBodyOutput) SetBiz(v string) *QueryIProductionJobResponseBodyOutput {
	s.Biz = &v
	return s
}

func (s *QueryIProductionJobResponseBodyOutput) SetMedia(v string) *QueryIProductionJobResponseBodyOutput {
	s.Media = &v
	return s
}

func (s *QueryIProductionJobResponseBodyOutput) SetOutputUrl(v string) *QueryIProductionJobResponseBodyOutput {
	s.OutputUrl = &v
	return s
}

func (s *QueryIProductionJobResponseBodyOutput) SetType(v string) *QueryIProductionJobResponseBodyOutput {
	s.Type = &v
	return s
}

type QueryIProductionJobResponseBodyScheduleConfig struct {
	// The ID of the ApsaraVideo Media Processing (MPS) queue.
	//
	// example:
	//
	// a54fdc9c9aab413caef0d1150f565e86
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The priority of the job in the MPS queue to which the job is added.
	//
	// 	- A value of 10 indicates the highest priority.
	//
	// 	- Default value: **6**.
	//
	// example:
	//
	// 6
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s QueryIProductionJobResponseBodyScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryIProductionJobResponseBodyScheduleConfig) GoString() string {
	return s.String()
}

func (s *QueryIProductionJobResponseBodyScheduleConfig) SetPipelineId(v string) *QueryIProductionJobResponseBodyScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *QueryIProductionJobResponseBodyScheduleConfig) SetPriority(v int32) *QueryIProductionJobResponseBodyScheduleConfig {
	s.Priority = &v
	return s
}

type QueryIProductionJobResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryIProductionJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryIProductionJobResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIProductionJobResponse) GoString() string {
	return s.String()
}

func (s *QueryIProductionJobResponse) SetHeaders(v map[string]*string) *QueryIProductionJobResponse {
	s.Headers = v
	return s
}

func (s *QueryIProductionJobResponse) SetStatusCode(v int32) *QueryIProductionJobResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryIProductionJobResponse) SetBody(v *QueryIProductionJobResponseBody) *QueryIProductionJobResponse {
	s.Body = v
	return s
}

type QueryMediaCensorJobDetailRequest struct {
	// The ID of the content moderation job. You can obtain the job ID from the response parameters of the [SubmitMediaCensorJob](https://help.aliyun.com/document_detail/444848.html) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2288c6ca184c0e47098a5b665e2a12****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The number of entries per page.
	//
	// 	- Default value: **30**.
	//
	// 	- Valid values: **1 to 300**.
	//
	// example:
	//
	// 30
	MaximumPageSize *int64 `json:"MaximumPageSize,omitempty" xml:"MaximumPageSize,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.
	//
	// example:
	//
	// ae0fd49c0840e14daf0d66a75b83****
	NextPageToken        *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryMediaCensorJobDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailRequest) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailRequest) SetJobId(v string) *QueryMediaCensorJobDetailRequest {
	s.JobId = &v
	return s
}

func (s *QueryMediaCensorJobDetailRequest) SetMaximumPageSize(v int64) *QueryMediaCensorJobDetailRequest {
	s.MaximumPageSize = &v
	return s
}

func (s *QueryMediaCensorJobDetailRequest) SetNextPageToken(v string) *QueryMediaCensorJobDetailRequest {
	s.NextPageToken = &v
	return s
}

func (s *QueryMediaCensorJobDetailRequest) SetOwnerAccount(v string) *QueryMediaCensorJobDetailRequest {
	s.OwnerAccount = &v
	return s
}

func (s *QueryMediaCensorJobDetailRequest) SetOwnerId(v int64) *QueryMediaCensorJobDetailRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMediaCensorJobDetailRequest) SetResourceOwnerAccount(v string) *QueryMediaCensorJobDetailRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMediaCensorJobDetailRequest) SetResourceOwnerId(v int64) *QueryMediaCensorJobDetailRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryMediaCensorJobDetailResponseBody struct {
	// The results of the content moderation job.
	MediaCensorJobDetail *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail `json:"MediaCensorJobDetail,omitempty" xml:"MediaCensorJobDetail,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// B42299E6-F71F-465F-8FE9-4FC2E3D3C2CA
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBody) SetMediaCensorJobDetail(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) *QueryMediaCensorJobDetailResponseBody {
	s.MediaCensorJobDetail = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBody) SetRequestId(v string) *QueryMediaCensorJobDetailResponseBody {
	s.RequestId = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail struct {
	// The moderation results of live comments.
	BarrageCensorResult *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult `json:"BarrageCensorResult,omitempty" xml:"BarrageCensorResult,omitempty" type:"Struct"`
	// The error code returned if the job failed. This parameter is not returned if the job is successful.
	//
	// example:
	//
	// InvalidParameter.ResourceNotFound
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The moderation results of thumbnails.
	CoverImageCensorResults *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults `json:"CoverImageCensorResults,omitempty" xml:"CoverImageCensorResults,omitempty" type:"Struct"`
	// The time when the content moderation job was created.
	//
	// example:
	//
	// 2018-09-13T16:32:24Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The moderation results of descriptions.
	DescCensorResult *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult `json:"DescCensorResult,omitempty" xml:"DescCensorResult,omitempty" type:"Struct"`
	// The time when the content moderation job was complete.
	//
	// example:
	//
	// 2018-09-13T16:38:24Z
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The information about the job input.
	Input *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// The ID of the content moderation job.
	//
	// example:
	//
	// f8f166eea7a44e9bb0a4aecf9543****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The error message returned if the job failed. This parameter is not returned if the job is successful.
	//
	// example:
	//
	// The resource operated cannot be found
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the ApsaraVideo Media Processing (MPS) queue to which the job was submitted.
	//
	// example:
	//
	// c5b30b7c0d0e4a0abde1d5f9e751****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The job state.
	//
	// example:
	//
	// Success
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The overall result of the content moderation job. Valid values:
	//
	// 	- **pass**: The content passes the moderation.
	//
	// 	- **review**: The content needs to be manually reviewed.
	//
	// 	- **block**: The content needs to be blocked.
	//
	// >  If the moderation result of any type of content is review, the overall result is review. If the moderation result of any type of content is block, the overall result is block.
	//
	// example:
	//
	// block
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	// The moderation results of titles.
	TitleCensorResult *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult `json:"TitleCensorResult,omitempty" xml:"TitleCensorResult,omitempty" type:"Struct"`
	// The user-defined data.
	//
	// example:
	//
	// example userdata ****
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	// The moderation results of videos.
	VensorCensorResult *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult `json:"VensorCensorResult,omitempty" xml:"VensorCensorResult,omitempty" type:"Struct"`
	// The video moderation configurations.
	VideoCensorConfig *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig `json:"VideoCensorConfig,omitempty" xml:"VideoCensorConfig,omitempty" type:"Struct"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetBarrageCensorResult(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.BarrageCensorResult = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetCode(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.Code = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetCoverImageCensorResults(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.CoverImageCensorResults = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetCreationTime(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.CreationTime = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetDescCensorResult(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.DescCensorResult = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetFinishTime(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.FinishTime = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetInput(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.Input = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetJobId(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.JobId = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetMessage(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.Message = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetPipelineId(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.PipelineId = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetState(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.State = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.Suggestion = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetTitleCensorResult(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.TitleCensorResult = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetUserData(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.UserData = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetVensorCensorResult(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.VensorCensorResult = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetVideoCensorConfig(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.VideoCensorConfig = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult struct {
	// The label of the moderation result. Valid values:
	//
	// 	- **normal**: normal content.
	//
	// 	- **spam**: spam.
	//
	// 	- **ad**: ads.
	//
	// 	- **abuse**: abuse content.
	//
	// 	- **flood**: excessive junk content.
	//
	// 	- **contraband**: prohibited content.
	//
	// 	- **meaningless**: meaningless content.
	//
	// example:
	//
	// normal
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// The score.
	//
	// example:
	//
	// 99.91
	Rate *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// The moderation scenario. The value is **antispam**.
	//
	// example:
	//
	// antispam
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// The recommended subsequent operation. Valid values:
	//
	// 	- **pass**: The content passes the moderation.
	//
	// 	- **review**: The content needs to be manually reviewed.
	//
	// 	- **block**: The content needs to be blocked.
	//
	// example:
	//
	// pass
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) SetLabel(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) SetRate(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) SetScene(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults struct {
	CoverImageCensorResult []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult `json:"CoverImageCensorResult,omitempty" xml:"CoverImageCensorResult,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults) SetCoverImageCensorResult(v []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults {
	s.CoverImageCensorResult = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult struct {
	// The OSS bucket in which the thumbnail is stored.
	//
	// example:
	//
	// bucket-out-test-****
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// The OSS region in which the thumbnail resides.
	//
	// example:
	//
	// oss-cn-shanghai
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The Object Storage Service (OSS) object that is used as the thumbnail.
	//
	// example:
	//
	// test/ai/censor/v2/vme-****.jpg
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
	// The moderation results.
	Results *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Struct"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) SetBucket(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult {
	s.Bucket = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) SetLocation(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult {
	s.Location = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) SetObject(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult {
	s.Object = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) SetResults(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult {
	s.Results = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults struct {
	Result []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults) SetResult(v []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults {
	s.Result = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult struct {
	// The label of the moderation result.
	//
	// 	- Valid values in the pornographic content moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **sexy**: sexy content.
	//
	//     	- **porn**: pornographic content.
	//
	// 	- Valid values in the terrorist content moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **bloody**: bloody content.
	//
	//     	- **explosion**: explosion and smoke.
	//
	//     	- **outfit**: special costume.
	//
	//     	- **logo**: special logo.
	//
	//     	- **weapon**: weapon.
	//
	//     	- **politics**: political content.
	//
	//     	- **violence**: violence.
	//
	//     	- **crowd**: crowd.
	//
	//     	- **parade**: parade.
	//
	//     	- **carcrash**: car accident.
	//
	//     	- **flag**: flag.
	//
	//     	- **location**: landmark.
	//
	//     	- **others**: other content.
	//
	// 	- Valid values in the ad moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **ad**: other ads.
	//
	//     	- **politics**: political content in text.
	//
	//     	- **porn**: pornographic content in text.
	//
	//     	- **abuse**: abuse in text.
	//
	//     	- **terrorism**: terrorist content in text.
	//
	//     	- **contraband**: prohibited content in text.
	//
	//     	- **spam**: spam in text.
	//
	//     	- **npx**: illegal ad.
	//
	//     	- **qrcode**: QR code.
	//
	//     	- **programCode**: mini program code.
	//
	// 	- Valid values in the undesirable scene moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **meaningless**: meaningless content, such as a black or white screen.
	//
	//     	- **PIP**: picture-in-picture.
	//
	//     	- **smoking**: smoking.
	//
	//     	- **drivelive**: live broadcasting in a running vehicle.
	//
	// 	- Valid values in the logo moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **TV**: controlled logo.
	//
	//     	- **trademark**: trademark.
	//
	// example:
	//
	// Normal
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// The score. Valid values: 0 to 100.
	//
	// example:
	//
	// 100
	Rate *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// The moderation scenario. Valid values:
	//
	// 	- **porn**: pornographic content moderation.
	//
	// 	- **terrorism**: terrorist content moderation.
	//
	// 	- **ad**: ad moderation.
	//
	// 	- **live**: undesirable scene moderation.
	//
	// 	- **logo**: logo moderation.
	//
	// example:
	//
	// Antispam
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// The recommended subsequent operation. Valid values:
	//
	// 	- **pass**: The content passes the moderation.
	//
	// 	- **review**: The content needs to be manually reviewed.
	//
	// 	- **block**: The content needs to be blocked.
	//
	// example:
	//
	// pass
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) SetLabel(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) SetRate(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) SetScene(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult struct {
	// The label of the moderation result. Valid values:
	//
	// 	- **normal**: normal content.
	//
	// 	- **spam**: spam.
	//
	// 	- **ad**: ads.
	//
	// 	- **abuse**: abuse content.
	//
	// 	- **flood**: excessive junk content.
	//
	// 	- **contraband**: prohibited content.
	//
	// 	- **meaningless**: meaningless content.
	//
	// example:
	//
	// terrorism
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// The score.
	//
	// example:
	//
	// 100
	Rate *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// The moderation scenario. The value is **antispam**.
	//
	// example:
	//
	// antispam
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// The recommended subsequent operation. Valid values:
	//
	// 	- **pass**: The content passes the moderation.
	//
	// 	- **review**: The content needs to be manually reviewed.
	//
	// 	- **block**: The content needs to be blocked.
	//
	// example:
	//
	// review
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) SetLabel(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) SetRate(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) SetScene(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput struct {
	// The name of the OSS bucket in which the input file is stored.
	//
	// example:
	//
	// bucket-test-in-****
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// The OSS region in which the input file resides.
	//
	// example:
	//
	// oss-cn-shanghai
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The name of the OSS object that is used as the input file.
	//
	// example:
	//
	// test/ai/censor/test-****.mp4
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput) SetBucket(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput {
	s.Bucket = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput) SetLocation(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput {
	s.Location = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput) SetObject(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput {
	s.Object = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult struct {
	// The label of the moderation result. Valid values:
	//
	// 	- **normal**: normal content.
	//
	// 	- **spam**: spam.
	//
	// 	- **ad**: ads.
	//
	// 	- **abuse**: abuse content.
	//
	// 	- **flood**: excessive junk content.
	//
	// 	- **contraband**: prohibited content.
	//
	// 	- **meaningless**: meaningless content.
	//
	// example:
	//
	// meaningless
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// The score.
	//
	// example:
	//
	// 99.91
	Rate *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// The moderation scenario. The value is **antispam**.
	//
	// example:
	//
	// antispam
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// The recommended subsequent operation. Valid values:
	//
	// 	- **pass**: The content passes the moderation.
	//
	// 	- **review**: The content needs to be manually reviewed.
	//
	// 	- **block**: The content needs to be blocked.
	//
	// example:
	//
	// block
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) SetLabel(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) SetRate(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) SetScene(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult struct {
	// A collection of moderation results. The information includes the summary about various scenarios such as pornographic content moderation and terrorist content moderation.
	CensorResults *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults `json:"CensorResults,omitempty" xml:"CensorResults,omitempty" type:"Struct"`
	// A pagination token. It can be used in the next request to retrieve a new page of results.
	//
	// example:
	//
	// ea04afcca7cd4e80b9ece8fbb251****
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// The moderation results that are sorted in ascending order by time.
	VideoTimelines *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines `json:"VideoTimelines,omitempty" xml:"VideoTimelines,omitempty" type:"Struct"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult) SetCensorResults(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult {
	s.CensorResults = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult) SetNextPageToken(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult {
	s.NextPageToken = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult) SetVideoTimelines(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult {
	s.VideoTimelines = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults struct {
	CensorResult []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult `json:"CensorResult,omitempty" xml:"CensorResult,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults) SetCensorResult(v []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults {
	s.CensorResult = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult struct {
	// The label of the moderation result.
	//
	// 	- Valid values in the pornographic content moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **sexy**: sexy content.
	//
	//     	- **porn**: pornographic content.
	//
	// 	- Valid values in the terrorist content moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **bloody**: bloody content.
	//
	//     	- **explosion**: explosion and smoke.
	//
	//     	- **outfit**: special costume.
	//
	//     	- **logo**: special logo.
	//
	//     	- **weapon**: weapon.
	//
	//     	- **politics**: political content.
	//
	//     	- **violence**: violence.
	//
	//     	- **crowd**: crowd.
	//
	//     	- **parade**: parade.
	//
	//     	- **carcrash**: car accident.
	//
	//     	- **flag**: flag.
	//
	//     	- **location**: landmark.
	//
	//     	- **others**: other content.
	//
	// 	- Valid values in the ad moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **ad**: other ads.
	//
	//     	- **politics**: political content in text.
	//
	//     	- **porn**: pornographic content in text.
	//
	//     	- **abuse**: abuse in text.
	//
	//     	- **terrorism**: terrorist content in text.
	//
	//     	- **contraband**: prohibited content in text.
	//
	//     	- **spam**: spam in text.
	//
	//     	- **npx**: illegal ad.
	//
	//     	- **qrcode**: QR code.
	//
	//     	- **programCode**: mini program code.
	//
	// 	- Valid values in the undesirable scene moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **meaningless**: meaningless content, such as a black or white screen.
	//
	//     	- **PIP**: picture-in-picture.
	//
	//     	- **smoking**: smoking.
	//
	//     	- **drivelive**: live broadcasting in a running vehicle.
	//
	// 	- Valid values in the logo moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **TV**: controlled logo.
	//
	//     	- **trademark**: trademark.
	//
	// example:
	//
	// meaningless
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// The score.
	//
	// example:
	//
	// 100
	Rate *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// The moderation scenario. Valid values:
	//
	// 	- **porn**: pornographic content moderation.
	//
	// 	- **terrorism**: terrorist content moderation.
	//
	// 	- **ad**: ad moderation.
	//
	// 	- **live**: undesirable scene moderation.
	//
	// 	- **logo**: logo moderation.
	//
	// example:
	//
	// terrorism
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// The recommended subsequent operation. Valid values:
	//
	// 	- **pass**: The content passes the moderation.
	//
	// 	- **review**: The content needs to be manually reviewed.
	//
	// 	- **block**: The content needs to be blocked.
	//
	// example:
	//
	// review
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) SetLabel(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) SetRate(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) SetScene(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines struct {
	VideoTimeline []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline `json:"VideoTimeline,omitempty" xml:"VideoTimeline,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines) SetVideoTimeline(v []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines {
	s.VideoTimeline = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline struct {
	// The moderation results that include information such as labels and scores.
	CensorResults *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults `json:"CensorResults,omitempty" xml:"CensorResults,omitempty" type:"Struct"`
	// The OSS object that is generated as the output snapshot.
	//
	// >  In the example, {Count} is a placeholder. The OSS objects that are generated as output snapshots are named `output00001-****.jpg`, `output00002-****.jpg`, and so on.
	//
	// example:
	//
	// output{Count}.jpg
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
	// The position in the video. Format: `hh:mm:ss[.SSS]`.
	//
	// example:
	//
	// 00:02:59.999
	Timestamp *string `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline) SetCensorResults(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline {
	s.CensorResults = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline) SetObject(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline {
	s.Object = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline) SetTimestamp(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline {
	s.Timestamp = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults struct {
	CensorResult []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult `json:"CensorResult,omitempty" xml:"CensorResult,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults) SetCensorResult(v []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults {
	s.CensorResult = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult struct {
	// The label of the moderation result.
	//
	// 	- Valid values in the pornographic content moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **sexy**: sexy content.
	//
	//     	- **porn**: pornographic content.
	//
	// 	- Valid values in the terrorist content moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **bloody**: bloody content.
	//
	//     	- **explosion**: explosion and smoke.
	//
	//     	- **outfit**: special costume.
	//
	//     	- **logo**: special logo.
	//
	//     	- **weapon**: weapon.
	//
	//     	- **politics**: political content.
	//
	//     	- **violence**: violence.
	//
	//     	- **crowd**: crowd.
	//
	//     	- **parade**: parade.
	//
	//     	- **carcrash**: car accident.
	//
	//     	- **flag**: flag.
	//
	//     	- **location**: landmark.
	//
	//     	- **others**: other content.
	//
	// 	- Valid values in the ad moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **ad**: other ads.
	//
	//     	- **politics**: political content in text.
	//
	//     	- **porn**: pornographic content in text.
	//
	//     	- **abuse**: abuse in text.
	//
	//     	- **terrorism**: terrorist content in text.
	//
	//     	- **contraband**: prohibited content in text.
	//
	//     	- **spam**: spam in text.
	//
	//     	- **npx**: illegal ad.
	//
	//     	- **qrcode**: QR code.
	//
	//     	- **programCode**: mini program code.
	//
	// 	- Valid values in the undesirable scene moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **meaningless**: meaningless content, such as a black or white screen.
	//
	//     	- **PIP**: picture-in-picture.
	//
	//     	- **smoking**: smoking.
	//
	//     	- **drivelive**: live broadcasting in a running vehicle.
	//
	// 	- Valid values in the logo moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **TV**: controlled logo.
	//
	//     	- **trademark**: trademark.
	//
	// example:
	//
	// flood
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// The score.
	//
	// example:
	//
	// 99.99
	Rate *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// The moderation scenario. Valid values:
	//
	// 	- **porn**: pornographic content moderation.
	//
	// 	- **terrorism**: terrorist content moderation.
	//
	// 	- **ad**: ad moderation.
	//
	// 	- **live**: undesirable scene moderation.
	//
	// 	- **logo**: logo moderation.
	//
	// example:
	//
	// porn
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// The recommended subsequent operation. Valid values:
	//
	// 	- **pass**: The content passes the moderation.
	//
	// 	- **review**: The content needs to be manually reviewed.
	//
	// 	- **block**: The content needs to be blocked.
	//
	// example:
	//
	// block
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetLabel(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetRate(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetScene(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig struct {
	// The custom business type. Default value: common.
	//
	// example:
	//
	// common
	BizType *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	// The information about output snapshots.
	OutputFile *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	// Indicates whether the video content needs to be moderated. Default value: **true**. Valid values:
	//
	// 	- **true**: The video content needs to be moderated.
	//
	// 	- **false**: The video content does not need to be moderated.
	//
	// example:
	//
	// true
	VideoCensor *string `json:"VideoCensor,omitempty" xml:"VideoCensor,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig) SetBizType(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig {
	s.BizType = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig) SetOutputFile(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig {
	s.OutputFile = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig) SetVideoCensor(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig {
	s.VideoCensor = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile struct {
	// The OSS bucket in which the output snapshot is stored.
	//
	// example:
	//
	// test-bucket-****
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// The OSS region in which the output snapshot resides.
	//
	// example:
	//
	// oss-cn-shanghai
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The OSS object that is generated as the output snapshot.
	//
	// >  In the example, {Count} is a placeholder. The OSS objects that are generated as output snapshots are named `output00001-****.jpg`, `output00002-****.jpg`, and so on.
	//
	// example:
	//
	// output{Count}.jpg
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile) SetBucket(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile {
	s.Bucket = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile) SetLocation(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile {
	s.Location = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile) SetObject(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile {
	s.Object = &v
	return s
}

type QueryMediaCensorJobDetailResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMediaCensorJobDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMediaCensorJobDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponse) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponse) SetHeaders(v map[string]*string) *QueryMediaCensorJobDetailResponse {
	s.Headers = v
	return s
}

func (s *QueryMediaCensorJobDetailResponse) SetStatusCode(v int32) *QueryMediaCensorJobDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponse) SetBody(v *QueryMediaCensorJobDetailResponseBody) *QueryMediaCensorJobDetailResponse {
	s.Body = v
	return s
}

type QueryMediaCensorJobListRequest struct {
	// The end of the time range to query.
	//
	// 	- Specify the time in the ISO 8601 standard. The time must be in UTC.
	//
	// 	- Format: yyyy-MM-ddTHH:mm:ssZ.
	//
	// example:
	//
	// 2022-02-14T02:16:07Z
	EndOfJobCreatedTimeRange *string `json:"EndOfJobCreatedTimeRange,omitempty" xml:"EndOfJobCreatedTimeRange,omitempty"`
	// The IDs of the content moderation jobs. You can obtain the ID of a content moderation job from the response parameters of the SubmitMediaCensorJob operation. Separate multiple IDs with commas (,).
	//
	// example:
	//
	// fa9c34be3bcf42919ac4d1775239****,78dc866518b843259669df58ed30****
	JobIds *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	// The number of entries per page.
	//
	// 	- Default value: **30**.
	//
	// 	- Valid values: **1 to 300**.
	//
	// example:
	//
	// 20
	MaximumPageSize *int64 `json:"MaximumPageSize,omitempty" xml:"MaximumPageSize,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.
	//
	// example:
	//
	// 79aff3eee82242e092899db5f669
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	OwnerAccount  *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the ApsaraVideo Media Processing (MPS) queue to which the jobs were submitted.
	//
	// example:
	//
	// c5b30b7c0d0e4a0abde1d5f9e751****
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The beginning of the time range to query.
	//
	// 	- Specify the time in the ISO 8601 standard. The time must be in UTC.
	//
	// 	- Format: yyyy-MM-ddTHH:mm:ssZ.
	//
	// example:
	//
	// 2021-12-22T03:48:05Z
	StartOfJobCreatedTimeRange *string `json:"StartOfJobCreatedTimeRange,omitempty" xml:"StartOfJobCreatedTimeRange,omitempty"`
	// The state of the jobs that you want to query. Valid values:
	//
	// 	- **All**: all jobs.
	//
	// 	- **Queuing**: the jobs that are waiting in the queue.
	//
	// 	- **Analysing**: the jobs that are in progress.
	//
	// 	- **Fail**: failed jobs.
	//
	// 	- **Success**: successful jobs.
	//
	// example:
	//
	// All
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s QueryMediaCensorJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListRequest) SetEndOfJobCreatedTimeRange(v string) *QueryMediaCensorJobListRequest {
	s.EndOfJobCreatedTimeRange = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetJobIds(v string) *QueryMediaCensorJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetMaximumPageSize(v int64) *QueryMediaCensorJobListRequest {
	s.MaximumPageSize = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetNextPageToken(v string) *QueryMediaCensorJobListRequest {
	s.NextPageToken = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetOwnerAccount(v string) *QueryMediaCensorJobListRequest {
	s.OwnerAccount = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetOwnerId(v int64) *QueryMediaCensorJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetPipelineId(v string) *QueryMediaCensorJobListRequest {
	s.PipelineId = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetResourceOwnerAccount(v string) *QueryMediaCensorJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetResourceOwnerId(v int64) *QueryMediaCensorJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetStartOfJobCreatedTimeRange(v string) *QueryMediaCensorJobListRequest {
	s.StartOfJobCreatedTimeRange = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetState(v string) *QueryMediaCensorJobListRequest {
	s.State = &v
	return s
}

type QueryMediaCensorJobListResponseBody struct {
	// The queried content moderation jobs.
	MediaCensorJobList *QueryMediaCensorJobListResponseBodyMediaCensorJobList `json:"MediaCensorJobList,omitempty" xml:"MediaCensorJobList,omitempty" type:"Struct"`
	// A pagination token. It can be used in the next request to retrieve a new page of results. The value is 32-character UUID. If the returned query results cannot be displayed within one page, this parameter is returned. The value of this parameter is updated for each query.
	//
	// example:
	//
	// 9b1a42bc6e8d46e6a1383b7e7f01****
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// The IDs of the jobs that do not exist. This parameter is not returned if all the specified jobs are found.
	NonExistIds *QueryMediaCensorJobListResponseBodyNonExistIds `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// D1D5C080-8E2F-5030-8AB4-13092F17631B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryMediaCensorJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBody) SetMediaCensorJobList(v *QueryMediaCensorJobListResponseBodyMediaCensorJobList) *QueryMediaCensorJobListResponseBody {
	s.MediaCensorJobList = v
	return s
}

func (s *QueryMediaCensorJobListResponseBody) SetNextPageToken(v string) *QueryMediaCensorJobListResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBody) SetNonExistIds(v *QueryMediaCensorJobListResponseBodyNonExistIds) *QueryMediaCensorJobListResponseBody {
	s.NonExistIds = v
	return s
}

func (s *QueryMediaCensorJobListResponseBody) SetRequestId(v string) *QueryMediaCensorJobListResponseBody {
	s.RequestId = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobList struct {
	MediaCensorJob []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob `json:"MediaCensorJob,omitempty" xml:"MediaCensorJob,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobList) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobList) SetMediaCensorJob(v []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) *QueryMediaCensorJobListResponseBodyMediaCensorJobList {
	s.MediaCensorJob = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob struct {
	// The moderation results of live comments.
	BarrageCensorResult *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult `json:"BarrageCensorResult,omitempty" xml:"BarrageCensorResult,omitempty" type:"Struct"`
	// The error code returned if the job failed. This parameter is not returned if the job is successful.
	//
	// example:
	//
	// InvalidParameter.ResourceNotFound
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The moderation results of thumbnails.
	CoverImageCensorResults *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResults `json:"CoverImageCensorResults,omitempty" xml:"CoverImageCensorResults,omitempty" type:"Struct"`
	// The time when the content moderation job was created.
	//
	// example:
	//
	// 2021-11-04T07:25:48Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The moderation results of descriptions.
	DescCensorResult *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult `json:"DescCensorResult,omitempty" xml:"DescCensorResult,omitempty" type:"Struct"`
	// The time when the content moderation job was complete.
	//
	// example:
	//
	// 2021-11-04T07:25:50Z
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The information about the job input.
	Input *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// The ID of the content moderation job.
	//
	// example:
	//
	// f8f166eea7a44e9bb0a4aecf9543
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The error message returned if the job failed. This parameter is not returned if the job is successful.
	//
	// example:
	//
	// The resource operated cannot be found
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the MPS queue to which the job was submitted.
	//
	// example:
	//
	// c5b30b7c0d0e4a0abde1d5f9e751****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The job state.
	//
	// example:
	//
	// Success
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The recommended subsequent operation. Valid values:
	//
	// 	- **pass**: The content passes the moderation.
	//
	// 	- **review**: The content needs to be manually reviewed.
	//
	// 	- **block**: The content needs to be blocked.
	//
	// example:
	//
	// pass
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	// The moderation results of titles.
	TitleCensorResult *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult `json:"TitleCensorResult,omitempty" xml:"TitleCensorResult,omitempty" type:"Struct"`
	// The user-defined data.
	//
	// example:
	//
	// example userdata ****
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	// The moderation results of videos.
	VensorCensorResult *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult `json:"VensorCensorResult,omitempty" xml:"VensorCensorResult,omitempty" type:"Struct"`
	// The video moderation configurations.
	VideoCensorConfig *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig `json:"VideoCensorConfig,omitempty" xml:"VideoCensorConfig,omitempty" type:"Struct"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetBarrageCensorResult(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.BarrageCensorResult = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetCode(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.Code = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetCoverImageCensorResults(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResults) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.CoverImageCensorResults = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetCreationTime(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.CreationTime = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetDescCensorResult(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.DescCensorResult = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetFinishTime(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.FinishTime = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetInput(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.Input = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetJobId(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.JobId = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetMessage(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.Message = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetPipelineId(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.PipelineId = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetState(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.State = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetSuggestion(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.Suggestion = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetTitleCensorResult(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.TitleCensorResult = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetUserData(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.UserData = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetVensorCensorResult(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.VensorCensorResult = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetVideoCensorConfig(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.VideoCensorConfig = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult struct {
	// The label of the moderation result. Separate multiple labels with commas (,). Valid values:
	//
	// 	- **normal**: normal content.
	//
	// 	- **spam**: spam.
	//
	// 	- **ad**: ads.
	//
	// 	- **abuse**: abuse content.
	//
	// 	- **flood**: excessive junk content.
	//
	// 	- **contraband**: prohibited content.
	//
	// 	- **meaningless**: meaningless content.
	//
	// example:
	//
	// normal
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// The score. Valid values: 0 to 100.
	//
	// example:
	//
	// 99.91
	Rate *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// The moderation scenario. The value is **antispam**.
	//
	// example:
	//
	// antispam
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// The recommended subsequent operation. Valid values:
	//
	// 	- **pass**: The content passes the moderation.
	//
	// 	- **review**: The content needs to be manually reviewed.
	//
	// 	- **block**: The content needs to be blocked.
	//
	// example:
	//
	// pass
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult) SetLabel(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult) SetRate(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult) SetScene(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult) SetSuggestion(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResults struct {
	CoverImageCensorResult []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult `json:"CoverImageCensorResult,omitempty" xml:"CoverImageCensorResult,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResults) SetCoverImageCensorResult(v []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResults {
	s.CoverImageCensorResult = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult struct {
	// The OSS bucket in which the thumbnail is stored.
	//
	// example:
	//
	// example-Bucket-****
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// The OSS region in which the thumbnail resides.
	//
	// example:
	//
	// oss-cn-shanghai
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The Object Storage Service (OSS) object that is used as the thumbnail.
	//
	// example:
	//
	// test/ai/censor/v2/vme-****.jpg
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
	// The moderation results.
	Results *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Struct"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult) SetBucket(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult {
	s.Bucket = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult) SetLocation(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult {
	s.Location = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult) SetObject(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult {
	s.Object = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult) SetResults(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResults) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult {
	s.Results = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResults struct {
	Result []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResults) SetResult(v []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResults {
	s.Result = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult struct {
	// The label of the moderation result. Separate multiple labels with commas (,).
	//
	// 	- Valid values in the pornographic content moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **sexy**: sexy content.
	//
	//     	- **porn**: pornographic content.
	//
	// 	- Valid values in the terrorist content moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **bloody**: bloody content.
	//
	//     	- **explosion**: explosion and smoke.
	//
	//     	- **outfit**: special costume.
	//
	//     	- **logo**: special logo.
	//
	//     	- **weapon**: weapon.
	//
	//     	- **politics**: political content.
	//
	//     	- **violence**: violence.
	//
	//     	- **crowd**: crowd.
	//
	//     	- **parade**: parade.
	//
	//     	- **carcrash**: car accident.
	//
	//     	- **flag**: flag.
	//
	//     	- **location**: landmark.
	//
	//     	- **others**: other content.
	//
	// 	- Valid values in the ad moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **ad**: other ads.
	//
	//     	- **politics**: political content in text.
	//
	//     	- **porn**: pornographic content in text.
	//
	//     	- **abuse**: abuse in text.
	//
	//     	- **terrorism**: terrorist content in text.
	//
	//     	- **contraband**: prohibited content in text.
	//
	//     	- **spam**: spam in text.
	//
	//     	- **npx**: illegal ad.
	//
	//     	- **qrcode**: QR code.
	//
	//     	- **programCode**: mini program code.
	//
	// 	- Valid values in the undesirable scene moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **meaningless**: meaningless content, such as a black or white screen.
	//
	//     	- **PIP**: picture-in-picture.
	//
	//     	- **smoking**: smoking.
	//
	//     	- **drivelive**: live streaming in a running vehicle.
	//
	// 	- Valid values in the logo moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **TV**: controlled logo.
	//
	//     	- **trademark**: trademark.
	//
	// example:
	//
	// normal
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// The score. Valid values: 0 to 100.
	//
	// example:
	//
	// 100
	Rate *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// The moderation scenario. Valid values:
	//
	// 	- **porn**: pornographic content moderation.
	//
	// 	- **terrorism**: terrorist content moderation.
	//
	// 	- **ad**: ad moderation.
	//
	// 	- **live**: undesirable scene moderation.
	//
	// 	- **logo**: logo moderation.
	//
	// example:
	//
	// live
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// The overall result of the moderation job. Valid values:
	//
	// 	- **pass**: The content passes the moderation.
	//
	// 	- **review**: The content needs to be manually reviewed.
	//
	// 	- **block**: The content needs to be blocked.
	//
	// >  If the moderation result of any type of content is review, the overall result is review. If the moderation result of any type of content is block, the overall result is block.
	//
	// example:
	//
	// pass
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult) SetLabel(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult) SetRate(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult) SetScene(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult) SetSuggestion(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult struct {
	// The label of the moderation result. Separate multiple labels with commas (,). Valid values:
	//
	// 	- **normal**: normal content.
	//
	// 	- **spam**: spam.
	//
	// 	- **ad**: ads.
	//
	// 	- **abuse**: abuse content.
	//
	// 	- **flood**: excessive junk content.
	//
	// 	- **contraband**: prohibited content.
	//
	// 	- **meaningless**: meaningless content.
	//
	// example:
	//
	// normal
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// The score. Valid values: 0 to 100.
	//
	// example:
	//
	// 100
	Rate *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// The moderation scenario. The value is **antispam**.
	//
	// example:
	//
	// antispam
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// The recommended subsequent operation. Valid values:
	//
	// 	- **pass**: The content passes the moderation.
	//
	// 	- **review**: The content needs to be manually reviewed.
	//
	// 	- **block**: The content needs to be blocked.
	//
	// example:
	//
	// pass
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult) SetLabel(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult) SetRate(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult) SetScene(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult) SetSuggestion(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput struct {
	// The name of the OSS bucket in which the input file is stored.
	//
	// example:
	//
	// bucket-test-in-****
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// The OSS region in which the input file resides.
	//
	// example:
	//
	// oss-cn-shanghai
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The name of the OSS object that is used as the input file.
	//
	// example:
	//
	// test/ai/censor/test-****.mp4
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput) SetBucket(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput {
	s.Bucket = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput) SetLocation(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput {
	s.Location = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput) SetObject(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput {
	s.Object = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult struct {
	// The label of the moderation result. Separate multiple labels with commas (,). Valid values:
	//
	// 	- **normal**: normal content.
	//
	// 	- **spam**: spam.
	//
	// 	- **ad**: ads.
	//
	// 	- **abuse**: abuse content.
	//
	// 	- **flood**: excessive junk content.
	//
	// 	- **contraband**: prohibited content.
	//
	// 	- **meaningless**: meaningless content.
	//
	// example:
	//
	// meaningless
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// The score. Valid values: 0 to 100.
	//
	// example:
	//
	// 100
	Rate *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// The moderation scenario. The value is **antispam**.
	//
	// example:
	//
	// antispam
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// The recommended subsequent operation. Valid values:
	//
	// 	- **pass**: The content passes the moderation.
	//
	// 	- **review**: The content needs to be manually reviewed.
	//
	// 	- **block**: The content needs to be blocked.
	//
	// example:
	//
	// block
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult) SetLabel(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult) SetRate(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult) SetScene(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult) SetSuggestion(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult struct {
	// A collection of moderation results. The information includes the summary about various scenarios such as pornographic content moderation and terrorist content moderation.
	CensorResults *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResults `json:"CensorResults,omitempty" xml:"CensorResults,omitempty" type:"Struct"`
	// A pagination token. It can be used in the next request to retrieve a new page of results.
	//
	// example:
	//
	// ea04afcca7cd4e80b9ece8fbb251
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// The moderation results that are sorted in ascending order by time.
	VideoTimelines *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelines `json:"VideoTimelines,omitempty" xml:"VideoTimelines,omitempty" type:"Struct"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult) SetCensorResults(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResults) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult {
	s.CensorResults = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult) SetNextPageToken(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult {
	s.NextPageToken = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult) SetVideoTimelines(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelines) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult {
	s.VideoTimelines = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResults struct {
	CensorResult []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult `json:"CensorResult,omitempty" xml:"CensorResult,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResults) SetCensorResult(v []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResults {
	s.CensorResult = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult struct {
	// The label of the moderation result. Separate multiple labels with commas (,).
	//
	// 	- Valid values in the pornographic content moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **sexy**: sexy content.
	//
	//     	- **porn**: pornographic content.
	//
	// 	- Valid values in the terrorist content moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **bloody**: bloody content.
	//
	//     	- **explosion**: explosion and smoke.
	//
	//     	- **outfit**: special costume.
	//
	//     	- **logo**: special logo.
	//
	//     	- **weapon**: weapon.
	//
	//     	- **politics**: political content.
	//
	//     	- **violence**: violence.
	//
	//     	- **crowd**: crowd.
	//
	//     	- **parade**: parade.
	//
	//     	- **carcrash**: car accident.
	//
	//     	- **flag**: flag.
	//
	//     	- **location**: landmark.
	//
	//     	- **others**: other content.
	//
	// 	- Valid values in the ad moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **ad**: other ads.
	//
	//     	- **politics**: political content in text.
	//
	//     	- **porn**: pornographic content in text.
	//
	//     	- **abuse**: abuse in text.
	//
	//     	- **terrorism**: terrorist content in text.
	//
	//     	- **contraband**: prohibited content in text.
	//
	//     	- **spam**: spam in text.
	//
	//     	- **npx**: illegal ad.
	//
	//     	- **qrcode**: QR code.
	//
	//     	- **programCode**: mini program code.
	//
	// 	- Valid values in the undesirable scene moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **meaningless**: meaningless content, such as a black or white screen.
	//
	//     	- **PIP**: picture-in-picture.
	//
	//     	- **smoking**: smoking.
	//
	//     	- **drivelive**: live streaming in a running vehicle.
	//
	// 	- Valid values in the logo moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **TV**: controlled logo.
	//
	//     	- **trademark**: trademark.
	//
	// example:
	//
	// meaningless
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// The score. Valid values: 0 to 100.
	//
	// example:
	//
	// 100
	Rate *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// The moderation scenario. Valid values:
	//
	// 	- **porn**: pornographic content moderation.
	//
	// 	- **terrorism**: terrorist content moderation.
	//
	// 	- **ad**: ad moderation.
	//
	// 	- **live**: undesirable scene moderation.
	//
	// 	- **logo**: logo moderation.
	//
	// example:
	//
	// ad
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// The recommended subsequent operation. Valid values:
	//
	// 	- **pass**: The content passes the moderation.
	//
	// 	- **review**: The content needs to be manually reviewed.
	//
	// 	- **block**: The content needs to be blocked.
	//
	// example:
	//
	// pass
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult) SetLabel(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult) SetRate(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult) SetScene(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult) SetSuggestion(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelines struct {
	VideoTimeline []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline `json:"VideoTimeline,omitempty" xml:"VideoTimeline,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelines) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelines) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelines) SetVideoTimeline(v []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelines {
	s.VideoTimeline = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline struct {
	// The moderation results that include information such as labels and scores.
	CensorResults *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResults `json:"CensorResults,omitempty" xml:"CensorResults,omitempty" type:"Struct"`
	// The OSS object that is generated as the output snapshot.
	//
	// >  In the example, {Count} is a placeholder. The OSS objects that are generated as output snapshots are named `output00001-****.jpg`, `output00002-****.jpg`, and so on.
	//
	// example:
	//
	// output{Count}.jpg
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
	// The position in the video. Format: `hh:mm:ss[.SSS]`.
	//
	// example:
	//
	// 00:02:59.999
	Timestamp *string `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline) SetCensorResults(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResults) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline {
	s.CensorResults = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline) SetObject(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline {
	s.Object = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline) SetTimestamp(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline {
	s.Timestamp = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResults struct {
	CensorResult []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult `json:"CensorResult,omitempty" xml:"CensorResult,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResults) SetCensorResult(v []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResults {
	s.CensorResult = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult struct {
	// The label of the moderation result. Separate multiple labels with commas (,).
	//
	// 	- Valid values in the pornographic content moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **sexy**: sexy content.
	//
	//     	- **porn**: pornographic content.
	//
	// 	- Valid values in the terrorist content moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **bloody**: bloody content.
	//
	//     	- **explosion**: explosion and smoke.
	//
	//     	- **outfit**: special costume.
	//
	//     	- **logo**: special logo.
	//
	//     	- **weapon**: weapon.
	//
	//     	- **politics**: political content.
	//
	//     	- **violence**: violence.
	//
	//     	- **crowd**: crowd.
	//
	//     	- **parade**: parade.
	//
	//     	- **carcrash**: car accident.
	//
	//     	- **flag**: flag.
	//
	//     	- **location**: landmark.
	//
	//     	- **others**: other content.
	//
	// 	- Valid values in the ad moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **ad**: other ads.
	//
	//     	- **politics**: political content in text.
	//
	//     	- **porn**: pornographic content in text.
	//
	//     	- **abuse**: abuse in text.
	//
	//     	- **terrorism**: terrorist content in text.
	//
	//     	- **contraband**: prohibited content in text.
	//
	//     	- **spam**: spam in text.
	//
	//     	- **npx**: illegal ad.
	//
	//     	- **qrcode**: QR code.
	//
	//     	- **programCode**: mini program code.
	//
	// 	- Valid values in the undesirable scene moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **meaningless**: meaningless content, such as a black or white screen.
	//
	//     	- **PIP**: picture-in-picture.
	//
	//     	- **smoking**: smoking.
	//
	//     	- **drivelive**: live streaming in a running vehicle.
	//
	// 	- Valid values in the logo moderation scenario:
	//
	//     	- **normal**: normal content.
	//
	//     	- **TV**: controlled logo.
	//
	//     	- **trademark**: trademark.
	//
	// example:
	//
	// normal
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// The score. Valid values: 0 to 100.
	//
	// example:
	//
	// 100
	Rate *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// The moderation scenario. Valid values:
	//
	// 	- **porn**: pornographic content moderation.
	//
	// 	- **terrorism**: terrorist content moderation.
	//
	// 	- **ad**: ad moderation.
	//
	// 	- **live**: undesirable scene moderation.
	//
	// 	- **logo**: logo moderation.
	//
	// example:
	//
	// porn
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// The recommended subsequent operation. Valid values:
	//
	// 	- **pass**: The content passes the moderation.
	//
	// 	- **review**: The content needs to be manually reviewed.
	//
	// 	- **block**: The content needs to be blocked.
	//
	// example:
	//
	// block
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetLabel(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetRate(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetScene(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetSuggestion(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig struct {
	// The moderation template. Default value: common. The default value indicates that the default template is used.
	//
	// >  If the moderation template is not specified, the default value common is returned. If a custom moderation template that is created by submitting a ticket is specified, the UID of the template is returned.
	//
	// example:
	//
	// common
	BizType *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	// The information about output snapshots.
	OutputFile *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	// Indicates whether the video content needs to be moderated. Default value: **true**. Valid values:
	//
	// 	- **true**: The video content needs to be moderated.
	//
	// 	- **false**: The video content does not need to be moderated.
	//
	// example:
	//
	// true
	VideoCensor *string `json:"VideoCensor,omitempty" xml:"VideoCensor,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig) SetBizType(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig {
	s.BizType = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig) SetOutputFile(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig {
	s.OutputFile = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig) SetVideoCensor(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig {
	s.VideoCensor = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile struct {
	// The OSS bucket in which the output snapshot is stored.
	//
	// example:
	//
	// test-bucket-****
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// The ID of the region in which the output snapshot resides.
	//
	// example:
	//
	// oss-cn-shanghai
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The OSS object that is generated as the output snapshot.
	//
	// >  In the example, {Count} is a placeholder. The OSS objects that are generated as output snapshots are named `output00001-****.jpg, output00002-****.jpg`, and so on.
	//
	// example:
	//
	// output{Count}.jpg
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile) SetBucket(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile {
	s.Bucket = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile) SetLocation(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile {
	s.Location = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile) SetObject(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile {
	s.Object = &v
	return s
}

type QueryMediaCensorJobListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyNonExistIds) SetString_(v []*string) *QueryMediaCensorJobListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryMediaCensorJobListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMediaCensorJobListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMediaCensorJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponse) SetHeaders(v map[string]*string) *QueryMediaCensorJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryMediaCensorJobListResponse) SetStatusCode(v int32) *QueryMediaCensorJobListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMediaCensorJobListResponse) SetBody(v *QueryMediaCensorJobListResponseBody) *QueryMediaCensorJobListResponse {
	s.Body = v
	return s
}

type QueryMediaIndexJobRequest struct {
	// The ID of the media asset.
	//
	// This parameter is required.
	//
	// example:
	//
	// c2e77390f75271ec802f0674a2ce6***
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The name of the search library. Default value: ims-default-search-lib.
	//
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
}

func (s QueryMediaIndexJobRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaIndexJobRequest) GoString() string {
	return s.String()
}

func (s *QueryMediaIndexJobRequest) SetMediaId(v string) *QueryMediaIndexJobRequest {
	s.MediaId = &v
	return s
}

func (s *QueryMediaIndexJobRequest) SetSearchLibName(v string) *QueryMediaIndexJobRequest {
	s.SearchLibName = &v
	return s
}

type QueryMediaIndexJobResponseBody struct {
	// The response code.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The indexing jobs enabled for the media asset.
	IndexJobInfoList []*QueryMediaIndexJobResponseBodyIndexJobInfoList `json:"IndexJobInfoList,omitempty" xml:"IndexJobInfoList,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 4E84BE44-58A7-****-****-FBEBEA16EF94
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryMediaIndexJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaIndexJobResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMediaIndexJobResponseBody) SetCode(v string) *QueryMediaIndexJobResponseBody {
	s.Code = &v
	return s
}

func (s *QueryMediaIndexJobResponseBody) SetIndexJobInfoList(v []*QueryMediaIndexJobResponseBodyIndexJobInfoList) *QueryMediaIndexJobResponseBody {
	s.IndexJobInfoList = v
	return s
}

func (s *QueryMediaIndexJobResponseBody) SetRequestId(v string) *QueryMediaIndexJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMediaIndexJobResponseBody) SetSuccess(v string) *QueryMediaIndexJobResponseBody {
	s.Success = &v
	return s
}

type QueryMediaIndexJobResponseBodyIndexJobInfoList struct {
	// The end time of the indexing job.
	//
	// example:
	//
	// 2023-11-21 11:33:51
	GmtFinish *string `json:"GmtFinish,omitempty" xml:"GmtFinish,omitempty"`
	// The time when the index job was submitted.
	//
	// example:
	//
	// 2023-11-21 11:33:50
	GmtSubmit *string `json:"GmtSubmit,omitempty" xml:"GmtSubmit,omitempty"`
	// The index type. Valid values:
	//
	// 	- mm: large visual model.
	//
	// 	- face: face recognition.
	//
	// 	- aiLabel: smart tagging.
	//
	// example:
	//
	// mm
	IndexType *string `json:"IndexType,omitempty" xml:"IndexType,omitempty"`
	// The job status. Valid values:
	//
	// 	- Running
	//
	// 	- Success
	//
	// 	- Fail
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s QueryMediaIndexJobResponseBodyIndexJobInfoList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaIndexJobResponseBodyIndexJobInfoList) GoString() string {
	return s.String()
}

func (s *QueryMediaIndexJobResponseBodyIndexJobInfoList) SetGmtFinish(v string) *QueryMediaIndexJobResponseBodyIndexJobInfoList {
	s.GmtFinish = &v
	return s
}

func (s *QueryMediaIndexJobResponseBodyIndexJobInfoList) SetGmtSubmit(v string) *QueryMediaIndexJobResponseBodyIndexJobInfoList {
	s.GmtSubmit = &v
	return s
}

func (s *QueryMediaIndexJobResponseBodyIndexJobInfoList) SetIndexType(v string) *QueryMediaIndexJobResponseBodyIndexJobInfoList {
	s.IndexType = &v
	return s
}

func (s *QueryMediaIndexJobResponseBodyIndexJobInfoList) SetStatus(v string) *QueryMediaIndexJobResponseBodyIndexJobInfoList {
	s.Status = &v
	return s
}

type QueryMediaIndexJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMediaIndexJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMediaIndexJobResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaIndexJobResponse) GoString() string {
	return s.String()
}

func (s *QueryMediaIndexJobResponse) SetHeaders(v map[string]*string) *QueryMediaIndexJobResponse {
	s.Headers = v
	return s
}

func (s *QueryMediaIndexJobResponse) SetStatusCode(v int32) *QueryMediaIndexJobResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMediaIndexJobResponse) SetBody(v *QueryMediaIndexJobResponseBody) *QueryMediaIndexJobResponse {
	s.Body = v
	return s
}

type QuerySearchIndexRequest struct {
	// The category of the index. Valid values:
	//
	// 	- mm: large visual model.
	//
	// 	- face: face recognition.
	//
	// 	- aiLabel: smart tagging.
	//
	// This parameter is required.
	//
	// example:
	//
	// mm
	IndexType *string `json:"IndexType,omitempty" xml:"IndexType,omitempty"`
	// The name of the search library.
	//
	// 	- If you leave this parameter empty, the search index is created in the default search library of Intelligent Media Service (IMS). Default value: ims-default-search-lib.
	//
	// 	- To query information about an existing search library, call the [QuerySearchLib](https://help.aliyun.com/document_detail/2584455.html) API operation.
	//
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
}

func (s QuerySearchIndexRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySearchIndexRequest) GoString() string {
	return s.String()
}

func (s *QuerySearchIndexRequest) SetIndexType(v string) *QuerySearchIndexRequest {
	s.IndexType = &v
	return s
}

func (s *QuerySearchIndexRequest) SetSearchLibName(v string) *QuerySearchIndexRequest {
	s.SearchLibName = &v
	return s
}

type QuerySearchIndexResponseBody struct {
	// The status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The state of the index. Valid values:
	//
	// 	- active: the index is enabled.
	//
	// 	- Deactive: the index is not enabled.
	//
	// example:
	//
	// Active
	IndexStatus *string `json:"IndexStatus,omitempty" xml:"IndexStatus,omitempty"`
	// The category of the index. Valid values:
	//
	// 	- mm: large visual model.
	//
	// 	- face: face recognition.
	//
	// 	- aiLabel: smart tagging.
	//
	// example:
	//
	// mm
	IndexType *string `json:"IndexType,omitempty" xml:"IndexType,omitempty"`
	// The total number of media assets.
	//
	// example:
	//
	// 12
	MediaTotal *string `json:"MediaTotal,omitempty" xml:"MediaTotal,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 4E84BE44-58A7-****-****-FBEBEA16EF94
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The name of the search library.
	//
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QuerySearchIndexResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySearchIndexResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySearchIndexResponseBody) SetCode(v string) *QuerySearchIndexResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySearchIndexResponseBody) SetIndexStatus(v string) *QuerySearchIndexResponseBody {
	s.IndexStatus = &v
	return s
}

func (s *QuerySearchIndexResponseBody) SetIndexType(v string) *QuerySearchIndexResponseBody {
	s.IndexType = &v
	return s
}

func (s *QuerySearchIndexResponseBody) SetMediaTotal(v string) *QuerySearchIndexResponseBody {
	s.MediaTotal = &v
	return s
}

func (s *QuerySearchIndexResponseBody) SetRequestId(v string) *QuerySearchIndexResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySearchIndexResponseBody) SetSearchLibName(v string) *QuerySearchIndexResponseBody {
	s.SearchLibName = &v
	return s
}

func (s *QuerySearchIndexResponseBody) SetSuccess(v string) *QuerySearchIndexResponseBody {
	s.Success = &v
	return s
}

type QuerySearchIndexResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySearchIndexResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySearchIndexResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySearchIndexResponse) GoString() string {
	return s.String()
}

func (s *QuerySearchIndexResponse) SetHeaders(v map[string]*string) *QuerySearchIndexResponse {
	s.Headers = v
	return s
}

func (s *QuerySearchIndexResponse) SetStatusCode(v int32) *QuerySearchIndexResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySearchIndexResponse) SetBody(v *QuerySearchIndexResponseBody) *QuerySearchIndexResponse {
	s.Body = v
	return s
}

type QuerySearchLibRequest struct {
	// The name of the search library.
	//
	// This parameter is required.
	//
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
}

func (s QuerySearchLibRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySearchLibRequest) GoString() string {
	return s.String()
}

func (s *QuerySearchLibRequest) SetSearchLibName(v string) *QuerySearchLibRequest {
	s.SearchLibName = &v
	return s
}

type QuerySearchLibResponseBody struct {
	// The status code returned.
	//
	// example:
	//
	// 200
	Code      *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	IndexInfo []*QuerySearchLibResponseBodyIndexInfo `json:"IndexInfo,omitempty" xml:"IndexInfo,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The name of the search library.
	//
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
	// The status of the search library.
	//
	// Valid values:
	//
	// 	- normal
	//
	// 	- deleting
	//
	// 	- deleteFail
	//
	// example:
	//
	// normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QuerySearchLibResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySearchLibResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySearchLibResponseBody) SetCode(v string) *QuerySearchLibResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySearchLibResponseBody) SetIndexInfo(v []*QuerySearchLibResponseBodyIndexInfo) *QuerySearchLibResponseBody {
	s.IndexInfo = v
	return s
}

func (s *QuerySearchLibResponseBody) SetRequestId(v string) *QuerySearchLibResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySearchLibResponseBody) SetSearchLibName(v string) *QuerySearchLibResponseBody {
	s.SearchLibName = &v
	return s
}

func (s *QuerySearchLibResponseBody) SetStatus(v string) *QuerySearchLibResponseBody {
	s.Status = &v
	return s
}

func (s *QuerySearchLibResponseBody) SetSuccess(v string) *QuerySearchLibResponseBody {
	s.Success = &v
	return s
}

type QuerySearchLibResponseBodyIndexInfo struct {
	IndexReadiness *string `json:"IndexReadiness,omitempty" xml:"IndexReadiness,omitempty"`
	IndexStatus    *string `json:"IndexStatus,omitempty" xml:"IndexStatus,omitempty"`
	IndexType      *string `json:"IndexType,omitempty" xml:"IndexType,omitempty"`
}

func (s QuerySearchLibResponseBodyIndexInfo) String() string {
	return tea.Prettify(s)
}

func (s QuerySearchLibResponseBodyIndexInfo) GoString() string {
	return s.String()
}

func (s *QuerySearchLibResponseBodyIndexInfo) SetIndexReadiness(v string) *QuerySearchLibResponseBodyIndexInfo {
	s.IndexReadiness = &v
	return s
}

func (s *QuerySearchLibResponseBodyIndexInfo) SetIndexStatus(v string) *QuerySearchLibResponseBodyIndexInfo {
	s.IndexStatus = &v
	return s
}

func (s *QuerySearchLibResponseBodyIndexInfo) SetIndexType(v string) *QuerySearchLibResponseBodyIndexInfo {
	s.IndexType = &v
	return s
}

type QuerySearchLibResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySearchLibResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySearchLibResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySearchLibResponse) GoString() string {
	return s.String()
}

func (s *QuerySearchLibResponse) SetHeaders(v map[string]*string) *QuerySearchLibResponse {
	s.Headers = v
	return s
}

func (s *QuerySearchLibResponse) SetStatusCode(v int32) *QuerySearchLibResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySearchLibResponse) SetBody(v *QuerySearchLibResponseBody) *QuerySearchLibResponse {
	s.Body = v
	return s
}

type QuerySmarttagJobRequest struct {
	// The ID of the smart tagging job that you want to query. You can obtain the job ID from the response parameters of the SubmitSmarttagJob operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// 88c6ca184c0e47098a5b665e2****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The extra parameters that you want to query in the request. The value is a JSON string. Example: {"labelResultType":"auto"}. The value of labelResultType is of the STRING type. Valid values:
	//
	// 	- auto: machine tagging
	//
	// 	- hmi: tagging by human and machine
	//
	// example:
	//
	// {"labelResultType":"auto"}
	Params *string `json:"Params,omitempty" xml:"Params,omitempty"`
}

func (s QuerySmarttagJobRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmarttagJobRequest) GoString() string {
	return s.String()
}

func (s *QuerySmarttagJobRequest) SetJobId(v string) *QuerySmarttagJobRequest {
	s.JobId = &v
	return s
}

func (s *QuerySmarttagJobRequest) SetParams(v string) *QuerySmarttagJobRequest {
	s.Params = &v
	return s
}

type QuerySmarttagJobResponseBody struct {
	// The status of the job. Valid values:
	//
	// 	- **Success**: The job was successful.
	//
	// 	- **Fail**: The job failed.
	//
	// 	- **Processing**: The job is in progress.
	//
	// 	- **Submitted**: The job is submitted and waiting to be processed.
	//
	// example:
	//
	// Success
	JobStatus *string `json:"JobStatus,omitempty" xml:"JobStatus,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The analysis results of the smart tagging job. The value is an array.
	Results *QuerySmarttagJobResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Struct"`
	// The content of callback messages that are sent to Simple Message Queue (SMQ) when the information of the smart tagging job changes. For more information about the parameters contained in the callback message, see the "Callback parameters" section of this topic.
	//
	// example:
	//
	// {"userId":"123432412831"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s QuerySmarttagJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmarttagJobResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmarttagJobResponseBody) SetJobStatus(v string) *QuerySmarttagJobResponseBody {
	s.JobStatus = &v
	return s
}

func (s *QuerySmarttagJobResponseBody) SetRequestId(v string) *QuerySmarttagJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmarttagJobResponseBody) SetResults(v *QuerySmarttagJobResponseBodyResults) *QuerySmarttagJobResponseBody {
	s.Results = v
	return s
}

func (s *QuerySmarttagJobResponseBody) SetUserData(v string) *QuerySmarttagJobResponseBody {
	s.UserData = &v
	return s
}

type QuerySmarttagJobResponseBodyResults struct {
	Result []*QuerySmarttagJobResponseBodyResultsResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s QuerySmarttagJobResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s QuerySmarttagJobResponseBodyResults) GoString() string {
	return s.String()
}

func (s *QuerySmarttagJobResponseBodyResults) SetResult(v []*QuerySmarttagJobResponseBodyResultsResult) *QuerySmarttagJobResponseBodyResults {
	s.Result = v
	return s
}

type QuerySmarttagJobResponseBodyResultsResult struct {
	// The details of the analysis result. The value is a JSON string. For more information about the parameters of different result types, see the "Parameters of different result types" section of this topic.
	//
	// example:
	//
	// {"title":"example-title-****"}
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The type of the analysis result.
	//
	// 	- The type of the analysis result based on Smart tagging V1.0. Valid values:
	//
	// 1.  TextLabel: the text tag.
	//
	// 2.  VideoLabel: the video tag.
	//
	// 3.  ASR: the original result of automatic speech recognition (ASR). By default, this type of result is not returned.
	//
	// 4.  OCR: the original result of optical character recognition (OCR). By default, this type of result is not returned.
	//
	// 5.  NLP: the natural language processing (NLP)-based result. By default, this type of result is not returned.
	//
	// 	- The type of the analysis result based on Smart tagging V2.0. Valid values:
	//
	// 1.  CPVLabel
	//
	// 2.  Meta: the information about the video file, such as the title of the video. By default, this type of information is not returned.
	//
	// 	- The type of the analysis result based on Smart tagging V2.0-custom. Valid values:
	//
	// 1.  CPVLabel
	//
	// 2.  Meta: the information about the video file, such as the title of the video. By default, this type of information is not returned.
	//
	// example:
	//
	// Meta
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QuerySmarttagJobResponseBodyResultsResult) String() string {
	return tea.Prettify(s)
}

func (s QuerySmarttagJobResponseBodyResultsResult) GoString() string {
	return s.String()
}

func (s *QuerySmarttagJobResponseBodyResultsResult) SetData(v string) *QuerySmarttagJobResponseBodyResultsResult {
	s.Data = &v
	return s
}

func (s *QuerySmarttagJobResponseBodyResultsResult) SetType(v string) *QuerySmarttagJobResponseBodyResultsResult {
	s.Type = &v
	return s
}

type QuerySmarttagJobResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmarttagJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmarttagJobResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmarttagJobResponse) GoString() string {
	return s.String()
}

func (s *QuerySmarttagJobResponse) SetHeaders(v map[string]*string) *QuerySmarttagJobResponse {
	s.Headers = v
	return s
}

func (s *QuerySmarttagJobResponse) SetStatusCode(v int32) *QuerySmarttagJobResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmarttagJobResponse) SetBody(v *QuerySmarttagJobResponseBody) *QuerySmarttagJobResponse {
	s.Body = v
	return s
}

type QueryTraceAbJobListRequest struct {
	// example:
	//
	// 1627357325
	CreateTimeEnd *int64 `json:"CreateTimeEnd,omitempty" xml:"CreateTimeEnd,omitempty"`
	// example:
	//
	// 1627357322
	CreateTimeStart *int64 `json:"CreateTimeStart,omitempty" xml:"CreateTimeStart,omitempty"`
	// example:
	//
	// ****d80e4e4044975745c14b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 0
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// ****437bd2b51105d07b12a9****
	TraceMediaId *string `json:"TraceMediaId,omitempty" xml:"TraceMediaId,omitempty"`
}

func (s QueryTraceAbJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceAbJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceAbJobListRequest) SetCreateTimeEnd(v int64) *QueryTraceAbJobListRequest {
	s.CreateTimeEnd = &v
	return s
}

func (s *QueryTraceAbJobListRequest) SetCreateTimeStart(v int64) *QueryTraceAbJobListRequest {
	s.CreateTimeStart = &v
	return s
}

func (s *QueryTraceAbJobListRequest) SetJobId(v string) *QueryTraceAbJobListRequest {
	s.JobId = &v
	return s
}

func (s *QueryTraceAbJobListRequest) SetPageNumber(v int64) *QueryTraceAbJobListRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryTraceAbJobListRequest) SetPageSize(v int64) *QueryTraceAbJobListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryTraceAbJobListRequest) SetTraceMediaId(v string) *QueryTraceAbJobListRequest {
	s.TraceMediaId = &v
	return s
}

type QueryTraceAbJobListResponseBody struct {
	Data []*QueryTraceAbJobListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// ok
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 200
	StatusCode *int64 `json:"StatusCode,omitempty" xml:"StatusCode,omitempty"`
}

func (s QueryTraceAbJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceAbJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTraceAbJobListResponseBody) SetData(v []*QueryTraceAbJobListResponseBodyData) *QueryTraceAbJobListResponseBody {
	s.Data = v
	return s
}

func (s *QueryTraceAbJobListResponseBody) SetMessage(v string) *QueryTraceAbJobListResponseBody {
	s.Message = &v
	return s
}

func (s *QueryTraceAbJobListResponseBody) SetRequestId(v string) *QueryTraceAbJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTraceAbJobListResponseBody) SetStatusCode(v int64) *QueryTraceAbJobListResponseBody {
	s.StatusCode = &v
	return s
}

type QueryTraceAbJobListResponseBodyData struct {
	// example:
	//
	// 1627357322
	GmtCreate *int64 `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	// example:
	//
	// 1627357322
	GmtModified *int64                                    `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Input       *QueryTraceAbJobListResponseBodyDataInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// example:
	//
	// bfb786c639894f4d80648792021eff90
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 2
	Level  *int64                                     `json:"Level,omitempty" xml:"Level,omitempty"`
	Output *QueryTraceAbJobListResponseBodyDataOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// example:
	//
	// {"Code":"success","Message":"ok"}
	Result *string `json:"Result,omitempty" xml:"Result,omitempty"`
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// ****437bd2b51105d07b12a9****
	TraceMediaId *string `json:"TraceMediaId,omitempty" xml:"TraceMediaId,omitempty"`
	// example:
	//
	// 123
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	// example:
	//
	// 13466932****
	UserId *int64 `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s QueryTraceAbJobListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceAbJobListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryTraceAbJobListResponseBodyData) SetGmtCreate(v int64) *QueryTraceAbJobListResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *QueryTraceAbJobListResponseBodyData) SetGmtModified(v int64) *QueryTraceAbJobListResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *QueryTraceAbJobListResponseBodyData) SetInput(v *QueryTraceAbJobListResponseBodyDataInput) *QueryTraceAbJobListResponseBodyData {
	s.Input = v
	return s
}

func (s *QueryTraceAbJobListResponseBodyData) SetJobId(v string) *QueryTraceAbJobListResponseBodyData {
	s.JobId = &v
	return s
}

func (s *QueryTraceAbJobListResponseBodyData) SetLevel(v int64) *QueryTraceAbJobListResponseBodyData {
	s.Level = &v
	return s
}

func (s *QueryTraceAbJobListResponseBodyData) SetOutput(v *QueryTraceAbJobListResponseBodyDataOutput) *QueryTraceAbJobListResponseBodyData {
	s.Output = v
	return s
}

func (s *QueryTraceAbJobListResponseBodyData) SetResult(v string) *QueryTraceAbJobListResponseBodyData {
	s.Result = &v
	return s
}

func (s *QueryTraceAbJobListResponseBodyData) SetStatus(v string) *QueryTraceAbJobListResponseBodyData {
	s.Status = &v
	return s
}

func (s *QueryTraceAbJobListResponseBodyData) SetTraceMediaId(v string) *QueryTraceAbJobListResponseBodyData {
	s.TraceMediaId = &v
	return s
}

func (s *QueryTraceAbJobListResponseBodyData) SetUserData(v string) *QueryTraceAbJobListResponseBodyData {
	s.UserData = &v
	return s
}

func (s *QueryTraceAbJobListResponseBodyData) SetUserId(v int64) *QueryTraceAbJobListResponseBodyData {
	s.UserId = &v
	return s
}

type QueryTraceAbJobListResponseBodyDataInput struct {
	// example:
	//
	// oss://bucket/object
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryTraceAbJobListResponseBodyDataInput) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceAbJobListResponseBodyDataInput) GoString() string {
	return s.String()
}

func (s *QueryTraceAbJobListResponseBodyDataInput) SetMedia(v string) *QueryTraceAbJobListResponseBodyDataInput {
	s.Media = &v
	return s
}

func (s *QueryTraceAbJobListResponseBodyDataInput) SetType(v string) *QueryTraceAbJobListResponseBodyDataInput {
	s.Type = &v
	return s
}

type QueryTraceAbJobListResponseBodyDataOutput struct {
	// example:
	//
	// oss://bucket/dir/
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryTraceAbJobListResponseBodyDataOutput) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceAbJobListResponseBodyDataOutput) GoString() string {
	return s.String()
}

func (s *QueryTraceAbJobListResponseBodyDataOutput) SetMedia(v string) *QueryTraceAbJobListResponseBodyDataOutput {
	s.Media = &v
	return s
}

func (s *QueryTraceAbJobListResponseBodyDataOutput) SetType(v string) *QueryTraceAbJobListResponseBodyDataOutput {
	s.Type = &v
	return s
}

type QueryTraceAbJobListResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryTraceAbJobListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryTraceAbJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceAbJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceAbJobListResponse) SetHeaders(v map[string]*string) *QueryTraceAbJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryTraceAbJobListResponse) SetStatusCode(v int32) *QueryTraceAbJobListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTraceAbJobListResponse) SetBody(v *QueryTraceAbJobListResponseBody) *QueryTraceAbJobListResponse {
	s.Body = v
	return s
}

type QueryTraceExtractJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 31fa3c9ca8134fb4b0b0f7878301****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s QueryTraceExtractJobRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceExtractJobRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceExtractJobRequest) SetJobId(v string) *QueryTraceExtractJobRequest {
	s.JobId = &v
	return s
}

type QueryTraceExtractJobResponseBody struct {
	Data *QueryTraceExtractJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// ok
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// *****ACB-44F2-5F2D-88D7-1283E70*****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 200
	StatusCode *int64 `json:"StatusCode,omitempty" xml:"StatusCode,omitempty"`
}

func (s QueryTraceExtractJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceExtractJobResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTraceExtractJobResponseBody) SetData(v *QueryTraceExtractJobResponseBodyData) *QueryTraceExtractJobResponseBody {
	s.Data = v
	return s
}

func (s *QueryTraceExtractJobResponseBody) SetMessage(v string) *QueryTraceExtractJobResponseBody {
	s.Message = &v
	return s
}

func (s *QueryTraceExtractJobResponseBody) SetRequestId(v string) *QueryTraceExtractJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTraceExtractJobResponseBody) SetStatusCode(v int64) *QueryTraceExtractJobResponseBody {
	s.StatusCode = &v
	return s
}

type QueryTraceExtractJobResponseBodyData struct {
	Trace *string `json:"Trace,omitempty" xml:"Trace,omitempty"`
}

func (s QueryTraceExtractJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceExtractJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryTraceExtractJobResponseBodyData) SetTrace(v string) *QueryTraceExtractJobResponseBodyData {
	s.Trace = &v
	return s
}

type QueryTraceExtractJobResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryTraceExtractJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryTraceExtractJobResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceExtractJobResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceExtractJobResponse) SetHeaders(v map[string]*string) *QueryTraceExtractJobResponse {
	s.Headers = v
	return s
}

func (s *QueryTraceExtractJobResponse) SetStatusCode(v int32) *QueryTraceExtractJobResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTraceExtractJobResponse) SetBody(v *QueryTraceExtractJobResponseBody) *QueryTraceExtractJobResponse {
	s.Body = v
	return s
}

type QueryTraceM3u8JobListRequest struct {
	// example:
	//
	// 1627357325
	CreateTimeEnd *int64 `json:"CreateTimeEnd,omitempty" xml:"CreateTimeEnd,omitempty"`
	// example:
	//
	// 1627357322
	CreateTimeStart *int64 `json:"CreateTimeStart,omitempty" xml:"CreateTimeStart,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 0
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s QueryTraceM3u8JobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceM3u8JobListRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceM3u8JobListRequest) SetCreateTimeEnd(v int64) *QueryTraceM3u8JobListRequest {
	s.CreateTimeEnd = &v
	return s
}

func (s *QueryTraceM3u8JobListRequest) SetCreateTimeStart(v int64) *QueryTraceM3u8JobListRequest {
	s.CreateTimeStart = &v
	return s
}

func (s *QueryTraceM3u8JobListRequest) SetJobId(v string) *QueryTraceM3u8JobListRequest {
	s.JobId = &v
	return s
}

func (s *QueryTraceM3u8JobListRequest) SetPageNumber(v int64) *QueryTraceM3u8JobListRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryTraceM3u8JobListRequest) SetPageSize(v int64) *QueryTraceM3u8JobListRequest {
	s.PageSize = &v
	return s
}

type QueryTraceM3u8JobListResponseBody struct {
	Data []*QueryTraceM3u8JobListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// ok
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 200
	StatusCode *int64 `json:"StatusCode,omitempty" xml:"StatusCode,omitempty"`
}

func (s QueryTraceM3u8JobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceM3u8JobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTraceM3u8JobListResponseBody) SetData(v []*QueryTraceM3u8JobListResponseBodyData) *QueryTraceM3u8JobListResponseBody {
	s.Data = v
	return s
}

func (s *QueryTraceM3u8JobListResponseBody) SetMessage(v string) *QueryTraceM3u8JobListResponseBody {
	s.Message = &v
	return s
}

func (s *QueryTraceM3u8JobListResponseBody) SetRequestId(v string) *QueryTraceM3u8JobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTraceM3u8JobListResponseBody) SetStatusCode(v int64) *QueryTraceM3u8JobListResponseBody {
	s.StatusCode = &v
	return s
}

type QueryTraceM3u8JobListResponseBodyData struct {
	// example:
	//
	// 1627357322
	GmtCreate *int64 `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	// example:
	//
	// 1627357322
	GmtModified *int64 `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	// example:
	//
	// ****d718e2ff4f018ccf419a7b71****
	JobId  *string                                      `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Output *QueryTraceM3u8JobListResponseBodyDataOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// test
	Trace *string `json:"Trace,omitempty" xml:"Trace,omitempty"`
	// example:
	//
	// ****437bd2b105d07b12a9a82****
	TraceMediaId *string `json:"TraceMediaId,omitempty" xml:"TraceMediaId,omitempty"`
	// example:
	//
	// 112
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	// example:
	//
	// 1346693276****
	UserId *int64 `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s QueryTraceM3u8JobListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceM3u8JobListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryTraceM3u8JobListResponseBodyData) SetGmtCreate(v int64) *QueryTraceM3u8JobListResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *QueryTraceM3u8JobListResponseBodyData) SetGmtModified(v int64) *QueryTraceM3u8JobListResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *QueryTraceM3u8JobListResponseBodyData) SetJobId(v string) *QueryTraceM3u8JobListResponseBodyData {
	s.JobId = &v
	return s
}

func (s *QueryTraceM3u8JobListResponseBodyData) SetOutput(v *QueryTraceM3u8JobListResponseBodyDataOutput) *QueryTraceM3u8JobListResponseBodyData {
	s.Output = v
	return s
}

func (s *QueryTraceM3u8JobListResponseBodyData) SetStatus(v string) *QueryTraceM3u8JobListResponseBodyData {
	s.Status = &v
	return s
}

func (s *QueryTraceM3u8JobListResponseBodyData) SetTrace(v string) *QueryTraceM3u8JobListResponseBodyData {
	s.Trace = &v
	return s
}

func (s *QueryTraceM3u8JobListResponseBodyData) SetTraceMediaId(v string) *QueryTraceM3u8JobListResponseBodyData {
	s.TraceMediaId = &v
	return s
}

func (s *QueryTraceM3u8JobListResponseBodyData) SetUserData(v string) *QueryTraceM3u8JobListResponseBodyData {
	s.UserData = &v
	return s
}

func (s *QueryTraceM3u8JobListResponseBodyData) SetUserId(v int64) *QueryTraceM3u8JobListResponseBodyData {
	s.UserId = &v
	return s
}

type QueryTraceM3u8JobListResponseBodyDataOutput struct {
	// example:
	//
	// oss://bucket/object
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryTraceM3u8JobListResponseBodyDataOutput) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceM3u8JobListResponseBodyDataOutput) GoString() string {
	return s.String()
}

func (s *QueryTraceM3u8JobListResponseBodyDataOutput) SetMedia(v string) *QueryTraceM3u8JobListResponseBodyDataOutput {
	s.Media = &v
	return s
}

func (s *QueryTraceM3u8JobListResponseBodyDataOutput) SetType(v string) *QueryTraceM3u8JobListResponseBodyDataOutput {
	s.Type = &v
	return s
}

type QueryTraceM3u8JobListResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryTraceM3u8JobListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryTraceM3u8JobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceM3u8JobListResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceM3u8JobListResponse) SetHeaders(v map[string]*string) *QueryTraceM3u8JobListResponse {
	s.Headers = v
	return s
}

func (s *QueryTraceM3u8JobListResponse) SetStatusCode(v int32) *QueryTraceM3u8JobListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTraceM3u8JobListResponse) SetBody(v *QueryTraceM3u8JobListResponseBody) *QueryTraceM3u8JobListResponse {
	s.Body = v
	return s
}

type RefreshUploadMediaRequest struct {
	// The ID of the media asset.
	//
	// example:
	//
	// 411bed50018971edb60b0764a0ec6***
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s RefreshUploadMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s RefreshUploadMediaRequest) GoString() string {
	return s.String()
}

func (s *RefreshUploadMediaRequest) SetMediaId(v string) *RefreshUploadMediaRequest {
	s.MediaId = &v
	return s
}

type RefreshUploadMediaResponseBody struct {
	// The ID of the media asset.
	//
	// example:
	//
	// c2e77390f75271ec802f0674a2ce6***
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The upload URL.
	//
	// >  The returned upload URL is a Base64-encoded URL. You must decode the Base64-encoded upload URL before you use an SDK or call an API operation to upload media files. You need to parse UploadAddress only if you use Object Storage Service (OSS) SDK or call an OSS API operation to upload media files.
	//
	// example:
	//
	// eyJFbmRwb2ludCI6Imh0dHBzOi8vb3NzLWNuLXNoYW5naGFpLmFsaXl1bmNzLmNvbSIsIkJ1Y2tldCI6InN6aGQtdmlkZW8iLCJGaWxlTmFtZSI6InZvZC0yOTYzMWEvc3YvNTBmYTJlODQtMTgxMjdhZGRiMTcvNTBmYTJlODQtMTgxMjdhZGRiM***
	UploadAddress *string `json:"UploadAddress,omitempty" xml:"UploadAddress,omitempty"`
	// The upload credential.
	//
	// >  The returned upload credential is a Base64-encoded value. You must decode the Base64-encoded upload credential before you use an SDK or call an API operation to upload media files. You need to parse UploadAuth only if you use OSS SDK or call an OSS API operation to upload media files.
	//
	// example:
	//
	// eyJBY2Nlc3NLZXlJZCI6IkxUQUk0Rm53bTk1dHdxQjMxR3IzSE5hRCIsIkFjY2Vzc0tleVNlY3JldCI6Ik9lWllKR0dTMTlkNkZaM1E3UVpJQmdmSVdnM3BPaiIsIkV4cGlyYXRpb24iOiI***
	UploadAuth *string `json:"UploadAuth,omitempty" xml:"UploadAuth,omitempty"`
}

func (s RefreshUploadMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RefreshUploadMediaResponseBody) GoString() string {
	return s.String()
}

func (s *RefreshUploadMediaResponseBody) SetMediaId(v string) *RefreshUploadMediaResponseBody {
	s.MediaId = &v
	return s
}

func (s *RefreshUploadMediaResponseBody) SetRequestId(v string) *RefreshUploadMediaResponseBody {
	s.RequestId = &v
	return s
}

func (s *RefreshUploadMediaResponseBody) SetUploadAddress(v string) *RefreshUploadMediaResponseBody {
	s.UploadAddress = &v
	return s
}

func (s *RefreshUploadMediaResponseBody) SetUploadAuth(v string) *RefreshUploadMediaResponseBody {
	s.UploadAuth = &v
	return s
}

type RefreshUploadMediaResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RefreshUploadMediaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RefreshUploadMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s RefreshUploadMediaResponse) GoString() string {
	return s.String()
}

func (s *RefreshUploadMediaResponse) SetHeaders(v map[string]*string) *RefreshUploadMediaResponse {
	s.Headers = v
	return s
}

func (s *RefreshUploadMediaResponse) SetStatusCode(v int32) *RefreshUploadMediaResponse {
	s.StatusCode = &v
	return s
}

func (s *RefreshUploadMediaResponse) SetBody(v *RefreshUploadMediaResponseBody) *RefreshUploadMediaResponse {
	s.Body = v
	return s
}

type RegisterMediaInfoRequest struct {
	// The business type of the media asset. Valid values:
	//
	// 	- subtitles
	//
	// 	- watermark
	//
	// 	- opening
	//
	// 	- ending
	//
	// 	- general
	//
	// example:
	//
	// opening
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// The category ID.
	//
	// example:
	//
	// 3048
	CateId *int64 `json:"CateId,omitempty" xml:"CateId,omitempty"`
	// The client token that is used to ensure the idempotence of the request. The value must be a UUID that contains 32 characters.
	//
	// example:
	//
	// ****0311a423d11a5f7dee713535****
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The thumbnail URL of the media asset.
	//
	// 	- The value can be up to 128 bytes in length.
	//
	// 	- The value must be encoded in UTF-8.
	//
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// The description of the media asset.
	//
	// 	- The value can be up to 1,024 bytes in length.
	//
	// 	- The value must be encoded in UTF-8.
	//
	// example:
	//
	// defaultDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The URL of the media asset in another service. The URL is associated with the ID of the media asset in IMS. The URL cannot be modified once registered. The following types of URLs are supported:
	//
	// 	- OSS URL in one of the following formats:
	//
	// http(s)://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4
	//
	// oss://example-bucket/example.mp4: In this format, it is considered by default that the region of the OSS bucket in which the media asset resides is the same as the region in which IMS is activated.
	//
	// 	- URL of an ApsaraVideo VOD media asset
	//
	// vod://\\*\\*\\*20b48fb04483915d4f2cd8ac\\*\\*\\*\\*
	//
	// This parameter is required.
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// The tags of the media asset.
	//
	// 	- Up to 16 tags are supported.
	//
	// 	- Separate multiple tags with commas (,).
	//
	// 	- Each tag can be up to 32 bytes in length.
	//
	// 	- The value must be encoded in UTF-8.
	//
	// example:
	//
	// tag1,tag2
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// The type of the media asset. Valid values:
	//
	// 	- image
	//
	// 	- video
	//
	// 	- audio
	//
	// 	- text
	//
	// We recommend that you specify this parameter based on your business requirements. If you set InputURL to an OSS URL, the media asset type can be automatically determined based on the file name extension. For more information
	//
	// <props="china">, see [File formats](https://help.aliyun.com/document_detail/466207.html).
	//
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// Specifies whether to overwrite the media asset that has been registered by using the same URL. Default value: false. Valid values:
	//
	// \\- true: If a media asset has been registered by using the same URL, the original media asset is deleted and the new media asset is registered.
	//
	// \\- false: If a media asset has been registered by using the same URL, the new media asset is not registered. A URL cannot be used to register multiple media assets.
	//
	// example:
	//
	// true
	Overwrite *bool `json:"Overwrite,omitempty" xml:"Overwrite,omitempty"`
	// The custom ID. The ID can be 6 to 64 characters in length and can contain only letters, digits, hyphens (-), and underscores (_). Make sure that the ID is unique among users.
	//
	// example:
	//
	// 123-123
	ReferenceId *string `json:"ReferenceId,omitempty" xml:"ReferenceId,omitempty"`
	// The registration configurations.
	//
	// By default, a sprite is generated for the media asset. You can set NeedSprite to false to disable automatic sprite generation.
	//
	// By default, a snapshot is generated for the media asset. You can set NeedSnapshot to false to disable automatic snapshot generation.
	//
	// example:
	//
	// {
	//
	//       "NeedSprite": "false"
	//
	// }
	RegisterConfig *string `json:"RegisterConfig,omitempty" xml:"RegisterConfig,omitempty"`
	// The ID of the smart tagging template. Valid values:
	//
	// 	- S00000101-300080: the system template that supports natural language processing (NLP) for content recognition.
	//
	// 	- S00000103-000001: the system template that supports NLP for content recognition and all tagging capabilities.
	//
	// 	- S00000103-000002: the system template that supports all tagging capabilities but does not support NLP for content recognition.
	//
	// After you configure this parameter, a smart tag analysis task is automatically initiated after the media asset is registered. For more information about the billable items<props="china">, see [Smart tagging](https://help.aliyun.com/zh/ims/media-ai-billing?spm=a2c4g.11186623.0.0.3147392dWwlSjL#p-k38-3rb-dug).
	//
	// example:
	//
	// S00000101-300080
	SmartTagTemplateId *string `json:"SmartTagTemplateId,omitempty" xml:"SmartTagTemplateId,omitempty"`
	// The title. If you do not specify this parameter, a default title is automatically generated based on the date.
	//
	// 	- The value can be up to 128 bytes in length.
	//
	// 	- The value must be encoded in UTF-8.
	//
	// example:
	//
	// defaultTitle
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// The user data. You can specify a custom callback URL. For more information<props="china"> ,see [Configure a callback upon editing completion](https://help.aliyun.com/document_detail/451631.html).
	//
	// 	- The value can be up to 1,024 bytes in length.
	//
	// 	- The value must be encoded in UTF-8.
	//
	// 	- The value must be in the JSON format.
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	// The workflow ID.
	//
	// example:
	//
	// ******b4fb044839815d4f2cd8******
	WorkflowId *string `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
}

func (s RegisterMediaInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaInfoRequest) GoString() string {
	return s.String()
}

func (s *RegisterMediaInfoRequest) SetBusinessType(v string) *RegisterMediaInfoRequest {
	s.BusinessType = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetCateId(v int64) *RegisterMediaInfoRequest {
	s.CateId = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetClientToken(v string) *RegisterMediaInfoRequest {
	s.ClientToken = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetCoverURL(v string) *RegisterMediaInfoRequest {
	s.CoverURL = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetDescription(v string) *RegisterMediaInfoRequest {
	s.Description = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetInputURL(v string) *RegisterMediaInfoRequest {
	s.InputURL = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetMediaTags(v string) *RegisterMediaInfoRequest {
	s.MediaTags = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetMediaType(v string) *RegisterMediaInfoRequest {
	s.MediaType = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetOverwrite(v bool) *RegisterMediaInfoRequest {
	s.Overwrite = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetReferenceId(v string) *RegisterMediaInfoRequest {
	s.ReferenceId = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetRegisterConfig(v string) *RegisterMediaInfoRequest {
	s.RegisterConfig = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetSmartTagTemplateId(v string) *RegisterMediaInfoRequest {
	s.SmartTagTemplateId = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetTitle(v string) *RegisterMediaInfoRequest {
	s.Title = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetUserData(v string) *RegisterMediaInfoRequest {
	s.UserData = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetWorkflowId(v string) *RegisterMediaInfoRequest {
	s.WorkflowId = &v
	return s
}

type RegisterMediaInfoResponseBody struct {
	// The ID of the media asset in IMS.
	//
	// example:
	//
	// ******b48fb04483915d4f2cd8******
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******5A-CAAC-4850-A3AF-B74606******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RegisterMediaInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaInfoResponseBody) GoString() string {
	return s.String()
}

func (s *RegisterMediaInfoResponseBody) SetMediaId(v string) *RegisterMediaInfoResponseBody {
	s.MediaId = &v
	return s
}

func (s *RegisterMediaInfoResponseBody) SetRequestId(v string) *RegisterMediaInfoResponseBody {
	s.RequestId = &v
	return s
}

type RegisterMediaInfoResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RegisterMediaInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RegisterMediaInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaInfoResponse) GoString() string {
	return s.String()
}

func (s *RegisterMediaInfoResponse) SetHeaders(v map[string]*string) *RegisterMediaInfoResponse {
	s.Headers = v
	return s
}

func (s *RegisterMediaInfoResponse) SetStatusCode(v int32) *RegisterMediaInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *RegisterMediaInfoResponse) SetBody(v *RegisterMediaInfoResponseBody) *RegisterMediaInfoResponse {
	s.Body = v
	return s
}

type RegisterMediaStreamRequest struct {
	// The URL of the media asset in another service. The URL is associated with the ID of the media asset in IMS. The URL cannot be modified once registered.
	//
	// Set this parameter to the OSS URL of the media asset. The following formats are supported:
	//
	// http(s)://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4
	//
	// oss://example-bucket/example.mp4: In this format, it is considered by default that the region of the OSS bucket in which the media asset resides is the same as the region in which IMS is activated.
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// 5e778ec0027b71ed80a8909598506***
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The user data.
	//
	// example:
	//
	// {"MessageCallback":{"CallbackURL":"http://test.test.com"}, "Extend":{"localId":"xxx","test":"www"}}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s RegisterMediaStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaStreamRequest) GoString() string {
	return s.String()
}

func (s *RegisterMediaStreamRequest) SetInputURL(v string) *RegisterMediaStreamRequest {
	s.InputURL = &v
	return s
}

func (s *RegisterMediaStreamRequest) SetMediaId(v string) *RegisterMediaStreamRequest {
	s.MediaId = &v
	return s
}

func (s *RegisterMediaStreamRequest) SetUserData(v string) *RegisterMediaStreamRequest {
	s.UserData = &v
	return s
}

type RegisterMediaStreamResponseBody struct {
	// The ID of the media asset.
	//
	// example:
	//
	// 5e778ec0027b71ed80a8909598506302
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RegisterMediaStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaStreamResponseBody) GoString() string {
	return s.String()
}

func (s *RegisterMediaStreamResponseBody) SetMediaId(v string) *RegisterMediaStreamResponseBody {
	s.MediaId = &v
	return s
}

func (s *RegisterMediaStreamResponseBody) SetRequestId(v string) *RegisterMediaStreamResponseBody {
	s.RequestId = &v
	return s
}

type RegisterMediaStreamResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RegisterMediaStreamResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RegisterMediaStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaStreamResponse) GoString() string {
	return s.String()
}

func (s *RegisterMediaStreamResponse) SetHeaders(v map[string]*string) *RegisterMediaStreamResponse {
	s.Headers = v
	return s
}

func (s *RegisterMediaStreamResponse) SetStatusCode(v int32) *RegisterMediaStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *RegisterMediaStreamResponse) SetBody(v *RegisterMediaStreamResponseBody) *RegisterMediaStreamResponse {
	s.Body = v
	return s
}

type SearchEditingProjectRequest struct {
	// The source of the project.
	//
	// \\-OpenAPI
	//
	// \\-AliyunConsole
	//
	// \\-WebSDK
	//
	// Valid values:
	//
	// 	- AliyunConsole: The project is created in the Alibaba Cloud console.
	//
	// 	- WebSDK: The project is created by using the SDK for Web.
	//
	// 	- OpenAPI: The project is created by calling API operations.
	//
	// example:
	//
	// WebSDK
	CreateSource *string `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	// The end of the time range to query. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2017-01-11T12:00:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10. Valid values: 1 to 100.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The type of the editing project. Default value: EditingProject. Valid values:
	//
	// 	- EditingProject: a regular editing project.
	//
	// 	- LiveEditingProject: a live stream editing project.
	//
	// example:
	//
	// EditingProject
	ProjectType *string `json:"ProjectType,omitempty" xml:"ProjectType,omitempty"`
	// The sorting rule of results. Valid values:
	//
	// \\- CreationTime:Desc (default): The results are sorted in reverse chronological order based on the creation time.
	//
	// \\- CreationTime:Asc: The results are sorted in chronological order based on the creation time.
	//
	// example:
	//
	// CreationTime:Desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The beginning of the time range to query. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2017-01-11T12:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The status of the online editing project. Separate multiple values with commas (,). By default, all online editing projects are queried.
	//
	// Valid values:
	//
	// \\-Draft
	//
	// \\-Producing
	//
	// \\-Produced
	//
	// \\-ProduceFailed
	//
	// example:
	//
	// Producing
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The template type. Valid values:
	//
	// \\-Timeline
	//
	// \\-VETemplate
	//
	// Valid values:
	//
	// 	- Timeline: regular template.
	//
	// 	- VETemplate: advanced template.
	//
	// 	- None: No template is used.
	//
	// example:
	//
	// Timeline
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
}

func (s SearchEditingProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchEditingProjectRequest) GoString() string {
	return s.String()
}

func (s *SearchEditingProjectRequest) SetCreateSource(v string) *SearchEditingProjectRequest {
	s.CreateSource = &v
	return s
}

func (s *SearchEditingProjectRequest) SetEndTime(v string) *SearchEditingProjectRequest {
	s.EndTime = &v
	return s
}

func (s *SearchEditingProjectRequest) SetPageNo(v int64) *SearchEditingProjectRequest {
	s.PageNo = &v
	return s
}

func (s *SearchEditingProjectRequest) SetPageSize(v int64) *SearchEditingProjectRequest {
	s.PageSize = &v
	return s
}

func (s *SearchEditingProjectRequest) SetProjectType(v string) *SearchEditingProjectRequest {
	s.ProjectType = &v
	return s
}

func (s *SearchEditingProjectRequest) SetSortBy(v string) *SearchEditingProjectRequest {
	s.SortBy = &v
	return s
}

func (s *SearchEditingProjectRequest) SetStartTime(v string) *SearchEditingProjectRequest {
	s.StartTime = &v
	return s
}

func (s *SearchEditingProjectRequest) SetStatus(v string) *SearchEditingProjectRequest {
	s.Status = &v
	return s
}

func (s *SearchEditingProjectRequest) SetTemplateType(v string) *SearchEditingProjectRequest {
	s.TemplateType = &v
	return s
}

type SearchEditingProjectResponseBody struct {
	// The maximum number of entries returned on a single page. The value is set to the maximum number of entries returned on each page except for the last page.
	//
	// Examples:
	//
	// Valid example: 10,10,5. Invalid example: 10,5,10.
	//
	// example:
	//
	// 10
	MaxResults *int64 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.
	//
	// example:
	//
	// null
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The queried online editing projects.
	ProjectList []*SearchEditingProjectResponseBodyProjectList `json:"ProjectList,omitempty" xml:"ProjectList,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// ****9262E3DA-07FA-4862-FCBB6BC61D08*****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Optional. The total number of entries returned. By default, this parameter is not returned.
	//
	// example:
	//
	// 110
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s SearchEditingProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchEditingProjectResponseBody) GoString() string {
	return s.String()
}

func (s *SearchEditingProjectResponseBody) SetMaxResults(v int64) *SearchEditingProjectResponseBody {
	s.MaxResults = &v
	return s
}

func (s *SearchEditingProjectResponseBody) SetNextToken(v string) *SearchEditingProjectResponseBody {
	s.NextToken = &v
	return s
}

func (s *SearchEditingProjectResponseBody) SetProjectList(v []*SearchEditingProjectResponseBodyProjectList) *SearchEditingProjectResponseBody {
	s.ProjectList = v
	return s
}

func (s *SearchEditingProjectResponseBody) SetRequestId(v string) *SearchEditingProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchEditingProjectResponseBody) SetTotalCount(v int64) *SearchEditingProjectResponseBody {
	s.TotalCount = &v
	return s
}

type SearchEditingProjectResponseBodyProjectList struct {
	// The business configuration of the project. This parameter can be ignored for general editing projects.
	//
	// example:
	//
	// { "OutputMediaConfig" : { "StorageLocation": "test-bucket.oss-cn-shanghai.aliyuncs.com", "Path": "test-path" }, "OutputMediaTarget": "oss-object", "ReservationTime": "2021-06-21T08:05:00Z" }
	BusinessConfig *string `json:"BusinessConfig,omitempty" xml:"BusinessConfig,omitempty"`
	// The business status of the project. This parameter can be ignored for general editing projects. Valid values:
	//
	// Valid values:
	//
	// 	- BroadCasting:
	//
	// 	- ReservationCanceled
	//
	// 	- LiveFinished
	//
	// 	- LoadingFailed
	//
	// 	- Reserving
	//
	// example:
	//
	// Reserving
	BusinessStatus *string `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty"`
	// The thumbnail URL of the online editing project.
	//
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example-cover.jpg
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// The method for editing the online editing project.
	//
	// \\-OpenAPI
	//
	// \\-AliyunConsole
	//
	// \\-WebSDK
	//
	// Valid values:
	//
	// 	- AliyunConsole: The project is created in the Alibaba Cloud console.
	//
	// 	- WebSDK: The project is created by using the SDK for Web.
	//
	// 	- OpenAPI: The project is created by calling API operations.
	//
	// example:
	//
	// OpenAPI
	CreateSource *string `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	// The time when the online editing project was created.
	//
	// example:
	//
	// 2017-01-11T12:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The description of the online editing project.
	//
	// example:
	//
	// sample description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The total length of the online editing project. Unit: seconds.
	//
	// example:
	//
	// 30.100000
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The error code returned if the production of the online editing project failed.
	//
	// example:
	//
	// InvalidParameter
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The error message returned if the production of the online editing project failed.
	//
	// example:
	//
	// "EventTime":"2021-08-12T10:04:15Z","ErrorCode":"InvalidParameter","ErrorMessage":"The specified parameter \\"LiveStreamConfig\\" is not valid. specified parameter example is not valid.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The method used when the online editing project was last modified.
	//
	// example:
	//
	// 2017-01-11T12:00:00Z
	ModifiedSource *string `json:"ModifiedSource,omitempty" xml:"ModifiedSource,omitempty"`
	// The time when the online editing project was last modified.
	//
	// example:
	//
	// 2017-01-11T12:00:00Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The ID of the online editing project.
	//
	// example:
	//
	// ****fddd7748b58bf1d47e95****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The type of the editing project.
	//
	// Valid values:
	//
	// 	- LiveEditingProject: a live stream editing project.
	//
	// 	- EditingProject: a regular editing project.
	//
	// example:
	//
	// EditingProject
	ProjectType *string `json:"ProjectType,omitempty" xml:"ProjectType,omitempty"`
	// The status of the online editing project. Valid values:
	//
	// \\-Draft
	//
	// \\-Editing
	//
	// \\-Producing
	//
	// \\-Produced
	//
	// \\-ProduceFailed
	//
	// Valid values:
	//
	// 	- Draft
	//
	// 	- Produced
	//
	// 	- Editing
	//
	// 	- Producing
	//
	// 	- ProduceFailed
	//
	// example:
	//
	// PRODUCE_FAILED
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the template.
	//
	// example:
	//
	// Timeline
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	// The timeline of the online editing project.
	//
	// example:
	//
	// {"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****4d7cf14dc7b83b0e801c****"},{"MediaId":"****4d7cf14dc7b83b0e801c****"}]}]}
	Timeline *string `json:"Timeline,omitempty" xml:"Timeline,omitempty"`
	// The title of the online editing project.
	//
	// example:
	//
	// title
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s SearchEditingProjectResponseBodyProjectList) String() string {
	return tea.Prettify(s)
}

func (s SearchEditingProjectResponseBodyProjectList) GoString() string {
	return s.String()
}

func (s *SearchEditingProjectResponseBodyProjectList) SetBusinessConfig(v string) *SearchEditingProjectResponseBodyProjectList {
	s.BusinessConfig = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetBusinessStatus(v string) *SearchEditingProjectResponseBodyProjectList {
	s.BusinessStatus = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetCoverURL(v string) *SearchEditingProjectResponseBodyProjectList {
	s.CoverURL = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetCreateSource(v string) *SearchEditingProjectResponseBodyProjectList {
	s.CreateSource = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetCreateTime(v string) *SearchEditingProjectResponseBodyProjectList {
	s.CreateTime = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetDescription(v string) *SearchEditingProjectResponseBodyProjectList {
	s.Description = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetDuration(v int64) *SearchEditingProjectResponseBodyProjectList {
	s.Duration = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetErrorCode(v string) *SearchEditingProjectResponseBodyProjectList {
	s.ErrorCode = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetErrorMessage(v string) *SearchEditingProjectResponseBodyProjectList {
	s.ErrorMessage = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetModifiedSource(v string) *SearchEditingProjectResponseBodyProjectList {
	s.ModifiedSource = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetModifiedTime(v string) *SearchEditingProjectResponseBodyProjectList {
	s.ModifiedTime = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetProjectId(v string) *SearchEditingProjectResponseBodyProjectList {
	s.ProjectId = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetProjectType(v string) *SearchEditingProjectResponseBodyProjectList {
	s.ProjectType = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetStatus(v string) *SearchEditingProjectResponseBodyProjectList {
	s.Status = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetTemplateType(v string) *SearchEditingProjectResponseBodyProjectList {
	s.TemplateType = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetTimeline(v string) *SearchEditingProjectResponseBodyProjectList {
	s.Timeline = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetTitle(v string) *SearchEditingProjectResponseBodyProjectList {
	s.Title = &v
	return s
}

type SearchEditingProjectResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchEditingProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchEditingProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchEditingProjectResponse) GoString() string {
	return s.String()
}

func (s *SearchEditingProjectResponse) SetHeaders(v map[string]*string) *SearchEditingProjectResponse {
	s.Headers = v
	return s
}

func (s *SearchEditingProjectResponse) SetStatusCode(v int32) *SearchEditingProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchEditingProjectResponse) SetBody(v *SearchEditingProjectResponseBody) *SearchEditingProjectResponse {
	s.Body = v
	return s
}

type SearchIndexJobRerunRequest struct {
	// The ID of the media asset. Separate multiple IDs with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// ******b48fb04483915d4f2cd8******,******c48fb37407365d4f2cd8******
	MediaIds *string `json:"MediaIds,omitempty" xml:"MediaIds,omitempty"`
	// The search library.
	//
	// example:
	//
	// test-1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
	// The type of the job. Separate multiple types with commas (,).
	//
	// 	- aiLabel: smart tagging.
	//
	// 	- face: face recognition.
	//
	// 	- mm: large visual model.
	//
	// example:
	//
	// AiLabel,Face,Mm
	Task *string `json:"Task,omitempty" xml:"Task,omitempty"`
}

func (s SearchIndexJobRerunRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchIndexJobRerunRequest) GoString() string {
	return s.String()
}

func (s *SearchIndexJobRerunRequest) SetMediaIds(v string) *SearchIndexJobRerunRequest {
	s.MediaIds = &v
	return s
}

func (s *SearchIndexJobRerunRequest) SetSearchLibName(v string) *SearchIndexJobRerunRequest {
	s.SearchLibName = &v
	return s
}

func (s *SearchIndexJobRerunRequest) SetTask(v string) *SearchIndexJobRerunRequest {
	s.Task = &v
	return s
}

type SearchIndexJobRerunResponseBody struct {
	// The status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The response data.
	Data *SearchIndexJobRerunResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SearchIndexJobRerunResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchIndexJobRerunResponseBody) GoString() string {
	return s.String()
}

func (s *SearchIndexJobRerunResponseBody) SetCode(v string) *SearchIndexJobRerunResponseBody {
	s.Code = &v
	return s
}

func (s *SearchIndexJobRerunResponseBody) SetData(v *SearchIndexJobRerunResponseBodyData) *SearchIndexJobRerunResponseBody {
	s.Data = v
	return s
}

func (s *SearchIndexJobRerunResponseBody) SetRequestId(v string) *SearchIndexJobRerunResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchIndexJobRerunResponseBody) SetSuccess(v string) *SearchIndexJobRerunResponseBody {
	s.Success = &v
	return s
}

type SearchIndexJobRerunResponseBodyData struct {
	// The media asset IDs that do not exist.
	MediaIdsNoExist []*string `json:"MediaIdsNoExist,omitempty" xml:"MediaIdsNoExist,omitempty" type:"Repeated"`
}

func (s SearchIndexJobRerunResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SearchIndexJobRerunResponseBodyData) GoString() string {
	return s.String()
}

func (s *SearchIndexJobRerunResponseBodyData) SetMediaIdsNoExist(v []*string) *SearchIndexJobRerunResponseBodyData {
	s.MediaIdsNoExist = v
	return s
}

type SearchIndexJobRerunResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchIndexJobRerunResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchIndexJobRerunResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchIndexJobRerunResponse) GoString() string {
	return s.String()
}

func (s *SearchIndexJobRerunResponse) SetHeaders(v map[string]*string) *SearchIndexJobRerunResponse {
	s.Headers = v
	return s
}

func (s *SearchIndexJobRerunResponse) SetStatusCode(v int32) *SearchIndexJobRerunResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchIndexJobRerunResponse) SetBody(v *SearchIndexJobRerunResponseBody) *SearchIndexJobRerunResponse {
	s.Body = v
	return s
}

type SearchMediaRequest struct {
	// The ID of the entity.
	//
	// example:
	//
	// 2d3bf1e35a1e42b5ab338d701efa7603
	EntityId *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	// The filter conditions. For more information about the parameter syntax
	//
	// <props="china">, see [Media asset search protocols](https://help.aliyun.com/document_detail/2584256.html).
	Match *string `json:"Match,omitempty" xml:"Match,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 50.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The pagination identifier. The value can be up to 32 characters in length. The first time you call this operation for each new search, you do not need to specify this parameter. The value of this parameter is returned each time data records that meet the specified filter condition are found. The value is used to record the current position of queried data. Record the returned parameter value and set this parameter according to the following requirements during the next search: If you need to traverse all data that meets the filter criteria, you must set the ScrollToken parameter. If the value of the PageNo parameter exceeds 200, we recommend that you set this parameter to optimize search performance. You can only page backward. You can page a maximum of 1,000 entries in an operation.
	//
	// example:
	//
	// F8C4F642184DBDA5D93907A70AAE****
	ScrollToken *string `json:"ScrollToken,omitempty" xml:"ScrollToken,omitempty"`
	// The search library.
	//
	// example:
	//
	// test-1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
	// The sort field and order. Separate multiple parameters with commas (,).
	//
	// example:
	//
	// utcCreate:Desc, utcModified:Desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
}

func (s SearchMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaRequest) GoString() string {
	return s.String()
}

func (s *SearchMediaRequest) SetEntityId(v string) *SearchMediaRequest {
	s.EntityId = &v
	return s
}

func (s *SearchMediaRequest) SetMatch(v string) *SearchMediaRequest {
	s.Match = &v
	return s
}

func (s *SearchMediaRequest) SetPageNo(v int32) *SearchMediaRequest {
	s.PageNo = &v
	return s
}

func (s *SearchMediaRequest) SetPageSize(v int32) *SearchMediaRequest {
	s.PageSize = &v
	return s
}

func (s *SearchMediaRequest) SetScrollToken(v string) *SearchMediaRequest {
	s.ScrollToken = &v
	return s
}

func (s *SearchMediaRequest) SetSearchLibName(v string) *SearchMediaRequest {
	s.SearchLibName = &v
	return s
}

func (s *SearchMediaRequest) SetSortBy(v string) *SearchMediaRequest {
	s.SortBy = &v
	return s
}

type SearchMediaResponseBody struct {
	// The status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The media assets that meet the requirements.
	MediaInfoList []*SearchMediaResponseBodyMediaInfoList `json:"MediaInfoList,omitempty" xml:"MediaInfoList,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// 6F61C357-ACC0-57FB-876E-D58795335E59
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The pagination identifier.
	//
	// example:
	//
	// F8C4F642184DBDA5D93907A70AAE****
	ScrollToken *string `json:"ScrollToken,omitempty" xml:"ScrollToken,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// True
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of media assets that meet the conditions.
	//
	// example:
	//
	// 163
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s SearchMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBody) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBody) SetCode(v string) *SearchMediaResponseBody {
	s.Code = &v
	return s
}

func (s *SearchMediaResponseBody) SetMediaInfoList(v []*SearchMediaResponseBodyMediaInfoList) *SearchMediaResponseBody {
	s.MediaInfoList = v
	return s
}

func (s *SearchMediaResponseBody) SetRequestId(v string) *SearchMediaResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchMediaResponseBody) SetScrollToken(v string) *SearchMediaResponseBody {
	s.ScrollToken = &v
	return s
}

func (s *SearchMediaResponseBody) SetSuccess(v string) *SearchMediaResponseBody {
	s.Success = &v
	return s
}

func (s *SearchMediaResponseBody) SetTotal(v int64) *SearchMediaResponseBody {
	s.Total = &v
	return s
}

type SearchMediaResponseBodyMediaInfoList struct {
	// The details of the intelligent AI job.
	AiData *SearchMediaResponseBodyMediaInfoListAiData `json:"AiData,omitempty" xml:"AiData,omitempty" type:"Struct"`
	// The description of the AI job.
	AiRoughData *SearchMediaResponseBodyMediaInfoListAiRoughData `json:"AiRoughData,omitempty" xml:"AiRoughData,omitempty" type:"Struct"`
	// The information about the files.
	FileInfoList    []*SearchMediaResponseBodyMediaInfoListFileInfoList    `json:"FileInfoList,omitempty" xml:"FileInfoList,omitempty" type:"Repeated"`
	IndexStatusList []*SearchMediaResponseBodyMediaInfoListIndexStatusList `json:"IndexStatusList,omitempty" xml:"IndexStatusList,omitempty" type:"Repeated"`
	// The basic information about the media asset.
	MediaBasicInfo *SearchMediaResponseBodyMediaInfoListMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// The ID of the media asset.
	//
	// example:
	//
	// 3b187b3620c8490886cfc2a9578c3ce6
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s SearchMediaResponseBodyMediaInfoList) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoList) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoList) SetAiData(v *SearchMediaResponseBodyMediaInfoListAiData) *SearchMediaResponseBodyMediaInfoList {
	s.AiData = v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoList) SetAiRoughData(v *SearchMediaResponseBodyMediaInfoListAiRoughData) *SearchMediaResponseBodyMediaInfoList {
	s.AiRoughData = v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoList) SetFileInfoList(v []*SearchMediaResponseBodyMediaInfoListFileInfoList) *SearchMediaResponseBodyMediaInfoList {
	s.FileInfoList = v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoList) SetIndexStatusList(v []*SearchMediaResponseBodyMediaInfoListIndexStatusList) *SearchMediaResponseBodyMediaInfoList {
	s.IndexStatusList = v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoList) SetMediaBasicInfo(v *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) *SearchMediaResponseBodyMediaInfoList {
	s.MediaBasicInfo = v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoList) SetMediaId(v string) *SearchMediaResponseBodyMediaInfoList {
	s.MediaId = &v
	return s
}

type SearchMediaResponseBodyMediaInfoListAiData struct {
	// The tags of the intelligent AI job.
	AiLabelInfo []*SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo `json:"AiLabelInfo,omitempty" xml:"AiLabelInfo,omitempty" type:"Repeated"`
	// The information about audio files.
	AsrInfo []*SearchMediaResponseBodyMediaInfoListAiDataAsrInfo `json:"AsrInfo,omitempty" xml:"AsrInfo,omitempty" type:"Repeated"`
	// The subtitles.
	OcrInfo []*SearchMediaResponseBodyMediaInfoListAiDataOcrInfo `json:"OcrInfo,omitempty" xml:"OcrInfo,omitempty" type:"Repeated"`
}

func (s SearchMediaResponseBodyMediaInfoListAiData) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoListAiData) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoListAiData) SetAiLabelInfo(v []*SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo) *SearchMediaResponseBodyMediaInfoListAiData {
	s.AiLabelInfo = v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiData) SetAsrInfo(v []*SearchMediaResponseBodyMediaInfoListAiDataAsrInfo) *SearchMediaResponseBodyMediaInfoListAiData {
	s.AsrInfo = v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiData) SetOcrInfo(v []*SearchMediaResponseBodyMediaInfoListAiDataOcrInfo) *SearchMediaResponseBodyMediaInfoListAiData {
	s.OcrInfo = v
	return s
}

type SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo struct {
	// The category.
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The face ID.
	//
	// example:
	//
	// 5FE19530C7A422197535FE74F5DB2B9F
	FaceId *string `json:"FaceId,omitempty" xml:"FaceId,omitempty"`
	// The ID of the entity.
	//
	// example:
	//
	// 10310250338
	LabelId *string `json:"LabelId,omitempty" xml:"LabelId,omitempty"`
	// The name of the entity.
	LabelName *string `json:"LabelName,omitempty" xml:"LabelName,omitempty"`
	// The type of the tag.
	LabelType *string `json:"LabelType,omitempty" xml:"LabelType,omitempty"`
	// The clips.
	Occurrences []*SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences `json:"Occurrences,omitempty" xml:"Occurrences,omitempty" type:"Repeated"`
	// The source.
	//
	// example:
	//
	// vision
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo) SetCategory(v string) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo {
	s.Category = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo) SetFaceId(v string) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo {
	s.FaceId = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo) SetLabelId(v string) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo {
	s.LabelId = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo) SetLabelName(v string) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo {
	s.LabelName = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo) SetLabelType(v string) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo {
	s.LabelType = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo) SetOccurrences(v []*SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo {
	s.Occurrences = v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo) SetSource(v string) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo {
	s.Source = &v
	return s
}

type SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences struct {
	// The text content.
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The fine-grained ID of the entity.
	//
	// example:
	//
	// 10310250338
	FinegrainId *string `json:"FinegrainId,omitempty" xml:"FinegrainId,omitempty"`
	// The fine-grained name of the entity.
	FinegrainName *string `json:"FinegrainName,omitempty" xml:"FinegrainName,omitempty"`
	// The start time of the clip.
	//
	// example:
	//
	// 1.4
	From *float64 `json:"From,omitempty" xml:"From,omitempty"`
	// The optimal face image encoded in Base64.
	//
	// example:
	//
	// 99C64F6287
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// The score.
	//
	// example:
	//
	// 0.75287705
	Score *float64 `json:"Score,omitempty" xml:"Score,omitempty"`
	// The sequence ID of the vector table.
	//
	// example:
	//
	// 85010D1
	TableBatchSeqId *string `json:"TableBatchSeqId,omitempty" xml:"TableBatchSeqId,omitempty"`
	// The end time of the clip.
	//
	// example:
	//
	// 2.5
	To *float64 `json:"To,omitempty" xml:"To,omitempty"`
	// The track sequence.
	Tracks []*SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrencesTracks `json:"Tracks,omitempty" xml:"Tracks,omitempty" type:"Repeated"`
	// The ID of the clip.
	//
	// example:
	//
	// 5FE19530C7A422197535FE74F5DB2B9F
	ClipId *string `json:"clipId,omitempty" xml:"clipId,omitempty"`
}

func (s SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences) SetContent(v string) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences {
	s.Content = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences) SetFinegrainId(v string) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences {
	s.FinegrainId = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences) SetFinegrainName(v string) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences {
	s.FinegrainName = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences) SetFrom(v float64) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences {
	s.From = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences) SetImage(v string) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences {
	s.Image = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences) SetScore(v float64) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences {
	s.Score = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences) SetTableBatchSeqId(v string) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences {
	s.TableBatchSeqId = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences) SetTo(v float64) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences {
	s.To = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences) SetTracks(v []*SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrencesTracks) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences {
	s.Tracks = v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences) SetClipId(v string) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences {
	s.ClipId = &v
	return s
}

type SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrencesTracks struct {
	// The coordinates of the bounding box.
	//
	// example:
	//
	// 468.0;67.0;615.0;267.0
	Position *string `json:"Position,omitempty" xml:"Position,omitempty"`
	// The size of the bounding box.
	//
	// example:
	//
	// 50.2
	Size *float64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The timestamp of the track.
	//
	// example:
	//
	// 1.4
	Timestamp *float64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrencesTracks) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrencesTracks) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrencesTracks) SetPosition(v string) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrencesTracks {
	s.Position = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrencesTracks) SetSize(v float64) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrencesTracks {
	s.Size = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrencesTracks) SetTimestamp(v float64) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrencesTracks {
	s.Timestamp = &v
	return s
}

type SearchMediaResponseBodyMediaInfoListAiDataAsrInfo struct {
	// The ID of the clip.
	//
	// example:
	//
	// 5FE19530C7A422197535FE74F5DB2B9F
	ClipId *string `json:"ClipId,omitempty" xml:"ClipId,omitempty"`
	// The text content.
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The start time of the clip.
	//
	// example:
	//
	// 1.4
	From *float64 `json:"From,omitempty" xml:"From,omitempty"`
	// The timestamp of the clip.
	//
	// example:
	//
	// 1.4
	Timestamp *float64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// The end time of the clip.
	//
	// example:
	//
	// 2.5
	To *float64 `json:"To,omitempty" xml:"To,omitempty"`
}

func (s SearchMediaResponseBodyMediaInfoListAiDataAsrInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoListAiDataAsrInfo) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAsrInfo) SetClipId(v string) *SearchMediaResponseBodyMediaInfoListAiDataAsrInfo {
	s.ClipId = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAsrInfo) SetContent(v string) *SearchMediaResponseBodyMediaInfoListAiDataAsrInfo {
	s.Content = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAsrInfo) SetFrom(v float64) *SearchMediaResponseBodyMediaInfoListAiDataAsrInfo {
	s.From = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAsrInfo) SetTimestamp(v float64) *SearchMediaResponseBodyMediaInfoListAiDataAsrInfo {
	s.Timestamp = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAsrInfo) SetTo(v float64) *SearchMediaResponseBodyMediaInfoListAiDataAsrInfo {
	s.To = &v
	return s
}

type SearchMediaResponseBodyMediaInfoListAiDataOcrInfo struct {
	// The ID of the clip.
	//
	// example:
	//
	// 5FE19530C7A422197535FE74F5DB2B9F
	ClipId *string `json:"ClipId,omitempty" xml:"ClipId,omitempty"`
	// The text content.
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The start time of the clip.
	//
	// example:
	//
	// 1.4
	From *float64 `json:"From,omitempty" xml:"From,omitempty"`
	// The timestamp of the clip.
	//
	// example:
	//
	// 1.4
	Timestamp *float64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// The end time of the clip.
	//
	// example:
	//
	// 2.5
	To *float64 `json:"To,omitempty" xml:"To,omitempty"`
}

func (s SearchMediaResponseBodyMediaInfoListAiDataOcrInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoListAiDataOcrInfo) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataOcrInfo) SetClipId(v string) *SearchMediaResponseBodyMediaInfoListAiDataOcrInfo {
	s.ClipId = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataOcrInfo) SetContent(v string) *SearchMediaResponseBodyMediaInfoListAiDataOcrInfo {
	s.Content = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataOcrInfo) SetFrom(v float64) *SearchMediaResponseBodyMediaInfoListAiDataOcrInfo {
	s.From = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataOcrInfo) SetTimestamp(v float64) *SearchMediaResponseBodyMediaInfoListAiDataOcrInfo {
	s.Timestamp = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataOcrInfo) SetTo(v float64) *SearchMediaResponseBodyMediaInfoListAiDataOcrInfo {
	s.To = &v
	return s
}

type SearchMediaResponseBodyMediaInfoListAiRoughData struct {
	// TV Series
	//
	// example:
	//
	// TV series
	AiCategory *string `json:"AiCategory,omitempty" xml:"AiCategory,omitempty"`
	// The ID of the AI job.
	//
	// example:
	//
	// cd35b0b0025f71edbfcb472190a9xxxx
	AiJobId *string `json:"AiJobId,omitempty" xml:"AiJobId,omitempty"`
	// The results of the AI job.
	//
	// example:
	//
	// http://xxxx.json
	Result *string `json:"Result,omitempty" xml:"Result,omitempty"`
	// The save type.
	//
	// example:
	//
	// TEXT
	SaveType *string `json:"SaveType,omitempty" xml:"SaveType,omitempty"`
	// The data status.
	//
	// example:
	//
	// SaveSuccess
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s SearchMediaResponseBodyMediaInfoListAiRoughData) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoListAiRoughData) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoListAiRoughData) SetAiCategory(v string) *SearchMediaResponseBodyMediaInfoListAiRoughData {
	s.AiCategory = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiRoughData) SetAiJobId(v string) *SearchMediaResponseBodyMediaInfoListAiRoughData {
	s.AiJobId = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiRoughData) SetResult(v string) *SearchMediaResponseBodyMediaInfoListAiRoughData {
	s.Result = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiRoughData) SetSaveType(v string) *SearchMediaResponseBodyMediaInfoListAiRoughData {
	s.SaveType = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiRoughData) SetStatus(v string) *SearchMediaResponseBodyMediaInfoListAiRoughData {
	s.Status = &v
	return s
}

type SearchMediaResponseBodyMediaInfoListFileInfoList struct {
	// The basic information about the file, such as the duration and size.
	FileBasicInfo *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
}

func (s SearchMediaResponseBodyMediaInfoListFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoListFileInfoList) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoList) SetFileBasicInfo(v *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) *SearchMediaResponseBodyMediaInfoListFileInfoList {
	s.FileBasicInfo = v
	return s
}

type SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo struct {
	// The bitrate of the file.
	//
	// example:
	//
	// 1912.13
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The time when the file was created.
	//
	// example:
	//
	// 2022-05-30T02:02:17Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The duration of the file.
	//
	// example:
	//
	// 60.00000
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The name of the file.
	//
	// example:
	//
	// 164265080291300080527050.wav
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The size of the file in bytes.
	//
	// example:
	//
	// 324784
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// The status of the file.
	//
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// The type of the file.
	//
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// The Object Storage Service (OSS) URL of the file.
	//
	// example:
	//
	// https://outin-d3f4681ddfd911ec99a600163e1403e7.oss-cn-shanghai.aliyuncs.com/sv/23d5cdd1-18180984899/23d5cdd1-18180984899.mp4
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// The encapsulation format of the file.
	//
	// example:
	//
	// mov,mp4,m4a,3gp,3g2,mj2
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// The height of the file.
	//
	// example:
	//
	// 480
	Height      *string `json:"Height,omitempty" xml:"Height,omitempty"`
	ImagesInput *string `json:"ImagesInput,omitempty" xml:"ImagesInput,omitempty"`
	// The time when the file was last modified.
	//
	// example:
	//
	// 2021-12-10T12:19Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The region in which the file is stored.
	//
	// example:
	//
	// cn-beijing
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The width of the file.
	//
	// example:
	//
	// 1920
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetBitrate(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetCreateTime(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetDuration(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetFileName(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetFileSize(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetFileStatus(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetFileType(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetFileUrl(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetFormatName(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetHeight(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.Height = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetImagesInput(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.ImagesInput = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetModifiedTime(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetRegion(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.Region = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetWidth(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.Width = &v
	return s
}

type SearchMediaResponseBodyMediaInfoListIndexStatusList struct {
	// example:
	//
	// Success
	IndexStatus *string `json:"IndexStatus,omitempty" xml:"IndexStatus,omitempty"`
	// example:
	//
	// mm
	IndexType *string `json:"IndexType,omitempty" xml:"IndexType,omitempty"`
}

func (s SearchMediaResponseBodyMediaInfoListIndexStatusList) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoListIndexStatusList) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoListIndexStatusList) SetIndexStatus(v string) *SearchMediaResponseBodyMediaInfoListIndexStatusList {
	s.IndexStatus = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListIndexStatusList) SetIndexType(v string) *SearchMediaResponseBodyMediaInfoListIndexStatusList {
	s.IndexType = &v
	return s
}

type SearchMediaResponseBodyMediaInfoListMediaBasicInfo struct {
	// The business to which the media asset belongs.
	//
	// example:
	//
	// IMS
	Biz *string `json:"Biz,omitempty" xml:"Biz,omitempty"`
	// The business type of the media asset.
	//
	// example:
	//
	// opening
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// The ID of the category.
	//
	// example:
	//
	// 44
	CateId *int64 `json:"CateId,omitempty" xml:"CateId,omitempty"`
	// The name of the category.
	CateName *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	// The category of the media asset.
	//
	// example:
	//
	// image
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The thumbnail URL of the media asset.
	//
	// example:
	//
	// https://dtlive-bj.oss-cn-beijing.aliyuncs.com/cover/e694372e-4f5b-4821-ae09-efd064f27b63_large_cover_url.jpg
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// The time when the media asset was created.
	//
	// example:
	//
	// 2020-12-01T19:48Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the media asset was deleted.
	//
	// example:
	//
	// 2020-12-01T19:48Z
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	// The description of the media asset.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The address of the media asset that is waiting to be registered.
	//
	// example:
	//
	// oss://clipres/longvideo/material/voice/prod/20220418/07d7c799f6054dc3bbef250854cf84981650248140427
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// 132bd600fc3c71ec99476732a78f6402
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The tags of the media asset.
	//
	// example:
	//
	// tags,tags2
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// The type of the media asset.
	//
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// The time when the media asset was modified.
	//
	// example:
	//
	// 2020-12-01T19:48Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	Namespace    *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The custom ID of the media asset. The ID is a string that contains 6 to 64 characters. Only letters, digits, hyphens (-), and underscores (_) are supported. Each custom ID is unique.
	//
	// example:
	//
	// 123-123
	ReferenceId *string `json:"ReferenceId,omitempty" xml:"ReferenceId,omitempty"`
	// The snapshots of the media asset.
	//
	// example:
	//
	// [{"bucket":"example-bucket","count":"3","iceJobId":"******f48f0e4154976b2b8c45******","location":"oss-cn-beijing","snapshotRegular":"example.jpg","templateId":"******e6a6440b29eb60bd7c******"}]
	Snapshots *string `json:"Snapshots,omitempty" xml:"Snapshots,omitempty"`
	// The source of the media asset.
	//
	// example:
	//
	// oss
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The image sprite of the media asset
	//
	// example:
	//
	// [{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]
	SpriteImages *string `json:"SpriteImages,omitempty" xml:"SpriteImages,omitempty"`
	// The state of the media asset.
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The title of the media asset.
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// The transcoding status of the media asset.
	//
	// example:
	//
	// Init
	TranscodeStatus *string `json:"TranscodeStatus,omitempty" xml:"TranscodeStatus,omitempty"`
	// The upload source of the media asset.
	//
	// example:
	//
	// general
	UploadSource *string `json:"UploadSource,omitempty" xml:"UploadSource,omitempty"`
	// The user data.
	//
	// example:
	//
	// userData
	UserData          *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	VisionDescription *string `json:"VisionDescription,omitempty" xml:"VisionDescription,omitempty"`
}

func (s SearchMediaResponseBodyMediaInfoListMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoListMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetBiz(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.Biz = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetBusinessType(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetCateId(v int64) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.CateId = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetCateName(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.CateName = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetCategory(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetCoverURL(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetCreateTime(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetDeletedTime(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetDescription(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetInputURL(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.InputURL = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetMediaId(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetMediaTags(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetMediaType(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetModifiedTime(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetNamespace(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.Namespace = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetReferenceId(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.ReferenceId = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetSnapshots(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.Snapshots = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetSource(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetSpriteImages(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.SpriteImages = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetStatus(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetTitle(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetTranscodeStatus(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.TranscodeStatus = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetUploadSource(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.UploadSource = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetUserData(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.UserData = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetVisionDescription(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.VisionDescription = &v
	return s
}

type SearchMediaResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchMediaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponse) GoString() string {
	return s.String()
}

func (s *SearchMediaResponse) SetHeaders(v map[string]*string) *SearchMediaResponse {
	s.Headers = v
	return s
}

func (s *SearchMediaResponse) SetStatusCode(v int32) *SearchMediaResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchMediaResponse) SetBody(v *SearchMediaResponseBody) *SearchMediaResponse {
	s.Body = v
	return s
}

type SearchMediaByAILabelRequest struct {
	MatchingMode *string `json:"MatchingMode,omitempty" xml:"MatchingMode,omitempty"`
	// The ID of the media asset. This parameter is required if you want to query media asset clips.
	//
	// example:
	//
	// ****c469e944b5a856828dc2****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The type of the media assets. Valid values:
	//
	// 	- image
	//
	// 	- video
	//
	// 	- audio
	//
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// The type of query. Valid values:
	//
	// 	- PersonName: queries media assets based on character names.
	//
	// 	- Ocr: queries media assets based on subtitles.
	//
	// 	- AiCategory: queries media assets based on AI categories.
	//
	// 	- FullSearch (default): queries all media assets.
	//
	// example:
	//
	// Ocr
	MultimodalSearchType *string `json:"MultimodalSearchType,omitempty" xml:"MultimodalSearchType,omitempty"`
	Namespace            *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 50.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The name of the search library.
	//
	// example:
	//
	// test-1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
	// The sorting method of the results. Valid values:
	//
	// 	- CreationTime:Desc (default): sorts results in reverse chronological order.
	//
	// 	- CreationTime:Asc: sorts results in chronological order.
	//
	// example:
	//
	// CreationTime:Desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// Specifies whether to query media asset clips. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	SpecificSearch *bool `json:"SpecificSearch,omitempty" xml:"SpecificSearch,omitempty"`
	// The content that you want to query.
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s SearchMediaByAILabelRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByAILabelRequest) GoString() string {
	return s.String()
}

func (s *SearchMediaByAILabelRequest) SetMatchingMode(v string) *SearchMediaByAILabelRequest {
	s.MatchingMode = &v
	return s
}

func (s *SearchMediaByAILabelRequest) SetMediaId(v string) *SearchMediaByAILabelRequest {
	s.MediaId = &v
	return s
}

func (s *SearchMediaByAILabelRequest) SetMediaType(v string) *SearchMediaByAILabelRequest {
	s.MediaType = &v
	return s
}

func (s *SearchMediaByAILabelRequest) SetMultimodalSearchType(v string) *SearchMediaByAILabelRequest {
	s.MultimodalSearchType = &v
	return s
}

func (s *SearchMediaByAILabelRequest) SetNamespace(v string) *SearchMediaByAILabelRequest {
	s.Namespace = &v
	return s
}

func (s *SearchMediaByAILabelRequest) SetPageNo(v int32) *SearchMediaByAILabelRequest {
	s.PageNo = &v
	return s
}

func (s *SearchMediaByAILabelRequest) SetPageSize(v int32) *SearchMediaByAILabelRequest {
	s.PageSize = &v
	return s
}

func (s *SearchMediaByAILabelRequest) SetSearchLibName(v string) *SearchMediaByAILabelRequest {
	s.SearchLibName = &v
	return s
}

func (s *SearchMediaByAILabelRequest) SetSortBy(v string) *SearchMediaByAILabelRequest {
	s.SortBy = &v
	return s
}

func (s *SearchMediaByAILabelRequest) SetSpecificSearch(v bool) *SearchMediaByAILabelRequest {
	s.SpecificSearch = &v
	return s
}

func (s *SearchMediaByAILabelRequest) SetText(v string) *SearchMediaByAILabelRequest {
	s.Text = &v
	return s
}

type SearchMediaByAILabelResponseBody struct {
	// The status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The media assets that contain the specified content.
	MediaList []*SearchMediaByAILabelResponseBodyMediaList `json:"MediaList,omitempty" xml:"MediaList,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of audio and video files that meet the conditions.
	//
	// example:
	//
	// 30
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s SearchMediaByAILabelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByAILabelResponseBody) GoString() string {
	return s.String()
}

func (s *SearchMediaByAILabelResponseBody) SetCode(v string) *SearchMediaByAILabelResponseBody {
	s.Code = &v
	return s
}

func (s *SearchMediaByAILabelResponseBody) SetMediaList(v []*SearchMediaByAILabelResponseBodyMediaList) *SearchMediaByAILabelResponseBody {
	s.MediaList = v
	return s
}

func (s *SearchMediaByAILabelResponseBody) SetRequestId(v string) *SearchMediaByAILabelResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchMediaByAILabelResponseBody) SetSuccess(v string) *SearchMediaByAILabelResponseBody {
	s.Success = &v
	return s
}

func (s *SearchMediaByAILabelResponseBody) SetTotal(v int64) *SearchMediaByAILabelResponseBody {
	s.Total = &v
	return s
}

type SearchMediaByAILabelResponseBodyMediaList struct {
	// The details of the AI job.
	AiData *SearchMediaByAILabelResponseBodyMediaListAiData `json:"AiData,omitempty" xml:"AiData,omitempty" type:"Struct"`
	// The ID of the application. Default value: app-1000000.
	//
	// example:
	//
	// app-1000000
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The URL of the thumbnail.
	//
	// example:
	//
	// http://example.aliyundoc.com/snapshot/****.jpg?auth_key=1498476426-0-0-f00b9455c49a423ce69cf4e27333****
	CoverUrl *string `json:"CoverUrl,omitempty" xml:"CoverUrl,omitempty"`
	// The time when the media asset was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2017-11-14T09:15:50Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The description of the media asset.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The duration. Unit: seconds.
	//
	// example:
	//
	// 12.2
	Duration *float32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// 1c6ce34007d571ed94667630a6bc****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The time when the media asset was updated. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2017-11-14T09:15:50Z
	ModificationTime *string `json:"ModificationTime,omitempty" xml:"ModificationTime,omitempty"`
	// The size of the source file. Unit: bytes.
	//
	// example:
	//
	// 10897890
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The array of video snapshot URLs.
	Snapshots []*string `json:"Snapshots,omitempty" xml:"Snapshots,omitempty" type:"Repeated"`
	// The status of the video.
	//
	// Valid values:
	//
	// 	- PrepareFail
	//
	// 	- UploadFail
	//
	// 	- Init
	//
	// 	- UploadSucc
	//
	// 	- Transcoding
	//
	// 	- TranscodeFail
	//
	// 	- Deleted
	//
	// 	- Normal
	//
	// 	- Uploading
	//
	// 	- Preparing
	//
	// 	- Blocked
	//
	// 	- Checking
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The storage address.
	//
	// example:
	//
	// out-****.oss-cn-shanghai.aliyuncs.com
	StorageLocation *string `json:"StorageLocation,omitempty" xml:"StorageLocation,omitempty"`
	// The tags of the media asset.
	Tags *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	// The title of the media asset.
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s SearchMediaByAILabelResponseBodyMediaList) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByAILabelResponseBodyMediaList) GoString() string {
	return s.String()
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetAiData(v *SearchMediaByAILabelResponseBodyMediaListAiData) *SearchMediaByAILabelResponseBodyMediaList {
	s.AiData = v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetAppId(v string) *SearchMediaByAILabelResponseBodyMediaList {
	s.AppId = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetCoverUrl(v string) *SearchMediaByAILabelResponseBodyMediaList {
	s.CoverUrl = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetCreationTime(v string) *SearchMediaByAILabelResponseBodyMediaList {
	s.CreationTime = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetDescription(v string) *SearchMediaByAILabelResponseBodyMediaList {
	s.Description = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetDuration(v float32) *SearchMediaByAILabelResponseBodyMediaList {
	s.Duration = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetMediaId(v string) *SearchMediaByAILabelResponseBodyMediaList {
	s.MediaId = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetModificationTime(v string) *SearchMediaByAILabelResponseBodyMediaList {
	s.ModificationTime = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetSize(v int64) *SearchMediaByAILabelResponseBodyMediaList {
	s.Size = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetSnapshots(v []*string) *SearchMediaByAILabelResponseBodyMediaList {
	s.Snapshots = v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetStatus(v string) *SearchMediaByAILabelResponseBodyMediaList {
	s.Status = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetStorageLocation(v string) *SearchMediaByAILabelResponseBodyMediaList {
	s.StorageLocation = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetTags(v string) *SearchMediaByAILabelResponseBodyMediaList {
	s.Tags = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetTitle(v string) *SearchMediaByAILabelResponseBodyMediaList {
	s.Title = &v
	return s
}

type SearchMediaByAILabelResponseBodyMediaListAiData struct {
	// The tags of the AI job.
	AiLabelInfo []*SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo `json:"AiLabelInfo,omitempty" xml:"AiLabelInfo,omitempty" type:"Repeated"`
	// The information about audio files.
	AsrInfo []*SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo `json:"AsrInfo,omitempty" xml:"AsrInfo,omitempty" type:"Repeated"`
	// The information about subtitle files.
	OcrInfo []*SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo `json:"OcrInfo,omitempty" xml:"OcrInfo,omitempty" type:"Repeated"`
}

func (s SearchMediaByAILabelResponseBodyMediaListAiData) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByAILabelResponseBodyMediaListAiData) GoString() string {
	return s.String()
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiData) SetAiLabelInfo(v []*SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo) *SearchMediaByAILabelResponseBodyMediaListAiData {
	s.AiLabelInfo = v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiData) SetAsrInfo(v []*SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo) *SearchMediaByAILabelResponseBodyMediaListAiData {
	s.AsrInfo = v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiData) SetOcrInfo(v []*SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo) *SearchMediaByAILabelResponseBodyMediaListAiData {
	s.OcrInfo = v
	return s
}

type SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo struct {
	// The category.
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The ID of the face.
	//
	// example:
	//
	// 5FE19530C7A422197535FE74F5DB****
	FaceId *string `json:"FaceId,omitempty" xml:"FaceId,omitempty"`
	// The ID of the entity.
	//
	// example:
	//
	// 103102503**
	LabelId *string `json:"LabelId,omitempty" xml:"LabelId,omitempty"`
	// The name of the entity.
	LabelName *string `json:"LabelName,omitempty" xml:"LabelName,omitempty"`
	// The type of the tag.
	LabelType *string `json:"LabelType,omitempty" xml:"LabelType,omitempty"`
	// The information about the clips.
	Occurrences []*SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences `json:"Occurrences,omitempty" xml:"Occurrences,omitempty" type:"Repeated"`
	// The source.
	//
	// example:
	//
	// vision
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo) GoString() string {
	return s.String()
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo) SetCategory(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo {
	s.Category = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo) SetFaceId(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo {
	s.FaceId = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo) SetLabelId(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo {
	s.LabelId = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo) SetLabelName(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo {
	s.LabelName = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo) SetLabelType(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo {
	s.LabelType = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo) SetOccurrences(v []*SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo {
	s.Occurrences = v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo) SetSource(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo {
	s.Source = &v
	return s
}

type SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences struct {
	// The ID of the clip.
	//
	// example:
	//
	// 158730355E4B82257D8AA1583A58****
	ClipId *string `json:"ClipId,omitempty" xml:"ClipId,omitempty"`
	// The content of the text.
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The fine-grained ID of the entity.
	//
	// example:
	//
	// 103102503**
	FinegrainId *string `json:"FinegrainId,omitempty" xml:"FinegrainId,omitempty"`
	// The fine-grained name of the entity.
	FinegrainName *string `json:"FinegrainName,omitempty" xml:"FinegrainName,omitempty"`
	// The start time of the clip.
	//
	// example:
	//
	// 1.4
	From *float64 `json:"From,omitempty" xml:"From,omitempty"`
	// The image that contains the most face information.
	//
	// example:
	//
	// https://service-****-public.oss-cn-hangzhou.aliyuncs.com/1563457****438522/service-image/f788974f-9595-43b2-a478-7c7a1afb****.jpg
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// The score.
	//
	// example:
	//
	// 0.75287705
	Score *float64 `json:"Score,omitempty" xml:"Score,omitempty"`
	// The sequence ID of the vector table.
	//
	// example:
	//
	// 85010D1**
	TableBatchSeqId *string `json:"TableBatchSeqId,omitempty" xml:"TableBatchSeqId,omitempty"`
	// The end time of the clip.
	//
	// example:
	//
	// 2.5
	To *float64 `json:"To,omitempty" xml:"To,omitempty"`
	// The tracks.
	Tracks []*SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrencesTracks `json:"Tracks,omitempty" xml:"Tracks,omitempty" type:"Repeated"`
}

func (s SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences) GoString() string {
	return s.String()
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences) SetClipId(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences {
	s.ClipId = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences) SetContent(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences {
	s.Content = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences) SetFinegrainId(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences {
	s.FinegrainId = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences) SetFinegrainName(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences {
	s.FinegrainName = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences) SetFrom(v float64) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences {
	s.From = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences) SetImage(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences {
	s.Image = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences) SetScore(v float64) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences {
	s.Score = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences) SetTableBatchSeqId(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences {
	s.TableBatchSeqId = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences) SetTo(v float64) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences {
	s.To = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences) SetTracks(v []*SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrencesTracks) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences {
	s.Tracks = v
	return s
}

type SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrencesTracks struct {
	// The coordinates of the bounding box.
	//
	// example:
	//
	// 468.0;67.0;615.0;267.0
	Position *string `json:"Position,omitempty" xml:"Position,omitempty"`
	// The size of the bounding box.
	//
	// example:
	//
	// 50
	Size *float64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The timestamp of the track.
	//
	// example:
	//
	// 1.4
	Timestamp *float64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrencesTracks) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrencesTracks) GoString() string {
	return s.String()
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrencesTracks) SetPosition(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrencesTracks {
	s.Position = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrencesTracks) SetSize(v float64) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrencesTracks {
	s.Size = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrencesTracks) SetTimestamp(v float64) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrencesTracks {
	s.Timestamp = &v
	return s
}

type SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo struct {
	// The ID of the clip.
	//
	// example:
	//
	// 5FE19530C7A422197535FE74F5DB****
	ClipId *string `json:"ClipId,omitempty" xml:"ClipId,omitempty"`
	// The content of the audio.
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The start time of the clip.
	//
	// example:
	//
	// 1.4
	From *float64 `json:"From,omitempty" xml:"From,omitempty"`
	// The timestamp of the clip.
	//
	// example:
	//
	// 1.4
	Timestamp *float64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// The end time of the clip.
	//
	// example:
	//
	// 2.5
	To *float64 `json:"To,omitempty" xml:"To,omitempty"`
}

func (s SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo) GoString() string {
	return s.String()
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo) SetClipId(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo {
	s.ClipId = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo) SetContent(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo {
	s.Content = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo) SetFrom(v float64) *SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo {
	s.From = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo) SetTimestamp(v float64) *SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo {
	s.Timestamp = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo) SetTo(v float64) *SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo {
	s.To = &v
	return s
}

type SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo struct {
	// The ID of the clip.
	//
	// example:
	//
	// 5FE19530C7A422197535FE74F5DB****
	ClipId *string `json:"ClipId,omitempty" xml:"ClipId,omitempty"`
	// The content of the text.
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The start time of the clip.
	//
	// example:
	//
	// 1.4
	From *float64 `json:"From,omitempty" xml:"From,omitempty"`
	// The timestamp of the clip.
	//
	// example:
	//
	// 1.4
	Timestamp *float64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// The end time of the clip.
	//
	// example:
	//
	// 2.5
	To *float64 `json:"To,omitempty" xml:"To,omitempty"`
}

func (s SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo) GoString() string {
	return s.String()
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo) SetClipId(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo {
	s.ClipId = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo) SetContent(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo {
	s.Content = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo) SetFrom(v float64) *SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo {
	s.From = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo) SetTimestamp(v float64) *SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo {
	s.Timestamp = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo) SetTo(v float64) *SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo {
	s.To = &v
	return s
}

type SearchMediaByAILabelResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchMediaByAILabelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchMediaByAILabelResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByAILabelResponse) GoString() string {
	return s.String()
}

func (s *SearchMediaByAILabelResponse) SetHeaders(v map[string]*string) *SearchMediaByAILabelResponse {
	s.Headers = v
	return s
}

func (s *SearchMediaByAILabelResponse) SetStatusCode(v int32) *SearchMediaByAILabelResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchMediaByAILabelResponse) SetBody(v *SearchMediaByAILabelResponseBody) *SearchMediaByAILabelResponse {
	s.Body = v
	return s
}

type SearchMediaByFaceRequest struct {
	// The ID of the entity.
	//
	// example:
	//
	// 2d3bf1e35a1e42b5ab338d701efa****
	EntityId *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	// The token that is used to identify the query. You can use this parameter in the SearchMediaClipByFace operation to specify the same query conditions.
	//
	// This parameter is required.
	//
	// example:
	//
	// zxtest-huangxuan-2023-3-7-V1
	FaceSearchToken *string `json:"FaceSearchToken,omitempty" xml:"FaceSearchToken,omitempty"`
	// The type of the media asset. Valid values:
	//
	// 	- image
	//
	// 	- video
	//
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 50.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The URL of the face image.
	//
	// This parameter is required.
	//
	// example:
	//
	// https://****.oss-cn-shanghai.aliyuncs.com/input/huangxuan****.jpg
	PersonImageUrl *string `json:"PersonImageUrl,omitempty" xml:"PersonImageUrl,omitempty"`
	// The name of the search library.
	//
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
}

func (s SearchMediaByFaceRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByFaceRequest) GoString() string {
	return s.String()
}

func (s *SearchMediaByFaceRequest) SetEntityId(v string) *SearchMediaByFaceRequest {
	s.EntityId = &v
	return s
}

func (s *SearchMediaByFaceRequest) SetFaceSearchToken(v string) *SearchMediaByFaceRequest {
	s.FaceSearchToken = &v
	return s
}

func (s *SearchMediaByFaceRequest) SetMediaType(v string) *SearchMediaByFaceRequest {
	s.MediaType = &v
	return s
}

func (s *SearchMediaByFaceRequest) SetNamespace(v string) *SearchMediaByFaceRequest {
	s.Namespace = &v
	return s
}

func (s *SearchMediaByFaceRequest) SetPageNo(v int32) *SearchMediaByFaceRequest {
	s.PageNo = &v
	return s
}

func (s *SearchMediaByFaceRequest) SetPageSize(v int32) *SearchMediaByFaceRequest {
	s.PageSize = &v
	return s
}

func (s *SearchMediaByFaceRequest) SetPersonImageUrl(v string) *SearchMediaByFaceRequest {
	s.PersonImageUrl = &v
	return s
}

func (s *SearchMediaByFaceRequest) SetSearchLibName(v string) *SearchMediaByFaceRequest {
	s.SearchLibName = &v
	return s
}

type SearchMediaByFaceResponseBody struct {
	// The status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The media assets that meet the conditions.
	MediaInfoList []*SearchMediaByFaceResponseBodyMediaInfoList `json:"MediaInfoList,omitempty" xml:"MediaInfoList,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// 7CA7D615-CFB1-5437-9A12-2D185C3EE6CB
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values: true false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of data records that meet the specified filter condition.
	//
	// example:
	//
	// 163
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s SearchMediaByFaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByFaceResponseBody) GoString() string {
	return s.String()
}

func (s *SearchMediaByFaceResponseBody) SetCode(v string) *SearchMediaByFaceResponseBody {
	s.Code = &v
	return s
}

func (s *SearchMediaByFaceResponseBody) SetMediaInfoList(v []*SearchMediaByFaceResponseBodyMediaInfoList) *SearchMediaByFaceResponseBody {
	s.MediaInfoList = v
	return s
}

func (s *SearchMediaByFaceResponseBody) SetRequestId(v string) *SearchMediaByFaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchMediaByFaceResponseBody) SetSuccess(v string) *SearchMediaByFaceResponseBody {
	s.Success = &v
	return s
}

func (s *SearchMediaByFaceResponseBody) SetTotal(v int64) *SearchMediaByFaceResponseBody {
	s.Total = &v
	return s
}

type SearchMediaByFaceResponseBodyMediaInfoList struct {
	// The ID of the media asset.
	//
	// example:
	//
	// 3b187b3620c8490886cfc2a9578c****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s SearchMediaByFaceResponseBodyMediaInfoList) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByFaceResponseBodyMediaInfoList) GoString() string {
	return s.String()
}

func (s *SearchMediaByFaceResponseBodyMediaInfoList) SetMediaId(v string) *SearchMediaByFaceResponseBodyMediaInfoList {
	s.MediaId = &v
	return s
}

type SearchMediaByFaceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchMediaByFaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchMediaByFaceResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByFaceResponse) GoString() string {
	return s.String()
}

func (s *SearchMediaByFaceResponse) SetHeaders(v map[string]*string) *SearchMediaByFaceResponse {
	s.Headers = v
	return s
}

func (s *SearchMediaByFaceResponse) SetStatusCode(v int32) *SearchMediaByFaceResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchMediaByFaceResponse) SetBody(v *SearchMediaByFaceResponseBody) *SearchMediaByFaceResponse {
	s.Body = v
	return s
}

type SearchMediaByHybridRequest struct {
	// The ID of the media asset. The details of the media asset are returned.
	//
	// example:
	//
	// ****c469e944b5a856828dc2****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// test-1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
	Text          *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s SearchMediaByHybridRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByHybridRequest) GoString() string {
	return s.String()
}

func (s *SearchMediaByHybridRequest) SetMediaId(v string) *SearchMediaByHybridRequest {
	s.MediaId = &v
	return s
}

func (s *SearchMediaByHybridRequest) SetMediaType(v string) *SearchMediaByHybridRequest {
	s.MediaType = &v
	return s
}

func (s *SearchMediaByHybridRequest) SetNamespace(v string) *SearchMediaByHybridRequest {
	s.Namespace = &v
	return s
}

func (s *SearchMediaByHybridRequest) SetPageNo(v int32) *SearchMediaByHybridRequest {
	s.PageNo = &v
	return s
}

func (s *SearchMediaByHybridRequest) SetPageSize(v int32) *SearchMediaByHybridRequest {
	s.PageSize = &v
	return s
}

func (s *SearchMediaByHybridRequest) SetSearchLibName(v string) *SearchMediaByHybridRequest {
	s.SearchLibName = &v
	return s
}

func (s *SearchMediaByHybridRequest) SetText(v string) *SearchMediaByHybridRequest {
	s.Text = &v
	return s
}

type SearchMediaByHybridResponseBody struct {
	// example:
	//
	// 200
	Code      *string                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	MediaList []*SearchMediaByHybridResponseBodyMediaList `json:"MediaList,omitempty" xml:"MediaList,omitempty" type:"Repeated"`
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 30
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s SearchMediaByHybridResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByHybridResponseBody) GoString() string {
	return s.String()
}

func (s *SearchMediaByHybridResponseBody) SetCode(v string) *SearchMediaByHybridResponseBody {
	s.Code = &v
	return s
}

func (s *SearchMediaByHybridResponseBody) SetMediaList(v []*SearchMediaByHybridResponseBodyMediaList) *SearchMediaByHybridResponseBody {
	s.MediaList = v
	return s
}

func (s *SearchMediaByHybridResponseBody) SetRequestId(v string) *SearchMediaByHybridResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchMediaByHybridResponseBody) SetSuccess(v string) *SearchMediaByHybridResponseBody {
	s.Success = &v
	return s
}

func (s *SearchMediaByHybridResponseBody) SetTotal(v int64) *SearchMediaByHybridResponseBody {
	s.Total = &v
	return s
}

type SearchMediaByHybridResponseBodyMediaList struct {
	ClipInfo []*SearchMediaByHybridResponseBodyMediaListClipInfo `json:"ClipInfo,omitempty" xml:"ClipInfo,omitempty" type:"Repeated"`
	// example:
	//
	// a18936e0e28771edb59ae6f6f47a****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s SearchMediaByHybridResponseBodyMediaList) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByHybridResponseBodyMediaList) GoString() string {
	return s.String()
}

func (s *SearchMediaByHybridResponseBodyMediaList) SetClipInfo(v []*SearchMediaByHybridResponseBodyMediaListClipInfo) *SearchMediaByHybridResponseBodyMediaList {
	s.ClipInfo = v
	return s
}

func (s *SearchMediaByHybridResponseBodyMediaList) SetMediaId(v string) *SearchMediaByHybridResponseBodyMediaList {
	s.MediaId = &v
	return s
}

type SearchMediaByHybridResponseBodyMediaListClipInfo struct {
	// example:
	//
	// 2
	From *float64 `json:"From,omitempty" xml:"From,omitempty"`
	// example:
	//
	// 0.99
	Score *float64 `json:"Score,omitempty" xml:"Score,omitempty"`
	// example:
	//
	// 4
	To *float64 `json:"To,omitempty" xml:"To,omitempty"`
}

func (s SearchMediaByHybridResponseBodyMediaListClipInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByHybridResponseBodyMediaListClipInfo) GoString() string {
	return s.String()
}

func (s *SearchMediaByHybridResponseBodyMediaListClipInfo) SetFrom(v float64) *SearchMediaByHybridResponseBodyMediaListClipInfo {
	s.From = &v
	return s
}

func (s *SearchMediaByHybridResponseBodyMediaListClipInfo) SetScore(v float64) *SearchMediaByHybridResponseBodyMediaListClipInfo {
	s.Score = &v
	return s
}

func (s *SearchMediaByHybridResponseBodyMediaListClipInfo) SetTo(v float64) *SearchMediaByHybridResponseBodyMediaListClipInfo {
	s.To = &v
	return s
}

type SearchMediaByHybridResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchMediaByHybridResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchMediaByHybridResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByHybridResponse) GoString() string {
	return s.String()
}

func (s *SearchMediaByHybridResponse) SetHeaders(v map[string]*string) *SearchMediaByHybridResponse {
	s.Headers = v
	return s
}

func (s *SearchMediaByHybridResponse) SetStatusCode(v int32) *SearchMediaByHybridResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchMediaByHybridResponse) SetBody(v *SearchMediaByHybridResponseBody) *SearchMediaByHybridResponse {
	s.Body = v
	return s
}

type SearchMediaByMultimodalRequest struct {
	// The type of the media assets.
	//
	// Valid values:
	//
	// 	- image
	//
	// 	- video (default)
	//
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 50.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The search library.
	//
	// example:
	//
	// test-1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
	// The content that you want to query. You can describe the content in natural language.
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s SearchMediaByMultimodalRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByMultimodalRequest) GoString() string {
	return s.String()
}

func (s *SearchMediaByMultimodalRequest) SetMediaType(v string) *SearchMediaByMultimodalRequest {
	s.MediaType = &v
	return s
}

func (s *SearchMediaByMultimodalRequest) SetNamespace(v string) *SearchMediaByMultimodalRequest {
	s.Namespace = &v
	return s
}

func (s *SearchMediaByMultimodalRequest) SetPageNo(v int32) *SearchMediaByMultimodalRequest {
	s.PageNo = &v
	return s
}

func (s *SearchMediaByMultimodalRequest) SetPageSize(v int32) *SearchMediaByMultimodalRequest {
	s.PageSize = &v
	return s
}

func (s *SearchMediaByMultimodalRequest) SetSearchLibName(v string) *SearchMediaByMultimodalRequest {
	s.SearchLibName = &v
	return s
}

func (s *SearchMediaByMultimodalRequest) SetText(v string) *SearchMediaByMultimodalRequest {
	s.Text = &v
	return s
}

type SearchMediaByMultimodalResponseBody struct {
	// The status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The media assets that contain the specified content.
	MediaList []*SearchMediaByMultimodalResponseBodyMediaList `json:"MediaList,omitempty" xml:"MediaList,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// ****63E8B7C7-4812-46AD-0FA56029AC86****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values: true false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of data records that meet the specified filter condition.
	//
	// example:
	//
	// 20
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s SearchMediaByMultimodalResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByMultimodalResponseBody) GoString() string {
	return s.String()
}

func (s *SearchMediaByMultimodalResponseBody) SetCode(v string) *SearchMediaByMultimodalResponseBody {
	s.Code = &v
	return s
}

func (s *SearchMediaByMultimodalResponseBody) SetMediaList(v []*SearchMediaByMultimodalResponseBodyMediaList) *SearchMediaByMultimodalResponseBody {
	s.MediaList = v
	return s
}

func (s *SearchMediaByMultimodalResponseBody) SetRequestId(v string) *SearchMediaByMultimodalResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchMediaByMultimodalResponseBody) SetSuccess(v string) *SearchMediaByMultimodalResponseBody {
	s.Success = &v
	return s
}

func (s *SearchMediaByMultimodalResponseBody) SetTotal(v int64) *SearchMediaByMultimodalResponseBody {
	s.Total = &v
	return s
}

type SearchMediaByMultimodalResponseBodyMediaList struct {
	// The information about the clip.
	ClipInfo []*SearchMediaByMultimodalResponseBodyMediaListClipInfo `json:"ClipInfo,omitempty" xml:"ClipInfo,omitempty" type:"Repeated"`
	// The ID of the media asset.
	//
	// example:
	//
	// a18936e0e28771edb59ae6f6f47a****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s SearchMediaByMultimodalResponseBodyMediaList) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByMultimodalResponseBodyMediaList) GoString() string {
	return s.String()
}

func (s *SearchMediaByMultimodalResponseBodyMediaList) SetClipInfo(v []*SearchMediaByMultimodalResponseBodyMediaListClipInfo) *SearchMediaByMultimodalResponseBodyMediaList {
	s.ClipInfo = v
	return s
}

func (s *SearchMediaByMultimodalResponseBodyMediaList) SetMediaId(v string) *SearchMediaByMultimodalResponseBodyMediaList {
	s.MediaId = &v
	return s
}

type SearchMediaByMultimodalResponseBodyMediaListClipInfo struct {
	// The start time of the clip.
	//
	// example:
	//
	// 2
	From *float64 `json:"From,omitempty" xml:"From,omitempty"`
	// The score.
	//
	// example:
	//
	// 1.2
	Score *float64 `json:"Score,omitempty" xml:"Score,omitempty"`
	// The end time of the clip.
	//
	// example:
	//
	// 4
	To *float64 `json:"To,omitempty" xml:"To,omitempty"`
}

func (s SearchMediaByMultimodalResponseBodyMediaListClipInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByMultimodalResponseBodyMediaListClipInfo) GoString() string {
	return s.String()
}

func (s *SearchMediaByMultimodalResponseBodyMediaListClipInfo) SetFrom(v float64) *SearchMediaByMultimodalResponseBodyMediaListClipInfo {
	s.From = &v
	return s
}

func (s *SearchMediaByMultimodalResponseBodyMediaListClipInfo) SetScore(v float64) *SearchMediaByMultimodalResponseBodyMediaListClipInfo {
	s.Score = &v
	return s
}

func (s *SearchMediaByMultimodalResponseBodyMediaListClipInfo) SetTo(v float64) *SearchMediaByMultimodalResponseBodyMediaListClipInfo {
	s.To = &v
	return s
}

type SearchMediaByMultimodalResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchMediaByMultimodalResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchMediaByMultimodalResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByMultimodalResponse) GoString() string {
	return s.String()
}

func (s *SearchMediaByMultimodalResponse) SetHeaders(v map[string]*string) *SearchMediaByMultimodalResponse {
	s.Headers = v
	return s
}

func (s *SearchMediaByMultimodalResponse) SetStatusCode(v int32) *SearchMediaByMultimodalResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchMediaByMultimodalResponse) SetBody(v *SearchMediaByMultimodalResponseBody) *SearchMediaByMultimodalResponse {
	s.Body = v
	return s
}

type SearchMediaClipByFaceRequest struct {
	// The ID of the entity.
	//
	// example:
	//
	// 2d3bf1e35a1e42b5ab338d701efa****
	EntityId *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	// The value of this parameter is the same as that of the FaceSearchToken parameter in the SearchMediaByFace request. This specifies to return media asset clips that meet the same query conditions.
	//
	// This parameter is required.
	//
	// example:
	//
	// zxtest-huangxuan-2023-3-7-V1
	FaceSearchToken *string `json:"FaceSearchToken,omitempty" xml:"FaceSearchToken,omitempty"`
	// The ID of the media asset.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3b187b3620c8490886cfc2a9578c****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 50.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The name of the search library.
	//
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
}

func (s SearchMediaClipByFaceRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaClipByFaceRequest) GoString() string {
	return s.String()
}

func (s *SearchMediaClipByFaceRequest) SetEntityId(v string) *SearchMediaClipByFaceRequest {
	s.EntityId = &v
	return s
}

func (s *SearchMediaClipByFaceRequest) SetFaceSearchToken(v string) *SearchMediaClipByFaceRequest {
	s.FaceSearchToken = &v
	return s
}

func (s *SearchMediaClipByFaceRequest) SetMediaId(v string) *SearchMediaClipByFaceRequest {
	s.MediaId = &v
	return s
}

func (s *SearchMediaClipByFaceRequest) SetPageNo(v int32) *SearchMediaClipByFaceRequest {
	s.PageNo = &v
	return s
}

func (s *SearchMediaClipByFaceRequest) SetPageSize(v int32) *SearchMediaClipByFaceRequest {
	s.PageSize = &v
	return s
}

func (s *SearchMediaClipByFaceRequest) SetSearchLibName(v string) *SearchMediaClipByFaceRequest {
	s.SearchLibName = &v
	return s
}

type SearchMediaClipByFaceResponseBody struct {
	// The status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The media asset clips that meet the requirements.
	MediaClipList []*SearchMediaClipByFaceResponseBodyMediaClipList `json:"MediaClipList,omitempty" xml:"MediaClipList,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// E44FFACD-9E90-555A-A09A-6FD3B7335E39
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values: true and false.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of media asset clips that meet the conditions.
	//
	// example:
	//
	// 5
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s SearchMediaClipByFaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaClipByFaceResponseBody) GoString() string {
	return s.String()
}

func (s *SearchMediaClipByFaceResponseBody) SetCode(v string) *SearchMediaClipByFaceResponseBody {
	s.Code = &v
	return s
}

func (s *SearchMediaClipByFaceResponseBody) SetMediaClipList(v []*SearchMediaClipByFaceResponseBodyMediaClipList) *SearchMediaClipByFaceResponseBody {
	s.MediaClipList = v
	return s
}

func (s *SearchMediaClipByFaceResponseBody) SetRequestId(v string) *SearchMediaClipByFaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchMediaClipByFaceResponseBody) SetSuccess(v string) *SearchMediaClipByFaceResponseBody {
	s.Success = &v
	return s
}

func (s *SearchMediaClipByFaceResponseBody) SetTotal(v int64) *SearchMediaClipByFaceResponseBody {
	s.Total = &v
	return s
}

type SearchMediaClipByFaceResponseBodyMediaClipList struct {
	// The type of the character. Valid values: celebrity sensitive politician custom unknown
	//
	// example:
	//
	// celebrity
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The ID of the entity, which is the same as the entity ID returned in tag analysis.
	//
	// example:
	//
	// 1031025****
	EntityId *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	// The name of the entity.
	LabelName *string `json:"LabelName,omitempty" xml:"LabelName,omitempty"`
	// The information about clips related to the face.
	OccurrencesInfos []*SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfos `json:"OccurrencesInfos,omitempty" xml:"OccurrencesInfos,omitempty" type:"Repeated"`
	// The score of the clip. The value is of the Float type. The value is in the range of [0,1].
	//
	// example:
	//
	// 0.99041677
	Score *float32 `json:"Score,omitempty" xml:"Score,omitempty"`
}

func (s SearchMediaClipByFaceResponseBodyMediaClipList) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaClipByFaceResponseBodyMediaClipList) GoString() string {
	return s.String()
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipList) SetCategory(v string) *SearchMediaClipByFaceResponseBodyMediaClipList {
	s.Category = &v
	return s
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipList) SetEntityId(v string) *SearchMediaClipByFaceResponseBodyMediaClipList {
	s.EntityId = &v
	return s
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipList) SetLabelName(v string) *SearchMediaClipByFaceResponseBodyMediaClipList {
	s.LabelName = &v
	return s
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipList) SetOccurrencesInfos(v []*SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfos) *SearchMediaClipByFaceResponseBodyMediaClipList {
	s.OccurrencesInfos = v
	return s
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipList) SetScore(v float32) *SearchMediaClipByFaceResponseBodyMediaClipList {
	s.Score = &v
	return s
}

type SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfos struct {
	// The end time of the clip. Unit: seconds. The value is of the Float type.
	//
	// example:
	//
	// 69.06635
	EndTime    *float32 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Expression *string  `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The start time of the clip. Unit: seconds. The value is of the Float type.
	//
	// example:
	//
	// 61.066353
	StartTime *float32 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The information about the face in the clip.
	TrackData []*SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackData `json:"TrackData,omitempty" xml:"TrackData,omitempty" type:"Repeated"`
}

func (s SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfos) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfos) GoString() string {
	return s.String()
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfos) SetEndTime(v float32) *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfos {
	s.EndTime = &v
	return s
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfos) SetExpression(v string) *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfos {
	s.Expression = &v
	return s
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfos) SetStartTime(v float32) *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfos {
	s.StartTime = &v
	return s
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfos) SetTrackData(v []*SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackData) *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfos {
	s.TrackData = v
	return s
}

type SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackData struct {
	// The coordinates of the face.
	BoxPosition *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackDataBoxPosition `json:"BoxPosition,omitempty" xml:"BoxPosition,omitempty" type:"Struct"`
	// The timestamp when the face appears in the clip. Unit: seconds. The value is of the Float type.
	//
	// example:
	//
	// 62.03302
	Timestamp *float32 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackData) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackData) GoString() string {
	return s.String()
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackData) SetBoxPosition(v *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackDataBoxPosition) *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackData {
	s.BoxPosition = v
	return s
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackData) SetTimestamp(v float32) *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackData {
	s.Timestamp = &v
	return s
}

type SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackDataBoxPosition struct {
	// The height of the rectangle frame. Unit: pixels.
	//
	// example:
	//
	// 168
	H *int32 `json:"H,omitempty" xml:"H,omitempty"`
	// The width of the rectangle frame. Unit: pixels.
	//
	// example:
	//
	// 128
	W *int32 `json:"W,omitempty" xml:"W,omitempty"`
	// The x-axis coordinate of the upper-left corner. Unit: pixels.
	//
	// example:
	//
	// 517
	X *int32 `json:"X,omitempty" xml:"X,omitempty"`
	// The y-axis coordinate of the upper-left corner. Unit: pixels.
	//
	// example:
	//
	// 409
	Y *int32 `json:"Y,omitempty" xml:"Y,omitempty"`
}

func (s SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackDataBoxPosition) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackDataBoxPosition) GoString() string {
	return s.String()
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackDataBoxPosition) SetH(v int32) *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackDataBoxPosition {
	s.H = &v
	return s
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackDataBoxPosition) SetW(v int32) *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackDataBoxPosition {
	s.W = &v
	return s
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackDataBoxPosition) SetX(v int32) *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackDataBoxPosition {
	s.X = &v
	return s
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackDataBoxPosition) SetY(v int32) *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackDataBoxPosition {
	s.Y = &v
	return s
}

type SearchMediaClipByFaceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchMediaClipByFaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchMediaClipByFaceResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaClipByFaceResponse) GoString() string {
	return s.String()
}

func (s *SearchMediaClipByFaceResponse) SetHeaders(v map[string]*string) *SearchMediaClipByFaceResponse {
	s.Headers = v
	return s
}

func (s *SearchMediaClipByFaceResponse) SetStatusCode(v int32) *SearchMediaClipByFaceResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchMediaClipByFaceResponse) SetBody(v *SearchMediaClipByFaceResponseBody) *SearchMediaClipByFaceResponse {
	s.Body = v
	return s
}

type SearchPublicMediaInfoRequest struct {
	// example:
	//
	// true
	Authorized *bool `json:"Authorized,omitempty" xml:"Authorized,omitempty"`
	// example:
	//
	// "ApprovalStatus=\\"Available\\"&amp;MaterialBags=\\"boutiquemusic\\"&amp;Mood=\\"Nervous\\""
	DynamicMetaDataMatchFields *string `json:"DynamicMetaDataMatchFields,omitempty" xml:"DynamicMetaDataMatchFields,omitempty"`
	// example:
	//
	// Copyright_Music
	EntityId *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	// example:
	//
	// true
	Favorite *bool `json:"Favorite,omitempty" xml:"Favorite,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****,****15d4a4b0448391508f2cb486****
	MediaIds *string `json:"MediaIds,omitempty" xml:"MediaIds,omitempty"`
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// UsageCount:Desc,UnitPrice:Asc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
}

func (s SearchPublicMediaInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchPublicMediaInfoRequest) GoString() string {
	return s.String()
}

func (s *SearchPublicMediaInfoRequest) SetAuthorized(v bool) *SearchPublicMediaInfoRequest {
	s.Authorized = &v
	return s
}

func (s *SearchPublicMediaInfoRequest) SetDynamicMetaDataMatchFields(v string) *SearchPublicMediaInfoRequest {
	s.DynamicMetaDataMatchFields = &v
	return s
}

func (s *SearchPublicMediaInfoRequest) SetEntityId(v string) *SearchPublicMediaInfoRequest {
	s.EntityId = &v
	return s
}

func (s *SearchPublicMediaInfoRequest) SetFavorite(v bool) *SearchPublicMediaInfoRequest {
	s.Favorite = &v
	return s
}

func (s *SearchPublicMediaInfoRequest) SetMediaIds(v string) *SearchPublicMediaInfoRequest {
	s.MediaIds = &v
	return s
}

func (s *SearchPublicMediaInfoRequest) SetPageNo(v int32) *SearchPublicMediaInfoRequest {
	s.PageNo = &v
	return s
}

func (s *SearchPublicMediaInfoRequest) SetPageSize(v int32) *SearchPublicMediaInfoRequest {
	s.PageSize = &v
	return s
}

func (s *SearchPublicMediaInfoRequest) SetSortBy(v string) *SearchPublicMediaInfoRequest {
	s.SortBy = &v
	return s
}

type SearchPublicMediaInfoResponseBody struct {
	PublicMediaInfos []*SearchPublicMediaInfoResponseBodyPublicMediaInfos `json:"PublicMediaInfos,omitempty" xml:"PublicMediaInfos,omitempty" type:"Repeated"`
	// example:
	//
	// ****3CFB-2767-54FD-B311-BD15A4C1****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 100
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s SearchPublicMediaInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchPublicMediaInfoResponseBody) GoString() string {
	return s.String()
}

func (s *SearchPublicMediaInfoResponseBody) SetPublicMediaInfos(v []*SearchPublicMediaInfoResponseBodyPublicMediaInfos) *SearchPublicMediaInfoResponseBody {
	s.PublicMediaInfos = v
	return s
}

func (s *SearchPublicMediaInfoResponseBody) SetRequestId(v string) *SearchPublicMediaInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBody) SetTotalCount(v int64) *SearchPublicMediaInfoResponseBody {
	s.TotalCount = &v
	return s
}

type SearchPublicMediaInfoResponseBodyPublicMediaInfos struct {
	// example:
	//
	// true
	Authorized *bool `json:"Authorized,omitempty" xml:"Authorized,omitempty"`
	// example:
	//
	// true
	Favorite  *bool                                                       `json:"Favorite,omitempty" xml:"Favorite,omitempty"`
	MediaInfo *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo `json:"MediaInfo,omitempty" xml:"MediaInfo,omitempty" type:"Struct"`
	// example:
	//
	// 100
	RemainingAuthTime *string `json:"RemainingAuthTime,omitempty" xml:"RemainingAuthTime,omitempty"`
}

func (s SearchPublicMediaInfoResponseBodyPublicMediaInfos) String() string {
	return tea.Prettify(s)
}

func (s SearchPublicMediaInfoResponseBodyPublicMediaInfos) GoString() string {
	return s.String()
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfos) SetAuthorized(v bool) *SearchPublicMediaInfoResponseBodyPublicMediaInfos {
	s.Authorized = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfos) SetFavorite(v bool) *SearchPublicMediaInfoResponseBodyPublicMediaInfos {
	s.Favorite = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfos) SetMediaInfo(v *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo) *SearchPublicMediaInfoResponseBodyPublicMediaInfos {
	s.MediaInfo = v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfos) SetRemainingAuthTime(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfos {
	s.RemainingAuthTime = &v
	return s
}

type SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo struct {
	DynamicMetaData *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData `json:"DynamicMetaData,omitempty" xml:"DynamicMetaData,omitempty" type:"Struct"`
	// BasicInfo
	MediaBasicInfo *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// example:
	//
	// icepublic-****87b921bb4a55908a72a0537e****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo) GoString() string {
	return s.String()
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo) SetDynamicMetaData(v *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo {
	s.DynamicMetaData = v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo) SetMediaBasicInfo(v *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo {
	s.MediaBasicInfo = v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo) SetMediaId(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo {
	s.MediaId = &v
	return s
}

type SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData struct {
	// example:
	//
	// "{\\"AuditionUrl\\": \\"http://xxx\\", \\"AuditionCount\\": 3...}"
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// system
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData) String() string {
	return tea.Prettify(s)
}

func (s SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData) GoString() string {
	return s.String()
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData) SetData(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData {
	s.Data = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData) SetType(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData {
	s.Type = &v
	return s
}

type SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo struct {
	// example:
	//
	// general
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// example:
	//
	// category
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// example:
	//
	// 2020-12-26T06:04:49Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2020-12-29T06:04:49Z
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	// example:
	//
	// description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// MediaId
	//
	// example:
	//
	// icepublic-****87b921bb4a55908a72a0537e****
	MediaId   *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// example:
	//
	// audio
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// 2020-12-26T06:04:50Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// oss
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// [{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]
	SpriteImages *string `json:"SpriteImages,omitempty" xml:"SpriteImages,omitempty"`
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// title
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// userDataTest
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetBusinessType(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetCategory(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetCoverURL(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetCreateTime(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetDeletedTime(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetDescription(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetMediaId(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetMediaTags(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetMediaType(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetModifiedTime(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetSource(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetSpriteImages(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.SpriteImages = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetStatus(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetTitle(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetUserData(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.UserData = &v
	return s
}

type SearchPublicMediaInfoResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchPublicMediaInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchPublicMediaInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchPublicMediaInfoResponse) GoString() string {
	return s.String()
}

func (s *SearchPublicMediaInfoResponse) SetHeaders(v map[string]*string) *SearchPublicMediaInfoResponse {
	s.Headers = v
	return s
}

func (s *SearchPublicMediaInfoResponse) SetStatusCode(v int32) *SearchPublicMediaInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchPublicMediaInfoResponse) SetBody(v *SearchPublicMediaInfoResponseBody) *SearchPublicMediaInfoResponse {
	s.Body = v
	return s
}

type SendAIAgentDataChannelMessageRequest struct {
	// The ID of the AI agent in the conversation.
	//
	// This parameter is required.
	//
	// example:
	//
	// 39f8e0bc005e4f309379701645f4****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The DataChannel message you want to send. You must specify a JSON string. The value can be up to 8,192 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"key":"value"}
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s SendAIAgentDataChannelMessageRequest) String() string {
	return tea.Prettify(s)
}

func (s SendAIAgentDataChannelMessageRequest) GoString() string {
	return s.String()
}

func (s *SendAIAgentDataChannelMessageRequest) SetInstanceId(v string) *SendAIAgentDataChannelMessageRequest {
	s.InstanceId = &v
	return s
}

func (s *SendAIAgentDataChannelMessageRequest) SetMessage(v string) *SendAIAgentDataChannelMessageRequest {
	s.Message = &v
	return s
}

type SendAIAgentDataChannelMessageResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 7B117AF5-2A16-412C-B127-FA6175ED1AD0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SendAIAgentDataChannelMessageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendAIAgentDataChannelMessageResponseBody) GoString() string {
	return s.String()
}

func (s *SendAIAgentDataChannelMessageResponseBody) SetRequestId(v string) *SendAIAgentDataChannelMessageResponseBody {
	s.RequestId = &v
	return s
}

type SendAIAgentDataChannelMessageResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SendAIAgentDataChannelMessageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SendAIAgentDataChannelMessageResponse) String() string {
	return tea.Prettify(s)
}

func (s SendAIAgentDataChannelMessageResponse) GoString() string {
	return s.String()
}

func (s *SendAIAgentDataChannelMessageResponse) SetHeaders(v map[string]*string) *SendAIAgentDataChannelMessageResponse {
	s.Headers = v
	return s
}

func (s *SendAIAgentDataChannelMessageResponse) SetStatusCode(v int32) *SendAIAgentDataChannelMessageResponse {
	s.StatusCode = &v
	return s
}

func (s *SendAIAgentDataChannelMessageResponse) SetBody(v *SendAIAgentDataChannelMessageResponseBody) *SendAIAgentDataChannelMessageResponse {
	s.Body = v
	return s
}

type SendAIAgentSpeechRequest struct {
	// Specifies whether the broadcast can interrupt the ongoing speech. Default value: true
	//
	// example:
	//
	// true
	EnableInterrupt *bool `json:"EnableInterrupt,omitempty" xml:"EnableInterrupt,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 39f8e0bc005e4f309379701645f4****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s SendAIAgentSpeechRequest) String() string {
	return tea.Prettify(s)
}

func (s SendAIAgentSpeechRequest) GoString() string {
	return s.String()
}

func (s *SendAIAgentSpeechRequest) SetEnableInterrupt(v bool) *SendAIAgentSpeechRequest {
	s.EnableInterrupt = &v
	return s
}

func (s *SendAIAgentSpeechRequest) SetInstanceId(v string) *SendAIAgentSpeechRequest {
	s.InstanceId = &v
	return s
}

func (s *SendAIAgentSpeechRequest) SetText(v string) *SendAIAgentSpeechRequest {
	s.Text = &v
	return s
}

type SendAIAgentSpeechResponseBody struct {
	// example:
	//
	// 7B117AF5-2A16-412C-B127-FA6175ED1AD0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SendAIAgentSpeechResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendAIAgentSpeechResponseBody) GoString() string {
	return s.String()
}

func (s *SendAIAgentSpeechResponseBody) SetRequestId(v string) *SendAIAgentSpeechResponseBody {
	s.RequestId = &v
	return s
}

type SendAIAgentSpeechResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SendAIAgentSpeechResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SendAIAgentSpeechResponse) String() string {
	return tea.Prettify(s)
}

func (s SendAIAgentSpeechResponse) GoString() string {
	return s.String()
}

func (s *SendAIAgentSpeechResponse) SetHeaders(v map[string]*string) *SendAIAgentSpeechResponse {
	s.Headers = v
	return s
}

func (s *SendAIAgentSpeechResponse) SetStatusCode(v int32) *SendAIAgentSpeechResponse {
	s.StatusCode = &v
	return s
}

func (s *SendAIAgentSpeechResponse) SetBody(v *SendAIAgentSpeechResponseBody) *SendAIAgentSpeechResponse {
	s.Body = v
	return s
}

type SendAIAgentTextRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// f27f9b9be28642a88e18****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s SendAIAgentTextRequest) String() string {
	return tea.Prettify(s)
}

func (s SendAIAgentTextRequest) GoString() string {
	return s.String()
}

func (s *SendAIAgentTextRequest) SetInstanceId(v string) *SendAIAgentTextRequest {
	s.InstanceId = &v
	return s
}

func (s *SendAIAgentTextRequest) SetText(v string) *SendAIAgentTextRequest {
	s.Text = &v
	return s
}

type SendAIAgentTextResponseBody struct {
	// example:
	//
	// DB488837-3****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SendAIAgentTextResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendAIAgentTextResponseBody) GoString() string {
	return s.String()
}

func (s *SendAIAgentTextResponseBody) SetRequestId(v string) *SendAIAgentTextResponseBody {
	s.RequestId = &v
	return s
}

type SendAIAgentTextResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SendAIAgentTextResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SendAIAgentTextResponse) String() string {
	return tea.Prettify(s)
}

func (s SendAIAgentTextResponse) GoString() string {
	return s.String()
}

func (s *SendAIAgentTextResponse) SetHeaders(v map[string]*string) *SendAIAgentTextResponse {
	s.Headers = v
	return s
}

func (s *SendAIAgentTextResponse) SetStatusCode(v int32) *SendAIAgentTextResponse {
	s.StatusCode = &v
	return s
}

func (s *SendAIAgentTextResponse) SetBody(v *SendAIAgentTextResponseBody) *SendAIAgentTextResponse {
	s.Body = v
	return s
}

type SendLiveSnapshotJobCommandRequest struct {
	// The operation command.
	//
	// Valid values:
	//
	// 	- stop
	//
	// 	- restart
	//
	// 	- start
	//
	// This parameter is required.
	//
	// example:
	//
	// start
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
	// The ID of the snapshot job.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SendLiveSnapshotJobCommandRequest) String() string {
	return tea.Prettify(s)
}

func (s SendLiveSnapshotJobCommandRequest) GoString() string {
	return s.String()
}

func (s *SendLiveSnapshotJobCommandRequest) SetCommand(v string) *SendLiveSnapshotJobCommandRequest {
	s.Command = &v
	return s
}

func (s *SendLiveSnapshotJobCommandRequest) SetJobId(v string) *SendLiveSnapshotJobCommandRequest {
	s.JobId = &v
	return s
}

type SendLiveSnapshotJobCommandResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SendLiveSnapshotJobCommandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendLiveSnapshotJobCommandResponseBody) GoString() string {
	return s.String()
}

func (s *SendLiveSnapshotJobCommandResponseBody) SetRequestId(v string) *SendLiveSnapshotJobCommandResponseBody {
	s.RequestId = &v
	return s
}

type SendLiveSnapshotJobCommandResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SendLiveSnapshotJobCommandResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SendLiveSnapshotJobCommandResponse) String() string {
	return tea.Prettify(s)
}

func (s SendLiveSnapshotJobCommandResponse) GoString() string {
	return s.String()
}

func (s *SendLiveSnapshotJobCommandResponse) SetHeaders(v map[string]*string) *SendLiveSnapshotJobCommandResponse {
	s.Headers = v
	return s
}

func (s *SendLiveSnapshotJobCommandResponse) SetStatusCode(v int32) *SendLiveSnapshotJobCommandResponse {
	s.StatusCode = &v
	return s
}

func (s *SendLiveSnapshotJobCommandResponse) SetBody(v *SendLiveSnapshotJobCommandResponseBody) *SendLiveSnapshotJobCommandResponse {
	s.Body = v
	return s
}

type SendLiveTranscodeJobCommandRequest struct {
	// The operation command. Only the stop command is supported. This command is used to stop a transcoding job.
	//
	// This parameter is required.
	//
	// example:
	//
	// stop
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
	// The ID of the transcoding job.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SendLiveTranscodeJobCommandRequest) String() string {
	return tea.Prettify(s)
}

func (s SendLiveTranscodeJobCommandRequest) GoString() string {
	return s.String()
}

func (s *SendLiveTranscodeJobCommandRequest) SetCommand(v string) *SendLiveTranscodeJobCommandRequest {
	s.Command = &v
	return s
}

func (s *SendLiveTranscodeJobCommandRequest) SetJobId(v string) *SendLiveTranscodeJobCommandRequest {
	s.JobId = &v
	return s
}

type SendLiveTranscodeJobCommandResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SendLiveTranscodeJobCommandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendLiveTranscodeJobCommandResponseBody) GoString() string {
	return s.String()
}

func (s *SendLiveTranscodeJobCommandResponseBody) SetRequestId(v string) *SendLiveTranscodeJobCommandResponseBody {
	s.RequestId = &v
	return s
}

type SendLiveTranscodeJobCommandResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SendLiveTranscodeJobCommandResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SendLiveTranscodeJobCommandResponse) String() string {
	return tea.Prettify(s)
}

func (s SendLiveTranscodeJobCommandResponse) GoString() string {
	return s.String()
}

func (s *SendLiveTranscodeJobCommandResponse) SetHeaders(v map[string]*string) *SendLiveTranscodeJobCommandResponse {
	s.Headers = v
	return s
}

func (s *SendLiveTranscodeJobCommandResponse) SetStatusCode(v int32) *SendLiveTranscodeJobCommandResponse {
	s.StatusCode = &v
	return s
}

func (s *SendLiveTranscodeJobCommandResponse) SetBody(v *SendLiveTranscodeJobCommandResponseBody) *SendLiveTranscodeJobCommandResponse {
	s.Body = v
	return s
}

type SendMessageChatTextRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 39f8e0bc005e4f309379701645f4****
	AIAgentId *string `json:"AIAgentId,omitempty" xml:"AIAgentId,omitempty"`
	// example:
	//
	// online
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// example:
	//
	// true
	NeedArchiving *bool `json:"NeedArchiving,omitempty" xml:"NeedArchiving,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60000042053
	ReceiverId *string `json:"ReceiverId,omitempty" xml:"ReceiverId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// f27f9b9be28642a88e18****
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// This parameter is required.
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// announcement
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SendMessageChatTextRequest) String() string {
	return tea.Prettify(s)
}

func (s SendMessageChatTextRequest) GoString() string {
	return s.String()
}

func (s *SendMessageChatTextRequest) SetAIAgentId(v string) *SendMessageChatTextRequest {
	s.AIAgentId = &v
	return s
}

func (s *SendMessageChatTextRequest) SetMode(v string) *SendMessageChatTextRequest {
	s.Mode = &v
	return s
}

func (s *SendMessageChatTextRequest) SetNeedArchiving(v bool) *SendMessageChatTextRequest {
	s.NeedArchiving = &v
	return s
}

func (s *SendMessageChatTextRequest) SetReceiverId(v string) *SendMessageChatTextRequest {
	s.ReceiverId = &v
	return s
}

func (s *SendMessageChatTextRequest) SetSessionId(v string) *SendMessageChatTextRequest {
	s.SessionId = &v
	return s
}

func (s *SendMessageChatTextRequest) SetText(v string) *SendMessageChatTextRequest {
	s.Text = &v
	return s
}

func (s *SendMessageChatTextRequest) SetType(v string) *SendMessageChatTextRequest {
	s.Type = &v
	return s
}

type SendMessageChatTextResponseBody struct {
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SendMessageChatTextResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendMessageChatTextResponseBody) GoString() string {
	return s.String()
}

func (s *SendMessageChatTextResponseBody) SetRequestId(v string) *SendMessageChatTextResponseBody {
	s.RequestId = &v
	return s
}

type SendMessageChatTextResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SendMessageChatTextResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SendMessageChatTextResponse) String() string {
	return tea.Prettify(s)
}

func (s SendMessageChatTextResponse) GoString() string {
	return s.String()
}

func (s *SendMessageChatTextResponse) SetHeaders(v map[string]*string) *SendMessageChatTextResponse {
	s.Headers = v
	return s
}

func (s *SendMessageChatTextResponse) SetStatusCode(v int32) *SendMessageChatTextResponse {
	s.StatusCode = &v
	return s
}

func (s *SendMessageChatTextResponse) SetBody(v *SendMessageChatTextResponseBody) *SendMessageChatTextResponse {
	s.Body = v
	return s
}

type SetContentAnalyzeConfigRequest struct {
	// example:
	//
	// true
	Auto *bool `json:"Auto,omitempty" xml:"Auto,omitempty"`
	// example:
	//
	// TEXT,FACE
	SaveType *string `json:"SaveType,omitempty" xml:"SaveType,omitempty"`
	// example:
	//
	// S00000101-100070
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SetContentAnalyzeConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SetContentAnalyzeConfigRequest) GoString() string {
	return s.String()
}

func (s *SetContentAnalyzeConfigRequest) SetAuto(v bool) *SetContentAnalyzeConfigRequest {
	s.Auto = &v
	return s
}

func (s *SetContentAnalyzeConfigRequest) SetSaveType(v string) *SetContentAnalyzeConfigRequest {
	s.SaveType = &v
	return s
}

func (s *SetContentAnalyzeConfigRequest) SetTemplateId(v string) *SetContentAnalyzeConfigRequest {
	s.TemplateId = &v
	return s
}

type SetContentAnalyzeConfigResponseBody struct {
	// example:
	//
	// 953CFD27-4A2C-54AD-857F-B79EF3A338E0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SetContentAnalyzeConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetContentAnalyzeConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SetContentAnalyzeConfigResponseBody) SetRequestId(v string) *SetContentAnalyzeConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetContentAnalyzeConfigResponseBody) SetSuccess(v bool) *SetContentAnalyzeConfigResponseBody {
	s.Success = &v
	return s
}

type SetContentAnalyzeConfigResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetContentAnalyzeConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetContentAnalyzeConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SetContentAnalyzeConfigResponse) GoString() string {
	return s.String()
}

func (s *SetContentAnalyzeConfigResponse) SetHeaders(v map[string]*string) *SetContentAnalyzeConfigResponse {
	s.Headers = v
	return s
}

func (s *SetContentAnalyzeConfigResponse) SetStatusCode(v int32) *SetContentAnalyzeConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *SetContentAnalyzeConfigResponse) SetBody(v *SetContentAnalyzeConfigResponseBody) *SetContentAnalyzeConfigResponse {
	s.Body = v
	return s
}

type SetDefaultCustomTemplateRequest struct {
	// The template ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****d80e4e4044975745c14b****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SetDefaultCustomTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDefaultCustomTemplateRequest) GoString() string {
	return s.String()
}

func (s *SetDefaultCustomTemplateRequest) SetTemplateId(v string) *SetDefaultCustomTemplateRequest {
	s.TemplateId = &v
	return s
}

type SetDefaultCustomTemplateResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SetDefaultCustomTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetDefaultCustomTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *SetDefaultCustomTemplateResponseBody) SetRequestId(v string) *SetDefaultCustomTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetDefaultCustomTemplateResponseBody) SetSuccess(v bool) *SetDefaultCustomTemplateResponseBody {
	s.Success = &v
	return s
}

type SetDefaultCustomTemplateResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetDefaultCustomTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetDefaultCustomTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDefaultCustomTemplateResponse) GoString() string {
	return s.String()
}

func (s *SetDefaultCustomTemplateResponse) SetHeaders(v map[string]*string) *SetDefaultCustomTemplateResponse {
	s.Headers = v
	return s
}

func (s *SetDefaultCustomTemplateResponse) SetStatusCode(v int32) *SetDefaultCustomTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *SetDefaultCustomTemplateResponse) SetBody(v *SetDefaultCustomTemplateResponseBody) *SetDefaultCustomTemplateResponse {
	s.Body = v
	return s
}

type SetDefaultStorageLocationRequest struct {
	// example:
	//
	// oss-test-bucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// example:
	//
	// ims/dir
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// example:
	//
	// user_oss_bucket
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s SetDefaultStorageLocationRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDefaultStorageLocationRequest) GoString() string {
	return s.String()
}

func (s *SetDefaultStorageLocationRequest) SetBucket(v string) *SetDefaultStorageLocationRequest {
	s.Bucket = &v
	return s
}

func (s *SetDefaultStorageLocationRequest) SetPath(v string) *SetDefaultStorageLocationRequest {
	s.Path = &v
	return s
}

func (s *SetDefaultStorageLocationRequest) SetStorageType(v string) *SetDefaultStorageLocationRequest {
	s.StorageType = &v
	return s
}

type SetDefaultStorageLocationResponseBody struct {
	// example:
	//
	// ******5A-CAAC-4850-A3AF-B74606******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SetDefaultStorageLocationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetDefaultStorageLocationResponseBody) GoString() string {
	return s.String()
}

func (s *SetDefaultStorageLocationResponseBody) SetRequestId(v string) *SetDefaultStorageLocationResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetDefaultStorageLocationResponseBody) SetSuccess(v bool) *SetDefaultStorageLocationResponseBody {
	s.Success = &v
	return s
}

type SetDefaultStorageLocationResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetDefaultStorageLocationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetDefaultStorageLocationResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDefaultStorageLocationResponse) GoString() string {
	return s.String()
}

func (s *SetDefaultStorageLocationResponse) SetHeaders(v map[string]*string) *SetDefaultStorageLocationResponse {
	s.Headers = v
	return s
}

func (s *SetDefaultStorageLocationResponse) SetStatusCode(v int32) *SetDefaultStorageLocationResponse {
	s.StatusCode = &v
	return s
}

func (s *SetDefaultStorageLocationResponse) SetBody(v *SetDefaultStorageLocationResponseBody) *SetDefaultStorageLocationResponse {
	s.Body = v
	return s
}

type SetEventCallbackRequest struct {
	// The authentication key. The key can be up to 32 characters in length and must contain uppercase letters, lowercase letters, and digits. This parameter takes effect only if you set CallbackType to **HTTP**.
	//
	// example:
	//
	// TestKey001
	AuthKey *string `json:"AuthKey,omitempty" xml:"AuthKey,omitempty"`
	// Specifies whether to enable callback authentication. This parameter takes effect only if you set CallbackType to **HTTP**. Valid values:
	//
	// 	- **on**
	//
	// 	- **off**
	//
	// example:
	//
	// on
	AuthSwitch *string `json:"AuthSwitch,omitempty" xml:"AuthSwitch,omitempty"`
	// The name of the Simple Message Queue (SMQ) queue in the region. The name must start with ice-callback-.
	//
	// example:
	//
	// ice-callback-queue
	CallbackQueueName *string `json:"CallbackQueueName,omitempty" xml:"CallbackQueueName,omitempty"`
	// The callback method. Valid values:
	//
	// 	- **HTTP**
	//
	// 	- **MNS**
	//
	// example:
	//
	// HTTP
	CallbackType *string `json:"CallbackType,omitempty" xml:"CallbackType,omitempty"`
	// The callback URL. This parameter is required if you set CallbackType to **HTTP**. The callback URL cannot exceed 256 bytes in length. You can specify only one callback URL.
	//
	// example:
	//
	// http://xxx.yyy/callback
	CallbackURL *string `json:"CallbackURL,omitempty" xml:"CallbackURL,omitempty"`
	// The type of the callback event. You can specify multiple values separated with commas (,). ProduceMediaComplete: indicates that the editing and production task is complete.
	//
	// example:
	//
	// ProduceMediaComplete
	EventTypeList *string `json:"EventTypeList,omitempty" xml:"EventTypeList,omitempty"`
}

func (s SetEventCallbackRequest) String() string {
	return tea.Prettify(s)
}

func (s SetEventCallbackRequest) GoString() string {
	return s.String()
}

func (s *SetEventCallbackRequest) SetAuthKey(v string) *SetEventCallbackRequest {
	s.AuthKey = &v
	return s
}

func (s *SetEventCallbackRequest) SetAuthSwitch(v string) *SetEventCallbackRequest {
	s.AuthSwitch = &v
	return s
}

func (s *SetEventCallbackRequest) SetCallbackQueueName(v string) *SetEventCallbackRequest {
	s.CallbackQueueName = &v
	return s
}

func (s *SetEventCallbackRequest) SetCallbackType(v string) *SetEventCallbackRequest {
	s.CallbackType = &v
	return s
}

func (s *SetEventCallbackRequest) SetCallbackURL(v string) *SetEventCallbackRequest {
	s.CallbackURL = &v
	return s
}

func (s *SetEventCallbackRequest) SetEventTypeList(v string) *SetEventCallbackRequest {
	s.EventTypeList = &v
	return s
}

type SetEventCallbackResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the configuration was successful. Valid values: true and false.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SetEventCallbackResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetEventCallbackResponseBody) GoString() string {
	return s.String()
}

func (s *SetEventCallbackResponseBody) SetRequestId(v string) *SetEventCallbackResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetEventCallbackResponseBody) SetSuccess(v bool) *SetEventCallbackResponseBody {
	s.Success = &v
	return s
}

type SetEventCallbackResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetEventCallbackResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetEventCallbackResponse) String() string {
	return tea.Prettify(s)
}

func (s SetEventCallbackResponse) GoString() string {
	return s.String()
}

func (s *SetEventCallbackResponse) SetHeaders(v map[string]*string) *SetEventCallbackResponse {
	s.Headers = v
	return s
}

func (s *SetEventCallbackResponse) SetStatusCode(v int32) *SetEventCallbackResponse {
	s.StatusCode = &v
	return s
}

func (s *SetEventCallbackResponse) SetBody(v *SetEventCallbackResponseBody) *SetEventCallbackResponse {
	s.Body = v
	return s
}

type SetNotifyConfigRequest struct {
	// The ID of the AI agent.
	//
	// This parameter is required.
	//
	// example:
	//
	// 39f8e0bc005e4f309379701645f4****
	AIAgentId    *string `json:"AIAgentId,omitempty" xml:"AIAgentId,omitempty"`
	AudioOssPath *string `json:"AudioOssPath,omitempty" xml:"AudioOssPath,omitempty"`
	// The URL for receiving callback notifications. By default, this parameter is left empty.
	//
	// example:
	//
	// http://customer.com/callback
	CallbackUrl          *string `json:"CallbackUrl,omitempty" xml:"CallbackUrl,omitempty"`
	EnableAudioRecording *bool   `json:"EnableAudioRecording,omitempty" xml:"EnableAudioRecording,omitempty"`
	// Specifies whether to enable event notifications.
	//
	// This parameter is required.
	//
	// example:
	//
	// true
	EnableNotify *bool `json:"EnableNotify,omitempty" xml:"EnableNotify,omitempty"`
	// The event types. If you do not specify this parameter, all event types are selected.
	//
	// 	- agent_start
	//
	// 	- agent_stop
	//
	// 	- error
	//
	// example:
	//
	// agent_start,agent_stop,error
	EventTypes *string `json:"EventTypes,omitempty" xml:"EventTypes,omitempty"`
	// The authentication token for callback. The token is carried in the Authorization header of a callback request. By default, this parameter is left empty.
	//
	// example:
	//
	// eyJhcHBpZCI6ICIxMjM0MTIzNxxxxx
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
}

func (s SetNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SetNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *SetNotifyConfigRequest) SetAIAgentId(v string) *SetNotifyConfigRequest {
	s.AIAgentId = &v
	return s
}

func (s *SetNotifyConfigRequest) SetAudioOssPath(v string) *SetNotifyConfigRequest {
	s.AudioOssPath = &v
	return s
}

func (s *SetNotifyConfigRequest) SetCallbackUrl(v string) *SetNotifyConfigRequest {
	s.CallbackUrl = &v
	return s
}

func (s *SetNotifyConfigRequest) SetEnableAudioRecording(v bool) *SetNotifyConfigRequest {
	s.EnableAudioRecording = &v
	return s
}

func (s *SetNotifyConfigRequest) SetEnableNotify(v bool) *SetNotifyConfigRequest {
	s.EnableNotify = &v
	return s
}

func (s *SetNotifyConfigRequest) SetEventTypes(v string) *SetNotifyConfigRequest {
	s.EventTypes = &v
	return s
}

func (s *SetNotifyConfigRequest) SetToken(v string) *SetNotifyConfigRequest {
	s.Token = &v
	return s
}

type SetNotifyConfigResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 771A1414-27BF-53E6-AB73-EFCB*****ACF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SetNotifyConfigResponseBody) SetRequestId(v string) *SetNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

type SetNotifyConfigResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SetNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *SetNotifyConfigResponse) SetHeaders(v map[string]*string) *SetNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *SetNotifyConfigResponse) SetStatusCode(v int32) *SetNotifyConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *SetNotifyConfigResponse) SetBody(v *SetNotifyConfigResponseBody) *SetNotifyConfigResponse {
	s.Body = v
	return s
}

type StartAIAgentInstanceRequest struct {
	// The ID of the AI agent created in the [IMS](https://ims.console.aliyun.com/ai/robot/list) console.
	//
	// This parameter is required.
	//
	// example:
	//
	// 39f8e0bc005e4f309379701645f4****
	AIAgentId   *string        `json:"AIAgentId,omitempty" xml:"AIAgentId,omitempty"`
	AgentConfig *AIAgentConfig `json:"AgentConfig,omitempty" xml:"AgentConfig,omitempty"`
	// 同步聊天记录配置。
	ChatSyncConfig *StartAIAgentInstanceRequestChatSyncConfig `json:"ChatSyncConfig,omitempty" xml:"ChatSyncConfig,omitempty" type:"Struct"`
	// This parameter is required.
	RuntimeConfig *AIAgentRuntimeConfig `json:"RuntimeConfig,omitempty" xml:"RuntimeConfig,omitempty"`
	// example:
	//
	// f213fbc005e4f309379701645f4****
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// Deprecated
	TemplateConfig *AIAgentTemplateConfig `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// example:
	//
	// {"Email":"johndoe@example.com","Preferences":{"Language":"en"}}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s StartAIAgentInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StartAIAgentInstanceRequest) GoString() string {
	return s.String()
}

func (s *StartAIAgentInstanceRequest) SetAIAgentId(v string) *StartAIAgentInstanceRequest {
	s.AIAgentId = &v
	return s
}

func (s *StartAIAgentInstanceRequest) SetAgentConfig(v *AIAgentConfig) *StartAIAgentInstanceRequest {
	s.AgentConfig = v
	return s
}

func (s *StartAIAgentInstanceRequest) SetChatSyncConfig(v *StartAIAgentInstanceRequestChatSyncConfig) *StartAIAgentInstanceRequest {
	s.ChatSyncConfig = v
	return s
}

func (s *StartAIAgentInstanceRequest) SetRuntimeConfig(v *AIAgentRuntimeConfig) *StartAIAgentInstanceRequest {
	s.RuntimeConfig = v
	return s
}

func (s *StartAIAgentInstanceRequest) SetSessionId(v string) *StartAIAgentInstanceRequest {
	s.SessionId = &v
	return s
}

func (s *StartAIAgentInstanceRequest) SetTemplateConfig(v *AIAgentTemplateConfig) *StartAIAgentInstanceRequest {
	s.TemplateConfig = v
	return s
}

func (s *StartAIAgentInstanceRequest) SetUserData(v string) *StartAIAgentInstanceRequest {
	s.UserData = &v
	return s
}

type StartAIAgentInstanceRequestChatSyncConfig struct {
	// IM的智能体Id。
	//
	// example:
	//
	// ******005e4f309379701645f4****
	IMAIAgentId *string `json:"IMAIAgentId,omitempty" xml:"IMAIAgentId,omitempty"`
	// 接收用户Id。
	//
	// example:
	//
	// 4167626d312034b2b1c3b7f2f3e41884
	ReceiverId *string `json:"ReceiverId,omitempty" xml:"ReceiverId,omitempty"`
}

func (s StartAIAgentInstanceRequestChatSyncConfig) String() string {
	return tea.Prettify(s)
}

func (s StartAIAgentInstanceRequestChatSyncConfig) GoString() string {
	return s.String()
}

func (s *StartAIAgentInstanceRequestChatSyncConfig) SetIMAIAgentId(v string) *StartAIAgentInstanceRequestChatSyncConfig {
	s.IMAIAgentId = &v
	return s
}

func (s *StartAIAgentInstanceRequestChatSyncConfig) SetReceiverId(v string) *StartAIAgentInstanceRequestChatSyncConfig {
	s.ReceiverId = &v
	return s
}

type StartAIAgentInstanceShrinkRequest struct {
	// The ID of the AI agent created in the [IMS](https://ims.console.aliyun.com/ai/robot/list) console.
	//
	// This parameter is required.
	//
	// example:
	//
	// 39f8e0bc005e4f309379701645f4****
	AIAgentId         *string `json:"AIAgentId,omitempty" xml:"AIAgentId,omitempty"`
	AgentConfigShrink *string `json:"AgentConfig,omitempty" xml:"AgentConfig,omitempty"`
	// 同步聊天记录配置。
	ChatSyncConfigShrink *string `json:"ChatSyncConfig,omitempty" xml:"ChatSyncConfig,omitempty"`
	// This parameter is required.
	RuntimeConfigShrink *string `json:"RuntimeConfig,omitempty" xml:"RuntimeConfig,omitempty"`
	// example:
	//
	// f213fbc005e4f309379701645f4****
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// Deprecated
	TemplateConfigShrink *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// example:
	//
	// {"Email":"johndoe@example.com","Preferences":{"Language":"en"}}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s StartAIAgentInstanceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s StartAIAgentInstanceShrinkRequest) GoString() string {
	return s.String()
}

func (s *StartAIAgentInstanceShrinkRequest) SetAIAgentId(v string) *StartAIAgentInstanceShrinkRequest {
	s.AIAgentId = &v
	return s
}

func (s *StartAIAgentInstanceShrinkRequest) SetAgentConfigShrink(v string) *StartAIAgentInstanceShrinkRequest {
	s.AgentConfigShrink = &v
	return s
}

func (s *StartAIAgentInstanceShrinkRequest) SetChatSyncConfigShrink(v string) *StartAIAgentInstanceShrinkRequest {
	s.ChatSyncConfigShrink = &v
	return s
}

func (s *StartAIAgentInstanceShrinkRequest) SetRuntimeConfigShrink(v string) *StartAIAgentInstanceShrinkRequest {
	s.RuntimeConfigShrink = &v
	return s
}

func (s *StartAIAgentInstanceShrinkRequest) SetSessionId(v string) *StartAIAgentInstanceShrinkRequest {
	s.SessionId = &v
	return s
}

func (s *StartAIAgentInstanceShrinkRequest) SetTemplateConfigShrink(v string) *StartAIAgentInstanceShrinkRequest {
	s.TemplateConfigShrink = &v
	return s
}

func (s *StartAIAgentInstanceShrinkRequest) SetUserData(v string) *StartAIAgentInstanceShrinkRequest {
	s.UserData = &v
	return s
}

type StartAIAgentInstanceResponseBody struct {
	// example:
	//
	// 39f8e0bc005e4f309379701645f4****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 7B117AF5-2A16-412C-B127-FA6175ED1AD0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartAIAgentInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartAIAgentInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *StartAIAgentInstanceResponseBody) SetInstanceId(v string) *StartAIAgentInstanceResponseBody {
	s.InstanceId = &v
	return s
}

func (s *StartAIAgentInstanceResponseBody) SetRequestId(v string) *StartAIAgentInstanceResponseBody {
	s.RequestId = &v
	return s
}

type StartAIAgentInstanceResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartAIAgentInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartAIAgentInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StartAIAgentInstanceResponse) GoString() string {
	return s.String()
}

func (s *StartAIAgentInstanceResponse) SetHeaders(v map[string]*string) *StartAIAgentInstanceResponse {
	s.Headers = v
	return s
}

func (s *StartAIAgentInstanceResponse) SetStatusCode(v int32) *StartAIAgentInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *StartAIAgentInstanceResponse) SetBody(v *StartAIAgentInstanceResponseBody) *StartAIAgentInstanceResponse {
	s.Body = v
	return s
}

type StartAIAgentOutboundCallRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ***********e4f309379701645f4****
	AIAgentId *string `json:"AIAgentId,omitempty" xml:"AIAgentId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 173*****533
	CalledNumber *string `json:"CalledNumber,omitempty" xml:"CalledNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 183*****333
	CallerNumber         *string                    `json:"CallerNumber,omitempty" xml:"CallerNumber,omitempty"`
	Config               *AIAgentOutboundCallConfig `json:"Config,omitempty" xml:"Config,omitempty"`
	ImsAIAgentFreeObCall *string                    `json:"ImsAIAgentFreeObCall,omitempty" xml:"ImsAIAgentFreeObCall,omitempty"`
	// example:
	//
	// f213fbc005e4f309379701645f4****
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	UserData  *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s StartAIAgentOutboundCallRequest) String() string {
	return tea.Prettify(s)
}

func (s StartAIAgentOutboundCallRequest) GoString() string {
	return s.String()
}

func (s *StartAIAgentOutboundCallRequest) SetAIAgentId(v string) *StartAIAgentOutboundCallRequest {
	s.AIAgentId = &v
	return s
}

func (s *StartAIAgentOutboundCallRequest) SetCalledNumber(v string) *StartAIAgentOutboundCallRequest {
	s.CalledNumber = &v
	return s
}

func (s *StartAIAgentOutboundCallRequest) SetCallerNumber(v string) *StartAIAgentOutboundCallRequest {
	s.CallerNumber = &v
	return s
}

func (s *StartAIAgentOutboundCallRequest) SetConfig(v *AIAgentOutboundCallConfig) *StartAIAgentOutboundCallRequest {
	s.Config = v
	return s
}

func (s *StartAIAgentOutboundCallRequest) SetImsAIAgentFreeObCall(v string) *StartAIAgentOutboundCallRequest {
	s.ImsAIAgentFreeObCall = &v
	return s
}

func (s *StartAIAgentOutboundCallRequest) SetSessionId(v string) *StartAIAgentOutboundCallRequest {
	s.SessionId = &v
	return s
}

func (s *StartAIAgentOutboundCallRequest) SetUserData(v string) *StartAIAgentOutboundCallRequest {
	s.UserData = &v
	return s
}

type StartAIAgentOutboundCallShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ***********e4f309379701645f4****
	AIAgentId *string `json:"AIAgentId,omitempty" xml:"AIAgentId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 173*****533
	CalledNumber *string `json:"CalledNumber,omitempty" xml:"CalledNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 183*****333
	CallerNumber         *string `json:"CallerNumber,omitempty" xml:"CallerNumber,omitempty"`
	ConfigShrink         *string `json:"Config,omitempty" xml:"Config,omitempty"`
	ImsAIAgentFreeObCall *string `json:"ImsAIAgentFreeObCall,omitempty" xml:"ImsAIAgentFreeObCall,omitempty"`
	// example:
	//
	// f213fbc005e4f309379701645f4****
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	UserData  *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s StartAIAgentOutboundCallShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s StartAIAgentOutboundCallShrinkRequest) GoString() string {
	return s.String()
}

func (s *StartAIAgentOutboundCallShrinkRequest) SetAIAgentId(v string) *StartAIAgentOutboundCallShrinkRequest {
	s.AIAgentId = &v
	return s
}

func (s *StartAIAgentOutboundCallShrinkRequest) SetCalledNumber(v string) *StartAIAgentOutboundCallShrinkRequest {
	s.CalledNumber = &v
	return s
}

func (s *StartAIAgentOutboundCallShrinkRequest) SetCallerNumber(v string) *StartAIAgentOutboundCallShrinkRequest {
	s.CallerNumber = &v
	return s
}

func (s *StartAIAgentOutboundCallShrinkRequest) SetConfigShrink(v string) *StartAIAgentOutboundCallShrinkRequest {
	s.ConfigShrink = &v
	return s
}

func (s *StartAIAgentOutboundCallShrinkRequest) SetImsAIAgentFreeObCall(v string) *StartAIAgentOutboundCallShrinkRequest {
	s.ImsAIAgentFreeObCall = &v
	return s
}

func (s *StartAIAgentOutboundCallShrinkRequest) SetSessionId(v string) *StartAIAgentOutboundCallShrinkRequest {
	s.SessionId = &v
	return s
}

func (s *StartAIAgentOutboundCallShrinkRequest) SetUserData(v string) *StartAIAgentOutboundCallShrinkRequest {
	s.UserData = &v
	return s
}

type StartAIAgentOutboundCallResponseBody struct {
	// example:
	//
	// *********296014bb58670940*********
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// ***********-4417-BDB2************
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartAIAgentOutboundCallResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartAIAgentOutboundCallResponseBody) GoString() string {
	return s.String()
}

func (s *StartAIAgentOutboundCallResponseBody) SetInstanceId(v string) *StartAIAgentOutboundCallResponseBody {
	s.InstanceId = &v
	return s
}

func (s *StartAIAgentOutboundCallResponseBody) SetRequestId(v string) *StartAIAgentOutboundCallResponseBody {
	s.RequestId = &v
	return s
}

type StartAIAgentOutboundCallResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartAIAgentOutboundCallResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartAIAgentOutboundCallResponse) String() string {
	return tea.Prettify(s)
}

func (s StartAIAgentOutboundCallResponse) GoString() string {
	return s.String()
}

func (s *StartAIAgentOutboundCallResponse) SetHeaders(v map[string]*string) *StartAIAgentOutboundCallResponse {
	s.Headers = v
	return s
}

func (s *StartAIAgentOutboundCallResponse) SetStatusCode(v int32) *StartAIAgentOutboundCallResponse {
	s.StatusCode = &v
	return s
}

func (s *StartAIAgentOutboundCallResponse) SetBody(v *StartAIAgentOutboundCallResponseBody) *StartAIAgentOutboundCallResponse {
	s.Body = v
	return s
}

type StartChannelRequest struct {
	// The name of the channel.
	//
	// This parameter is required.
	//
	// example:
	//
	// MyChannel
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
}

func (s StartChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s StartChannelRequest) GoString() string {
	return s.String()
}

func (s *StartChannelRequest) SetChannelName(v string) *StartChannelRequest {
	s.ChannelName = &v
	return s
}

type StartChannelResponseBody struct {
	// **Request ID**
	//
	// example:
	//
	// xxx-xxxx-xxxxx-xxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s StartChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartChannelResponseBody) GoString() string {
	return s.String()
}

func (s *StartChannelResponseBody) SetRequestId(v string) *StartChannelResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartChannelResponseBody) SetSuccess(v bool) *StartChannelResponseBody {
	s.Success = &v
	return s
}

type StartChannelResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartChannelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s StartChannelResponse) GoString() string {
	return s.String()
}

func (s *StartChannelResponse) SetHeaders(v map[string]*string) *StartChannelResponse {
	s.Headers = v
	return s
}

func (s *StartChannelResponse) SetStatusCode(v int32) *StartChannelResponse {
	s.StatusCode = &v
	return s
}

func (s *StartChannelResponse) SetBody(v *StartChannelResponseBody) *StartChannelResponse {
	s.Body = v
	return s
}

type StartMediaLiveChannelRequest struct {
	// The ID of the channel.
	//
	// This parameter is required.
	//
	// example:
	//
	// SEGK5KA6KYKAWQQH
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
}

func (s StartMediaLiveChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s StartMediaLiveChannelRequest) GoString() string {
	return s.String()
}

func (s *StartMediaLiveChannelRequest) SetChannelId(v string) *StartMediaLiveChannelRequest {
	s.ChannelId = &v
	return s
}

type StartMediaLiveChannelResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartMediaLiveChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartMediaLiveChannelResponseBody) GoString() string {
	return s.String()
}

func (s *StartMediaLiveChannelResponseBody) SetRequestId(v string) *StartMediaLiveChannelResponseBody {
	s.RequestId = &v
	return s
}

type StartMediaLiveChannelResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartMediaLiveChannelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartMediaLiveChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s StartMediaLiveChannelResponse) GoString() string {
	return s.String()
}

func (s *StartMediaLiveChannelResponse) SetHeaders(v map[string]*string) *StartMediaLiveChannelResponse {
	s.Headers = v
	return s
}

func (s *StartMediaLiveChannelResponse) SetStatusCode(v int32) *StartMediaLiveChannelResponse {
	s.StatusCode = &v
	return s
}

func (s *StartMediaLiveChannelResponse) SetBody(v *StartMediaLiveChannelResponseBody) *StartMediaLiveChannelResponse {
	s.Body = v
	return s
}

type StartRtcRobotInstanceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// **********
	AuthToken *string `json:"AuthToken,omitempty" xml:"AuthToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// testId
	ChannelId *string                             `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	Config    *StartRtcRobotInstanceRequestConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// ca28b08ad3464ebcb42e5c0f7c6d2e89
	RobotId *string `json:"RobotId,omitempty" xml:"RobotId,omitempty"`
	// example:
	//
	// {}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// my-robot
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s StartRtcRobotInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StartRtcRobotInstanceRequest) GoString() string {
	return s.String()
}

func (s *StartRtcRobotInstanceRequest) SetAuthToken(v string) *StartRtcRobotInstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *StartRtcRobotInstanceRequest) SetChannelId(v string) *StartRtcRobotInstanceRequest {
	s.ChannelId = &v
	return s
}

func (s *StartRtcRobotInstanceRequest) SetConfig(v *StartRtcRobotInstanceRequestConfig) *StartRtcRobotInstanceRequest {
	s.Config = v
	return s
}

func (s *StartRtcRobotInstanceRequest) SetRobotId(v string) *StartRtcRobotInstanceRequest {
	s.RobotId = &v
	return s
}

func (s *StartRtcRobotInstanceRequest) SetUserData(v string) *StartRtcRobotInstanceRequest {
	s.UserData = &v
	return s
}

func (s *StartRtcRobotInstanceRequest) SetUserId(v string) *StartRtcRobotInstanceRequest {
	s.UserId = &v
	return s
}

type StartRtcRobotInstanceRequestConfig struct {
	AsrMaxSilence *int32 `json:"AsrMaxSilence,omitempty" xml:"AsrMaxSilence,omitempty"`
	// example:
	//
	// true
	EnableVoiceInterrupt *bool   `json:"EnableVoiceInterrupt,omitempty" xml:"EnableVoiceInterrupt,omitempty"`
	Greeting             *string `json:"Greeting,omitempty" xml:"Greeting,omitempty"`
	UseVoiceprint        *bool   `json:"UseVoiceprint,omitempty" xml:"UseVoiceprint,omitempty"`
	UserOfflineTimeout   *int32  `json:"UserOfflineTimeout,omitempty" xml:"UserOfflineTimeout,omitempty"`
	UserOnlineTimeout    *int32  `json:"UserOnlineTimeout,omitempty" xml:"UserOnlineTimeout,omitempty"`
	// example:
	//
	// zhixiaoxia
	VoiceId      *string `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
	VoiceprintId *string `json:"VoiceprintId,omitempty" xml:"VoiceprintId,omitempty"`
	Volume       *int64  `json:"Volume,omitempty" xml:"Volume,omitempty"`
}

func (s StartRtcRobotInstanceRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s StartRtcRobotInstanceRequestConfig) GoString() string {
	return s.String()
}

func (s *StartRtcRobotInstanceRequestConfig) SetAsrMaxSilence(v int32) *StartRtcRobotInstanceRequestConfig {
	s.AsrMaxSilence = &v
	return s
}

func (s *StartRtcRobotInstanceRequestConfig) SetEnableVoiceInterrupt(v bool) *StartRtcRobotInstanceRequestConfig {
	s.EnableVoiceInterrupt = &v
	return s
}

func (s *StartRtcRobotInstanceRequestConfig) SetGreeting(v string) *StartRtcRobotInstanceRequestConfig {
	s.Greeting = &v
	return s
}

func (s *StartRtcRobotInstanceRequestConfig) SetUseVoiceprint(v bool) *StartRtcRobotInstanceRequestConfig {
	s.UseVoiceprint = &v
	return s
}

func (s *StartRtcRobotInstanceRequestConfig) SetUserOfflineTimeout(v int32) *StartRtcRobotInstanceRequestConfig {
	s.UserOfflineTimeout = &v
	return s
}

func (s *StartRtcRobotInstanceRequestConfig) SetUserOnlineTimeout(v int32) *StartRtcRobotInstanceRequestConfig {
	s.UserOnlineTimeout = &v
	return s
}

func (s *StartRtcRobotInstanceRequestConfig) SetVoiceId(v string) *StartRtcRobotInstanceRequestConfig {
	s.VoiceId = &v
	return s
}

func (s *StartRtcRobotInstanceRequestConfig) SetVoiceprintId(v string) *StartRtcRobotInstanceRequestConfig {
	s.VoiceprintId = &v
	return s
}

func (s *StartRtcRobotInstanceRequestConfig) SetVolume(v int64) *StartRtcRobotInstanceRequestConfig {
	s.Volume = &v
	return s
}

type StartRtcRobotInstanceShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// **********
	AuthToken *string `json:"AuthToken,omitempty" xml:"AuthToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// testId
	ChannelId    *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	ConfigShrink *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ca28b08ad3464ebcb42e5c0f7c6d2e89
	RobotId *string `json:"RobotId,omitempty" xml:"RobotId,omitempty"`
	// example:
	//
	// {}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// my-robot
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s StartRtcRobotInstanceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s StartRtcRobotInstanceShrinkRequest) GoString() string {
	return s.String()
}

func (s *StartRtcRobotInstanceShrinkRequest) SetAuthToken(v string) *StartRtcRobotInstanceShrinkRequest {
	s.AuthToken = &v
	return s
}

func (s *StartRtcRobotInstanceShrinkRequest) SetChannelId(v string) *StartRtcRobotInstanceShrinkRequest {
	s.ChannelId = &v
	return s
}

func (s *StartRtcRobotInstanceShrinkRequest) SetConfigShrink(v string) *StartRtcRobotInstanceShrinkRequest {
	s.ConfigShrink = &v
	return s
}

func (s *StartRtcRobotInstanceShrinkRequest) SetRobotId(v string) *StartRtcRobotInstanceShrinkRequest {
	s.RobotId = &v
	return s
}

func (s *StartRtcRobotInstanceShrinkRequest) SetUserData(v string) *StartRtcRobotInstanceShrinkRequest {
	s.UserData = &v
	return s
}

func (s *StartRtcRobotInstanceShrinkRequest) SetUserId(v string) *StartRtcRobotInstanceShrinkRequest {
	s.UserId = &v
	return s
}

type StartRtcRobotInstanceResponseBody struct {
	// example:
	//
	// 727dc0e296014bb58670940a3da95592
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 11DE0AB3-603B-5055-8A72-9C424854F983
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartRtcRobotInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartRtcRobotInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *StartRtcRobotInstanceResponseBody) SetInstanceId(v string) *StartRtcRobotInstanceResponseBody {
	s.InstanceId = &v
	return s
}

func (s *StartRtcRobotInstanceResponseBody) SetRequestId(v string) *StartRtcRobotInstanceResponseBody {
	s.RequestId = &v
	return s
}

type StartRtcRobotInstanceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartRtcRobotInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartRtcRobotInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StartRtcRobotInstanceResponse) GoString() string {
	return s.String()
}

func (s *StartRtcRobotInstanceResponse) SetHeaders(v map[string]*string) *StartRtcRobotInstanceResponse {
	s.Headers = v
	return s
}

func (s *StartRtcRobotInstanceResponse) SetStatusCode(v int32) *StartRtcRobotInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *StartRtcRobotInstanceResponse) SetBody(v *StartRtcRobotInstanceResponseBody) *StartRtcRobotInstanceResponse {
	s.Body = v
	return s
}

type StartWorkflowRequest struct {
	SkipInputVerification *bool `json:"SkipInputVerification,omitempty" xml:"SkipInputVerification,omitempty"`
	// The workflow input. Only media assets are supported.
	//
	// example:
	//
	// {
	//
	//       "Type": "Media",
	//
	//       "Media": "******30706071edbfe290b488******"
	//
	// }
	TaskInput *string `json:"TaskInput,omitempty" xml:"TaskInput,omitempty"`
	// The user-defined data in the JSON format, which cannot be up to 512 bytes in length. You can specify a custom callback URL. For more information, see [Configure a callback upon editing completion](https://help.aliyun.com/document_detail/451631.html).
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	// The ID of the workflow template. To view the template ID, log on to the [IMS console](https://ims.console.aliyun.com/settings/workflow/list) and choose Configurations > Workflow Template.
	//
	// example:
	//
	// ******f0e54971ecbffd472190******
	WorkflowId *string `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
}

func (s StartWorkflowRequest) String() string {
	return tea.Prettify(s)
}

func (s StartWorkflowRequest) GoString() string {
	return s.String()
}

func (s *StartWorkflowRequest) SetSkipInputVerification(v bool) *StartWorkflowRequest {
	s.SkipInputVerification = &v
	return s
}

func (s *StartWorkflowRequest) SetTaskInput(v string) *StartWorkflowRequest {
	s.TaskInput = &v
	return s
}

func (s *StartWorkflowRequest) SetUserData(v string) *StartWorkflowRequest {
	s.UserData = &v
	return s
}

func (s *StartWorkflowRequest) SetWorkflowId(v string) *StartWorkflowRequest {
	s.WorkflowId = &v
	return s
}

type StartWorkflowResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******42-E8E1-4FBB-8E52-F4225C******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the workflow task.
	//
	// example:
	//
	// ******22dad741d086a50325f9******
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s StartWorkflowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartWorkflowResponseBody) GoString() string {
	return s.String()
}

func (s *StartWorkflowResponseBody) SetRequestId(v string) *StartWorkflowResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartWorkflowResponseBody) SetTaskId(v string) *StartWorkflowResponseBody {
	s.TaskId = &v
	return s
}

type StartWorkflowResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartWorkflowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartWorkflowResponse) String() string {
	return tea.Prettify(s)
}

func (s StartWorkflowResponse) GoString() string {
	return s.String()
}

func (s *StartWorkflowResponse) SetHeaders(v map[string]*string) *StartWorkflowResponse {
	s.Headers = v
	return s
}

func (s *StartWorkflowResponse) SetStatusCode(v int32) *StartWorkflowResponse {
	s.StatusCode = &v
	return s
}

func (s *StartWorkflowResponse) SetBody(v *StartWorkflowResponseBody) *StartWorkflowResponse {
	s.Body = v
	return s
}

type StopAIAgentInstanceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 39f8e0bc005e4f309379701645f4****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s StopAIAgentInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StopAIAgentInstanceRequest) GoString() string {
	return s.String()
}

func (s *StopAIAgentInstanceRequest) SetInstanceId(v string) *StopAIAgentInstanceRequest {
	s.InstanceId = &v
	return s
}

type StopAIAgentInstanceResponseBody struct {
	// example:
	//
	// 7B117AF5-2A16-412C-B127-FA6175ED1AD0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopAIAgentInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopAIAgentInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *StopAIAgentInstanceResponseBody) SetRequestId(v string) *StopAIAgentInstanceResponseBody {
	s.RequestId = &v
	return s
}

type StopAIAgentInstanceResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopAIAgentInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopAIAgentInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StopAIAgentInstanceResponse) GoString() string {
	return s.String()
}

func (s *StopAIAgentInstanceResponse) SetHeaders(v map[string]*string) *StopAIAgentInstanceResponse {
	s.Headers = v
	return s
}

func (s *StopAIAgentInstanceResponse) SetStatusCode(v int32) *StopAIAgentInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *StopAIAgentInstanceResponse) SetBody(v *StopAIAgentInstanceResponseBody) *StopAIAgentInstanceResponse {
	s.Body = v
	return s
}

type StopChannelRequest struct {
	// The name of the channel.
	//
	// This parameter is required.
	//
	// example:
	//
	// MyChannel
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
}

func (s StopChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s StopChannelRequest) GoString() string {
	return s.String()
}

func (s *StopChannelRequest) SetChannelName(v string) *StopChannelRequest {
	s.ChannelName = &v
	return s
}

type StopChannelResponseBody struct {
	// **Request ID**
	//
	// example:
	//
	// xxx-xxxx-xxxxx-xxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s StopChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopChannelResponseBody) GoString() string {
	return s.String()
}

func (s *StopChannelResponseBody) SetRequestId(v string) *StopChannelResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopChannelResponseBody) SetSuccess(v bool) *StopChannelResponseBody {
	s.Success = &v
	return s
}

type StopChannelResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopChannelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s StopChannelResponse) GoString() string {
	return s.String()
}

func (s *StopChannelResponse) SetHeaders(v map[string]*string) *StopChannelResponse {
	s.Headers = v
	return s
}

func (s *StopChannelResponse) SetStatusCode(v int32) *StopChannelResponse {
	s.StatusCode = &v
	return s
}

func (s *StopChannelResponse) SetBody(v *StopChannelResponseBody) *StopChannelResponse {
	s.Body = v
	return s
}

type StopMediaLiveChannelRequest struct {
	// The ID of the channel.
	//
	// This parameter is required.
	//
	// example:
	//
	// SEGK5KA6KYKAWQQH
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
}

func (s StopMediaLiveChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s StopMediaLiveChannelRequest) GoString() string {
	return s.String()
}

func (s *StopMediaLiveChannelRequest) SetChannelId(v string) *StopMediaLiveChannelRequest {
	s.ChannelId = &v
	return s
}

type StopMediaLiveChannelResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopMediaLiveChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopMediaLiveChannelResponseBody) GoString() string {
	return s.String()
}

func (s *StopMediaLiveChannelResponseBody) SetRequestId(v string) *StopMediaLiveChannelResponseBody {
	s.RequestId = &v
	return s
}

type StopMediaLiveChannelResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopMediaLiveChannelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopMediaLiveChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s StopMediaLiveChannelResponse) GoString() string {
	return s.String()
}

func (s *StopMediaLiveChannelResponse) SetHeaders(v map[string]*string) *StopMediaLiveChannelResponse {
	s.Headers = v
	return s
}

func (s *StopMediaLiveChannelResponse) SetStatusCode(v int32) *StopMediaLiveChannelResponse {
	s.StatusCode = &v
	return s
}

func (s *StopMediaLiveChannelResponse) SetBody(v *StopMediaLiveChannelResponseBody) *StopMediaLiveChannelResponse {
	s.Body = v
	return s
}

type StopRtcRobotInstanceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 727dc0e296014bb58670940a3da95592
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s StopRtcRobotInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StopRtcRobotInstanceRequest) GoString() string {
	return s.String()
}

func (s *StopRtcRobotInstanceRequest) SetInstanceId(v string) *StopRtcRobotInstanceRequest {
	s.InstanceId = &v
	return s
}

type StopRtcRobotInstanceResponseBody struct {
	// Id of the request
	//
	// example:
	//
	// AC84E5DD-AB56-56C0-A992-07ECB82008CA
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopRtcRobotInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopRtcRobotInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *StopRtcRobotInstanceResponseBody) SetRequestId(v string) *StopRtcRobotInstanceResponseBody {
	s.RequestId = &v
	return s
}

type StopRtcRobotInstanceResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopRtcRobotInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopRtcRobotInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StopRtcRobotInstanceResponse) GoString() string {
	return s.String()
}

func (s *StopRtcRobotInstanceResponse) SetHeaders(v map[string]*string) *StopRtcRobotInstanceResponse {
	s.Headers = v
	return s
}

func (s *StopRtcRobotInstanceResponse) SetStatusCode(v int32) *StopRtcRobotInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *StopRtcRobotInstanceResponse) SetBody(v *StopRtcRobotInstanceResponseBody) *StopRtcRobotInstanceResponse {
	s.Body = v
	return s
}

type SubmitAIAgentVideoAuditTaskRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// *******3b3d94abda22******
	AIAgentId *string `json:"AIAgentId,omitempty" xml:"AIAgentId,omitempty"`
	// example:
	//
	// 3000
	AuditInterval *int32 `json:"AuditInterval,omitempty" xml:"AuditInterval,omitempty"`
	// example:
	//
	// {"Url":"https://yourcallback","Token":"yourtoken"}
	CallbackConfig *SubmitAIAgentVideoAuditTaskRequestCallbackConfig `json:"CallbackConfig,omitempty" xml:"CallbackConfig,omitempty" type:"Struct"`
	// This parameter is required.
	CapturePolicies []*SubmitAIAgentVideoAuditTaskRequestCapturePolicies `json:"CapturePolicies,omitempty" xml:"CapturePolicies,omitempty" type:"Repeated"`
	// This parameter is required.
	Input    *SubmitAIAgentVideoAuditTaskRequestInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	UserData *string                                  `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitAIAgentVideoAuditTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitAIAgentVideoAuditTaskRequest) GoString() string {
	return s.String()
}

func (s *SubmitAIAgentVideoAuditTaskRequest) SetAIAgentId(v string) *SubmitAIAgentVideoAuditTaskRequest {
	s.AIAgentId = &v
	return s
}

func (s *SubmitAIAgentVideoAuditTaskRequest) SetAuditInterval(v int32) *SubmitAIAgentVideoAuditTaskRequest {
	s.AuditInterval = &v
	return s
}

func (s *SubmitAIAgentVideoAuditTaskRequest) SetCallbackConfig(v *SubmitAIAgentVideoAuditTaskRequestCallbackConfig) *SubmitAIAgentVideoAuditTaskRequest {
	s.CallbackConfig = v
	return s
}

func (s *SubmitAIAgentVideoAuditTaskRequest) SetCapturePolicies(v []*SubmitAIAgentVideoAuditTaskRequestCapturePolicies) *SubmitAIAgentVideoAuditTaskRequest {
	s.CapturePolicies = v
	return s
}

func (s *SubmitAIAgentVideoAuditTaskRequest) SetInput(v *SubmitAIAgentVideoAuditTaskRequestInput) *SubmitAIAgentVideoAuditTaskRequest {
	s.Input = v
	return s
}

func (s *SubmitAIAgentVideoAuditTaskRequest) SetUserData(v string) *SubmitAIAgentVideoAuditTaskRequest {
	s.UserData = &v
	return s
}

type SubmitAIAgentVideoAuditTaskRequestCallbackConfig struct {
	// example:
	//
	// Bearer Token
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
	// example:
	//
	// https://yourcallback
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s SubmitAIAgentVideoAuditTaskRequestCallbackConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitAIAgentVideoAuditTaskRequestCallbackConfig) GoString() string {
	return s.String()
}

func (s *SubmitAIAgentVideoAuditTaskRequestCallbackConfig) SetToken(v string) *SubmitAIAgentVideoAuditTaskRequestCallbackConfig {
	s.Token = &v
	return s
}

func (s *SubmitAIAgentVideoAuditTaskRequestCallbackConfig) SetUrl(v string) *SubmitAIAgentVideoAuditTaskRequestCallbackConfig {
	s.Url = &v
	return s
}

type SubmitAIAgentVideoAuditTaskRequestCapturePolicies struct {
	// example:
	//
	// 10
	Duration *int32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 2
	FrameCount *int32  `json:"FrameCount,omitempty" xml:"FrameCount,omitempty"`
	Prompt     *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	// example:
	//
	// 0
	StartTime *int32 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s SubmitAIAgentVideoAuditTaskRequestCapturePolicies) String() string {
	return tea.Prettify(s)
}

func (s SubmitAIAgentVideoAuditTaskRequestCapturePolicies) GoString() string {
	return s.String()
}

func (s *SubmitAIAgentVideoAuditTaskRequestCapturePolicies) SetDuration(v int32) *SubmitAIAgentVideoAuditTaskRequestCapturePolicies {
	s.Duration = &v
	return s
}

func (s *SubmitAIAgentVideoAuditTaskRequestCapturePolicies) SetFrameCount(v int32) *SubmitAIAgentVideoAuditTaskRequestCapturePolicies {
	s.FrameCount = &v
	return s
}

func (s *SubmitAIAgentVideoAuditTaskRequestCapturePolicies) SetPrompt(v string) *SubmitAIAgentVideoAuditTaskRequestCapturePolicies {
	s.Prompt = &v
	return s
}

func (s *SubmitAIAgentVideoAuditTaskRequestCapturePolicies) SetStartTime(v int32) *SubmitAIAgentVideoAuditTaskRequestCapturePolicies {
	s.StartTime = &v
	return s
}

type SubmitAIAgentVideoAuditTaskRequestInput struct {
	// example:
	//
	// http://my-bucket.cn-shanghai.aliyuncs.com/object-id.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitAIAgentVideoAuditTaskRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitAIAgentVideoAuditTaskRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitAIAgentVideoAuditTaskRequestInput) SetMedia(v string) *SubmitAIAgentVideoAuditTaskRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitAIAgentVideoAuditTaskRequestInput) SetType(v string) *SubmitAIAgentVideoAuditTaskRequestInput {
	s.Type = &v
	return s
}

type SubmitAIAgentVideoAuditTaskShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// *******3b3d94abda22******
	AIAgentId *string `json:"AIAgentId,omitempty" xml:"AIAgentId,omitempty"`
	// example:
	//
	// 3000
	AuditInterval *int32 `json:"AuditInterval,omitempty" xml:"AuditInterval,omitempty"`
	// example:
	//
	// {"Url":"https://yourcallback","Token":"yourtoken"}
	CallbackConfigShrink *string `json:"CallbackConfig,omitempty" xml:"CallbackConfig,omitempty"`
	// This parameter is required.
	CapturePoliciesShrink *string `json:"CapturePolicies,omitempty" xml:"CapturePolicies,omitempty"`
	// This parameter is required.
	InputShrink *string `json:"Input,omitempty" xml:"Input,omitempty"`
	UserData    *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitAIAgentVideoAuditTaskShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitAIAgentVideoAuditTaskShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitAIAgentVideoAuditTaskShrinkRequest) SetAIAgentId(v string) *SubmitAIAgentVideoAuditTaskShrinkRequest {
	s.AIAgentId = &v
	return s
}

func (s *SubmitAIAgentVideoAuditTaskShrinkRequest) SetAuditInterval(v int32) *SubmitAIAgentVideoAuditTaskShrinkRequest {
	s.AuditInterval = &v
	return s
}

func (s *SubmitAIAgentVideoAuditTaskShrinkRequest) SetCallbackConfigShrink(v string) *SubmitAIAgentVideoAuditTaskShrinkRequest {
	s.CallbackConfigShrink = &v
	return s
}

func (s *SubmitAIAgentVideoAuditTaskShrinkRequest) SetCapturePoliciesShrink(v string) *SubmitAIAgentVideoAuditTaskShrinkRequest {
	s.CapturePoliciesShrink = &v
	return s
}

func (s *SubmitAIAgentVideoAuditTaskShrinkRequest) SetInputShrink(v string) *SubmitAIAgentVideoAuditTaskShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitAIAgentVideoAuditTaskShrinkRequest) SetUserData(v string) *SubmitAIAgentVideoAuditTaskShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitAIAgentVideoAuditTaskResponseBody struct {
	// example:
	//
	// **********fb04483915d4f2**********
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// **********-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitAIAgentVideoAuditTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitAIAgentVideoAuditTaskResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitAIAgentVideoAuditTaskResponseBody) SetJobId(v string) *SubmitAIAgentVideoAuditTaskResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitAIAgentVideoAuditTaskResponseBody) SetRequestId(v string) *SubmitAIAgentVideoAuditTaskResponseBody {
	s.RequestId = &v
	return s
}

type SubmitAIAgentVideoAuditTaskResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitAIAgentVideoAuditTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitAIAgentVideoAuditTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitAIAgentVideoAuditTaskResponse) GoString() string {
	return s.String()
}

func (s *SubmitAIAgentVideoAuditTaskResponse) SetHeaders(v map[string]*string) *SubmitAIAgentVideoAuditTaskResponse {
	s.Headers = v
	return s
}

func (s *SubmitAIAgentVideoAuditTaskResponse) SetStatusCode(v int32) *SubmitAIAgentVideoAuditTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitAIAgentVideoAuditTaskResponse) SetBody(v *SubmitAIAgentVideoAuditTaskResponseBody) *SubmitAIAgentVideoAuditTaskResponse {
	s.Body = v
	return s
}

type SubmitASRJobRequest struct {
	// The job description, which can up to 128 bytes in length.
	//
	// example:
	//
	// 测试描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The speech duration.
	//
	// example:
	//
	// 00:00:10
	Duration      *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	EditingConfig *string `json:"EditingConfig,omitempty" xml:"EditingConfig,omitempty"`
	// The input file. You can specify an Object Storage Service (OSS) URL or the ID of a media asset in the media asset library.
	//
	// example:
	//
	// oss://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4 或 ****20b48fb04483915d4f2cd8ac****
	InputFile *string `json:"InputFile,omitempty" xml:"InputFile,omitempty"`
	// The start time of the speech to recognize.
	//
	// example:
	//
	// 00:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The job title, which can be up to 128 bytes in length.
	//
	// example:
	//
	// 测试标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// The user-defined data in the JSON format. You can specify your business information, such as the business environment and job information.
	//
	// example:
	//
	// {
	//
	//       "user": "data",
	//
	//       "env": "prod"
	//
	// }
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitASRJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitASRJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitASRJobRequest) SetDescription(v string) *SubmitASRJobRequest {
	s.Description = &v
	return s
}

func (s *SubmitASRJobRequest) SetDuration(v string) *SubmitASRJobRequest {
	s.Duration = &v
	return s
}

func (s *SubmitASRJobRequest) SetEditingConfig(v string) *SubmitASRJobRequest {
	s.EditingConfig = &v
	return s
}

func (s *SubmitASRJobRequest) SetInputFile(v string) *SubmitASRJobRequest {
	s.InputFile = &v
	return s
}

func (s *SubmitASRJobRequest) SetStartTime(v string) *SubmitASRJobRequest {
	s.StartTime = &v
	return s
}

func (s *SubmitASRJobRequest) SetTitle(v string) *SubmitASRJobRequest {
	s.Title = &v
	return s
}

func (s *SubmitASRJobRequest) SetUserData(v string) *SubmitASRJobRequest {
	s.UserData = &v
	return s
}

type SubmitASRJobResponseBody struct {
	// The job ID.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The job state. Valid values:
	//
	// 	- Created
	//
	// 	- Executing
	//
	// 	- Finished
	//
	// 	- Failed
	//
	// example:
	//
	// Finished
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s SubmitASRJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitASRJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitASRJobResponseBody) SetJobId(v string) *SubmitASRJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitASRJobResponseBody) SetRequestId(v string) *SubmitASRJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitASRJobResponseBody) SetState(v string) *SubmitASRJobResponseBody {
	s.State = &v
	return s
}

type SubmitASRJobResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitASRJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitASRJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitASRJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitASRJobResponse) SetHeaders(v map[string]*string) *SubmitASRJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitASRJobResponse) SetStatusCode(v int32) *SubmitASRJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitASRJobResponse) SetBody(v *SubmitASRJobResponseBody) *SubmitASRJobResponse {
	s.Body = v
	return s
}

type SubmitAudioProduceJobRequest struct {
	// The job description.
	//
	// 	- The job description can be up to 1,024 bytes in length.
	//
	// 	- The value must be encoded in UTF-8.
	//
	// example:
	//
	// 任务描述  长度不超过1024字节  UTF8编码
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The audio editing configurations.
	//
	// 	- voice: the [voice type](https://help.aliyun.com/document_detail/449563.html).
	//
	// 	- customizedVoice: the ID of the personalized human voice.
	//
	// 	- format: the format of the output file. Valid values: PCM, WAV, and MP3.
	//
	// 	- volume: the volume. Default value: 50. Valid values: 0 to 100.
	//
	// 	- speech_rate: the speech tempo. Default value: 0. Value range: -500 to 500.
	//
	// 	- pitch_rate: the intonation. Default value: 0. Value range: -500 to 500.
	//
	// >  If you specify both voice and customizedVoice, customizedVoice takes precedence over voice.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"voice":"Siqi","format":"MP3","volume":50}
	EditingConfig *string `json:"EditingConfig,omitempty" xml:"EditingConfig,omitempty"`
	// The text content. A maximum of 2,000 characters are supported. The [Speech Synthesis Markup Language (SSML)](https://help.aliyun.com/document_detail/2672807.html) is supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// 测试文本
	InputConfig *string `json:"InputConfig,omitempty" xml:"InputConfig,omitempty"`
	// The output audio configurations.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"bucket":"bucket","object":"objeck"}
	OutputConfig *string `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	// Specifies whether to overwrite the existing Object Storage Service (OSS) object.
	//
	// example:
	//
	// true
	Overwrite *bool `json:"Overwrite,omitempty" xml:"Overwrite,omitempty"`
	// The job title. If you do not specify this parameter, the system generates a title based on the current date.
	//
	// 	- The job title can be up to 128 bytes in length.
	//
	// 	- The value must be encoded in UTF-8.
	//
	// example:
	//
	// 任务标题。若不提供，根据日期自动生成默认title  长度不超过128字节  UTF8编码
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// The user-defined data in the JSON format, which can be up to 512 bytes in length. You can specify a custom callback URL. For more information, see [Configure a callback upon editing completion](https://help.aliyun.com/document_detail/451631.html).
	//
	// example:
	//
	// {"user":"data"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitAudioProduceJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitAudioProduceJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitAudioProduceJobRequest) SetDescription(v string) *SubmitAudioProduceJobRequest {
	s.Description = &v
	return s
}

func (s *SubmitAudioProduceJobRequest) SetEditingConfig(v string) *SubmitAudioProduceJobRequest {
	s.EditingConfig = &v
	return s
}

func (s *SubmitAudioProduceJobRequest) SetInputConfig(v string) *SubmitAudioProduceJobRequest {
	s.InputConfig = &v
	return s
}

func (s *SubmitAudioProduceJobRequest) SetOutputConfig(v string) *SubmitAudioProduceJobRequest {
	s.OutputConfig = &v
	return s
}

func (s *SubmitAudioProduceJobRequest) SetOverwrite(v bool) *SubmitAudioProduceJobRequest {
	s.Overwrite = &v
	return s
}

func (s *SubmitAudioProduceJobRequest) SetTitle(v string) *SubmitAudioProduceJobRequest {
	s.Title = &v
	return s
}

func (s *SubmitAudioProduceJobRequest) SetUserData(v string) *SubmitAudioProduceJobRequest {
	s.UserData = &v
	return s
}

type SubmitAudioProduceJobResponseBody struct {
	// The job ID.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// ****2bcbfcfa30fccb36f72dca22****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The job state. Valid values:
	//
	// 	- Created
	//
	// 	- Executing
	//
	// 	- Finished
	//
	// 	- Failed
	//
	// example:
	//
	// Created
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s SubmitAudioProduceJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitAudioProduceJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitAudioProduceJobResponseBody) SetJobId(v string) *SubmitAudioProduceJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitAudioProduceJobResponseBody) SetMediaId(v string) *SubmitAudioProduceJobResponseBody {
	s.MediaId = &v
	return s
}

func (s *SubmitAudioProduceJobResponseBody) SetRequestId(v string) *SubmitAudioProduceJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitAudioProduceJobResponseBody) SetState(v string) *SubmitAudioProduceJobResponseBody {
	s.State = &v
	return s
}

type SubmitAudioProduceJobResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitAudioProduceJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitAudioProduceJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitAudioProduceJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitAudioProduceJobResponse) SetHeaders(v map[string]*string) *SubmitAudioProduceJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitAudioProduceJobResponse) SetStatusCode(v int32) *SubmitAudioProduceJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitAudioProduceJobResponse) SetBody(v *SubmitAudioProduceJobResponseBody) *SubmitAudioProduceJobResponse {
	s.Body = v
	return s
}

type SubmitAvatarTrainingJobRequest struct {
	// The ID of the digital human training job.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitAvatarTrainingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitAvatarTrainingJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitAvatarTrainingJobRequest) SetJobId(v string) *SubmitAvatarTrainingJobRequest {
	s.JobId = &v
	return s
}

type SubmitAvatarTrainingJobResponseBody struct {
	// The data returned.
	Data *SubmitAvatarTrainingJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// *****ACB-44F2-5F2D-88D7-1283E70*****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SubmitAvatarTrainingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitAvatarTrainingJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitAvatarTrainingJobResponseBody) SetData(v *SubmitAvatarTrainingJobResponseBodyData) *SubmitAvatarTrainingJobResponseBody {
	s.Data = v
	return s
}

func (s *SubmitAvatarTrainingJobResponseBody) SetRequestId(v string) *SubmitAvatarTrainingJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitAvatarTrainingJobResponseBody) SetSuccess(v bool) *SubmitAvatarTrainingJobResponseBody {
	s.Success = &v
	return s
}

type SubmitAvatarTrainingJobResponseBodyData struct {
	// The ID of the digital human training job.
	//
	// example:
	//
	// ****29faef8144638ba42eb8e037****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitAvatarTrainingJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SubmitAvatarTrainingJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *SubmitAvatarTrainingJobResponseBodyData) SetJobId(v string) *SubmitAvatarTrainingJobResponseBodyData {
	s.JobId = &v
	return s
}

type SubmitAvatarTrainingJobResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitAvatarTrainingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitAvatarTrainingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitAvatarTrainingJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitAvatarTrainingJobResponse) SetHeaders(v map[string]*string) *SubmitAvatarTrainingJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitAvatarTrainingJobResponse) SetStatusCode(v int32) *SubmitAvatarTrainingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitAvatarTrainingJobResponse) SetBody(v *SubmitAvatarTrainingJobResponseBody) *SubmitAvatarTrainingJobResponse {
	s.Body = v
	return s
}

type SubmitAvatarVideoJobRequest struct {
	// example:
	//
	// 测试描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// {"AvatarId":"yunqiao"}
	EditingConfig *string `json:"EditingConfig,omitempty" xml:"EditingConfig,omitempty"`
	// The input configurations of the video rendering job for an avatar. You can specify text, the Object Storage Service (OSS) URL of an audio file, or the ID of a media asset. The audio file must be in the MP3 or WAV format.
	//
	// >  The text must be at least five words in length.
	InputConfig *string `json:"InputConfig,omitempty" xml:"InputConfig,omitempty"`
	// example:
	//
	// {"MediaURL":"https://your-bucket.oss-cn-shanghai.aliyuncs.com/xxx.mp4","Width":1920,"Height":1080}
	OutputConfig *string `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	// example:
	//
	// 测试标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// {"user":"data","env":"prod"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitAvatarVideoJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitAvatarVideoJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitAvatarVideoJobRequest) SetDescription(v string) *SubmitAvatarVideoJobRequest {
	s.Description = &v
	return s
}

func (s *SubmitAvatarVideoJobRequest) SetEditingConfig(v string) *SubmitAvatarVideoJobRequest {
	s.EditingConfig = &v
	return s
}

func (s *SubmitAvatarVideoJobRequest) SetInputConfig(v string) *SubmitAvatarVideoJobRequest {
	s.InputConfig = &v
	return s
}

func (s *SubmitAvatarVideoJobRequest) SetOutputConfig(v string) *SubmitAvatarVideoJobRequest {
	s.OutputConfig = &v
	return s
}

func (s *SubmitAvatarVideoJobRequest) SetTitle(v string) *SubmitAvatarVideoJobRequest {
	s.Title = &v
	return s
}

func (s *SubmitAvatarVideoJobRequest) SetUserData(v string) *SubmitAvatarVideoJobRequest {
	s.UserData = &v
	return s
}

type SubmitAvatarVideoJobResponseBody struct {
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// ******70dcc471edaf00e6f6f4******
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitAvatarVideoJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitAvatarVideoJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitAvatarVideoJobResponseBody) SetJobId(v string) *SubmitAvatarVideoJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitAvatarVideoJobResponseBody) SetMediaId(v string) *SubmitAvatarVideoJobResponseBody {
	s.MediaId = &v
	return s
}

func (s *SubmitAvatarVideoJobResponseBody) SetRequestId(v string) *SubmitAvatarVideoJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitAvatarVideoJobResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitAvatarVideoJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitAvatarVideoJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitAvatarVideoJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitAvatarVideoJobResponse) SetHeaders(v map[string]*string) *SubmitAvatarVideoJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitAvatarVideoJobResponse) SetStatusCode(v int32) *SubmitAvatarVideoJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitAvatarVideoJobResponse) SetBody(v *SubmitAvatarVideoJobResponseBody) *SubmitAvatarVideoJobResponse {
	s.Body = v
	return s
}

type SubmitBatchMediaProducingJobRequest struct {
	// The client token that is used to ensure the idempotence of the request.
	//
	// example:
	//
	// ****12e8864746a0a398****
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The editing configurations. For more information, see [EditingConfig](~~2692547#1be9bba03b7qu~~).
	//
	// example:
	//
	// {
	//
	//   "MediaConfig": {
	//
	//       "Volume": 0
	//
	//   },
	//
	//   "SpeechConfig": {
	//
	//       "Volume": 1
	//
	//   },
	//
	//  "BackgroundMusicConfig": {
	//
	//       "Volume": 0.3
	//
	//   }
	//
	// }
	EditingConfig *string `json:"EditingConfig,omitempty" xml:"EditingConfig,omitempty"`
	// The input configurations. For more information, see [InputConfig](~~2692547#2faed1559549n~~).
	InputConfig *string `json:"InputConfig,omitempty" xml:"InputConfig,omitempty"`
	// The output configurations. For more information, see [OutputConfig](~~2692547#447b928fcbuoa~~).
	//
	// example:
	//
	// {
	//
	//   "MediaURL": "http://xxx.oss-cn-shanghai.aliyuncs.com/xxx_{index}.mp4",
	//
	//   "Count": 20,
	//
	//   "MaxDuration": 15,
	//
	//   "Width": 1080,
	//
	//   "Height": 1920,
	//
	//   "Video": {"Crf": 27}
	//
	// }
	OutputConfig   *string `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// The user-defined data, including the business and callback configurations. For more information, see [UserData](https://help.aliyun.com/document_detail/357745.html).
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitBatchMediaProducingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitBatchMediaProducingJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitBatchMediaProducingJobRequest) SetClientToken(v string) *SubmitBatchMediaProducingJobRequest {
	s.ClientToken = &v
	return s
}

func (s *SubmitBatchMediaProducingJobRequest) SetEditingConfig(v string) *SubmitBatchMediaProducingJobRequest {
	s.EditingConfig = &v
	return s
}

func (s *SubmitBatchMediaProducingJobRequest) SetInputConfig(v string) *SubmitBatchMediaProducingJobRequest {
	s.InputConfig = &v
	return s
}

func (s *SubmitBatchMediaProducingJobRequest) SetOutputConfig(v string) *SubmitBatchMediaProducingJobRequest {
	s.OutputConfig = &v
	return s
}

func (s *SubmitBatchMediaProducingJobRequest) SetTemplateConfig(v string) *SubmitBatchMediaProducingJobRequest {
	s.TemplateConfig = &v
	return s
}

func (s *SubmitBatchMediaProducingJobRequest) SetUserData(v string) *SubmitBatchMediaProducingJobRequest {
	s.UserData = &v
	return s
}

type SubmitBatchMediaProducingJobResponseBody struct {
	// The ID of the quick video production job.
	//
	// example:
	//
	// ****d80e4e4044975745c14b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ****36-3C1E-4417-BDB2-1E034F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitBatchMediaProducingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitBatchMediaProducingJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitBatchMediaProducingJobResponseBody) SetJobId(v string) *SubmitBatchMediaProducingJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitBatchMediaProducingJobResponseBody) SetRequestId(v string) *SubmitBatchMediaProducingJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitBatchMediaProducingJobResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitBatchMediaProducingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitBatchMediaProducingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitBatchMediaProducingJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitBatchMediaProducingJobResponse) SetHeaders(v map[string]*string) *SubmitBatchMediaProducingJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitBatchMediaProducingJobResponse) SetStatusCode(v int32) *SubmitBatchMediaProducingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitBatchMediaProducingJobResponse) SetBody(v *SubmitBatchMediaProducingJobResponseBody) *SubmitBatchMediaProducingJobResponse {
	s.Body = v
	return s
}

type SubmitCopyrightExtractJobRequest struct {
	// This parameter is required.
	Input *SubmitCopyrightExtractJobRequestInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// example:
	//
	// {"algoType":"v2"}
	Params *string `json:"Params,omitempty" xml:"Params,omitempty"`
	// example:
	//
	// 123
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitCopyrightExtractJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitCopyrightExtractJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitCopyrightExtractJobRequest) SetInput(v *SubmitCopyrightExtractJobRequestInput) *SubmitCopyrightExtractJobRequest {
	s.Input = v
	return s
}

func (s *SubmitCopyrightExtractJobRequest) SetParams(v string) *SubmitCopyrightExtractJobRequest {
	s.Params = &v
	return s
}

func (s *SubmitCopyrightExtractJobRequest) SetUserData(v string) *SubmitCopyrightExtractJobRequest {
	s.UserData = &v
	return s
}

type SubmitCopyrightExtractJobRequestInput struct {
	// This parameter is required.
	//
	// example:
	//
	// oss://bucket/object
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitCopyrightExtractJobRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitCopyrightExtractJobRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitCopyrightExtractJobRequestInput) SetMedia(v string) *SubmitCopyrightExtractJobRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitCopyrightExtractJobRequestInput) SetType(v string) *SubmitCopyrightExtractJobRequestInput {
	s.Type = &v
	return s
}

type SubmitCopyrightExtractJobShrinkRequest struct {
	// This parameter is required.
	InputShrink *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// example:
	//
	// {"algoType":"v2"}
	Params *string `json:"Params,omitempty" xml:"Params,omitempty"`
	// example:
	//
	// 123
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitCopyrightExtractJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitCopyrightExtractJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitCopyrightExtractJobShrinkRequest) SetInputShrink(v string) *SubmitCopyrightExtractJobShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitCopyrightExtractJobShrinkRequest) SetParams(v string) *SubmitCopyrightExtractJobShrinkRequest {
	s.Params = &v
	return s
}

func (s *SubmitCopyrightExtractJobShrinkRequest) SetUserData(v string) *SubmitCopyrightExtractJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitCopyrightExtractJobResponseBody struct {
	Data *SubmitCopyrightExtractJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// ok
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ****2876-6263-4B75-8F2C-CD0F7FCF****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 200
	StatusCode *int64 `json:"StatusCode,omitempty" xml:"StatusCode,omitempty"`
}

func (s SubmitCopyrightExtractJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitCopyrightExtractJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitCopyrightExtractJobResponseBody) SetData(v *SubmitCopyrightExtractJobResponseBodyData) *SubmitCopyrightExtractJobResponseBody {
	s.Data = v
	return s
}

func (s *SubmitCopyrightExtractJobResponseBody) SetMessage(v string) *SubmitCopyrightExtractJobResponseBody {
	s.Message = &v
	return s
}

func (s *SubmitCopyrightExtractJobResponseBody) SetRequestId(v string) *SubmitCopyrightExtractJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitCopyrightExtractJobResponseBody) SetStatusCode(v int64) *SubmitCopyrightExtractJobResponseBody {
	s.StatusCode = &v
	return s
}

type SubmitCopyrightExtractJobResponseBodyData struct {
	// example:
	//
	// bfb786c63****4d80648792021eff90
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitCopyrightExtractJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SubmitCopyrightExtractJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *SubmitCopyrightExtractJobResponseBodyData) SetJobId(v string) *SubmitCopyrightExtractJobResponseBodyData {
	s.JobId = &v
	return s
}

type SubmitCopyrightExtractJobResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitCopyrightExtractJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitCopyrightExtractJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitCopyrightExtractJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitCopyrightExtractJobResponse) SetHeaders(v map[string]*string) *SubmitCopyrightExtractJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitCopyrightExtractJobResponse) SetStatusCode(v int32) *SubmitCopyrightExtractJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitCopyrightExtractJobResponse) SetBody(v *SubmitCopyrightExtractJobResponseBody) *SubmitCopyrightExtractJobResponse {
	s.Body = v
	return s
}

type SubmitCopyrightJobRequest struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {"Bucket":"example-bucket","Location":"oss-cn-shanghai","Object":"example.mp4"}
	Input *SubmitCopyrightJobRequestInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// example:
	//
	// 0
	Level *int64 `json:"Level,omitempty" xml:"Level,omitempty"`
	// This parameter is required.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {"Bucket":"example-bucket","Location":"oss-cn-shanghai","Object":"example_result.mp4"}
	Output *SubmitCopyrightJobRequestOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// example:
	//
	// {"algoType":"v2"}
	Params *string `json:"Params,omitempty" xml:"Params,omitempty"`
	// example:
	//
	// 0
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 10
	TotalTime *int64 `json:"TotalTime,omitempty" xml:"TotalTime,omitempty"`
	// example:
	//
	// 123
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitCopyrightJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitCopyrightJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitCopyrightJobRequest) SetDescription(v string) *SubmitCopyrightJobRequest {
	s.Description = &v
	return s
}

func (s *SubmitCopyrightJobRequest) SetInput(v *SubmitCopyrightJobRequestInput) *SubmitCopyrightJobRequest {
	s.Input = v
	return s
}

func (s *SubmitCopyrightJobRequest) SetLevel(v int64) *SubmitCopyrightJobRequest {
	s.Level = &v
	return s
}

func (s *SubmitCopyrightJobRequest) SetMessage(v string) *SubmitCopyrightJobRequest {
	s.Message = &v
	return s
}

func (s *SubmitCopyrightJobRequest) SetOutput(v *SubmitCopyrightJobRequestOutput) *SubmitCopyrightJobRequest {
	s.Output = v
	return s
}

func (s *SubmitCopyrightJobRequest) SetParams(v string) *SubmitCopyrightJobRequest {
	s.Params = &v
	return s
}

func (s *SubmitCopyrightJobRequest) SetStartTime(v int64) *SubmitCopyrightJobRequest {
	s.StartTime = &v
	return s
}

func (s *SubmitCopyrightJobRequest) SetTotalTime(v int64) *SubmitCopyrightJobRequest {
	s.TotalTime = &v
	return s
}

func (s *SubmitCopyrightJobRequest) SetUserData(v string) *SubmitCopyrightJobRequest {
	s.UserData = &v
	return s
}

type SubmitCopyrightJobRequestInput struct {
	// This parameter is required.
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// This parameter is required.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitCopyrightJobRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitCopyrightJobRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitCopyrightJobRequestInput) SetMedia(v string) *SubmitCopyrightJobRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitCopyrightJobRequestInput) SetType(v string) *SubmitCopyrightJobRequestInput {
	s.Type = &v
	return s
}

type SubmitCopyrightJobRequestOutput struct {
	// This parameter is required.
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// This parameter is required.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitCopyrightJobRequestOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitCopyrightJobRequestOutput) GoString() string {
	return s.String()
}

func (s *SubmitCopyrightJobRequestOutput) SetMedia(v string) *SubmitCopyrightJobRequestOutput {
	s.Media = &v
	return s
}

func (s *SubmitCopyrightJobRequestOutput) SetType(v string) *SubmitCopyrightJobRequestOutput {
	s.Type = &v
	return s
}

type SubmitCopyrightJobShrinkRequest struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {"Bucket":"example-bucket","Location":"oss-cn-shanghai","Object":"example.mp4"}
	InputShrink *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// example:
	//
	// 0
	Level *int64 `json:"Level,omitempty" xml:"Level,omitempty"`
	// This parameter is required.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {"Bucket":"example-bucket","Location":"oss-cn-shanghai","Object":"example_result.mp4"}
	OutputShrink *string `json:"Output,omitempty" xml:"Output,omitempty"`
	// example:
	//
	// {"algoType":"v2"}
	Params *string `json:"Params,omitempty" xml:"Params,omitempty"`
	// example:
	//
	// 0
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 10
	TotalTime *int64 `json:"TotalTime,omitempty" xml:"TotalTime,omitempty"`
	// example:
	//
	// 123
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitCopyrightJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitCopyrightJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitCopyrightJobShrinkRequest) SetDescription(v string) *SubmitCopyrightJobShrinkRequest {
	s.Description = &v
	return s
}

func (s *SubmitCopyrightJobShrinkRequest) SetInputShrink(v string) *SubmitCopyrightJobShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitCopyrightJobShrinkRequest) SetLevel(v int64) *SubmitCopyrightJobShrinkRequest {
	s.Level = &v
	return s
}

func (s *SubmitCopyrightJobShrinkRequest) SetMessage(v string) *SubmitCopyrightJobShrinkRequest {
	s.Message = &v
	return s
}

func (s *SubmitCopyrightJobShrinkRequest) SetOutputShrink(v string) *SubmitCopyrightJobShrinkRequest {
	s.OutputShrink = &v
	return s
}

func (s *SubmitCopyrightJobShrinkRequest) SetParams(v string) *SubmitCopyrightJobShrinkRequest {
	s.Params = &v
	return s
}

func (s *SubmitCopyrightJobShrinkRequest) SetStartTime(v int64) *SubmitCopyrightJobShrinkRequest {
	s.StartTime = &v
	return s
}

func (s *SubmitCopyrightJobShrinkRequest) SetTotalTime(v int64) *SubmitCopyrightJobShrinkRequest {
	s.TotalTime = &v
	return s
}

func (s *SubmitCopyrightJobShrinkRequest) SetUserData(v string) *SubmitCopyrightJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitCopyrightJobResponseBody struct {
	Data *SubmitCopyrightJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// ok
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// FA258E67-09B8-4EAA-8F33-BA567834A2C3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 200
	StatusCode *int64 `json:"StatusCode,omitempty" xml:"StatusCode,omitempty"`
}

func (s SubmitCopyrightJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitCopyrightJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitCopyrightJobResponseBody) SetData(v *SubmitCopyrightJobResponseBodyData) *SubmitCopyrightJobResponseBody {
	s.Data = v
	return s
}

func (s *SubmitCopyrightJobResponseBody) SetMessage(v string) *SubmitCopyrightJobResponseBody {
	s.Message = &v
	return s
}

func (s *SubmitCopyrightJobResponseBody) SetRequestId(v string) *SubmitCopyrightJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitCopyrightJobResponseBody) SetStatusCode(v int64) *SubmitCopyrightJobResponseBody {
	s.StatusCode = &v
	return s
}

type SubmitCopyrightJobResponseBodyData struct {
	// example:
	//
	// bfb786c63****f4d80648792021eff90
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitCopyrightJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SubmitCopyrightJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *SubmitCopyrightJobResponseBodyData) SetJobId(v string) *SubmitCopyrightJobResponseBodyData {
	s.JobId = &v
	return s
}

type SubmitCopyrightJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitCopyrightJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitCopyrightJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitCopyrightJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitCopyrightJobResponse) SetHeaders(v map[string]*string) *SubmitCopyrightJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitCopyrightJobResponse) SetStatusCode(v int32) *SubmitCopyrightJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitCopyrightJobResponse) SetBody(v *SubmitCopyrightJobResponseBody) *SubmitCopyrightJobResponse {
	s.Body = v
	return s
}

type SubmitCustomizedVoiceJobRequest struct {
	// The URL of the sample audio file.
	//
	// 	- If this parameter is specified, a sample audio file is generated at the specified Object Storage Service (OSS) URL after the training is complete.
	//
	// 	- If this parameter is not specified, no sample audio file is generated.
	//
	//     **
	//
	//     **Note**: The URL must be a valid public OSS URL within your Alibaba Cloud account.
	//
	// example:
	//
	// https://your-bucket.oss-cn-shanghai.aliyuncs.com/demo.MP3
	DemoAudioMediaURL *string `json:"DemoAudioMediaURL,omitempty" xml:"DemoAudioMediaURL,omitempty"`
	// The voice ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// xiaozhuan
	VoiceId *string `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
}

func (s SubmitCustomizedVoiceJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitCustomizedVoiceJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitCustomizedVoiceJobRequest) SetDemoAudioMediaURL(v string) *SubmitCustomizedVoiceJobRequest {
	s.DemoAudioMediaURL = &v
	return s
}

func (s *SubmitCustomizedVoiceJobRequest) SetVoiceId(v string) *SubmitCustomizedVoiceJobRequest {
	s.VoiceId = &v
	return s
}

type SubmitCustomizedVoiceJobResponseBody struct {
	// The data returned.
	Data *SubmitCustomizedVoiceJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SubmitCustomizedVoiceJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitCustomizedVoiceJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitCustomizedVoiceJobResponseBody) SetData(v *SubmitCustomizedVoiceJobResponseBodyData) *SubmitCustomizedVoiceJobResponseBody {
	s.Data = v
	return s
}

func (s *SubmitCustomizedVoiceJobResponseBody) SetRequestId(v string) *SubmitCustomizedVoiceJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitCustomizedVoiceJobResponseBody) SetSuccess(v bool) *SubmitCustomizedVoiceJobResponseBody {
	s.Success = &v
	return s
}

type SubmitCustomizedVoiceJobResponseBodyData struct {
	// The ID of the human voice cloning job.
	//
	// example:
	//
	// ****d718e2ff4f018ccf419a7b71****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The voice ID.
	//
	// example:
	//
	// xiaozhuan
	VoiceId *string `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
}

func (s SubmitCustomizedVoiceJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SubmitCustomizedVoiceJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *SubmitCustomizedVoiceJobResponseBodyData) SetJobId(v string) *SubmitCustomizedVoiceJobResponseBodyData {
	s.JobId = &v
	return s
}

func (s *SubmitCustomizedVoiceJobResponseBodyData) SetVoiceId(v string) *SubmitCustomizedVoiceJobResponseBodyData {
	s.VoiceId = &v
	return s
}

type SubmitCustomizedVoiceJobResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitCustomizedVoiceJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitCustomizedVoiceJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitCustomizedVoiceJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitCustomizedVoiceJobResponse) SetHeaders(v map[string]*string) *SubmitCustomizedVoiceJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitCustomizedVoiceJobResponse) SetStatusCode(v int32) *SubmitCustomizedVoiceJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitCustomizedVoiceJobResponse) SetBody(v *SubmitCustomizedVoiceJobResponseBody) *SubmitCustomizedVoiceJobResponse {
	s.Body = v
	return s
}

type SubmitDNAJobRequest struct {
	// The configurations of the media fingerprint analysis job. The value is a JSON object. If you specify this parameter, the template parameters are overwritten.
	//
	// example:
	//
	// {"SaveType": "save","MediaType"":"video"}
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// The ID of the media fingerprint library. If you do not specify this parameter, the default media fingerprint library is used. For more information about how to create a media fingerprint library, see [CreateDNADB](https://help.aliyun.com/document_detail/479275.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// 2288c6ca184c0e47098a5b665e2a12****
	DBId *string `json:"DBId,omitempty" xml:"DBId,omitempty"`
	// The input file for media fingerprint analysis.
	//
	// This parameter is required.
	Input        *SubmitDNAJobRequestInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	OwnerAccount *string                   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId      *int64                    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the ApsaraVideo Media Processing (MPS) queue to which the media fingerprint analysis job is submitted.
	//
	// example:
	//
	// 5246b8d12a62433ab77845074039****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The primary key of the video. You must make sure that each primary key is unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3ca84a39a9024f19853b21be9cf9****
	PrimaryKey           *string `json:"PrimaryKey,omitempty" xml:"PrimaryKey,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The template ID.
	//
	// example:
	//
	// S00000101-100060
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The user-defined data. The data can be up to 128 bytes in length.
	//
	// example:
	//
	// userData
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitDNAJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitDNAJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitDNAJobRequest) SetConfig(v string) *SubmitDNAJobRequest {
	s.Config = &v
	return s
}

func (s *SubmitDNAJobRequest) SetDBId(v string) *SubmitDNAJobRequest {
	s.DBId = &v
	return s
}

func (s *SubmitDNAJobRequest) SetInput(v *SubmitDNAJobRequestInput) *SubmitDNAJobRequest {
	s.Input = v
	return s
}

func (s *SubmitDNAJobRequest) SetOwnerAccount(v string) *SubmitDNAJobRequest {
	s.OwnerAccount = &v
	return s
}

func (s *SubmitDNAJobRequest) SetOwnerId(v int64) *SubmitDNAJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitDNAJobRequest) SetPipelineId(v string) *SubmitDNAJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitDNAJobRequest) SetPrimaryKey(v string) *SubmitDNAJobRequest {
	s.PrimaryKey = &v
	return s
}

func (s *SubmitDNAJobRequest) SetResourceOwnerAccount(v string) *SubmitDNAJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitDNAJobRequest) SetResourceOwnerId(v int64) *SubmitDNAJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitDNAJobRequest) SetTemplateId(v string) *SubmitDNAJobRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitDNAJobRequest) SetUserData(v string) *SubmitDNAJobRequest {
	s.UserData = &v
	return s
}

type SubmitDNAJobRequestInput struct {
	// The input file. The file can be an OSS object or a media asset. You can specify the path of an OSS object in one of the following formats:
	//
	// 1\\. oss://bucket/object
	//
	// 2\\. http(s)://bucket.oss-[regionId].aliyuncs.com/object
	//
	// In the preceding paths, bucket indicates an OSS bucket that resides in the same region as the current project, and object indicates the path of the object in the bucket.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1b1b9cd148034739af413150fded****
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the input file. Valid values:
	//
	// 1.  OSS: Object Storage Service (OSS) object.
	//
	// 2.  Media: media asset.
	//
	// This parameter is required.
	//
	// example:
	//
	// Media
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitDNAJobRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitDNAJobRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitDNAJobRequestInput) SetMedia(v string) *SubmitDNAJobRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitDNAJobRequestInput) SetType(v string) *SubmitDNAJobRequestInput {
	s.Type = &v
	return s
}

type SubmitDNAJobShrinkRequest struct {
	// The configurations of the media fingerprint analysis job. The value is a JSON object. If you specify this parameter, the template parameters are overwritten.
	//
	// example:
	//
	// {"SaveType": "save","MediaType"":"video"}
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// The ID of the media fingerprint library. If you do not specify this parameter, the default media fingerprint library is used. For more information about how to create a media fingerprint library, see [CreateDNADB](https://help.aliyun.com/document_detail/479275.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// 2288c6ca184c0e47098a5b665e2a12****
	DBId *string `json:"DBId,omitempty" xml:"DBId,omitempty"`
	// The input file for media fingerprint analysis.
	//
	// This parameter is required.
	InputShrink  *string `json:"Input,omitempty" xml:"Input,omitempty"`
	OwnerAccount *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the ApsaraVideo Media Processing (MPS) queue to which the media fingerprint analysis job is submitted.
	//
	// example:
	//
	// 5246b8d12a62433ab77845074039****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The primary key of the video. You must make sure that each primary key is unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3ca84a39a9024f19853b21be9cf9****
	PrimaryKey           *string `json:"PrimaryKey,omitempty" xml:"PrimaryKey,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The template ID.
	//
	// example:
	//
	// S00000101-100060
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The user-defined data. The data can be up to 128 bytes in length.
	//
	// example:
	//
	// userData
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitDNAJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitDNAJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitDNAJobShrinkRequest) SetConfig(v string) *SubmitDNAJobShrinkRequest {
	s.Config = &v
	return s
}

func (s *SubmitDNAJobShrinkRequest) SetDBId(v string) *SubmitDNAJobShrinkRequest {
	s.DBId = &v
	return s
}

func (s *SubmitDNAJobShrinkRequest) SetInputShrink(v string) *SubmitDNAJobShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitDNAJobShrinkRequest) SetOwnerAccount(v string) *SubmitDNAJobShrinkRequest {
	s.OwnerAccount = &v
	return s
}

func (s *SubmitDNAJobShrinkRequest) SetOwnerId(v int64) *SubmitDNAJobShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitDNAJobShrinkRequest) SetPipelineId(v string) *SubmitDNAJobShrinkRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitDNAJobShrinkRequest) SetPrimaryKey(v string) *SubmitDNAJobShrinkRequest {
	s.PrimaryKey = &v
	return s
}

func (s *SubmitDNAJobShrinkRequest) SetResourceOwnerAccount(v string) *SubmitDNAJobShrinkRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitDNAJobShrinkRequest) SetResourceOwnerId(v int64) *SubmitDNAJobShrinkRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitDNAJobShrinkRequest) SetTemplateId(v string) *SubmitDNAJobShrinkRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitDNAJobShrinkRequest) SetUserData(v string) *SubmitDNAJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitDNAJobResponseBody struct {
	// The ID of the media fingerprint analysis job. We recommend that you save this ID for subsequent calls of other operations.
	//
	// example:
	//
	// 88c6ca184c0e47098a5b665e2****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 25818875-5F78-4A13-BEF6-D7393642CA58
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitDNAJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitDNAJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitDNAJobResponseBody) SetJobId(v string) *SubmitDNAJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitDNAJobResponseBody) SetRequestId(v string) *SubmitDNAJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitDNAJobResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitDNAJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitDNAJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitDNAJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitDNAJobResponse) SetHeaders(v map[string]*string) *SubmitDNAJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitDNAJobResponse) SetStatusCode(v int32) *SubmitDNAJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitDNAJobResponse) SetBody(v *SubmitDNAJobResponseBody) *SubmitDNAJobResponse {
	s.Body = v
	return s
}

type SubmitDynamicChartJobRequest struct {
	// The axis configurations. If XAxisFontInterval is set to 0 or left empty, the system automatically determines an optimal interval.
	//
	// example:
	//
	// {"FontFile":"Microsoft YaHei","XAxisFontSize":"30","YAxisFontSize":"30","XAxisFontInterval":"30","AxisColor":"30"}
	AxisParams *string `json:"AxisParams,omitempty" xml:"AxisParams,omitempty"`
	// The chart background.
	//
	// example:
	//
	// {"Color":"#000000","ImageUrl":"http://your-bucket.oss-cn-shanghai.aliyuncs.com/obj.jpg"}
	Background *string `json:"Background,omitempty" xml:"Background,omitempty"`
	// The chart configurations.
	//
	// example:
	//
	// {"Style":"Normal","TitleStartTime":"3000","ChartStartTime":"3000","VideoDuration":"15000"}
	ChartConfig *string `json:"ChartConfig,omitempty" xml:"ChartConfig,omitempty"`
	// The chart title.
	ChartTitle *string `json:"ChartTitle,omitempty" xml:"ChartTitle,omitempty"`
	// The chart type.
	//
	// Valid values:
	//
	// 	- Line: line chart
	//
	// 	- Histogram: bar chart
	//
	// 	- Pie: pie chart
	//
	// This parameter is required.
	//
	// example:
	//
	// Line
	ChartType *string `json:"ChartType,omitempty" xml:"ChartType,omitempty"`
	// The data source.
	DataSource *string `json:"DataSource,omitempty" xml:"DataSource,omitempty"`
	// The job description.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The input data for the chart.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"XlsFile":"https://your-bucket.oss-cn-shanghai.aliyuncs.com/obj.xls"}
	Input *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// The output configurations.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"MediaURL":"https://your-bucket.oss-cn-shanghai.aliyuncs.com/obj.mp4","Bitrate":2000,"Width":800,"Height":680}
	OutputConfig *string `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	// The subtitle.
	Subtitle *string `json:"Subtitle,omitempty" xml:"Subtitle,omitempty"`
	// The job title.
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// Unit
	Unit *string `json:"Unit,omitempty" xml:"Unit,omitempty"`
	// The custom data in JSON format.
	//
	// example:
	//
	// {"user":"data"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitDynamicChartJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicChartJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitDynamicChartJobRequest) SetAxisParams(v string) *SubmitDynamicChartJobRequest {
	s.AxisParams = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetBackground(v string) *SubmitDynamicChartJobRequest {
	s.Background = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetChartConfig(v string) *SubmitDynamicChartJobRequest {
	s.ChartConfig = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetChartTitle(v string) *SubmitDynamicChartJobRequest {
	s.ChartTitle = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetChartType(v string) *SubmitDynamicChartJobRequest {
	s.ChartType = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetDataSource(v string) *SubmitDynamicChartJobRequest {
	s.DataSource = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetDescription(v string) *SubmitDynamicChartJobRequest {
	s.Description = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetInput(v string) *SubmitDynamicChartJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetOutputConfig(v string) *SubmitDynamicChartJobRequest {
	s.OutputConfig = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetSubtitle(v string) *SubmitDynamicChartJobRequest {
	s.Subtitle = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetTitle(v string) *SubmitDynamicChartJobRequest {
	s.Title = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetUnit(v string) *SubmitDynamicChartJobRequest {
	s.Unit = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetUserData(v string) *SubmitDynamicChartJobRequest {
	s.UserData = &v
	return s
}

type SubmitDynamicChartJobResponseBody struct {
	// The job ID.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitDynamicChartJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicChartJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitDynamicChartJobResponseBody) SetJobId(v string) *SubmitDynamicChartJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitDynamicChartJobResponseBody) SetRequestId(v string) *SubmitDynamicChartJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitDynamicChartJobResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitDynamicChartJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitDynamicChartJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicChartJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitDynamicChartJobResponse) SetHeaders(v map[string]*string) *SubmitDynamicChartJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitDynamicChartJobResponse) SetStatusCode(v int32) *SubmitDynamicChartJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitDynamicChartJobResponse) SetBody(v *SubmitDynamicChartJobResponseBody) *SubmitDynamicChartJobResponse {
	s.Body = v
	return s
}

type SubmitDynamicImageJobRequest struct {
	// The input of the job.
	//
	// This parameter is required.
	Input *SubmitDynamicImageJobRequestInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// The name of the job.
	//
	// example:
	//
	// SampleJob
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output of the job.
	//
	// This parameter is required.
	Output *SubmitDynamicImageJobRequestOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// The scheduling settings.
	ScheduleConfig *SubmitDynamicImageJobRequestScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// The snapshot template configuration.
	//
	// This parameter is required.
	TemplateConfig *SubmitDynamicImageJobRequestTemplateConfig `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty" type:"Struct"`
	// The user-defined data.
	//
	// example:
	//
	// {"SampleKey": "SampleValue"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitDynamicImageJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobRequest) SetInput(v *SubmitDynamicImageJobRequestInput) *SubmitDynamicImageJobRequest {
	s.Input = v
	return s
}

func (s *SubmitDynamicImageJobRequest) SetName(v string) *SubmitDynamicImageJobRequest {
	s.Name = &v
	return s
}

func (s *SubmitDynamicImageJobRequest) SetOutput(v *SubmitDynamicImageJobRequestOutput) *SubmitDynamicImageJobRequest {
	s.Output = v
	return s
}

func (s *SubmitDynamicImageJobRequest) SetScheduleConfig(v *SubmitDynamicImageJobRequestScheduleConfig) *SubmitDynamicImageJobRequest {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitDynamicImageJobRequest) SetTemplateConfig(v *SubmitDynamicImageJobRequestTemplateConfig) *SubmitDynamicImageJobRequest {
	s.TemplateConfig = v
	return s
}

func (s *SubmitDynamicImageJobRequest) SetUserData(v string) *SubmitDynamicImageJobRequest {
	s.UserData = &v
	return s
}

type SubmitDynamicImageJobRequestInput struct {
	// The input file. If Type is set to OSS, set this parameter to the URL of an OSS object. If Type is set to Media, set this parameter to the ID of a media asset. The URL of an OSS object can be in one of the following formats:
	//
	// 1.  oss://bucket/object
	//
	// 2.  http(s)://bucket.oss-[RegionId].aliyuncs.com/object
	//
	// In the URL, bucket specifies an OSS bucket that resides in the same region as the job, and object specifies the object URL in OSS.
	//
	// >  Before you use the OSS bucket in the URL, you must add the bucket on the [Storage Management](https://help.aliyun.com/document_detail/609918.html) page of the Intelligent Media Services (IMS) console.
	//
	// This parameter is required.
	//
	// example:
	//
	// oss://bucket/object.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the input file. Valid values:
	//
	// 1.  OSS: an Object Storage Service (OSS) object.
	//
	// 2.  Media: a media asset.
	//
	// This parameter is required.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitDynamicImageJobRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobRequestInput) SetMedia(v string) *SubmitDynamicImageJobRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitDynamicImageJobRequestInput) SetType(v string) *SubmitDynamicImageJobRequestInput {
	s.Type = &v
	return s
}

type SubmitDynamicImageJobRequestOutput struct {
	// The output file. The file can be an OSS object or a media asset. The URL of an OSS object can be in one of the following formats:
	//
	// 	- oss://bucket/object
	//
	// 	- http(s)://bucket.oss-[regionId].aliyuncs.com/object
	//
	// In the URL, bucket specifies an OSS bucket that resides in the same region as the job, and object specifies the object URL in OSS.
	//
	// >  Before you use the OSS bucket in the URL, you must add the bucket on the [Storage Management](https://help.aliyun.com/document_detail/609918.html) page of the IMS console.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the output file. Valid values:
	//
	// 1.  OSS: an OSS object.
	//
	// 2.  Media: a media asset.
	//
	// This parameter is required.
	//
	// example:
	//
	// Media
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitDynamicImageJobRequestOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobRequestOutput) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobRequestOutput) SetMedia(v string) *SubmitDynamicImageJobRequestOutput {
	s.Media = &v
	return s
}

func (s *SubmitDynamicImageJobRequestOutput) SetType(v string) *SubmitDynamicImageJobRequestOutput {
	s.Type = &v
	return s
}

type SubmitDynamicImageJobRequestScheduleConfig struct {
	// The ID of the MPS queue to which the job was submitted.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The priority. Valid values: 1 to 10. Default value: 6. A greater value specifies a higher priority.
	//
	// example:
	//
	// 6
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitDynamicImageJobRequestScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobRequestScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobRequestScheduleConfig) SetPipelineId(v string) *SubmitDynamicImageJobRequestScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitDynamicImageJobRequestScheduleConfig) SetPriority(v int32) *SubmitDynamicImageJobRequestScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitDynamicImageJobRequestTemplateConfig struct {
	// The parameters that are used to overwrite the corresponding parameters.
	OverwriteParams *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// The template ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitDynamicImageJobRequestTemplateConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobRequestTemplateConfig) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobRequestTemplateConfig) SetOverwriteParams(v *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) *SubmitDynamicImageJobRequestTemplateConfig {
	s.OverwriteParams = v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfig) SetTemplateId(v string) *SubmitDynamicImageJobRequestTemplateConfig {
	s.TemplateId = &v
	return s
}

type SubmitDynamicImageJobRequestTemplateConfigOverwriteParams struct {
	// The format of the animated image. Valid values:
	//
	// 	- **gif**
	//
	// 	- **webp**
	//
	// example:
	//
	// gif
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
	// The frame rate. Valid values: [1,60].
	//
	// example:
	//
	// 15
	Fps *int32 `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// The height of the animated image. Valid values: [128,4096].
	//
	// example:
	//
	// 720
	Height *int32 `json:"Height,omitempty" xml:"Height,omitempty"`
	// Specifies whether to enable the auto-rotate screen feature. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// Default value: **true**.
	//
	// >  If this feature is enabled, the width of the output video corresponds to the long side of the input video, which is the height of the input video in portrait mode. The height of the output video corresponds to the short side of the input video, which is the width of the input video in portrait mode.
	//
	// example:
	//
	// false
	LongShortMode *bool `json:"LongShortMode,omitempty" xml:"LongShortMode,omitempty"`
	// The scan mode. Valid values:
	//
	// 	- **interlaced**
	//
	// 	- **progressive*	- This is the default value.
	//
	// example:
	//
	// progressive
	ScanMode *string `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	// The timeline parameters.
	TimeSpan *SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan `json:"TimeSpan,omitempty" xml:"TimeSpan,omitempty" type:"Struct"`
	// The width of the animated image. Valid values: [128,4096].
	//
	// example:
	//
	// 1024
	Width *int32 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) SetFormat(v string) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams {
	s.Format = &v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) SetFps(v int32) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams {
	s.Fps = &v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) SetHeight(v int32) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams {
	s.Height = &v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) SetLongShortMode(v bool) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams {
	s.LongShortMode = &v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) SetScanMode(v string) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams {
	s.ScanMode = &v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) SetTimeSpan(v *SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams {
	s.TimeSpan = v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) SetWidth(v int32) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams {
	s.Width = &v
	return s
}

type SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan struct {
	// The length of the clip.
	//
	// 	- Format: `hh:mm:ss[.SSS]` or `sssss[.SSS]`.
	//
	// 	- Valid values: `[00:00:00.000,23:59:59.999]` or `[0.000,86399.999]`.
	//
	// example:
	//
	// 01:59:59.999 or 32000.23
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The length of the ending part of the original clip to be cropped out. If you specify this parameter, the Duration parameter becomes invalid.
	//
	// 	- Format: `hh:mm:ss[.SSS]` or `sssss[.SSS]`.
	//
	// 	- Valid values: `[00:00:00.000,23:59:59.999]` or `[0.000,86399.999]`.
	//
	// example:
	//
	// 01:59:59.999 or 32000.23
	End *string `json:"End,omitempty" xml:"End,omitempty"`
	// The start point of the clip.
	//
	// 	- Format: `hh:mm:ss[.SSS]` or `sssss[.SSS]`.
	//
	// 	- Valid values: `[00:00:00.000,23:59:59.999]` or `[0.000,86399.999]`.
	//
	// example:
	//
	// 01:59:59.999 or 32000.23
	Seek *string `json:"Seek,omitempty" xml:"Seek,omitempty"`
}

func (s SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan) SetDuration(v string) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan {
	s.Duration = &v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan) SetEnd(v string) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan {
	s.End = &v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan) SetSeek(v string) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan {
	s.Seek = &v
	return s
}

type SubmitDynamicImageJobShrinkRequest struct {
	// The input of the job.
	//
	// This parameter is required.
	InputShrink *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// The name of the job.
	//
	// example:
	//
	// SampleJob
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output of the job.
	//
	// This parameter is required.
	OutputShrink *string `json:"Output,omitempty" xml:"Output,omitempty"`
	// The scheduling settings.
	ScheduleConfigShrink *string `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty"`
	// The snapshot template configuration.
	//
	// This parameter is required.
	TemplateConfigShrink *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// The user-defined data.
	//
	// example:
	//
	// {"SampleKey": "SampleValue"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitDynamicImageJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobShrinkRequest) SetInputShrink(v string) *SubmitDynamicImageJobShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitDynamicImageJobShrinkRequest) SetName(v string) *SubmitDynamicImageJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *SubmitDynamicImageJobShrinkRequest) SetOutputShrink(v string) *SubmitDynamicImageJobShrinkRequest {
	s.OutputShrink = &v
	return s
}

func (s *SubmitDynamicImageJobShrinkRequest) SetScheduleConfigShrink(v string) *SubmitDynamicImageJobShrinkRequest {
	s.ScheduleConfigShrink = &v
	return s
}

func (s *SubmitDynamicImageJobShrinkRequest) SetTemplateConfigShrink(v string) *SubmitDynamicImageJobShrinkRequest {
	s.TemplateConfigShrink = &v
	return s
}

func (s *SubmitDynamicImageJobShrinkRequest) SetUserData(v string) *SubmitDynamicImageJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitDynamicImageJobResponseBody struct {
	// The job ID.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitDynamicImageJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobResponseBody) SetJobId(v string) *SubmitDynamicImageJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitDynamicImageJobResponseBody) SetRequestId(v string) *SubmitDynamicImageJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitDynamicImageJobResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitDynamicImageJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitDynamicImageJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobResponse) SetHeaders(v map[string]*string) *SubmitDynamicImageJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitDynamicImageJobResponse) SetStatusCode(v int32) *SubmitDynamicImageJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitDynamicImageJobResponse) SetBody(v *SubmitDynamicImageJobResponseBody) *SubmitDynamicImageJobResponse {
	s.Body = v
	return s
}

type SubmitHighlightExtractionJobRequest struct {
	// The client token used to ensure the idempotency of the request.
	//
	// example:
	//
	// ****12e8864746a0a398****
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The input configuration.
	//
	// example:
	//
	// {
	//
	// 	"MediaArray": [{
	//
	// 		"MediaId": "ceb72f00e****1ef8216e7e6c64a6302"
	//
	// 	}, {
	//
	// 		"MediaId": "ce450c40e****1ef8216e7e6c64a6302"
	//
	// 	}, {
	//
	// 		"MediaId": "ce49a020e****1ef81c1e6f6d5686302"
	//
	// 	}, {
	//
	// 		"MediaId": "d047e120e****1ef81c1e6f6d5686302"
	//
	// 	}, {
	//
	// 		"MediaId": "cfe2ddc0e****1ef81c1e6f6d5686302"
	//
	// 	}],
	//
	// 	"Strategy": {
	//
	// 		"Count": 5,
	//
	// 		"ClipDuration": 15
	//
	// 	}
	//
	// }
	InputConfig *string `json:"InputConfig,omitempty" xml:"InputConfig,omitempty"`
	// The output configuration.
	//
	// example:
	//
	// {
	//
	// 	"NeedExport": true,
	//
	// 	"OutputMediaTarget": "oss-object",
	//
	// 	"Bucket": "test-bucket",
	//
	// 	"ObjectKey": "path/to/test_{index}.mp4",
	//
	// 	"Width": 1920,
	//
	// 	"Height": 1080,
	//
	// 	"ExportAsNewMedia": false
	//
	// }
	OutputConfig *string `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	// The user-defined data, including the business and callback configurations. For more information, see [UserData](~~357745#section-urj-v3f-0s1~~).
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitHighlightExtractionJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitHighlightExtractionJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitHighlightExtractionJobRequest) SetClientToken(v string) *SubmitHighlightExtractionJobRequest {
	s.ClientToken = &v
	return s
}

func (s *SubmitHighlightExtractionJobRequest) SetInputConfig(v string) *SubmitHighlightExtractionJobRequest {
	s.InputConfig = &v
	return s
}

func (s *SubmitHighlightExtractionJobRequest) SetOutputConfig(v string) *SubmitHighlightExtractionJobRequest {
	s.OutputConfig = &v
	return s
}

func (s *SubmitHighlightExtractionJobRequest) SetUserData(v string) *SubmitHighlightExtractionJobRequest {
	s.UserData = &v
	return s
}

type SubmitHighlightExtractionJobResponseBody struct {
	// The ID of the highlight extraction task.
	//
	// example:
	//
	// ****cdb3e74639973036bc84****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitHighlightExtractionJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitHighlightExtractionJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitHighlightExtractionJobResponseBody) SetJobId(v string) *SubmitHighlightExtractionJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitHighlightExtractionJobResponseBody) SetRequestId(v string) *SubmitHighlightExtractionJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitHighlightExtractionJobResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitHighlightExtractionJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitHighlightExtractionJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitHighlightExtractionJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitHighlightExtractionJobResponse) SetHeaders(v map[string]*string) *SubmitHighlightExtractionJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitHighlightExtractionJobResponse) SetStatusCode(v int32) *SubmitHighlightExtractionJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitHighlightExtractionJobResponse) SetBody(v *SubmitHighlightExtractionJobResponseBody) *SubmitHighlightExtractionJobResponse {
	s.Body = v
	return s
}

type SubmitIProductionJobRequest struct {
	// The name of the algorithm that you want to use for the job. Valid values:
	//
	// 	- **Cover**: This algorithm intelligently generates a thumbnail image for a video.
	//
	// 	- **VideoClip**: This algorithm intelligently generates a summary for a video.
	//
	// 	- **VideoDelogo**: This algorithm removes logos from a video.
	//
	// 	- **VideoDetext**: This algorithm removes captions from a video.
	//
	// 	- **CaptionExtraction**: This algorithm extracts captions from a video and generates the caption file.
	//
	// 	- **VideoGreenScreenMatting**: This algorithm performs green-screen image matting on a video and generates a new video.
	//
	// 	- **FaceBeauty**: This algorithm performs video retouching.
	//
	// 	- **VideoH2V**: This algorithm transforms a video from the landscape mode to the portrait mode.
	//
	// 	- **MusicSegmentDetect**: This algorithm detects the chorus of a song.
	//
	// 	- **AudioBeatDetection**: This algorithm detects rhythms.
	//
	// 	- **AudioQualityAssessment**: This algorithm assesses the audio quality.
	//
	// 	- **SpeechDenoise**: This algorithm performs noise reduction.
	//
	// 	- **AudioMixing**: This algorithm mixes audio streams.
	//
	// This parameter is required.
	//
	// example:
	//
	// Cover
	FunctionName *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	// The input file. The file can be an Object Storage Service (OSS) object or a media asset.
	//
	// This parameter is required.
	Input *SubmitIProductionJobRequestInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// The algorithm-specific parameters. The parameters are specified as JSON objects and vary based on the algorithm. For more information, see the "Parameters of JobParams" section of this topic.
	//
	// example:
	//
	// {"Model":"gif"}
	JobParams *string `json:"JobParams,omitempty" xml:"JobParams,omitempty"`
	ModelId   *string `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	// The name of the intelligent production job. The name can be up to 100 characters in length.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output file. The file can be an OSS object or a media asset.
	//
	// This parameter is required.
	Output *SubmitIProductionJobRequestOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// The scheduling configuration.
	ScheduleConfig *SubmitIProductionJobRequestScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// The template ID.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The user-defined data that is returned in the response. The value can be up to 1,024 bytes in length.
	//
	// example:
	//
	// {"test":1}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitIProductionJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitIProductionJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitIProductionJobRequest) SetFunctionName(v string) *SubmitIProductionJobRequest {
	s.FunctionName = &v
	return s
}

func (s *SubmitIProductionJobRequest) SetInput(v *SubmitIProductionJobRequestInput) *SubmitIProductionJobRequest {
	s.Input = v
	return s
}

func (s *SubmitIProductionJobRequest) SetJobParams(v string) *SubmitIProductionJobRequest {
	s.JobParams = &v
	return s
}

func (s *SubmitIProductionJobRequest) SetModelId(v string) *SubmitIProductionJobRequest {
	s.ModelId = &v
	return s
}

func (s *SubmitIProductionJobRequest) SetName(v string) *SubmitIProductionJobRequest {
	s.Name = &v
	return s
}

func (s *SubmitIProductionJobRequest) SetOutput(v *SubmitIProductionJobRequestOutput) *SubmitIProductionJobRequest {
	s.Output = v
	return s
}

func (s *SubmitIProductionJobRequest) SetScheduleConfig(v *SubmitIProductionJobRequestScheduleConfig) *SubmitIProductionJobRequest {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitIProductionJobRequest) SetTemplateId(v string) *SubmitIProductionJobRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitIProductionJobRequest) SetUserData(v string) *SubmitIProductionJobRequest {
	s.UserData = &v
	return s
}

type SubmitIProductionJobRequestInput struct {
	// The input file. The file can be an OSS object or a media asset. You can specify the path of an OSS object in one of the following formats:
	//
	// 1.  oss://bucket/object
	//
	// 2.  http(s)://bucket.oss-[regionId].aliyuncs.com/object bucket in the path specifies an OSS bucket that resides in the same region as the intelligent production job. object in the path specifies the object path in OSS.
	//
	// This parameter is required.
	//
	// example:
	//
	// oss://bucket/object
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The media type. Valid values:
	//
	// 	- OSS: OSS object
	//
	// 	- Media: media asset
	//
	// This parameter is required.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitIProductionJobRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitIProductionJobRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitIProductionJobRequestInput) SetMedia(v string) *SubmitIProductionJobRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitIProductionJobRequestInput) SetType(v string) *SubmitIProductionJobRequestInput {
	s.Type = &v
	return s
}

type SubmitIProductionJobRequestOutput struct {
	Biz *string `json:"Biz,omitempty" xml:"Biz,omitempty"`
	// The output file. If Type is set to OSS, set this parameter to the path of an OSS object. If Type is set to Media, set this parameter to the ID of a media asset. You can specify the path of an OSS object in one of the following formats:
	//
	// 1.  oss://bucket/object
	//
	// 2.  http(s)://bucket.oss-[RegionId].aliyuncs.com/object bucket in the path specifies an OSS bucket that resides in the same region as the intelligent production job. object in the path specifies the object path in OSS.
	//
	// This parameter is required.
	//
	// example:
	//
	// oss://bucket/object
	Media     *string `json:"Media,omitempty" xml:"Media,omitempty"`
	OutputUrl *string `json:"OutputUrl,omitempty" xml:"OutputUrl,omitempty"`
	// The media type. Valid values:
	//
	// 	- OSS: OSS object
	//
	// 	- Media: media asset
	//
	// This parameter is required.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitIProductionJobRequestOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitIProductionJobRequestOutput) GoString() string {
	return s.String()
}

func (s *SubmitIProductionJobRequestOutput) SetBiz(v string) *SubmitIProductionJobRequestOutput {
	s.Biz = &v
	return s
}

func (s *SubmitIProductionJobRequestOutput) SetMedia(v string) *SubmitIProductionJobRequestOutput {
	s.Media = &v
	return s
}

func (s *SubmitIProductionJobRequestOutput) SetOutputUrl(v string) *SubmitIProductionJobRequestOutput {
	s.OutputUrl = &v
	return s
}

func (s *SubmitIProductionJobRequestOutput) SetType(v string) *SubmitIProductionJobRequestOutput {
	s.Type = &v
	return s
}

type SubmitIProductionJobRequestScheduleConfig struct {
	// The ID of the ApsaraVideo Media Processing (MPS) queue.
	//
	// example:
	//
	// 5246b8d12a62433ab77845074039c3dc
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The priority of the job. Valid values: 1 to 10. A smaller value indicates a higher priority.
	//
	// example:
	//
	// 6
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitIProductionJobRequestScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitIProductionJobRequestScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitIProductionJobRequestScheduleConfig) SetPipelineId(v string) *SubmitIProductionJobRequestScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitIProductionJobRequestScheduleConfig) SetPriority(v int32) *SubmitIProductionJobRequestScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitIProductionJobShrinkRequest struct {
	// The name of the algorithm that you want to use for the job. Valid values:
	//
	// 	- **Cover**: This algorithm intelligently generates a thumbnail image for a video.
	//
	// 	- **VideoClip**: This algorithm intelligently generates a summary for a video.
	//
	// 	- **VideoDelogo**: This algorithm removes logos from a video.
	//
	// 	- **VideoDetext**: This algorithm removes captions from a video.
	//
	// 	- **CaptionExtraction**: This algorithm extracts captions from a video and generates the caption file.
	//
	// 	- **VideoGreenScreenMatting**: This algorithm performs green-screen image matting on a video and generates a new video.
	//
	// 	- **FaceBeauty**: This algorithm performs video retouching.
	//
	// 	- **VideoH2V**: This algorithm transforms a video from the landscape mode to the portrait mode.
	//
	// 	- **MusicSegmentDetect**: This algorithm detects the chorus of a song.
	//
	// 	- **AudioBeatDetection**: This algorithm detects rhythms.
	//
	// 	- **AudioQualityAssessment**: This algorithm assesses the audio quality.
	//
	// 	- **SpeechDenoise**: This algorithm performs noise reduction.
	//
	// 	- **AudioMixing**: This algorithm mixes audio streams.
	//
	// This parameter is required.
	//
	// example:
	//
	// Cover
	FunctionName *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	// The input file. The file can be an Object Storage Service (OSS) object or a media asset.
	//
	// This parameter is required.
	InputShrink *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// The algorithm-specific parameters. The parameters are specified as JSON objects and vary based on the algorithm. For more information, see the "Parameters of JobParams" section of this topic.
	//
	// example:
	//
	// {"Model":"gif"}
	JobParams *string `json:"JobParams,omitempty" xml:"JobParams,omitempty"`
	ModelId   *string `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	// The name of the intelligent production job. The name can be up to 100 characters in length.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output file. The file can be an OSS object or a media asset.
	//
	// This parameter is required.
	OutputShrink *string `json:"Output,omitempty" xml:"Output,omitempty"`
	// The scheduling configuration.
	ScheduleConfigShrink *string `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty"`
	// The template ID.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The user-defined data that is returned in the response. The value can be up to 1,024 bytes in length.
	//
	// example:
	//
	// {"test":1}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitIProductionJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitIProductionJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitIProductionJobShrinkRequest) SetFunctionName(v string) *SubmitIProductionJobShrinkRequest {
	s.FunctionName = &v
	return s
}

func (s *SubmitIProductionJobShrinkRequest) SetInputShrink(v string) *SubmitIProductionJobShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitIProductionJobShrinkRequest) SetJobParams(v string) *SubmitIProductionJobShrinkRequest {
	s.JobParams = &v
	return s
}

func (s *SubmitIProductionJobShrinkRequest) SetModelId(v string) *SubmitIProductionJobShrinkRequest {
	s.ModelId = &v
	return s
}

func (s *SubmitIProductionJobShrinkRequest) SetName(v string) *SubmitIProductionJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *SubmitIProductionJobShrinkRequest) SetOutputShrink(v string) *SubmitIProductionJobShrinkRequest {
	s.OutputShrink = &v
	return s
}

func (s *SubmitIProductionJobShrinkRequest) SetScheduleConfigShrink(v string) *SubmitIProductionJobShrinkRequest {
	s.ScheduleConfigShrink = &v
	return s
}

func (s *SubmitIProductionJobShrinkRequest) SetTemplateId(v string) *SubmitIProductionJobShrinkRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitIProductionJobShrinkRequest) SetUserData(v string) *SubmitIProductionJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitIProductionJobResponseBody struct {
	// The ID of the intelligent production job.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// C1849434-FC47-5DC1-92B6-F7EAAFE3851E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitIProductionJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitIProductionJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitIProductionJobResponseBody) SetJobId(v string) *SubmitIProductionJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitIProductionJobResponseBody) SetRequestId(v string) *SubmitIProductionJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitIProductionJobResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitIProductionJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitIProductionJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitIProductionJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitIProductionJobResponse) SetHeaders(v map[string]*string) *SubmitIProductionJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitIProductionJobResponse) SetStatusCode(v int32) *SubmitIProductionJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitIProductionJobResponse) SetBody(v *SubmitIProductionJobResponseBody) *SubmitIProductionJobResponse {
	s.Body = v
	return s
}

type SubmitLiveEditingJobRequest struct {
	// The clips in the JSON array format. The output video is created by merging these clips sequentially.
	//
	// Each clip has a start time and an end time. If no live stream parameters are specified, the outer live stream configurations apply. The start and end timestamps are in UTC. For more information about the parameters, see the "Clip" section of this topic.
	//
	// This parameter is required.
	//
	// example:
	//
	// [{\\"StartTime\\": \\" 2021-06-21T08:01:00Z\\",  \\"EndTime\\": \\" 2021-06-21T08:03:00Z\\" ,  "AppName": "app", "DomainName": "domain.com", "StreamName": "stream"},  {\\"StartTime\\": \\" 2021-06-21T08:05:00Z\\",  \\"EndTime\\": \\" 2021-06-21T08:09:00Z\\" }]
	Clips *string `json:"Clips,omitempty" xml:"Clips,omitempty"`
	// The live stream configurations, in the JSON format. The configurations must include the following parameters:
	//
	// 	- AppName: the name of the application to which the live stream belongs.
	//
	// 	- DomainName: the domain name of the application.
	//
	// 	- StreamName: the name of the live stream.
	//
	// example:
	//
	// { "AppName": "app", "DomainName": "domain.com", "StreamName": "stream"  }
	LiveStreamConfig *string `json:"LiveStreamConfig,omitempty" xml:"LiveStreamConfig,omitempty"`
	// The production configurations, in the JSON format. Mode specifies the editing mode. Valid values:
	//
	// 	- **AccurateFast*	- (default): fast editing. It is faster than the Accurate mode. The resolution of the output file is the same as that of the source stream. You cannot specify the width and height of the output file.
	//
	// 	- **Accurate**: accurate editing. In this mode, you can specify the width and height of the output file.
	//
	// 	- **Rough**: rough editing. The minimum precision is one TS segment. The output file comprises all segments within the specified time range. You can specify the width and height of the output file.
	//
	// 	- **RoughFast**: fast rough editing. It is faster than the Accurate mode. The minimum precision is one TS segment. The output file comprises all segments within the specified time range. The resolution of the output file is the same as that of the source stream. You cannot specify the width and height of the output file.
	//
	// example:
	//
	// { "Mode": "AccurateFast"}
	MediaProduceConfig *string `json:"MediaProduceConfig,omitempty" xml:"MediaProduceConfig,omitempty"`
	// The configurations of the output file, in the JSON format. You can specify an OSS URL or a storage location in a storage bucket of ApsaraVideo VOD.
	//
	// 	- To store the output file in OSS, you must specify MediaURL.
	//
	// 	- To store the output file in ApsaraVideo VOD, you must specify StorageLocation and FileName.
	OutputMediaConfig *string `json:"OutputMediaConfig,omitempty" xml:"OutputMediaConfig,omitempty"`
	// The type of the output file. Valid values:
	//
	// 	- oss-object: OSS object in an OSS bucket.
	//
	// 	- vod-media: media asset in Alibaba Cloud VOD.
	//
	// example:
	//
	// oss-object
	OutputMediaTarget *string `json:"OutputMediaTarget,omitempty" xml:"OutputMediaTarget,omitempty"`
	// The ID of the live editing project. If this parameter is specified, the system reads the storage configurations of the project. If this parameter is not specified, the specified storage configurations take precedence.
	//
	// example:
	//
	// ****fddd7748b58bf1d47e95****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The user-defined data in the JSON format, which can be up to 512 bytes in length.
	//
	// example:
	//
	// {"key": "value"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitLiveEditingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveEditingJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitLiveEditingJobRequest) SetClips(v string) *SubmitLiveEditingJobRequest {
	s.Clips = &v
	return s
}

func (s *SubmitLiveEditingJobRequest) SetLiveStreamConfig(v string) *SubmitLiveEditingJobRequest {
	s.LiveStreamConfig = &v
	return s
}

func (s *SubmitLiveEditingJobRequest) SetMediaProduceConfig(v string) *SubmitLiveEditingJobRequest {
	s.MediaProduceConfig = &v
	return s
}

func (s *SubmitLiveEditingJobRequest) SetOutputMediaConfig(v string) *SubmitLiveEditingJobRequest {
	s.OutputMediaConfig = &v
	return s
}

func (s *SubmitLiveEditingJobRequest) SetOutputMediaTarget(v string) *SubmitLiveEditingJobRequest {
	s.OutputMediaTarget = &v
	return s
}

func (s *SubmitLiveEditingJobRequest) SetProjectId(v string) *SubmitLiveEditingJobRequest {
	s.ProjectId = &v
	return s
}

func (s *SubmitLiveEditingJobRequest) SetUserData(v string) *SubmitLiveEditingJobRequest {
	s.UserData = &v
	return s
}

type SubmitLiveEditingJobResponseBody struct {
	// The ID of the live editing job.
	//
	// example:
	//
	// ****d80e4e4044975745c14b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The media asset ID of the output file.
	//
	// example:
	//
	// ****c469e944b5a856828dc2****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The URL of the output file.
	//
	// example:
	//
	// http://test-bucket.cn-shanghai.aliyuncs.com/test.mp4
	MediaURL *string `json:"MediaURL,omitempty" xml:"MediaURL,omitempty"`
	// The ID of the live editing project.
	//
	// example:
	//
	// ****fddd7748b58bf1d47e95****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ****36-3C1E-4417-BDB2-1E034F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The media asset ID of the output file in ApsaraVideo VOD if the output file is stored in ApsaraVideo VOD.
	//
	// example:
	//
	// ****d7578s4h75ci945c14b****
	VodMediaId *string `json:"VodMediaId,omitempty" xml:"VodMediaId,omitempty"`
}

func (s SubmitLiveEditingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveEditingJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitLiveEditingJobResponseBody) SetJobId(v string) *SubmitLiveEditingJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitLiveEditingJobResponseBody) SetMediaId(v string) *SubmitLiveEditingJobResponseBody {
	s.MediaId = &v
	return s
}

func (s *SubmitLiveEditingJobResponseBody) SetMediaURL(v string) *SubmitLiveEditingJobResponseBody {
	s.MediaURL = &v
	return s
}

func (s *SubmitLiveEditingJobResponseBody) SetProjectId(v string) *SubmitLiveEditingJobResponseBody {
	s.ProjectId = &v
	return s
}

func (s *SubmitLiveEditingJobResponseBody) SetRequestId(v string) *SubmitLiveEditingJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitLiveEditingJobResponseBody) SetVodMediaId(v string) *SubmitLiveEditingJobResponseBody {
	s.VodMediaId = &v
	return s
}

type SubmitLiveEditingJobResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitLiveEditingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitLiveEditingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveEditingJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitLiveEditingJobResponse) SetHeaders(v map[string]*string) *SubmitLiveEditingJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitLiveEditingJobResponse) SetStatusCode(v int32) *SubmitLiveEditingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitLiveEditingJobResponse) SetBody(v *SubmitLiveEditingJobResponseBody) *SubmitLiveEditingJobResponse {
	s.Body = v
	return s
}

type SubmitLiveRecordJobRequest struct {
	// The name of the recording job.
	//
	// This parameter is required.
	//
	// example:
	//
	// live stream record 1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The callback URL.
	//
	// example:
	//
	// https://example.com/imsnotify
	NotifyUrl *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	// The storage address of the recording.
	//
	// This parameter is required.
	RecordOutput *SubmitLiveRecordJobRequestRecordOutput `json:"RecordOutput,omitempty" xml:"RecordOutput,omitempty" type:"Struct"`
	// The URL of the live stream.
	//
	// This parameter is required.
	StreamInput *SubmitLiveRecordJobRequestStreamInput `json:"StreamInput,omitempty" xml:"StreamInput,omitempty" type:"Struct"`
	// The ID of the recording template.
	//
	// This parameter is required.
	//
	// example:
	//
	// 69e1f9fe-1e97-11ed-ba64-0c42a1b73d66
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitLiveRecordJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveRecordJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitLiveRecordJobRequest) SetName(v string) *SubmitLiveRecordJobRequest {
	s.Name = &v
	return s
}

func (s *SubmitLiveRecordJobRequest) SetNotifyUrl(v string) *SubmitLiveRecordJobRequest {
	s.NotifyUrl = &v
	return s
}

func (s *SubmitLiveRecordJobRequest) SetRecordOutput(v *SubmitLiveRecordJobRequestRecordOutput) *SubmitLiveRecordJobRequest {
	s.RecordOutput = v
	return s
}

func (s *SubmitLiveRecordJobRequest) SetStreamInput(v *SubmitLiveRecordJobRequestStreamInput) *SubmitLiveRecordJobRequest {
	s.StreamInput = v
	return s
}

func (s *SubmitLiveRecordJobRequest) SetTemplateId(v string) *SubmitLiveRecordJobRequest {
	s.TemplateId = &v
	return s
}

type SubmitLiveRecordJobRequestRecordOutput struct {
	// The bucket name.
	//
	// example:
	//
	// imsbucket1
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// The endpoint of the storage service.
	//
	// example:
	//
	// oss-cn-hangzhou.aliyuncs.com
	Endpoint *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	// The type of the storage address.
	//
	// This parameter is required.
	//
	// example:
	//
	// oss
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitLiveRecordJobRequestRecordOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveRecordJobRequestRecordOutput) GoString() string {
	return s.String()
}

func (s *SubmitLiveRecordJobRequestRecordOutput) SetBucket(v string) *SubmitLiveRecordJobRequestRecordOutput {
	s.Bucket = &v
	return s
}

func (s *SubmitLiveRecordJobRequestRecordOutput) SetEndpoint(v string) *SubmitLiveRecordJobRequestRecordOutput {
	s.Endpoint = &v
	return s
}

func (s *SubmitLiveRecordJobRequestRecordOutput) SetType(v string) *SubmitLiveRecordJobRequestRecordOutput {
	s.Type = &v
	return s
}

type SubmitLiveRecordJobRequestStreamInput struct {
	// The type of the live stream URL. The value can only be rtmp.
	//
	// This parameter is required.
	//
	// example:
	//
	// rtmp
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The URL of the live stream.
	//
	// example:
	//
	// rtmp://example.com/live/stream1
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s SubmitLiveRecordJobRequestStreamInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveRecordJobRequestStreamInput) GoString() string {
	return s.String()
}

func (s *SubmitLiveRecordJobRequestStreamInput) SetType(v string) *SubmitLiveRecordJobRequestStreamInput {
	s.Type = &v
	return s
}

func (s *SubmitLiveRecordJobRequestStreamInput) SetUrl(v string) *SubmitLiveRecordJobRequestStreamInput {
	s.Url = &v
	return s
}

type SubmitLiveRecordJobShrinkRequest struct {
	// The name of the recording job.
	//
	// This parameter is required.
	//
	// example:
	//
	// live stream record 1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The callback URL.
	//
	// example:
	//
	// https://example.com/imsnotify
	NotifyUrl *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	// The storage address of the recording.
	//
	// This parameter is required.
	RecordOutputShrink *string `json:"RecordOutput,omitempty" xml:"RecordOutput,omitempty"`
	// The URL of the live stream.
	//
	// This parameter is required.
	StreamInputShrink *string `json:"StreamInput,omitempty" xml:"StreamInput,omitempty"`
	// The ID of the recording template.
	//
	// This parameter is required.
	//
	// example:
	//
	// 69e1f9fe-1e97-11ed-ba64-0c42a1b73d66
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitLiveRecordJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveRecordJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitLiveRecordJobShrinkRequest) SetName(v string) *SubmitLiveRecordJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *SubmitLiveRecordJobShrinkRequest) SetNotifyUrl(v string) *SubmitLiveRecordJobShrinkRequest {
	s.NotifyUrl = &v
	return s
}

func (s *SubmitLiveRecordJobShrinkRequest) SetRecordOutputShrink(v string) *SubmitLiveRecordJobShrinkRequest {
	s.RecordOutputShrink = &v
	return s
}

func (s *SubmitLiveRecordJobShrinkRequest) SetStreamInputShrink(v string) *SubmitLiveRecordJobShrinkRequest {
	s.StreamInputShrink = &v
	return s
}

func (s *SubmitLiveRecordJobShrinkRequest) SetTemplateId(v string) *SubmitLiveRecordJobShrinkRequest {
	s.TemplateId = &v
	return s
}

type SubmitLiveRecordJobResponseBody struct {
	// The ID of the recording job.
	//
	// example:
	//
	// ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// BEA98A0C-7870-15FE-B96F-8880BB600A2C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitLiveRecordJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveRecordJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitLiveRecordJobResponseBody) SetJobId(v string) *SubmitLiveRecordJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitLiveRecordJobResponseBody) SetRequestId(v string) *SubmitLiveRecordJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitLiveRecordJobResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitLiveRecordJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitLiveRecordJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveRecordJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitLiveRecordJobResponse) SetHeaders(v map[string]*string) *SubmitLiveRecordJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitLiveRecordJobResponse) SetStatusCode(v int32) *SubmitLiveRecordJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitLiveRecordJobResponse) SetBody(v *SubmitLiveRecordJobResponseBody) *SubmitLiveRecordJobResponse {
	s.Body = v
	return s
}

type SubmitLiveSnapshotJobRequest struct {
	// The snapshot callback URL.
	//
	// 	- It cannot exceed 255 characters in length.
	//
	// 	- Both HTTP and HTTPS URLs are supported.
	//
	// example:
	//
	// http://www.aliyun.com/snapshot/callback
	CallbackUrl *string `json:"CallbackUrl,omitempty" xml:"CallbackUrl,omitempty"`
	// The name of the job.
	//
	// 	- It cannot exceed 128 characters in length.
	//
	// This parameter is required.
	JobName *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	// The information about the output snapshot.
	//
	// This parameter is required.
	SnapshotOutput *SubmitLiveSnapshotJobRequestSnapshotOutput `json:"SnapshotOutput,omitempty" xml:"SnapshotOutput,omitempty" type:"Struct"`
	// The information about the input stream.
	//
	// This parameter is required.
	StreamInput *SubmitLiveSnapshotJobRequestStreamInput `json:"StreamInput,omitempty" xml:"StreamInput,omitempty" type:"Struct"`
	// The template ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitLiveSnapshotJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveSnapshotJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitLiveSnapshotJobRequest) SetCallbackUrl(v string) *SubmitLiveSnapshotJobRequest {
	s.CallbackUrl = &v
	return s
}

func (s *SubmitLiveSnapshotJobRequest) SetJobName(v string) *SubmitLiveSnapshotJobRequest {
	s.JobName = &v
	return s
}

func (s *SubmitLiveSnapshotJobRequest) SetSnapshotOutput(v *SubmitLiveSnapshotJobRequestSnapshotOutput) *SubmitLiveSnapshotJobRequest {
	s.SnapshotOutput = v
	return s
}

func (s *SubmitLiveSnapshotJobRequest) SetStreamInput(v *SubmitLiveSnapshotJobRequestStreamInput) *SubmitLiveSnapshotJobRequest {
	s.StreamInput = v
	return s
}

func (s *SubmitLiveSnapshotJobRequest) SetTemplateId(v string) *SubmitLiveSnapshotJobRequest {
	s.TemplateId = &v
	return s
}

type SubmitLiveSnapshotJobRequestSnapshotOutput struct {
	// The bucket of the snapshot output endpoint.
	//
	// This parameter is required.
	//
	// example:
	//
	// testbucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// The output endpoint of the snapshot.
	//
	// This parameter is required.
	//
	// example:
	//
	// oss-cn-shanghai.aliyuncs.com
	Endpoint *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	// The storage type of the snapshot. The value can only be oss.
	//
	// This parameter is required.
	//
	// example:
	//
	// oss
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s SubmitLiveSnapshotJobRequestSnapshotOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveSnapshotJobRequestSnapshotOutput) GoString() string {
	return s.String()
}

func (s *SubmitLiveSnapshotJobRequestSnapshotOutput) SetBucket(v string) *SubmitLiveSnapshotJobRequestSnapshotOutput {
	s.Bucket = &v
	return s
}

func (s *SubmitLiveSnapshotJobRequestSnapshotOutput) SetEndpoint(v string) *SubmitLiveSnapshotJobRequestSnapshotOutput {
	s.Endpoint = &v
	return s
}

func (s *SubmitLiveSnapshotJobRequestSnapshotOutput) SetStorageType(v string) *SubmitLiveSnapshotJobRequestSnapshotOutput {
	s.StorageType = &v
	return s
}

type SubmitLiveSnapshotJobRequestStreamInput struct {
	// The type of the input stream. The value can only be rtmp.
	//
	// This parameter is required.
	//
	// example:
	//
	// rtmp
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The URL of the input stream.
	//
	// 	- It cannot exceed 255 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// rtmp://www.aliyun.com/stream
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s SubmitLiveSnapshotJobRequestStreamInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveSnapshotJobRequestStreamInput) GoString() string {
	return s.String()
}

func (s *SubmitLiveSnapshotJobRequestStreamInput) SetType(v string) *SubmitLiveSnapshotJobRequestStreamInput {
	s.Type = &v
	return s
}

func (s *SubmitLiveSnapshotJobRequestStreamInput) SetUrl(v string) *SubmitLiveSnapshotJobRequestStreamInput {
	s.Url = &v
	return s
}

type SubmitLiveSnapshotJobShrinkRequest struct {
	// The snapshot callback URL.
	//
	// 	- It cannot exceed 255 characters in length.
	//
	// 	- Both HTTP and HTTPS URLs are supported.
	//
	// example:
	//
	// http://www.aliyun.com/snapshot/callback
	CallbackUrl *string `json:"CallbackUrl,omitempty" xml:"CallbackUrl,omitempty"`
	// The name of the job.
	//
	// 	- It cannot exceed 128 characters in length.
	//
	// This parameter is required.
	JobName *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	// The information about the output snapshot.
	//
	// This parameter is required.
	SnapshotOutputShrink *string `json:"SnapshotOutput,omitempty" xml:"SnapshotOutput,omitempty"`
	// The information about the input stream.
	//
	// This parameter is required.
	StreamInputShrink *string `json:"StreamInput,omitempty" xml:"StreamInput,omitempty"`
	// The template ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitLiveSnapshotJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveSnapshotJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitLiveSnapshotJobShrinkRequest) SetCallbackUrl(v string) *SubmitLiveSnapshotJobShrinkRequest {
	s.CallbackUrl = &v
	return s
}

func (s *SubmitLiveSnapshotJobShrinkRequest) SetJobName(v string) *SubmitLiveSnapshotJobShrinkRequest {
	s.JobName = &v
	return s
}

func (s *SubmitLiveSnapshotJobShrinkRequest) SetSnapshotOutputShrink(v string) *SubmitLiveSnapshotJobShrinkRequest {
	s.SnapshotOutputShrink = &v
	return s
}

func (s *SubmitLiveSnapshotJobShrinkRequest) SetStreamInputShrink(v string) *SubmitLiveSnapshotJobShrinkRequest {
	s.StreamInputShrink = &v
	return s
}

func (s *SubmitLiveSnapshotJobShrinkRequest) SetTemplateId(v string) *SubmitLiveSnapshotJobShrinkRequest {
	s.TemplateId = &v
	return s
}

type SubmitLiveSnapshotJobResponseBody struct {
	// The job ID.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287666****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitLiveSnapshotJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveSnapshotJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitLiveSnapshotJobResponseBody) SetJobId(v string) *SubmitLiveSnapshotJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitLiveSnapshotJobResponseBody) SetRequestId(v string) *SubmitLiveSnapshotJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitLiveSnapshotJobResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitLiveSnapshotJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitLiveSnapshotJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveSnapshotJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitLiveSnapshotJobResponse) SetHeaders(v map[string]*string) *SubmitLiveSnapshotJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitLiveSnapshotJobResponse) SetStatusCode(v int32) *SubmitLiveSnapshotJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitLiveSnapshotJobResponse) SetBody(v *SubmitLiveSnapshotJobResponseBody) *SubmitLiveSnapshotJobResponse {
	s.Body = v
	return s
}

type SubmitLiveTranscodeJobRequest struct {
	// The name of the transcoding job.
	//
	// This parameter is required.
	//
	// example:
	//
	// task1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The start mode of the transcoding job.
	//
	// 	- 0: The transcoding job immediately starts.
	//
	// 	- 1: The transcoding job starts at the scheduled time.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0
	StartMode *int32 `json:"StartMode,omitempty" xml:"StartMode,omitempty"`
	// The information about the input stream.
	//
	// This parameter is required.
	StreamInput *SubmitLiveTranscodeJobRequestStreamInput `json:"StreamInput,omitempty" xml:"StreamInput,omitempty" type:"Struct"`
	// The template ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The configuration of a timed transcoding job. This parameter is required if you set StartMode to 1.
	TimedConfig *SubmitLiveTranscodeJobRequestTimedConfig `json:"TimedConfig,omitempty" xml:"TimedConfig,omitempty" type:"Struct"`
	// The information about the transcoding output.
	//
	// This parameter is required.
	TranscodeOutput *SubmitLiveTranscodeJobRequestTranscodeOutput `json:"TranscodeOutput,omitempty" xml:"TranscodeOutput,omitempty" type:"Struct"`
}

func (s SubmitLiveTranscodeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveTranscodeJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitLiveTranscodeJobRequest) SetName(v string) *SubmitLiveTranscodeJobRequest {
	s.Name = &v
	return s
}

func (s *SubmitLiveTranscodeJobRequest) SetStartMode(v int32) *SubmitLiveTranscodeJobRequest {
	s.StartMode = &v
	return s
}

func (s *SubmitLiveTranscodeJobRequest) SetStreamInput(v *SubmitLiveTranscodeJobRequestStreamInput) *SubmitLiveTranscodeJobRequest {
	s.StreamInput = v
	return s
}

func (s *SubmitLiveTranscodeJobRequest) SetTemplateId(v string) *SubmitLiveTranscodeJobRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitLiveTranscodeJobRequest) SetTimedConfig(v *SubmitLiveTranscodeJobRequestTimedConfig) *SubmitLiveTranscodeJobRequest {
	s.TimedConfig = v
	return s
}

func (s *SubmitLiveTranscodeJobRequest) SetTranscodeOutput(v *SubmitLiveTranscodeJobRequestTranscodeOutput) *SubmitLiveTranscodeJobRequest {
	s.TranscodeOutput = v
	return s
}

type SubmitLiveTranscodeJobRequestStreamInput struct {
	// The URL of the input stream.
	//
	// This parameter is required.
	//
	// example:
	//
	// rtmp://mydomain/app/stream1
	InputUrl *string `json:"InputUrl,omitempty" xml:"InputUrl,omitempty"`
	// The type of the input stream. The value can only be rtmp.
	//
	// This parameter is required.
	//
	// example:
	//
	// rtmp
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitLiveTranscodeJobRequestStreamInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveTranscodeJobRequestStreamInput) GoString() string {
	return s.String()
}

func (s *SubmitLiveTranscodeJobRequestStreamInput) SetInputUrl(v string) *SubmitLiveTranscodeJobRequestStreamInput {
	s.InputUrl = &v
	return s
}

func (s *SubmitLiveTranscodeJobRequestStreamInput) SetType(v string) *SubmitLiveTranscodeJobRequestStreamInput {
	s.Type = &v
	return s
}

type SubmitLiveTranscodeJobRequestTimedConfig struct {
	// The stop time of the transcoding job. Note: The time span between the stop time and the current time cannot exceed seven days.
	//
	// example:
	//
	// 2022-07-20T08:20:32Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The start time of the transcoding job. Note: The time span between the start time and the current time cannot exceed seven days.
	//
	// example:
	//
	// 2022-02-21T00:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s SubmitLiveTranscodeJobRequestTimedConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveTranscodeJobRequestTimedConfig) GoString() string {
	return s.String()
}

func (s *SubmitLiveTranscodeJobRequestTimedConfig) SetEndTime(v string) *SubmitLiveTranscodeJobRequestTimedConfig {
	s.EndTime = &v
	return s
}

func (s *SubmitLiveTranscodeJobRequestTimedConfig) SetStartTime(v string) *SubmitLiveTranscodeJobRequestTimedConfig {
	s.StartTime = &v
	return s
}

type SubmitLiveTranscodeJobRequestTranscodeOutput struct {
	// The streaming domain name of ApsaraVideo Live.
	//
	// example:
	//
	// mydomain
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The type of the output stream. A value of LiveCenter indicates that the URL of the output stream is generated based on the domain name of ApsaraVideo Live. The value can only be LiveCenter.
	//
	// This parameter is required.
	//
	// example:
	//
	// LiveCenter
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitLiveTranscodeJobRequestTranscodeOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveTranscodeJobRequestTranscodeOutput) GoString() string {
	return s.String()
}

func (s *SubmitLiveTranscodeJobRequestTranscodeOutput) SetDomainName(v string) *SubmitLiveTranscodeJobRequestTranscodeOutput {
	s.DomainName = &v
	return s
}

func (s *SubmitLiveTranscodeJobRequestTranscodeOutput) SetType(v string) *SubmitLiveTranscodeJobRequestTranscodeOutput {
	s.Type = &v
	return s
}

type SubmitLiveTranscodeJobShrinkRequest struct {
	// The name of the transcoding job.
	//
	// This parameter is required.
	//
	// example:
	//
	// task1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The start mode of the transcoding job.
	//
	// 	- 0: The transcoding job immediately starts.
	//
	// 	- 1: The transcoding job starts at the scheduled time.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0
	StartMode *int32 `json:"StartMode,omitempty" xml:"StartMode,omitempty"`
	// The information about the input stream.
	//
	// This parameter is required.
	StreamInputShrink *string `json:"StreamInput,omitempty" xml:"StreamInput,omitempty"`
	// The template ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The configuration of a timed transcoding job. This parameter is required if you set StartMode to 1.
	TimedConfigShrink *string `json:"TimedConfig,omitempty" xml:"TimedConfig,omitempty"`
	// The information about the transcoding output.
	//
	// This parameter is required.
	TranscodeOutputShrink *string `json:"TranscodeOutput,omitempty" xml:"TranscodeOutput,omitempty"`
}

func (s SubmitLiveTranscodeJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveTranscodeJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitLiveTranscodeJobShrinkRequest) SetName(v string) *SubmitLiveTranscodeJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *SubmitLiveTranscodeJobShrinkRequest) SetStartMode(v int32) *SubmitLiveTranscodeJobShrinkRequest {
	s.StartMode = &v
	return s
}

func (s *SubmitLiveTranscodeJobShrinkRequest) SetStreamInputShrink(v string) *SubmitLiveTranscodeJobShrinkRequest {
	s.StreamInputShrink = &v
	return s
}

func (s *SubmitLiveTranscodeJobShrinkRequest) SetTemplateId(v string) *SubmitLiveTranscodeJobShrinkRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitLiveTranscodeJobShrinkRequest) SetTimedConfigShrink(v string) *SubmitLiveTranscodeJobShrinkRequest {
	s.TimedConfigShrink = &v
	return s
}

func (s *SubmitLiveTranscodeJobShrinkRequest) SetTranscodeOutputShrink(v string) *SubmitLiveTranscodeJobShrinkRequest {
	s.TranscodeOutputShrink = &v
	return s
}

type SubmitLiveTranscodeJobResponseBody struct {
	// The ID of the transcoding job.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitLiveTranscodeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveTranscodeJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitLiveTranscodeJobResponseBody) SetJobId(v string) *SubmitLiveTranscodeJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitLiveTranscodeJobResponseBody) SetRequestId(v string) *SubmitLiveTranscodeJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitLiveTranscodeJobResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitLiveTranscodeJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitLiveTranscodeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveTranscodeJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitLiveTranscodeJobResponse) SetHeaders(v map[string]*string) *SubmitLiveTranscodeJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitLiveTranscodeJobResponse) SetStatusCode(v int32) *SubmitLiveTranscodeJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitLiveTranscodeJobResponse) SetBody(v *SubmitLiveTranscodeJobResponseBody) *SubmitLiveTranscodeJobResponse {
	s.Body = v
	return s
}

type SubmitMediaAiAnalysisJobRequest struct {
	// The analysis parameters.
	//
	// example:
	//
	// {"nlpParams":{"sourceLanguage":"cn","diarizationEnabled":true,"speakerCount":0,"summarizationEnabled":false,"translationEnabled":false}}
	AnalysisParams *string `json:"AnalysisParams,omitempty" xml:"AnalysisParams,omitempty"`
	// The media asset that you want to analyze. You can specify an Object Storage Service (OSS) URL, a media asset ID, or an external URL.
	//
	// example:
	//
	// {"MediaType":"video","Media":"https://xxx.com/your_movie.mp4"}
	Input    *string `json:"Input,omitempty" xml:"Input,omitempty"`
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitMediaAiAnalysisJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaAiAnalysisJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitMediaAiAnalysisJobRequest) SetAnalysisParams(v string) *SubmitMediaAiAnalysisJobRequest {
	s.AnalysisParams = &v
	return s
}

func (s *SubmitMediaAiAnalysisJobRequest) SetInput(v string) *SubmitMediaAiAnalysisJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitMediaAiAnalysisJobRequest) SetUserData(v string) *SubmitMediaAiAnalysisJobRequest {
	s.UserData = &v
	return s
}

type SubmitMediaAiAnalysisJobResponseBody struct {
	// The ID of the media asset.
	//
	// example:
	//
	// ******b48fb04483915d4f2cd8******
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ****63E8B7C7-4812-46AD-0FA56029AC86****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitMediaAiAnalysisJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaAiAnalysisJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitMediaAiAnalysisJobResponseBody) SetMediaId(v string) *SubmitMediaAiAnalysisJobResponseBody {
	s.MediaId = &v
	return s
}

func (s *SubmitMediaAiAnalysisJobResponseBody) SetRequestId(v string) *SubmitMediaAiAnalysisJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitMediaAiAnalysisJobResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitMediaAiAnalysisJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitMediaAiAnalysisJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaAiAnalysisJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitMediaAiAnalysisJobResponse) SetHeaders(v map[string]*string) *SubmitMediaAiAnalysisJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitMediaAiAnalysisJobResponse) SetStatusCode(v int32) *SubmitMediaAiAnalysisJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitMediaAiAnalysisJobResponse) SetBody(v *SubmitMediaAiAnalysisJobResponseBody) *SubmitMediaAiAnalysisJobResponse {
	s.Body = v
	return s
}

type SubmitMediaCensorJobRequest struct {
	// The live comments of the video.
	//
	// >  If this parameter is specified, the system checks the live comments specified by this parameter instead of the live comments of the input file specified by Media.
	//
	// example:
	//
	// hello world
	Barrages *string `json:"Barrages,omitempty" xml:"Barrages,omitempty"`
	// The Object Storage Service (OSS) objects that are used as the thumbnails. Specify the thumbnails in a JSON array. A maximum of five thumbnails are supported.
	//
	// >  If this parameter is specified, the system checks the thumbnails specified by this parameter instead of the thumbnails of the input file specified by **Media**.
	//
	// example:
	//
	// [{"Bucket":"example-bucket-****","Location":"oss-cn-shanghai","Object":"example-****.jpeg","RoleArn":"acs:ram::1997018457688683:role/AliyunICEDefaultRole"}]
	CoverImages *string `json:"CoverImages,omitempty" xml:"CoverImages,omitempty"`
	// The video description, which can be up to 128 bytes in length.
	//
	// >  If this parameter is specified, the system checks the description specified by this parameter instead of the description of the input file specified by Media.
	//
	// example:
	//
	// example description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The information about the file to be moderated.
	Input *SubmitMediaCensorJobRequestInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// The callback URL. Simple Message Queue (SMQ, formerly MNS) and HTTP callbacks are supported.
	//
	// example:
	//
	// mns://125340688170****.oss-cn-shanghai.aliyuncs.com/queues/example-pipeline
	NotifyUrl *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	// The output snapshots. The moderation job generates output snapshots and the result JSON file in the path corresponding to the input file.
	//
	// 	- File name format of output snapshots: oss://bucket/snapshot-{Count}.jpg. In the path, bucket indicates an OSS bucket that resides in the same region as the current project, and {Count} is the sequence number of the snapshot.
	//
	// 	- The detailed moderation results are stored in the {jobId}.output file in the same OSS folder as the output snapshots. For more information about the parameters in the output file, see [Output parameters of media moderation jobs](https://help.aliyun.com/document_detail/609211.html).
	//
	// example:
	//
	// oss://sashimi-cn-shanghai/censor/snapshot-{Count}.jpg
	Output *string `json:"Output,omitempty" xml:"Output,omitempty"`
	// The scheduling configurations.
	ScheduleConfig *SubmitMediaCensorJobRequestScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// The template ID. If this parameter is not specified, the default template is used for moderation.
	//
	// example:
	//
	// S00000001-100060
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The video title, which can be up to 64 bytes in length.
	//
	// >  If this parameter is specified, the system checks the title specified by this parameter instead of the title of the input file specified by Media.
	//
	// example:
	//
	// Hello World
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// The user-defined data, which can be up to 128 bytes in length.
	//
	// example:
	//
	// UserDatatestid-001-****
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitMediaCensorJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaCensorJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitMediaCensorJobRequest) SetBarrages(v string) *SubmitMediaCensorJobRequest {
	s.Barrages = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetCoverImages(v string) *SubmitMediaCensorJobRequest {
	s.CoverImages = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetDescription(v string) *SubmitMediaCensorJobRequest {
	s.Description = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetInput(v *SubmitMediaCensorJobRequestInput) *SubmitMediaCensorJobRequest {
	s.Input = v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetNotifyUrl(v string) *SubmitMediaCensorJobRequest {
	s.NotifyUrl = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetOutput(v string) *SubmitMediaCensorJobRequest {
	s.Output = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetScheduleConfig(v *SubmitMediaCensorJobRequestScheduleConfig) *SubmitMediaCensorJobRequest {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetTemplateId(v string) *SubmitMediaCensorJobRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetTitle(v string) *SubmitMediaCensorJobRequest {
	s.Title = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetUserData(v string) *SubmitMediaCensorJobRequest {
	s.UserData = &v
	return s
}

type SubmitMediaCensorJobRequestInput struct {
	// The input file. The file can be an OSS object or a media asset. You can specify the path of an OSS object in one of the following formats:
	//
	// 1\\. oss://bucket/object
	//
	// 2\\. http(s)://bucket.oss-[regionId].aliyuncs.com/object
	//
	// In the preceding paths, bucket indicates an OSS bucket that resides in the same region as the current project, and object indicates the path of the object in the bucket.
	//
	// example:
	//
	// 1b1b9cd148034739af413150fded****
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the input file. Valid values:
	//
	// OSS: OSS object.
	//
	// Media: media asset.
	//
	// example:
	//
	// Media
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitMediaCensorJobRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaCensorJobRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitMediaCensorJobRequestInput) SetMedia(v string) *SubmitMediaCensorJobRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitMediaCensorJobRequestInput) SetType(v string) *SubmitMediaCensorJobRequestInput {
	s.Type = &v
	return s
}

type SubmitMediaCensorJobRequestScheduleConfig struct {
	// The ID of the ApsaraVideo Media Processing (MPS) queue to which the job is submitted.
	//
	// example:
	//
	// 5246b8d12a62433ab77845074039****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The job priority. A larger value indicates a higher priority. Valid values: 1 to 10.
	//
	// example:
	//
	// 6
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitMediaCensorJobRequestScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaCensorJobRequestScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitMediaCensorJobRequestScheduleConfig) SetPipelineId(v string) *SubmitMediaCensorJobRequestScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitMediaCensorJobRequestScheduleConfig) SetPriority(v int32) *SubmitMediaCensorJobRequestScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitMediaCensorJobShrinkRequest struct {
	// The live comments of the video.
	//
	// >  If this parameter is specified, the system checks the live comments specified by this parameter instead of the live comments of the input file specified by Media.
	//
	// example:
	//
	// hello world
	Barrages *string `json:"Barrages,omitempty" xml:"Barrages,omitempty"`
	// The Object Storage Service (OSS) objects that are used as the thumbnails. Specify the thumbnails in a JSON array. A maximum of five thumbnails are supported.
	//
	// >  If this parameter is specified, the system checks the thumbnails specified by this parameter instead of the thumbnails of the input file specified by **Media**.
	//
	// example:
	//
	// [{"Bucket":"example-bucket-****","Location":"oss-cn-shanghai","Object":"example-****.jpeg","RoleArn":"acs:ram::1997018457688683:role/AliyunICEDefaultRole"}]
	CoverImages *string `json:"CoverImages,omitempty" xml:"CoverImages,omitempty"`
	// The video description, which can be up to 128 bytes in length.
	//
	// >  If this parameter is specified, the system checks the description specified by this parameter instead of the description of the input file specified by Media.
	//
	// example:
	//
	// example description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The information about the file to be moderated.
	InputShrink *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// The callback URL. Simple Message Queue (SMQ, formerly MNS) and HTTP callbacks are supported.
	//
	// example:
	//
	// mns://125340688170****.oss-cn-shanghai.aliyuncs.com/queues/example-pipeline
	NotifyUrl *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	// The output snapshots. The moderation job generates output snapshots and the result JSON file in the path corresponding to the input file.
	//
	// 	- File name format of output snapshots: oss://bucket/snapshot-{Count}.jpg. In the path, bucket indicates an OSS bucket that resides in the same region as the current project, and {Count} is the sequence number of the snapshot.
	//
	// 	- The detailed moderation results are stored in the {jobId}.output file in the same OSS folder as the output snapshots. For more information about the parameters in the output file, see [Output parameters of media moderation jobs](https://help.aliyun.com/document_detail/609211.html).
	//
	// example:
	//
	// oss://sashimi-cn-shanghai/censor/snapshot-{Count}.jpg
	Output *string `json:"Output,omitempty" xml:"Output,omitempty"`
	// The scheduling configurations.
	ScheduleConfigShrink *string `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty"`
	// The template ID. If this parameter is not specified, the default template is used for moderation.
	//
	// example:
	//
	// S00000001-100060
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The video title, which can be up to 64 bytes in length.
	//
	// >  If this parameter is specified, the system checks the title specified by this parameter instead of the title of the input file specified by Media.
	//
	// example:
	//
	// Hello World
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// The user-defined data, which can be up to 128 bytes in length.
	//
	// example:
	//
	// UserDatatestid-001-****
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitMediaCensorJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaCensorJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitMediaCensorJobShrinkRequest) SetBarrages(v string) *SubmitMediaCensorJobShrinkRequest {
	s.Barrages = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetCoverImages(v string) *SubmitMediaCensorJobShrinkRequest {
	s.CoverImages = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetDescription(v string) *SubmitMediaCensorJobShrinkRequest {
	s.Description = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetInputShrink(v string) *SubmitMediaCensorJobShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetNotifyUrl(v string) *SubmitMediaCensorJobShrinkRequest {
	s.NotifyUrl = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetOutput(v string) *SubmitMediaCensorJobShrinkRequest {
	s.Output = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetScheduleConfigShrink(v string) *SubmitMediaCensorJobShrinkRequest {
	s.ScheduleConfigShrink = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetTemplateId(v string) *SubmitMediaCensorJobShrinkRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetTitle(v string) *SubmitMediaCensorJobShrinkRequest {
	s.Title = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetUserData(v string) *SubmitMediaCensorJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitMediaCensorJobResponseBody struct {
	// The ID of the content moderation job. We recommend that you save this ID for subsequent calls of other operations.
	//
	// example:
	//
	// 88c6ca184c0e47098a5b665e2****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 25818875-5F78-4A13-BEF6-D7393642CA58
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitMediaCensorJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaCensorJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitMediaCensorJobResponseBody) SetJobId(v string) *SubmitMediaCensorJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitMediaCensorJobResponseBody) SetRequestId(v string) *SubmitMediaCensorJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitMediaCensorJobResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitMediaCensorJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitMediaCensorJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaCensorJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitMediaCensorJobResponse) SetHeaders(v map[string]*string) *SubmitMediaCensorJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitMediaCensorJobResponse) SetStatusCode(v int32) *SubmitMediaCensorJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitMediaCensorJobResponse) SetBody(v *SubmitMediaCensorJobResponseBody) *SubmitMediaCensorJobResponse {
	s.Body = v
	return s
}

type SubmitMediaConvertJobRequest struct {
	// The idempotency key that is used to ensure repeated requests have the same effect as a single request.
	//
	// example:
	//
	// 86f8e525-9d73-4dac-88aa-7aa4e950c00a
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The configurations of the transcoding task.
	//
	// This parameter is required.
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// The ID of the queue.
	//
	// example:
	//
	// e197ecfb103e4849922b054d3032f954
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The user data.
	//
	// example:
	//
	// {"videoId":"abcd"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitMediaConvertJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaConvertJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitMediaConvertJobRequest) SetClientToken(v string) *SubmitMediaConvertJobRequest {
	s.ClientToken = &v
	return s
}

func (s *SubmitMediaConvertJobRequest) SetConfig(v string) *SubmitMediaConvertJobRequest {
	s.Config = &v
	return s
}

func (s *SubmitMediaConvertJobRequest) SetPipelineId(v string) *SubmitMediaConvertJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitMediaConvertJobRequest) SetUserData(v string) *SubmitMediaConvertJobRequest {
	s.UserData = &v
	return s
}

type SubmitMediaConvertJobResponseBody struct {
	// The transcoding task.
	Job *SubmitMediaConvertJobResponseBodyJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitMediaConvertJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaConvertJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitMediaConvertJobResponseBody) SetJob(v *SubmitMediaConvertJobResponseBodyJob) *SubmitMediaConvertJobResponseBody {
	s.Job = v
	return s
}

func (s *SubmitMediaConvertJobResponseBody) SetRequestId(v string) *SubmitMediaConvertJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitMediaConvertJobResponseBodyJob struct {
	// The idempotency key of the request for creating the transcoding task.
	//
	// example:
	//
	// FB7F25E9-AD9B-1603-8AF6-F1E42DF2E706
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The error code returned when the transcoding task failed.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The configurations of the transcoding task.
	Config *SubmitMediaConvertJobResponseBodyJobConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Struct"`
	// The ID of the transcoding task.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The error message returned when the transcoding task failed.
	//
	// example:
	//
	// ok
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The details of the transcoded outputs.
	OutputDetails []*MediaConvertOutputDetail `json:"OutputDetails,omitempty" xml:"OutputDetails,omitempty" type:"Repeated"`
	// The details of the output groups.
	OutputGroupDetails []*MediaConvertOutputGroupDetail `json:"OutputGroupDetails,omitempty" xml:"OutputGroupDetails,omitempty" type:"Repeated"`
	// The ID of the queue.
	//
	// example:
	//
	// 3780049
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// A2129C9F-CE95-58B5-B8C1-07758FF6C86F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the transcoding task. Valid values:
	//
	// 	- Inited: The task is initialized.
	//
	// 	- Running
	//
	// 	- Success
	//
	// 	- Failed
	//
	// 	- Cancelled
	//
	// example:
	//
	// Created
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The user data.
	//
	// example:
	//
	// {"videoId":"abcd"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitMediaConvertJobResponseBodyJob) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaConvertJobResponseBodyJob) GoString() string {
	return s.String()
}

func (s *SubmitMediaConvertJobResponseBodyJob) SetClientToken(v string) *SubmitMediaConvertJobResponseBodyJob {
	s.ClientToken = &v
	return s
}

func (s *SubmitMediaConvertJobResponseBodyJob) SetCode(v string) *SubmitMediaConvertJobResponseBodyJob {
	s.Code = &v
	return s
}

func (s *SubmitMediaConvertJobResponseBodyJob) SetConfig(v *SubmitMediaConvertJobResponseBodyJobConfig) *SubmitMediaConvertJobResponseBodyJob {
	s.Config = v
	return s
}

func (s *SubmitMediaConvertJobResponseBodyJob) SetJobId(v string) *SubmitMediaConvertJobResponseBodyJob {
	s.JobId = &v
	return s
}

func (s *SubmitMediaConvertJobResponseBodyJob) SetMessage(v string) *SubmitMediaConvertJobResponseBodyJob {
	s.Message = &v
	return s
}

func (s *SubmitMediaConvertJobResponseBodyJob) SetOutputDetails(v []*MediaConvertOutputDetail) *SubmitMediaConvertJobResponseBodyJob {
	s.OutputDetails = v
	return s
}

func (s *SubmitMediaConvertJobResponseBodyJob) SetOutputGroupDetails(v []*MediaConvertOutputGroupDetail) *SubmitMediaConvertJobResponseBodyJob {
	s.OutputGroupDetails = v
	return s
}

func (s *SubmitMediaConvertJobResponseBodyJob) SetPipelineId(v string) *SubmitMediaConvertJobResponseBodyJob {
	s.PipelineId = &v
	return s
}

func (s *SubmitMediaConvertJobResponseBodyJob) SetRequestId(v string) *SubmitMediaConvertJobResponseBodyJob {
	s.RequestId = &v
	return s
}

func (s *SubmitMediaConvertJobResponseBodyJob) SetState(v string) *SubmitMediaConvertJobResponseBodyJob {
	s.State = &v
	return s
}

func (s *SubmitMediaConvertJobResponseBodyJob) SetUserData(v string) *SubmitMediaConvertJobResponseBodyJob {
	s.UserData = &v
	return s
}

type SubmitMediaConvertJobResponseBodyJobConfig struct {
	// The inputs of the transcoding task.
	Inputs  []*MediaConvertInput `json:"Inputs,omitempty" xml:"Inputs,omitempty" type:"Repeated"`
	JobName *string              `json:"JobName,omitempty" xml:"JobName,omitempty"`
	// The output group configurations.
	OutputGroups []*MediaConvertOutputGroup `json:"OutputGroups,omitempty" xml:"OutputGroups,omitempty" type:"Repeated"`
	// The output configurations.
	Outputs []*MediaConvertOutput `json:"Outputs,omitempty" xml:"Outputs,omitempty" type:"Repeated"`
}

func (s SubmitMediaConvertJobResponseBodyJobConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaConvertJobResponseBodyJobConfig) GoString() string {
	return s.String()
}

func (s *SubmitMediaConvertJobResponseBodyJobConfig) SetInputs(v []*MediaConvertInput) *SubmitMediaConvertJobResponseBodyJobConfig {
	s.Inputs = v
	return s
}

func (s *SubmitMediaConvertJobResponseBodyJobConfig) SetJobName(v string) *SubmitMediaConvertJobResponseBodyJobConfig {
	s.JobName = &v
	return s
}

func (s *SubmitMediaConvertJobResponseBodyJobConfig) SetOutputGroups(v []*MediaConvertOutputGroup) *SubmitMediaConvertJobResponseBodyJobConfig {
	s.OutputGroups = v
	return s
}

func (s *SubmitMediaConvertJobResponseBodyJobConfig) SetOutputs(v []*MediaConvertOutput) *SubmitMediaConvertJobResponseBodyJobConfig {
	s.Outputs = v
	return s
}

type SubmitMediaConvertJobResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitMediaConvertJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitMediaConvertJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaConvertJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitMediaConvertJobResponse) SetHeaders(v map[string]*string) *SubmitMediaConvertJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitMediaConvertJobResponse) SetStatusCode(v int32) *SubmitMediaConvertJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitMediaConvertJobResponse) SetBody(v *SubmitMediaConvertJobResponseBody) *SubmitMediaConvertJobResponse {
	s.Body = v
	return s
}

type SubmitMediaInfoJobRequest struct {
	// The input of the job.
	//
	// This parameter is required.
	Input *SubmitMediaInfoJobRequestInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// The job name.
	//
	// example:
	//
	// job-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The scheduling parameters.
	ScheduleConfig *SubmitMediaInfoJobRequestScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// The user data.
	//
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitMediaInfoJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobRequest) SetInput(v *SubmitMediaInfoJobRequestInput) *SubmitMediaInfoJobRequest {
	s.Input = v
	return s
}

func (s *SubmitMediaInfoJobRequest) SetName(v string) *SubmitMediaInfoJobRequest {
	s.Name = &v
	return s
}

func (s *SubmitMediaInfoJobRequest) SetScheduleConfig(v *SubmitMediaInfoJobRequestScheduleConfig) *SubmitMediaInfoJobRequest {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitMediaInfoJobRequest) SetUserData(v string) *SubmitMediaInfoJobRequest {
	s.UserData = &v
	return s
}

type SubmitMediaInfoJobRequestInput struct {
	// The media object.
	//
	// 	- If Type is set to OSS, set this parameter to the URL of an OSS object. Both the OSS and HTTP protocols are supported.
	//
	// >  Before you use the OSS bucket in the URL, you must add the bucket on the [Storage Management](https://help.aliyun.com/document_detail/609918.html) page of the Intelligent Media Services (IMS) console.
	//
	// 	- If Type is set to Media, set this parameter to the ID of a media asset.
	//
	// This parameter is required.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values: OSS and Media. A value of OSS indicates an Object Storage Service (OSS) object. A value of Media indicates a media asset.
	//
	// This parameter is required.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitMediaInfoJobRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobRequestInput) SetMedia(v string) *SubmitMediaInfoJobRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitMediaInfoJobRequestInput) SetType(v string) *SubmitMediaInfoJobRequestInput {
	s.Type = &v
	return s
}

type SubmitMediaInfoJobRequestScheduleConfig struct {
	// The ID of the ApsaraVideo Media Processing (MPS) queue that is used to run the job.
	//
	// example:
	//
	// e37ebee5d98b4781897f6086e89f9c56
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The priority of the job. Valid values: 1 to 10. The greater the value, the higher the priority.
	//
	// example:
	//
	// 5
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitMediaInfoJobRequestScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobRequestScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobRequestScheduleConfig) SetPipelineId(v string) *SubmitMediaInfoJobRequestScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitMediaInfoJobRequestScheduleConfig) SetPriority(v int32) *SubmitMediaInfoJobRequestScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitMediaInfoJobShrinkRequest struct {
	// The input of the job.
	//
	// This parameter is required.
	InputShrink *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// The job name.
	//
	// example:
	//
	// job-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The scheduling parameters.
	ScheduleConfigShrink *string `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty"`
	// The user data.
	//
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitMediaInfoJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobShrinkRequest) SetInputShrink(v string) *SubmitMediaInfoJobShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitMediaInfoJobShrinkRequest) SetName(v string) *SubmitMediaInfoJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *SubmitMediaInfoJobShrinkRequest) SetScheduleConfigShrink(v string) *SubmitMediaInfoJobShrinkRequest {
	s.ScheduleConfigShrink = &v
	return s
}

func (s *SubmitMediaInfoJobShrinkRequest) SetUserData(v string) *SubmitMediaInfoJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitMediaInfoJobResponseBody struct {
	// MediaInfoJobDTO
	MediaInfoJob *SubmitMediaInfoJobResponseBodyMediaInfoJob `json:"MediaInfoJob,omitempty" xml:"MediaInfoJob,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitMediaInfoJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBody) SetMediaInfoJob(v *SubmitMediaInfoJobResponseBodyMediaInfoJob) *SubmitMediaInfoJobResponseBody {
	s.MediaInfoJob = v
	return s
}

func (s *SubmitMediaInfoJobResponseBody) SetRequestId(v string) *SubmitMediaInfoJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJob struct {
	// Indicates whether asynchronous processing was performed.
	//
	// example:
	//
	// true
	Async *bool `json:"Async,omitempty" xml:"Async,omitempty"`
	// The time when the job was complete.
	//
	// example:
	//
	// 2022-01-12T08:49:41Z
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The input of the job.
	Input *SubmitMediaInfoJobResponseBodyMediaInfoJobInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// The job ID.
	//
	// example:
	//
	// ab4802364a2e49208c99efab82dfa8e8
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The details of the media information.
	MediaInfoProperty *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty `json:"MediaInfoProperty,omitempty" xml:"MediaInfoProperty,omitempty" type:"Struct"`
	// The job name.
	//
	// example:
	//
	// job-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 4879B9DE-E4B6-19DC-91F5-9D5F4DCE4168
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The scheduling information.
	ScheduleConfig *SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// The state of the job. Valid values: Init (the job is submitted), Success (the job is successful), and Fail (the job failed).
	//
	// example:
	//
	// Init
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The job submission information.
	//
	// example:
	//
	// {}
	SubmitResultJson map[string]interface{} `json:"SubmitResultJson,omitempty" xml:"SubmitResultJson,omitempty"`
	// The time when the job was submitted.
	//
	// example:
	//
	// 2022-01-12T08:49:41Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// The source of the job. Valid values: API, WorkFlow, and Console.
	//
	// example:
	//
	// API
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// The user data.
	//
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJob) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJob) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetAsync(v bool) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.Async = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetFinishTime(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.FinishTime = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetInput(v *SubmitMediaInfoJobResponseBodyMediaInfoJobInput) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.Input = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetJobId(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.JobId = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetMediaInfoProperty(v *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.MediaInfoProperty = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.Name = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetRequestId(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.RequestId = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetScheduleConfig(v *SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetStatus(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.Status = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetSubmitResultJson(v map[string]interface{}) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.SubmitResultJson = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetSubmitTime(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.SubmitTime = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetTriggerSource(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.TriggerSource = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetUserData(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.UserData = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobInput struct {
	// The media object. If Type is set to OSS, the URL of an OSS object is returned. Both the OSS and HTTP protocols are supported. If Type is set to Media, set this parameter to the ID of a media asset.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values: OSS and Media. A value of OSS indicates an OSS object. A value of Media indicates a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobInput) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobInput) SetMedia(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobInput {
	s.Media = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobInput) SetType(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobInput {
	s.Type = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty struct {
	// The information about the audio stream.
	AudioStreamInfoList []*SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList `json:"AudioStreamInfoList,omitempty" xml:"AudioStreamInfoList,omitempty" type:"Repeated"`
	// The basic file information.
	FileBasicInfo *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
	// The information about the video stream.
	VideoStreamInfoList []*SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList `json:"VideoStreamInfoList,omitempty" xml:"VideoStreamInfoList,omitempty" type:"Repeated"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetAudioStreamInfoList(v []*SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.AudioStreamInfoList = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetFileBasicInfo(v *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.FileBasicInfo = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetVideoStreamInfoList(v []*SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.VideoStreamInfoList = v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList struct {
	// The bitrate.
	//
	// example:
	//
	// 0.f
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The sound channel layout.
	//
	// example:
	//
	// stereo
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	// The number of sound channels.
	//
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// The name of the encoding format.
	//
	// example:
	//
	// AAC (Advanced Audio Coding)
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// The encoding format.
	//
	// example:
	//
	// aac
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// The encoder tag.
	//
	// example:
	//
	// 0x000f
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// The name of the encoder tag.
	//
	// example:
	//
	// [15][0][0][0]
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// The time base of the encoder.
	//
	// example:
	//
	// 1/44100
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// The duration of the stream. Unit: seconds.
	//
	// example:
	//
	// 403.039989
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The sequence number of the stream.
	//
	// example:
	//
	// 1
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// The language of the stream.
	//
	// example:
	//
	// us
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The sample format.
	//
	// example:
	//
	// fltp
	SampleFmt *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	// The sampling rate. Unit: Hz.
	//
	// example:
	//
	// 44100
	SampleRate *string `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
	// The start time of the stream.
	//
	// example:
	//
	// 1.473556
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The time base.
	//
	// example:
	//
	// 1/90000
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetBitrate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetChannelLayout(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.ChannelLayout = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetChannels(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Channels = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecLongName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTag(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTagString(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTimeBase(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetDuration(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Duration = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetIndex(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Index = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetLang(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Lang = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetSampleFmt(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.SampleFmt = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetSampleRate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.SampleRate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetStartTime(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetTimebase(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Timebase = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo struct {
	// The video bitrate.
	//
	// example:
	//
	// 888.563
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The duration of the video.
	//
	// example:
	//
	// 403.039999
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The file name.
	//
	// example:
	//
	// file.m3u8
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The file size.
	//
	// example:
	//
	// 31737
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// The state of the file.
	//
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// The file type.
	//
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// The URL of the file.
	//
	// example:
	//
	// http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// The name of the video format.
	//
	// example:
	//
	// hls,applehttp
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// The height of the output video.
	//
	// example:
	//
	// 478
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// 2b36bd19c13f4145b094c0cad80dbce5
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The region in which the file resides.
	//
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The width of the output video.
	//
	// example:
	//
	// 848
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetBitrate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetDuration(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileSize(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileStatus(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileType(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileUrl(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFormatName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetHeight(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Height = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetMediaId(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.MediaId = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetRegion(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Region = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetWidth(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Width = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList struct {
	// The average frame rate.
	//
	// example:
	//
	// 25.0
	AvgFps *string `json:"Avg_fps,omitempty" xml:"Avg_fps,omitempty"`
	// The bitrate.
	//
	// example:
	//
	// 888.563
	BitRate *string `json:"Bit_rate,omitempty" xml:"Bit_rate,omitempty"`
	// The name of the encoding format.
	//
	// example:
	//
	// H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10
	CodecLongName *string `json:"Codec_long_name,omitempty" xml:"Codec_long_name,omitempty"`
	// The encoding format.
	//
	// example:
	//
	// h264
	CodecName *string `json:"Codec_name,omitempty" xml:"Codec_name,omitempty"`
	// The tag of the encoding format.
	//
	// example:
	//
	// 0x001b
	CodecTag *string `json:"Codec_tag,omitempty" xml:"Codec_tag,omitempty"`
	// The tag string of the encoding format.
	//
	// example:
	//
	// [27][0][0][0]
	CodecTagString *string `json:"Codec_tag_string,omitempty" xml:"Codec_tag_string,omitempty"`
	// The time base of the encoder.
	//
	// example:
	//
	// 1/50
	CodecTimeBase *string `json:"Codec_time_base,omitempty" xml:"Codec_time_base,omitempty"`
	// The display aspect ratio.
	//
	// example:
	//
	// 16:9
	Dar *string `json:"Dar,omitempty" xml:"Dar,omitempty"`
	// The duration of the file.
	//
	// example:
	//
	// 403.039989
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The frame rate.
	//
	// example:
	//
	// 25.0
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// Indicates whether the video stream contains bidirectional frames (B-frames). Valid values:
	//
	// 	- 0: The stream contains no B-frames.
	//
	// 	- 1: The stream contains one B-frame.
	//
	// 	- 2: The stream contains multiple consecutive B-frames.
	//
	// example:
	//
	// 2
	HasBFrames *string `json:"Has_b_frames,omitempty" xml:"Has_b_frames,omitempty"`
	// The height of the output video.
	//
	// example:
	//
	// 478
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The sequence number of the stream.
	//
	// example:
	//
	// 0
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// The language of the stream.
	//
	// example:
	//
	// zh
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The codec level.
	//
	// example:
	//
	// 31
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The total number of frames.
	//
	// example:
	//
	// 10040
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// The pixel format.
	//
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// The encoder profile.
	//
	// example:
	//
	// High
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// The rotation angle of the video image.
	//
	// example:
	//
	// 0
	Rotate *string `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	// The aspect ratio of the area from which the sampling points are collected.
	//
	// example:
	//
	// 478:477
	Sar *string `json:"Sar,omitempty" xml:"Sar,omitempty"`
	// The start time of the stream.
	//
	// example:
	//
	// 1.473556
	StartTime *string `json:"Start_time,omitempty" xml:"Start_time,omitempty"`
	// The time base.
	//
	// example:
	//
	// 1/90000
	TimeBase *string `json:"Time_base,omitempty" xml:"Time_base,omitempty"`
	// The width of the output video.
	//
	// example:
	//
	// 848
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetAvgFps(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.AvgFps = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetBitRate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.BitRate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecLongName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTag(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTagString(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTimeBase(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetDar(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Dar = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetDuration(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Duration = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetFps(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Fps = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetHasBFrames(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.HasBFrames = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetHeight(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Height = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetIndex(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Index = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetLang(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Lang = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetLevel(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Level = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetNumFrames(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetPixFmt(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.PixFmt = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetProfile(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Profile = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetRotate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Rotate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetSar(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Sar = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetStartTime(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetTimeBase(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.TimeBase = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetWidth(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Width = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig struct {
	// The ID of the ApsaraVideo Media Processing (MPS) queue that is used to run the job.
	//
	// example:
	//
	// e37ebee5d98b4781897f6086e89f9c56
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The priority of the job. Valid values: 1 to 10. The greater the value, the higher the priority.
	//
	// example:
	//
	// 5
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) SetPipelineId(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) SetPriority(v int32) *SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitMediaInfoJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitMediaInfoJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitMediaInfoJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponse) SetHeaders(v map[string]*string) *SubmitMediaInfoJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitMediaInfoJobResponse) SetStatusCode(v int32) *SubmitMediaInfoJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitMediaInfoJobResponse) SetBody(v *SubmitMediaInfoJobResponseBody) *SubmitMediaInfoJobResponse {
	s.Body = v
	return s
}

type SubmitMediaProducingJobRequest struct {
	// The client token that is used to ensure the idempotence of the request.
	//
	// example:
	//
	// ****12e8864746a0a398****
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The material parameters of the template, in the JSON format. If TemplateId is specified, ClipsParam must also be specified. For more information, see [Create and use a regular template](https://help.aliyun.com/document_detail/445399.html) and [Create and use advanced templates](https://help.aliyun.com/document_detail/445389.html).
	ClipsParam *string `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	// The parameters for editing and production. For more information, see [EditingProduceConfig](https://help.aliyun.com/document_detail/357745.html).
	//
	// >  If no thumbnail is specified in EditingProduceConfig, the first frame of the video is used as the thumbnail.
	//
	// 	- AutoRegisterInputVodMedia: specifies whether to automatically register the ApsaraVideo VOD media assets in your timeline with IMS. Default value: true.
	//
	// 	- OutputWebmTransparentChannel: specifies whether the output video contains alpha channels. Default value: false.
	//
	// 	- CoverConfig: the custom thumbnail parameters.
	//
	// *
	//
	// example:
	//
	// {
	//
	//       "AutoRegisterInputVodMedia": "true",
	//
	//       "OutputWebmTransparentChannel": "true"
	//
	// }
	EditingProduceConfig *string `json:"EditingProduceConfig,omitempty" xml:"EditingProduceConfig,omitempty"`
	// The metadata of the produced video, in the JSON format. For more information about the parameters, see [MediaMetadata](https://help.aliyun.com/document_detail/357745.html).
	//
	// example:
	//
	// {
	//
	//       "Title":"test-title",
	//
	//       "Tags":"test-tags1,tags2"
	//
	// }
	MediaMetadata *string `json:"MediaMetadata,omitempty" xml:"MediaMetadata,omitempty"`
	// The configurations of the output file, in the JSON format. You can specify an OSS URL or a storage location in a storage bucket of ApsaraVideo VOD.
	//
	// To store the output file in OSS, you must specify MediaURL. To store the output file in ApsaraVideo VOD, you must specify StorageLocation and FileName.
	//
	// For more information, see [OutputMediaConfig](https://help.aliyun.com/document_detail/357745.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// {"MediaURL":"https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4"}
	OutputMediaConfig *string `json:"OutputMediaConfig,omitempty" xml:"OutputMediaConfig,omitempty"`
	// The type of the output file. Valid values:
	//
	// 	- oss-object: OSS object in an OSS bucket.
	//
	// 	- vod-media: media asset in ApsaraVideo VOD.
	//
	// 	- S3: output file based on the Amazon Simple Storage Service (S3) protocol.
	//
	// example:
	//
	// oss-object
	OutputMediaTarget *string `json:"OutputMediaTarget,omitempty" xml:"OutputMediaTarget,omitempty"`
	// The ID of the editing project.
	//
	// > : You must specify one of ProgectId, Timeline, and TempalteId and leave the other two parameters empty.
	//
	// example:
	//
	// xxxxxfb2101cb318xxxxx
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The metadata of the editing project, in the JSON format. For more information about the parameters, see [ProjectMetadata](https://help.aliyun.com/document_detail/357745.html).
	ProjectMetadata *string `json:"ProjectMetadata,omitempty" xml:"ProjectMetadata,omitempty"`
	// The source of the editing and production request. Valid values:
	//
	// 	- OpenAPI
	//
	// 	- AliyunConsole
	//
	// 	- WebSDK
	//
	// example:
	//
	// OPENAPI
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The template ID. The template is used to build a timeline with ease.
	//
	// > : You must specify one of ProgectId, Timeline, and TempalteId and leave the other two parameters empty. If TemplateId is specified, ClipsParam must also be specified.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	Timeline   *string `json:"Timeline,omitempty" xml:"Timeline,omitempty"`
	// The user-defined data in the JSON format, which can be up to 512 bytes in length. You can specify a custom callback URL. For more information, see [Configure a callback upon editing completion](https://help.aliyun.com/document_detail/451631.html).
	//
	// example:
	//
	// {"NotifyAddress":"https://xx.com/xx","RegisterMediaNotifyAddress":"https://xxx.com/xx"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitMediaProducingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaProducingJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitMediaProducingJobRequest) SetClientToken(v string) *SubmitMediaProducingJobRequest {
	s.ClientToken = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetClipsParam(v string) *SubmitMediaProducingJobRequest {
	s.ClipsParam = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetEditingProduceConfig(v string) *SubmitMediaProducingJobRequest {
	s.EditingProduceConfig = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetMediaMetadata(v string) *SubmitMediaProducingJobRequest {
	s.MediaMetadata = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetOutputMediaConfig(v string) *SubmitMediaProducingJobRequest {
	s.OutputMediaConfig = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetOutputMediaTarget(v string) *SubmitMediaProducingJobRequest {
	s.OutputMediaTarget = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetProjectId(v string) *SubmitMediaProducingJobRequest {
	s.ProjectId = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetProjectMetadata(v string) *SubmitMediaProducingJobRequest {
	s.ProjectMetadata = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetSource(v string) *SubmitMediaProducingJobRequest {
	s.Source = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetTemplateId(v string) *SubmitMediaProducingJobRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetTimeline(v string) *SubmitMediaProducingJobRequest {
	s.Timeline = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetUserData(v string) *SubmitMediaProducingJobRequest {
	s.UserData = &v
	return s
}

type SubmitMediaProducingJobResponseBody struct {
	// The job ID.
	//
	// example:
	//
	// ****d80e4e4044975745c14b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The media asset ID of the output file.
	//
	// example:
	//
	// ****c469e944b5a856828dc2****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The ID of the editing project.
	//
	// example:
	//
	// ****b4549d46c88681030f6e****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ****36-3C1E-4417-BDB2-1E034F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The media asset ID of the output file in ApsaraVideo VOD if the output file is stored in ApsaraVideo VOD.
	//
	// example:
	//
	// ****d8s4h75ci975745c14b****
	VodMediaId *string `json:"VodMediaId,omitempty" xml:"VodMediaId,omitempty"`
}

func (s SubmitMediaProducingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaProducingJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitMediaProducingJobResponseBody) SetJobId(v string) *SubmitMediaProducingJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitMediaProducingJobResponseBody) SetMediaId(v string) *SubmitMediaProducingJobResponseBody {
	s.MediaId = &v
	return s
}

func (s *SubmitMediaProducingJobResponseBody) SetProjectId(v string) *SubmitMediaProducingJobResponseBody {
	s.ProjectId = &v
	return s
}

func (s *SubmitMediaProducingJobResponseBody) SetRequestId(v string) *SubmitMediaProducingJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitMediaProducingJobResponseBody) SetVodMediaId(v string) *SubmitMediaProducingJobResponseBody {
	s.VodMediaId = &v
	return s
}

type SubmitMediaProducingJobResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitMediaProducingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitMediaProducingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaProducingJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitMediaProducingJobResponse) SetHeaders(v map[string]*string) *SubmitMediaProducingJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitMediaProducingJobResponse) SetStatusCode(v int32) *SubmitMediaProducingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitMediaProducingJobResponse) SetBody(v *SubmitMediaProducingJobResponseBody) *SubmitMediaProducingJobResponse {
	s.Body = v
	return s
}

type SubmitPackageJobRequest struct {
	// The input of the job.
	//
	// This parameter is required.
	Inputs []*SubmitPackageJobRequestInputs `json:"Inputs,omitempty" xml:"Inputs,omitempty" type:"Repeated"`
	// The name of the job.
	//
	// example:
	//
	// job-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output of the job.
	//
	// This parameter is required.
	Output *SubmitPackageJobRequestOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// The scheduling settings.
	ScheduleConfig *SubmitPackageJobRequestScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// The user-defined data.
	//
	// example:
	//
	// {"param": "value"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitPackageJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitPackageJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitPackageJobRequest) SetInputs(v []*SubmitPackageJobRequestInputs) *SubmitPackageJobRequest {
	s.Inputs = v
	return s
}

func (s *SubmitPackageJobRequest) SetName(v string) *SubmitPackageJobRequest {
	s.Name = &v
	return s
}

func (s *SubmitPackageJobRequest) SetOutput(v *SubmitPackageJobRequestOutput) *SubmitPackageJobRequest {
	s.Output = v
	return s
}

func (s *SubmitPackageJobRequest) SetScheduleConfig(v *SubmitPackageJobRequestScheduleConfig) *SubmitPackageJobRequest {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitPackageJobRequest) SetUserData(v string) *SubmitPackageJobRequest {
	s.UserData = &v
	return s
}

type SubmitPackageJobRequestInputs struct {
	// The information about the input stream file.
	//
	// This parameter is required.
	Input *SubmitPackageJobRequestInputsInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
}

func (s SubmitPackageJobRequestInputs) String() string {
	return tea.Prettify(s)
}

func (s SubmitPackageJobRequestInputs) GoString() string {
	return s.String()
}

func (s *SubmitPackageJobRequestInputs) SetInput(v *SubmitPackageJobRequestInputsInput) *SubmitPackageJobRequestInputs {
	s.Input = v
	return s
}

type SubmitPackageJobRequestInputsInput struct {
	// The media object.
	//
	// 	- If Type is set to OSS, set this parameter to the URL of an OSS object. Both the OSS and HTTP protocols are supported.
	//
	// 	- If Type is set to Media, set this parameter to the ID of a media asset.
	//
	// This parameter is required.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an Object Storage Service (OSS) object.
	//
	// 	- Media: a media asset.
	//
	// This parameter is required.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitPackageJobRequestInputsInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitPackageJobRequestInputsInput) GoString() string {
	return s.String()
}

func (s *SubmitPackageJobRequestInputsInput) SetMedia(v string) *SubmitPackageJobRequestInputsInput {
	s.Media = &v
	return s
}

func (s *SubmitPackageJobRequestInputsInput) SetType(v string) *SubmitPackageJobRequestInputsInput {
	s.Type = &v
	return s
}

type SubmitPackageJobRequestOutput struct {
	// The media object. If Type is set to OSS, set this parameter to the URL of an OSS object. Both the OSS and HTTP protocols are supported. If Type is set to Media, set this parameter to the ID of a media asset.
	//
	// This parameter is required.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an OSS object.
	//
	// 	- Media: a media asset.
	//
	// This parameter is required.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitPackageJobRequestOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitPackageJobRequestOutput) GoString() string {
	return s.String()
}

func (s *SubmitPackageJobRequestOutput) SetMedia(v string) *SubmitPackageJobRequestOutput {
	s.Media = &v
	return s
}

func (s *SubmitPackageJobRequestOutput) SetType(v string) *SubmitPackageJobRequestOutput {
	s.Type = &v
	return s
}

type SubmitPackageJobRequestScheduleConfig struct {
	// The ID of the MPS queue to which the job was submitted.
	//
	// example:
	//
	// e37ebee5d98b4781897f6086e89f9c56
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The priority of the job. Valid values: 1 to 10. The greater the value, the higher the priority.
	//
	// example:
	//
	// 5
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitPackageJobRequestScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitPackageJobRequestScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitPackageJobRequestScheduleConfig) SetPipelineId(v string) *SubmitPackageJobRequestScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitPackageJobRequestScheduleConfig) SetPriority(v int32) *SubmitPackageJobRequestScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitPackageJobShrinkRequest struct {
	// The input of the job.
	//
	// This parameter is required.
	InputsShrink *string `json:"Inputs,omitempty" xml:"Inputs,omitempty"`
	// The name of the job.
	//
	// example:
	//
	// job-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output of the job.
	//
	// This parameter is required.
	OutputShrink *string `json:"Output,omitempty" xml:"Output,omitempty"`
	// The scheduling settings.
	ScheduleConfigShrink *string `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty"`
	// The user-defined data.
	//
	// example:
	//
	// {"param": "value"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitPackageJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitPackageJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitPackageJobShrinkRequest) SetInputsShrink(v string) *SubmitPackageJobShrinkRequest {
	s.InputsShrink = &v
	return s
}

func (s *SubmitPackageJobShrinkRequest) SetName(v string) *SubmitPackageJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *SubmitPackageJobShrinkRequest) SetOutputShrink(v string) *SubmitPackageJobShrinkRequest {
	s.OutputShrink = &v
	return s
}

func (s *SubmitPackageJobShrinkRequest) SetScheduleConfigShrink(v string) *SubmitPackageJobShrinkRequest {
	s.ScheduleConfigShrink = &v
	return s
}

func (s *SubmitPackageJobShrinkRequest) SetUserData(v string) *SubmitPackageJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitPackageJobResponseBody struct {
	// The job ID.
	//
	// example:
	//
	// 2d705f385b704ee5b*******a36d93e0
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitPackageJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitPackageJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitPackageJobResponseBody) SetJobId(v string) *SubmitPackageJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitPackageJobResponseBody) SetRequestId(v string) *SubmitPackageJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitPackageJobResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitPackageJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitPackageJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitPackageJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitPackageJobResponse) SetHeaders(v map[string]*string) *SubmitPackageJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitPackageJobResponse) SetStatusCode(v int32) *SubmitPackageJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitPackageJobResponse) SetBody(v *SubmitPackageJobResponseBody) *SubmitPackageJobResponse {
	s.Body = v
	return s
}

type SubmitProjectExportJobRequest struct {
	// example:
	//
	// BaseTimeline
	ExportType *string `json:"ExportType,omitempty" xml:"ExportType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {
	//
	// 	"Bucket": "example-bucket",
	//
	//     "Prefix": "example_prefix"
	//
	// }
	OutputMediaConfig *string `json:"OutputMediaConfig,omitempty" xml:"OutputMediaConfig,omitempty"`
	// example:
	//
	// *****67ae06542b9b93e0d1c387*****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// {"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****4d7cf14dc7b83b0e801c****"},{"MediaId":"****4d7cf14dc7b83b0e801c****"}]}]}
	Timeline *string `json:"Timeline,omitempty" xml:"Timeline,omitempty"`
	// example:
	//
	// {"NotifyAddress":"http://xx.xx.xxx","Key":"Valuexxx"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitProjectExportJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitProjectExportJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitProjectExportJobRequest) SetExportType(v string) *SubmitProjectExportJobRequest {
	s.ExportType = &v
	return s
}

func (s *SubmitProjectExportJobRequest) SetOutputMediaConfig(v string) *SubmitProjectExportJobRequest {
	s.OutputMediaConfig = &v
	return s
}

func (s *SubmitProjectExportJobRequest) SetProjectId(v string) *SubmitProjectExportJobRequest {
	s.ProjectId = &v
	return s
}

func (s *SubmitProjectExportJobRequest) SetTimeline(v string) *SubmitProjectExportJobRequest {
	s.Timeline = &v
	return s
}

func (s *SubmitProjectExportJobRequest) SetUserData(v string) *SubmitProjectExportJobRequest {
	s.UserData = &v
	return s
}

type SubmitProjectExportJobResponseBody struct {
	// example:
	//
	// ****cdb3e74639973036bc84****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitProjectExportJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitProjectExportJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitProjectExportJobResponseBody) SetJobId(v string) *SubmitProjectExportJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitProjectExportJobResponseBody) SetRequestId(v string) *SubmitProjectExportJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitProjectExportJobResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitProjectExportJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitProjectExportJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitProjectExportJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitProjectExportJobResponse) SetHeaders(v map[string]*string) *SubmitProjectExportJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitProjectExportJobResponse) SetStatusCode(v int32) *SubmitProjectExportJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitProjectExportJobResponse) SetBody(v *SubmitProjectExportJobResponseBody) *SubmitProjectExportJobResponse {
	s.Body = v
	return s
}

type SubmitScreenMediaHighlightsJobRequest struct {
	// The editing configuration. For detailed parameters, see [EditingConfig](~~2863940#9b05519d46e0x~~).
	//
	// example:
	//
	// {
	//
	// 	"MediaConfig": {
	//
	// 		"Volume": 1
	//
	// 	},
	//
	// 	"ProcessConfig": {
	//
	// 		"AllowTransition": true,
	//
	// 		"TransitionList": ["fadecolor"]
	//
	// 	}
	//
	// }
	EditingConfig *string `json:"EditingConfig,omitempty" xml:"EditingConfig,omitempty"`
	// The input configuration. For detailed parameters, see [InputConfig](~~2863940#dda38bf6ec2pk~~).
	//
	// example:
	//
	// {
	//
	// 	"MediaArray": [
	//
	// 		"****9d46c886b45481030f6e****",
	//
	// 		"****6c886b4549d481030f6e****"
	//
	// 	]
	//
	// }
	InputConfig *string `json:"InputConfig,omitempty" xml:"InputConfig,omitempty"`
	// The output configuration. For detailed parameters, see [OutputConfig](~~2863940#4111a373d0xbz~~).
	//
	// example:
	//
	// {
	//
	//   "MediaURL": "http://xxx.oss-cn-shanghai.aliyuncs.com/xxx_{index}.mp4",
	//
	//   "Count": 1,
	//
	//   "Width": 1080,
	//
	//   "Height": 1920
	//
	// }
	OutputConfig *string `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	// The user-defined data, including the business and callback configurations. For more information, see [UserData](https://help.aliyun.com/document_detail/357745.html).
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitScreenMediaHighlightsJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitScreenMediaHighlightsJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitScreenMediaHighlightsJobRequest) SetEditingConfig(v string) *SubmitScreenMediaHighlightsJobRequest {
	s.EditingConfig = &v
	return s
}

func (s *SubmitScreenMediaHighlightsJobRequest) SetInputConfig(v string) *SubmitScreenMediaHighlightsJobRequest {
	s.InputConfig = &v
	return s
}

func (s *SubmitScreenMediaHighlightsJobRequest) SetOutputConfig(v string) *SubmitScreenMediaHighlightsJobRequest {
	s.OutputConfig = &v
	return s
}

func (s *SubmitScreenMediaHighlightsJobRequest) SetUserData(v string) *SubmitScreenMediaHighlightsJobRequest {
	s.UserData = &v
	return s
}

type SubmitScreenMediaHighlightsJobResponseBody struct {
	// The ID of the task.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ****36-3C1E-4417-BDB2-1E034F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitScreenMediaHighlightsJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitScreenMediaHighlightsJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitScreenMediaHighlightsJobResponseBody) SetJobId(v string) *SubmitScreenMediaHighlightsJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitScreenMediaHighlightsJobResponseBody) SetRequestId(v string) *SubmitScreenMediaHighlightsJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitScreenMediaHighlightsJobResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitScreenMediaHighlightsJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitScreenMediaHighlightsJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitScreenMediaHighlightsJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitScreenMediaHighlightsJobResponse) SetHeaders(v map[string]*string) *SubmitScreenMediaHighlightsJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitScreenMediaHighlightsJobResponse) SetStatusCode(v int32) *SubmitScreenMediaHighlightsJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitScreenMediaHighlightsJobResponse) SetBody(v *SubmitScreenMediaHighlightsJobResponseBody) *SubmitScreenMediaHighlightsJobResponse {
	s.Body = v
	return s
}

type SubmitSegmentationJobRequest struct {
	// example:
	//
	// ****12e8864746a0a398****
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	InputConfig *string `json:"InputConfig,omitempty" xml:"InputConfig,omitempty"`
	// example:
	//
	// {
	//
	// 	"Mode": "UserDefined",
	//
	// 	"Ranges": [{
	//
	// 		"In": 10,
	//
	// 		"Out": 20
	//
	// 	}, {
	//
	// 		"In": 35,
	//
	// 		"Out": 50
	//
	// 	}]
	//
	// }
	JobParams *string `json:"JobParams,omitempty" xml:"JobParams,omitempty"`
	// example:
	//
	// {
	//
	// 	"OutputMediaTarget": "oss-object",
	//
	// 	"Bucket": "test-bucket",
	//
	// 	"ObjectKey": "path/to/test_{index}.mp4",
	//
	// 	"Width": 1920,
	//
	// 	"Height": 1080,
	//
	// 	"ExportAsNewMedia": false
	//
	// }
	OutputConfig *string `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	UserData     *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitSegmentationJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSegmentationJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitSegmentationJobRequest) SetClientToken(v string) *SubmitSegmentationJobRequest {
	s.ClientToken = &v
	return s
}

func (s *SubmitSegmentationJobRequest) SetInputConfig(v string) *SubmitSegmentationJobRequest {
	s.InputConfig = &v
	return s
}

func (s *SubmitSegmentationJobRequest) SetJobParams(v string) *SubmitSegmentationJobRequest {
	s.JobParams = &v
	return s
}

func (s *SubmitSegmentationJobRequest) SetOutputConfig(v string) *SubmitSegmentationJobRequest {
	s.OutputConfig = &v
	return s
}

func (s *SubmitSegmentationJobRequest) SetUserData(v string) *SubmitSegmentationJobRequest {
	s.UserData = &v
	return s
}

type SubmitSegmentationJobResponseBody struct {
	// example:
	//
	// ****cdb3e74639973036bc84****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitSegmentationJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitSegmentationJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitSegmentationJobResponseBody) SetJobId(v string) *SubmitSegmentationJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitSegmentationJobResponseBody) SetRequestId(v string) *SubmitSegmentationJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitSegmentationJobResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitSegmentationJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitSegmentationJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitSegmentationJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitSegmentationJobResponse) SetHeaders(v map[string]*string) *SubmitSegmentationJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitSegmentationJobResponse) SetStatusCode(v int32) *SubmitSegmentationJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitSegmentationJobResponse) SetBody(v *SubmitSegmentationJobResponseBody) *SubmitSegmentationJobResponse {
	s.Body = v
	return s
}

type SubmitSmarttagJobRequest struct {
	// The video description. The description can contain letters, digits, and hyphens (-) and cannot start with a special character. The description can be up to 1 KB in length.
	//
	// example:
	//
	// example content ****
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// This parameter is discontinued.
	//
	// example:
	//
	// http://123.com/testVideo.mp4
	ContentAddr *string `json:"ContentAddr,omitempty" xml:"ContentAddr,omitempty"`
	// This parameter is discontinued.
	//
	// example:
	//
	// application/zip
	ContentType *string `json:"ContentType,omitempty" xml:"ContentType,omitempty"`
	// The job input.
	Input *SubmitSmarttagJobRequestInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// The URL for receiving callbacks. Set the value to an HTTP URL or an HTTPS URL.
	//
	// example:
	//
	// https://example.com/endpoint/aliyun/ai?id=76401125000***
	NotifyUrl *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	// The additional request parameters. The value is a JSON string. Example: {"needAsrData":true, "needOcrData":false}. The following parameters are supported:
	//
	// 	- needAsrData: specifies whether to query the automatic speech recognition (ASR) data. The value is of the BOOLEAN type. Default value: false. Valid values: true and false.
	//
	// 	- needOcrData: specifies whether to query the optical character recognition (OCR) data. The value is of the BOOLEAN type. Default value: false. Valid values: true and false.
	//
	// 	- needMetaData: specifies whether to query the metadata. The value is of the BOOLEAN type. Default value: false. Valid values: true and false.
	//
	// 	- nlpParams: the input parameters of the natural language processing (NLP) operator. The value is a JSON object. This parameter is empty by default, which indicates that the NLP operator is not used. For more information, see the "nlpParams" section of this topic.
	//
	// example:
	//
	// {"needAsrData":true, "needOcrData":false}
	Params *string `json:"Params,omitempty" xml:"Params,omitempty"`
	// The scheduling configurations.
	ScheduleConfig *SubmitSmarttagJobRequestScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// The ID of the template that specifies the analysis algorithms. For more information about template operations, see [Configure templates](https://help.aliyun.com/document_detail/445702.html).
	//
	// example:
	//
	// 39f8e0bc005e4f309379701645f4
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The video title. The title can contain letters, digits, and hyphens (-) and cannot start with a special character. The title can be up to 256 bytes in length.
	//
	// example:
	//
	// example-title-****
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// The data to be passed through Simple Message Queue (SMQ, formerly MNS) during callbacks. The data can be up to 1 KB in length. For more information about how to specify an SMQ queue for receiving callbacks, see UpdatePipeline.
	//
	// example:
	//
	// {“a”:"test"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitSmarttagJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmarttagJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitSmarttagJobRequest) SetContent(v string) *SubmitSmarttagJobRequest {
	s.Content = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetContentAddr(v string) *SubmitSmarttagJobRequest {
	s.ContentAddr = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetContentType(v string) *SubmitSmarttagJobRequest {
	s.ContentType = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetInput(v *SubmitSmarttagJobRequestInput) *SubmitSmarttagJobRequest {
	s.Input = v
	return s
}

func (s *SubmitSmarttagJobRequest) SetNotifyUrl(v string) *SubmitSmarttagJobRequest {
	s.NotifyUrl = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetParams(v string) *SubmitSmarttagJobRequest {
	s.Params = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetScheduleConfig(v *SubmitSmarttagJobRequestScheduleConfig) *SubmitSmarttagJobRequest {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitSmarttagJobRequest) SetTemplateId(v string) *SubmitSmarttagJobRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetTitle(v string) *SubmitSmarttagJobRequest {
	s.Title = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetUserData(v string) *SubmitSmarttagJobRequest {
	s.UserData = &v
	return s
}

type SubmitSmarttagJobRequestInput struct {
	// If Type is set to OSS, specify an OSS path. Example: OSS://test-bucket/video/202208/test.mp4.
	//
	// If Type is set to Media, specify a media asset ID. Example: c5c62d8f0361337cab312dce8e77dc6d.
	//
	// If Type is set to URL, specify an HTTP URL. Example: https://zc-test.oss-cn-shanghai.aliyuncs.com/test/unknowFace.mp4.
	//
	// example:
	//
	// c5c62d8f0361337cab312dce8e77dc6d
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The media type. Valid values:
	//
	// 	- OSS
	//
	// 	- Media
	//
	// 	- URL
	//
	// example:
	//
	// Media
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitSmarttagJobRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmarttagJobRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitSmarttagJobRequestInput) SetMedia(v string) *SubmitSmarttagJobRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitSmarttagJobRequestInput) SetType(v string) *SubmitSmarttagJobRequestInput {
	s.Type = &v
	return s
}

type SubmitSmarttagJobRequestScheduleConfig struct {
	// The ID of the ApsaraVideo Media Processing (MPS) queue to which you want to submit the smart tagging job. The MPS queue is bound to an SMQ queue. This parameter specifies the default MPS queue. By default, an MPS queue can process a maximum of two concurrent smart tagging jobs. To increase the limit, submit a ticket.
	//
	// example:
	//
	// acdbfe4323bcfdae
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The job priority. This parameter is not implemented. You can leave this parameter empty or enter a random value.
	//
	// example:
	//
	// 4
	Priority *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitSmarttagJobRequestScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmarttagJobRequestScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitSmarttagJobRequestScheduleConfig) SetPipelineId(v string) *SubmitSmarttagJobRequestScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitSmarttagJobRequestScheduleConfig) SetPriority(v string) *SubmitSmarttagJobRequestScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitSmarttagJobShrinkRequest struct {
	// The video description. The description can contain letters, digits, and hyphens (-) and cannot start with a special character. The description can be up to 1 KB in length.
	//
	// example:
	//
	// example content ****
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// This parameter is discontinued.
	//
	// example:
	//
	// http://123.com/testVideo.mp4
	ContentAddr *string `json:"ContentAddr,omitempty" xml:"ContentAddr,omitempty"`
	// This parameter is discontinued.
	//
	// example:
	//
	// application/zip
	ContentType *string `json:"ContentType,omitempty" xml:"ContentType,omitempty"`
	// The job input.
	InputShrink *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// The URL for receiving callbacks. Set the value to an HTTP URL or an HTTPS URL.
	//
	// example:
	//
	// https://example.com/endpoint/aliyun/ai?id=76401125000***
	NotifyUrl *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	// The additional request parameters. The value is a JSON string. Example: {"needAsrData":true, "needOcrData":false}. The following parameters are supported:
	//
	// 	- needAsrData: specifies whether to query the automatic speech recognition (ASR) data. The value is of the BOOLEAN type. Default value: false. Valid values: true and false.
	//
	// 	- needOcrData: specifies whether to query the optical character recognition (OCR) data. The value is of the BOOLEAN type. Default value: false. Valid values: true and false.
	//
	// 	- needMetaData: specifies whether to query the metadata. The value is of the BOOLEAN type. Default value: false. Valid values: true and false.
	//
	// 	- nlpParams: the input parameters of the natural language processing (NLP) operator. The value is a JSON object. This parameter is empty by default, which indicates that the NLP operator is not used. For more information, see the "nlpParams" section of this topic.
	//
	// example:
	//
	// {"needAsrData":true, "needOcrData":false}
	Params *string `json:"Params,omitempty" xml:"Params,omitempty"`
	// The scheduling configurations.
	ScheduleConfigShrink *string `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty"`
	// The ID of the template that specifies the analysis algorithms. For more information about template operations, see [Configure templates](https://help.aliyun.com/document_detail/445702.html).
	//
	// example:
	//
	// 39f8e0bc005e4f309379701645f4
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The video title. The title can contain letters, digits, and hyphens (-) and cannot start with a special character. The title can be up to 256 bytes in length.
	//
	// example:
	//
	// example-title-****
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// The data to be passed through Simple Message Queue (SMQ, formerly MNS) during callbacks. The data can be up to 1 KB in length. For more information about how to specify an SMQ queue for receiving callbacks, see UpdatePipeline.
	//
	// example:
	//
	// {“a”:"test"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitSmarttagJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmarttagJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitSmarttagJobShrinkRequest) SetContent(v string) *SubmitSmarttagJobShrinkRequest {
	s.Content = &v
	return s
}

func (s *SubmitSmarttagJobShrinkRequest) SetContentAddr(v string) *SubmitSmarttagJobShrinkRequest {
	s.ContentAddr = &v
	return s
}

func (s *SubmitSmarttagJobShrinkRequest) SetContentType(v string) *SubmitSmarttagJobShrinkRequest {
	s.ContentType = &v
	return s
}

func (s *SubmitSmarttagJobShrinkRequest) SetInputShrink(v string) *SubmitSmarttagJobShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitSmarttagJobShrinkRequest) SetNotifyUrl(v string) *SubmitSmarttagJobShrinkRequest {
	s.NotifyUrl = &v
	return s
}

func (s *SubmitSmarttagJobShrinkRequest) SetParams(v string) *SubmitSmarttagJobShrinkRequest {
	s.Params = &v
	return s
}

func (s *SubmitSmarttagJobShrinkRequest) SetScheduleConfigShrink(v string) *SubmitSmarttagJobShrinkRequest {
	s.ScheduleConfigShrink = &v
	return s
}

func (s *SubmitSmarttagJobShrinkRequest) SetTemplateId(v string) *SubmitSmarttagJobShrinkRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitSmarttagJobShrinkRequest) SetTitle(v string) *SubmitSmarttagJobShrinkRequest {
	s.Title = &v
	return s
}

func (s *SubmitSmarttagJobShrinkRequest) SetUserData(v string) *SubmitSmarttagJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitSmarttagJobResponseBody struct {
	// The ID of the smart tagging job. We recommend that you save this ID for subsequent calls of other operations.
	//
	// example:
	//
	// ****d80e4e4044975745c14b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitSmarttagJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmarttagJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitSmarttagJobResponseBody) SetJobId(v string) *SubmitSmarttagJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitSmarttagJobResponseBody) SetRequestId(v string) *SubmitSmarttagJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitSmarttagJobResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitSmarttagJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitSmarttagJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmarttagJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitSmarttagJobResponse) SetHeaders(v map[string]*string) *SubmitSmarttagJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitSmarttagJobResponse) SetStatusCode(v int32) *SubmitSmarttagJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitSmarttagJobResponse) SetBody(v *SubmitSmarttagJobResponseBody) *SubmitSmarttagJobResponse {
	s.Body = v
	return s
}

type SubmitSnapshotJobRequest struct {
	// The snapshot input.
	//
	// This parameter is required.
	Input *SubmitSnapshotJobRequestInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// The name of the job.
	//
	// example:
	//
	// SampleJob
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The snapshot output.
	//
	// This parameter is required.
	Output *SubmitSnapshotJobRequestOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// The scheduling settings.
	ScheduleConfig *SubmitSnapshotJobRequestScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// The snapshot template configuration.
	//
	// This parameter is required.
	TemplateConfig *SubmitSnapshotJobRequestTemplateConfig `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty" type:"Struct"`
	// The user-defined data.
	//
	// example:
	//
	// {"test parameter": "test value"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitSnapshotJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobRequest) SetInput(v *SubmitSnapshotJobRequestInput) *SubmitSnapshotJobRequest {
	s.Input = v
	return s
}

func (s *SubmitSnapshotJobRequest) SetName(v string) *SubmitSnapshotJobRequest {
	s.Name = &v
	return s
}

func (s *SubmitSnapshotJobRequest) SetOutput(v *SubmitSnapshotJobRequestOutput) *SubmitSnapshotJobRequest {
	s.Output = v
	return s
}

func (s *SubmitSnapshotJobRequest) SetScheduleConfig(v *SubmitSnapshotJobRequestScheduleConfig) *SubmitSnapshotJobRequest {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitSnapshotJobRequest) SetTemplateConfig(v *SubmitSnapshotJobRequestTemplateConfig) *SubmitSnapshotJobRequest {
	s.TemplateConfig = v
	return s
}

func (s *SubmitSnapshotJobRequest) SetUserData(v string) *SubmitSnapshotJobRequest {
	s.UserData = &v
	return s
}

type SubmitSnapshotJobRequestInput struct {
	// The input file. If Type is set to OSS, the URL of an OSS object is returned. If Type is set to Media, the ID of a media asset is returned. The URL of an OSS object can be in one of the following formats:
	//
	// 1.  oss://bucket/object
	//
	// 2.  http(s)://bucket.oss-[RegionId].aliyuncs.com/object In the URL, bucket specifies an OSS bucket that resides in the same region as the job, and object specifies the object URL in OSS.
	//
	// >  Before you use the OSS bucket in the URL, you must add the bucket on the [Storage Management](https://help.aliyun.com/document_detail/609918.html) page of the Intelligent Media Services (IMS) console.
	//
	// This parameter is required.
	//
	// example:
	//
	// oss://bucket/object.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the input file. Valid values:
	//
	// 1.  OSS: an Object Storage Service (OSS) object.
	//
	// 2.  Media: a media asset.
	//
	// This parameter is required.
	//
	// example:
	//
	// Media
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitSnapshotJobRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobRequestInput) SetMedia(v string) *SubmitSnapshotJobRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitSnapshotJobRequestInput) SetType(v string) *SubmitSnapshotJobRequestInput {
	s.Type = &v
	return s
}

type SubmitSnapshotJobRequestOutput struct {
	// The output file. If Type is set to OSS, the URL of an OSS object is returned. If Type is set to Media, the ID of a media asset is returned. The URL of an OSS object can be in one of the following formats:
	//
	// 1.  oss://bucket/object
	//
	// 2.  http(s)://bucket.oss-[RegionId].aliyuncs.com/object
	//
	// In the URL, bucket specifies an OSS bucket that resides in the same region as the job, and object specifies the object URL in OSS. If multiple static snapshots were captured, the object must contain the "{Count}" placeholder. In the case of a sprite, the object must contain the "{TileCount}" placeholder. The suffix of the WebVTT snapshot objects must be ".vtt".
	//
	// >  Before you use the OSS bucket in the URL, you must add the bucket on the [Storage Management](https://help.aliyun.com/document_detail/609918.html) page of the IMS console.
	//
	// This parameter is required.
	//
	// example:
	//
	// oss://test-bucket/output-{Count}.jpg
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the output file. Valid values:
	//
	// 1.  OSS: an OSS object.
	//
	// 2.  Media: a media asset.
	//
	// This parameter is required.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitSnapshotJobRequestOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobRequestOutput) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobRequestOutput) SetMedia(v string) *SubmitSnapshotJobRequestOutput {
	s.Media = &v
	return s
}

func (s *SubmitSnapshotJobRequestOutput) SetType(v string) *SubmitSnapshotJobRequestOutput {
	s.Type = &v
	return s
}

type SubmitSnapshotJobRequestScheduleConfig struct {
	// The ID of the ApsaraVideo Media Processing (MPS) queue that is used to run the job.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
}

func (s SubmitSnapshotJobRequestScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobRequestScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobRequestScheduleConfig) SetPipelineId(v string) *SubmitSnapshotJobRequestScheduleConfig {
	s.PipelineId = &v
	return s
}

type SubmitSnapshotJobRequestTemplateConfig struct {
	// The parameters that are used to overwrite the corresponding parameters.
	OverwriteParams *SubmitSnapshotJobRequestTemplateConfigOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// The template ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitSnapshotJobRequestTemplateConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobRequestTemplateConfig) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobRequestTemplateConfig) SetOverwriteParams(v *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) *SubmitSnapshotJobRequestTemplateConfig {
	s.OverwriteParams = v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfig) SetTemplateId(v string) *SubmitSnapshotJobRequestTemplateConfig {
	s.TemplateId = &v
	return s
}

type SubmitSnapshotJobRequestTemplateConfigOverwriteParams struct {
	// The threshold that is used to filter out black frames for the first snapshot to be captured. This feature is available if you request the system to capture multiple snapshots.
	//
	// example:
	//
	// 30
	BlackLevel *int32 `json:"BlackLevel,omitempty" xml:"BlackLevel,omitempty"`
	// The number of snapshots.
	//
	// example:
	//
	// 5
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The type of the frame.
	//
	// example:
	//
	// intra
	FrameType *string `json:"FrameType,omitempty" xml:"FrameType,omitempty"`
	// The height of a captured snapshot.
	//
	// example:
	//
	// 480
	Height *int32 `json:"Height,omitempty" xml:"Height,omitempty"`
	// The interval at which snapshots are captured.
	//
	// example:
	//
	// 10
	Interval *int64 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// The WebVTT snapshot configuration that specifies whether to merge the output snapshots.
	//
	// example:
	//
	// true
	IsSptFrag *bool `json:"IsSptFrag,omitempty" xml:"IsSptFrag,omitempty"`
	// The color value threshold that determines whether a pixel is black.
	//
	// example:
	//
	// 70
	PixelBlackThreshold *int32 `json:"PixelBlackThreshold,omitempty" xml:"PixelBlackThreshold,omitempty"`
	// The configuration of the sprite snapshot.
	SpriteSnapshotConfig *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig `json:"SpriteSnapshotConfig,omitempty" xml:"SpriteSnapshotConfig,omitempty" type:"Struct"`
	// The point in time at which the system starts to capture snapshots in the input video.
	//
	// example:
	//
	// 1000
	Time *int64 `json:"Time,omitempty" xml:"Time,omitempty"`
	// The snapshot type. Valid values:
	//
	// example:
	//
	// Sprite
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The width of a captured snapshot.
	//
	// example:
	//
	// 720
	Width *int32 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitSnapshotJobRequestTemplateConfigOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobRequestTemplateConfigOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetBlackLevel(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.BlackLevel = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetCount(v int64) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.Count = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetFrameType(v string) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.FrameType = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetHeight(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.Height = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetInterval(v int64) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.Interval = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetIsSptFrag(v bool) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.IsSptFrag = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetPixelBlackThreshold(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.PixelBlackThreshold = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetSpriteSnapshotConfig(v *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.SpriteSnapshotConfig = v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetTime(v int64) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.Time = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetType(v string) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.Type = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetWidth(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.Width = &v
	return s
}

type SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig struct {
	// The height of a single snapshot before tiling. The default value is the height of the output snapshot.
	//
	// example:
	//
	// 480
	CellHeight *int32 `json:"CellHeight,omitempty" xml:"CellHeight,omitempty"`
	// The width of a single snapshot before tiling. The default value is the width of the output snapshot.
	//
	// example:
	//
	// 720
	CellWidth *int32 `json:"CellWidth,omitempty" xml:"CellWidth,omitempty"`
	// The background color.
	//
	// example:
	//
	// #000000
	Color *string `json:"Color,omitempty" xml:"Color,omitempty"`
	// The number of columns that the image sprite contains.
	//
	// example:
	//
	// 20
	Columns *int32 `json:"Columns,omitempty" xml:"Columns,omitempty"`
	// The number of rows that the image sprite contains.
	//
	// example:
	//
	// 20
	Lines *int32 `json:"Lines,omitempty" xml:"Lines,omitempty"`
	// The width of the frame. Default value: 0. Unit: pixels.
	//
	// example:
	//
	// 20
	Margin *int32 `json:"Margin,omitempty" xml:"Margin,omitempty"`
	// The spacing between two adjacent snapshots. Default value: 0. Unit: pixels.
	//
	// example:
	//
	// 20
	Padding *int32 `json:"Padding,omitempty" xml:"Padding,omitempty"`
}

func (s SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) SetCellHeight(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig {
	s.CellHeight = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) SetCellWidth(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig {
	s.CellWidth = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) SetColor(v string) *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig {
	s.Color = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) SetColumns(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig {
	s.Columns = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) SetLines(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig {
	s.Lines = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) SetMargin(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig {
	s.Margin = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) SetPadding(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig {
	s.Padding = &v
	return s
}

type SubmitSnapshotJobShrinkRequest struct {
	// The snapshot input.
	//
	// This parameter is required.
	InputShrink *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// The name of the job.
	//
	// example:
	//
	// SampleJob
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The snapshot output.
	//
	// This parameter is required.
	OutputShrink *string `json:"Output,omitempty" xml:"Output,omitempty"`
	// The scheduling settings.
	ScheduleConfigShrink *string `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty"`
	// The snapshot template configuration.
	//
	// This parameter is required.
	TemplateConfigShrink *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// The user-defined data.
	//
	// example:
	//
	// {"test parameter": "test value"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitSnapshotJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobShrinkRequest) SetInputShrink(v string) *SubmitSnapshotJobShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitSnapshotJobShrinkRequest) SetName(v string) *SubmitSnapshotJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *SubmitSnapshotJobShrinkRequest) SetOutputShrink(v string) *SubmitSnapshotJobShrinkRequest {
	s.OutputShrink = &v
	return s
}

func (s *SubmitSnapshotJobShrinkRequest) SetScheduleConfigShrink(v string) *SubmitSnapshotJobShrinkRequest {
	s.ScheduleConfigShrink = &v
	return s
}

func (s *SubmitSnapshotJobShrinkRequest) SetTemplateConfigShrink(v string) *SubmitSnapshotJobShrinkRequest {
	s.TemplateConfigShrink = &v
	return s
}

func (s *SubmitSnapshotJobShrinkRequest) SetUserData(v string) *SubmitSnapshotJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitSnapshotJobResponseBody struct {
	// The job ID.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitSnapshotJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobResponseBody) SetJobId(v string) *SubmitSnapshotJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitSnapshotJobResponseBody) SetRequestId(v string) *SubmitSnapshotJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitSnapshotJobResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitSnapshotJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitSnapshotJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobResponse) SetHeaders(v map[string]*string) *SubmitSnapshotJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitSnapshotJobResponse) SetStatusCode(v int32) *SubmitSnapshotJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitSnapshotJobResponse) SetBody(v *SubmitSnapshotJobResponseBody) *SubmitSnapshotJobResponse {
	s.Body = v
	return s
}

type SubmitSportsHighlightsJobRequest struct {
	// The client token that is used to ensure the idempotence of the request.
	//
	// example:
	//
	// ****12e8864746a0a398****
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The input configurations.
	InputConfig *string `json:"InputConfig,omitempty" xml:"InputConfig,omitempty"`
	// The output configurations.
	//
	// example:
	//
	// {
	//
	//   "MediaURL": "http://xxx.oss-cn-shanghai.aliyuncs.com/xxx_{index}.mp4",
	//
	//   "Count": 1,
	//
	//   "Width": 1080,
	//
	//   "Height": 1920
	//
	// }
	OutputConfig *string `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	// The user-defined data.
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitSportsHighlightsJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSportsHighlightsJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitSportsHighlightsJobRequest) SetClientToken(v string) *SubmitSportsHighlightsJobRequest {
	s.ClientToken = &v
	return s
}

func (s *SubmitSportsHighlightsJobRequest) SetInputConfig(v string) *SubmitSportsHighlightsJobRequest {
	s.InputConfig = &v
	return s
}

func (s *SubmitSportsHighlightsJobRequest) SetOutputConfig(v string) *SubmitSportsHighlightsJobRequest {
	s.OutputConfig = &v
	return s
}

func (s *SubmitSportsHighlightsJobRequest) SetUserData(v string) *SubmitSportsHighlightsJobRequest {
	s.UserData = &v
	return s
}

type SubmitSportsHighlightsJobResponseBody struct {
	// The ID of the sports highlights job.
	//
	// example:
	//
	// ****d80e4e4044975745c14b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ****36-3C1E-4417-BDB2-1E034F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitSportsHighlightsJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitSportsHighlightsJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitSportsHighlightsJobResponseBody) SetJobId(v string) *SubmitSportsHighlightsJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitSportsHighlightsJobResponseBody) SetRequestId(v string) *SubmitSportsHighlightsJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitSportsHighlightsJobResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitSportsHighlightsJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitSportsHighlightsJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitSportsHighlightsJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitSportsHighlightsJobResponse) SetHeaders(v map[string]*string) *SubmitSportsHighlightsJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitSportsHighlightsJobResponse) SetStatusCode(v int32) *SubmitSportsHighlightsJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitSportsHighlightsJobResponse) SetBody(v *SubmitSportsHighlightsJobResponseBody) *SubmitSportsHighlightsJobResponse {
	s.Body = v
	return s
}

type SubmitStandardCustomizedVoiceJobRequest struct {
	// 	- The material assets IDs of the materials for training.
	//
	// 	- Separate multiple media IDs with commas (,).
	//
	// > : The total duration of all materials must be within 15 to 30 minutes. The duration of each material must be greater than 1 minute.
	//
	// example:
	//
	// ****571c704445f9a0ee011406c2****,****571c704445f9a0ee011406c2****,****571c704445f9a0ee011406c2****
	Audios *string `json:"Audios,omitempty" xml:"Audios,omitempty"`
	// 	- The media asset ID of the authentication audio.
	//
	// 	- Upload an audio file for identity authentication. If the voiceprint extracted from the uploaded file differs from that of the training file, the job fails.
	//
	//     **
	//
	//     **Note**: Clearly read and record the following text: I confirm to customize human voice cloning and provide audio files that contain my voice for training. I promise that I am responsible for the customized content and that the content complies with laws and regulations.
	//
	// example:
	//
	// ****571c704445f9a0ee011406c2****
	Authentication *string `json:"Authentication,omitempty" xml:"Authentication,omitempty"`
	// The URL of the sample audio file.
	//
	// 	- If this parameter is specified, a sample audio file is generated at the specified Object Storage Service (OSS) URL after the training is complete.
	//
	// 	- If this parameter is not specified, no sample audio file is generated.
	//
	//     **
	//
	//     **Note**: The URL must be a valid public OSS URL within your Alibaba Cloud account.
	//
	// example:
	//
	// https://your-bucket.oss-cn-shanghai.aliyuncs.com/demo.mp3
	DemoAudioMediaURL *string `json:"DemoAudioMediaURL,omitempty" xml:"DemoAudioMediaURL,omitempty"`
	// The gender. Valid values:
	//
	// 	- female
	//
	// 	- male
	//
	// example:
	//
	// female
	Gender *string `json:"Gender,omitempty" xml:"Gender,omitempty"`
	// The voice name.
	//
	// 	- The name can be up to 32 characters in length.
	VoiceName *string `json:"VoiceName,omitempty" xml:"VoiceName,omitempty"`
}

func (s SubmitStandardCustomizedVoiceJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitStandardCustomizedVoiceJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitStandardCustomizedVoiceJobRequest) SetAudios(v string) *SubmitStandardCustomizedVoiceJobRequest {
	s.Audios = &v
	return s
}

func (s *SubmitStandardCustomizedVoiceJobRequest) SetAuthentication(v string) *SubmitStandardCustomizedVoiceJobRequest {
	s.Authentication = &v
	return s
}

func (s *SubmitStandardCustomizedVoiceJobRequest) SetDemoAudioMediaURL(v string) *SubmitStandardCustomizedVoiceJobRequest {
	s.DemoAudioMediaURL = &v
	return s
}

func (s *SubmitStandardCustomizedVoiceJobRequest) SetGender(v string) *SubmitStandardCustomizedVoiceJobRequest {
	s.Gender = &v
	return s
}

func (s *SubmitStandardCustomizedVoiceJobRequest) SetVoiceName(v string) *SubmitStandardCustomizedVoiceJobRequest {
	s.VoiceName = &v
	return s
}

type SubmitStandardCustomizedVoiceJobResponseBody struct {
	// The data returned.
	Data *SubmitStandardCustomizedVoiceJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ****63E8B7C7-4812-46AD-0FA56029AC86****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SubmitStandardCustomizedVoiceJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitStandardCustomizedVoiceJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitStandardCustomizedVoiceJobResponseBody) SetData(v *SubmitStandardCustomizedVoiceJobResponseBodyData) *SubmitStandardCustomizedVoiceJobResponseBody {
	s.Data = v
	return s
}

func (s *SubmitStandardCustomizedVoiceJobResponseBody) SetRequestId(v string) *SubmitStandardCustomizedVoiceJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitStandardCustomizedVoiceJobResponseBody) SetSuccess(v bool) *SubmitStandardCustomizedVoiceJobResponseBody {
	s.Success = &v
	return s
}

type SubmitStandardCustomizedVoiceJobResponseBodyData struct {
	// The ID of the human voice cloning job.
	//
	// example:
	//
	// ****d718e2ff4f018ccf419a7b71****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitStandardCustomizedVoiceJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SubmitStandardCustomizedVoiceJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *SubmitStandardCustomizedVoiceJobResponseBodyData) SetJobId(v string) *SubmitStandardCustomizedVoiceJobResponseBodyData {
	s.JobId = &v
	return s
}

type SubmitStandardCustomizedVoiceJobResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitStandardCustomizedVoiceJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitStandardCustomizedVoiceJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitStandardCustomizedVoiceJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitStandardCustomizedVoiceJobResponse) SetHeaders(v map[string]*string) *SubmitStandardCustomizedVoiceJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitStandardCustomizedVoiceJobResponse) SetStatusCode(v int32) *SubmitStandardCustomizedVoiceJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitStandardCustomizedVoiceJobResponse) SetBody(v *SubmitStandardCustomizedVoiceJobResponseBody) *SubmitStandardCustomizedVoiceJobResponse {
	s.Body = v
	return s
}

type SubmitSyncMediaInfoJobRequest struct {
	// The input of the job.
	//
	// This parameter is required.
	Input *SubmitSyncMediaInfoJobRequestInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// The job name.
	//
	// example:
	//
	// job-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The scheduling parameters. This parameter is optional.
	ScheduleConfig *SubmitSyncMediaInfoJobRequestScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// The user data.
	//
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitSyncMediaInfoJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobRequest) SetInput(v *SubmitSyncMediaInfoJobRequestInput) *SubmitSyncMediaInfoJobRequest {
	s.Input = v
	return s
}

func (s *SubmitSyncMediaInfoJobRequest) SetName(v string) *SubmitSyncMediaInfoJobRequest {
	s.Name = &v
	return s
}

func (s *SubmitSyncMediaInfoJobRequest) SetScheduleConfig(v *SubmitSyncMediaInfoJobRequestScheduleConfig) *SubmitSyncMediaInfoJobRequest {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitSyncMediaInfoJobRequest) SetUserData(v string) *SubmitSyncMediaInfoJobRequest {
	s.UserData = &v
	return s
}

type SubmitSyncMediaInfoJobRequestInput struct {
	// The media object.
	//
	// 	- If Type is set to OSS, set this parameter to the URL of an OSS object. Both the OSS and HTTP protocols are supported.
	//
	// >  Before you use the OSS bucket in the URL, you must add the bucket on the [Storage Management](https://help.aliyun.com/document_detail/609918.html) page of the Intelligent Media Services (IMS) console.
	//
	// 	- If Type is set to Media, set this parameter to the ID of a media asset.
	//
	// This parameter is required.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object.
	//
	// 	- OSS: an Object Storage Service (OSS) object.
	//
	// 	- Media: a media asset.
	//
	// This parameter is required.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitSyncMediaInfoJobRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobRequestInput) SetMedia(v string) *SubmitSyncMediaInfoJobRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitSyncMediaInfoJobRequestInput) SetType(v string) *SubmitSyncMediaInfoJobRequestInput {
	s.Type = &v
	return s
}

type SubmitSyncMediaInfoJobRequestScheduleConfig struct {
	// The ID of the MPS queue to which the job was submitted.
	//
	// example:
	//
	// e37ebee5d98b4781897f6086e89f9c56
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The priority of the job. Valid values: 1 to 10. The greater the value, the higher the priority.
	//
	// example:
	//
	// 5
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitSyncMediaInfoJobRequestScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobRequestScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobRequestScheduleConfig) SetPipelineId(v string) *SubmitSyncMediaInfoJobRequestScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitSyncMediaInfoJobRequestScheduleConfig) SetPriority(v int32) *SubmitSyncMediaInfoJobRequestScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitSyncMediaInfoJobShrinkRequest struct {
	// The input of the job.
	//
	// This parameter is required.
	InputShrink *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// The job name.
	//
	// example:
	//
	// job-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The scheduling parameters. This parameter is optional.
	ScheduleConfigShrink *string `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty"`
	// The user data.
	//
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitSyncMediaInfoJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobShrinkRequest) SetInputShrink(v string) *SubmitSyncMediaInfoJobShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitSyncMediaInfoJobShrinkRequest) SetName(v string) *SubmitSyncMediaInfoJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *SubmitSyncMediaInfoJobShrinkRequest) SetScheduleConfigShrink(v string) *SubmitSyncMediaInfoJobShrinkRequest {
	s.ScheduleConfigShrink = &v
	return s
}

func (s *SubmitSyncMediaInfoJobShrinkRequest) SetUserData(v string) *SubmitSyncMediaInfoJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitSyncMediaInfoJobResponseBody struct {
	// MediaInfoJobDTO
	MediaInfoJob *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob `json:"MediaInfoJob,omitempty" xml:"MediaInfoJob,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitSyncMediaInfoJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponseBody) SetMediaInfoJob(v *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) *SubmitSyncMediaInfoJobResponseBody {
	s.MediaInfoJob = v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBody) SetRequestId(v string) *SubmitSyncMediaInfoJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitSyncMediaInfoJobResponseBodyMediaInfoJob struct {
	// Indicates whether asynchronous processing was performed.
	//
	// example:
	//
	// true
	Async *bool `json:"Async,omitempty" xml:"Async,omitempty"`
	// The time when the job was complete. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-01-12T08:49:41Z
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The input of the job.
	Input *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// The job ID.
	//
	// example:
	//
	// ab4802364a2e49208c99efab82dfa8e8
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The details of the media information.
	MediaInfoProperty *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty `json:"MediaInfoProperty,omitempty" xml:"MediaInfoProperty,omitempty" type:"Struct"`
	// The job name.
	//
	// example:
	//
	// job-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 4879B9DE-E4B6-19DC-91F5-9D5F4DCE4168
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The scheduling information.
	ScheduleConfig *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// The state of the job. Valid values: Init (the job is submitted), Success (the job is successful), and Fail (the job failed).
	//
	// example:
	//
	// Init
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The job submission information.
	//
	// example:
	//
	// {}
	SubmitResultJson map[string]interface{} `json:"SubmitResultJson,omitempty" xml:"SubmitResultJson,omitempty"`
	// The time when the job was submitted. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-01-12T08:49:41Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// The source of the job. Valid values: API, WorkFlow, and Console.
	//
	// example:
	//
	// API
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// The user data.
	//
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetAsync(v bool) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.Async = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetFinishTime(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.FinishTime = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetInput(v *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.Input = v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetJobId(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.JobId = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetMediaInfoProperty(v *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.MediaInfoProperty = v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetName(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.Name = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetRequestId(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.RequestId = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetScheduleConfig(v *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetStatus(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.Status = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetSubmitResultJson(v map[string]interface{}) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.SubmitResultJson = v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetSubmitTime(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.SubmitTime = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetTriggerSource(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.TriggerSource = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetUserData(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.UserData = &v
	return s
}

type SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput struct {
	// The media object. If Type is set to OSS, set this parameter to the URL of an OSS object. Both the OSS and HTTP protocols are supported. If Type is set to Media, set this parameter to the ID of a media asset.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an OSS object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput) SetMedia(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput {
	s.Media = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput) SetType(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput {
	s.Type = &v
	return s
}

type SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty struct {
	// The information about the audio stream.
	AudioStreamInfoList []*SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList `json:"AudioStreamInfoList,omitempty" xml:"AudioStreamInfoList,omitempty" type:"Repeated"`
	// The basic file information.
	FileBasicInfo *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
	// The information about the video stream.
	VideoStreamInfoList []*SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList `json:"VideoStreamInfoList,omitempty" xml:"VideoStreamInfoList,omitempty" type:"Repeated"`
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetAudioStreamInfoList(v []*SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.AudioStreamInfoList = v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetFileBasicInfo(v *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.FileBasicInfo = v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetVideoStreamInfoList(v []*SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.VideoStreamInfoList = v
	return s
}

type SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList struct {
	// The bitrate.
	//
	// example:
	//
	// 0.f
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The sound channel layout.
	//
	// example:
	//
	// stereo
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	// The number of sound channels.
	//
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// The name of the encoding format.
	//
	// example:
	//
	// AAC (Advanced Audio Coding)
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// The encoding format.
	//
	// example:
	//
	// aac
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// The encoder tag.
	//
	// example:
	//
	// 0x000f
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// The name of the encoder tag.
	//
	// example:
	//
	// [15][0][0][0]
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// The time base of the encoder.
	//
	// example:
	//
	// 1/44100
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// The duration of the file.
	//
	// example:
	//
	// 403.039989
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The sequence number of the stream.
	//
	// example:
	//
	// 1
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// The language of the stream.
	//
	// example:
	//
	// us
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The sample format.
	//
	// example:
	//
	// fltp
	SampleFmt *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	// The sampling rate. Unit: Hz.
	//
	// example:
	//
	// 44100
	SampleRate *string `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
	// The start time of the stream.
	//
	// example:
	//
	// 1.473556
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The time base.
	//
	// example:
	//
	// 1/90000
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetBitrate(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetChannelLayout(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.ChannelLayout = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetChannels(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Channels = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecLongName(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecName(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTag(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTagString(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTimeBase(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetDuration(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Duration = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetIndex(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Index = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetLang(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Lang = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetSampleFmt(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.SampleFmt = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetSampleRate(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.SampleRate = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetStartTime(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetTimebase(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Timebase = &v
	return s
}

type SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo struct {
	// The video bitrate.
	//
	// example:
	//
	// 888.563
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The duration of the video. Unit: seconds.
	//
	// example:
	//
	// 403.039999
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The file name.
	//
	// example:
	//
	// file.m3u8
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The file size. Unit: bytes.
	//
	// example:
	//
	// 31737
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// The state of the file. Valid values:
	//
	// 	- Normal
	//
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// The file type.
	//
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// The URL of the file.
	//
	// example:
	//
	// http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// The name of the video format.
	//
	// example:
	//
	// hls,applehttp
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// The height of the output video.
	//
	// example:
	//
	// 478
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// 999e68259c924f52a6be603cbb3f91cc
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The region in which the file resides.
	//
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The width of the output video.
	//
	// example:
	//
	// 848
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetBitrate(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetDuration(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileName(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileSize(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileStatus(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileType(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileUrl(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFormatName(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetHeight(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Height = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetMediaId(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.MediaId = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetRegion(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Region = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetWidth(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Width = &v
	return s
}

type SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList struct {
	// The average frame rate.
	//
	// example:
	//
	// 25.0
	AvgFps *string `json:"Avg_fps,omitempty" xml:"Avg_fps,omitempty"`
	// The bitrate.
	//
	// example:
	//
	// 888.563
	BitRate *string `json:"Bit_rate,omitempty" xml:"Bit_rate,omitempty"`
	// The name of the encoding format.
	//
	// example:
	//
	// H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10
	CodecLongName *string `json:"Codec_long_name,omitempty" xml:"Codec_long_name,omitempty"`
	// The encoding format.
	//
	// example:
	//
	// h264
	CodecName *string `json:"Codec_name,omitempty" xml:"Codec_name,omitempty"`
	// The tag of the encoding format.
	//
	// example:
	//
	// 0x001b
	CodecTag *string `json:"Codec_tag,omitempty" xml:"Codec_tag,omitempty"`
	// The tag string of the encoding format.
	//
	// example:
	//
	// [27][0][0][0]
	CodecTagString *string `json:"Codec_tag_string,omitempty" xml:"Codec_tag_string,omitempty"`
	// The time base of the encoder.
	//
	// example:
	//
	// 1/50
	CodecTimeBase *string `json:"Codec_time_base,omitempty" xml:"Codec_time_base,omitempty"`
	// The display aspect ratio.
	//
	// example:
	//
	// 16:9
	Dar *string `json:"Dar,omitempty" xml:"Dar,omitempty"`
	// The duration of the file.
	//
	// example:
	//
	// 403.039989
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The frame rate.
	//
	// example:
	//
	// 25.0
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// Indicates whether the video stream contains bidirectional frames (B-frames). Valid values:
	//
	// 	- 0: The stream contains no B-frames.
	//
	// 	- 1: The stream contains one B-frame.
	//
	// 	- 2: The stream contains multiple consecutive B-frames.
	//
	// example:
	//
	// 2
	HasBFrames *string `json:"Has_b_frames,omitempty" xml:"Has_b_frames,omitempty"`
	// The height of the output video.
	//
	// example:
	//
	// 478
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The sequence number of the stream.
	//
	// example:
	//
	// 0
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// The language of the stream.
	//
	// example:
	//
	// zh
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The codec level.
	//
	// example:
	//
	// 31
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The total number of frames.
	//
	// example:
	//
	// 10040
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// The pixel format.
	//
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// The encoder profile.
	//
	// example:
	//
	// High
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// The rotation angle of the video image.
	//
	// example:
	//
	// 0
	Rotate *string `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	// The aspect ratio of the area from which the sampling points are collected.
	//
	// example:
	//
	// 478:477
	Sar *string `json:"Sar,omitempty" xml:"Sar,omitempty"`
	// The start time of the stream.
	//
	// example:
	//
	// 1.473556
	StartTime *string `json:"Start_time,omitempty" xml:"Start_time,omitempty"`
	// The time base.
	//
	// example:
	//
	// 1/90000
	TimeBase *string `json:"Time_base,omitempty" xml:"Time_base,omitempty"`
	// The width of the output video.
	//
	// example:
	//
	// 848
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetAvgFps(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.AvgFps = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetBitRate(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.BitRate = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecLongName(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecName(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTag(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTagString(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTimeBase(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetDar(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Dar = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetDuration(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Duration = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetFps(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Fps = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetHasBFrames(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.HasBFrames = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetHeight(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Height = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetIndex(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Index = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetLang(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Lang = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetLevel(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Level = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetNumFrames(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetPixFmt(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.PixFmt = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetProfile(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Profile = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetRotate(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Rotate = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetSar(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Sar = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetStartTime(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetTimeBase(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.TimeBase = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetWidth(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Width = &v
	return s
}

type SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig struct {
	// The ID of the MPS queue to which the job was submitted.
	//
	// example:
	//
	// e37ebee5d98b4781897f6086e89f9c56
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The priority of the job. Valid values: 1 to 10. The greater the value, the higher the priority.
	//
	// example:
	//
	// 5
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) SetPipelineId(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) SetPriority(v int32) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitSyncMediaInfoJobResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitSyncMediaInfoJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitSyncMediaInfoJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponse) SetHeaders(v map[string]*string) *SubmitSyncMediaInfoJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitSyncMediaInfoJobResponse) SetStatusCode(v int32) *SubmitSyncMediaInfoJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponse) SetBody(v *SubmitSyncMediaInfoJobResponseBody) *SubmitSyncMediaInfoJobResponse {
	s.Body = v
	return s
}

type SubmitTextGenerateJobRequest struct {
	// The job description, which can be up to 1,024 bytes in length and must be encoded in UTF-8.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The text generation configurations, including keywords and the requirements for the word count and number of output copies.
	GenerateConfig *string `json:"GenerateConfig,omitempty" xml:"GenerateConfig,omitempty"`
	// The job title.
	//
	// The job title can be up to 128 bytes in length.
	//
	// The value must be encoded in UTF-8.
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// The job type.
	//
	// Valid values:
	//
	// 	- MarketingCopy: the marketing copy.
	//
	// 	- Title: the short video title.
	//
	// example:
	//
	// MarketingCopy
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The user-defined data in the JSON format, which can be up to 512 bytes in length. You can specify a custom callback URL. For more information, see [Configure a callback upon editing completion](https://help.aliyun.com/document_detail/451631.html).
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitTextGenerateJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitTextGenerateJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitTextGenerateJobRequest) SetDescription(v string) *SubmitTextGenerateJobRequest {
	s.Description = &v
	return s
}

func (s *SubmitTextGenerateJobRequest) SetGenerateConfig(v string) *SubmitTextGenerateJobRequest {
	s.GenerateConfig = &v
	return s
}

func (s *SubmitTextGenerateJobRequest) SetTitle(v string) *SubmitTextGenerateJobRequest {
	s.Title = &v
	return s
}

func (s *SubmitTextGenerateJobRequest) SetType(v string) *SubmitTextGenerateJobRequest {
	s.Type = &v
	return s
}

func (s *SubmitTextGenerateJobRequest) SetUserData(v string) *SubmitTextGenerateJobRequest {
	s.UserData = &v
	return s
}

type SubmitTextGenerateJobResponseBody struct {
	// The job ID.
	//
	// example:
	//
	// ****d80e4e4044975745c14b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The request ID
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitTextGenerateJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitTextGenerateJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitTextGenerateJobResponseBody) SetJobId(v string) *SubmitTextGenerateJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitTextGenerateJobResponseBody) SetRequestId(v string) *SubmitTextGenerateJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitTextGenerateJobResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitTextGenerateJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitTextGenerateJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitTextGenerateJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitTextGenerateJobResponse) SetHeaders(v map[string]*string) *SubmitTextGenerateJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitTextGenerateJobResponse) SetStatusCode(v int32) *SubmitTextGenerateJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitTextGenerateJobResponse) SetBody(v *SubmitTextGenerateJobResponseBody) *SubmitTextGenerateJobResponse {
	s.Body = v
	return s
}

type SubmitTraceAbJobRequest struct {
	// example:
	//
	// Qh6OdgIMcliQSI1fReOw****
	CipherBase64ed *string `json:"CipherBase64ed,omitempty" xml:"CipherBase64ed,omitempty"`
	// This parameter is required.
	Input *SubmitTraceAbJobRequestInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// example:
	//
	// 0
	Level *int64 `json:"Level,omitempty" xml:"Level,omitempty"`
	// This parameter is required.
	Output *SubmitTraceAbJobRequestOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// example:
	//
	// 0
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 360
	TotalTime *int64 `json:"TotalTime,omitempty" xml:"TotalTime,omitempty"`
	// example:
	//
	// 123
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitTraceAbJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitTraceAbJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitTraceAbJobRequest) SetCipherBase64ed(v string) *SubmitTraceAbJobRequest {
	s.CipherBase64ed = &v
	return s
}

func (s *SubmitTraceAbJobRequest) SetInput(v *SubmitTraceAbJobRequestInput) *SubmitTraceAbJobRequest {
	s.Input = v
	return s
}

func (s *SubmitTraceAbJobRequest) SetLevel(v int64) *SubmitTraceAbJobRequest {
	s.Level = &v
	return s
}

func (s *SubmitTraceAbJobRequest) SetOutput(v *SubmitTraceAbJobRequestOutput) *SubmitTraceAbJobRequest {
	s.Output = v
	return s
}

func (s *SubmitTraceAbJobRequest) SetStartTime(v int64) *SubmitTraceAbJobRequest {
	s.StartTime = &v
	return s
}

func (s *SubmitTraceAbJobRequest) SetTotalTime(v int64) *SubmitTraceAbJobRequest {
	s.TotalTime = &v
	return s
}

func (s *SubmitTraceAbJobRequest) SetUserData(v string) *SubmitTraceAbJobRequest {
	s.UserData = &v
	return s
}

type SubmitTraceAbJobRequestInput struct {
	// This parameter is required.
	//
	// example:
	//
	// oss://bucket/object
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTraceAbJobRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitTraceAbJobRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitTraceAbJobRequestInput) SetMedia(v string) *SubmitTraceAbJobRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitTraceAbJobRequestInput) SetType(v string) *SubmitTraceAbJobRequestInput {
	s.Type = &v
	return s
}

type SubmitTraceAbJobRequestOutput struct {
	// This parameter is required.
	//
	// example:
	//
	// oss://bucket/dir/
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTraceAbJobRequestOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitTraceAbJobRequestOutput) GoString() string {
	return s.String()
}

func (s *SubmitTraceAbJobRequestOutput) SetMedia(v string) *SubmitTraceAbJobRequestOutput {
	s.Media = &v
	return s
}

func (s *SubmitTraceAbJobRequestOutput) SetType(v string) *SubmitTraceAbJobRequestOutput {
	s.Type = &v
	return s
}

type SubmitTraceAbJobShrinkRequest struct {
	// example:
	//
	// Qh6OdgIMcliQSI1fReOw****
	CipherBase64ed *string `json:"CipherBase64ed,omitempty" xml:"CipherBase64ed,omitempty"`
	// This parameter is required.
	InputShrink *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// example:
	//
	// 0
	Level *int64 `json:"Level,omitempty" xml:"Level,omitempty"`
	// This parameter is required.
	OutputShrink *string `json:"Output,omitempty" xml:"Output,omitempty"`
	// example:
	//
	// 0
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 360
	TotalTime *int64 `json:"TotalTime,omitempty" xml:"TotalTime,omitempty"`
	// example:
	//
	// 123
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitTraceAbJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitTraceAbJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitTraceAbJobShrinkRequest) SetCipherBase64ed(v string) *SubmitTraceAbJobShrinkRequest {
	s.CipherBase64ed = &v
	return s
}

func (s *SubmitTraceAbJobShrinkRequest) SetInputShrink(v string) *SubmitTraceAbJobShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitTraceAbJobShrinkRequest) SetLevel(v int64) *SubmitTraceAbJobShrinkRequest {
	s.Level = &v
	return s
}

func (s *SubmitTraceAbJobShrinkRequest) SetOutputShrink(v string) *SubmitTraceAbJobShrinkRequest {
	s.OutputShrink = &v
	return s
}

func (s *SubmitTraceAbJobShrinkRequest) SetStartTime(v int64) *SubmitTraceAbJobShrinkRequest {
	s.StartTime = &v
	return s
}

func (s *SubmitTraceAbJobShrinkRequest) SetTotalTime(v int64) *SubmitTraceAbJobShrinkRequest {
	s.TotalTime = &v
	return s
}

func (s *SubmitTraceAbJobShrinkRequest) SetUserData(v string) *SubmitTraceAbJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitTraceAbJobResponseBody struct {
	Data *SubmitTraceAbJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// ok
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ******36-3C1E-4417-BDB2-1E034F******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 200
	StatusCode *int64 `json:"StatusCode,omitempty" xml:"StatusCode,omitempty"`
}

func (s SubmitTraceAbJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitTraceAbJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitTraceAbJobResponseBody) SetData(v *SubmitTraceAbJobResponseBodyData) *SubmitTraceAbJobResponseBody {
	s.Data = v
	return s
}

func (s *SubmitTraceAbJobResponseBody) SetMessage(v string) *SubmitTraceAbJobResponseBody {
	s.Message = &v
	return s
}

func (s *SubmitTraceAbJobResponseBody) SetRequestId(v string) *SubmitTraceAbJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitTraceAbJobResponseBody) SetStatusCode(v int64) *SubmitTraceAbJobResponseBody {
	s.StatusCode = &v
	return s
}

type SubmitTraceAbJobResponseBodyData struct {
	// example:
	//
	// bfb786c639894f4d80648792021e****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// bf53333264f4d80648792021e****
	TraceMediaId *string `json:"TraceMediaId,omitempty" xml:"TraceMediaId,omitempty"`
}

func (s SubmitTraceAbJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SubmitTraceAbJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *SubmitTraceAbJobResponseBodyData) SetJobId(v string) *SubmitTraceAbJobResponseBodyData {
	s.JobId = &v
	return s
}

func (s *SubmitTraceAbJobResponseBodyData) SetTraceMediaId(v string) *SubmitTraceAbJobResponseBodyData {
	s.TraceMediaId = &v
	return s
}

type SubmitTraceAbJobResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitTraceAbJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitTraceAbJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitTraceAbJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitTraceAbJobResponse) SetHeaders(v map[string]*string) *SubmitTraceAbJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitTraceAbJobResponse) SetStatusCode(v int32) *SubmitTraceAbJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitTraceAbJobResponse) SetBody(v *SubmitTraceAbJobResponseBody) *SubmitTraceAbJobResponse {
	s.Body = v
	return s
}

type SubmitTraceExtractJobRequest struct {
	// This parameter is required.
	Input *SubmitTraceExtractJobRequestInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// example:
	//
	// {"m3u8Type":"v1"}
	Params *string `json:"Params,omitempty" xml:"Params,omitempty"`
	// example:
	//
	// 123
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitTraceExtractJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitTraceExtractJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitTraceExtractJobRequest) SetInput(v *SubmitTraceExtractJobRequestInput) *SubmitTraceExtractJobRequest {
	s.Input = v
	return s
}

func (s *SubmitTraceExtractJobRequest) SetParams(v string) *SubmitTraceExtractJobRequest {
	s.Params = &v
	return s
}

func (s *SubmitTraceExtractJobRequest) SetUserData(v string) *SubmitTraceExtractJobRequest {
	s.UserData = &v
	return s
}

type SubmitTraceExtractJobRequestInput struct {
	// This parameter is required.
	//
	// example:
	//
	// oss://bucket/object
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTraceExtractJobRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitTraceExtractJobRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitTraceExtractJobRequestInput) SetMedia(v string) *SubmitTraceExtractJobRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitTraceExtractJobRequestInput) SetType(v string) *SubmitTraceExtractJobRequestInput {
	s.Type = &v
	return s
}

type SubmitTraceExtractJobShrinkRequest struct {
	// This parameter is required.
	InputShrink *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// example:
	//
	// {"m3u8Type":"v1"}
	Params *string `json:"Params,omitempty" xml:"Params,omitempty"`
	// example:
	//
	// 123
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitTraceExtractJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitTraceExtractJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitTraceExtractJobShrinkRequest) SetInputShrink(v string) *SubmitTraceExtractJobShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitTraceExtractJobShrinkRequest) SetParams(v string) *SubmitTraceExtractJobShrinkRequest {
	s.Params = &v
	return s
}

func (s *SubmitTraceExtractJobShrinkRequest) SetUserData(v string) *SubmitTraceExtractJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitTraceExtractJobResponseBody struct {
	Data *SubmitTraceExtractJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// ok
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ****63E8B7C7-4812-46AD-0FA56029AC86****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 200
	StatusCode *int64 `json:"StatusCode,omitempty" xml:"StatusCode,omitempty"`
}

func (s SubmitTraceExtractJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitTraceExtractJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitTraceExtractJobResponseBody) SetData(v *SubmitTraceExtractJobResponseBodyData) *SubmitTraceExtractJobResponseBody {
	s.Data = v
	return s
}

func (s *SubmitTraceExtractJobResponseBody) SetMessage(v string) *SubmitTraceExtractJobResponseBody {
	s.Message = &v
	return s
}

func (s *SubmitTraceExtractJobResponseBody) SetRequestId(v string) *SubmitTraceExtractJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitTraceExtractJobResponseBody) SetStatusCode(v int64) *SubmitTraceExtractJobResponseBody {
	s.StatusCode = &v
	return s
}

type SubmitTraceExtractJobResponseBodyData struct {
	// example:
	//
	// bfb786c639894f4d80648792021e****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitTraceExtractJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SubmitTraceExtractJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *SubmitTraceExtractJobResponseBodyData) SetJobId(v string) *SubmitTraceExtractJobResponseBodyData {
	s.JobId = &v
	return s
}

type SubmitTraceExtractJobResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitTraceExtractJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitTraceExtractJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitTraceExtractJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitTraceExtractJobResponse) SetHeaders(v map[string]*string) *SubmitTraceExtractJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitTraceExtractJobResponse) SetStatusCode(v int32) *SubmitTraceExtractJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitTraceExtractJobResponse) SetBody(v *SubmitTraceExtractJobResponseBody) *SubmitTraceExtractJobResponse {
	s.Body = v
	return s
}

type SubmitTraceM3u8JobRequest struct {
	// example:
	//
	// https://cipher.abc.com
	KeyUri *string `json:"KeyUri,omitempty" xml:"KeyUri,omitempty"`
	// This parameter is required.
	Output *SubmitTraceM3u8JobRequestOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// example:
	//
	// {"m3u8Type":"v1"}
	Params *string `json:"Params,omitempty" xml:"Params,omitempty"`
	Trace  *string `json:"Trace,omitempty" xml:"Trace,omitempty"`
	// example:
	//
	// 437bd2b516ffda105d07b12a9a82****
	TraceMediaId *string `json:"TraceMediaId,omitempty" xml:"TraceMediaId,omitempty"`
}

func (s SubmitTraceM3u8JobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitTraceM3u8JobRequest) GoString() string {
	return s.String()
}

func (s *SubmitTraceM3u8JobRequest) SetKeyUri(v string) *SubmitTraceM3u8JobRequest {
	s.KeyUri = &v
	return s
}

func (s *SubmitTraceM3u8JobRequest) SetOutput(v *SubmitTraceM3u8JobRequestOutput) *SubmitTraceM3u8JobRequest {
	s.Output = v
	return s
}

func (s *SubmitTraceM3u8JobRequest) SetParams(v string) *SubmitTraceM3u8JobRequest {
	s.Params = &v
	return s
}

func (s *SubmitTraceM3u8JobRequest) SetTrace(v string) *SubmitTraceM3u8JobRequest {
	s.Trace = &v
	return s
}

func (s *SubmitTraceM3u8JobRequest) SetTraceMediaId(v string) *SubmitTraceM3u8JobRequest {
	s.TraceMediaId = &v
	return s
}

type SubmitTraceM3u8JobRequestOutput struct {
	// This parameter is required.
	//
	// example:
	//
	// oss://bucket/object
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTraceM3u8JobRequestOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitTraceM3u8JobRequestOutput) GoString() string {
	return s.String()
}

func (s *SubmitTraceM3u8JobRequestOutput) SetMedia(v string) *SubmitTraceM3u8JobRequestOutput {
	s.Media = &v
	return s
}

func (s *SubmitTraceM3u8JobRequestOutput) SetType(v string) *SubmitTraceM3u8JobRequestOutput {
	s.Type = &v
	return s
}

type SubmitTraceM3u8JobShrinkRequest struct {
	// example:
	//
	// https://cipher.abc.com
	KeyUri *string `json:"KeyUri,omitempty" xml:"KeyUri,omitempty"`
	// This parameter is required.
	OutputShrink *string `json:"Output,omitempty" xml:"Output,omitempty"`
	// example:
	//
	// {"m3u8Type":"v1"}
	Params *string `json:"Params,omitempty" xml:"Params,omitempty"`
	Trace  *string `json:"Trace,omitempty" xml:"Trace,omitempty"`
	// example:
	//
	// 437bd2b516ffda105d07b12a9a82****
	TraceMediaId *string `json:"TraceMediaId,omitempty" xml:"TraceMediaId,omitempty"`
}

func (s SubmitTraceM3u8JobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitTraceM3u8JobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitTraceM3u8JobShrinkRequest) SetKeyUri(v string) *SubmitTraceM3u8JobShrinkRequest {
	s.KeyUri = &v
	return s
}

func (s *SubmitTraceM3u8JobShrinkRequest) SetOutputShrink(v string) *SubmitTraceM3u8JobShrinkRequest {
	s.OutputShrink = &v
	return s
}

func (s *SubmitTraceM3u8JobShrinkRequest) SetParams(v string) *SubmitTraceM3u8JobShrinkRequest {
	s.Params = &v
	return s
}

func (s *SubmitTraceM3u8JobShrinkRequest) SetTrace(v string) *SubmitTraceM3u8JobShrinkRequest {
	s.Trace = &v
	return s
}

func (s *SubmitTraceM3u8JobShrinkRequest) SetTraceMediaId(v string) *SubmitTraceM3u8JobShrinkRequest {
	s.TraceMediaId = &v
	return s
}

type SubmitTraceM3u8JobResponseBody struct {
	Data *SubmitTraceM3u8JobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// ok
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitTraceM3u8JobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitTraceM3u8JobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitTraceM3u8JobResponseBody) SetData(v *SubmitTraceM3u8JobResponseBodyData) *SubmitTraceM3u8JobResponseBody {
	s.Data = v
	return s
}

func (s *SubmitTraceM3u8JobResponseBody) SetMessage(v string) *SubmitTraceM3u8JobResponseBody {
	s.Message = &v
	return s
}

func (s *SubmitTraceM3u8JobResponseBody) SetRequestId(v string) *SubmitTraceM3u8JobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitTraceM3u8JobResponseBodyData struct {
	// example:
	//
	// bfb786c639894f4d8064879202****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitTraceM3u8JobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SubmitTraceM3u8JobResponseBodyData) GoString() string {
	return s.String()
}

func (s *SubmitTraceM3u8JobResponseBodyData) SetJobId(v string) *SubmitTraceM3u8JobResponseBodyData {
	s.JobId = &v
	return s
}

type SubmitTraceM3u8JobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitTraceM3u8JobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitTraceM3u8JobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitTraceM3u8JobResponse) GoString() string {
	return s.String()
}

func (s *SubmitTraceM3u8JobResponse) SetHeaders(v map[string]*string) *SubmitTraceM3u8JobResponse {
	s.Headers = v
	return s
}

func (s *SubmitTraceM3u8JobResponse) SetStatusCode(v int32) *SubmitTraceM3u8JobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitTraceM3u8JobResponse) SetBody(v *SubmitTraceM3u8JobResponseBody) *SubmitTraceM3u8JobResponse {
	s.Body = v
	return s
}

type SubmitTranscodeJobRequest struct {
	// The client token that is used to ensure the idempotence of the request.
	//
	// example:
	//
	// ****12e8864746a0a398****
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The input group of the job. An input of a single file indicates a transcoding job. An input of multiple files indicates an audio and video stream merge job.
	//
	// This parameter is required.
	//
	// example:
	//
	// job-name
	InputGroup []*SubmitTranscodeJobRequestInputGroup `json:"InputGroup,omitempty" xml:"InputGroup,omitempty" type:"Repeated"`
	// The job name.
	//
	// example:
	//
	// job-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output group of the job.
	//
	// This parameter is required.
	//
	// example:
	//
	// user-data
	OutputGroup []*SubmitTranscodeJobRequestOutputGroup `json:"OutputGroup,omitempty" xml:"OutputGroup,omitempty" type:"Repeated"`
	// The scheduling information about the job.
	//
	// example:
	//
	// job-name
	ScheduleConfig *SubmitTranscodeJobRequestScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// The custom settings. The value must be in the JSON format and can be up to 512 bytes in length. You can specify a [custom callback URL](https://help.aliyun.com/document_detail/451631.html).
	//
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitTranscodeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequest) SetClientToken(v string) *SubmitTranscodeJobRequest {
	s.ClientToken = &v
	return s
}

func (s *SubmitTranscodeJobRequest) SetInputGroup(v []*SubmitTranscodeJobRequestInputGroup) *SubmitTranscodeJobRequest {
	s.InputGroup = v
	return s
}

func (s *SubmitTranscodeJobRequest) SetName(v string) *SubmitTranscodeJobRequest {
	s.Name = &v
	return s
}

func (s *SubmitTranscodeJobRequest) SetOutputGroup(v []*SubmitTranscodeJobRequestOutputGroup) *SubmitTranscodeJobRequest {
	s.OutputGroup = v
	return s
}

func (s *SubmitTranscodeJobRequest) SetScheduleConfig(v *SubmitTranscodeJobRequestScheduleConfig) *SubmitTranscodeJobRequest {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitTranscodeJobRequest) SetUserData(v string) *SubmitTranscodeJobRequest {
	s.UserData = &v
	return s
}

type SubmitTranscodeJobRequestInputGroup struct {
	// The URL of the input stream.
	//
	// 	- This parameter takes effect only when Type is set to Media. You can select a specific file within the media asset as an input.
	//
	// 	- The system checks whether the input URL exists within the media asset.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	InputUrl *string `json:"InputUrl,omitempty" xml:"InputUrl,omitempty"`
	// The media object.
	//
	// 	- If Type is set to OSS, set this parameter to the URL of an OSS object. Both the OSS and HTTP protocols are supported.
	//
	// >  Before you use the OSS bucket in the URL, you must add the bucket on the [Storage Management](https://help.aliyun.com/document_detail/609918.html) page of the Intelligent Media Services (IMS) console.
	//
	// 	- If Type is set to Media, set this parameter to the ID of a media asset.
	//
	// This parameter is required.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an Object Storage Service (OSS) object.
	//
	// 	- Media: a media asset.
	//
	// This parameter is required.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobRequestInputGroup) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestInputGroup) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestInputGroup) SetInputUrl(v string) *SubmitTranscodeJobRequestInputGroup {
	s.InputUrl = &v
	return s
}

func (s *SubmitTranscodeJobRequestInputGroup) SetMedia(v string) *SubmitTranscodeJobRequestInputGroup {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobRequestInputGroup) SetType(v string) *SubmitTranscodeJobRequestInputGroup {
	s.Type = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroup struct {
	// The output file configuration.
	//
	// This parameter is required.
	Output *SubmitTranscodeJobRequestOutputGroupOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// The job processing configuration.
	//
	// This parameter is required.
	ProcessConfig *SubmitTranscodeJobRequestOutputGroupProcessConfig `json:"ProcessConfig,omitempty" xml:"ProcessConfig,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobRequestOutputGroup) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroup) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroup) SetOutput(v *SubmitTranscodeJobRequestOutputGroupOutput) *SubmitTranscodeJobRequestOutputGroup {
	s.Output = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroup) SetProcessConfig(v *SubmitTranscodeJobRequestOutputGroupProcessConfig) *SubmitTranscodeJobRequestOutputGroup {
	s.ProcessConfig = v
	return s
}

type SubmitTranscodeJobRequestOutputGroupOutput struct {
	// The media object.
	//
	// 	- If Type is set to OSS, set this parameter to the URL of an OSS object. Both the OSS and HTTP protocols are supported.
	//
	// >  Before you use the OSS bucket in the URL, you must add the bucket on the [Storage Management](https://help.aliyun.com/document_detail/609918.html) page of the IMS console.
	//
	// 	- If Type is set to Media, set this parameter to the ID of a media asset.
	//
	// This parameter is required.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The URL of the output stream.\\
	//
	// This parameter takes effect only when Type is set to Media. You can select a specific file within the media asset as an output.\\
	//
	// Supported placeholders:
	//
	// 	- {MediaId}: the ID of the media asset.
	//
	// 	- {JobId}: the ID of the transcoding subjob.
	//
	// 	- {MediaBucket}: the bucket to which the media asset belongs.
	//
	// 	- {ExtName}: the file suffix, which uses the output format of the transcoding template.
	//
	// 	- {DestMd5}: the MD5 value of the transcoded output file.\\
	//
	//     Notes:
	//
	// 1.  This parameter must contain the {MediaId} and {JobId} placeholders.
	//
	// 2.  The output bucket is the same as the bucket to which the media asset belongs.
	//
	// example:
	//
	// oss://bucket/path/to/{MediaId}/{JobId}.mp4
	OutputUrl *string `json:"OutputUrl,omitempty" xml:"OutputUrl,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an OSS object.
	//
	// 	- Media: a media asset.
	//
	// This parameter is required.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupOutput) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupOutput) SetMedia(v string) *SubmitTranscodeJobRequestOutputGroupOutput {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupOutput) SetOutputUrl(v string) *SubmitTranscodeJobRequestOutputGroupOutput {
	s.OutputUrl = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupOutput) SetType(v string) *SubmitTranscodeJobRequestOutputGroupOutput {
	s.Type = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfig struct {
	// The multi-input stream merge configuration.
	CombineConfigs []*SubmitTranscodeJobRequestOutputGroupProcessConfigCombineConfigs `json:"CombineConfigs,omitempty" xml:"CombineConfigs,omitempty" type:"Repeated"`
	// The encryption settings.
	Encryption *SubmitTranscodeJobRequestOutputGroupProcessConfigEncryption `json:"Encryption,omitempty" xml:"Encryption,omitempty" type:"Struct"`
	// The watermark configuration of an image.
	ImageWatermarks []*SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks `json:"ImageWatermarks,omitempty" xml:"ImageWatermarks,omitempty" type:"Repeated"`
	// The subtitle configuration.
	Subtitles []*SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles `json:"Subtitles,omitempty" xml:"Subtitles,omitempty" type:"Repeated"`
	// The configurations of the text watermark.
	TextWatermarks []*SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks `json:"TextWatermarks,omitempty" xml:"TextWatermarks,omitempty" type:"Repeated"`
	// The transcoding configuration.
	//
	// This parameter is required.
	Transcode *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode `json:"Transcode,omitempty" xml:"Transcode,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfig) SetCombineConfigs(v []*SubmitTranscodeJobRequestOutputGroupProcessConfigCombineConfigs) *SubmitTranscodeJobRequestOutputGroupProcessConfig {
	s.CombineConfigs = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfig) SetEncryption(v *SubmitTranscodeJobRequestOutputGroupProcessConfigEncryption) *SubmitTranscodeJobRequestOutputGroupProcessConfig {
	s.Encryption = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfig) SetImageWatermarks(v []*SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks) *SubmitTranscodeJobRequestOutputGroupProcessConfig {
	s.ImageWatermarks = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfig) SetSubtitles(v []*SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles) *SubmitTranscodeJobRequestOutputGroupProcessConfig {
	s.Subtitles = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfig) SetTextWatermarks(v []*SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks) *SubmitTranscodeJobRequestOutputGroupProcessConfig {
	s.TextWatermarks = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfig) SetTranscode(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode) *SubmitTranscodeJobRequestOutputGroupProcessConfig {
	s.Transcode = v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigCombineConfigs struct {
	// The audio stream index.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0 或 exclude
	AudioIndex *string `json:"AudioIndex,omitempty" xml:"AudioIndex,omitempty"`
	// The duration of the input stream. The default value is the duration of the video.
	//
	// example:
	//
	// 20.0
	Duration *float64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The start time of the input stream. Default value: 0.
	//
	// example:
	//
	// 0.0
	Start *float64 `json:"Start,omitempty" xml:"Start,omitempty"`
	// The video stream index.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0 或 exclude
	VideoIndex *string `json:"VideoIndex,omitempty" xml:"VideoIndex,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigCombineConfigs) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigCombineConfigs) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigCombineConfigs) SetAudioIndex(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigCombineConfigs {
	s.AudioIndex = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigCombineConfigs) SetDuration(v float64) *SubmitTranscodeJobRequestOutputGroupProcessConfigCombineConfigs {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigCombineConfigs) SetStart(v float64) *SubmitTranscodeJobRequestOutputGroupProcessConfigCombineConfigs {
	s.Start = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigCombineConfigs) SetVideoIndex(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigCombineConfigs {
	s.VideoIndex = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigEncryption struct {
	// The ciphertext of HTTP Live Streaming (HLS) encryption.
	//
	// example:
	//
	// MTYi00NDU0LTg5O****
	CipherText *string `json:"CipherText,omitempty" xml:"CipherText,omitempty"`
	// The address of the decryption service for HLS encryption.
	//
	// example:
	//
	// https://sample.com/path?CipherText=MTYi00NDU0LTg5O****
	DecryptKeyUri *string `json:"DecryptKeyUri,omitempty" xml:"DecryptKeyUri,omitempty"`
	// Specifies the encryption type. Valid values:
	//
	// 	- PrivateEncryption: Alibaba Cloud proprietary cryptography
	//
	// 	- HLSEncryption: HTTP Live Streaming (HLS) encryption
	//
	// example:
	//
	// PrivateEncryption
	EncryptType *string `json:"EncryptType,omitempty" xml:"EncryptType,omitempty"`
	// The key service type for HLS encryption. Valid values:
	//
	// 	- KMS
	//
	// 	- Base64
	//
	// example:
	//
	// KMS
	KeyServiceType *string `json:"KeyServiceType,omitempty" xml:"KeyServiceType,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigEncryption) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigEncryption) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigEncryption) SetCipherText(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigEncryption {
	s.CipherText = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigEncryption) SetDecryptKeyUri(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigEncryption {
	s.DecryptKeyUri = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigEncryption) SetEncryptType(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigEncryption {
	s.EncryptType = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigEncryption) SetKeyServiceType(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigEncryption {
	s.KeyServiceType = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks struct {
	// The parameters that are used to overwrite the corresponding parameters of the template.
	OverwriteParams *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// The template ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks) SetOverwriteParams(v *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks) SetTemplateId(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams struct {
	// The horizontal offset of the watermark relative to the output video. Default value: 0.
	//
	// The following value types are supported:
	//
	// 	- Integer: the pixel value of the horizontal offset.
	//
	//     	- Valid values: [8,4096].
	//
	//     	- Unit: pixels.
	//
	// 	- Decimal: the ratio of the horizontal offset to the width of the output video.
	//
	//     	- Valid values: (0,1).
	//
	//     	- The decimal number can be accurate to four decimal places, such as 0.9999. Excessive digits are automatically discarded.
	//
	// example:
	//
	// 10
	Dx *string `json:"Dx,omitempty" xml:"Dx,omitempty"`
	// The vertical offset of the watermark relative to the output video. Default value: 0.
	//
	// The following value types are supported:
	//
	// 	- Integer: the pixel value of the horizontal offset.
	//
	//     	- Valid values: [8,4096].
	//
	//     	- Unit: pixels.
	//
	// 	- Decimal: the ratio of the vertical offset to the height of the output video.
	//
	//     	- Valid values: (0,1).
	//
	//     	- The decimal number can be accurate to four decimal places, such as 0.9999. Excessive digits are automatically discarded.
	//
	// example:
	//
	// 10
	Dy *string `json:"Dy,omitempty" xml:"Dy,omitempty"`
	// The watermark image file.
	File *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// The height of the watermark image in the output video. The following value types are supported:
	//
	// 	- Integer: the pixel value of the watermark height.
	//
	//     	- Valid values: [8,4096].
	//
	//     	- Unit: pixels.
	//
	// 	- Decimal: the ratio of the watermark height to the height of the output video.
	//
	//     	- Valid values: (0,1).
	//
	//     	- The decimal number can be accurate to four decimal places, such as 0.9999. Excessive digits are automatically discarded.
	//
	// example:
	//
	// 32
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The position of the watermark.
	//
	// 	- Valid values: TopRight, TopLeft, BottomRight, and BottomLeft.
	//
	// 	- Default value: TopRight.
	//
	// example:
	//
	// TopLeft
	ReferPos *string `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	// The time settings of the dynamic watermark.
	Timeline *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	// The width of the watermark in the output video. The following value types are supported:
	//
	// 	- Integer: the pixel value of the watermark width.
	//
	//     	- Valid values: [8,4096].
	//
	//     	- Unit: pixels.
	//
	// 	- Decimal: the ratio of the watermark width to the width of the output video.
	//
	//     	- Valid values: (0,1).
	//
	//     	- The decimal number can be accurate to four decimal places, such as 0.9999. Excessive digits are automatically discarded.
	//
	// example:
	//
	// 32
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) SetDx(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Dx = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) SetDy(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Dy = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) SetFile(v *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.File = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) SetHeight(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Height = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) SetReferPos(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.ReferPos = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) SetTimeline(v *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Timeline = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) SetWidth(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Width = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile struct {
	// The media object.
	//
	// 	- If Type is set to OSS, set this parameter to the URL of an OSS object. Both the OSS and HTTP protocols are supported.
	//
	// 	- If Type is set to Media, set this parameter to the ID of a media asset.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an OSS object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) SetMedia(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) SetType(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile {
	s.Type = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline struct {
	// The time range in which the watermark is displayed.
	//
	// 	- Valid values: integers and ToEND.
	//
	// 	- Default value: ToEND.
	//
	// example:
	//
	// ToEND
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The beginning of the time range in which the watermark is displayed.
	//
	// 	- Unit: seconds.
	//
	// 	- Value values: integers.
	//
	// 	- Default value: 0.
	//
	// example:
	//
	// 00:00:05
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) SetDuration(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) SetStart(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Start = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles struct {
	// The parameters that are used to overwrite the corresponding parameters of the template.
	OverwriteParams *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// The template ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles) SetOverwriteParams(v *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams) *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles) SetTemplateId(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams struct {
	// The file encoding format.
	//
	// example:
	//
	// UTF-8
	CharEnc *string `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	// The subtitle file.
	File *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// The format of the subtitle file.
	//
	// example:
	//
	// vtt
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams) SetCharEnc(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.CharEnc = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams) SetFile(v *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile) *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.File = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams) SetFormat(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.Format = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile struct {
	// The media object.
	//
	// 	- If Type is set to OSS, set this parameter to the URL of an OSS object. Both the OSS and HTTP protocols are supported.
	//
	// 	- If Type is set to Media, set this parameter to the ID of a media asset.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an OSS object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile) SetMedia(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile) SetType(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile {
	s.Type = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks struct {
	// The parameters that are used to overwrite the corresponding parameters of the template.
	OverwriteParams *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// The template ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks) SetOverwriteParams(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks) SetTemplateId(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams struct {
	// Specifies whether to the font size based on the output video dimensions. true / false, default: false
	//
	// example:
	//
	// false
	Adaptive *string `json:"Adaptive,omitempty" xml:"Adaptive,omitempty"`
	// The outline color of the text watermark. Default value: black. For more information, see BorderColor.
	//
	// example:
	//
	// #006400
	BorderColor *string `json:"BorderColor,omitempty" xml:"BorderColor,omitempty"`
	// The outline width of the text watermark.
	//
	// 	- Default value: 0.
	//
	// 	- Valid values: (0,4096].
	//
	// example:
	//
	// 0
	BorderWidth *int32 `json:"BorderWidth,omitempty" xml:"BorderWidth,omitempty"`
	// The watermark text. Base64 encoding is not required. The string must be encoded in UTF-8.
	//
	// example:
	//
	// 测试水印
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The transparency of the text.
	//
	// 	- Valid values: (0,1].
	//
	// 	- Default value: 1.
	//
	// example:
	//
	// 1.0
	FontAlpha *string `json:"FontAlpha,omitempty" xml:"FontAlpha,omitempty"`
	// The color of the text.
	//
	// example:
	//
	// #006400
	FontColor *string `json:"FontColor,omitempty" xml:"FontColor,omitempty"`
	// The font of the text. Default value: SimSun.
	//
	// example:
	//
	// SimSun
	FontName *string `json:"FontName,omitempty" xml:"FontName,omitempty"`
	// The size of the text.
	//
	// 	- Default value: 16.
	//
	// 	- Valid values: (4,120).
	//
	// example:
	//
	// 16
	FontSize *int32 `json:"FontSize,omitempty" xml:"FontSize,omitempty"`
	// The left margin of the text watermark.
	//
	// 	- Default value: 0.
	//
	// 	- Valid values: [0,4096].
	//
	// example:
	//
	// 10
	Left *string `json:"Left,omitempty" xml:"Left,omitempty"`
	// The top margin of the text.
	//
	// 	- Default value: 0.
	//
	// 	- Valid values: [0,4096].
	//
	// example:
	//
	// 10
	Top *string `json:"Top,omitempty" xml:"Top,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetAdaptive(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Adaptive = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetBorderColor(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.BorderColor = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetBorderWidth(v int32) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.BorderWidth = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetContent(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Content = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontAlpha(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontAlpha = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontColor(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontColor = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontName(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontName = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontSize(v int32) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontSize = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetLeft(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Left = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetTop(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Top = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode struct {
	// The parameters that are used to overwrite the corresponding parameters of the template.
	OverwriteParams *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// The template ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode) SetOverwriteParams(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode) SetTemplateId(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams struct {
	// The audio settings.
	Audio *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	// The encapsulation format settings.
	Container *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsContainer `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	// The encapsulation settings.
	MuxConfig *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	// The conditional transcoding configurations.
	TransConfig *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	// The video settings.
	Video *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams) SetAudio(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Audio = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams) SetContainer(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsContainer) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Container = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams) SetMuxConfig(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams {
	s.MuxConfig = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams) SetTransConfig(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams {
	s.TransConfig = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams) SetVideo(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Video = v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio struct {
	// The audio bitrate of the output file. Valid values: [8,1000]. Unit: Kbit/s. Default value: 128.
	//
	// example:
	//
	// 128
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The number of sound channels. Default value: 2.
	//
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// The audio codec. Valid values: AAC, MP3, VORBIS, and FLAC. Default value: AAC.
	//
	// example:
	//
	// AAC
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// The audio codec profile. If the Codec parameter is set to AAC, the valid values are aac_low, aac_he, aac_he_v2, aac_ld, and aac_eld.
	//
	// example:
	//
	// aac_low
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// Specifies whether to delete the audio stream.
	//
	// example:
	//
	// false
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// The sampling rate. Valid values: 22050, 32000, 44100, 48000, and 96000. Default value: 44100. Unit: Hz.
	//
	// example:
	//
	// 44100
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	// The volume configurations.
	Volume *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetBitrate(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Bitrate = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetChannels(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Channels = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetCodec(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Codec = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetProfile(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Profile = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetRemove(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Remove = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetSamplerate(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Samplerate = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetVolume(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Volume = v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume struct {
	// The output volume.
	//
	// example:
	//
	// -6
	IntegratedLoudnessTarget *string `json:"IntegratedLoudnessTarget,omitempty" xml:"IntegratedLoudnessTarget,omitempty"`
	// The volume range.
	//
	// example:
	//
	// 8
	LoudnessRangeTarget *string `json:"LoudnessRangeTarget,omitempty" xml:"LoudnessRangeTarget,omitempty"`
	// The volume adjustment method. Valid values:
	//
	// example:
	//
	// auto
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// The peak volume.
	//
	// example:
	//
	// -1
	TruePeak *string `json:"TruePeak,omitempty" xml:"TruePeak,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetIntegratedLoudnessTarget(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.IntegratedLoudnessTarget = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetLoudnessRangeTarget(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.LoudnessRangeTarget = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetMethod(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.Method = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetTruePeak(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.TruePeak = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsContainer struct {
	// The container format.
	//
	// example:
	//
	// mp4
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsContainer) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsContainer) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsContainer) SetFormat(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsContainer {
	s.Format = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig struct {
	// The segment settings.
	Segment *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) SetSegment(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig {
	s.Segment = v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment struct {
	// The segment length.
	//
	// example:
	//
	// 10
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The forced segmentation point in time.
	//
	// example:
	//
	// 2,3
	ForceSegTime *string `json:"ForceSegTime,omitempty" xml:"ForceSegTime,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetDuration(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetForceSegTime(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.ForceSegTime = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig struct {
	// The method that is used to adjust the resolution. This parameter takes effect only if both the Width and Height parameters are specified. You can use this parameter together with the LongShortMode parameter.
	//
	// Valid values: rescale, crop, pad, and none.
	//
	// Default value: none.
	//
	// example:
	//
	// none
	AdjDarMethod *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	// Specifies whether to check the audio bitrate. You can specify only one of the IsCheckAudioBitrate and IsCheckAudioBitrateFail parameters. The priority of the IsCheckAudioBitrateFail parameter is higher. Valid values:
	//
	// 	- true: checks the video resolution. If the bitrate of the input audio is less than that of the output audio, the bitrate of the input audio is used for transcoding.
	//
	// 	- false: does not check the video resolution.
	//
	// Default value:
	//
	// 	- If this parameter is not specified and the codec of the output audio is different from that of the input audio, the default value is false.
	//
	// 	- If this parameter is not specified and the codec of the output audio is the same as that of the input audio, the default value is true.
	//
	// example:
	//
	// true
	IsCheckAudioBitrate *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	// Specifies whether to check the audio bitrate. You can specify only one of the IsCheckAudioBitrate and IsCheckAudioBitrateFail parameters. The priority of the IsCheckAudioBitrateFail parameter is higher. Valid values:
	//
	// 	- true: checks the video resolution. If the bitrate of the input audio is less than that of the output audio, the transcoding job fails.
	//
	// 	- false: does not check the video resolution.
	//
	// Default value: false.
	//
	// example:
	//
	// true
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
	// Specifies whether to check the video resolution. You can specify only one of the IsCheckReso and IsCheckResoFail parameters. The priority of the IsCheckResoFail parameter is higher. Valid values:
	//
	// 	- true: checks the video resolution. If the width or height of the input video is less than that of the output video, the resolution of the input video is used for transcoding.
	//
	// 	- false: does not check the video resolution.
	//
	// Default value: false.
	//
	// example:
	//
	// true
	IsCheckReso *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	// Specifies whether to check the video resolution. You can specify only one of the IsCheckReso and IsCheckResoFail parameters. The priority of the IsCheckResoFail parameter is higher. Valid values:
	//
	// 	- true: checks the video resolution. If the width or height of the input video is less than that of the output video, the transcoding job fails.
	//
	// 	- false: does not check the video resolution.
	//
	// Default value: false.
	//
	// example:
	//
	// true
	IsCheckResoFail *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	// Specifies whether to check the video bitrate. You can specify only one of the IsCheckVideoBitrate and IsCheckVideoBitrateFail parameters. The priority of the IsCheckVideoBitrateFail parameter is higher. Valid values:
	//
	// 	- true: checks the video resolution. If the bitrate of the input video is less than that of the output video, the bitrate of the input video is used for transcoding.
	//
	// 	- false: does not check the video resolution.
	//
	// Default value: false.
	//
	// example:
	//
	// true
	IsCheckVideoBitrate *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	// Specifies whether to check the video bitrate. You can specify only one of the IsCheckVideoBitrate and IsCheckVideoBitrateFail parameters. The priority of the IsCheckVideoBitrateFail parameter is higher. Valid values:
	//
	// 	- true: checks the video resolution. If the bitrate of the input video is less than that of the output video, the transcoding job fails.
	//
	// 	- false: does not check the video resolution.
	//
	// Default value: false.
	//
	// example:
	//
	// true
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	// The video transcoding mode. Valid values:
	//
	// 	- onepass: You can set this parameter to onepass if the Bitrate parameter is set to ABR. The encoding speed of this mode is faster than that of the twopass mode.
	//
	// 	- twopass: You can set this parameter to twopass if the Bitrate parameter is set to VBR. The encoding speed of this mode is slower than that of the onepass mode.
	//
	// 	- CBR: the constant bitrate mode.
	//
	// Default value: onepass.
	//
	// example:
	//
	// onepass
	TransMode *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetAdjDarMethod(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckAudioBitrate(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckAudioBitrateFail(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckReso(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckResoFail(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckVideoBitrate(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckVideoBitrateFail(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetTransMode(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.TransMode = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo struct {
	// The maximum adaptive bitrate (ABR). This parameter takes effect only for Narrowband HD 1.0. Valid values: [10,50000]. Unit: Kbit/s.
	//
	// example:
	//
	// 6000
	AbrMax *string `json:"AbrMax,omitempty" xml:"AbrMax,omitempty"`
	// The average video bitrate. Valid values: [10,50000]. Unit: Kbit/s.
	//
	// example:
	//
	// 3000
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The buffer size. Valid values: [1000,128000]. Default value: 6000. Unit: KB.
	//
	// example:
	//
	// 6000
	Bufsize *string `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	// The encoding format.
	//
	// example:
	//
	// H.264
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// The constant rate factor (CRF). Valid values: [0,51]. Default value: 23 if the encoding format is H.264, or 26 if the encoding format is H.265.
	//
	// >  If this parameter is specified, the setting of the bitrate becomes invalid.
	//
	// example:
	//
	// 23
	Crf *string `json:"Crf,omitempty" xml:"Crf,omitempty"`
	// The method of video cropping. Valid values:
	//
	// 	- border: automatically detects and removes black bars.
	//
	// 	- A value in the width:height:left:top format: crops the videos based on the custom settings. Example: 1280:800:0:140.
	//
	// example:
	//
	// 1280:800:0:140
	Crop *string `json:"Crop,omitempty" xml:"Crop,omitempty"`
	// The frame rate. Valid values:(0,60]. Default value: the frame rate of the input file.
	//
	// >  The value is 60 if the frame rate of the input file exceeds 60.
	//
	// example:
	//
	// 25
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// The maximum number of frames between keyframes. Valid values: [1,1080000]. Default value: 250.
	//
	// example:
	//
	// 250
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// The height of the video. Valid values: [128,4096]. Unit: pixels. Default value: the original height of the video.
	//
	// example:
	//
	// 1080
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// Specifies whether to enable the auto-rotate screen feature.
	//
	// example:
	//
	// false
	LongShortMode *string `json:"LongShortMode,omitempty" xml:"LongShortMode,omitempty"`
	// The maximum bitrate of the video. Valid values: [10,50000]. Unit: Kbit/s.
	//
	// example:
	//
	// 9000
	Maxrate *string `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	// The black bars added to the video. Format: width:height:left:top. Example: 1280:800:0:140.
	//
	// example:
	//
	// 1280:800:0:140
	Pad *string `json:"Pad,omitempty" xml:"Pad,omitempty"`
	// The pixel format of the video. Valid values: standard pixel formats such as yuv420p and yuvj420p.
	//
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// The preset video algorithm. This parameter takes effect only if the encoding format is H.264. Valid values: veryfast, fast, medium, slow, and slower. Default value: medium.
	//
	// example:
	//
	// medium
	Preset *string `json:"Preset,omitempty" xml:"Preset,omitempty"`
	// The encoding profile. Valid values: baseline, main, and high.
	//
	// 	- baseline: applicable to mobile devices.
	//
	// 	- main: applicable to standard-definition devices.
	//
	// 	- high: applicable to high-definition devices.
	//
	// Default value: high.
	//
	// example:
	//
	// Main
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// Specifies whether to remove the video.
	//
	// example:
	//
	// false
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// The scan mode. Valid values: interlaced and progressive.
	//
	// example:
	//
	// progressive
	ScanMode *string `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	// The width of the video. Valid values: [128,4096]. Unit: pixels. Default value: the original width of the video.
	//
	// example:
	//
	// 1920
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetAbrMax(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.AbrMax = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetBitrate(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Bitrate = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetBufsize(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Bufsize = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCodec(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Codec = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCrf(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Crf = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCrop(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Crop = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetFps(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Fps = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetGop(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Gop = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetHeight(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Height = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetLongShortMode(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.LongShortMode = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetMaxrate(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Maxrate = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPad(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Pad = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPixFmt(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.PixFmt = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPreset(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Preset = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetProfile(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Profile = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetRemove(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Remove = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetScanMode(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.ScanMode = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetWidth(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Width = &v
	return s
}

type SubmitTranscodeJobRequestScheduleConfig struct {
	// The ID of the MPS queue to which the job was submitted.
	//
	// example:
	//
	// e37ebee5d98b4781897f6086e89f9c56
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The priority of the job. Valid values: 1 to 10. The greater the value, the higher the priority.
	//
	// example:
	//
	// 5
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitTranscodeJobRequestScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestScheduleConfig) SetPipelineId(v string) *SubmitTranscodeJobRequestScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitTranscodeJobRequestScheduleConfig) SetPriority(v int32) *SubmitTranscodeJobRequestScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitTranscodeJobShrinkRequest struct {
	// The client token that is used to ensure the idempotence of the request.
	//
	// example:
	//
	// ****12e8864746a0a398****
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The input group of the job. An input of a single file indicates a transcoding job. An input of multiple files indicates an audio and video stream merge job.
	//
	// This parameter is required.
	//
	// example:
	//
	// job-name
	InputGroupShrink *string `json:"InputGroup,omitempty" xml:"InputGroup,omitempty"`
	// The job name.
	//
	// example:
	//
	// job-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output group of the job.
	//
	// This parameter is required.
	//
	// example:
	//
	// user-data
	OutputGroupShrink *string `json:"OutputGroup,omitempty" xml:"OutputGroup,omitempty"`
	// The scheduling information about the job.
	//
	// example:
	//
	// job-name
	ScheduleConfigShrink *string `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty"`
	// The custom settings. The value must be in the JSON format and can be up to 512 bytes in length. You can specify a [custom callback URL](https://help.aliyun.com/document_detail/451631.html).
	//
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitTranscodeJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobShrinkRequest) SetClientToken(v string) *SubmitTranscodeJobShrinkRequest {
	s.ClientToken = &v
	return s
}

func (s *SubmitTranscodeJobShrinkRequest) SetInputGroupShrink(v string) *SubmitTranscodeJobShrinkRequest {
	s.InputGroupShrink = &v
	return s
}

func (s *SubmitTranscodeJobShrinkRequest) SetName(v string) *SubmitTranscodeJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *SubmitTranscodeJobShrinkRequest) SetOutputGroupShrink(v string) *SubmitTranscodeJobShrinkRequest {
	s.OutputGroupShrink = &v
	return s
}

func (s *SubmitTranscodeJobShrinkRequest) SetScheduleConfigShrink(v string) *SubmitTranscodeJobShrinkRequest {
	s.ScheduleConfigShrink = &v
	return s
}

func (s *SubmitTranscodeJobShrinkRequest) SetUserData(v string) *SubmitTranscodeJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitTranscodeJobResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// TranscodeParentJobWithSubJobDTO
	TranscodeParentJob *SubmitTranscodeJobResponseBodyTranscodeParentJob `json:"TranscodeParentJob,omitempty" xml:"TranscodeParentJob,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBody) SetRequestId(v string) *SubmitTranscodeJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBody) SetTranscodeParentJob(v *SubmitTranscodeJobResponseBodyTranscodeParentJob) *SubmitTranscodeJobResponseBody {
	s.TranscodeParentJob = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJob struct {
	// The time when the job was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-01-12T08:49:41Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the job was complete. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-01-12T08:49:41Z
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The input group of the job. An input of a single file indicates a transcoding job. An input of multiple files indicates an audio and video stream merge job.
	InputGroup []*SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup `json:"InputGroup,omitempty" xml:"InputGroup,omitempty" type:"Repeated"`
	// The number of subjobs.
	//
	// example:
	//
	// 1
	JobCount *int32 `json:"JobCount,omitempty" xml:"JobCount,omitempty"`
	// The job name.
	//
	// example:
	//
	// transcode-job
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output group of the job.
	OutputGroup []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup `json:"OutputGroup,omitempty" xml:"OutputGroup,omitempty" type:"Repeated"`
	// The main job ID.
	//
	// example:
	//
	// 8b2198504dd340b7b3c9842a74fc9baa
	ParentJobId *string `json:"ParentJobId,omitempty" xml:"ParentJobId,omitempty"`
	// The completion percentage of the job.
	//
	// example:
	//
	// 0
	Percent *int32 `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The ID of the request that submitted the job.
	//
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The scheduling configuration of the job.
	ScheduleConfig *SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// The state of the job. Success: At least one of the subjobs is successful. Fail: All subjobs failed.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The time when the job was submitted. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-01-12T08:49:41Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// The list of subjobs.
	TranscodeJobList []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList `json:"TranscodeJobList,omitempty" xml:"TranscodeJobList,omitempty" type:"Repeated"`
	// The source of the job. Valid values: API, WorkFlow, and Console.
	//
	// example:
	//
	// API
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// The user data.
	//
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJob) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJob) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetCreateTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.CreateTime = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetFinishTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.FinishTime = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetInputGroup(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.InputGroup = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetJobCount(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.JobCount = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.Name = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetOutputGroup(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.OutputGroup = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetParentJobId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.ParentJobId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetPercent(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.Percent = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetRequestId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.RequestId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetScheduleConfig(v *SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetStatus(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.Status = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetSubmitTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.SubmitTime = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetTranscodeJobList(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.TranscodeJobList = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetTriggerSource(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.TriggerSource = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetUserData(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.UserData = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup struct {
	// The media object.
	//
	// 	- If Type is set to OSS, set this parameter to the URL of an OSS object. Both the OSS and HTTP protocols are supported.
	//
	// 	- If Type is set to Media, set this parameter to the ID of a media asset.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an OSS object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup) SetMedia(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup) SetType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup {
	s.Type = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup struct {
	// The output file configuration.
	Output *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// The job processing configuration.
	ProcessConfig *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig `json:"ProcessConfig,omitempty" xml:"ProcessConfig,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup) SetOutput(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup {
	s.Output = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup) SetProcessConfig(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup {
	s.ProcessConfig = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput struct {
	// The media object.
	//
	// 	- If Type is set to OSS, set this parameter to the URL of an OSS object. Both the OSS and HTTP protocols are supported.
	//
	// 	- If Type is set to Media, set this parameter to the ID of a media asset.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an OSS object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) SetMedia(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) SetType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput {
	s.Type = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig struct {
	// The multi-input stream merge configuration.
	CombineConfigs []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs `json:"CombineConfigs,omitempty" xml:"CombineConfigs,omitempty" type:"Repeated"`
	// The encryption settings.
	Encryption *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption `json:"Encryption,omitempty" xml:"Encryption,omitempty" type:"Struct"`
	// The watermark configuration of an image.
	ImageWatermarks []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks `json:"ImageWatermarks,omitempty" xml:"ImageWatermarks,omitempty" type:"Repeated"`
	// The subtitle configuration.
	Subtitles []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles `json:"Subtitles,omitempty" xml:"Subtitles,omitempty" type:"Repeated"`
	// The configurations of the text watermark.
	TextWatermarks []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks `json:"TextWatermarks,omitempty" xml:"TextWatermarks,omitempty" type:"Repeated"`
	// The transcoding configuration.
	Transcode *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode `json:"Transcode,omitempty" xml:"Transcode,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetCombineConfigs(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.CombineConfigs = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetEncryption(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.Encryption = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetImageWatermarks(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.ImageWatermarks = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetSubtitles(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.Subtitles = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetTextWatermarks(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.TextWatermarks = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetTranscode(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.Transcode = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs struct {
	// The audio stream index.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0 或 exclude
	AudioIndex *string `json:"AudioIndex,omitempty" xml:"AudioIndex,omitempty"`
	// The duration of the input stream. The default value is the duration of the video.
	//
	// example:
	//
	// 20.0
	Duration *float64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The start time of the input stream. Default value: 0.
	//
	// example:
	//
	// 0.0
	Start *float64 `json:"Start,omitempty" xml:"Start,omitempty"`
	// The video stream index.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0 或 exclude
	VideoIndex *string `json:"VideoIndex,omitempty" xml:"VideoIndex,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) SetAudioIndex(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs {
	s.AudioIndex = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) SetDuration(v float64) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) SetStart(v float64) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs {
	s.Start = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) SetVideoIndex(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs {
	s.VideoIndex = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption struct {
	// The ciphertext of HLS encryption.
	//
	// example:
	//
	// MTYi00NDU0LTg5O****
	CipherText *string `json:"CipherText,omitempty" xml:"CipherText,omitempty"`
	// The address of the decryption service for HLS encryption.
	//
	// example:
	//
	// https://sample.com/path?CipherText=MTYi00NDU0LTg5O****
	DecryptKeyUri *string `json:"DecryptKeyUri,omitempty" xml:"DecryptKeyUri,omitempty"`
	// Specifies the encryption type.
	//
	// example:
	//
	// PrivateEncryption
	EncryptType *string `json:"EncryptType,omitempty" xml:"EncryptType,omitempty"`
	// The type of the key service. Valid values: KMS and Base64.
	//
	// example:
	//
	// KMS
	KeyServiceType *string `json:"KeyServiceType,omitempty" xml:"KeyServiceType,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) SetCipherText(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption {
	s.CipherText = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) SetDecryptKeyUri(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption {
	s.DecryptKeyUri = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) SetEncryptType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption {
	s.EncryptType = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) SetKeyServiceType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption {
	s.KeyServiceType = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks struct {
	// The parameters that are used to overwrite the corresponding parameters of the template.
	OverwriteParams *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// The template ID.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) SetOverwriteParams(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) SetTemplateId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams struct {
	// The horizontal offset of the watermark relative to the output video. Default value: 0.
	//
	// The following value types are supported:
	//
	// 	- Integer: the pixel value of the horizontal offset.
	//
	//     	- Valid values: [8,4096].
	//
	//     	- Unit: pixels.
	//
	// 	- Decimal: the ratio of the horizontal offset to the width of the output video.
	//
	//     	- Valid values: (0,1).
	//
	//     	- The decimal number can be accurate to four decimal places, such as 0.9999. Excessive digits are automatically discarded.
	//
	// example:
	//
	// 10
	Dx *string `json:"Dx,omitempty" xml:"Dx,omitempty"`
	// The vertical offset of the watermark relative to the output video. Default value: 0.
	//
	// The following value types are supported:
	//
	// 	- Integer: the pixel value of the horizontal offset.
	//
	//     	- Valid values: [8,4096].
	//
	//     	- Unit: pixels.
	//
	// 	- Decimal: the ratio of the vertical offset to the height of the output video.
	//
	//     	- Valid values: (0,1).
	//
	//     	- The decimal number can be accurate to four decimal places, such as 0.9999. Excessive digits are automatically discarded.
	//
	// example:
	//
	// 10
	Dy *string `json:"Dy,omitempty" xml:"Dy,omitempty"`
	// The watermark image file.
	File *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// The height of the watermark image in the output video. The following value types are supported:
	//
	// 	- Integer: the pixel value of the watermark height.
	//
	//     	- Valid values: [8,4096].
	//
	//     	- Unit: pixels.
	//
	// 	- Decimal: the ratio of the watermark height to the height of the output video.
	//
	//     	- Valid values: (0,1).
	//
	//     	- The decimal number can be accurate to four decimal places, such as 0.9999. Excessive digits are automatically discarded.
	//
	// example:
	//
	// 32
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The position of the watermark.
	//
	// 	- Valid values: TopRight, TopLeft, BottomRight, and BottomLeft.
	//
	// 	- Default value: TopRight.
	//
	// example:
	//
	// TopLeft
	ReferPos *string `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	// The time settings of the dynamic watermark.
	Timeline *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	// The width of the watermark in the output video. The following value types are supported:
	//
	// 	- Integer: the pixel value of the watermark width.
	//
	//     	- Valid values: [8,4096].
	//
	//     	- Unit: pixels.
	//
	// 	- Decimal: the ratio of the watermark width to the width of the output video.
	//
	//     	- Valid values: (0,1).
	//
	//     	- The decimal number can be accurate to four decimal places, such as 0.9999. Excessive digits are automatically discarded.
	//
	// example:
	//
	// 32
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetDx(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Dx = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetDy(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Dy = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetFile(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.File = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetHeight(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Height = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetReferPos(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.ReferPos = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetTimeline(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Timeline = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetWidth(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Width = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile struct {
	// The media object.
	//
	// 	- If Type is set to OSS, set this parameter to the URL of an OSS object. Both the OSS and HTTP protocols are supported.
	//
	// 	- If Type is set to Media, set this parameter to the ID of a media asset.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an OSS object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) SetMedia(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) SetType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile {
	s.Type = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline struct {
	// The time range in which the watermark is displayed.
	//
	// 	- Valid values: integers and ToEND.
	//
	// 	- Default value: ToEND.
	//
	// example:
	//
	// ToEND
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The beginning of the time range in which the watermark is displayed.
	//
	// 	- Unit: seconds.
	//
	// 	- Value values: integers.
	//
	// 	- Default value: 0.
	//
	// example:
	//
	// 00:00:05
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) SetDuration(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) SetStart(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Start = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles struct {
	// The parameters that are used to overwrite the corresponding parameters of the template.
	OverwriteParams *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// The template ID.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) SetOverwriteParams(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) SetTemplateId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams struct {
	// The file encoding format.
	//
	// example:
	//
	// UTF-8
	CharEnc *string `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	// The subtitle file.
	File *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// The format of the subtitle file.
	//
	// example:
	//
	// vtt
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) SetCharEnc(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.CharEnc = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) SetFile(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.File = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) SetFormat(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.Format = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile struct {
	// The media object. If Type is set to OSS, set this parameter to the URL of an OSS object. Both the OSS and HTTP protocols are supported. If Type is set to Media, set this parameter to the ID of a media asset.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an OSS object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) SetMedia(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) SetType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile {
	s.Type = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks struct {
	// The parameters that are used to overwrite the corresponding parameters of the template.
	OverwriteParams *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// The template ID.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) SetOverwriteParams(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) SetTemplateId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams struct {
	// Specifies whether to the font size based on the output video dimensions.
	//
	// 	- true: false
	//
	// 	- default: false
	//
	// example:
	//
	// false
	Adaptive *string `json:"Adaptive,omitempty" xml:"Adaptive,omitempty"`
	// The outline color of the text watermark. Default value: black. For more information, see BorderColor.
	//
	// example:
	//
	// #006400
	BorderColor *string `json:"BorderColor,omitempty" xml:"BorderColor,omitempty"`
	// The outline width of the text watermark.
	//
	// 	- Default value: 0.
	//
	// 	- Valid values: (0,4096].
	//
	// example:
	//
	// 0
	BorderWidth *int32 `json:"BorderWidth,omitempty" xml:"BorderWidth,omitempty"`
	// The watermark text. Base64 encoding is not required. The string must be encoded in UTF-8.
	//
	// example:
	//
	// 测试水印
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The transparency of the text.
	//
	// 	- Valid values: (0,1].
	//
	// 	- Default value: 1.
	//
	// example:
	//
	// 1.0
	FontAlpha *string `json:"FontAlpha,omitempty" xml:"FontAlpha,omitempty"`
	// The color of the text.
	//
	// example:
	//
	// #006400
	FontColor *string `json:"FontColor,omitempty" xml:"FontColor,omitempty"`
	// The font of the text. Default value: SimSun.
	//
	// example:
	//
	// SimSun
	FontName *string `json:"FontName,omitempty" xml:"FontName,omitempty"`
	// The size of the text.
	//
	// 	- Default value: 16.
	//
	// 	- Valid values: (4,120).
	//
	// example:
	//
	// 16
	FontSize *int32 `json:"FontSize,omitempty" xml:"FontSize,omitempty"`
	// The left margin of the text watermark.
	//
	// 	- Default value: 0.
	//
	// 	- Valid values: [0,4096].
	//
	// example:
	//
	// 10
	Left *string `json:"Left,omitempty" xml:"Left,omitempty"`
	// The top margin of the text.
	//
	// 	- Default value: 0.
	//
	// 	- Valid values: [0,4096].
	//
	// example:
	//
	// 10
	Top *string `json:"Top,omitempty" xml:"Top,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetAdaptive(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Adaptive = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetBorderColor(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.BorderColor = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetBorderWidth(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.BorderWidth = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetContent(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Content = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontAlpha(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontAlpha = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontColor(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontColor = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontName = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontSize(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontSize = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetLeft(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Left = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetTop(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Top = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode struct {
	// The parameters that are used to overwrite the corresponding parameters of the template.
	OverwriteParams *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// The template ID.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) SetOverwriteParams(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) SetTemplateId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams struct {
	// The audio settings.
	Audio *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	// The encapsulation format settings.
	Container *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	// The encapsulation settings.
	MuxConfig *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	// The conditional transcoding configurations.
	TransConfig *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	// The video settings.
	Video *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetAudio(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Audio = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetContainer(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Container = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetMuxConfig(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.MuxConfig = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetTransConfig(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.TransConfig = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetVideo(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Video = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio struct {
	// The audio bitrate of the output file.
	//
	// 	- Valid values: [8,1000].
	//
	// 	- Unit: Kbit/s.
	//
	// 	- Default value: 128.
	//
	// example:
	//
	// 128
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The number of sound channels. Default value: 2.
	//
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// The audio codec. Valid values: AAC, MP3, VORBIS, and FLAC. Default value: AAC.
	//
	// example:
	//
	// AAC
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// The audio codec profile. If the Codec parameter is set to AAC, the valid values are aac_low, aac_he, aac_he_v2, aac_ld, and aac_eld.
	//
	// example:
	//
	// aac_low
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// Specifies whether to delete the audio stream.
	//
	// example:
	//
	// false
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// The sampling rate.
	//
	// 	- Valid values: 22050, 32000, 44100, 48000, and 96000. Default value: 44100.
	//
	// 	- Unit: Hz.
	//
	// example:
	//
	// 44100
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	// The volume configurations.
	Volume *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetBitrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Bitrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetChannels(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Channels = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetCodec(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Codec = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetProfile(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Profile = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetRemove(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Remove = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetSamplerate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Samplerate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetVolume(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Volume = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume struct {
	// The output volume.
	//
	// example:
	//
	// -6
	IntegratedLoudnessTarget *string `json:"IntegratedLoudnessTarget,omitempty" xml:"IntegratedLoudnessTarget,omitempty"`
	// The volume range.
	//
	// example:
	//
	// 8
	LoudnessRangeTarget *string `json:"LoudnessRangeTarget,omitempty" xml:"LoudnessRangeTarget,omitempty"`
	// The volume adjustment method. Valid values:
	//
	// example:
	//
	// auto
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// The peak volume.
	//
	// example:
	//
	// -1
	TruePeak *string `json:"TruePeak,omitempty" xml:"TruePeak,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetIntegratedLoudnessTarget(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.IntegratedLoudnessTarget = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetLoudnessRangeTarget(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.LoudnessRangeTarget = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetMethod(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.Method = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetTruePeak(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.TruePeak = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer struct {
	// The container format.
	//
	// example:
	//
	// mp4
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer) SetFormat(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer {
	s.Format = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig struct {
	// The segment settings.
	Segment *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) SetSegment(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig {
	s.Segment = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment struct {
	// The segment length.
	//
	// example:
	//
	// 10
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The forced segmentation point in time.
	//
	// example:
	//
	// 2,3
	ForceSegTime *string `json:"ForceSegTime,omitempty" xml:"ForceSegTime,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetDuration(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetForceSegTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.ForceSegTime = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig struct {
	// The method that is used to adjust the resolution. This parameter takes effect only if both the Width and Height parameters are specified. You can use this parameter together with the LongShortMode parameter.
	//
	// Valid values: rescale, crop, pad, and none.
	//
	// Default value: none.
	//
	// example:
	//
	// none
	AdjDarMethod *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	// Specifies whether to check the audio bitrate. You can specify only one of the IsCheckAudioBitrate and IsCheckAudioBitrateFail parameters. The priority of the IsCheckAudioBitrateFail parameter is higher. Valid values:
	//
	// 	- true: checks the video resolution. If the bitrate of the input audio is less than that of the output audio, the bitrate of the input audio is used for transcoding.
	//
	// 	- false: does not check the video resolution.
	//
	// Default value:
	//
	// 	- If this parameter is not specified and the codec of the output audio is different from that of the input audio, the default value is false.
	//
	// 	- If this parameter is not specified and the codec of the output audio is the same as that of the input audio, the default value is true.
	//
	// example:
	//
	// true
	IsCheckAudioBitrate *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	// Specifies whether to check the audio bitrate. You can specify only one of the IsCheckAudioBitrate and IsCheckAudioBitrateFail parameters. The priority of the IsCheckAudioBitrateFail parameter is higher. Valid values:
	//
	// 	- true: checks the video resolution. If the bitrate of the input audio is less than that of the output audio, the transcoding job fails.
	//
	// 	- false: does not check the video resolution.
	//
	// Default value: false.
	//
	// example:
	//
	// true
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
	// Specifies whether to check the video resolution. You can specify only one of the IsCheckReso and IsCheckResoFail parameters. The priority of the IsCheckResoFail parameter is higher. Valid values:
	//
	// 	- true: checks the video resolution. If the width or height of the input video is less than that of the output video, the resolution of the input video is used for transcoding.
	//
	// 	- false: does not check the video resolution.
	//
	// Default value: false.
	//
	// example:
	//
	// true
	IsCheckReso *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	// Specifies whether to check the video resolution. You can specify only one of the IsCheckReso and IsCheckResoFail parameters. The priority of the IsCheckResoFail parameter is higher. Valid values:
	//
	// 	- true: checks the video resolution. If the width or height of the input video is less than that of the output video, the transcoding job fails.
	//
	// 	- false: does not check the video resolution.
	//
	// Default value: false.
	//
	// example:
	//
	// true
	IsCheckResoFail *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	// Specifies whether to check the video bitrate. You can specify only one of the IsCheckVideoBitrate and IsCheckVideoBitrateFail parameters. The priority of the IsCheckVideoBitrateFail parameter is higher. Valid values:
	//
	// 	- true: checks the video resolution. If the bitrate of the input video is less than that of the output video, the bitrate of the input video is used for transcoding.
	//
	// 	- false: does not check the video resolution.
	//
	// Default value: false.
	//
	// example:
	//
	// true
	IsCheckVideoBitrate *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	// Specifies whether to check the video bitrate. You can specify only one of the IsCheckVideoBitrate and IsCheckVideoBitrateFail parameters. The priority of the IsCheckVideoBitrateFail parameter is higher. Valid values:
	//
	// 	- true: checks the video resolution. If the bitrate of the input video is less than that of the output video, the transcoding job fails.
	//
	// 	- false: does not check the video resolution.
	//
	// Default value: false.
	//
	// example:
	//
	// true
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	// The video transcoding mode. Valid values:
	//
	// 	- onepass: You can set this parameter to onepass if the Bitrate parameter is set to ABR. The encoding speed of this mode is faster than that of the twopass mode.
	//
	// 	- twopass: You can set this parameter to twopass if the Bitrate parameter is set to VBR. The encoding speed of this mode is slower than that of the onepass mode.
	//
	// 	- CBR: the constant bitrate mode.
	//
	// Default value: onepass.
	//
	// example:
	//
	// onepass
	TransMode *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetAdjDarMethod(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckAudioBitrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckAudioBitrateFail(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckReso(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckResoFail(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckVideoBitrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckVideoBitrateFail(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetTransMode(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.TransMode = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo struct {
	// The maximum ABR. This parameter takes effect only for Narrowband HD 1.0.
	//
	// 	- Valid values: [10,50000].
	//
	// 	- Unit: Kbit/s.
	//
	// example:
	//
	// 6000
	AbrMax *string `json:"AbrMax,omitempty" xml:"AbrMax,omitempty"`
	// The average bitrate of the video.
	//
	// 	- Valid values: [10,50000].
	//
	// 	- Unit: Kbit/s.
	//
	// example:
	//
	// 3000
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The buffer size.
	//
	// 	- Valid values: [1000,128000].
	//
	// 	- Default value: 6000.
	//
	// 	- Unit: KB.
	//
	// example:
	//
	// 6000
	Bufsize *string `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	// The encoding format.
	//
	// example:
	//
	// H.264
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// The constant rate factor.
	//
	// 	- Valid values: [0,51].
	//
	// 	- Default value: 23 if the encoding format is H.264, or Default value when the Codec parameter is set to H.265: 26.
	//
	// If this parameter is specified, the value of Bitrate becomes invalid.
	//
	// example:
	//
	// 23
	Crf *string `json:"Crf,omitempty" xml:"Crf,omitempty"`
	// The method of video cropping. Valid values:
	//
	// 	- border: automatically detects and removes black bars.
	//
	// 	- A value in the width:height:left:top format: crops the videos based on the custom settings. Example: 1280:800:0:140.
	//
	// example:
	//
	// 1280:800:0:140
	Crop *string `json:"Crop,omitempty" xml:"Crop,omitempty"`
	// The frame rate.
	//
	// 	- Valid values: (0,60].
	//
	// 	- The value is 60 if the frame rate of the input video exceeds 60.
	//
	// 	- Default value: the frame rate of the input video.
	//
	// example:
	//
	// 25
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// The maximum number of frames between two keyframes.
	//
	// 	- Valid values: [1,1080000].
	//
	// 	- Default value: 250.
	//
	// example:
	//
	// 250
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// The height of the output video.
	//
	// 	- Valid values: [128,4096].
	//
	// 	- Unit: pixels.
	//
	// 	- Default value: the height of the input video.
	//
	// example:
	//
	// 1080
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// Specifies whether to enable the auto-rotate screen feature.
	//
	// example:
	//
	// false
	LongShortMode *string `json:"LongShortMode,omitempty" xml:"LongShortMode,omitempty"`
	// The maximum bitrate of the output video.
	//
	// 	- Valid values: [10,50000].
	//
	// 	- Unit: Kbit/s.
	//
	// example:
	//
	// 9000
	Maxrate *string `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	// The black bars added to the video.
	//
	// 	- Format: width:height:left:top.
	//
	// 	- Example: 1280:800:0:140.
	//
	// example:
	//
	// 1280:800:0:140
	Pad *string `json:"Pad,omitempty" xml:"Pad,omitempty"`
	// The pixel format of the video. Valid values: standard pixel formats such as yuv420p and yuvj420p.
	//
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// The preset video algorithm. This parameter takes effect only if the encoding format is H.264. Valid values: veryfast, fast, medium, slow, and slower. Default value: medium.
	//
	// example:
	//
	// medium
	Preset *string `json:"Preset,omitempty" xml:"Preset,omitempty"`
	// The encoding profile. Valid values: baseline, main, and high.
	//
	// 	- baseline: applicable to mobile devices.
	//
	// 	- main: applicable to standard-definition devices.
	//
	// 	- high: applicable to high-definition devices.
	//
	// Default value: high.
	//
	// example:
	//
	// Main
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// Specifies whether to remove the video.
	//
	// example:
	//
	// false
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// The scan mode. Valid values: interlaced and progressive.
	//
	// example:
	//
	// progressive
	ScanMode *string `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	// The width of the output video.
	//
	// 	- Valid values: [128,4096].
	//
	// 	- Unit: pixels.
	//
	// 	- Default value: the width of the input video.
	//
	// example:
	//
	// 1920
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetAbrMax(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.AbrMax = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetBitrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Bitrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetBufsize(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Bufsize = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCodec(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Codec = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCrf(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Crf = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCrop(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Crop = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetFps(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Fps = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetGop(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Gop = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetHeight(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Height = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetLongShortMode(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.LongShortMode = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetMaxrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Maxrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPad(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Pad = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPixFmt(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.PixFmt = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPreset(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Preset = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetProfile(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Profile = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetRemove(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Remove = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetScanMode(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.ScanMode = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetWidth(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Width = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig struct {
	// The ID of the MPS queue to which the job was submitted.
	//
	// example:
	//
	// e37ebee5d98b4781897f6086e89f9c56
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The priority of the job. Valid values: 1 to 10. The greater the value, the higher the priority.
	//
	// example:
	//
	// 5
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) SetPipelineId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) SetPriority(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList struct {
	// The time when the job was created.
	//
	// example:
	//
	// 2022-01-12T08:49:41Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the job was complete.
	//
	// example:
	//
	// 2022-01-12T08:49:41Z
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The input group of the job. An input of a single file indicates a transcoding job. An input of multiple files indicates an audio and video stream merge job.
	InputGroup []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup `json:"InputGroup,omitempty" xml:"InputGroup,omitempty" type:"Repeated"`
	// The subjob ID.
	//
	// example:
	//
	// 7d6a7e0d4db2457a8d45ff5d43e1bf0a
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The index number of the subjob in the entire job.
	//
	// example:
	//
	// 0
	JobIndex *int32 `json:"JobIndex,omitempty" xml:"JobIndex,omitempty"`
	// The job name.
	//
	// example:
	//
	// transcode-job
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The media information about the video generated by the job.
	OutFileMeta *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta `json:"OutFileMeta,omitempty" xml:"OutFileMeta,omitempty" type:"Struct"`
	// The output file configuration.
	Output *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// The main job ID.
	//
	// example:
	//
	// 8b2198504dd340b7b3c9842a74fc9baa
	ParentJobId *string `json:"ParentJobId,omitempty" xml:"ParentJobId,omitempty"`
	// The transcoding configuration.
	ProcessConfig *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig `json:"ProcessConfig,omitempty" xml:"ProcessConfig,omitempty" type:"Struct"`
	// The ID of the request that submitted the job.
	//
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The scheduling information about the job.
	ScheduleConfig *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// The state of the transcoding job. Valid values:
	//
	// 	- Init: The job is submitted.
	//
	// 	- Processing: The job is in progress.
	//
	// 	- Success: The job is successful.
	//
	// 	- Fail: The job failed.
	//
	// 	- Deleted: The job is deleted.
	//
	// example:
	//
	// Init
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The job submission result.
	//
	// example:
	//
	// {}
	SubmitResultJson map[string]interface{} `json:"SubmitResultJson,omitempty" xml:"SubmitResultJson,omitempty"`
	// The time when the job was submitted.
	//
	// example:
	//
	// 2022-01-12T08:49:41Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// The user data.
	//
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetCreateTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.CreateTime = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetFinishTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.FinishTime = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetInputGroup(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.InputGroup = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetJobId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.JobId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetJobIndex(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.JobIndex = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.Name = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetOutFileMeta(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.OutFileMeta = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetOutput(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.Output = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetParentJobId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.ParentJobId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetProcessConfig(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.ProcessConfig = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetRequestId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.RequestId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetScheduleConfig(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetStatus(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.Status = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetSubmitResultJson(v map[string]interface{}) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.SubmitResultJson = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetSubmitTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.SubmitTime = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetUserData(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.UserData = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup struct {
	// The URL of the input stream:
	//
	// 	- This parameter takes effect only when Type is set to Media. You can select a specific file within the media asset as an input.
	//
	// 	- The system checks whether the input URL exists within the media asset.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	InputUrl *string `json:"InputUrl,omitempty" xml:"InputUrl,omitempty"`
	// The media object.
	//
	// 	- If Type is set to OSS, set this parameter to the URL of an OSS object. Both the OSS and HTTP protocols are supported.
	//
	// 	- If Type is set to Media, set this parameter to the ID of a media asset.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an OSS object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) SetInputUrl(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup {
	s.InputUrl = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) SetMedia(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) SetType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup {
	s.Type = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta struct {
	// The information about the audio stream.
	AudioStreamInfoList []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList `json:"AudioStreamInfoList,omitempty" xml:"AudioStreamInfoList,omitempty" type:"Repeated"`
	// The basic file information.
	FileBasicInfo *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
	// The information about the video stream.
	VideoStreamInfoList []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList `json:"VideoStreamInfoList,omitempty" xml:"VideoStreamInfoList,omitempty" type:"Repeated"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) SetAudioStreamInfoList(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta {
	s.AudioStreamInfoList = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) SetFileBasicInfo(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta {
	s.FileBasicInfo = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) SetVideoStreamInfoList(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta {
	s.VideoStreamInfoList = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList struct {
	// The bitrate.
	//
	// example:
	//
	// 0.f
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The sound channel layout.
	//
	// example:
	//
	// stereo
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	// The number of sound channels.
	//
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// The name of the encoding format.
	//
	// example:
	//
	// AAC (Advanced Audio Coding)
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// The encoding format.
	//
	// example:
	//
	// aac
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// The encoder tag.
	//
	// example:
	//
	// 0x000f
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// The name of the encoder tag.
	//
	// example:
	//
	// [15][0][0][0]
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// The time base of the encoder.
	//
	// example:
	//
	// 1/44100
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// The duration of the stream. Unit: seconds.
	//
	// example:
	//
	// 403.039989
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The sequence number of the stream.
	//
	// example:
	//
	// 1
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// The language of the stream.
	//
	// example:
	//
	// cn
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The sample format.
	//
	// example:
	//
	// fltp
	SampleFmt *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	// The sampling rate. Unit: Hz.
	//
	// example:
	//
	// 44100
	SampleRate *string `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
	// The start time of the stream.
	//
	// example:
	//
	// 1.473556
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The time base.
	//
	// example:
	//
	// 1/90000
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetBitrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetChannelLayout(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.ChannelLayout = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetChannels(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Channels = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecLongName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecTag(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecTagString(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecTimeBase(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetDuration(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetIndex(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Index = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetLang(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Lang = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetSampleFmt(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.SampleFmt = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetSampleRate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.SampleRate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetStartTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetTimebase(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Timebase = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo struct {
	// The video bitrate.
	//
	// example:
	//
	// 888.563
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The duration of the video. Unit: seconds.
	//
	// example:
	//
	// 403.039999
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The file name.
	//
	// example:
	//
	// file.m3u8
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The file size. Unit: bytes.
	//
	// example:
	//
	// 31737
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// The state of the file.
	//
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// The file type. Valid values: source_file and transcode_file.
	//
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// The URL of the file.
	//
	// example:
	//
	// http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// The name of the video format.
	//
	// example:
	//
	// hls,applehttp
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// The height of the output video.
	//
	// example:
	//
	// 478
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// 73e07de0f77171eca3fc7035d0b26402
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The region in which the file resides.
	//
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The width of the output video.
	//
	// example:
	//
	// 848
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetBitrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetDuration(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileSize(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileStatus(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileUrl(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFormatName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetHeight(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Height = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetMediaId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.MediaId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetRegion(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Region = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetWidth(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Width = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList struct {
	// The average frame rate.
	//
	// example:
	//
	// 25.0
	AvgFps *string `json:"Avg_fps,omitempty" xml:"Avg_fps,omitempty"`
	// The bitrate.
	//
	// example:
	//
	// 888.563
	BitRate *string `json:"Bit_rate,omitempty" xml:"Bit_rate,omitempty"`
	// The name of the encoding format.
	//
	// example:
	//
	// H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10
	CodecLongName *string `json:"Codec_long_name,omitempty" xml:"Codec_long_name,omitempty"`
	// The encoding format.
	//
	// example:
	//
	// h264
	CodecName *string `json:"Codec_name,omitempty" xml:"Codec_name,omitempty"`
	// The tag of the encoding format.
	//
	// example:
	//
	// 0x001b
	CodecTag *string `json:"Codec_tag,omitempty" xml:"Codec_tag,omitempty"`
	// The tag string of the encoding format.
	//
	// example:
	//
	// [27][0][0][0]
	CodecTagString *string `json:"Codec_tag_string,omitempty" xml:"Codec_tag_string,omitempty"`
	// The time base of the encoder.
	//
	// example:
	//
	// 1/50
	CodecTimeBase *string `json:"Codec_time_base,omitempty" xml:"Codec_time_base,omitempty"`
	// The display aspect ratio.
	//
	// example:
	//
	// 16:9
	Dar *string `json:"Dar,omitempty" xml:"Dar,omitempty"`
	// The duration of the stream. Unit: seconds.
	//
	// example:
	//
	// 403.039989
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The frame rate.
	//
	// example:
	//
	// 25.0
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// Indicates whether the video stream contains bidirectional frames (B-frames). Valid values:
	//
	// 	- 0: The stream contains no B-frames.
	//
	// 	- 1: The stream contains one B-frame.
	//
	// 	- 2: The stream contains multiple consecutive B-frames.
	//
	// example:
	//
	// 2
	HasBFrames *string `json:"Has_b_frames,omitempty" xml:"Has_b_frames,omitempty"`
	// The height of the output video.
	//
	// example:
	//
	// 478
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The sequence number of the stream.
	//
	// example:
	//
	// 0
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// The language of the stream.
	//
	// example:
	//
	// cn
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The codec level.
	//
	// example:
	//
	// 31
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The total number of frames.
	//
	// example:
	//
	// 10040
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// The pixel format.
	//
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// The encoder profile.
	//
	// example:
	//
	// High
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// The rotation angle of the video image. Valid values: 0, 90, 180, and 270. Default value: 0.
	//
	// example:
	//
	// 0
	Rotate *string `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	// The aspect ratio of the area from which the sampling points are collected.
	//
	// example:
	//
	// 478:477
	Sar *string `json:"Sar,omitempty" xml:"Sar,omitempty"`
	// The start time of the stream.
	//
	// example:
	//
	// 1.473556
	StartTime *string `json:"Start_time,omitempty" xml:"Start_time,omitempty"`
	// The time base.
	//
	// example:
	//
	// 1/90000
	TimeBase *string `json:"Time_base,omitempty" xml:"Time_base,omitempty"`
	// The width of the output video.
	//
	// example:
	//
	// 848
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetAvgFps(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.AvgFps = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetBitRate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.BitRate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecLongName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecTag(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecTagString(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecTimeBase(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetDar(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Dar = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetDuration(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetFps(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Fps = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetHasBFrames(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.HasBFrames = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetHeight(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Height = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetIndex(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Index = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetLang(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Lang = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetLevel(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Level = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetNumFrames(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetPixFmt(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.PixFmt = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetProfile(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Profile = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetRotate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Rotate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetSar(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Sar = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetStartTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetTimeBase(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.TimeBase = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetWidth(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Width = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput struct {
	// The media object.
	//
	// 	- If Type is set to OSS, set this parameter to the URL of an OSS object. Both the OSS and HTTP protocols are supported.
	//
	// 	- If Type is set to Media, set this parameter to the ID of a media asset.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The URL of the output stream.\\
	//
	// This parameter takes effect only when Type is set to Media. You can select a specific file within the media asset as an output.\\
	//
	// Supported placeholders:
	//
	// 	- {MediaId}: the ID of the media asset.
	//
	// 	- {JobId}: the ID of the transcoding subjob.
	//
	// 	- {MediaBucket}: the bucket to which the media asset belongs.
	//
	// 	- {ExtName}: the file suffix, which uses the output format of the transcoding template.
	//
	// 	- {DestMd5}: the MD5 value of the transcoded output file.\\
	//
	//     Notes:
	//
	// 1.  This parameter must contain the {MediaId} and {JobId} placeholders.
	//
	// 2.  The output bucket is the same as the bucket to which the media asset belongs.
	//
	// example:
	//
	// oss://bucket/path/to/{MediaId}/{JobId}.mp4
	OutputUrl *string `json:"OutputUrl,omitempty" xml:"OutputUrl,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an OSS object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) SetMedia(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) SetOutputUrl(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput {
	s.OutputUrl = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) SetType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput {
	s.Type = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig struct {
	// The multi-input stream merge configuration.
	CombineConfigs []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs `json:"CombineConfigs,omitempty" xml:"CombineConfigs,omitempty" type:"Repeated"`
	// The encryption settings.
	Encryption *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption `json:"Encryption,omitempty" xml:"Encryption,omitempty" type:"Struct"`
	// The watermark configuration of an image.
	ImageWatermarks []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks `json:"ImageWatermarks,omitempty" xml:"ImageWatermarks,omitempty" type:"Repeated"`
	// The subtitle configuration.
	Subtitles []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles `json:"Subtitles,omitempty" xml:"Subtitles,omitempty" type:"Repeated"`
	// The configurations of the text watermark.
	TextWatermarks []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks `json:"TextWatermarks,omitempty" xml:"TextWatermarks,omitempty" type:"Repeated"`
	// The transcoding configuration.
	Transcode *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode `json:"Transcode,omitempty" xml:"Transcode,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetCombineConfigs(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.CombineConfigs = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetEncryption(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.Encryption = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetImageWatermarks(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.ImageWatermarks = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetSubtitles(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.Subtitles = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetTextWatermarks(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.TextWatermarks = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetTranscode(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.Transcode = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs struct {
	// The audio stream index.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0 或 exclude
	AudioIndex *string `json:"AudioIndex,omitempty" xml:"AudioIndex,omitempty"`
	// The duration of the input stream. The default value is the duration of the video.
	//
	// example:
	//
	// 20.0
	Duration *float64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The start time of the input stream. Default value: 0.
	//
	// example:
	//
	// 0.0
	Start *float64 `json:"Start,omitempty" xml:"Start,omitempty"`
	// The video stream index.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0 或 exclude
	VideoIndex *string `json:"VideoIndex,omitempty" xml:"VideoIndex,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) SetAudioIndex(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs {
	s.AudioIndex = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) SetDuration(v float64) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) SetStart(v float64) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs {
	s.Start = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) SetVideoIndex(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs {
	s.VideoIndex = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption struct {
	// The ciphertext of HLS encryption.
	//
	// example:
	//
	// MTYi00NDU0LTg5O****
	CipherText *string `json:"CipherText,omitempty" xml:"CipherText,omitempty"`
	// The address of the decryption service for HLS encryption.
	//
	// example:
	//
	// https://sample.com/path?CipherText=MTYi00NDU0LTg5O****
	DecryptKeyUri *string `json:"DecryptKeyUri,omitempty" xml:"DecryptKeyUri,omitempty"`
	// Specifies the encryption type.
	//
	// example:
	//
	// PrivateEncryption
	EncryptType *string `json:"EncryptType,omitempty" xml:"EncryptType,omitempty"`
	// The type of the key service. Valid values: KMS and Base64.
	//
	// example:
	//
	// KMS
	KeyServiceType *string `json:"KeyServiceType,omitempty" xml:"KeyServiceType,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) SetCipherText(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption {
	s.CipherText = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) SetDecryptKeyUri(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption {
	s.DecryptKeyUri = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) SetEncryptType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption {
	s.EncryptType = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) SetKeyServiceType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption {
	s.KeyServiceType = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks struct {
	// The parameters that are used to overwrite the corresponding parameters of the template.
	OverwriteParams *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// The template ID.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) SetOverwriteParams(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) SetTemplateId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams struct {
	// The horizontal offset of the watermark relative to the output video. Default value: 0.
	//
	// The following value types are supported:
	//
	// 	- Integer: the pixel value of the horizontal offset.
	//
	//     	- Valid values: [8,4096].
	//
	//     	- Unit: pixels.
	//
	// 	- Decimal: the ratio of the horizontal offset to the width of the output video.
	//
	//     	- Valid values: (0,1).
	//
	//     	- The decimal number can be accurate to four decimal places, such as 0.9999. Excessive digits are automatically discarded.
	//
	// example:
	//
	// 10
	Dx *string `json:"Dx,omitempty" xml:"Dx,omitempty"`
	// The vertical offset of the watermark relative to the output video. Default value: 0.
	//
	// The following value types are supported:
	//
	// 	- Integer: the pixel value of the horizontal offset.
	//
	//     	- Valid values: [8,4096].
	//
	//     	- Unit: pixels.
	//
	// 	- Decimal: the ratio of the vertical offset to the height of the output video.
	//
	//     	- Valid values: (0,1).
	//
	//     	- The decimal number can be accurate to four decimal places, such as 0.9999. Excessive digits are automatically discarded.
	//
	// example:
	//
	// 10
	Dy *string `json:"Dy,omitempty" xml:"Dy,omitempty"`
	// The watermark image file.
	File *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// The height of the watermark image in the output video. The following value types are supported:
	//
	// 	- Integer: the pixel value of the watermark height.
	//
	//     	- Valid values: [8,4096].
	//
	//     	- Unit: pixels.
	//
	// 	- Decimal: the ratio of the watermark height to the height of the output video.
	//
	//     	- Valid values: (0,1).
	//
	//     	- The decimal number can be accurate to four decimal places, such as 0.9999. Excessive digits are automatically discarded.
	//
	// example:
	//
	// 32
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The position of the watermark.
	//
	// 	- Valid values: TopRight, TopLeft, BottomRight, and BottomLeft.
	//
	// 	- Default value: TopRight.
	//
	// example:
	//
	// TopLeft
	ReferPos *string `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	// The time settings of the dynamic watermark.
	Timeline *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	// The width of the watermark in the output video. The following value types are supported:
	//
	// 	- Integer: the pixel value of the watermark width.
	//
	//     	- Valid values: [8,4096].
	//
	//     	- Unit: pixels.
	//
	// 	- Decimal: the ratio of the watermark width to the width of the output video.
	//
	//     	- Valid values: (0,1).
	//
	//     	- The decimal number can be accurate to four decimal places, such as 0.9999. Excessive digits are automatically discarded.
	//
	// example:
	//
	// 32
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetDx(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Dx = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetDy(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Dy = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetFile(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.File = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetHeight(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Height = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetReferPos(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.ReferPos = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetTimeline(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Timeline = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetWidth(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Width = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile struct {
	// The media object.
	//
	// 	- If Type is set to OSS, set this parameter to the URL of an OSS object. Both the OSS and HTTP protocols are supported.
	//
	// 	- If Type is set to Media, set this parameter to the ID of a media asset.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an OSS object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) SetMedia(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) SetType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile {
	s.Type = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline struct {
	// The time range in which the watermark is displayed.
	//
	// 	- Valid values: integers and ToEND.
	//
	// 	- Default value: ToEND.
	//
	// example:
	//
	// ToEND
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The beginning of the time range in which the watermark is displayed.
	//
	// 	- Unit: seconds.
	//
	// 	- Value values: integers.
	//
	// 	- Default value: 0.
	//
	// example:
	//
	// 00:00:05
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) SetDuration(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) SetStart(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Start = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles struct {
	// The parameters that are used to overwrite the corresponding parameters of the template.
	OverwriteParams *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// The template ID.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) SetOverwriteParams(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) SetTemplateId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams struct {
	// The file encoding format.
	//
	// example:
	//
	// UTF-8
	CharEnc *string `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	// The subtitle file.
	File *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// The format of the subtitle file.
	//
	// example:
	//
	// vtt
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) SetCharEnc(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams {
	s.CharEnc = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) SetFile(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams {
	s.File = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) SetFormat(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams {
	s.Format = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile struct {
	// The media object.
	//
	// 	- If Type is set to OSS, set this parameter to the URL of an OSS object. Both the OSS and HTTP protocols are supported.
	//
	// 	- If Type is set to Media, set this parameter to the ID of a media asset.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// The type of the media object. Valid values:
	//
	// 	- OSS: an OSS object.
	//
	// 	- Media: a media asset.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) SetMedia(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) SetType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile {
	s.Type = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks struct {
	// The parameters that are used to overwrite the corresponding parameters of the template.
	OverwriteParams *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// The template ID.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) SetOverwriteParams(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) SetTemplateId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams struct {
	// Specifies whether to the font size based on the output video dimensions. true / false, default: false
	//
	// example:
	//
	// false
	Adaptive *string `json:"Adaptive,omitempty" xml:"Adaptive,omitempty"`
	// The outline color of the text watermark. Default value: black. For more information, see BorderColor.
	//
	// example:
	//
	// #006400
	BorderColor *string `json:"BorderColor,omitempty" xml:"BorderColor,omitempty"`
	// The outline width of the text watermark.
	//
	// 	- Default value: 0.
	//
	// 	- Valid values: (0,4096].
	//
	// example:
	//
	// 0
	BorderWidth *int32 `json:"BorderWidth,omitempty" xml:"BorderWidth,omitempty"`
	// The watermark text. Base64 encoding is not required. The string must be encoded in UTF-8.
	//
	// example:
	//
	// 测试水印
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The transparency of the text.
	//
	// 	- Valid values: (0,1].
	//
	// 	- Default value: 1.
	//
	// example:
	//
	// 1.0
	FontAlpha *string `json:"FontAlpha,omitempty" xml:"FontAlpha,omitempty"`
	// The color of the text.
	//
	// example:
	//
	// #006400
	FontColor *string `json:"FontColor,omitempty" xml:"FontColor,omitempty"`
	// The font of the text. Default value: SimSun.
	//
	// example:
	//
	// SimSun
	FontName *string `json:"FontName,omitempty" xml:"FontName,omitempty"`
	// The size of the text.
	//
	// 	- Default value: 16.
	//
	// 	- Valid values: (4,120).
	//
	// example:
	//
	// 16
	FontSize *int32 `json:"FontSize,omitempty" xml:"FontSize,omitempty"`
	// The left margin of the text watermark.
	//
	// 	- Default value: 0.
	//
	// 	- Valid values: [0,4096].
	//
	// example:
	//
	// 10
	Left *string `json:"Left,omitempty" xml:"Left,omitempty"`
	// The top margin of the text.
	//
	// 	- Default value: 0.
	//
	// 	- Valid values: [0,4096].
	//
	// example:
	//
	// 10
	Top *string `json:"Top,omitempty" xml:"Top,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetAdaptive(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.Adaptive = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetBorderColor(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.BorderColor = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetBorderWidth(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.BorderWidth = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetContent(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.Content = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetFontAlpha(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.FontAlpha = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetFontColor(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.FontColor = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetFontName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.FontName = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetFontSize(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.FontSize = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetLeft(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.Left = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetTop(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.Top = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode struct {
	// The parameters that are used to overwrite the corresponding parameters of the template.
	OverwriteParams *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// The template ID.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) SetOverwriteParams(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) SetTemplateId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams struct {
	// The audio settings.
	Audio *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	// The encapsulation format settings.
	Container *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	// The encapsulation settings.
	MuxConfig *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	// The conditional transcoding configurations.
	TransConfig *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	// The video settings.
	Video *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetAudio(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.Audio = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetContainer(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.Container = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetMuxConfig(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.MuxConfig = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetTransConfig(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.TransConfig = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetVideo(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.Video = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio struct {
	// The audio bitrate of the output file.
	//
	// 	- Valid values: [8,1000].
	//
	// 	- Unit: Kbit/s.
	//
	// 	- Default value: 128.
	//
	// example:
	//
	// 128
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The number of sound channels. Default value: 2.
	//
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// The audio codec. Valid values: AAC, MP3, VORBIS, and FLAC. Default value: AAC.
	//
	// example:
	//
	// AAC
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// The audio codec profile. If the Codec parameter is set to AAC, the valid values are aac_low, aac_he, aac_he_v2, aac_ld, and aac_eld.
	//
	// example:
	//
	// aac_low
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// Specifies whether to delete the audio stream.
	//
	// example:
	//
	// false
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// The sampling rate.
	//
	// 	- Default value: 44100.
	//
	// 	- Valid values: 22050, 32000, 44100, 48000, and 96000.
	//
	// 	- Unit: Hz.
	//
	// example:
	//
	// 44100
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	// The volume configurations.
	Volume *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetBitrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Bitrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetChannels(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Channels = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetCodec(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Codec = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetProfile(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Profile = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetRemove(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Remove = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetSamplerate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Samplerate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetVolume(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Volume = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume struct {
	// The output volume.
	//
	// example:
	//
	// -6
	IntegratedLoudnessTarget *string `json:"IntegratedLoudnessTarget,omitempty" xml:"IntegratedLoudnessTarget,omitempty"`
	// The volume range.
	//
	// example:
	//
	// 8
	LoudnessRangeTarget *string `json:"LoudnessRangeTarget,omitempty" xml:"LoudnessRangeTarget,omitempty"`
	// The volume adjustment method. Valid values:
	//
	// example:
	//
	// auto
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// The peak volume.
	//
	// example:
	//
	// -1
	TruePeak *string `json:"TruePeak,omitempty" xml:"TruePeak,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) SetIntegratedLoudnessTarget(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.IntegratedLoudnessTarget = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) SetLoudnessRangeTarget(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.LoudnessRangeTarget = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) SetMethod(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.Method = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) SetTruePeak(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.TruePeak = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer struct {
	// The container format.
	//
	// example:
	//
	// mp4
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer) SetFormat(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer {
	s.Format = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig struct {
	// The segment settings.
	Segment *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig) SetSegment(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig {
	s.Segment = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment struct {
	// The segment length.
	//
	// example:
	//
	// 10
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The forced segmentation point in time.
	//
	// example:
	//
	// 2,3
	ForceSegTime *string `json:"ForceSegTime,omitempty" xml:"ForceSegTime,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetDuration(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetForceSegTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.ForceSegTime = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig struct {
	// The method that is used to adjust the resolution. This parameter takes effect only if both the Width and Height parameters are specified. You can use this parameter together with the LongShortMode parameter.
	//
	// Valid values: rescale, crop, pad, and none.
	//
	// Default value: none.
	//
	// example:
	//
	// none
	AdjDarMethod *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	// Specifies whether to check the audio bitrate. You can specify only one of the IsCheckAudioBitrate and IsCheckAudioBitrateFail parameters. The priority of the IsCheckAudioBitrateFail parameter is higher. Valid values:
	//
	// 	- true: checks the video resolution. If the bitrate of the input audio is less than that of the output audio, the bitrate of the input audio is used for transcoding.
	//
	// 	- false: does not check the video resolution.
	//
	// Default values:
	//
	// 	- If this parameter is not specified and the codec of the output audio is different from that of the input audio, the default value is false.
	//
	// 	- If this parameter is not specified and the codec of the output audio is the same as that of the input audio, the default value is true.
	//
	// example:
	//
	// true
	IsCheckAudioBitrate *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	// Specifies whether to check the audio bitrate. You can specify only one of the IsCheckAudioBitrate and IsCheckAudioBitrateFail parameters. The priority of the IsCheckAudioBitrateFail parameter is higher. Valid values:
	//
	// 	- true: checks the video resolution. If the bitrate of the input audio is less than that of the output audio, the transcoding job fails.
	//
	// 	- false: does not check the video resolution. This is the default value.
	//
	// example:
	//
	// true
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
	// Specifies whether to check the video resolution. You can specify only one of the IsCheckReso and IsCheckResoFail parameters. The priority of the IsCheckResoFail parameter is higher. Valid values:
	//
	// 	- true: checks the video resolution. If the width or height of the input video is less than that of the output video, the resolution of the input video is used for transcoding.
	//
	// 	- false: does not check the video resolution. This is the default value.
	//
	// example:
	//
	// true
	IsCheckReso *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	// Specifies whether to check the video resolution. You can specify only one of the IsCheckReso and IsCheckResoFail parameters. The priority of the IsCheckResoFail parameter is higher. Valid values:
	//
	// 	- true: checks the video resolution. If the width or height of the input video is less than that of the output video, the transcoding job fails.
	//
	// 	- false: does not check the video resolution. This is the default value.
	//
	// example:
	//
	// true
	IsCheckResoFail *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	// Specifies whether to check the video bitrate. You can specify only one of the IsCheckVideoBitrate and IsCheckVideoBitrateFail parameters. The priority of the IsCheckVideoBitrateFail parameter is higher. Valid values:
	//
	// 	- true: checks the video resolution. If the bitrate of the input video is less than that of the output video, the bitrate of the input video is used for transcoding.
	//
	// 	- false: does not check the video resolution. This is the default value.
	//
	// example:
	//
	// true
	IsCheckVideoBitrate *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	// Specifies whether to check the video bitrate. You can specify only one of the IsCheckVideoBitrate and IsCheckVideoBitrateFail parameters. The priority of the IsCheckVideoBitrateFail parameter is higher. Valid values:
	//
	// 	- true: checks the video resolution. If the bitrate of the input video is less than that of the output video, the transcoding job fails.
	//
	// 	- false: does not check the video resolution. This is the default value.
	//
	// example:
	//
	// true
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	// The video transcoding mode. Valid values:
	//
	// 	- onepass: You can set this parameter to onepass if the Bitrate parameter is set to ABR. This is the default value. The encoding speed of this mode is faster than that of the twopass mode.
	//
	// 	- twopass: You can set this parameter to twopass if the Bitrate parameter is set to VBR. The encoding speed of this mode is slower than that of the onepass mode.
	//
	// 	- CBR: the constant bitrate mode.
	//
	// example:
	//
	// onepass
	TransMode *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetAdjDarMethod(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckAudioBitrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckAudioBitrateFail(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckReso(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckResoFail(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckVideoBitrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckVideoBitrateFail(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetTransMode(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.TransMode = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo struct {
	// The maximum ABR. This parameter takes effect only for Narrowband HD 1.0. Valid values: [10,50000]. Unit: Kbit/s.
	//
	// example:
	//
	// 6000
	AbrMax *string `json:"AbrMax,omitempty" xml:"AbrMax,omitempty"`
	// The average bitrate of the video.
	//
	// 	- Valid values: [10,50000].
	//
	// 	- Unit: Kbit/s.
	//
	// example:
	//
	// 3000
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The buffer size.
	//
	// 	- Valid values: [1000,128000].
	//
	// 	- Default value: 6000.
	//
	// 	- Unit: KB.
	//
	// example:
	//
	// 6000
	Bufsize *string `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	// The encoding format.
	//
	// example:
	//
	// H.264
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// The constant rate factor.
	//
	// 	- Valid values: [0,51].
	//
	// 	- Default value: 23 if the encoding format is H.264, or Default value when the Codec parameter is set to H.265: 26.
	//
	// If this parameter is specified, the value of Bitrate becomes invalid.
	//
	// example:
	//
	// 23
	Crf *string `json:"Crf,omitempty" xml:"Crf,omitempty"`
	// The method of video cropping. Valid values:
	//
	// 	- border: automatically detects and removes black bars.
	//
	// 	- A value in the width:height:left:top format: crops the videos based on the custom settings. Example: 1280:800:0:140.
	//
	// example:
	//
	// 1280:800:0:140
	Crop *string `json:"Crop,omitempty" xml:"Crop,omitempty"`
	// The frame rate.
	//
	// 	- Valid values: (0,60].
	//
	// 	- The value is 60 if the frame rate of the input video exceeds 60.
	//
	// 	- Default value: the frame rate of the input video.
	//
	// example:
	//
	// 25
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// The maximum number of frames between two keyframes.
	//
	// 	- Valid values: [1,1080000].
	//
	// 	- Default value: 250.
	//
	// example:
	//
	// 250
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// The height of the output video.
	//
	// 	- Valid values: [128,4096].
	//
	// 	- Unit: pixels.
	//
	// 	- Default value: the height of the input video.
	//
	// example:
	//
	// 1080
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// Specifies whether to enable the auto-rotate screen feature.
	//
	// example:
	//
	// false
	LongShortMode *string `json:"LongShortMode,omitempty" xml:"LongShortMode,omitempty"`
	// The maximum bitrate of the output video. Valid values: [10,50000]. Unit: Kbit/s.
	//
	// example:
	//
	// 9000
	Maxrate *string `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	// The black bars added to the video.
	//
	// 	- Format: width:height:left:top.
	//
	// 	- Example: 1280:800:0:140.
	//
	// example:
	//
	// 1280:800:0:140
	Pad *string `json:"Pad,omitempty" xml:"Pad,omitempty"`
	// The pixel format of the video. Valid values: standard pixel formats such as yuv420p and yuvj420p.
	//
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// The preset video algorithm. This parameter takes effect only if the encoding format is H.264. Valid values: veryfast, fast, medium, slow, and slower. Default value: medium.
	//
	// example:
	//
	// medium
	Preset *string `json:"Preset,omitempty" xml:"Preset,omitempty"`
	// The encoding profile. Valid values: baseline, main, and high.
	//
	// 	- baseline: applicable to mobile devices.
	//
	// 	- main: applicable to standard-definition devices.
	//
	// 	- high: applicable to high-definition devices.
	//
	// Default value: high.
	//
	// example:
	//
	// Main
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// Specifies whether to remove the video.
	//
	// example:
	//
	// false
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// The scan mode. Valid values: interlaced and progressive.
	//
	// example:
	//
	// progressive
	ScanMode *string `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	// The width of the output video.
	//
	// 	- Valid values: [128,4096].
	//
	// 	- Unit: pixels.
	//
	// 	- Default value: the width of the input video.
	//
	// example:
	//
	// 1920
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetAbrMax(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.AbrMax = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetBitrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Bitrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetBufsize(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Bufsize = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetCodec(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Codec = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetCrf(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Crf = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetCrop(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Crop = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetFps(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Fps = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetGop(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Gop = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetHeight(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Height = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetLongShortMode(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.LongShortMode = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetMaxrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Maxrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetPad(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Pad = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetPixFmt(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.PixFmt = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetPreset(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Preset = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetProfile(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Profile = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetRemove(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Remove = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetScanMode(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.ScanMode = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetWidth(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Width = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig struct {
	// The ID of the MPS queue to which the job was submitted.
	//
	// example:
	//
	// e37ebee5d98b4781897f6086e89f9c56
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The priority of the job. Valid values: 1 to 10. The greater the value, the higher the priority.
	//
	// example:
	//
	// 5
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) SetPipelineId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) SetPriority(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitTranscodeJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitTranscodeJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitTranscodeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponse) SetHeaders(v map[string]*string) *SubmitTranscodeJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitTranscodeJobResponse) SetStatusCode(v int32) *SubmitTranscodeJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitTranscodeJobResponse) SetBody(v *SubmitTranscodeJobResponseBody) *SubmitTranscodeJobResponse {
	s.Body = v
	return s
}

type SubmitVideoTranslationJobRequest struct {
	// 	- The client token.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// 	- The job description.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 	- The configuration parameters of the video translation job.
	//
	// 	- The value must be in the JSON format.
	//
	// example:
	//
	// {"SourceLanguage":"zh","TargetLanguage":"en","DetextArea":"Auto"}
	EditingConfig *string `json:"EditingConfig,omitempty" xml:"EditingConfig,omitempty"`
	// 	- The input parameters of the video translation job.
	//
	// 	- A video translation job takes a video or subtitle file as the input.
	//
	// 	- The value must be in the JSON format.
	//
	// example:
	//
	// {"Type":"Video","Media":"https://your-bucket.oss-cn-shanghai.aliyuncs.com/xxx.mp4"}
	InputConfig *string `json:"InputConfig,omitempty" xml:"InputConfig,omitempty"`
	// 	- The output parameters of the video translation job.
	//
	// 	- A video translation job can generate a video or subtitle file as the output.
	//
	// example:
	//
	// {"MediaURL": "https://your-bucket.oss-cn-shanghai.aliyuncs.com/your-object.mp4"}
	OutputConfig     *string `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	Signature        *string `json:"Signature,omitempty" xml:"Signature,omitempty"`
	SignatureMehtod  *string `json:"SignatureMehtod,omitempty" xml:"SignatureMehtod,omitempty"`
	SignatureNonce   *string `json:"SignatureNonce,omitempty" xml:"SignatureNonce,omitempty"`
	SignatureType    *string `json:"SignatureType,omitempty" xml:"SignatureType,omitempty"`
	SignatureVersion *string `json:"SignatureVersion,omitempty" xml:"SignatureVersion,omitempty"`
	// 	- The job title.
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// 	- The user-defined data.
	//
	// 	- The data must be in the JSON format, and can be up to 512 characters in length.
	//
	// example:
	//
	// {"NotifyAddress":"http://xx.xx.xxx"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitVideoTranslationJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoTranslationJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitVideoTranslationJobRequest) SetClientToken(v string) *SubmitVideoTranslationJobRequest {
	s.ClientToken = &v
	return s
}

func (s *SubmitVideoTranslationJobRequest) SetDescription(v string) *SubmitVideoTranslationJobRequest {
	s.Description = &v
	return s
}

func (s *SubmitVideoTranslationJobRequest) SetEditingConfig(v string) *SubmitVideoTranslationJobRequest {
	s.EditingConfig = &v
	return s
}

func (s *SubmitVideoTranslationJobRequest) SetInputConfig(v string) *SubmitVideoTranslationJobRequest {
	s.InputConfig = &v
	return s
}

func (s *SubmitVideoTranslationJobRequest) SetOutputConfig(v string) *SubmitVideoTranslationJobRequest {
	s.OutputConfig = &v
	return s
}

func (s *SubmitVideoTranslationJobRequest) SetSignature(v string) *SubmitVideoTranslationJobRequest {
	s.Signature = &v
	return s
}

func (s *SubmitVideoTranslationJobRequest) SetSignatureMehtod(v string) *SubmitVideoTranslationJobRequest {
	s.SignatureMehtod = &v
	return s
}

func (s *SubmitVideoTranslationJobRequest) SetSignatureNonce(v string) *SubmitVideoTranslationJobRequest {
	s.SignatureNonce = &v
	return s
}

func (s *SubmitVideoTranslationJobRequest) SetSignatureType(v string) *SubmitVideoTranslationJobRequest {
	s.SignatureType = &v
	return s
}

func (s *SubmitVideoTranslationJobRequest) SetSignatureVersion(v string) *SubmitVideoTranslationJobRequest {
	s.SignatureVersion = &v
	return s
}

func (s *SubmitVideoTranslationJobRequest) SetTitle(v string) *SubmitVideoTranslationJobRequest {
	s.Title = &v
	return s
}

func (s *SubmitVideoTranslationJobRequest) SetUserData(v string) *SubmitVideoTranslationJobRequest {
	s.UserData = &v
	return s
}

type SubmitVideoTranslationJobResponseBody struct {
	// The data returned.
	Data *SubmitVideoTranslationJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SubmitVideoTranslationJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoTranslationJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitVideoTranslationJobResponseBody) SetData(v *SubmitVideoTranslationJobResponseBodyData) *SubmitVideoTranslationJobResponseBody {
	s.Data = v
	return s
}

func (s *SubmitVideoTranslationJobResponseBody) SetRequestId(v string) *SubmitVideoTranslationJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitVideoTranslationJobResponseBody) SetSuccess(v bool) *SubmitVideoTranslationJobResponseBody {
	s.Success = &v
	return s
}

type SubmitVideoTranslationJobResponseBodyData struct {
	// The ID of the video translation job.
	//
	// example:
	//
	// ****d718e2ff4f018ccf419a7b71****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitVideoTranslationJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoTranslationJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *SubmitVideoTranslationJobResponseBodyData) SetJobId(v string) *SubmitVideoTranslationJobResponseBodyData {
	s.JobId = &v
	return s
}

type SubmitVideoTranslationJobResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitVideoTranslationJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitVideoTranslationJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoTranslationJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitVideoTranslationJobResponse) SetHeaders(v map[string]*string) *SubmitVideoTranslationJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitVideoTranslationJobResponse) SetStatusCode(v int32) *SubmitVideoTranslationJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitVideoTranslationJobResponse) SetBody(v *SubmitVideoTranslationJobResponseBody) *SubmitVideoTranslationJobResponse {
	s.Body = v
	return s
}

type TakeoverAIAgentCallRequest struct {
	// The ID of the human agent that will take over the AI agent (UserId in ARTC). If you do not specify this parameter, it is automatically generated and returned.
	//
	// example:
	//
	// uid2
	HumanAgentUserId *string `json:"HumanAgentUserId,omitempty" xml:"HumanAgentUserId,omitempty"`
	// The ID of the AI agent that will be taken over.
	//
	// example:
	//
	// 39f8e0bc005e4f309379701645f4****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// Specifies whether to return the ARTC token. Default value: false.
	//
	// example:
	//
	// false
	RequireToken *bool `json:"RequireToken,omitempty" xml:"RequireToken,omitempty"`
}

func (s TakeoverAIAgentCallRequest) String() string {
	return tea.Prettify(s)
}

func (s TakeoverAIAgentCallRequest) GoString() string {
	return s.String()
}

func (s *TakeoverAIAgentCallRequest) SetHumanAgentUserId(v string) *TakeoverAIAgentCallRequest {
	s.HumanAgentUserId = &v
	return s
}

func (s *TakeoverAIAgentCallRequest) SetInstanceId(v string) *TakeoverAIAgentCallRequest {
	s.InstanceId = &v
	return s
}

func (s *TakeoverAIAgentCallRequest) SetRequireToken(v bool) *TakeoverAIAgentCallRequest {
	s.RequireToken = &v
	return s
}

type TakeoverAIAgentCallResponseBody struct {
	// The ID of the ARTC channel.
	//
	// example:
	//
	// 70f22d5784194938a7e387052f2b3208
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// The ID of the human agent.
	//
	// example:
	//
	// uid2
	HumanAgentUserId *string `json:"HumanAgentUserId,omitempty" xml:"HumanAgentUserId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ARTC token.
	//
	// example:
	//
	// eyJhcHBpZCI6ICIxMjM0MTIzNxxxxx
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
}

func (s TakeoverAIAgentCallResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TakeoverAIAgentCallResponseBody) GoString() string {
	return s.String()
}

func (s *TakeoverAIAgentCallResponseBody) SetChannelId(v string) *TakeoverAIAgentCallResponseBody {
	s.ChannelId = &v
	return s
}

func (s *TakeoverAIAgentCallResponseBody) SetHumanAgentUserId(v string) *TakeoverAIAgentCallResponseBody {
	s.HumanAgentUserId = &v
	return s
}

func (s *TakeoverAIAgentCallResponseBody) SetRequestId(v string) *TakeoverAIAgentCallResponseBody {
	s.RequestId = &v
	return s
}

func (s *TakeoverAIAgentCallResponseBody) SetToken(v string) *TakeoverAIAgentCallResponseBody {
	s.Token = &v
	return s
}

type TakeoverAIAgentCallResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TakeoverAIAgentCallResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TakeoverAIAgentCallResponse) String() string {
	return tea.Prettify(s)
}

func (s TakeoverAIAgentCallResponse) GoString() string {
	return s.String()
}

func (s *TakeoverAIAgentCallResponse) SetHeaders(v map[string]*string) *TakeoverAIAgentCallResponse {
	s.Headers = v
	return s
}

func (s *TakeoverAIAgentCallResponse) SetStatusCode(v int32) *TakeoverAIAgentCallResponse {
	s.StatusCode = &v
	return s
}

func (s *TakeoverAIAgentCallResponse) SetBody(v *TakeoverAIAgentCallResponseBody) *TakeoverAIAgentCallResponse {
	s.Body = v
	return s
}

type UpdateAIAgentInstanceRequest struct {
	AgentConfig *AIAgentConfig `json:"AgentConfig,omitempty" xml:"AgentConfig,omitempty"`
	// The ID of the AI agent that you want to update.
	//
	// This parameter is required.
	//
	// example:
	//
	// 39f8e0bc005e4f309379701645f4****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// Deprecated
	//
	// The template configurations of the AI agent. The configurations are merged with the template configurations that are used to start the AI agent. For more information, see the definition of TemplateConfig.
	TemplateConfig *AIAgentTemplateConfig `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// example:
	//
	// {"VoiceId":"xiaoxia"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s UpdateAIAgentInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAIAgentInstanceRequest) GoString() string {
	return s.String()
}

func (s *UpdateAIAgentInstanceRequest) SetAgentConfig(v *AIAgentConfig) *UpdateAIAgentInstanceRequest {
	s.AgentConfig = v
	return s
}

func (s *UpdateAIAgentInstanceRequest) SetInstanceId(v string) *UpdateAIAgentInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateAIAgentInstanceRequest) SetTemplateConfig(v *AIAgentTemplateConfig) *UpdateAIAgentInstanceRequest {
	s.TemplateConfig = v
	return s
}

func (s *UpdateAIAgentInstanceRequest) SetUserData(v string) *UpdateAIAgentInstanceRequest {
	s.UserData = &v
	return s
}

type UpdateAIAgentInstanceShrinkRequest struct {
	AgentConfigShrink *string `json:"AgentConfig,omitempty" xml:"AgentConfig,omitempty"`
	// The ID of the AI agent that you want to update.
	//
	// This parameter is required.
	//
	// example:
	//
	// 39f8e0bc005e4f309379701645f4****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// Deprecated
	//
	// The template configurations of the AI agent. The configurations are merged with the template configurations that are used to start the AI agent. For more information, see the definition of TemplateConfig.
	TemplateConfigShrink *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// example:
	//
	// {"VoiceId":"xiaoxia"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s UpdateAIAgentInstanceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAIAgentInstanceShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateAIAgentInstanceShrinkRequest) SetAgentConfigShrink(v string) *UpdateAIAgentInstanceShrinkRequest {
	s.AgentConfigShrink = &v
	return s
}

func (s *UpdateAIAgentInstanceShrinkRequest) SetInstanceId(v string) *UpdateAIAgentInstanceShrinkRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateAIAgentInstanceShrinkRequest) SetTemplateConfigShrink(v string) *UpdateAIAgentInstanceShrinkRequest {
	s.TemplateConfigShrink = &v
	return s
}

func (s *UpdateAIAgentInstanceShrinkRequest) SetUserData(v string) *UpdateAIAgentInstanceShrinkRequest {
	s.UserData = &v
	return s
}

type UpdateAIAgentInstanceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 7B117AF5-2A16-412C-B127-FA6175ED1AD0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateAIAgentInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAIAgentInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAIAgentInstanceResponseBody) SetRequestId(v string) *UpdateAIAgentInstanceResponseBody {
	s.RequestId = &v
	return s
}

type UpdateAIAgentInstanceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateAIAgentInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateAIAgentInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAIAgentInstanceResponse) GoString() string {
	return s.String()
}

func (s *UpdateAIAgentInstanceResponse) SetHeaders(v map[string]*string) *UpdateAIAgentInstanceResponse {
	s.Headers = v
	return s
}

func (s *UpdateAIAgentInstanceResponse) SetStatusCode(v int32) *UpdateAIAgentInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateAIAgentInstanceResponse) SetBody(v *UpdateAIAgentInstanceResponseBody) *UpdateAIAgentInstanceResponse {
	s.Body = v
	return s
}

type UpdateAdInsertionRequest struct {
	// Specifies whether to enable ad marker passthrough. Default value: OFF.
	//
	// Valid values:
	//
	// 	- OFF: Disable.
	//
	// 	- ON: Enable.
	//
	// example:
	//
	// ON
	AdMarkerPassthrough *string `json:"AdMarkerPassthrough,omitempty" xml:"AdMarkerPassthrough,omitempty"`
	// The request URL of the ad decision server (ADS). HTTP and HTTPS are supported. The maximum length is 2,048 characters.
	//
	// This parameter is required.
	//
	// example:
	//
	// http://ads.com/ad1?param1=[palyer_params.p1]
	AdsUrl *string `json:"AdsUrl,omitempty" xml:"AdsUrl,omitempty"`
	// The CDN prefix for ad segments. HTTP and HTTPS are supported. The maximum length is 512 characters.
	//
	// example:
	//
	// http://cdn.com/
	CdnAdSegmentUrlPrefix *string `json:"CdnAdSegmentUrlPrefix,omitempty" xml:"CdnAdSegmentUrlPrefix,omitempty"`
	// The CDN prefix for content segments. HTTP and HTTPS are supported. The maximum length is 512 characters.
	//
	// example:
	//
	// http://cdn.com/
	CdnContentSegmentUrlPrefix *string `json:"CdnContentSegmentUrlPrefix,omitempty" xml:"CdnContentSegmentUrlPrefix,omitempty"`
	// A JSON string that specifies the player parameter variables and aliases. Format: { "player_params.{name}": { "{key}": "{value}" } }. You can add up to 20 player_params.{name} entries. The name field can be up to 150 characters in length. Each player parameter can include up to 50 key-value pairs. A key can be up to 150 characters long, and a value can be up to 500 characters.
	//
	// example:
	//
	// { "player_params.p1": { "1": "abc" } }
	ConfigAliases *string `json:"ConfigAliases,omitempty" xml:"ConfigAliases,omitempty"`
	// The URL prefix for the source content. HTTP and HTTPS are supported. The maximum length is 512 characters.
	//
	// This parameter is required.
	//
	// example:
	//
	// https://source.com/
	ContentUrlPrefix *string `json:"ContentUrlPrefix,omitempty" xml:"ContentUrlPrefix,omitempty"`
	// The configuration name, which cannot be modified.
	//
	// This parameter is required.
	//
	// example:
	//
	// my_ad
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// Specifies the maximum duration of underfilled time allowed in an ad break. Unit: seconds. Default value: 8 seconds.
	//
	// example:
	//
	// 5
	PersonalizationThreshold *int32 `json:"PersonalizationThreshold,omitempty" xml:"PersonalizationThreshold,omitempty"`
	// The HTTP or HTTPS URL of the slate ad. Only MP4 format is supported. The maximum length is 2,048 characters.
	//
	// example:
	//
	// http://storage.com/slate1.mp4
	SlateAdUrl *string `json:"SlateAdUrl,omitempty" xml:"SlateAdUrl,omitempty"`
}

func (s UpdateAdInsertionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAdInsertionRequest) GoString() string {
	return s.String()
}

func (s *UpdateAdInsertionRequest) SetAdMarkerPassthrough(v string) *UpdateAdInsertionRequest {
	s.AdMarkerPassthrough = &v
	return s
}

func (s *UpdateAdInsertionRequest) SetAdsUrl(v string) *UpdateAdInsertionRequest {
	s.AdsUrl = &v
	return s
}

func (s *UpdateAdInsertionRequest) SetCdnAdSegmentUrlPrefix(v string) *UpdateAdInsertionRequest {
	s.CdnAdSegmentUrlPrefix = &v
	return s
}

func (s *UpdateAdInsertionRequest) SetCdnContentSegmentUrlPrefix(v string) *UpdateAdInsertionRequest {
	s.CdnContentSegmentUrlPrefix = &v
	return s
}

func (s *UpdateAdInsertionRequest) SetConfigAliases(v string) *UpdateAdInsertionRequest {
	s.ConfigAliases = &v
	return s
}

func (s *UpdateAdInsertionRequest) SetContentUrlPrefix(v string) *UpdateAdInsertionRequest {
	s.ContentUrlPrefix = &v
	return s
}

func (s *UpdateAdInsertionRequest) SetName(v string) *UpdateAdInsertionRequest {
	s.Name = &v
	return s
}

func (s *UpdateAdInsertionRequest) SetPersonalizationThreshold(v int32) *UpdateAdInsertionRequest {
	s.PersonalizationThreshold = &v
	return s
}

func (s *UpdateAdInsertionRequest) SetSlateAdUrl(v string) *UpdateAdInsertionRequest {
	s.SlateAdUrl = &v
	return s
}

type UpdateAdInsertionResponseBody struct {
	// The ad insertion configuration.
	Config *UpdateAdInsertionResponseBodyConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// ****63E8B7C7-4812-46AD-0FA56029AC86****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateAdInsertionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAdInsertionResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAdInsertionResponseBody) SetConfig(v *UpdateAdInsertionResponseBodyConfig) *UpdateAdInsertionResponseBody {
	s.Config = v
	return s
}

func (s *UpdateAdInsertionResponseBody) SetRequestId(v string) *UpdateAdInsertionResponseBody {
	s.RequestId = &v
	return s
}

type UpdateAdInsertionResponseBodyConfig struct {
	// Indicates whether ad marker passthrough is enabled.
	//
	// example:
	//
	// ON
	AdMarkerPassthrough *string `json:"AdMarkerPassthrough,omitempty" xml:"AdMarkerPassthrough,omitempty"`
	// The request URL of ADS.
	//
	// example:
	//
	// http://ads.com/ad1?param1=[palyer_params.p1]
	AdsUrl *string `json:"AdsUrl,omitempty" xml:"AdsUrl,omitempty"`
	// The CDN configurations.
	CdnConfig *UpdateAdInsertionResponseBodyConfigCdnConfig `json:"CdnConfig,omitempty" xml:"CdnConfig,omitempty" type:"Struct"`
	// The player parameter variables and aliases.
	//
	// example:
	//
	// { "player_params.p1": { "1": "abc" } }
	ConfigAliases *string `json:"ConfigAliases,omitempty" xml:"ConfigAliases,omitempty"`
	// The URL prefix for the source content.
	//
	// example:
	//
	// https://source.com/
	ContentUrlPrefix *string `json:"ContentUrlPrefix,omitempty" xml:"ContentUrlPrefix,omitempty"`
	// The time when the configuration was created.
	//
	// example:
	//
	// 2024-06-13T08:26:09Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the configuration was last modified.
	//
	// example:
	//
	// 2024-06-13T08:26:09Z
	LastModified *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	// The playback endpoint configuration.
	ManifestEndpointConfig *UpdateAdInsertionResponseBodyConfigManifestEndpointConfig `json:"ManifestEndpointConfig,omitempty" xml:"ManifestEndpointConfig,omitempty" type:"Struct"`
	// The name of the ad insertion configuration.
	//
	// example:
	//
	// my_ad
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The personalization threshold.
	//
	// example:
	//
	// 5
	PersonalizationThreshold *int32 `json:"PersonalizationThreshold,omitempty" xml:"PersonalizationThreshold,omitempty"`
	// The URL of the slate ad.
	//
	// example:
	//
	// http://storage.com/slate1.mp4
	SlateAdUrl *string `json:"SlateAdUrl,omitempty" xml:"SlateAdUrl,omitempty"`
}

func (s UpdateAdInsertionResponseBodyConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateAdInsertionResponseBodyConfig) GoString() string {
	return s.String()
}

func (s *UpdateAdInsertionResponseBodyConfig) SetAdMarkerPassthrough(v string) *UpdateAdInsertionResponseBodyConfig {
	s.AdMarkerPassthrough = &v
	return s
}

func (s *UpdateAdInsertionResponseBodyConfig) SetAdsUrl(v string) *UpdateAdInsertionResponseBodyConfig {
	s.AdsUrl = &v
	return s
}

func (s *UpdateAdInsertionResponseBodyConfig) SetCdnConfig(v *UpdateAdInsertionResponseBodyConfigCdnConfig) *UpdateAdInsertionResponseBodyConfig {
	s.CdnConfig = v
	return s
}

func (s *UpdateAdInsertionResponseBodyConfig) SetConfigAliases(v string) *UpdateAdInsertionResponseBodyConfig {
	s.ConfigAliases = &v
	return s
}

func (s *UpdateAdInsertionResponseBodyConfig) SetContentUrlPrefix(v string) *UpdateAdInsertionResponseBodyConfig {
	s.ContentUrlPrefix = &v
	return s
}

func (s *UpdateAdInsertionResponseBodyConfig) SetCreateTime(v string) *UpdateAdInsertionResponseBodyConfig {
	s.CreateTime = &v
	return s
}

func (s *UpdateAdInsertionResponseBodyConfig) SetLastModified(v string) *UpdateAdInsertionResponseBodyConfig {
	s.LastModified = &v
	return s
}

func (s *UpdateAdInsertionResponseBodyConfig) SetManifestEndpointConfig(v *UpdateAdInsertionResponseBodyConfigManifestEndpointConfig) *UpdateAdInsertionResponseBodyConfig {
	s.ManifestEndpointConfig = v
	return s
}

func (s *UpdateAdInsertionResponseBodyConfig) SetName(v string) *UpdateAdInsertionResponseBodyConfig {
	s.Name = &v
	return s
}

func (s *UpdateAdInsertionResponseBodyConfig) SetPersonalizationThreshold(v int32) *UpdateAdInsertionResponseBodyConfig {
	s.PersonalizationThreshold = &v
	return s
}

func (s *UpdateAdInsertionResponseBodyConfig) SetSlateAdUrl(v string) *UpdateAdInsertionResponseBodyConfig {
	s.SlateAdUrl = &v
	return s
}

type UpdateAdInsertionResponseBodyConfigCdnConfig struct {
	// The CDN prefix for ad segments.
	//
	// example:
	//
	// http://cdn.com/
	AdSegmentUrlPrefix *string `json:"AdSegmentUrlPrefix,omitempty" xml:"AdSegmentUrlPrefix,omitempty"`
	// The CDN prefix for content segments.
	//
	// example:
	//
	// http://cdn.com/
	ContentSegmentUrlPrefix *string `json:"ContentSegmentUrlPrefix,omitempty" xml:"ContentSegmentUrlPrefix,omitempty"`
}

func (s UpdateAdInsertionResponseBodyConfigCdnConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateAdInsertionResponseBodyConfigCdnConfig) GoString() string {
	return s.String()
}

func (s *UpdateAdInsertionResponseBodyConfigCdnConfig) SetAdSegmentUrlPrefix(v string) *UpdateAdInsertionResponseBodyConfigCdnConfig {
	s.AdSegmentUrlPrefix = &v
	return s
}

func (s *UpdateAdInsertionResponseBodyConfigCdnConfig) SetContentSegmentUrlPrefix(v string) *UpdateAdInsertionResponseBodyConfigCdnConfig {
	s.ContentSegmentUrlPrefix = &v
	return s
}

type UpdateAdInsertionResponseBodyConfigManifestEndpointConfig struct {
	// DASH清单播放端点前缀
	DashPrefix *string `json:"DashPrefix,omitempty" xml:"DashPrefix,omitempty"`
	// The prefix of the playback endpoint for HLS manifests.
	HlsPrefix *string `json:"HlsPrefix,omitempty" xml:"HlsPrefix,omitempty"`
}

func (s UpdateAdInsertionResponseBodyConfigManifestEndpointConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateAdInsertionResponseBodyConfigManifestEndpointConfig) GoString() string {
	return s.String()
}

func (s *UpdateAdInsertionResponseBodyConfigManifestEndpointConfig) SetDashPrefix(v string) *UpdateAdInsertionResponseBodyConfigManifestEndpointConfig {
	s.DashPrefix = &v
	return s
}

func (s *UpdateAdInsertionResponseBodyConfigManifestEndpointConfig) SetHlsPrefix(v string) *UpdateAdInsertionResponseBodyConfigManifestEndpointConfig {
	s.HlsPrefix = &v
	return s
}

type UpdateAdInsertionResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateAdInsertionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateAdInsertionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAdInsertionResponse) GoString() string {
	return s.String()
}

func (s *UpdateAdInsertionResponse) SetHeaders(v map[string]*string) *UpdateAdInsertionResponse {
	s.Headers = v
	return s
}

func (s *UpdateAdInsertionResponse) SetStatusCode(v int32) *UpdateAdInsertionResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateAdInsertionResponse) SetBody(v *UpdateAdInsertionResponseBody) *UpdateAdInsertionResponse {
	s.Body = v
	return s
}

type UpdateAvatarTrainingJobRequest struct {
	// 	- The description of the digital human.
	//
	// 	- The description can be up to 1,000 characters in length.
	AvatarDescription *string `json:"AvatarDescription,omitempty" xml:"AvatarDescription,omitempty"`
	// 	- The name of the digital human.
	//
	// 	- The name can be up to seven characters in length.
	AvatarName *string `json:"AvatarName,omitempty" xml:"AvatarName,omitempty"`
	// The ID of the digital human training job.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****cdb3e74639973036bc84****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// 	- The media asset ID of the portrait image.
	//
	// 	- The value must be 32 characters in length.
	//
	// example:
	//
	// ****571c704445f9a0ee011406c2****
	Portrait *string `json:"Portrait,omitempty" xml:"Portrait,omitempty"`
	// 	- The thumbnail URL.
	//
	// 	- After the digital human is trained, the thumbnail is uploaded to this URL.
	//
	// 	- The URL must be a valid public Object Storage Service (OSS) URL.
	//
	// 	- The URL can be up to 512 characters in length.
	//
	// 	- The URL cannot be updated after the digital human is trained.
	//
	// example:
	//
	// https://your-bucket.oss-cn-hangzhou.aliyuncs.com/thumbnail.png
	Thumbnail *string `json:"Thumbnail,omitempty" xml:"Thumbnail,omitempty"`
	// 	- Indicates whether the input video supports alpha channels.
	//
	// 	- You can modify this parameter only if the job is in the Init or Fail state.
	//
	//     **
	//
	//     **Note**: Make sure that the current settings are consistent with those of the submitted training video. Otherwise, the digital human may malfunction.
	//
	// example:
	//
	// True
	Transparent *bool `json:"Transparent,omitempty" xml:"Transparent,omitempty"`
	// 	- The ID of the video used for training.
	//
	// 	- The value must be 32 characters in length.
	//
	// 	- Supported formats: MP4, MOV, and WebM.
	//
	// 	- The duration of the video must be 5 to 15 minutes.
	//
	// 	- The resolution of the video must be 1920×1080 or 1080×1920.
	//
	// example:
	//
	// ****571c704445f9a0ee011406c2****
	Video *string `json:"Video,omitempty" xml:"Video,omitempty"`
}

func (s UpdateAvatarTrainingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAvatarTrainingJobRequest) GoString() string {
	return s.String()
}

func (s *UpdateAvatarTrainingJobRequest) SetAvatarDescription(v string) *UpdateAvatarTrainingJobRequest {
	s.AvatarDescription = &v
	return s
}

func (s *UpdateAvatarTrainingJobRequest) SetAvatarName(v string) *UpdateAvatarTrainingJobRequest {
	s.AvatarName = &v
	return s
}

func (s *UpdateAvatarTrainingJobRequest) SetJobId(v string) *UpdateAvatarTrainingJobRequest {
	s.JobId = &v
	return s
}

func (s *UpdateAvatarTrainingJobRequest) SetPortrait(v string) *UpdateAvatarTrainingJobRequest {
	s.Portrait = &v
	return s
}

func (s *UpdateAvatarTrainingJobRequest) SetThumbnail(v string) *UpdateAvatarTrainingJobRequest {
	s.Thumbnail = &v
	return s
}

func (s *UpdateAvatarTrainingJobRequest) SetTransparent(v bool) *UpdateAvatarTrainingJobRequest {
	s.Transparent = &v
	return s
}

func (s *UpdateAvatarTrainingJobRequest) SetVideo(v string) *UpdateAvatarTrainingJobRequest {
	s.Video = &v
	return s
}

type UpdateAvatarTrainingJobResponseBody struct {
	// The data returned.
	Data *UpdateAvatarTrainingJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateAvatarTrainingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAvatarTrainingJobResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAvatarTrainingJobResponseBody) SetData(v *UpdateAvatarTrainingJobResponseBodyData) *UpdateAvatarTrainingJobResponseBody {
	s.Data = v
	return s
}

func (s *UpdateAvatarTrainingJobResponseBody) SetRequestId(v string) *UpdateAvatarTrainingJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateAvatarTrainingJobResponseBody) SetSuccess(v bool) *UpdateAvatarTrainingJobResponseBody {
	s.Success = &v
	return s
}

type UpdateAvatarTrainingJobResponseBodyData struct {
	// The ID of the digital human training job.
	//
	// example:
	//
	// ****d718e2ff4f018ccf419a7b71****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s UpdateAvatarTrainingJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateAvatarTrainingJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateAvatarTrainingJobResponseBodyData) SetJobId(v string) *UpdateAvatarTrainingJobResponseBodyData {
	s.JobId = &v
	return s
}

type UpdateAvatarTrainingJobResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateAvatarTrainingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateAvatarTrainingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAvatarTrainingJobResponse) GoString() string {
	return s.String()
}

func (s *UpdateAvatarTrainingJobResponse) SetHeaders(v map[string]*string) *UpdateAvatarTrainingJobResponse {
	s.Headers = v
	return s
}

func (s *UpdateAvatarTrainingJobResponse) SetStatusCode(v int32) *UpdateAvatarTrainingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateAvatarTrainingJobResponse) SetBody(v *UpdateAvatarTrainingJobResponseBody) *UpdateAvatarTrainingJobResponse {
	s.Body = v
	return s
}

type UpdateCategoryRequest struct {
	// The category ID. You can use one of the following methods to obtain the ID:
	//
	// 	- Log on to the [Intelligent Media Services (IMS) console](https://ims.console.aliyun.com) and choose **Media Asset Management*	- > **Category Management*	- to view the category ID.
	//
	// 	- View the value of CateId returned by the AddCategory operation that you called to create a category.
	//
	// 	- View the value of CateId returned by the GetCategories operation that you called to query a category.
	//
	// This parameter is required.
	//
	// example:
	//
	// 43
	CateId *int64 `json:"CateId,omitempty" xml:"CateId,omitempty"`
	// The category name.
	//
	// This parameter is required.
	CateName *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
}

func (s UpdateCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCategoryRequest) GoString() string {
	return s.String()
}

func (s *UpdateCategoryRequest) SetCateId(v int64) *UpdateCategoryRequest {
	s.CateId = &v
	return s
}

func (s *UpdateCategoryRequest) SetCateName(v string) *UpdateCategoryRequest {
	s.CateName = &v
	return s
}

type UpdateCategoryResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 4E84BE44-58A7-****-****-FBEBEA16EF94
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateCategoryResponseBody) SetRequestId(v string) *UpdateCategoryResponseBody {
	s.RequestId = &v
	return s
}

type UpdateCategoryResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCategoryResponse) GoString() string {
	return s.String()
}

func (s *UpdateCategoryResponse) SetHeaders(v map[string]*string) *UpdateCategoryResponse {
	s.Headers = v
	return s
}

func (s *UpdateCategoryResponse) SetStatusCode(v int32) *UpdateCategoryResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateCategoryResponse) SetBody(v *UpdateCategoryResponseBody) *UpdateCategoryResponse {
	s.Body = v
	return s
}

type UpdateChannelRequest struct {
	// Specifies whether to enable access control.
	//
	// example:
	//
	// true
	AccessPolicy *bool `json:"AccessPolicy,omitempty" xml:"AccessPolicy,omitempty"`
	// The token for accessing the channel.
	//
	// example:
	//
	// xxxxx
	AccessToken *string `json:"AccessToken,omitempty" xml:"AccessToken,omitempty"`
	// The name of the channel.
	//
	// This parameter is required.
	//
	// example:
	//
	// MyChannel
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The source location of the filler slate.
	//
	// example:
	//
	// MySourceLocation
	FillerSourceLocationName *string `json:"FillerSourceLocationName,omitempty" xml:"FillerSourceLocationName,omitempty"`
	// The name of the filler slate.
	//
	// example:
	//
	// MySource
	FillerSourceName *string `json:"FillerSourceName,omitempty" xml:"FillerSourceName,omitempty"`
	// The channel output configurations.
	//
	// This parameter is required.
	//
	// example:
	//
	// [{
	//
	// 	"ManifestName": "manifest-1",
	//
	// 	"Format": "HLS",
	//
	// 	"SourceGroupName": "source-group-1",
	//
	// 	"ManifestSettings": {
	//
	// 		"WindowDuration": 60,
	//
	// 		"AdMarkType": "Daterange"
	//
	// 	}
	//
	// }]
	OutPutConfigList *string `json:"OutPutConfigList,omitempty" xml:"OutPutConfigList,omitempty"`
}

func (s UpdateChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateChannelRequest) GoString() string {
	return s.String()
}

func (s *UpdateChannelRequest) SetAccessPolicy(v bool) *UpdateChannelRequest {
	s.AccessPolicy = &v
	return s
}

func (s *UpdateChannelRequest) SetAccessToken(v string) *UpdateChannelRequest {
	s.AccessToken = &v
	return s
}

func (s *UpdateChannelRequest) SetChannelName(v string) *UpdateChannelRequest {
	s.ChannelName = &v
	return s
}

func (s *UpdateChannelRequest) SetFillerSourceLocationName(v string) *UpdateChannelRequest {
	s.FillerSourceLocationName = &v
	return s
}

func (s *UpdateChannelRequest) SetFillerSourceName(v string) *UpdateChannelRequest {
	s.FillerSourceName = &v
	return s
}

func (s *UpdateChannelRequest) SetOutPutConfigList(v string) *UpdateChannelRequest {
	s.OutPutConfigList = &v
	return s
}

type UpdateChannelResponseBody struct {
	// The channel information.
	Channel *ChannelAssemblyChannel `json:"Channel,omitempty" xml:"Channel,omitempty"`
	// **Request ID**
	//
	// example:
	//
	// xxx-xxxx-xxxxx-xxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateChannelResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateChannelResponseBody) SetChannel(v *ChannelAssemblyChannel) *UpdateChannelResponseBody {
	s.Channel = v
	return s
}

func (s *UpdateChannelResponseBody) SetRequestId(v string) *UpdateChannelResponseBody {
	s.RequestId = &v
	return s
}

type UpdateChannelResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateChannelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateChannelResponse) GoString() string {
	return s.String()
}

func (s *UpdateChannelResponse) SetHeaders(v map[string]*string) *UpdateChannelResponse {
	s.Headers = v
	return s
}

func (s *UpdateChannelResponse) SetStatusCode(v int32) *UpdateChannelResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateChannelResponse) SetBody(v *UpdateChannelResponseBody) *UpdateChannelResponse {
	s.Body = v
	return s
}

type UpdateCustomTemplateRequest struct {
	// The template name.
	//
	// example:
	//
	// test-template
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The [template parameters](https://help.aliyun.com/document_detail/448291.html).
	//
	// example:
	//
	// {"param": "sample"}
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// The template ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s UpdateCustomTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomTemplateRequest) GoString() string {
	return s.String()
}

func (s *UpdateCustomTemplateRequest) SetName(v string) *UpdateCustomTemplateRequest {
	s.Name = &v
	return s
}

func (s *UpdateCustomTemplateRequest) SetTemplateConfig(v string) *UpdateCustomTemplateRequest {
	s.TemplateConfig = &v
	return s
}

func (s *UpdateCustomTemplateRequest) SetTemplateId(v string) *UpdateCustomTemplateRequest {
	s.TemplateId = &v
	return s
}

type UpdateCustomTemplateResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateCustomTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateCustomTemplateResponseBody) SetRequestId(v string) *UpdateCustomTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateCustomTemplateResponseBody) SetSuccess(v bool) *UpdateCustomTemplateResponseBody {
	s.Success = &v
	return s
}

type UpdateCustomTemplateResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateCustomTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateCustomTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomTemplateResponse) GoString() string {
	return s.String()
}

func (s *UpdateCustomTemplateResponse) SetHeaders(v map[string]*string) *UpdateCustomTemplateResponse {
	s.Headers = v
	return s
}

func (s *UpdateCustomTemplateResponse) SetStatusCode(v int32) *UpdateCustomTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateCustomTemplateResponse) SetBody(v *UpdateCustomTemplateResponseBody) *UpdateCustomTemplateResponse {
	s.Body = v
	return s
}

type UpdateCustomizedVoiceRequest struct {
	// The media asset ID of the sample audio file.
	//
	// example:
	//
	// ****4d5e829d498aaf966b119348****
	DemoAudioMediaId *string `json:"DemoAudioMediaId,omitempty" xml:"DemoAudioMediaId,omitempty"`
	// The voice ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// xiaozhuan
	VoiceId *string `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
}

func (s UpdateCustomizedVoiceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomizedVoiceRequest) GoString() string {
	return s.String()
}

func (s *UpdateCustomizedVoiceRequest) SetDemoAudioMediaId(v string) *UpdateCustomizedVoiceRequest {
	s.DemoAudioMediaId = &v
	return s
}

func (s *UpdateCustomizedVoiceRequest) SetVoiceId(v string) *UpdateCustomizedVoiceRequest {
	s.VoiceId = &v
	return s
}

type UpdateCustomizedVoiceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 4E84BE44-58A7-****-****-FBEBEA16EF94
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateCustomizedVoiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomizedVoiceResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateCustomizedVoiceResponseBody) SetRequestId(v string) *UpdateCustomizedVoiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateCustomizedVoiceResponseBody) SetSuccess(v bool) *UpdateCustomizedVoiceResponseBody {
	s.Success = &v
	return s
}

type UpdateCustomizedVoiceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateCustomizedVoiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateCustomizedVoiceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomizedVoiceResponse) GoString() string {
	return s.String()
}

func (s *UpdateCustomizedVoiceResponse) SetHeaders(v map[string]*string) *UpdateCustomizedVoiceResponse {
	s.Headers = v
	return s
}

func (s *UpdateCustomizedVoiceResponse) SetStatusCode(v int32) *UpdateCustomizedVoiceResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateCustomizedVoiceResponse) SetBody(v *UpdateCustomizedVoiceResponseBody) *UpdateCustomizedVoiceResponse {
	s.Body = v
	return s
}

type UpdateEditingProjectRequest struct {
	// The business status of the project. This parameter can be ignored for general editing projects. Valid values:
	//
	// 	- Reserving
	//
	// 	- ReservationCanceled
	//
	// example:
	//
	// Reserving
	BusinessStatus *string `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty"`
	// The material parameter corresponding to the template, in the JSON format. If TemplateId is specified, ClipsParam must also be specified.
	ClipsParam *string `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	// The thumbnail URL of the online editing project.
	//
	// example:
	//
	// https://****.com/6AB4D0E1E1C7446888****.png
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// The description of the online editing project.
	//
	// example:
	//
	// testtimeline001desciption
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the online editing project.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****4ee4b97e27b525142a6b2****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The template ID. This parameter is used to quickly build a timeline with ease. Note: Only one of ProjectId, Timeline, and TemplateId can be specified. If TemplateId is specified, ClipsParam must also be specified.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	Timeline   *string `json:"Timeline,omitempty" xml:"Timeline,omitempty"`
	// The title of the online editing project.
	//
	// example:
	//
	// testtimeline
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s UpdateEditingProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEditingProjectRequest) GoString() string {
	return s.String()
}

func (s *UpdateEditingProjectRequest) SetBusinessStatus(v string) *UpdateEditingProjectRequest {
	s.BusinessStatus = &v
	return s
}

func (s *UpdateEditingProjectRequest) SetClipsParam(v string) *UpdateEditingProjectRequest {
	s.ClipsParam = &v
	return s
}

func (s *UpdateEditingProjectRequest) SetCoverURL(v string) *UpdateEditingProjectRequest {
	s.CoverURL = &v
	return s
}

func (s *UpdateEditingProjectRequest) SetDescription(v string) *UpdateEditingProjectRequest {
	s.Description = &v
	return s
}

func (s *UpdateEditingProjectRequest) SetProjectId(v string) *UpdateEditingProjectRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateEditingProjectRequest) SetTemplateId(v string) *UpdateEditingProjectRequest {
	s.TemplateId = &v
	return s
}

func (s *UpdateEditingProjectRequest) SetTimeline(v string) *UpdateEditingProjectRequest {
	s.Timeline = &v
	return s
}

func (s *UpdateEditingProjectRequest) SetTitle(v string) *UpdateEditingProjectRequest {
	s.Title = &v
	return s
}

type UpdateEditingProjectResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ****25818875-5F78-4AF6-D7393642CA58****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateEditingProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateEditingProjectResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateEditingProjectResponseBody) SetRequestId(v string) *UpdateEditingProjectResponseBody {
	s.RequestId = &v
	return s
}

type UpdateEditingProjectResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateEditingProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateEditingProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEditingProjectResponse) GoString() string {
	return s.String()
}

func (s *UpdateEditingProjectResponse) SetHeaders(v map[string]*string) *UpdateEditingProjectResponse {
	s.Headers = v
	return s
}

func (s *UpdateEditingProjectResponse) SetStatusCode(v int32) *UpdateEditingProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateEditingProjectResponse) SetBody(v *UpdateEditingProjectResponseBody) *UpdateEditingProjectResponse {
	s.Body = v
	return s
}

type UpdateHotwordLibraryRequest struct {
	// example:
	//
	// 存放名人的词库
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// *a0052ff71efbfd4e7e6c66*
	HotwordLibraryId *string    `json:"HotwordLibraryId,omitempty" xml:"HotwordLibraryId,omitempty"`
	Hotwords         []*Hotword `json:"Hotwords,omitempty" xml:"Hotwords,omitempty" type:"Repeated"`
	// example:
	//
	// my_hotwords
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s UpdateHotwordLibraryRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateHotwordLibraryRequest) GoString() string {
	return s.String()
}

func (s *UpdateHotwordLibraryRequest) SetDescription(v string) *UpdateHotwordLibraryRequest {
	s.Description = &v
	return s
}

func (s *UpdateHotwordLibraryRequest) SetHotwordLibraryId(v string) *UpdateHotwordLibraryRequest {
	s.HotwordLibraryId = &v
	return s
}

func (s *UpdateHotwordLibraryRequest) SetHotwords(v []*Hotword) *UpdateHotwordLibraryRequest {
	s.Hotwords = v
	return s
}

func (s *UpdateHotwordLibraryRequest) SetName(v string) *UpdateHotwordLibraryRequest {
	s.Name = &v
	return s
}

type UpdateHotwordLibraryShrinkRequest struct {
	// example:
	//
	// 存放名人的词库
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// *a0052ff71efbfd4e7e6c66*
	HotwordLibraryId *string `json:"HotwordLibraryId,omitempty" xml:"HotwordLibraryId,omitempty"`
	HotwordsShrink   *string `json:"Hotwords,omitempty" xml:"Hotwords,omitempty"`
	// example:
	//
	// my_hotwords
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s UpdateHotwordLibraryShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateHotwordLibraryShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateHotwordLibraryShrinkRequest) SetDescription(v string) *UpdateHotwordLibraryShrinkRequest {
	s.Description = &v
	return s
}

func (s *UpdateHotwordLibraryShrinkRequest) SetHotwordLibraryId(v string) *UpdateHotwordLibraryShrinkRequest {
	s.HotwordLibraryId = &v
	return s
}

func (s *UpdateHotwordLibraryShrinkRequest) SetHotwordsShrink(v string) *UpdateHotwordLibraryShrinkRequest {
	s.HotwordsShrink = &v
	return s
}

func (s *UpdateHotwordLibraryShrinkRequest) SetName(v string) *UpdateHotwordLibraryShrinkRequest {
	s.Name = &v
	return s
}

type UpdateHotwordLibraryResponseBody struct {
	// example:
	//
	// *3B-0E1A-586A-AC29-742247*
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// ****96e8864746a0b6f3****
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateHotwordLibraryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateHotwordLibraryResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateHotwordLibraryResponseBody) SetRequestId(v string) *UpdateHotwordLibraryResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateHotwordLibraryResponseBody) SetSuccess(v string) *UpdateHotwordLibraryResponseBody {
	s.Success = &v
	return s
}

type UpdateHotwordLibraryResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateHotwordLibraryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateHotwordLibraryResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateHotwordLibraryResponse) GoString() string {
	return s.String()
}

func (s *UpdateHotwordLibraryResponse) SetHeaders(v map[string]*string) *UpdateHotwordLibraryResponse {
	s.Headers = v
	return s
}

func (s *UpdateHotwordLibraryResponse) SetStatusCode(v int32) *UpdateHotwordLibraryResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateHotwordLibraryResponse) SetBody(v *UpdateHotwordLibraryResponseBody) *UpdateHotwordLibraryResponse {
	s.Body = v
	return s
}

type UpdateLivePackageChannelRequest struct {
	// The channel name. It can contain letters, digits, hyphens (-), and underscores (_). The name must be 1 to 200 characters in length. Format: [A-Za-z0-9_-]+
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-1
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The channel description. It can be up to 1,000 characters in length.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The channel group name. It can contain letters, digits, hyphens (-), and underscores (_). The name must be 1 to 200 characters in length. Format: [A-Za-z0-9_-]+
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-group-1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The ingest protocol. Only HLS is supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// HLS
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// The number of M3U8 segments. Valid values: 2 to 100.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3
	SegmentCount *int32 `json:"SegmentCount,omitempty" xml:"SegmentCount,omitempty"`
	// The segment duration. Valid values: 1 to 30.
	//
	// This parameter is required.
	//
	// example:
	//
	// 6
	SegmentDuration *int32 `json:"SegmentDuration,omitempty" xml:"SegmentDuration,omitempty"`
}

func (s UpdateLivePackageChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLivePackageChannelRequest) GoString() string {
	return s.String()
}

func (s *UpdateLivePackageChannelRequest) SetChannelName(v string) *UpdateLivePackageChannelRequest {
	s.ChannelName = &v
	return s
}

func (s *UpdateLivePackageChannelRequest) SetDescription(v string) *UpdateLivePackageChannelRequest {
	s.Description = &v
	return s
}

func (s *UpdateLivePackageChannelRequest) SetGroupName(v string) *UpdateLivePackageChannelRequest {
	s.GroupName = &v
	return s
}

func (s *UpdateLivePackageChannelRequest) SetProtocol(v string) *UpdateLivePackageChannelRequest {
	s.Protocol = &v
	return s
}

func (s *UpdateLivePackageChannelRequest) SetSegmentCount(v int32) *UpdateLivePackageChannelRequest {
	s.SegmentCount = &v
	return s
}

func (s *UpdateLivePackageChannelRequest) SetSegmentDuration(v int32) *UpdateLivePackageChannelRequest {
	s.SegmentDuration = &v
	return s
}

type UpdateLivePackageChannelResponseBody struct {
	// The information about the live package channel.
	LivePackageChannel *UpdateLivePackageChannelResponseBodyLivePackageChannel `json:"LivePackageChannel,omitempty" xml:"LivePackageChannel,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 771A1414-27BF-53E6-AB73-EFCB*****ACF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLivePackageChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLivePackageChannelResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLivePackageChannelResponseBody) SetLivePackageChannel(v *UpdateLivePackageChannelResponseBodyLivePackageChannel) *UpdateLivePackageChannelResponseBody {
	s.LivePackageChannel = v
	return s
}

func (s *UpdateLivePackageChannelResponseBody) SetRequestId(v string) *UpdateLivePackageChannelResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLivePackageChannelResponseBodyLivePackageChannel struct {
	// The channel name.
	//
	// example:
	//
	// channel-1
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The time when the channel was created.
	//
	// example:
	//
	// 2024-07-16T02:24:42Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The channel description. It can be up to 1,000 characters in length.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The channel group name.
	//
	// example:
	//
	// channel-group-1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The ingest endpoints.
	IngestEndpoints []*UpdateLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints `json:"IngestEndpoints,omitempty" xml:"IngestEndpoints,omitempty" type:"Repeated"`
	// The time when the channel was last modified.
	//
	// example:
	//
	// 2024-07-16T02:24:42Z
	LastModified *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	// The ingest protocol. Only HLS is supported.
	//
	// example:
	//
	// HLS
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// The number of segments.
	//
	// example:
	//
	// 3
	SegmentCount *int32 `json:"SegmentCount,omitempty" xml:"SegmentCount,omitempty"`
	// The segment duration.
	//
	// example:
	//
	// 5
	SegmentDuration *int32 `json:"SegmentDuration,omitempty" xml:"SegmentDuration,omitempty"`
}

func (s UpdateLivePackageChannelResponseBodyLivePackageChannel) String() string {
	return tea.Prettify(s)
}

func (s UpdateLivePackageChannelResponseBodyLivePackageChannel) GoString() string {
	return s.String()
}

func (s *UpdateLivePackageChannelResponseBodyLivePackageChannel) SetChannelName(v string) *UpdateLivePackageChannelResponseBodyLivePackageChannel {
	s.ChannelName = &v
	return s
}

func (s *UpdateLivePackageChannelResponseBodyLivePackageChannel) SetCreateTime(v string) *UpdateLivePackageChannelResponseBodyLivePackageChannel {
	s.CreateTime = &v
	return s
}

func (s *UpdateLivePackageChannelResponseBodyLivePackageChannel) SetDescription(v string) *UpdateLivePackageChannelResponseBodyLivePackageChannel {
	s.Description = &v
	return s
}

func (s *UpdateLivePackageChannelResponseBodyLivePackageChannel) SetGroupName(v string) *UpdateLivePackageChannelResponseBodyLivePackageChannel {
	s.GroupName = &v
	return s
}

func (s *UpdateLivePackageChannelResponseBodyLivePackageChannel) SetIngestEndpoints(v []*UpdateLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints) *UpdateLivePackageChannelResponseBodyLivePackageChannel {
	s.IngestEndpoints = v
	return s
}

func (s *UpdateLivePackageChannelResponseBodyLivePackageChannel) SetLastModified(v string) *UpdateLivePackageChannelResponseBodyLivePackageChannel {
	s.LastModified = &v
	return s
}

func (s *UpdateLivePackageChannelResponseBodyLivePackageChannel) SetProtocol(v string) *UpdateLivePackageChannelResponseBodyLivePackageChannel {
	s.Protocol = &v
	return s
}

func (s *UpdateLivePackageChannelResponseBodyLivePackageChannel) SetSegmentCount(v int32) *UpdateLivePackageChannelResponseBodyLivePackageChannel {
	s.SegmentCount = &v
	return s
}

func (s *UpdateLivePackageChannelResponseBodyLivePackageChannel) SetSegmentDuration(v int32) *UpdateLivePackageChannelResponseBodyLivePackageChannel {
	s.SegmentDuration = &v
	return s
}

type UpdateLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints struct {
	// The ingest endpoint ID.
	//
	// example:
	//
	// ingest1
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The password.
	//
	// example:
	//
	// 2F9e******b569c8
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The ingest endpoint URL.
	//
	// example:
	//
	// http://xxx-1.packagepush-abcxxx.ap-southeast-1.aliyuncsiceintl.com/v1/group01/1/ch01/manifest
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// The username.
	//
	// example:
	//
	// us12******das
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s UpdateLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints) String() string {
	return tea.Prettify(s)
}

func (s UpdateLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints) GoString() string {
	return s.String()
}

func (s *UpdateLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints) SetId(v string) *UpdateLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints {
	s.Id = &v
	return s
}

func (s *UpdateLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints) SetPassword(v string) *UpdateLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints {
	s.Password = &v
	return s
}

func (s *UpdateLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints) SetUrl(v string) *UpdateLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints {
	s.Url = &v
	return s
}

func (s *UpdateLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints) SetUsername(v string) *UpdateLivePackageChannelResponseBodyLivePackageChannelIngestEndpoints {
	s.Username = &v
	return s
}

type UpdateLivePackageChannelResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateLivePackageChannelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateLivePackageChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLivePackageChannelResponse) GoString() string {
	return s.String()
}

func (s *UpdateLivePackageChannelResponse) SetHeaders(v map[string]*string) *UpdateLivePackageChannelResponse {
	s.Headers = v
	return s
}

func (s *UpdateLivePackageChannelResponse) SetStatusCode(v int32) *UpdateLivePackageChannelResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLivePackageChannelResponse) SetBody(v *UpdateLivePackageChannelResponseBody) *UpdateLivePackageChannelResponse {
	s.Body = v
	return s
}

type UpdateLivePackageChannelCredentialsRequest struct {
	// The channel name.
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-1
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The channel group name.
	//
	// This parameter is required.
	//
	// example:
	//
	// group-1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// Specifies whether to update the credentials. 1: updates the credentials of endpoint 1. 2: updates the credentials of endpoint 2. 3: updates the credentials of endpoints 1 and 2.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3
	RotateCredentials *int32 `json:"RotateCredentials,omitempty" xml:"RotateCredentials,omitempty"`
}

func (s UpdateLivePackageChannelCredentialsRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLivePackageChannelCredentialsRequest) GoString() string {
	return s.String()
}

func (s *UpdateLivePackageChannelCredentialsRequest) SetChannelName(v string) *UpdateLivePackageChannelCredentialsRequest {
	s.ChannelName = &v
	return s
}

func (s *UpdateLivePackageChannelCredentialsRequest) SetGroupName(v string) *UpdateLivePackageChannelCredentialsRequest {
	s.GroupName = &v
	return s
}

func (s *UpdateLivePackageChannelCredentialsRequest) SetRotateCredentials(v int32) *UpdateLivePackageChannelCredentialsRequest {
	s.RotateCredentials = &v
	return s
}

type UpdateLivePackageChannelCredentialsResponseBody struct {
	// The information about the ingest endpoint.
	IngestEndpoints []*UpdateLivePackageChannelCredentialsResponseBodyIngestEndpoints `json:"IngestEndpoints,omitempty" xml:"IngestEndpoints,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 771A1414-27BF-53E6-AB73-EFCB*****ACF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLivePackageChannelCredentialsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLivePackageChannelCredentialsResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLivePackageChannelCredentialsResponseBody) SetIngestEndpoints(v []*UpdateLivePackageChannelCredentialsResponseBodyIngestEndpoints) *UpdateLivePackageChannelCredentialsResponseBody {
	s.IngestEndpoints = v
	return s
}

func (s *UpdateLivePackageChannelCredentialsResponseBody) SetRequestId(v string) *UpdateLivePackageChannelCredentialsResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLivePackageChannelCredentialsResponseBodyIngestEndpoints struct {
	// The ingest endpoint ID. `input1` indicates primary and `input2` indicates secondary.
	//
	// example:
	//
	// input1
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The password.
	//
	// example:
	//
	// examplePassword123
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The ingest endpoint URL.
	//
	// example:
	//
	// rtmp://example.com/live/input1
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// The username.
	//
	// example:
	//
	// user1
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s UpdateLivePackageChannelCredentialsResponseBodyIngestEndpoints) String() string {
	return tea.Prettify(s)
}

func (s UpdateLivePackageChannelCredentialsResponseBodyIngestEndpoints) GoString() string {
	return s.String()
}

func (s *UpdateLivePackageChannelCredentialsResponseBodyIngestEndpoints) SetId(v string) *UpdateLivePackageChannelCredentialsResponseBodyIngestEndpoints {
	s.Id = &v
	return s
}

func (s *UpdateLivePackageChannelCredentialsResponseBodyIngestEndpoints) SetPassword(v string) *UpdateLivePackageChannelCredentialsResponseBodyIngestEndpoints {
	s.Password = &v
	return s
}

func (s *UpdateLivePackageChannelCredentialsResponseBodyIngestEndpoints) SetUrl(v string) *UpdateLivePackageChannelCredentialsResponseBodyIngestEndpoints {
	s.Url = &v
	return s
}

func (s *UpdateLivePackageChannelCredentialsResponseBodyIngestEndpoints) SetUsername(v string) *UpdateLivePackageChannelCredentialsResponseBodyIngestEndpoints {
	s.Username = &v
	return s
}

type UpdateLivePackageChannelCredentialsResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateLivePackageChannelCredentialsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateLivePackageChannelCredentialsResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLivePackageChannelCredentialsResponse) GoString() string {
	return s.String()
}

func (s *UpdateLivePackageChannelCredentialsResponse) SetHeaders(v map[string]*string) *UpdateLivePackageChannelCredentialsResponse {
	s.Headers = v
	return s
}

func (s *UpdateLivePackageChannelCredentialsResponse) SetStatusCode(v int32) *UpdateLivePackageChannelCredentialsResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLivePackageChannelCredentialsResponse) SetBody(v *UpdateLivePackageChannelCredentialsResponseBody) *UpdateLivePackageChannelCredentialsResponse {
	s.Body = v
	return s
}

type UpdateLivePackageChannelGroupRequest struct {
	// The channel group description. It can be up to 1,000 characters in length.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The channel group name. It can contain letters, digits, hyphens (-), and underscores (_). The name must be 1 to 200 characters in length. Format: [A-Za-z0-9_-]+
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-group-1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s UpdateLivePackageChannelGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLivePackageChannelGroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateLivePackageChannelGroupRequest) SetDescription(v string) *UpdateLivePackageChannelGroupRequest {
	s.Description = &v
	return s
}

func (s *UpdateLivePackageChannelGroupRequest) SetGroupName(v string) *UpdateLivePackageChannelGroupRequest {
	s.GroupName = &v
	return s
}

type UpdateLivePackageChannelGroupResponseBody struct {
	// The information about the channel group.
	LivePackageChannelGroup *UpdateLivePackageChannelGroupResponseBodyLivePackageChannelGroup `json:"LivePackageChannelGroup,omitempty" xml:"LivePackageChannelGroup,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// request-1234567890
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLivePackageChannelGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLivePackageChannelGroupResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLivePackageChannelGroupResponseBody) SetLivePackageChannelGroup(v *UpdateLivePackageChannelGroupResponseBodyLivePackageChannelGroup) *UpdateLivePackageChannelGroupResponseBody {
	s.LivePackageChannelGroup = v
	return s
}

func (s *UpdateLivePackageChannelGroupResponseBody) SetRequestId(v string) *UpdateLivePackageChannelGroupResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLivePackageChannelGroupResponseBodyLivePackageChannelGroup struct {
	// The time when the channel group was created. It is in the yyyy-MM-ddTHH:mm:ssZ format and displayed in UTC.
	//
	// example:
	//
	// 2023-04-01T12:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The channel group description.
	//
	// example:
	//
	// Updated description of the channel group.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The channel group name.
	//
	// example:
	//
	// example-group-name
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The time when the channel group was last modified. It is in the yyyy-MM-ddTHH:mm:ssZ format and displayed in UTC.
	//
	// example:
	//
	// 2023-04-01T12:00:00Z
	LastModified *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	// The origin domain.
	//
	// example:
	//
	// example-origin.com
	OriginDomain *string `json:"OriginDomain,omitempty" xml:"OriginDomain,omitempty"`
}

func (s UpdateLivePackageChannelGroupResponseBodyLivePackageChannelGroup) String() string {
	return tea.Prettify(s)
}

func (s UpdateLivePackageChannelGroupResponseBodyLivePackageChannelGroup) GoString() string {
	return s.String()
}

func (s *UpdateLivePackageChannelGroupResponseBodyLivePackageChannelGroup) SetCreateTime(v string) *UpdateLivePackageChannelGroupResponseBodyLivePackageChannelGroup {
	s.CreateTime = &v
	return s
}

func (s *UpdateLivePackageChannelGroupResponseBodyLivePackageChannelGroup) SetDescription(v string) *UpdateLivePackageChannelGroupResponseBodyLivePackageChannelGroup {
	s.Description = &v
	return s
}

func (s *UpdateLivePackageChannelGroupResponseBodyLivePackageChannelGroup) SetGroupName(v string) *UpdateLivePackageChannelGroupResponseBodyLivePackageChannelGroup {
	s.GroupName = &v
	return s
}

func (s *UpdateLivePackageChannelGroupResponseBodyLivePackageChannelGroup) SetLastModified(v string) *UpdateLivePackageChannelGroupResponseBodyLivePackageChannelGroup {
	s.LastModified = &v
	return s
}

func (s *UpdateLivePackageChannelGroupResponseBodyLivePackageChannelGroup) SetOriginDomain(v string) *UpdateLivePackageChannelGroupResponseBodyLivePackageChannelGroup {
	s.OriginDomain = &v
	return s
}

type UpdateLivePackageChannelGroupResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateLivePackageChannelGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateLivePackageChannelGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLivePackageChannelGroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateLivePackageChannelGroupResponse) SetHeaders(v map[string]*string) *UpdateLivePackageChannelGroupResponse {
	s.Headers = v
	return s
}

func (s *UpdateLivePackageChannelGroupResponse) SetStatusCode(v int32) *UpdateLivePackageChannelGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLivePackageChannelGroupResponse) SetBody(v *UpdateLivePackageChannelGroupResponseBody) *UpdateLivePackageChannelGroupResponse {
	s.Body = v
	return s
}

type UpdateLivePackageOriginEndpointRequest struct {
	// The authorization code. It can be up to 200 characters in length. You must configure AuthorizationCode, IpWhitelist, or both. Format: [A-Za-z0-9-_.]+
	//
	// example:
	//
	// Abc123Def456
	AuthorizationCode *string `json:"AuthorizationCode,omitempty" xml:"AuthorizationCode,omitempty"`
	// The channel name.
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-1
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The endpoint description.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The origin endpoint name. It can contain letters, digits, hyphens (-), and underscores (_). The name must be 1 to 200 characters in length. Format: [A-Za-z0-9_-]+
	//
	// This parameter is required.
	//
	// example:
	//
	// endpoint-1
	EndpointName *string `json:"EndpointName,omitempty" xml:"EndpointName,omitempty"`
	// The channel group name.
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-group-1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The IP address blacklist. It supports subnet masks. Separate multiple IP addresses with commas (,).
	//
	// example:
	//
	// 103.0.0.0/8
	IpBlacklist *string `json:"IpBlacklist,omitempty" xml:"IpBlacklist,omitempty"`
	// The IP address whitelist. It supports subnet masks. 0.0.0.0/0 is not allowed. It can be up to 1,000 characters in length. Separate multiple IP addresses with commas (,). You must configure AuthorizationCode, IpWhitelist, or both.
	//
	// example:
	//
	// 192.168.1.0/24,10.0.0.1
	IpWhitelist         *string              `json:"IpWhitelist,omitempty" xml:"IpWhitelist,omitempty"`
	LivePackagingConfig *LivePackagingConfig `json:"LivePackagingConfig,omitempty" xml:"LivePackagingConfig,omitempty"`
	// The playlist name. Default value: manifest.
	//
	// example:
	//
	// manifest
	ManifestName *string `json:"ManifestName,omitempty" xml:"ManifestName,omitempty"`
	// The protocol. Only HLS is supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// HLS
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// The number of days that time-shifted content is available. Maximum value: 30.
	//
	// example:
	//
	// 5
	TimeshiftVision *int32 `json:"TimeshiftVision,omitempty" xml:"TimeshiftVision,omitempty"`
}

func (s UpdateLivePackageOriginEndpointRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLivePackageOriginEndpointRequest) GoString() string {
	return s.String()
}

func (s *UpdateLivePackageOriginEndpointRequest) SetAuthorizationCode(v string) *UpdateLivePackageOriginEndpointRequest {
	s.AuthorizationCode = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointRequest) SetChannelName(v string) *UpdateLivePackageOriginEndpointRequest {
	s.ChannelName = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointRequest) SetDescription(v string) *UpdateLivePackageOriginEndpointRequest {
	s.Description = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointRequest) SetEndpointName(v string) *UpdateLivePackageOriginEndpointRequest {
	s.EndpointName = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointRequest) SetGroupName(v string) *UpdateLivePackageOriginEndpointRequest {
	s.GroupName = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointRequest) SetIpBlacklist(v string) *UpdateLivePackageOriginEndpointRequest {
	s.IpBlacklist = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointRequest) SetIpWhitelist(v string) *UpdateLivePackageOriginEndpointRequest {
	s.IpWhitelist = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointRequest) SetLivePackagingConfig(v *LivePackagingConfig) *UpdateLivePackageOriginEndpointRequest {
	s.LivePackagingConfig = v
	return s
}

func (s *UpdateLivePackageOriginEndpointRequest) SetManifestName(v string) *UpdateLivePackageOriginEndpointRequest {
	s.ManifestName = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointRequest) SetProtocol(v string) *UpdateLivePackageOriginEndpointRequest {
	s.Protocol = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointRequest) SetTimeshiftVision(v int32) *UpdateLivePackageOriginEndpointRequest {
	s.TimeshiftVision = &v
	return s
}

type UpdateLivePackageOriginEndpointShrinkRequest struct {
	// The authorization code. It can be up to 200 characters in length. You must configure AuthorizationCode, IpWhitelist, or both. Format: [A-Za-z0-9-_.]+
	//
	// example:
	//
	// Abc123Def456
	AuthorizationCode *string `json:"AuthorizationCode,omitempty" xml:"AuthorizationCode,omitempty"`
	// The channel name.
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-1
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The endpoint description.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The origin endpoint name. It can contain letters, digits, hyphens (-), and underscores (_). The name must be 1 to 200 characters in length. Format: [A-Za-z0-9_-]+
	//
	// This parameter is required.
	//
	// example:
	//
	// endpoint-1
	EndpointName *string `json:"EndpointName,omitempty" xml:"EndpointName,omitempty"`
	// The channel group name.
	//
	// This parameter is required.
	//
	// example:
	//
	// channel-group-1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The IP address blacklist. It supports subnet masks. Separate multiple IP addresses with commas (,).
	//
	// example:
	//
	// 103.0.0.0/8
	IpBlacklist *string `json:"IpBlacklist,omitempty" xml:"IpBlacklist,omitempty"`
	// The IP address whitelist. It supports subnet masks. 0.0.0.0/0 is not allowed. It can be up to 1,000 characters in length. Separate multiple IP addresses with commas (,). You must configure AuthorizationCode, IpWhitelist, or both.
	//
	// example:
	//
	// 192.168.1.0/24,10.0.0.1
	IpWhitelist               *string `json:"IpWhitelist,omitempty" xml:"IpWhitelist,omitempty"`
	LivePackagingConfigShrink *string `json:"LivePackagingConfig,omitempty" xml:"LivePackagingConfig,omitempty"`
	// The playlist name. Default value: manifest.
	//
	// example:
	//
	// manifest
	ManifestName *string `json:"ManifestName,omitempty" xml:"ManifestName,omitempty"`
	// The protocol. Only HLS is supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// HLS
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// The number of days that time-shifted content is available. Maximum value: 30.
	//
	// example:
	//
	// 5
	TimeshiftVision *int32 `json:"TimeshiftVision,omitempty" xml:"TimeshiftVision,omitempty"`
}

func (s UpdateLivePackageOriginEndpointShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLivePackageOriginEndpointShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateLivePackageOriginEndpointShrinkRequest) SetAuthorizationCode(v string) *UpdateLivePackageOriginEndpointShrinkRequest {
	s.AuthorizationCode = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointShrinkRequest) SetChannelName(v string) *UpdateLivePackageOriginEndpointShrinkRequest {
	s.ChannelName = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointShrinkRequest) SetDescription(v string) *UpdateLivePackageOriginEndpointShrinkRequest {
	s.Description = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointShrinkRequest) SetEndpointName(v string) *UpdateLivePackageOriginEndpointShrinkRequest {
	s.EndpointName = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointShrinkRequest) SetGroupName(v string) *UpdateLivePackageOriginEndpointShrinkRequest {
	s.GroupName = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointShrinkRequest) SetIpBlacklist(v string) *UpdateLivePackageOriginEndpointShrinkRequest {
	s.IpBlacklist = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointShrinkRequest) SetIpWhitelist(v string) *UpdateLivePackageOriginEndpointShrinkRequest {
	s.IpWhitelist = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointShrinkRequest) SetLivePackagingConfigShrink(v string) *UpdateLivePackageOriginEndpointShrinkRequest {
	s.LivePackagingConfigShrink = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointShrinkRequest) SetManifestName(v string) *UpdateLivePackageOriginEndpointShrinkRequest {
	s.ManifestName = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointShrinkRequest) SetProtocol(v string) *UpdateLivePackageOriginEndpointShrinkRequest {
	s.Protocol = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointShrinkRequest) SetTimeshiftVision(v int32) *UpdateLivePackageOriginEndpointShrinkRequest {
	s.TimeshiftVision = &v
	return s
}

type UpdateLivePackageOriginEndpointResponseBody struct {
	// The information about the origin endpoint.
	LivePackageOriginEndpoint *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint `json:"LivePackageOriginEndpoint,omitempty" xml:"LivePackageOriginEndpoint,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// b1f8d6c4-a123-4cd5-9e88-d0819e3bfa70
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLivePackageOriginEndpointResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLivePackageOriginEndpointResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLivePackageOriginEndpointResponseBody) SetLivePackageOriginEndpoint(v *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) *UpdateLivePackageOriginEndpointResponseBody {
	s.LivePackageOriginEndpoint = v
	return s
}

func (s *UpdateLivePackageOriginEndpointResponseBody) SetRequestId(v string) *UpdateLivePackageOriginEndpointResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint struct {
	// The authorization code.
	//
	// example:
	//
	// Abc123Def456
	AuthorizationCode *string `json:"AuthorizationCode,omitempty" xml:"AuthorizationCode,omitempty"`
	// The channel name.
	//
	// example:
	//
	// channel-1
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// The time when the endpoint was created.
	//
	// example:
	//
	// 2023-04-01T12:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The endpoint description.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The endpoint name.
	//
	// example:
	//
	// endpoint-1
	EndpointName *string `json:"EndpointName,omitempty" xml:"EndpointName,omitempty"`
	// The endpoint URL.
	//
	// example:
	//
	// https://xxx.packagepull-abcxxx.ap-southeast-1.aliyuncsiceintl.com/v1/group01/1/ch01/manifest
	EndpointUrl *string `json:"EndpointUrl,omitempty" xml:"EndpointUrl,omitempty"`
	// The channel group name.
	//
	// example:
	//
	// channel-group-1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The IP address blacklist. It supports subnet masks. Multiple IP addresses are separated by commas (,).
	//
	// example:
	//
	// 10.21.222.1/32,192.168.100.0/24
	IpBlacklist *string `json:"IpBlacklist,omitempty" xml:"IpBlacklist,omitempty"`
	// The IP address whitelist. It supports subnet masks. Multiple IP addresses are separated by commas (,).
	//
	// example:
	//
	// 192.168.1.0/24,10.0.0.1/24
	IpWhitelist *string `json:"IpWhitelist,omitempty" xml:"IpWhitelist,omitempty"`
	// The time when the endpoint was last modified.
	//
	// example:
	//
	// 2023-04-01T12:00:00Z
	LastModified        *string              `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	LivePackagingConfig *LivePackagingConfig `json:"LivePackagingConfig,omitempty" xml:"LivePackagingConfig,omitempty"`
	// The playlist name. Default value: manifest.
	//
	// example:
	//
	// manifest
	ManifestName *string `json:"ManifestName,omitempty" xml:"ManifestName,omitempty"`
	// The protocol. Only HLS is supported.
	//
	// example:
	//
	// HLS
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// The number of days that time-shifted content is available. Maximum value: 30.
	//
	// example:
	//
	// 5
	TimeshiftVision *int32 `json:"TimeshiftVision,omitempty" xml:"TimeshiftVision,omitempty"`
}

func (s UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) String() string {
	return tea.Prettify(s)
}

func (s UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) GoString() string {
	return s.String()
}

func (s *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetAuthorizationCode(v string) *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.AuthorizationCode = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetChannelName(v string) *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.ChannelName = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetCreateTime(v string) *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.CreateTime = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetDescription(v string) *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.Description = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetEndpointName(v string) *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.EndpointName = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetEndpointUrl(v string) *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.EndpointUrl = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetGroupName(v string) *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.GroupName = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetIpBlacklist(v string) *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.IpBlacklist = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetIpWhitelist(v string) *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.IpWhitelist = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetLastModified(v string) *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.LastModified = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetLivePackagingConfig(v *LivePackagingConfig) *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.LivePackagingConfig = v
	return s
}

func (s *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetManifestName(v string) *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.ManifestName = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetProtocol(v string) *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.Protocol = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint) SetTimeshiftVision(v int32) *UpdateLivePackageOriginEndpointResponseBodyLivePackageOriginEndpoint {
	s.TimeshiftVision = &v
	return s
}

type UpdateLivePackageOriginEndpointResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateLivePackageOriginEndpointResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateLivePackageOriginEndpointResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLivePackageOriginEndpointResponse) GoString() string {
	return s.String()
}

func (s *UpdateLivePackageOriginEndpointResponse) SetHeaders(v map[string]*string) *UpdateLivePackageOriginEndpointResponse {
	s.Headers = v
	return s
}

func (s *UpdateLivePackageOriginEndpointResponse) SetStatusCode(v int32) *UpdateLivePackageOriginEndpointResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLivePackageOriginEndpointResponse) SetBody(v *UpdateLivePackageOriginEndpointResponseBody) *UpdateLivePackageOriginEndpointResponse {
	s.Body = v
	return s
}

type UpdateLiveRecordTemplateRequest struct {
	// The template name.
	//
	// This parameter is required.
	//
	// example:
	//
	// test template
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The list of recording formats.
	//
	// This parameter is required.
	RecordFormat []*UpdateLiveRecordTemplateRequestRecordFormat `json:"RecordFormat,omitempty" xml:"RecordFormat,omitempty" type:"Repeated"`
	// The template ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 69e1f9fe-1e97-11ed-ba64-0c42a1b73d66
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s UpdateLiveRecordTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveRecordTemplateRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveRecordTemplateRequest) SetName(v string) *UpdateLiveRecordTemplateRequest {
	s.Name = &v
	return s
}

func (s *UpdateLiveRecordTemplateRequest) SetRecordFormat(v []*UpdateLiveRecordTemplateRequestRecordFormat) *UpdateLiveRecordTemplateRequest {
	s.RecordFormat = v
	return s
}

func (s *UpdateLiveRecordTemplateRequest) SetTemplateId(v string) *UpdateLiveRecordTemplateRequest {
	s.TemplateId = &v
	return s
}

type UpdateLiveRecordTemplateRequestRecordFormat struct {
	// The duration of the recording cycle. Unit: seconds If you do not specify this parameter, the default value 6 hours is used.
	//
	// >
	//
	// 	- If a live stream is interrupted during a recording cycle but is resumed within 3 minutes, the stream is recorded in the same recording before and after the interruption.
	//
	// 	- If a live stream is interrupted for more than 3 minutes, a new recording is generated. To change the default stream interruption time, submit a ticket.
	//
	// example:
	//
	// 3600
	CycleDuration *int32 `json:"CycleDuration,omitempty" xml:"CycleDuration,omitempty"`
	// The format of recording files.
	//
	// >  If you set this parameter to m3u8, you must also specify the SliceOssObjectPrefix and SliceDuration parameters.
	//
	// This parameter is required.
	//
	// example:
	//
	// m3u8
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
	// The name of the recording that is stored in Object Storage Service (OSS).
	//
	// 	- The name must be less than 256 bytes in length and can contain the {JobId}, {Sequence}, {StartTime}, {EndTime}, {EscapedStartTime}, and {EscapedEndTime} variables.
	//
	// 	- The name must contain the {StartTime} and {EndTime} variables or the {EscapedStartTime} and {EscapedEndTime} variables.
	//
	// example:
	//
	// record/{JobId}/{Sequence}_{EscapedStartTime}_{EscapedEndTime}
	OssObjectPrefix *string `json:"OssObjectPrefix,omitempty" xml:"OssObjectPrefix,omitempty"`
	// The duration of a single segment. Unit: seconds
	//
	// >  This parameter takes effect only if you set Format to m3u8.
	//
	// If you do not specify this parameter, the default value 30 seconds is used. Valid values: 5 to 30.
	//
	// example:
	//
	// 30
	SliceDuration *int32 `json:"SliceDuration,omitempty" xml:"SliceDuration,omitempty"`
	// The name of the TS segment.
	//
	// >  This parameter is required only if you set Format to m3u8. By default, the duration of a segment is 30 seconds. The segment name must be less than 256 bytes in length and can contain the {JobId}, {UnixTimestamp}, and {Sequence} variables.
	//
	// The segment name must contain the {UnixTimestamp} and {Sequence} variables.
	//
	// example:
	//
	// record/{JobId}/{UnixTimestamp}_{Sequence}
	SliceOssObjectPrefix *string `json:"SliceOssObjectPrefix,omitempty" xml:"SliceOssObjectPrefix,omitempty"`
}

func (s UpdateLiveRecordTemplateRequestRecordFormat) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveRecordTemplateRequestRecordFormat) GoString() string {
	return s.String()
}

func (s *UpdateLiveRecordTemplateRequestRecordFormat) SetCycleDuration(v int32) *UpdateLiveRecordTemplateRequestRecordFormat {
	s.CycleDuration = &v
	return s
}

func (s *UpdateLiveRecordTemplateRequestRecordFormat) SetFormat(v string) *UpdateLiveRecordTemplateRequestRecordFormat {
	s.Format = &v
	return s
}

func (s *UpdateLiveRecordTemplateRequestRecordFormat) SetOssObjectPrefix(v string) *UpdateLiveRecordTemplateRequestRecordFormat {
	s.OssObjectPrefix = &v
	return s
}

func (s *UpdateLiveRecordTemplateRequestRecordFormat) SetSliceDuration(v int32) *UpdateLiveRecordTemplateRequestRecordFormat {
	s.SliceDuration = &v
	return s
}

func (s *UpdateLiveRecordTemplateRequestRecordFormat) SetSliceOssObjectPrefix(v string) *UpdateLiveRecordTemplateRequestRecordFormat {
	s.SliceOssObjectPrefix = &v
	return s
}

type UpdateLiveRecordTemplateShrinkRequest struct {
	// The template name.
	//
	// This parameter is required.
	//
	// example:
	//
	// test template
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The list of recording formats.
	//
	// This parameter is required.
	RecordFormatShrink *string `json:"RecordFormat,omitempty" xml:"RecordFormat,omitempty"`
	// The template ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 69e1f9fe-1e97-11ed-ba64-0c42a1b73d66
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s UpdateLiveRecordTemplateShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveRecordTemplateShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveRecordTemplateShrinkRequest) SetName(v string) *UpdateLiveRecordTemplateShrinkRequest {
	s.Name = &v
	return s
}

func (s *UpdateLiveRecordTemplateShrinkRequest) SetRecordFormatShrink(v string) *UpdateLiveRecordTemplateShrinkRequest {
	s.RecordFormatShrink = &v
	return s
}

func (s *UpdateLiveRecordTemplateShrinkRequest) SetTemplateId(v string) *UpdateLiveRecordTemplateShrinkRequest {
	s.TemplateId = &v
	return s
}

type UpdateLiveRecordTemplateResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 0F3D5C03-4B6E-5F40-B7F6-B1956776E7D3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveRecordTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveRecordTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveRecordTemplateResponseBody) SetRequestId(v string) *UpdateLiveRecordTemplateResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveRecordTemplateResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateLiveRecordTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateLiveRecordTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveRecordTemplateResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveRecordTemplateResponse) SetHeaders(v map[string]*string) *UpdateLiveRecordTemplateResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveRecordTemplateResponse) SetStatusCode(v int32) *UpdateLiveRecordTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLiveRecordTemplateResponse) SetBody(v *UpdateLiveRecordTemplateResponseBody) *UpdateLiveRecordTemplateResponse {
	s.Body = v
	return s
}

type UpdateLiveSnapshotTemplateRequest struct {
	// The naming format of the snapshot captured in overwrite mode.
	//
	// 	- The value cannot start with a forward slash (/). Only the suffix .jpg is supported.
	//
	// 	- The value cannot exceed 255 characters in length.
	//
	// 	- The {JobId} placeholder is supported. It specifies the ID of the snapshot job.
	//
	// 	- Placeholders such as {UnixTimestamp}, {Sequence}, and {Date} are not allowed.
	//
	// 	- You must specify at least one of the OverwriteFormat and SequenceFormat parameters.
	//
	// example:
	//
	// snapshot/{JobId}.jpg
	OverwriteFormat *string `json:"OverwriteFormat,omitempty" xml:"OverwriteFormat,omitempty"`
	// The naming format of the snapshot captured in time series mode.
	//
	// 	- The value cannot start with a forward slash (/). Only the suffix .jpg is supported.
	//
	// 	- The value cannot exceed 255 characters in length.
	//
	// 	- The {JobId}, {Date}, {UnixTimestamp}, and {Sequence} placeholders are supported. {JobId} specifies the ID of the snapshot job. {Date} specifies the date on which the snapshot is captured. {UnixTimestamp} specifies the timestamp of the snapshot. {Sequence} specifies the sequence number of the snapshot. You must specify at least one of the {UnixTimestamp} and {Sequence} placeholders.
	//
	// 	- You must specify at least one of the OverwriteFormat and SequenceFormat parameters.
	//
	// example:
	//
	// snapshot/{JobId}/{UnixTimestamp}.jpg
	SequenceFormat *string `json:"SequenceFormat,omitempty" xml:"SequenceFormat,omitempty"`
	// The template ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// The name of the template.
	//
	// 	- It cannot exceed 128 characters in length.
	//
	// This parameter is required.
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// The interval between two adjacent snapshots. Unit: seconds.
	//
	// 	- Valid values: [5,3600].
	//
	// This parameter is required.
	//
	// example:
	//
	// 5
	TimeInterval *int32 `json:"TimeInterval,omitempty" xml:"TimeInterval,omitempty"`
}

func (s UpdateLiveSnapshotTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveSnapshotTemplateRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveSnapshotTemplateRequest) SetOverwriteFormat(v string) *UpdateLiveSnapshotTemplateRequest {
	s.OverwriteFormat = &v
	return s
}

func (s *UpdateLiveSnapshotTemplateRequest) SetSequenceFormat(v string) *UpdateLiveSnapshotTemplateRequest {
	s.SequenceFormat = &v
	return s
}

func (s *UpdateLiveSnapshotTemplateRequest) SetTemplateId(v string) *UpdateLiveSnapshotTemplateRequest {
	s.TemplateId = &v
	return s
}

func (s *UpdateLiveSnapshotTemplateRequest) SetTemplateName(v string) *UpdateLiveSnapshotTemplateRequest {
	s.TemplateName = &v
	return s
}

func (s *UpdateLiveSnapshotTemplateRequest) SetTimeInterval(v int32) *UpdateLiveSnapshotTemplateRequest {
	s.TimeInterval = &v
	return s
}

type UpdateLiveSnapshotTemplateResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveSnapshotTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveSnapshotTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveSnapshotTemplateResponseBody) SetRequestId(v string) *UpdateLiveSnapshotTemplateResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveSnapshotTemplateResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateLiveSnapshotTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateLiveSnapshotTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveSnapshotTemplateResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveSnapshotTemplateResponse) SetHeaders(v map[string]*string) *UpdateLiveSnapshotTemplateResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveSnapshotTemplateResponse) SetStatusCode(v int32) *UpdateLiveSnapshotTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLiveSnapshotTemplateResponse) SetBody(v *UpdateLiveSnapshotTemplateResponseBody) *UpdateLiveSnapshotTemplateResponse {
	s.Body = v
	return s
}

type UpdateLiveTranscodeJobRequest struct {
	// The job ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The name of the job.
	//
	// example:
	//
	// mytest3
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The information about the input stream.
	StreamInput *UpdateLiveTranscodeJobRequestStreamInput `json:"StreamInput,omitempty" xml:"StreamInput,omitempty" type:"Struct"`
	// The configuration of a timed transcoding job.
	TimedConfig *UpdateLiveTranscodeJobRequestTimedConfig `json:"TimedConfig,omitempty" xml:"TimedConfig,omitempty" type:"Struct"`
	// The information about the transcoding output.
	TranscodeOutput *UpdateLiveTranscodeJobRequestTranscodeOutput `json:"TranscodeOutput,omitempty" xml:"TranscodeOutput,omitempty" type:"Struct"`
}

func (s UpdateLiveTranscodeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeJobRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeJobRequest) SetJobId(v string) *UpdateLiveTranscodeJobRequest {
	s.JobId = &v
	return s
}

func (s *UpdateLiveTranscodeJobRequest) SetName(v string) *UpdateLiveTranscodeJobRequest {
	s.Name = &v
	return s
}

func (s *UpdateLiveTranscodeJobRequest) SetStreamInput(v *UpdateLiveTranscodeJobRequestStreamInput) *UpdateLiveTranscodeJobRequest {
	s.StreamInput = v
	return s
}

func (s *UpdateLiveTranscodeJobRequest) SetTimedConfig(v *UpdateLiveTranscodeJobRequestTimedConfig) *UpdateLiveTranscodeJobRequest {
	s.TimedConfig = v
	return s
}

func (s *UpdateLiveTranscodeJobRequest) SetTranscodeOutput(v *UpdateLiveTranscodeJobRequestTranscodeOutput) *UpdateLiveTranscodeJobRequest {
	s.TranscodeOutput = v
	return s
}

type UpdateLiveTranscodeJobRequestStreamInput struct {
	// The URL of the input stream.
	//
	// This parameter is required.
	//
	// example:
	//
	// rtmp://mydomain/app/stream1
	InputUrl *string `json:"InputUrl,omitempty" xml:"InputUrl,omitempty"`
	// The type of the input stream. The value can only be rtmp.
	//
	// This parameter is required.
	//
	// example:
	//
	// rtmp
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateLiveTranscodeJobRequestStreamInput) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeJobRequestStreamInput) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeJobRequestStreamInput) SetInputUrl(v string) *UpdateLiveTranscodeJobRequestStreamInput {
	s.InputUrl = &v
	return s
}

func (s *UpdateLiveTranscodeJobRequestStreamInput) SetType(v string) *UpdateLiveTranscodeJobRequestStreamInput {
	s.Type = &v
	return s
}

type UpdateLiveTranscodeJobRequestTimedConfig struct {
	// The stop time of the transcoding job. Note: The time span between the stop time and the current time cannot exceed seven days.
	//
	// example:
	//
	// 2022-08-05T06:08:31Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The start time of the transcoding job. Note: The time span between the start time and the current time cannot exceed seven days.
	//
	// example:
	//
	// 2022-06-19T02:16:41Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s UpdateLiveTranscodeJobRequestTimedConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeJobRequestTimedConfig) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeJobRequestTimedConfig) SetEndTime(v string) *UpdateLiveTranscodeJobRequestTimedConfig {
	s.EndTime = &v
	return s
}

func (s *UpdateLiveTranscodeJobRequestTimedConfig) SetStartTime(v string) *UpdateLiveTranscodeJobRequestTimedConfig {
	s.StartTime = &v
	return s
}

type UpdateLiveTranscodeJobRequestTranscodeOutput struct {
	// The streaming domain name of ApsaraVideo Live.
	//
	// This parameter is required.
	//
	// example:
	//
	// mydomain
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The type of the output stream. A value of LiveCenter indicates that the URL of the output stream is generated based on the domain name of ApsaraVideo Live. The value can only be LiveCenter.
	//
	// This parameter is required.
	//
	// example:
	//
	// LiveCenter
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateLiveTranscodeJobRequestTranscodeOutput) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeJobRequestTranscodeOutput) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeJobRequestTranscodeOutput) SetDomainName(v string) *UpdateLiveTranscodeJobRequestTranscodeOutput {
	s.DomainName = &v
	return s
}

func (s *UpdateLiveTranscodeJobRequestTranscodeOutput) SetType(v string) *UpdateLiveTranscodeJobRequestTranscodeOutput {
	s.Type = &v
	return s
}

type UpdateLiveTranscodeJobShrinkRequest struct {
	// The job ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The name of the job.
	//
	// example:
	//
	// mytest3
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The information about the input stream.
	StreamInputShrink *string `json:"StreamInput,omitempty" xml:"StreamInput,omitempty"`
	// The configuration of a timed transcoding job.
	TimedConfigShrink *string `json:"TimedConfig,omitempty" xml:"TimedConfig,omitempty"`
	// The information about the transcoding output.
	TranscodeOutputShrink *string `json:"TranscodeOutput,omitempty" xml:"TranscodeOutput,omitempty"`
}

func (s UpdateLiveTranscodeJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeJobShrinkRequest) SetJobId(v string) *UpdateLiveTranscodeJobShrinkRequest {
	s.JobId = &v
	return s
}

func (s *UpdateLiveTranscodeJobShrinkRequest) SetName(v string) *UpdateLiveTranscodeJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *UpdateLiveTranscodeJobShrinkRequest) SetStreamInputShrink(v string) *UpdateLiveTranscodeJobShrinkRequest {
	s.StreamInputShrink = &v
	return s
}

func (s *UpdateLiveTranscodeJobShrinkRequest) SetTimedConfigShrink(v string) *UpdateLiveTranscodeJobShrinkRequest {
	s.TimedConfigShrink = &v
	return s
}

func (s *UpdateLiveTranscodeJobShrinkRequest) SetTranscodeOutputShrink(v string) *UpdateLiveTranscodeJobShrinkRequest {
	s.TranscodeOutputShrink = &v
	return s
}

type UpdateLiveTranscodeJobResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveTranscodeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeJobResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeJobResponseBody) SetRequestId(v string) *UpdateLiveTranscodeJobResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveTranscodeJobResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateLiveTranscodeJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateLiveTranscodeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeJobResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeJobResponse) SetHeaders(v map[string]*string) *UpdateLiveTranscodeJobResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveTranscodeJobResponse) SetStatusCode(v int32) *UpdateLiveTranscodeJobResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLiveTranscodeJobResponse) SetBody(v *UpdateLiveTranscodeJobResponseBody) *UpdateLiveTranscodeJobResponse {
	s.Body = v
	return s
}

type UpdateLiveTranscodeTemplateRequest struct {
	// The template name.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The configuration of the template.
	TemplateConfig *UpdateLiveTranscodeTemplateRequestTemplateConfig `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty" type:"Struct"`
	// The template ID. To obtain the template ID, log on to the [Intelligent Media Services (IMS) console](https://ims.console.aliyun.com/summary), choose Real-time Media Processing > Template Management, and then click the Transcoding tab. Alternatively, find the ID from the response parameters of the [CreateLiveTranscodeTemplate](https://help.aliyun.com/document_detail/449217.html) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s UpdateLiveTranscodeTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeTemplateRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeTemplateRequest) SetName(v string) *UpdateLiveTranscodeTemplateRequest {
	s.Name = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequest) SetTemplateConfig(v *UpdateLiveTranscodeTemplateRequestTemplateConfig) *UpdateLiveTranscodeTemplateRequest {
	s.TemplateConfig = v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequest) SetTemplateId(v string) *UpdateLiveTranscodeTemplateRequest {
	s.TemplateId = &v
	return s
}

type UpdateLiveTranscodeTemplateRequestTemplateConfig struct {
	// The audio parameters.
	AudioParams *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams `json:"AudioParams,omitempty" xml:"AudioParams,omitempty" type:"Struct"`
	// The video parameters.
	VideoParams *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams `json:"VideoParams,omitempty" xml:"VideoParams,omitempty" type:"Struct"`
}

func (s UpdateLiveTranscodeTemplateRequestTemplateConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeTemplateRequestTemplateConfig) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfig) SetAudioParams(v *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams) *UpdateLiveTranscodeTemplateRequestTemplateConfig {
	s.AudioParams = v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfig) SetVideoParams(v *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) *UpdateLiveTranscodeTemplateRequestTemplateConfig {
	s.VideoParams = v
	return s
}

type UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams struct {
	// The bitrate of the output audio. Unit: Kbit/s. Valid values: 1 to 1000.
	//
	// example:
	//
	// 100
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The number of sound channels. Valid values: 1: mono 2: binaural
	//
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// The audio codec. Valid values: AAC MP3
	//
	// example:
	//
	// AAC
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// The audio codec profile. Valid values when the Codec parameter is set to AAC:
	//
	// 	- aac_low
	//
	// 	- aac_he
	//
	// 	- aac_he_v2
	//
	// 	- aac_ld
	//
	// example:
	//
	// aac_low
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// The audio sampling rate. Valid values: 22050 to 96000.
	//
	// Note If you set AudioProfile to aac_ld, the audio sampling rate cannot exceed 44100.
	//
	// example:
	//
	// 44100
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
}

func (s UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams) SetBitrate(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams {
	s.Bitrate = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams) SetChannels(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams {
	s.Channels = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams) SetCodec(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams {
	s.Codec = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams) SetProfile(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams {
	s.Profile = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams) SetSamplerate(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams {
	s.Samplerate = &v
	return s
}

type UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams struct {
	// The bitrate of the output video. Unit: Kbit/s. Valid values: 1 to 6000.
	//
	// example:
	//
	// 2500
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The encoding type. Valid values:
	//
	// 	- H.264
	//
	// 	- H.265
	//
	// example:
	//
	// H.264
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// The frame rate of the output video. Unit: frames per second (FPS). Valid values: 1 to 60.
	//
	// example:
	//
	// 30
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// The group of pictures (GOP) of the output video. Unit: frame. Valid values: 1 to 3000.
	//
	// example:
	//
	// 1000
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// The height of the output video. Valid values:
	//
	// 	- Height ≥ 128
	//
	// 	- max (Height,Width) ≤ 2560
	//
	// 	- min（Height,Width）≤ 1440
	//
	// >  The resolution of a video transcoded by using the H.265 Narrowband HD template cannot exceed 1,280 × 720 pixels.
	//
	// example:
	//
	// 720
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// The video encoding profile. The profile determines how a video is encoded. In most cases, a greater value indicates better image quality and higher resource consumption. Valid values:
	//
	// 	- 1: baseline. This value is suitable for mobile devices.
	//
	// 	- 2: main. This value is suitable for standard-definition devices.
	//
	// 	- 3: high. This value is suitable for high-definition devices.
	//
	// example:
	//
	// 2
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// The width of the output video. Valid values:
	//
	// 	- Width ≥ 128
	//
	// 	- max (Height,Width) ≤ 2560
	//
	// 	- min（Height,Width）≤ 1440
	//
	// >  The resolution of a video transcoded by using the H.265 Narrowband HD template cannot exceed 1,280 × 720 pixels.
	//
	// example:
	//
	// 1280
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetBitrate(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Bitrate = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetCodec(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Codec = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetFps(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Fps = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetGop(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Gop = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetHeight(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Height = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetProfile(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Profile = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetWidth(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Width = &v
	return s
}

type UpdateLiveTranscodeTemplateShrinkRequest struct {
	// The template name.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The configuration of the template.
	TemplateConfigShrink *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// The template ID. To obtain the template ID, log on to the [Intelligent Media Services (IMS) console](https://ims.console.aliyun.com/summary), choose Real-time Media Processing > Template Management, and then click the Transcoding tab. Alternatively, find the ID from the response parameters of the [CreateLiveTranscodeTemplate](https://help.aliyun.com/document_detail/449217.html) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s UpdateLiveTranscodeTemplateShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeTemplateShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeTemplateShrinkRequest) SetName(v string) *UpdateLiveTranscodeTemplateShrinkRequest {
	s.Name = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateShrinkRequest) SetTemplateConfigShrink(v string) *UpdateLiveTranscodeTemplateShrinkRequest {
	s.TemplateConfigShrink = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateShrinkRequest) SetTemplateId(v string) *UpdateLiveTranscodeTemplateShrinkRequest {
	s.TemplateId = &v
	return s
}

type UpdateLiveTranscodeTemplateResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveTranscodeTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeTemplateResponseBody) SetRequestId(v string) *UpdateLiveTranscodeTemplateResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveTranscodeTemplateResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateLiveTranscodeTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateLiveTranscodeTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeTemplateResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeTemplateResponse) SetHeaders(v map[string]*string) *UpdateLiveTranscodeTemplateResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveTranscodeTemplateResponse) SetStatusCode(v int32) *UpdateLiveTranscodeTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateResponse) SetBody(v *UpdateLiveTranscodeTemplateResponseBody) *UpdateLiveTranscodeTemplateResponse {
	s.Body = v
	return s
}

type UpdateMediaConnectFlowInputRequest struct {
	// The IP address whitelist.
	//
	// example:
	//
	// 19.168.1.1/32,18.168.1.1/16
	Cidrs *string `json:"Cidrs,omitempty" xml:"Cidrs,omitempty"`
	// The flow ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 34900dc6-90ec-4968-af3c-fcd87f231a5f
	FlowId *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	// The source URL. You can modify this parameter only when the source type is RTMP-PULL or SRT-Listener.
	//
	// example:
	//
	// rtmp://pull.test.alivecdn.com/live/alitest
	InputFromUrl *string `json:"InputFromUrl,omitempty" xml:"InputFromUrl,omitempty"`
	InputName    *string `json:"InputName,omitempty" xml:"InputName,omitempty"`
	// The maximum bitrate. Unit: bit/s.
	//
	// example:
	//
	// 2000000
	MaxBitrate *int32 `json:"MaxBitrate,omitempty" xml:"MaxBitrate,omitempty"`
	// The latency for the SRT stream. You can modify this parameter only when the source type is SRT-Listener or SRT-Caller.
	//
	// example:
	//
	// 1000
	SrtLatency *int32 `json:"SrtLatency,omitempty" xml:"SrtLatency,omitempty"`
	// The SRT key. You can modify this parameter only when the source type is SRT-Listener or SRT-Caller.
	//
	// example:
	//
	// FICUBPX4Q77DYHRF
	SrtPassphrase *string `json:"SrtPassphrase,omitempty" xml:"SrtPassphrase,omitempty"`
	// The encryption key length. You can modify this parameter only when the source type is SRT-Listener or SRT-Caller.
	//
	// example:
	//
	// 32
	SrtPbkeyLen *int32 `json:"SrtPbkeyLen,omitempty" xml:"SrtPbkeyLen,omitempty"`
}

func (s UpdateMediaConnectFlowInputRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaConnectFlowInputRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaConnectFlowInputRequest) SetCidrs(v string) *UpdateMediaConnectFlowInputRequest {
	s.Cidrs = &v
	return s
}

func (s *UpdateMediaConnectFlowInputRequest) SetFlowId(v string) *UpdateMediaConnectFlowInputRequest {
	s.FlowId = &v
	return s
}

func (s *UpdateMediaConnectFlowInputRequest) SetInputFromUrl(v string) *UpdateMediaConnectFlowInputRequest {
	s.InputFromUrl = &v
	return s
}

func (s *UpdateMediaConnectFlowInputRequest) SetInputName(v string) *UpdateMediaConnectFlowInputRequest {
	s.InputName = &v
	return s
}

func (s *UpdateMediaConnectFlowInputRequest) SetMaxBitrate(v int32) *UpdateMediaConnectFlowInputRequest {
	s.MaxBitrate = &v
	return s
}

func (s *UpdateMediaConnectFlowInputRequest) SetSrtLatency(v int32) *UpdateMediaConnectFlowInputRequest {
	s.SrtLatency = &v
	return s
}

func (s *UpdateMediaConnectFlowInputRequest) SetSrtPassphrase(v string) *UpdateMediaConnectFlowInputRequest {
	s.SrtPassphrase = &v
	return s
}

func (s *UpdateMediaConnectFlowInputRequest) SetSrtPbkeyLen(v int32) *UpdateMediaConnectFlowInputRequest {
	s.SrtPbkeyLen = &v
	return s
}

type UpdateMediaConnectFlowInputResponseBody struct {
	// The response body.
	//
	// example:
	//
	// ""
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The call description.
	//
	// example:
	//
	// OK
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 52451256-FFEA-5D2E-AA60-EE7053000F22
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The returned error code. A value of 0 indicates the call is successful.
	//
	// example:
	//
	// 0
	RetCode *int32 `json:"RetCode,omitempty" xml:"RetCode,omitempty"`
}

func (s UpdateMediaConnectFlowInputResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaConnectFlowInputResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMediaConnectFlowInputResponseBody) SetContent(v string) *UpdateMediaConnectFlowInputResponseBody {
	s.Content = &v
	return s
}

func (s *UpdateMediaConnectFlowInputResponseBody) SetDescription(v string) *UpdateMediaConnectFlowInputResponseBody {
	s.Description = &v
	return s
}

func (s *UpdateMediaConnectFlowInputResponseBody) SetRequestId(v string) *UpdateMediaConnectFlowInputResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMediaConnectFlowInputResponseBody) SetRetCode(v int32) *UpdateMediaConnectFlowInputResponseBody {
	s.RetCode = &v
	return s
}

type UpdateMediaConnectFlowInputResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateMediaConnectFlowInputResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateMediaConnectFlowInputResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaConnectFlowInputResponse) GoString() string {
	return s.String()
}

func (s *UpdateMediaConnectFlowInputResponse) SetHeaders(v map[string]*string) *UpdateMediaConnectFlowInputResponse {
	s.Headers = v
	return s
}

func (s *UpdateMediaConnectFlowInputResponse) SetStatusCode(v int32) *UpdateMediaConnectFlowInputResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMediaConnectFlowInputResponse) SetBody(v *UpdateMediaConnectFlowInputResponseBody) *UpdateMediaConnectFlowInputResponse {
	s.Body = v
	return s
}

type UpdateMediaConnectFlowOutputRequest struct {
	// The IP address whitelist.
	//
	// example:
	//
	// 19.168.1.1/32,18.168.1.1/16
	Cidrs *string `json:"Cidrs,omitempty" xml:"Cidrs,omitempty"`
	// The flow ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 34900dc6-90ec-4968-af3c-fcd87f231a5f
	FlowId *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	// The output name.
	//
	// This parameter is required.
	//
	// example:
	//
	// AliTestOutput
	OutputName *string `json:"OutputName,omitempty" xml:"OutputName,omitempty"`
	// The output URL. You can modify this parameter only when the output type is RTMP-PUSH or SRT-Caller.
	//
	// example:
	//
	// rtmp://push.test.alivecdn.com/live/alitest
	OutputToUrl *string `json:"OutputToUrl,omitempty" xml:"OutputToUrl,omitempty"`
	// The maximum number of viewers.
	//
	// example:
	//
	// 5
	PlayerLimit *string `json:"PlayerLimit,omitempty" xml:"PlayerLimit,omitempty"`
	// The latency for the SRT stream. You can modify this parameter only when the source type is SRT-Listener or SRT-Caller.
	//
	// example:
	//
	// 1000
	SrtLatency *string `json:"SrtLatency,omitempty" xml:"SrtLatency,omitempty"`
	// The SRT key. You can modify this parameter only when the source type is SRT-Listener or SRT-Caller.
	//
	// example:
	//
	// FICUBPX4Q77DYHRF
	SrtPassphrase *string `json:"SrtPassphrase,omitempty" xml:"SrtPassphrase,omitempty"`
	// The encryption key length. You can modify this parameter only when the source type is SRT-Listener or SRT-Caller.
	//
	// example:
	//
	// 32
	SrtPbkeyLen *string `json:"SrtPbkeyLen,omitempty" xml:"SrtPbkeyLen,omitempty"`
}

func (s UpdateMediaConnectFlowOutputRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaConnectFlowOutputRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaConnectFlowOutputRequest) SetCidrs(v string) *UpdateMediaConnectFlowOutputRequest {
	s.Cidrs = &v
	return s
}

func (s *UpdateMediaConnectFlowOutputRequest) SetFlowId(v string) *UpdateMediaConnectFlowOutputRequest {
	s.FlowId = &v
	return s
}

func (s *UpdateMediaConnectFlowOutputRequest) SetOutputName(v string) *UpdateMediaConnectFlowOutputRequest {
	s.OutputName = &v
	return s
}

func (s *UpdateMediaConnectFlowOutputRequest) SetOutputToUrl(v string) *UpdateMediaConnectFlowOutputRequest {
	s.OutputToUrl = &v
	return s
}

func (s *UpdateMediaConnectFlowOutputRequest) SetPlayerLimit(v string) *UpdateMediaConnectFlowOutputRequest {
	s.PlayerLimit = &v
	return s
}

func (s *UpdateMediaConnectFlowOutputRequest) SetSrtLatency(v string) *UpdateMediaConnectFlowOutputRequest {
	s.SrtLatency = &v
	return s
}

func (s *UpdateMediaConnectFlowOutputRequest) SetSrtPassphrase(v string) *UpdateMediaConnectFlowOutputRequest {
	s.SrtPassphrase = &v
	return s
}

func (s *UpdateMediaConnectFlowOutputRequest) SetSrtPbkeyLen(v string) *UpdateMediaConnectFlowOutputRequest {
	s.SrtPbkeyLen = &v
	return s
}

type UpdateMediaConnectFlowOutputResponseBody struct {
	// The response body.
	//
	// example:
	//
	// ""
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The call description.
	//
	// example:
	//
	// OK
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// D737D0BC-4CB5-55AA-8119-B540C95DFE6A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The returned error code. A value of 0 indicates the call is successful.
	//
	// example:
	//
	// 0
	RetCode *int32 `json:"RetCode,omitempty" xml:"RetCode,omitempty"`
}

func (s UpdateMediaConnectFlowOutputResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaConnectFlowOutputResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMediaConnectFlowOutputResponseBody) SetContent(v string) *UpdateMediaConnectFlowOutputResponseBody {
	s.Content = &v
	return s
}

func (s *UpdateMediaConnectFlowOutputResponseBody) SetDescription(v string) *UpdateMediaConnectFlowOutputResponseBody {
	s.Description = &v
	return s
}

func (s *UpdateMediaConnectFlowOutputResponseBody) SetRequestId(v string) *UpdateMediaConnectFlowOutputResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMediaConnectFlowOutputResponseBody) SetRetCode(v int32) *UpdateMediaConnectFlowOutputResponseBody {
	s.RetCode = &v
	return s
}

type UpdateMediaConnectFlowOutputResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateMediaConnectFlowOutputResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateMediaConnectFlowOutputResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaConnectFlowOutputResponse) GoString() string {
	return s.String()
}

func (s *UpdateMediaConnectFlowOutputResponse) SetHeaders(v map[string]*string) *UpdateMediaConnectFlowOutputResponse {
	s.Headers = v
	return s
}

func (s *UpdateMediaConnectFlowOutputResponse) SetStatusCode(v int32) *UpdateMediaConnectFlowOutputResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMediaConnectFlowOutputResponse) SetBody(v *UpdateMediaConnectFlowOutputResponseBody) *UpdateMediaConnectFlowOutputResponse {
	s.Body = v
	return s
}

type UpdateMediaConnectFlowStatusRequest struct {
	// The flow ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 34900dc6-90ec-4968-af3c-fcd87f231a5f
	FlowId *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	// The flow state. Valid values:
	//
	// 	- online: starts the flow.
	//
	// 	- offline: stops the flow.
	//
	// This parameter is required.
	//
	// example:
	//
	// online
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateMediaConnectFlowStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaConnectFlowStatusRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaConnectFlowStatusRequest) SetFlowId(v string) *UpdateMediaConnectFlowStatusRequest {
	s.FlowId = &v
	return s
}

func (s *UpdateMediaConnectFlowStatusRequest) SetStatus(v string) *UpdateMediaConnectFlowStatusRequest {
	s.Status = &v
	return s
}

type UpdateMediaConnectFlowStatusResponseBody struct {
	// The response body.
	//
	// example:
	//
	// ""
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The call description.
	//
	// example:
	//
	// ok
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 20B3A1B6-4BD2-5DE6-BCBC-098C9B4F4E91
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The returned error code. A value of 0 indicates that the call is successful.
	//
	// example:
	//
	// 0
	RetCode *int32 `json:"RetCode,omitempty" xml:"RetCode,omitempty"`
}

func (s UpdateMediaConnectFlowStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaConnectFlowStatusResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMediaConnectFlowStatusResponseBody) SetContent(v string) *UpdateMediaConnectFlowStatusResponseBody {
	s.Content = &v
	return s
}

func (s *UpdateMediaConnectFlowStatusResponseBody) SetDescription(v string) *UpdateMediaConnectFlowStatusResponseBody {
	s.Description = &v
	return s
}

func (s *UpdateMediaConnectFlowStatusResponseBody) SetRequestId(v string) *UpdateMediaConnectFlowStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMediaConnectFlowStatusResponseBody) SetRetCode(v int32) *UpdateMediaConnectFlowStatusResponseBody {
	s.RetCode = &v
	return s
}

type UpdateMediaConnectFlowStatusResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateMediaConnectFlowStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateMediaConnectFlowStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaConnectFlowStatusResponse) GoString() string {
	return s.String()
}

func (s *UpdateMediaConnectFlowStatusResponse) SetHeaders(v map[string]*string) *UpdateMediaConnectFlowStatusResponse {
	s.Headers = v
	return s
}

func (s *UpdateMediaConnectFlowStatusResponse) SetStatusCode(v int32) *UpdateMediaConnectFlowStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMediaConnectFlowStatusResponse) SetBody(v *UpdateMediaConnectFlowStatusResponseBody) *UpdateMediaConnectFlowStatusResponse {
	s.Body = v
	return s
}

type UpdateMediaInfoRequest struct {
	// Specifies whether to append tags. Default value: false. Valid values:
	//
	// 	- true: updates the MediaTags parameter by appending new tags.
	//
	// 	- false: updates the MediaTags parameter by overwriting existing tags with new tags.
	//
	// example:
	//
	// true
	AppendTags *bool `json:"AppendTags,omitempty" xml:"AppendTags,omitempty"`
	// The business type. Valid values:
	//
	// 	- subtitles
	//
	// 	- watermark
	//
	// 	- opening
	//
	// 	- ending
	//
	// 	- general
	//
	// example:
	//
	// video
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// The category ID.
	//
	// example:
	//
	// 3048
	CateId *int64 `json:"CateId,omitempty" xml:"CateId,omitempty"`
	// The category.
	//
	// 	- The value can be up to 64 bytes in length.
	//
	// 	- The value must be encoded in UTF-8.
	//
	// example:
	//
	// defaultCategory
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The URL of the thumbnail.
	//
	// 	- The value can be up to 128 bytes in length.
	//
	// 	- The value must be encoded in UTF-8.
	//
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// The content description.
	//
	// 	- The value can be up to 1,024 bytes in length.
	//
	// 	- The value must be encoded in UTF-8.
	//
	// example:
	//
	// defaultDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The input URL of the media asset in another service. The URL must be bound to the ID of the media asset in IMS. The URL cannot be modified once registered.
	//
	// For a media asset from Object Storage Service (OSS), the URL may have one of the following formats:
	//
	// 1\\. http(s)://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4
	//
	// 2\\. oss://example-bucket/example.mp4. This format indicates that the region in which the OSS bucket of the media asset resides is the same as the region in which OSS is activated.
	//
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// The ID of the media asset. If this parameter is left empty, you must specify the input URL of the media asset, which has been registered in the IMS content library.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The tags.
	//
	// 	- Up to 16 tags are supported.
	//
	// 	- Separate multiple tags with commas (,).
	//
	// 	- Each tag can be up to 32 bytes in length.
	//
	// 	- The value must be encoded in UTF-8.
	//
	// example:
	//
	// updateTags1,updateTags2
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// The custom ID. The ID can be 6 to 64 characters in length and can contain only letters, digits, hyphens (-), and underscores (_). Make sure that the ID is unique among users.
	//
	// example:
	//
	// 123-123
	ReferenceId *string `json:"ReferenceId,omitempty" xml:"ReferenceId,omitempty"`
	// The title.
	//
	// 	- The value can be up to 128 bytes in length.
	//
	// 	- The value must be encoded in UTF-8.
	//
	// example:
	//
	// defaultTitle
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// The user data. It can be up to 1,024 bytes in size.
	//
	// example:
	//
	// userData
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s UpdateMediaInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaInfoRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaInfoRequest) SetAppendTags(v bool) *UpdateMediaInfoRequest {
	s.AppendTags = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetBusinessType(v string) *UpdateMediaInfoRequest {
	s.BusinessType = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetCateId(v int64) *UpdateMediaInfoRequest {
	s.CateId = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetCategory(v string) *UpdateMediaInfoRequest {
	s.Category = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetCoverURL(v string) *UpdateMediaInfoRequest {
	s.CoverURL = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetDescription(v string) *UpdateMediaInfoRequest {
	s.Description = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetInputURL(v string) *UpdateMediaInfoRequest {
	s.InputURL = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetMediaId(v string) *UpdateMediaInfoRequest {
	s.MediaId = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetMediaTags(v string) *UpdateMediaInfoRequest {
	s.MediaTags = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetReferenceId(v string) *UpdateMediaInfoRequest {
	s.ReferenceId = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetTitle(v string) *UpdateMediaInfoRequest {
	s.Title = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetUserData(v string) *UpdateMediaInfoRequest {
	s.UserData = &v
	return s
}

type UpdateMediaInfoResponseBody struct {
	// The ID of the media asset in IMS.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateMediaInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaInfoResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMediaInfoResponseBody) SetMediaId(v string) *UpdateMediaInfoResponseBody {
	s.MediaId = &v
	return s
}

func (s *UpdateMediaInfoResponseBody) SetRequestId(v string) *UpdateMediaInfoResponseBody {
	s.RequestId = &v
	return s
}

type UpdateMediaInfoResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateMediaInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateMediaInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaInfoResponse) GoString() string {
	return s.String()
}

func (s *UpdateMediaInfoResponse) SetHeaders(v map[string]*string) *UpdateMediaInfoResponse {
	s.Headers = v
	return s
}

func (s *UpdateMediaInfoResponse) SetStatusCode(v int32) *UpdateMediaInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMediaInfoResponse) SetBody(v *UpdateMediaInfoResponseBody) *UpdateMediaInfoResponse {
	s.Body = v
	return s
}

type UpdateMediaLiveChannelRequest struct {
	// The audio settings.
	AudioSettings []*UpdateMediaLiveChannelRequestAudioSettings `json:"AudioSettings,omitempty" xml:"AudioSettings,omitempty" type:"Repeated"`
	// The ID of the channel.
	//
	// This parameter is required.
	//
	// example:
	//
	// SEGK5KA6KYKAWQQH
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// The inputs associated with the channel.
	//
	// This parameter is required.
	InputAttachments []*UpdateMediaLiveChannelRequestInputAttachments `json:"InputAttachments,omitempty" xml:"InputAttachments,omitempty" type:"Repeated"`
	// The name of the channel. Letters, digits, hyphens (-), and underscores (_) are supported. It can be up to 64 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// mych
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output groups.
	//
	// This parameter is required.
	OutputGroups []*UpdateMediaLiveChannelRequestOutputGroups `json:"OutputGroups,omitempty" xml:"OutputGroups,omitempty" type:"Repeated"`
	// The video settings.
	VideoSettings []*UpdateMediaLiveChannelRequestVideoSettings `json:"VideoSettings,omitempty" xml:"VideoSettings,omitempty" type:"Repeated"`
}

func (s UpdateMediaLiveChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveChannelRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveChannelRequest) SetAudioSettings(v []*UpdateMediaLiveChannelRequestAudioSettings) *UpdateMediaLiveChannelRequest {
	s.AudioSettings = v
	return s
}

func (s *UpdateMediaLiveChannelRequest) SetChannelId(v string) *UpdateMediaLiveChannelRequest {
	s.ChannelId = &v
	return s
}

func (s *UpdateMediaLiveChannelRequest) SetInputAttachments(v []*UpdateMediaLiveChannelRequestInputAttachments) *UpdateMediaLiveChannelRequest {
	s.InputAttachments = v
	return s
}

func (s *UpdateMediaLiveChannelRequest) SetName(v string) *UpdateMediaLiveChannelRequest {
	s.Name = &v
	return s
}

func (s *UpdateMediaLiveChannelRequest) SetOutputGroups(v []*UpdateMediaLiveChannelRequestOutputGroups) *UpdateMediaLiveChannelRequest {
	s.OutputGroups = v
	return s
}

func (s *UpdateMediaLiveChannelRequest) SetVideoSettings(v []*UpdateMediaLiveChannelRequestVideoSettings) *UpdateMediaLiveChannelRequest {
	s.VideoSettings = v
	return s
}

type UpdateMediaLiveChannelRequestAudioSettings struct {
	// The audio codec. If it is not specified, the source specification is used. Valid values: aac and libfdk_aac.
	//
	// example:
	//
	// libfdk_aac
	AudioCodec *string `json:"AudioCodec,omitempty" xml:"AudioCodec,omitempty"`
	// The audio encoding settings.
	AudioCodecSetting *UpdateMediaLiveChannelRequestAudioSettingsAudioCodecSetting `json:"AudioCodecSetting,omitempty" xml:"AudioCodecSetting,omitempty" type:"Struct"`
	// The name of the audio selector.
	//
	// example:
	//
	// a1
	AudioSelectorName *string `json:"AudioSelectorName,omitempty" xml:"AudioSelectorName,omitempty"`
	// Enter a three-letter ISO 639-2 language code. If the audio track selected by the audio selector has a language code, the language code specified in the audio selector is used. If the selected audio track does not have a language code, or if the audio selector cannot find a track that matches its criteria, this language code is used.
	//
	// example:
	//
	// eng
	LanguageCode *string `json:"LanguageCode,omitempty" xml:"LanguageCode,omitempty"`
	// The tag that identifies the language of the RTMP input. It can be referenced by the output. The maximum length is 32 characters. Supported characters:
	//
	// 	- Unicode letters
	//
	// 	- Digits (0-9)
	//
	// 	- Underscore (_)
	//
	// 	- Hyphen (-)
	//
	// 	- Space (a space cannot be at the beginning or end)
	//
	// example:
	//
	// English
	LanguageName *string `json:"LanguageName,omitempty" xml:"LanguageName,omitempty"`
	// The name of the audio settings. Letters, digits, hyphens (-), and underscores (_) are supported. It can be up to 64 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// audio1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s UpdateMediaLiveChannelRequestAudioSettings) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveChannelRequestAudioSettings) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveChannelRequestAudioSettings) SetAudioCodec(v string) *UpdateMediaLiveChannelRequestAudioSettings {
	s.AudioCodec = &v
	return s
}

func (s *UpdateMediaLiveChannelRequestAudioSettings) SetAudioCodecSetting(v *UpdateMediaLiveChannelRequestAudioSettingsAudioCodecSetting) *UpdateMediaLiveChannelRequestAudioSettings {
	s.AudioCodecSetting = v
	return s
}

func (s *UpdateMediaLiveChannelRequestAudioSettings) SetAudioSelectorName(v string) *UpdateMediaLiveChannelRequestAudioSettings {
	s.AudioSelectorName = &v
	return s
}

func (s *UpdateMediaLiveChannelRequestAudioSettings) SetLanguageCode(v string) *UpdateMediaLiveChannelRequestAudioSettings {
	s.LanguageCode = &v
	return s
}

func (s *UpdateMediaLiveChannelRequestAudioSettings) SetLanguageName(v string) *UpdateMediaLiveChannelRequestAudioSettings {
	s.LanguageName = &v
	return s
}

func (s *UpdateMediaLiveChannelRequestAudioSettings) SetName(v string) *UpdateMediaLiveChannelRequestAudioSettings {
	s.Name = &v
	return s
}

type UpdateMediaLiveChannelRequestAudioSettingsAudioCodecSetting struct {
	// The audio bitrate. Unit: bit/s. Valid values: 8000 to 1000000. The value must be divisible by 1000.
	//
	// example:
	//
	// 200000
	Bitrate *int32 `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The audio codec profile. When AudioCodec is set to aac, AAC-LOW and AAC-MAIN are supported. When AudioCodec is set to libfdk_aac, AAC-LOW, AAC-HE, and AAC-HEV2 are supported.
	//
	// example:
	//
	// AAC-LOW
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// The audio sample rate. Unit: Hz. Valid values: 22050, 32000, 44100, 48000, and 96000.
	//
	// example:
	//
	// 44100
	SampleRate *int32 `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
}

func (s UpdateMediaLiveChannelRequestAudioSettingsAudioCodecSetting) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveChannelRequestAudioSettingsAudioCodecSetting) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveChannelRequestAudioSettingsAudioCodecSetting) SetBitrate(v int32) *UpdateMediaLiveChannelRequestAudioSettingsAudioCodecSetting {
	s.Bitrate = &v
	return s
}

func (s *UpdateMediaLiveChannelRequestAudioSettingsAudioCodecSetting) SetProfile(v string) *UpdateMediaLiveChannelRequestAudioSettingsAudioCodecSetting {
	s.Profile = &v
	return s
}

func (s *UpdateMediaLiveChannelRequestAudioSettingsAudioCodecSetting) SetSampleRate(v int32) *UpdateMediaLiveChannelRequestAudioSettingsAudioCodecSetting {
	s.SampleRate = &v
	return s
}

type UpdateMediaLiveChannelRequestInputAttachments struct {
	// The audio selectors.
	AudioSelectors []*UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectors `json:"AudioSelectors,omitempty" xml:"AudioSelectors,omitempty" type:"Repeated"`
	// The ID of the associated input.
	//
	// This parameter is required.
	//
	// example:
	//
	// myinput
	InputId *string `json:"InputId,omitempty" xml:"InputId,omitempty"`
	// The tag that identifies the language of the RTMP input. It can be referenced by the output. The maximum length is 32 characters. Supported characters:
	//
	// 	- Unicode letters
	//
	// 	- Digits (0-9)
	//
	// 	- Underscore (_)
	//
	// 	- Hyphen (-)
	//
	// 	- Space (a space cannot be at the beginning or end)
	//
	// example:
	//
	// English
	LanguageName *string `json:"LanguageName,omitempty" xml:"LanguageName,omitempty"`
}

func (s UpdateMediaLiveChannelRequestInputAttachments) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveChannelRequestInputAttachments) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveChannelRequestInputAttachments) SetAudioSelectors(v []*UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectors) *UpdateMediaLiveChannelRequestInputAttachments {
	s.AudioSelectors = v
	return s
}

func (s *UpdateMediaLiveChannelRequestInputAttachments) SetInputId(v string) *UpdateMediaLiveChannelRequestInputAttachments {
	s.InputId = &v
	return s
}

func (s *UpdateMediaLiveChannelRequestInputAttachments) SetLanguageName(v string) *UpdateMediaLiveChannelRequestInputAttachments {
	s.LanguageName = &v
	return s
}

type UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectors struct {
	// The audio language selection.
	AudioLanguageSelection *UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioLanguageSelection `json:"AudioLanguageSelection,omitempty" xml:"AudioLanguageSelection,omitempty" type:"Struct"`
	// The audio PID selection.
	AudioPidSelection *UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioPidSelection `json:"AudioPidSelection,omitempty" xml:"AudioPidSelection,omitempty" type:"Struct"`
	// The audio track selection.
	AudioTrackSelection []*UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioTrackSelection `json:"AudioTrackSelection,omitempty" xml:"AudioTrackSelection,omitempty" type:"Repeated"`
	// The name of the audio selector. Letters, digits, hyphens (-), and underscores (_) are supported. It can be up to 64 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// myselector
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectors) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectors) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectors) SetAudioLanguageSelection(v *UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioLanguageSelection) *UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectors {
	s.AudioLanguageSelection = v
	return s
}

func (s *UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectors) SetAudioPidSelection(v *UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioPidSelection) *UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectors {
	s.AudioPidSelection = v
	return s
}

func (s *UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectors) SetAudioTrackSelection(v []*UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioTrackSelection) *UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectors {
	s.AudioTrackSelection = v
	return s
}

func (s *UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectors) SetName(v string) *UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectors {
	s.Name = &v
	return s
}

type UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioLanguageSelection struct {
	// Enter a three-letter ISO 639-2 language code from within an audio source.
	//
	// This parameter is required.
	//
	// example:
	//
	// eng
	LanguageCode *string `json:"LanguageCode,omitempty" xml:"LanguageCode,omitempty"`
}

func (s UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioLanguageSelection) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioLanguageSelection) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioLanguageSelection) SetLanguageCode(v string) *UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioLanguageSelection {
	s.LanguageCode = &v
	return s
}

type UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioPidSelection struct {
	// Enter a specific PID from within a source.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123
	Pid *int64 `json:"Pid,omitempty" xml:"Pid,omitempty"`
}

func (s UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioPidSelection) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioPidSelection) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioPidSelection) SetPid(v int64) *UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioPidSelection {
	s.Pid = &v
	return s
}

type UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioTrackSelection struct {
	// Specify one or more audio tracks from within a source using Track ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	TrackId *int64 `json:"TrackId,omitempty" xml:"TrackId,omitempty"`
}

func (s UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioTrackSelection) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioTrackSelection) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioTrackSelection) SetTrackId(v int64) *UpdateMediaLiveChannelRequestInputAttachmentsAudioSelectorsAudioTrackSelection {
	s.TrackId = &v
	return s
}

type UpdateMediaLiveChannelRequestOutputGroups struct {
	// The MediaPackage destination.
	MediaPackageGroupSetting *UpdateMediaLiveChannelRequestOutputGroupsMediaPackageGroupSetting `json:"MediaPackageGroupSetting,omitempty" xml:"MediaPackageGroupSetting,omitempty" type:"Struct"`
	// The name of the output group. Letters, digits, hyphens (-), and underscores (_) are supported. It can be up to 64 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// group1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The outputs in the output group.
	//
	// This parameter is required.
	Outputs []*UpdateMediaLiveChannelRequestOutputGroupsOutputs `json:"Outputs,omitempty" xml:"Outputs,omitempty" type:"Repeated"`
	// The output group type. Only MediaPackage is supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// MediaPackage
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateMediaLiveChannelRequestOutputGroups) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveChannelRequestOutputGroups) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveChannelRequestOutputGroups) SetMediaPackageGroupSetting(v *UpdateMediaLiveChannelRequestOutputGroupsMediaPackageGroupSetting) *UpdateMediaLiveChannelRequestOutputGroups {
	s.MediaPackageGroupSetting = v
	return s
}

func (s *UpdateMediaLiveChannelRequestOutputGroups) SetName(v string) *UpdateMediaLiveChannelRequestOutputGroups {
	s.Name = &v
	return s
}

func (s *UpdateMediaLiveChannelRequestOutputGroups) SetOutputs(v []*UpdateMediaLiveChannelRequestOutputGroupsOutputs) *UpdateMediaLiveChannelRequestOutputGroups {
	s.Outputs = v
	return s
}

func (s *UpdateMediaLiveChannelRequestOutputGroups) SetType(v string) *UpdateMediaLiveChannelRequestOutputGroups {
	s.Type = &v
	return s
}

type UpdateMediaLiveChannelRequestOutputGroupsMediaPackageGroupSetting struct {
	// ChannelName in MediaPackage.
	//
	// This parameter is required.
	//
	// example:
	//
	// myPackageChannel
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// GroupName in MediaPackage.
	//
	// This parameter is required.
	//
	// example:
	//
	// myPackageGroup
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s UpdateMediaLiveChannelRequestOutputGroupsMediaPackageGroupSetting) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveChannelRequestOutputGroupsMediaPackageGroupSetting) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveChannelRequestOutputGroupsMediaPackageGroupSetting) SetChannelName(v string) *UpdateMediaLiveChannelRequestOutputGroupsMediaPackageGroupSetting {
	s.ChannelName = &v
	return s
}

func (s *UpdateMediaLiveChannelRequestOutputGroupsMediaPackageGroupSetting) SetGroupName(v string) *UpdateMediaLiveChannelRequestOutputGroupsMediaPackageGroupSetting {
	s.GroupName = &v
	return s
}

type UpdateMediaLiveChannelRequestOutputGroupsOutputs struct {
	// The referenced AudioSettings.
	AudioSettingNames []*string `json:"AudioSettingNames,omitempty" xml:"AudioSettingNames,omitempty" type:"Repeated"`
	// The settings of the output delivered to MediaPackage.
	MediaPackageOutputSetting *UpdateMediaLiveChannelRequestOutputGroupsOutputsMediaPackageOutputSetting `json:"MediaPackageOutputSetting,omitempty" xml:"MediaPackageOutputSetting,omitempty" type:"Struct"`
	// The media type of the output. Valid values:
	//
	// 	- 0: Audio and Video
	//
	// 	- 1: Audio If you set the value to 1, you cannot reference VideoSettings.
	//
	// 	- 2: Video. If you set the value to 2, you cannot reference AudioSettings.
	//
	// example:
	//
	// 0
	MediaType *int32 `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// The name of the output. Letters, digits, hyphens (-), and underscores (_) are supported. It can be up to 64 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// output1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The name of the referenced VideoSettings.
	//
	// example:
	//
	// myVideo1
	VideoSettingName *string `json:"VideoSettingName,omitempty" xml:"VideoSettingName,omitempty"`
}

func (s UpdateMediaLiveChannelRequestOutputGroupsOutputs) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveChannelRequestOutputGroupsOutputs) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveChannelRequestOutputGroupsOutputs) SetAudioSettingNames(v []*string) *UpdateMediaLiveChannelRequestOutputGroupsOutputs {
	s.AudioSettingNames = v
	return s
}

func (s *UpdateMediaLiveChannelRequestOutputGroupsOutputs) SetMediaPackageOutputSetting(v *UpdateMediaLiveChannelRequestOutputGroupsOutputsMediaPackageOutputSetting) *UpdateMediaLiveChannelRequestOutputGroupsOutputs {
	s.MediaPackageOutputSetting = v
	return s
}

func (s *UpdateMediaLiveChannelRequestOutputGroupsOutputs) SetMediaType(v int32) *UpdateMediaLiveChannelRequestOutputGroupsOutputs {
	s.MediaType = &v
	return s
}

func (s *UpdateMediaLiveChannelRequestOutputGroupsOutputs) SetName(v string) *UpdateMediaLiveChannelRequestOutputGroupsOutputs {
	s.Name = &v
	return s
}

func (s *UpdateMediaLiveChannelRequestOutputGroupsOutputs) SetVideoSettingName(v string) *UpdateMediaLiveChannelRequestOutputGroupsOutputs {
	s.VideoSettingName = &v
	return s
}

type UpdateMediaLiveChannelRequestOutputGroupsOutputsMediaPackageOutputSetting struct {
	// The manifest audio group ID. To associate several audio tracks into one group, assign the same audio group ID. Viewers can select a track as needed. Letters, digits, hyphens (-), and underscores (_) are supported. It can be up to 40 characters in length.
	//
	// example:
	//
	// audiogroup
	AudioGroupId *string `json:"AudioGroupId,omitempty" xml:"AudioGroupId,omitempty"`
	// The manifest name modifier. The child manifests include this modifier in their M3U8 file names. Letters, digits, hyphens (-), and underscores (_) are supported. The maximum length is 40 characters.
	//
	// example:
	//
	// 480p
	NameModifier *string `json:"NameModifier,omitempty" xml:"NameModifier,omitempty"`
}

func (s UpdateMediaLiveChannelRequestOutputGroupsOutputsMediaPackageOutputSetting) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveChannelRequestOutputGroupsOutputsMediaPackageOutputSetting) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveChannelRequestOutputGroupsOutputsMediaPackageOutputSetting) SetAudioGroupId(v string) *UpdateMediaLiveChannelRequestOutputGroupsOutputsMediaPackageOutputSetting {
	s.AudioGroupId = &v
	return s
}

func (s *UpdateMediaLiveChannelRequestOutputGroupsOutputsMediaPackageOutputSetting) SetNameModifier(v string) *UpdateMediaLiveChannelRequestOutputGroupsOutputsMediaPackageOutputSetting {
	s.NameModifier = &v
	return s
}

type UpdateMediaLiveChannelRequestVideoSettings struct {
	// The height of the output. If you set it to 0 or leave it empty, the height automatically adapts to the specified width to maintain the original aspect ratio.
	//
	// Valid values:
	//
	// 	- For regular transcoding, the larger dimension cannot exceed 3840 px, and the smaller one cannot exceed 2160 px.
	//
	// 	- For Narrowband HD™ transcoding, the larger dimension cannot exceed 1920 px, and the smaller one cannot exceed 1080 px.
	//
	// example:
	//
	// 720
	Height *int32 `json:"Height,omitempty" xml:"Height,omitempty"`
	// The name of the video settings. Letters, digits, hyphens (-), and underscores (_) are supported. It can be up to 64 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// video1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The video codec. Valid values: H264 and H265.
	//
	// example:
	//
	// H264
	VideoCodec *string `json:"VideoCodec,omitempty" xml:"VideoCodec,omitempty"`
	// The video encoding settings.
	VideoCodecSetting *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSetting `json:"VideoCodecSetting,omitempty" xml:"VideoCodecSetting,omitempty" type:"Struct"`
	// The video transcoding method. Valid values:
	//
	// 	- NORMAL: regular transcoding
	//
	// 	- NBHD: Narrowband HD™ transcoding
	//
	// If not specified, regular transcoding is used by default.
	//
	// example:
	//
	// NORMAL
	VideoCodecType *string `json:"VideoCodecType,omitempty" xml:"VideoCodecType,omitempty"`
	// The width of the output. If you set it to 0 or leave it empty, the width automatically adapts to the specified height to maintain the original aspect ratio.
	//
	// Valid values:
	//
	// 	- For regular transcoding, the larger dimension cannot exceed 3840 px, and the smaller one cannot exceed 2160 px.
	//
	// 	- For Narrowband HD™ transcoding, the larger dimension cannot exceed 1920 px, and the smaller one cannot exceed 1080 px.
	//
	// example:
	//
	// 1280
	Width *int32 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s UpdateMediaLiveChannelRequestVideoSettings) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveChannelRequestVideoSettings) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveChannelRequestVideoSettings) SetHeight(v int32) *UpdateMediaLiveChannelRequestVideoSettings {
	s.Height = &v
	return s
}

func (s *UpdateMediaLiveChannelRequestVideoSettings) SetName(v string) *UpdateMediaLiveChannelRequestVideoSettings {
	s.Name = &v
	return s
}

func (s *UpdateMediaLiveChannelRequestVideoSettings) SetVideoCodec(v string) *UpdateMediaLiveChannelRequestVideoSettings {
	s.VideoCodec = &v
	return s
}

func (s *UpdateMediaLiveChannelRequestVideoSettings) SetVideoCodecSetting(v *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSetting) *UpdateMediaLiveChannelRequestVideoSettings {
	s.VideoCodecSetting = v
	return s
}

func (s *UpdateMediaLiveChannelRequestVideoSettings) SetVideoCodecType(v string) *UpdateMediaLiveChannelRequestVideoSettings {
	s.VideoCodecType = &v
	return s
}

func (s *UpdateMediaLiveChannelRequestVideoSettings) SetWidth(v int32) *UpdateMediaLiveChannelRequestVideoSettings {
	s.Width = &v
	return s
}

type UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSetting struct {
	// The video encoding settings.
	CodecDetail *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingCodecDetail `json:"CodecDetail,omitempty" xml:"CodecDetail,omitempty" type:"Struct"`
	// The frame rate. If it is not specified, the source specification is used.
	Framerate *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingFramerate `json:"Framerate,omitempty" xml:"Framerate,omitempty" type:"Struct"`
	// The GOP setting. If it is not specified, the source specification is used.
	Gop *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingGop `json:"Gop,omitempty" xml:"Gop,omitempty" type:"Struct"`
	// The video encoding rate. If it is not specified, the source specification is used.
	Rate *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingRate `json:"Rate,omitempty" xml:"Rate,omitempty" type:"Struct"`
}

func (s UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSetting) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSetting) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSetting) SetCodecDetail(v *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingCodecDetail) *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSetting {
	s.CodecDetail = v
	return s
}

func (s *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSetting) SetFramerate(v *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingFramerate) *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSetting {
	s.Framerate = v
	return s
}

func (s *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSetting) SetGop(v *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingGop) *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSetting {
	s.Gop = v
	return s
}

func (s *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSetting) SetRate(v *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingRate) *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSetting {
	s.Rate = v
	return s
}

type UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingCodecDetail struct {
	// The video encoding level. It is not supported yet.
	//
	// example:
	//
	// H264_LEVEL_AUTO
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The H.264 profile. Valid values: BASELINE, HIGH, and MAIN. Default value: MAIN. The parameter takes effect only when the codec is H.264.
	//
	// example:
	//
	// MAIN
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
}

func (s UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingCodecDetail) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingCodecDetail) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingCodecDetail) SetLevel(v string) *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingCodecDetail {
	s.Level = &v
	return s
}

func (s *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingCodecDetail) SetProfile(v string) *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingCodecDetail {
	s.Profile = &v
	return s
}

type UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingFramerate struct {
	// The frame rate mode. Valid values: SPECIFIED (fixed frame rate) and FROM_SOURCE (use source specification).
	//
	// example:
	//
	// SPECIFIED
	FramerateControl *string `json:"FramerateControl,omitempty" xml:"FramerateControl,omitempty"`
	// The denominator of the fixed frame rate. The parameter is required when FramerateControl is set to SPECIFIED. Valid values: 1 to 60. The numerator must be divisible by the denominator.
	//
	// example:
	//
	// 1
	FramerateDenominator *int32 `json:"FramerateDenominator,omitempty" xml:"FramerateDenominator,omitempty"`
	// The numerator of the fixed frame rate. The parameter is required when FramerateControl is set to SPECIFIED. Valid values: 1 to 60. The numerator must be divisible by the denominator.
	//
	// example:
	//
	// 25
	FramerateNumerator *int32 `json:"FramerateNumerator,omitempty" xml:"FramerateNumerator,omitempty"`
}

func (s UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingFramerate) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingFramerate) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingFramerate) SetFramerateControl(v string) *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingFramerate {
	s.FramerateControl = &v
	return s
}

func (s *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingFramerate) SetFramerateDenominator(v int32) *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingFramerate {
	s.FramerateDenominator = &v
	return s
}

func (s *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingFramerate) SetFramerateNumerator(v int32) *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingFramerate {
	s.FramerateNumerator = &v
	return s
}

type UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingGop struct {
	// The number of B frames. Valid values: 1 to 3.
	//
	// example:
	//
	// 3
	BframesNum *int32 `json:"BframesNum,omitempty" xml:"BframesNum,omitempty"`
	// The GOP size. When GopSizeUnits is set to SECONDS, the value range is from 1 to 20. When GopSizeUnits is set to FRAMES, the value range is from 1 to 3000.
	//
	// example:
	//
	// 90
	GopSize *int32 `json:"GopSize,omitempty" xml:"GopSize,omitempty"`
	// The GOP size unit. Valid values: FRAMES and SECONDS.
	//
	// example:
	//
	// FRAMES
	GopSizeUnits *string `json:"GopSizeUnits,omitempty" xml:"GopSizeUnits,omitempty"`
}

func (s UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingGop) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingGop) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingGop) SetBframesNum(v int32) *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingGop {
	s.BframesNum = &v
	return s
}

func (s *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingGop) SetGopSize(v int32) *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingGop {
	s.GopSize = &v
	return s
}

func (s *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingGop) SetGopSizeUnits(v string) *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingGop {
	s.GopSizeUnits = &v
	return s
}

type UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingRate struct {
	// The video bitrate. Unit: bit/s. If you set it to 0 or leave it empty, the source specification is used. Valid values: 50000 to 6000000. The value must be divisible by 1000.
	//
	// example:
	//
	// 2500000
	Bitrate *int32 `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// The video buffer size. Unit: bit/s. Valid values: 100000 to 6000000. The value must be divisible by 1000.
	//
	// example:
	//
	// 6000000
	BufferSize *int32 `json:"BufferSize,omitempty" xml:"BufferSize,omitempty"`
	// The maximum bitrate. Unit: bit/s. Valid values: 100000 to 6000000. The value must be divisible by 1000.
	//
	// example:
	//
	// 6000000
	MaxBitrate *int32 `json:"MaxBitrate,omitempty" xml:"MaxBitrate,omitempty"`
	// The bitrate control mode. Valid values: CBR, ABR, and VBR.
	//
	// example:
	//
	// ABR
	RateControlMode *string `json:"RateControlMode,omitempty" xml:"RateControlMode,omitempty"`
}

func (s UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingRate) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingRate) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingRate) SetBitrate(v int32) *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingRate {
	s.Bitrate = &v
	return s
}

func (s *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingRate) SetBufferSize(v int32) *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingRate {
	s.BufferSize = &v
	return s
}

func (s *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingRate) SetMaxBitrate(v int32) *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingRate {
	s.MaxBitrate = &v
	return s
}

func (s *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingRate) SetRateControlMode(v string) *UpdateMediaLiveChannelRequestVideoSettingsVideoCodecSettingRate {
	s.RateControlMode = &v
	return s
}

type UpdateMediaLiveChannelShrinkRequest struct {
	// The audio settings.
	AudioSettingsShrink *string `json:"AudioSettings,omitempty" xml:"AudioSettings,omitempty"`
	// The ID of the channel.
	//
	// This parameter is required.
	//
	// example:
	//
	// SEGK5KA6KYKAWQQH
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// The inputs associated with the channel.
	//
	// This parameter is required.
	InputAttachmentsShrink *string `json:"InputAttachments,omitempty" xml:"InputAttachments,omitempty"`
	// The name of the channel. Letters, digits, hyphens (-), and underscores (_) are supported. It can be up to 64 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// mych
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output groups.
	//
	// This parameter is required.
	OutputGroupsShrink *string `json:"OutputGroups,omitempty" xml:"OutputGroups,omitempty"`
	// The video settings.
	VideoSettingsShrink *string `json:"VideoSettings,omitempty" xml:"VideoSettings,omitempty"`
}

func (s UpdateMediaLiveChannelShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveChannelShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveChannelShrinkRequest) SetAudioSettingsShrink(v string) *UpdateMediaLiveChannelShrinkRequest {
	s.AudioSettingsShrink = &v
	return s
}

func (s *UpdateMediaLiveChannelShrinkRequest) SetChannelId(v string) *UpdateMediaLiveChannelShrinkRequest {
	s.ChannelId = &v
	return s
}

func (s *UpdateMediaLiveChannelShrinkRequest) SetInputAttachmentsShrink(v string) *UpdateMediaLiveChannelShrinkRequest {
	s.InputAttachmentsShrink = &v
	return s
}

func (s *UpdateMediaLiveChannelShrinkRequest) SetName(v string) *UpdateMediaLiveChannelShrinkRequest {
	s.Name = &v
	return s
}

func (s *UpdateMediaLiveChannelShrinkRequest) SetOutputGroupsShrink(v string) *UpdateMediaLiveChannelShrinkRequest {
	s.OutputGroupsShrink = &v
	return s
}

func (s *UpdateMediaLiveChannelShrinkRequest) SetVideoSettingsShrink(v string) *UpdateMediaLiveChannelShrinkRequest {
	s.VideoSettingsShrink = &v
	return s
}

type UpdateMediaLiveChannelResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateMediaLiveChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveChannelResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveChannelResponseBody) SetRequestId(v string) *UpdateMediaLiveChannelResponseBody {
	s.RequestId = &v
	return s
}

type UpdateMediaLiveChannelResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateMediaLiveChannelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateMediaLiveChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveChannelResponse) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveChannelResponse) SetHeaders(v map[string]*string) *UpdateMediaLiveChannelResponse {
	s.Headers = v
	return s
}

func (s *UpdateMediaLiveChannelResponse) SetStatusCode(v int32) *UpdateMediaLiveChannelResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMediaLiveChannelResponse) SetBody(v *UpdateMediaLiveChannelResponseBody) *UpdateMediaLiveChannelResponse {
	s.Body = v
	return s
}

type UpdateMediaLiveInputRequest struct {
	// The ID of the input.
	//
	// This parameter is required.
	//
	// example:
	//
	// SEGK5KA6KYKAWQQH
	InputId *string `json:"InputId,omitempty" xml:"InputId,omitempty"`
	// The input settings. An input can have up to two sources: primary and backup sources.
	//
	// This parameter is required.
	InputSettings []*UpdateMediaLiveInputRequestInputSettings `json:"InputSettings,omitempty" xml:"InputSettings,omitempty" type:"Repeated"`
	// The name of the input. Letters, digits, hyphens (-), and underscores (_) are supported. It can be up to 64 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// myinput
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The IDs of the security groups to be associated with the input. This parameter is required for PUSH inputs.
	//
	// example:
	//
	// ["G6G4X5T4SZYPSTT5"]
	SecurityGroupIds []*string `json:"SecurityGroupIds,omitempty" xml:"SecurityGroupIds,omitempty" type:"Repeated"`
}

func (s UpdateMediaLiveInputRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveInputRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveInputRequest) SetInputId(v string) *UpdateMediaLiveInputRequest {
	s.InputId = &v
	return s
}

func (s *UpdateMediaLiveInputRequest) SetInputSettings(v []*UpdateMediaLiveInputRequestInputSettings) *UpdateMediaLiveInputRequest {
	s.InputSettings = v
	return s
}

func (s *UpdateMediaLiveInputRequest) SetName(v string) *UpdateMediaLiveInputRequest {
	s.Name = &v
	return s
}

func (s *UpdateMediaLiveInputRequest) SetSecurityGroupIds(v []*string) *UpdateMediaLiveInputRequest {
	s.SecurityGroupIds = v
	return s
}

type UpdateMediaLiveInputRequestInputSettings struct {
	// The ID of the flow from MediaConnect. This parameter is required when Type is set to MEDIA_CONNECT.
	//
	// example:
	//
	// ******81-9693-40dc-bbab-db5e49******
	FlowId *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	// The output name of the MediaConnect flow. This parameter is required when Type is set to MEDIA_CONNECT.
	//
	// example:
	//
	// myFlowOutputName
	FlowOutputName *string `json:"FlowOutputName,omitempty" xml:"FlowOutputName,omitempty"`
	// The source URL from which the stream is pulled. This parameter is required for PULL inputs.
	//
	// example:
	//
	// rtmp://domain/app/stream
	SourceUrl *string `json:"SourceUrl,omitempty" xml:"SourceUrl,omitempty"`
	// The name of the pushed stream. This parameter is required for PUSH inputs. It can be up to 255 characters in length.
	//
	// example:
	//
	// mystream
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s UpdateMediaLiveInputRequestInputSettings) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveInputRequestInputSettings) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveInputRequestInputSettings) SetFlowId(v string) *UpdateMediaLiveInputRequestInputSettings {
	s.FlowId = &v
	return s
}

func (s *UpdateMediaLiveInputRequestInputSettings) SetFlowOutputName(v string) *UpdateMediaLiveInputRequestInputSettings {
	s.FlowOutputName = &v
	return s
}

func (s *UpdateMediaLiveInputRequestInputSettings) SetSourceUrl(v string) *UpdateMediaLiveInputRequestInputSettings {
	s.SourceUrl = &v
	return s
}

func (s *UpdateMediaLiveInputRequestInputSettings) SetStreamName(v string) *UpdateMediaLiveInputRequestInputSettings {
	s.StreamName = &v
	return s
}

type UpdateMediaLiveInputShrinkRequest struct {
	// The ID of the input.
	//
	// This parameter is required.
	//
	// example:
	//
	// SEGK5KA6KYKAWQQH
	InputId *string `json:"InputId,omitempty" xml:"InputId,omitempty"`
	// The input settings. An input can have up to two sources: primary and backup sources.
	//
	// This parameter is required.
	InputSettingsShrink *string `json:"InputSettings,omitempty" xml:"InputSettings,omitempty"`
	// The name of the input. Letters, digits, hyphens (-), and underscores (_) are supported. It can be up to 64 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// myinput
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The IDs of the security groups to be associated with the input. This parameter is required for PUSH inputs.
	//
	// example:
	//
	// ["G6G4X5T4SZYPSTT5"]
	SecurityGroupIdsShrink *string `json:"SecurityGroupIds,omitempty" xml:"SecurityGroupIds,omitempty"`
}

func (s UpdateMediaLiveInputShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveInputShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveInputShrinkRequest) SetInputId(v string) *UpdateMediaLiveInputShrinkRequest {
	s.InputId = &v
	return s
}

func (s *UpdateMediaLiveInputShrinkRequest) SetInputSettingsShrink(v string) *UpdateMediaLiveInputShrinkRequest {
	s.InputSettingsShrink = &v
	return s
}

func (s *UpdateMediaLiveInputShrinkRequest) SetName(v string) *UpdateMediaLiveInputShrinkRequest {
	s.Name = &v
	return s
}

func (s *UpdateMediaLiveInputShrinkRequest) SetSecurityGroupIdsShrink(v string) *UpdateMediaLiveInputShrinkRequest {
	s.SecurityGroupIdsShrink = &v
	return s
}

type UpdateMediaLiveInputResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateMediaLiveInputResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveInputResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveInputResponseBody) SetRequestId(v string) *UpdateMediaLiveInputResponseBody {
	s.RequestId = &v
	return s
}

type UpdateMediaLiveInputResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateMediaLiveInputResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateMediaLiveInputResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveInputResponse) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveInputResponse) SetHeaders(v map[string]*string) *UpdateMediaLiveInputResponse {
	s.Headers = v
	return s
}

func (s *UpdateMediaLiveInputResponse) SetStatusCode(v int32) *UpdateMediaLiveInputResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMediaLiveInputResponse) SetBody(v *UpdateMediaLiveInputResponseBody) *UpdateMediaLiveInputResponse {
	s.Body = v
	return s
}

type UpdateMediaLiveInputSecurityGroupRequest struct {
	// The name of the security group. Letters, digits, hyphens (-), and underscores (_) are supported. It can be up to 64 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// mysg
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the security group.
	//
	// This parameter is required.
	//
	// example:
	//
	// SEGK5KA6KYKAWQQH
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// The security group rules.
	//
	// This parameter is required.
	WhitelistRules []*string `json:"WhitelistRules,omitempty" xml:"WhitelistRules,omitempty" type:"Repeated"`
}

func (s UpdateMediaLiveInputSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveInputSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveInputSecurityGroupRequest) SetName(v string) *UpdateMediaLiveInputSecurityGroupRequest {
	s.Name = &v
	return s
}

func (s *UpdateMediaLiveInputSecurityGroupRequest) SetSecurityGroupId(v string) *UpdateMediaLiveInputSecurityGroupRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *UpdateMediaLiveInputSecurityGroupRequest) SetWhitelistRules(v []*string) *UpdateMediaLiveInputSecurityGroupRequest {
	s.WhitelistRules = v
	return s
}

type UpdateMediaLiveInputSecurityGroupShrinkRequest struct {
	// The name of the security group. Letters, digits, hyphens (-), and underscores (_) are supported. It can be up to 64 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// mysg
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the security group.
	//
	// This parameter is required.
	//
	// example:
	//
	// SEGK5KA6KYKAWQQH
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// The security group rules.
	//
	// This parameter is required.
	WhitelistRulesShrink *string `json:"WhitelistRules,omitempty" xml:"WhitelistRules,omitempty"`
}

func (s UpdateMediaLiveInputSecurityGroupShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveInputSecurityGroupShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveInputSecurityGroupShrinkRequest) SetName(v string) *UpdateMediaLiveInputSecurityGroupShrinkRequest {
	s.Name = &v
	return s
}

func (s *UpdateMediaLiveInputSecurityGroupShrinkRequest) SetSecurityGroupId(v string) *UpdateMediaLiveInputSecurityGroupShrinkRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *UpdateMediaLiveInputSecurityGroupShrinkRequest) SetWhitelistRulesShrink(v string) *UpdateMediaLiveInputSecurityGroupShrinkRequest {
	s.WhitelistRulesShrink = &v
	return s
}

type UpdateMediaLiveInputSecurityGroupResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateMediaLiveInputSecurityGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveInputSecurityGroupResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveInputSecurityGroupResponseBody) SetRequestId(v string) *UpdateMediaLiveInputSecurityGroupResponseBody {
	s.RequestId = &v
	return s
}

type UpdateMediaLiveInputSecurityGroupResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateMediaLiveInputSecurityGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateMediaLiveInputSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaLiveInputSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateMediaLiveInputSecurityGroupResponse) SetHeaders(v map[string]*string) *UpdateMediaLiveInputSecurityGroupResponse {
	s.Headers = v
	return s
}

func (s *UpdateMediaLiveInputSecurityGroupResponse) SetStatusCode(v int32) *UpdateMediaLiveInputSecurityGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMediaLiveInputSecurityGroupResponse) SetBody(v *UpdateMediaLiveInputSecurityGroupResponseBody) *UpdateMediaLiveInputSecurityGroupResponse {
	s.Body = v
	return s
}

type UpdateMediaMarksRequest struct {
	// The ID of the media asset.
	//
	// This parameter is required.
	//
	// example:
	//
	// 53afdf003a******6a16b5feac6402
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The marks of the media asset.
	//
	// This parameter is required.
	MediaMarks *string `json:"MediaMarks,omitempty" xml:"MediaMarks,omitempty"`
}

func (s UpdateMediaMarksRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaMarksRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaMarksRequest) SetMediaId(v string) *UpdateMediaMarksRequest {
	s.MediaId = &v
	return s
}

func (s *UpdateMediaMarksRequest) SetMediaMarks(v string) *UpdateMediaMarksRequest {
	s.MediaMarks = &v
	return s
}

type UpdateMediaMarksResponseBody struct {
	// The ID of the media asset.
	//
	// example:
	//
	// 53afdf003a******6a16b5feac6402
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The IDs of the successfully modified marks.
	//
	// example:
	//
	// mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60
	MediaMarkIds *string `json:"MediaMarkIds,omitempty" xml:"MediaMarkIds,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateMediaMarksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaMarksResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMediaMarksResponseBody) SetMediaId(v string) *UpdateMediaMarksResponseBody {
	s.MediaId = &v
	return s
}

func (s *UpdateMediaMarksResponseBody) SetMediaMarkIds(v string) *UpdateMediaMarksResponseBody {
	s.MediaMarkIds = &v
	return s
}

func (s *UpdateMediaMarksResponseBody) SetRequestId(v string) *UpdateMediaMarksResponseBody {
	s.RequestId = &v
	return s
}

type UpdateMediaMarksResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateMediaMarksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateMediaMarksResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaMarksResponse) GoString() string {
	return s.String()
}

func (s *UpdateMediaMarksResponse) SetHeaders(v map[string]*string) *UpdateMediaMarksResponse {
	s.Headers = v
	return s
}

func (s *UpdateMediaMarksResponse) SetStatusCode(v int32) *UpdateMediaMarksResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMediaMarksResponse) SetBody(v *UpdateMediaMarksResponseBody) *UpdateMediaMarksResponse {
	s.Body = v
	return s
}

type UpdateMediaToSearchLibRequest struct {
	// The ID of the media asset.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****019b82e24b37a1c2958dec38****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The message body.
	//
	// This parameter is required.
	//
	// example:
	//
	// {}
	MsgBody *string `json:"MsgBody,omitempty" xml:"MsgBody,omitempty"`
	// The name of the search library. Default value: ims-default-search-lib.
	//
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
}

func (s UpdateMediaToSearchLibRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaToSearchLibRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaToSearchLibRequest) SetMediaId(v string) *UpdateMediaToSearchLibRequest {
	s.MediaId = &v
	return s
}

func (s *UpdateMediaToSearchLibRequest) SetMsgBody(v string) *UpdateMediaToSearchLibRequest {
	s.MsgBody = &v
	return s
}

func (s *UpdateMediaToSearchLibRequest) SetSearchLibName(v string) *UpdateMediaToSearchLibRequest {
	s.SearchLibName = &v
	return s
}

type UpdateMediaToSearchLibResponseBody struct {
	// The status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// ******b48fb04483915d4f2cd8******
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 4E84BE44-58A7-****-****-FBEBEA16EF94
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateMediaToSearchLibResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaToSearchLibResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMediaToSearchLibResponseBody) SetCode(v string) *UpdateMediaToSearchLibResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateMediaToSearchLibResponseBody) SetMediaId(v string) *UpdateMediaToSearchLibResponseBody {
	s.MediaId = &v
	return s
}

func (s *UpdateMediaToSearchLibResponseBody) SetRequestId(v string) *UpdateMediaToSearchLibResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMediaToSearchLibResponseBody) SetSuccess(v string) *UpdateMediaToSearchLibResponseBody {
	s.Success = &v
	return s
}

type UpdateMediaToSearchLibResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateMediaToSearchLibResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateMediaToSearchLibResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaToSearchLibResponse) GoString() string {
	return s.String()
}

func (s *UpdateMediaToSearchLibResponse) SetHeaders(v map[string]*string) *UpdateMediaToSearchLibResponse {
	s.Headers = v
	return s
}

func (s *UpdateMediaToSearchLibResponse) SetStatusCode(v int32) *UpdateMediaToSearchLibResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMediaToSearchLibResponse) SetBody(v *UpdateMediaToSearchLibResponseBody) *UpdateMediaToSearchLibResponse {
	s.Body = v
	return s
}

type UpdatePipelineRequest struct {
	// The name of the MPS queue.
	//
	// example:
	//
	// test-pipeline
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the MPS queue.
	//
	// This parameter is required.
	//
	// example:
	//
	// ****d80e4e4044975745c14b****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The priority of the MPS queue. Valid values: 1 to 10.
	//
	// example:
	//
	// 6
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The state of the MPS queue.
	//
	// Valid values:
	//
	// 	- Active
	//
	// 	- Paused
	//
	// example:
	//
	// Paused
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdatePipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineRequest) GoString() string {
	return s.String()
}

func (s *UpdatePipelineRequest) SetName(v string) *UpdatePipelineRequest {
	s.Name = &v
	return s
}

func (s *UpdatePipelineRequest) SetPipelineId(v string) *UpdatePipelineRequest {
	s.PipelineId = &v
	return s
}

func (s *UpdatePipelineRequest) SetPriority(v int32) *UpdatePipelineRequest {
	s.Priority = &v
	return s
}

func (s *UpdatePipelineRequest) SetStatus(v string) *UpdatePipelineRequest {
	s.Status = &v
	return s
}

type UpdatePipelineResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdatePipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineResponseBody) GoString() string {
	return s.String()
}

func (s *UpdatePipelineResponseBody) SetRequestId(v string) *UpdatePipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdatePipelineResponseBody) SetSuccess(v bool) *UpdatePipelineResponseBody {
	s.Success = &v
	return s
}

type UpdatePipelineResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdatePipelineResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdatePipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineResponse) GoString() string {
	return s.String()
}

func (s *UpdatePipelineResponse) SetHeaders(v map[string]*string) *UpdatePipelineResponse {
	s.Headers = v
	return s
}

func (s *UpdatePipelineResponse) SetStatusCode(v int32) *UpdatePipelineResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdatePipelineResponse) SetBody(v *UpdatePipelineResponseBody) *UpdatePipelineResponse {
	s.Body = v
	return s
}

type UpdateProgramRequest struct {
	// The information about ad breaks.
	//
	// example:
	//
	// [{"MessageType":"SPLICE_INSERT","OffsetMillis":1000,"SourceLocationName":"MySourceLocation","SourceName":"MyAdSource","SpliceInsertSettings":{"AvailNumber":0,"AvailExpected":0,"SpliceEventID":1,"UniqueProgramID":0}}]
	AdBreaks *string `json:"AdBreaks,omitempty" xml:"AdBreaks,omitempty"`
	// The name of the channel.
	//
	// This parameter is required.
	//
	// example:
	//
	// MyChannel
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// Extracts a clip from the source.
	//
	// example:
	//
	// {StartOffsetMillis: 213123, EndOffsetMillis: 213134}
	ClipRange *string `json:"ClipRange,omitempty" xml:"ClipRange,omitempty"`
	// The name of the program.
	//
	// This parameter is required.
	//
	// example:
	//
	// program1
	ProgramName *string `json:"ProgramName,omitempty" xml:"ProgramName,omitempty"`
	// The name of the source location.
	//
	// example:
	//
	// MySourceLcation
	SourceLocationName *string `json:"SourceLocationName,omitempty" xml:"SourceLocationName,omitempty"`
	// The name of the source.
	//
	// example:
	//
	// MySource
	SourceName *string `json:"SourceName,omitempty" xml:"SourceName,omitempty"`
	// The source type of the program. Valid values: vodSource and liveSource.
	//
	// example:
	//
	// vodSource
	SourceType *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	// The program transition method.
	//
	// example:
	//
	// {"Type": "RELATIVE", "RelativePosition": "AFTER_PROGRAM", "RelativeProgram": "program2"}
	Transition *string `json:"Transition,omitempty" xml:"Transition,omitempty"`
}

func (s UpdateProgramRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateProgramRequest) GoString() string {
	return s.String()
}

func (s *UpdateProgramRequest) SetAdBreaks(v string) *UpdateProgramRequest {
	s.AdBreaks = &v
	return s
}

func (s *UpdateProgramRequest) SetChannelName(v string) *UpdateProgramRequest {
	s.ChannelName = &v
	return s
}

func (s *UpdateProgramRequest) SetClipRange(v string) *UpdateProgramRequest {
	s.ClipRange = &v
	return s
}

func (s *UpdateProgramRequest) SetProgramName(v string) *UpdateProgramRequest {
	s.ProgramName = &v
	return s
}

func (s *UpdateProgramRequest) SetSourceLocationName(v string) *UpdateProgramRequest {
	s.SourceLocationName = &v
	return s
}

func (s *UpdateProgramRequest) SetSourceName(v string) *UpdateProgramRequest {
	s.SourceName = &v
	return s
}

func (s *UpdateProgramRequest) SetSourceType(v string) *UpdateProgramRequest {
	s.SourceType = &v
	return s
}

func (s *UpdateProgramRequest) SetTransition(v string) *UpdateProgramRequest {
	s.Transition = &v
	return s
}

type UpdateProgramResponseBody struct {
	// The information about the program.
	Program *ChannelAssemblyProgram `json:"Program,omitempty" xml:"Program,omitempty"`
	// **Request ID**
	//
	// example:
	//
	// xxx-xxxx-xxxxx-xxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateProgramResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateProgramResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateProgramResponseBody) SetProgram(v *ChannelAssemblyProgram) *UpdateProgramResponseBody {
	s.Program = v
	return s
}

func (s *UpdateProgramResponseBody) SetRequestId(v string) *UpdateProgramResponseBody {
	s.RequestId = &v
	return s
}

type UpdateProgramResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateProgramResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateProgramResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateProgramResponse) GoString() string {
	return s.String()
}

func (s *UpdateProgramResponse) SetHeaders(v map[string]*string) *UpdateProgramResponse {
	s.Headers = v
	return s
}

func (s *UpdateProgramResponse) SetStatusCode(v int32) *UpdateProgramResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateProgramResponse) SetBody(v *UpdateProgramResponseBody) *UpdateProgramResponse {
	s.Body = v
	return s
}

type UpdateRtcRobotInstanceRequest struct {
	Config *UpdateRtcRobotInstanceRequestConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 727dc0e296014bb58670940a3da95592
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s UpdateRtcRobotInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateRtcRobotInstanceRequest) GoString() string {
	return s.String()
}

func (s *UpdateRtcRobotInstanceRequest) SetConfig(v *UpdateRtcRobotInstanceRequestConfig) *UpdateRtcRobotInstanceRequest {
	s.Config = v
	return s
}

func (s *UpdateRtcRobotInstanceRequest) SetInstanceId(v string) *UpdateRtcRobotInstanceRequest {
	s.InstanceId = &v
	return s
}

type UpdateRtcRobotInstanceRequestConfig struct {
	// example:
	//
	// false
	EnableVoiceInterrupt *bool   `json:"EnableVoiceInterrupt,omitempty" xml:"EnableVoiceInterrupt,omitempty"`
	Greeting             *string `json:"Greeting,omitempty" xml:"Greeting,omitempty"`
	// example:
	//
	// zhixiaoxia
	VoiceId *string `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
}

func (s UpdateRtcRobotInstanceRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateRtcRobotInstanceRequestConfig) GoString() string {
	return s.String()
}

func (s *UpdateRtcRobotInstanceRequestConfig) SetEnableVoiceInterrupt(v bool) *UpdateRtcRobotInstanceRequestConfig {
	s.EnableVoiceInterrupt = &v
	return s
}

func (s *UpdateRtcRobotInstanceRequestConfig) SetGreeting(v string) *UpdateRtcRobotInstanceRequestConfig {
	s.Greeting = &v
	return s
}

func (s *UpdateRtcRobotInstanceRequestConfig) SetVoiceId(v string) *UpdateRtcRobotInstanceRequestConfig {
	s.VoiceId = &v
	return s
}

type UpdateRtcRobotInstanceShrinkRequest struct {
	ConfigShrink *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 727dc0e296014bb58670940a3da95592
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s UpdateRtcRobotInstanceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateRtcRobotInstanceShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateRtcRobotInstanceShrinkRequest) SetConfigShrink(v string) *UpdateRtcRobotInstanceShrinkRequest {
	s.ConfigShrink = &v
	return s
}

func (s *UpdateRtcRobotInstanceShrinkRequest) SetInstanceId(v string) *UpdateRtcRobotInstanceShrinkRequest {
	s.InstanceId = &v
	return s
}

type UpdateRtcRobotInstanceResponseBody struct {
	// Id of the request
	//
	// example:
	//
	// 7707F0A2-C6FD-5959-87EB-7C4D02384FD4
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateRtcRobotInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateRtcRobotInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateRtcRobotInstanceResponseBody) SetRequestId(v string) *UpdateRtcRobotInstanceResponseBody {
	s.RequestId = &v
	return s
}

type UpdateRtcRobotInstanceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateRtcRobotInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateRtcRobotInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateRtcRobotInstanceResponse) GoString() string {
	return s.String()
}

func (s *UpdateRtcRobotInstanceResponse) SetHeaders(v map[string]*string) *UpdateRtcRobotInstanceResponse {
	s.Headers = v
	return s
}

func (s *UpdateRtcRobotInstanceResponse) SetStatusCode(v int32) *UpdateRtcRobotInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateRtcRobotInstanceResponse) SetBody(v *UpdateRtcRobotInstanceResponseBody) *UpdateRtcRobotInstanceResponse {
	s.Body = v
	return s
}

type UpdateSourceRequest struct {
	// The source configurations.
	//
	// This parameter is required.
	//
	// example:
	//
	// [{
	//
	// 	"sourceGroupName": "mySourceGroup-1",
	//
	// 	"relativePath": "group1/hls.m3u8",
	//
	// 	"packageType": "hls"
	//
	// }]
	HttpPackageConfigurations *string `json:"HttpPackageConfigurations,omitempty" xml:"HttpPackageConfigurations,omitempty"`
	// The name of the source location.
	//
	// This parameter is required.
	//
	// example:
	//
	// MySourcelocation
	SourceLocationName *string `json:"SourceLocationName,omitempty" xml:"SourceLocationName,omitempty"`
	// The name of the source.
	//
	// This parameter is required.
	//
	// example:
	//
	// MySource
	SourceName *string `json:"SourceName,omitempty" xml:"SourceName,omitempty"`
	// The source type. Valid values: vodSource and liveSource.
	//
	// This parameter is required.
	//
	// example:
	//
	// vodSource
	SourceType *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
}

func (s UpdateSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSourceRequest) GoString() string {
	return s.String()
}

func (s *UpdateSourceRequest) SetHttpPackageConfigurations(v string) *UpdateSourceRequest {
	s.HttpPackageConfigurations = &v
	return s
}

func (s *UpdateSourceRequest) SetSourceLocationName(v string) *UpdateSourceRequest {
	s.SourceLocationName = &v
	return s
}

func (s *UpdateSourceRequest) SetSourceName(v string) *UpdateSourceRequest {
	s.SourceName = &v
	return s
}

func (s *UpdateSourceRequest) SetSourceType(v string) *UpdateSourceRequest {
	s.SourceType = &v
	return s
}

type UpdateSourceResponseBody struct {
	// **Request ID**
	//
	// example:
	//
	// xxx-xxxx-xxxxx-xxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The source information.
	Source *ChannelAssemblySource `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s UpdateSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSourceResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSourceResponseBody) SetRequestId(v string) *UpdateSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSourceResponseBody) SetSource(v *ChannelAssemblySource) *UpdateSourceResponseBody {
	s.Source = v
	return s
}

type UpdateSourceResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSourceResponse) GoString() string {
	return s.String()
}

func (s *UpdateSourceResponse) SetHeaders(v map[string]*string) *UpdateSourceResponse {
	s.Headers = v
	return s
}

func (s *UpdateSourceResponse) SetStatusCode(v int32) *UpdateSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSourceResponse) SetBody(v *UpdateSourceResponseBody) *UpdateSourceResponse {
	s.Body = v
	return s
}

type UpdateSourceLocationRequest struct {
	// The protocol and hostname of the source location.
	//
	// example:
	//
	// http://xxx.com
	BaseUrl *string `json:"BaseUrl,omitempty" xml:"BaseUrl,omitempty"`
	// Specifies whether to use an independent domain name to access the segments.
	//
	// example:
	//
	// true
	EnableSegmentDelivery *bool `json:"EnableSegmentDelivery,omitempty" xml:"EnableSegmentDelivery,omitempty"`
	// The domain name used to access the segments.
	//
	// example:
	//
	// http://xxxx.com
	SegmentDeliveryUrl *string `json:"SegmentDeliveryUrl,omitempty" xml:"SegmentDeliveryUrl,omitempty"`
	// The name of the source location.
	//
	// This parameter is required.
	//
	// example:
	//
	// MySourceLocation
	SourceLocationName *string `json:"SourceLocationName,omitempty" xml:"SourceLocationName,omitempty"`
}

func (s UpdateSourceLocationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSourceLocationRequest) GoString() string {
	return s.String()
}

func (s *UpdateSourceLocationRequest) SetBaseUrl(v string) *UpdateSourceLocationRequest {
	s.BaseUrl = &v
	return s
}

func (s *UpdateSourceLocationRequest) SetEnableSegmentDelivery(v bool) *UpdateSourceLocationRequest {
	s.EnableSegmentDelivery = &v
	return s
}

func (s *UpdateSourceLocationRequest) SetSegmentDeliveryUrl(v string) *UpdateSourceLocationRequest {
	s.SegmentDeliveryUrl = &v
	return s
}

func (s *UpdateSourceLocationRequest) SetSourceLocationName(v string) *UpdateSourceLocationRequest {
	s.SourceLocationName = &v
	return s
}

type UpdateSourceLocationResponseBody struct {
	// **Request ID**
	//
	// example:
	//
	// xxx-xxxx-xxxxx-xxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The source location information.
	SourceLocation *ChannelAssemblySourceLocation `json:"SourceLocation,omitempty" xml:"SourceLocation,omitempty"`
}

func (s UpdateSourceLocationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSourceLocationResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSourceLocationResponseBody) SetRequestId(v string) *UpdateSourceLocationResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSourceLocationResponseBody) SetSourceLocation(v *ChannelAssemblySourceLocation) *UpdateSourceLocationResponseBody {
	s.SourceLocation = v
	return s
}

type UpdateSourceLocationResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateSourceLocationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateSourceLocationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSourceLocationResponse) GoString() string {
	return s.String()
}

func (s *UpdateSourceLocationResponse) SetHeaders(v map[string]*string) *UpdateSourceLocationResponse {
	s.Headers = v
	return s
}

func (s *UpdateSourceLocationResponse) SetStatusCode(v int32) *UpdateSourceLocationResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSourceLocationResponse) SetBody(v *UpdateSourceLocationResponseBody) *UpdateSourceLocationResponse {
	s.Body = v
	return s
}

type UpdateTemplateRequest struct {
	// example:
	//
	// 参见模板Config文档
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// The URL of the template thumbnail.
	//
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg
	CoverUrl *string `json:"CoverUrl,omitempty" xml:"CoverUrl,omitempty"`
	// The name of the online editing template.
	//
	// example:
	//
	// 视频添加水印模板
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the preview video.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	PreviewMedia *string `json:"PreviewMedia,omitempty" xml:"PreviewMedia,omitempty"`
	// The IDs of the materials associated with the template for use by the regular template editor.
	//
	// example:
	//
	// {"video":["******c04f1d4a06996144cc1a******","******cb7db64841b159b4f2ea******"],"audio":["******c04f1d4a06996144cc1a******"],"image":["******c04f1d4a06996144cc1a******"]}
	RelatedMediaids *string `json:"RelatedMediaids,omitempty" xml:"RelatedMediaids,omitempty"`
	// The source from which the template is modified. Default value: OpenAPI. Valid values:
	//
	// 	- AliyunConsole
	//
	// 	- OpenAPI
	//
	// 	- WebSDK
	//
	// example:
	//
	// OpenAPI
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The template state. Valid values:
	//
	// 	- Available: The template is available.
	//
	// 	- Created: The template is created but not ready for use.
	//
	// 	- Uploading: The video is being uploaded.
	//
	// 	- Processing: The advanced template is being processed.
	//
	// 	- UploadFailed: Failed to upload the video.
	//
	// 	- ProcessFailed: Failed to process the advanced template.
	//
	// >  After an advanced template is created, it enters the Processing state. In this case, the template is unavailable. The template can be used only when it is in the Available state. The time required for template processing varies based on the size of the template file. Generally, it ranges from 10 seconds to 5 minutes.
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the online editing template. You can obtain the template ID in the [Intelligent Media Services (IMS) console](https://ice.console.aliyun.com/production/template/list/common) or the response parameters of the [AddTemplate](https://help.aliyun.com/document_detail/441161.html) operation.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s UpdateTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateRequest) GoString() string {
	return s.String()
}

func (s *UpdateTemplateRequest) SetConfig(v string) *UpdateTemplateRequest {
	s.Config = &v
	return s
}

func (s *UpdateTemplateRequest) SetCoverUrl(v string) *UpdateTemplateRequest {
	s.CoverUrl = &v
	return s
}

func (s *UpdateTemplateRequest) SetName(v string) *UpdateTemplateRequest {
	s.Name = &v
	return s
}

func (s *UpdateTemplateRequest) SetPreviewMedia(v string) *UpdateTemplateRequest {
	s.PreviewMedia = &v
	return s
}

func (s *UpdateTemplateRequest) SetRelatedMediaids(v string) *UpdateTemplateRequest {
	s.RelatedMediaids = &v
	return s
}

func (s *UpdateTemplateRequest) SetSource(v string) *UpdateTemplateRequest {
	s.Source = &v
	return s
}

func (s *UpdateTemplateRequest) SetStatus(v string) *UpdateTemplateRequest {
	s.Status = &v
	return s
}

func (s *UpdateTemplateRequest) SetTemplateId(v string) *UpdateTemplateRequest {
	s.TemplateId = &v
	return s
}

type UpdateTemplateResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponseBody) SetRequestId(v string) *UpdateTemplateResponseBody {
	s.RequestId = &v
	return s
}

type UpdateTemplateResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponse) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponse) SetHeaders(v map[string]*string) *UpdateTemplateResponse {
	s.Headers = v
	return s
}

func (s *UpdateTemplateResponse) SetStatusCode(v int32) *UpdateTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateTemplateResponse) SetBody(v *UpdateTemplateResponseBody) *UpdateTemplateResponse {
	s.Body = v
	return s
}

type UploadMediaByURLRequest struct {
	// The application ID.
	//
	// example:
	//
	// app-1000000
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The entity ID. You can call the CreateEntity operation to create an entity and specify a dynamic metadata structure.
	//
	// example:
	//
	// d67281da3c8743b8823ad12976187***
	EntityId *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	// The metadata of the media file that you want to upload. The value must be a JSON string.
	//
	// 	- This parameter takes effect only if its value matches a URL that is specified in UploadURLs.
	//
	// 	- You must convert the JSON-formatted data, such as [UploadMetadata, UploadMetadata,…], into a JSON string.
	//
	// 	- For more information, see the "UploadMetadata" section of this topic.
	//
	// example:
	//
	// [{"SourceURL":"https://example.aliyundoc.com/video01.mp4","Title":"urlUploadTest"}]
	MediaMetaData *string `json:"MediaMetaData,omitempty" xml:"MediaMetaData,omitempty"`
	// The postprocessing configurations. You can specify this parameter if Type is set to video or audio.
	//
	// Set ProcessType to Workflow.
	//
	// example:
	//
	// {"ProcessType": "Workflow","ProcessID":"b72a06c6beeb4dcdb898feef067b1***"}
	PostProcessConfig *string `json:"PostProcessConfig,omitempty" xml:"PostProcessConfig,omitempty"`
	// The destination storage address.
	//
	// Set StorageType to oss.
	//
	// Set StorageLocation to an address in ApsaraVideo VOD. You cannot set this field to an OSS URL.
	//
	// example:
	//
	// {"StorageType":"oss","StorageLocation":"outin-***.oss-cn-shanghai.aliyuncs.com"}
	UploadTargetConfig *string `json:"UploadTargetConfig,omitempty" xml:"UploadTargetConfig,omitempty"`
	// The URL of the source file.
	//
	// 	- The URL must contain a file name extension, such as mp4 in `https://****.mp4`.
	//
	//     	- If the URL does not contain a file name extension, you can specify one by setting `FileExtension` in `UploadMetadata`.
	//
	//     	- If the URL contains a file name extension and `FileExtension` is also specified, the value of `FileExtension` prevails.
	//
	// 	- URL encoding is required. Separate multiple URLs with commas (,). You can specify a maximum of 20 URLs.
	//
	// 	- Special characters may cause upload failures. Therefore, you must encode URLs before you separate them with commas (,).
	//
	// example:
	//
	// https://diffurl.mp4
	UploadURLs *string `json:"UploadURLs,omitempty" xml:"UploadURLs,omitempty"`
	// The user data. The value must be a JSON string. You can configure settings such as message callbacks.
	//
	// example:
	//
	// {"MessageCallback":{"CallbackURL":"http://example.aliyundoc.com"},"Extend":{"localId":"xxx","test":"www"}}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s UploadMediaByURLRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadMediaByURLRequest) GoString() string {
	return s.String()
}

func (s *UploadMediaByURLRequest) SetAppId(v string) *UploadMediaByURLRequest {
	s.AppId = &v
	return s
}

func (s *UploadMediaByURLRequest) SetEntityId(v string) *UploadMediaByURLRequest {
	s.EntityId = &v
	return s
}

func (s *UploadMediaByURLRequest) SetMediaMetaData(v string) *UploadMediaByURLRequest {
	s.MediaMetaData = &v
	return s
}

func (s *UploadMediaByURLRequest) SetPostProcessConfig(v string) *UploadMediaByURLRequest {
	s.PostProcessConfig = &v
	return s
}

func (s *UploadMediaByURLRequest) SetUploadTargetConfig(v string) *UploadMediaByURLRequest {
	s.UploadTargetConfig = &v
	return s
}

func (s *UploadMediaByURLRequest) SetUploadURLs(v string) *UploadMediaByURLRequest {
	s.UploadURLs = &v
	return s
}

func (s *UploadMediaByURLRequest) SetUserData(v string) *UploadMediaByURLRequest {
	s.UserData = &v
	return s
}

type UploadMediaByURLResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ****83B7-7F87-4792-BFE9-63CD2137****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about upload jobs.
	UploadJobs []*UploadMediaByURLResponseBodyUploadJobs `json:"UploadJobs,omitempty" xml:"UploadJobs,omitempty" type:"Repeated"`
}

func (s UploadMediaByURLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadMediaByURLResponseBody) GoString() string {
	return s.String()
}

func (s *UploadMediaByURLResponseBody) SetRequestId(v string) *UploadMediaByURLResponseBody {
	s.RequestId = &v
	return s
}

func (s *UploadMediaByURLResponseBody) SetUploadJobs(v []*UploadMediaByURLResponseBodyUploadJobs) *UploadMediaByURLResponseBody {
	s.UploadJobs = v
	return s
}

type UploadMediaByURLResponseBodyUploadJobs struct {
	// The ID of the upload job.
	//
	// example:
	//
	// 20ce1e05dba64576b96e9683879f0***
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// f476988629f54a7b8a4ba90d1a6c7***
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The URL of the source file that is uploaded in the upload job.
	//
	// example:
	//
	// http://example****.mp4
	SourceURL *string `json:"SourceURL,omitempty" xml:"SourceURL,omitempty"`
}

func (s UploadMediaByURLResponseBodyUploadJobs) String() string {
	return tea.Prettify(s)
}

func (s UploadMediaByURLResponseBodyUploadJobs) GoString() string {
	return s.String()
}

func (s *UploadMediaByURLResponseBodyUploadJobs) SetJobId(v string) *UploadMediaByURLResponseBodyUploadJobs {
	s.JobId = &v
	return s
}

func (s *UploadMediaByURLResponseBodyUploadJobs) SetMediaId(v string) *UploadMediaByURLResponseBodyUploadJobs {
	s.MediaId = &v
	return s
}

func (s *UploadMediaByURLResponseBodyUploadJobs) SetSourceURL(v string) *UploadMediaByURLResponseBodyUploadJobs {
	s.SourceURL = &v
	return s
}

type UploadMediaByURLResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UploadMediaByURLResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UploadMediaByURLResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadMediaByURLResponse) GoString() string {
	return s.String()
}

func (s *UploadMediaByURLResponse) SetHeaders(v map[string]*string) *UploadMediaByURLResponse {
	s.Headers = v
	return s
}

func (s *UploadMediaByURLResponse) SetStatusCode(v int32) *UploadMediaByURLResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadMediaByURLResponse) SetBody(v *UploadMediaByURLResponseBody) *UploadMediaByURLResponse {
	s.Body = v
	return s
}

type UploadStreamByURLRequest struct {
	// The quality of the media stream. Valid values:
	//
	// 	- FD: low definition.
	//
	// 	- LD: standard definition.
	//
	// 	- SD: high definition.
	//
	// 	- HD: ultra-high definition.
	//
	// 	- OD: original quality.
	//
	// 	- 2K: 2K resolution.
	//
	// 	- 4K: 4K resolution.
	//
	// 	- SQ: standard sound quality.
	//
	// 	- HQ: high sound quality.
	//
	// example:
	//
	// HD
	Definition *string `json:"Definition,omitempty" xml:"Definition,omitempty"`
	// The file name extension of the media stream.
	//
	// example:
	//
	// mp4
	FileExtension *string `json:"FileExtension,omitempty" xml:"FileExtension,omitempty"`
	// The high dynamic range (HDR) format of the transcoded stream. Valid values:
	//
	// 	- HDR
	//
	// 	- HDR10
	//
	// 	- HLG
	//
	// 	- DolbyVision
	//
	// 	- HDRVivid
	//
	// 	- SDR+
	//
	// >
	//
	// 	- The value is not case-sensitive,
	//
	// 	- You can leave this parameter empty for non-HDR streams.
	//
	// example:
	//
	// HDR10
	HDRType *string `json:"HDRType,omitempty" xml:"HDRType,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// 411bed50018971edb60b0764a0ec6***
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The URL of the transcoded stream file.
	//
	// If the URL of the transcoded stream requires authentication, you must specify the authentication parameters in the stream URL and make sure that the URL can be accessed over the Internet.
	//
	// example:
	//
	// https://example.com/sample-stream.mp4
	StreamURL *string `json:"StreamURL,omitempty" xml:"StreamURL,omitempty"`
	// The user data.
	//
	// example:
	//
	// {"MessageCallback":{"CallbackURL":"http://test.test.com"}, "Extend":{"localId":"xxx","test":"www"}}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s UploadStreamByURLRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadStreamByURLRequest) GoString() string {
	return s.String()
}

func (s *UploadStreamByURLRequest) SetDefinition(v string) *UploadStreamByURLRequest {
	s.Definition = &v
	return s
}

func (s *UploadStreamByURLRequest) SetFileExtension(v string) *UploadStreamByURLRequest {
	s.FileExtension = &v
	return s
}

func (s *UploadStreamByURLRequest) SetHDRType(v string) *UploadStreamByURLRequest {
	s.HDRType = &v
	return s
}

func (s *UploadStreamByURLRequest) SetMediaId(v string) *UploadStreamByURLRequest {
	s.MediaId = &v
	return s
}

func (s *UploadStreamByURLRequest) SetStreamURL(v string) *UploadStreamByURLRequest {
	s.StreamURL = &v
	return s
}

func (s *UploadStreamByURLRequest) SetUserData(v string) *UploadStreamByURLRequest {
	s.UserData = &v
	return s
}

type UploadStreamByURLResponseBody struct {
	// The OSS URL of the file.
	//
	// example:
	//
	// http://outin-***.oss-cn-shanghai.aliyuncs.com/stream/48555e8b-181dd5a8c07/48555e8b-181dd5a8c07.mp4
	FileURL *string `json:"FileURL,omitempty" xml:"FileURL,omitempty"`
	// The ID of the upload job.
	//
	// example:
	//
	// ****cdb3e74639973036bc84****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The ID of the media asset.
	//
	// example:
	//
	// 411bed50018971edb60b0764a0ec6***
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ******89-C21D-4B78-AE24-3788B8******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The URL of the source file that is uploaded in the upload job.
	//
	// example:
	//
	// https://example.com/sample-stream.mp4
	SourceURL *string `json:"SourceURL,omitempty" xml:"SourceURL,omitempty"`
}

func (s UploadStreamByURLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadStreamByURLResponseBody) GoString() string {
	return s.String()
}

func (s *UploadStreamByURLResponseBody) SetFileURL(v string) *UploadStreamByURLResponseBody {
	s.FileURL = &v
	return s
}

func (s *UploadStreamByURLResponseBody) SetJobId(v string) *UploadStreamByURLResponseBody {
	s.JobId = &v
	return s
}

func (s *UploadStreamByURLResponseBody) SetMediaId(v string) *UploadStreamByURLResponseBody {
	s.MediaId = &v
	return s
}

func (s *UploadStreamByURLResponseBody) SetRequestId(v string) *UploadStreamByURLResponseBody {
	s.RequestId = &v
	return s
}

func (s *UploadStreamByURLResponseBody) SetSourceURL(v string) *UploadStreamByURLResponseBody {
	s.SourceURL = &v
	return s
}

type UploadStreamByURLResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UploadStreamByURLResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UploadStreamByURLResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadStreamByURLResponse) GoString() string {
	return s.String()
}

func (s *UploadStreamByURLResponse) SetHeaders(v map[string]*string) *UploadStreamByURLResponse {
	s.Headers = v
	return s
}

func (s *UploadStreamByURLResponse) SetStatusCode(v int32) *UploadStreamByURLResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadStreamByURLResponse) SetBody(v *UploadStreamByURLResponseBody) *UploadStreamByURLResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.SignatureAlgorithm = tea.String("v2")
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"ap-northeast-1":              tea.String("ice.aliyuncs.com"),
		"ap-northeast-2-pop":          tea.String("ice.aliyuncs.com"),
		"ap-south-1":                  tea.String("ice.aliyuncs.com"),
		"ap-southeast-1":              tea.String("ice.aliyuncs.com"),
		"ap-southeast-2":              tea.String("ice.aliyuncs.com"),
		"ap-southeast-3":              tea.String("ice.aliyuncs.com"),
		"ap-southeast-5":              tea.String("ice.aliyuncs.com"),
		"cn-beijing":                  tea.String("ice.aliyuncs.com"),
		"cn-beijing-finance-1":        tea.String("ice.aliyuncs.com"),
		"cn-beijing-finance-pop":      tea.String("ice.aliyuncs.com"),
		"cn-beijing-gov-1":            tea.String("ice.aliyuncs.com"),
		"cn-beijing-nu16-b01":         tea.String("ice.aliyuncs.com"),
		"cn-chengdu":                  tea.String("ice.aliyuncs.com"),
		"cn-edge-1":                   tea.String("ice.aliyuncs.com"),
		"cn-fujian":                   tea.String("ice.aliyuncs.com"),
		"cn-haidian-cm12-c01":         tea.String("ice.aliyuncs.com"),
		"cn-hangzhou":                 tea.String("ice.aliyuncs.com"),
		"cn-hangzhou-bj-b01":          tea.String("ice.aliyuncs.com"),
		"cn-hangzhou-finance":         tea.String("ice.aliyuncs.com"),
		"cn-hangzhou-internal-prod-1": tea.String("ice.aliyuncs.com"),
		"cn-hangzhou-internal-test-1": tea.String("ice.aliyuncs.com"),
		"cn-hangzhou-internal-test-2": tea.String("ice.aliyuncs.com"),
		"cn-hangzhou-internal-test-3": tea.String("ice.aliyuncs.com"),
		"cn-hangzhou-test-306":        tea.String("ice.aliyuncs.com"),
		"cn-hongkong":                 tea.String("ice.aliyuncs.com"),
		"cn-hongkong-finance-pop":     tea.String("ice.aliyuncs.com"),
		"cn-huhehaote":                tea.String("ice.aliyuncs.com"),
		"cn-huhehaote-nebula-1":       tea.String("ice.aliyuncs.com"),
		"cn-north-2-gov-1":            tea.String("ice.aliyuncs.com"),
		"cn-qingdao":                  tea.String("ice.aliyuncs.com"),
		"cn-qingdao-nebula":           tea.String("ice.aliyuncs.com"),
		"cn-shanghai-et15-b01":        tea.String("ice.aliyuncs.com"),
		"cn-shanghai-et2-b01":         tea.String("ice.aliyuncs.com"),
		"cn-shanghai-finance-1":       tea.String("ice.aliyuncs.com"),
		"cn-shanghai-inner":           tea.String("ice.aliyuncs.com"),
		"cn-shanghai-internal-test-1": tea.String("ice.aliyuncs.com"),
		"cn-shenzhen":                 tea.String("ice.aliyuncs.com"),
		"cn-shenzhen-finance-1":       tea.String("ice.aliyuncs.com"),
		"cn-shenzhen-inner":           tea.String("ice.aliyuncs.com"),
		"cn-shenzhen-st4-d01":         tea.String("ice.aliyuncs.com"),
		"cn-shenzhen-su18-b01":        tea.String("ice.aliyuncs.com"),
		"cn-wuhan":                    tea.String("ice.aliyuncs.com"),
		"cn-wulanchabu":               tea.String("ice.aliyuncs.com"),
		"cn-yushanfang":               tea.String("ice.aliyuncs.com"),
		"cn-zhangbei":                 tea.String("ice.aliyuncs.com"),
		"cn-zhangbei-na61-b01":        tea.String("ice.aliyuncs.com"),
		"cn-zhangjiakou":              tea.String("ice.aliyuncs.com"),
		"cn-zhangjiakou-na62-a01":     tea.String("ice.aliyuncs.com"),
		"cn-zhengzhou-nebula-1":       tea.String("ice.aliyuncs.com"),
		"eu-central-1":                tea.String("ice.aliyuncs.com"),
		"eu-west-1":                   tea.String("ice.aliyuncs.com"),
		"eu-west-1-oxs":               tea.String("ice.aliyuncs.com"),
		"me-east-1":                   tea.String("ice.aliyuncs.com"),
		"rus-west-1-pop":              tea.String("ice.aliyuncs.com"),
		"us-east-1":                   tea.String("ice.aliyuncs.com"),
		"us-west-1":                   tea.String("ice.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("ice"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds an ad insertion configuration.
//
// @param request - AddAdInsertionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddAdInsertionResponse
func (client *Client) AddAdInsertionWithOptions(request *AddAdInsertionRequest, runtime *util.RuntimeOptions) (_result *AddAdInsertionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdMarkerPassthrough)) {
		body["AdMarkerPassthrough"] = request.AdMarkerPassthrough
	}

	if !tea.BoolValue(util.IsUnset(request.AdsUrl)) {
		body["AdsUrl"] = request.AdsUrl
	}

	if !tea.BoolValue(util.IsUnset(request.CdnAdSegmentUrlPrefix)) {
		body["CdnAdSegmentUrlPrefix"] = request.CdnAdSegmentUrlPrefix
	}

	if !tea.BoolValue(util.IsUnset(request.CdnContentSegmentUrlPrefix)) {
		body["CdnContentSegmentUrlPrefix"] = request.CdnContentSegmentUrlPrefix
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		body["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigAliases)) {
		body["ConfigAliases"] = request.ConfigAliases
	}

	if !tea.BoolValue(util.IsUnset(request.ContentUrlPrefix)) {
		body["ContentUrlPrefix"] = request.ContentUrlPrefix
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PersonalizationThreshold)) {
		body["PersonalizationThreshold"] = request.PersonalizationThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.SlateAdUrl)) {
		body["SlateAdUrl"] = request.SlateAdUrl
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddAdInsertion"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddAdInsertionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds an ad insertion configuration.
//
// @param request - AddAdInsertionRequest
//
// @return AddAdInsertionResponse
func (client *Client) AddAdInsertion(request *AddAdInsertionRequest) (_result *AddAdInsertionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddAdInsertionResponse{}
	_body, _err := client.AddAdInsertionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a category.
//
// Description:
//
// You can create at most three levels of categories. Each category level can contain a maximum of 100 subcategories.
//
// @param request - AddCategoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddCategoryResponse
func (client *Client) AddCategoryWithOptions(request *AddCategoryRequest, runtime *util.RuntimeOptions) (_result *AddCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CateName)) {
		query["CateName"] = request.CateName
	}

	if !tea.BoolValue(util.IsUnset(request.ParentId)) {
		query["ParentId"] = request.ParentId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddCategory"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddCategoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a category.
//
// Description:
//
// You can create at most three levels of categories. Each category level can contain a maximum of 100 subcategories.
//
// @param request - AddCategoryRequest
//
// @return AddCategoryResponse
func (client *Client) AddCategory(request *AddCategoryRequest) (_result *AddCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCategoryResponse{}
	_body, _err := client.AddCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds one or more materials to an online editing project.
//
// @param request - AddEditingProjectMaterialsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddEditingProjectMaterialsResponse
func (client *Client) AddEditingProjectMaterialsWithOptions(request *AddEditingProjectMaterialsRequest, runtime *util.RuntimeOptions) (_result *AddEditingProjectMaterialsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaterialMaps)) {
		query["MaterialMaps"] = request.MaterialMaps
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddEditingProjectMaterials"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddEditingProjectMaterialsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds one or more materials to an online editing project.
//
// @param request - AddEditingProjectMaterialsRequest
//
// @return AddEditingProjectMaterialsResponse
func (client *Client) AddEditingProjectMaterials(request *AddEditingProjectMaterialsRequest) (_result *AddEditingProjectMaterialsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddEditingProjectMaterialsResponse{}
	_body, _err := client.AddEditingProjectMaterialsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 收藏公共媒资
//
// @param request - AddFavoritePublicMediaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddFavoritePublicMediaResponse
func (client *Client) AddFavoritePublicMediaWithOptions(request *AddFavoritePublicMediaRequest, runtime *util.RuntimeOptions) (_result *AddFavoritePublicMediaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaIds)) {
		query["MediaIds"] = request.MediaIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddFavoritePublicMedia"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddFavoritePublicMediaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 收藏公共媒资
//
// @param request - AddFavoritePublicMediaRequest
//
// @return AddFavoritePublicMediaResponse
func (client *Client) AddFavoritePublicMedia(request *AddFavoritePublicMediaRequest) (_result *AddFavoritePublicMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddFavoritePublicMediaResponse{}
	_body, _err := client.AddFavoritePublicMediaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a source for a MediaConnect flow.
//
// Description:
//
//	  When the specified flow ID is not available, an error code is returned.
//
//		- A flow can have only one source.
//
// ### [](#)Source type
//
//   - RTMP-PUSH: An input that you can push to the returned URL over the RTMP protocol.
//
//   - RTMP-PULL: An input that the MediaConnect flow pulls from the specified server over the RTMP protocol.
//
//   - SRT-Listener: An input that you can push to the returned URL over the SRT protocol.
//
//   - SRT-Caller: An input that the MediaConnect flow pulls from the specified server over the SRT protocol.
//
//   - Flow: An input that uses the output of another upstream flow. You must specify an upstream flow and its output. The output type of the upstream flow must be SRT-Listener or RTMP-PULL. By default, a dedicated line is used when flows are cascaded. This allows for cross-region distribution among multiple flows.
//
// @param request - AddMediaConnectFlowInputRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddMediaConnectFlowInputResponse
func (client *Client) AddMediaConnectFlowInputWithOptions(request *AddMediaConnectFlowInputRequest, runtime *util.RuntimeOptions) (_result *AddMediaConnectFlowInputResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Cidrs)) {
		query["Cidrs"] = request.Cidrs
	}

	if !tea.BoolValue(util.IsUnset(request.FlowId)) {
		query["FlowId"] = request.FlowId
	}

	if !tea.BoolValue(util.IsUnset(request.InputFromUrl)) {
		query["InputFromUrl"] = request.InputFromUrl
	}

	if !tea.BoolValue(util.IsUnset(request.InputName)) {
		query["InputName"] = request.InputName
	}

	if !tea.BoolValue(util.IsUnset(request.InputProtocol)) {
		query["InputProtocol"] = request.InputProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.MaxBitrate)) {
		query["MaxBitrate"] = request.MaxBitrate
	}

	if !tea.BoolValue(util.IsUnset(request.PairFlowId)) {
		query["PairFlowId"] = request.PairFlowId
	}

	if !tea.BoolValue(util.IsUnset(request.PairOutputName)) {
		query["PairOutputName"] = request.PairOutputName
	}

	if !tea.BoolValue(util.IsUnset(request.SrtLatency)) {
		query["SrtLatency"] = request.SrtLatency
	}

	if !tea.BoolValue(util.IsUnset(request.SrtPassphrase)) {
		query["SrtPassphrase"] = request.SrtPassphrase
	}

	if !tea.BoolValue(util.IsUnset(request.SrtPbkeyLen)) {
		query["SrtPbkeyLen"] = request.SrtPbkeyLen
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddMediaConnectFlowInput"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddMediaConnectFlowInputResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a source for a MediaConnect flow.
//
// Description:
//
//	  When the specified flow ID is not available, an error code is returned.
//
//		- A flow can have only one source.
//
// ### [](#)Source type
//
//   - RTMP-PUSH: An input that you can push to the returned URL over the RTMP protocol.
//
//   - RTMP-PULL: An input that the MediaConnect flow pulls from the specified server over the RTMP protocol.
//
//   - SRT-Listener: An input that you can push to the returned URL over the SRT protocol.
//
//   - SRT-Caller: An input that the MediaConnect flow pulls from the specified server over the SRT protocol.
//
//   - Flow: An input that uses the output of another upstream flow. You must specify an upstream flow and its output. The output type of the upstream flow must be SRT-Listener or RTMP-PULL. By default, a dedicated line is used when flows are cascaded. This allows for cross-region distribution among multiple flows.
//
// @param request - AddMediaConnectFlowInputRequest
//
// @return AddMediaConnectFlowInputResponse
func (client *Client) AddMediaConnectFlowInput(request *AddMediaConnectFlowInputRequest) (_result *AddMediaConnectFlowInputResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddMediaConnectFlowInputResponse{}
	_body, _err := client.AddMediaConnectFlowInputWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an output for a MediaConnect flow.
//
// Description:
//
//	  When the specified flow ID is not available, an error code is returned.
//
//		- A flow can have a maximum of four outputs.
//
//		- The output names in the same flow cannot be duplicated.
//
//		- You can set an upper limit on the number of concurrent viewers for each output. If this limit is exceeded, any new playback requests will fail. Each output supports up to five streams.
//
// ### [](#)Output types
//
//   - RTMP-PUSH: An output that the MediaConnect flow pushes to the server you specified over the RTMP protocol.
//
//   - RTMP-PULL: An output that you can pull using the returned streaming URL over the RTMP protocol.
//
//   - SRT-Caller: An output that the MediaConnect flow pushes to the server you specified over the SRT protocol.
//
//   - SRT-Listener: An output that you can pull using the returned streaming URL over the SRT protocol.
//
//   - Flow: An output that is pushed to the source URL of another MediaConnect flow. The source type of the destination flow must be SRT-Listener or RTMP-PUSH. By default, a dedicated line is used when flows are cascaded. This allows for cross-region distribution among multiple flows.
//
// @param request - AddMediaConnectFlowOutputRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddMediaConnectFlowOutputResponse
func (client *Client) AddMediaConnectFlowOutputWithOptions(request *AddMediaConnectFlowOutputRequest, runtime *util.RuntimeOptions) (_result *AddMediaConnectFlowOutputResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Cidrs)) {
		query["Cidrs"] = request.Cidrs
	}

	if !tea.BoolValue(util.IsUnset(request.FlowId)) {
		query["FlowId"] = request.FlowId
	}

	if !tea.BoolValue(util.IsUnset(request.OutputName)) {
		query["OutputName"] = request.OutputName
	}

	if !tea.BoolValue(util.IsUnset(request.OutputProtocol)) {
		query["OutputProtocol"] = request.OutputProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.OutputToUrl)) {
		query["OutputToUrl"] = request.OutputToUrl
	}

	if !tea.BoolValue(util.IsUnset(request.PairFlowId)) {
		query["PairFlowId"] = request.PairFlowId
	}

	if !tea.BoolValue(util.IsUnset(request.PairInputName)) {
		query["PairInputName"] = request.PairInputName
	}

	if !tea.BoolValue(util.IsUnset(request.PlayerLimit)) {
		query["PlayerLimit"] = request.PlayerLimit
	}

	if !tea.BoolValue(util.IsUnset(request.SrtLatency)) {
		query["SrtLatency"] = request.SrtLatency
	}

	if !tea.BoolValue(util.IsUnset(request.SrtPassphrase)) {
		query["SrtPassphrase"] = request.SrtPassphrase
	}

	if !tea.BoolValue(util.IsUnset(request.SrtPbkeyLen)) {
		query["SrtPbkeyLen"] = request.SrtPbkeyLen
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddMediaConnectFlowOutput"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddMediaConnectFlowOutputResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an output for a MediaConnect flow.
//
// Description:
//
//	  When the specified flow ID is not available, an error code is returned.
//
//		- A flow can have a maximum of four outputs.
//
//		- The output names in the same flow cannot be duplicated.
//
//		- You can set an upper limit on the number of concurrent viewers for each output. If this limit is exceeded, any new playback requests will fail. Each output supports up to five streams.
//
// ### [](#)Output types
//
//   - RTMP-PUSH: An output that the MediaConnect flow pushes to the server you specified over the RTMP protocol.
//
//   - RTMP-PULL: An output that you can pull using the returned streaming URL over the RTMP protocol.
//
//   - SRT-Caller: An output that the MediaConnect flow pushes to the server you specified over the SRT protocol.
//
//   - SRT-Listener: An output that you can pull using the returned streaming URL over the SRT protocol.
//
//   - Flow: An output that is pushed to the source URL of another MediaConnect flow. The source type of the destination flow must be SRT-Listener or RTMP-PUSH. By default, a dedicated line is used when flows are cascaded. This allows for cross-region distribution among multiple flows.
//
// @param request - AddMediaConnectFlowOutputRequest
//
// @return AddMediaConnectFlowOutputResponse
func (client *Client) AddMediaConnectFlowOutput(request *AddMediaConnectFlowOutputRequest) (_result *AddMediaConnectFlowOutputResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddMediaConnectFlowOutputResponse{}
	_body, _err := client.AddMediaConnectFlowOutputWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds marks for a media asset.
//
// @param request - AddMediaMarksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddMediaMarksResponse
func (client *Client) AddMediaMarksWithOptions(request *AddMediaMarksRequest, runtime *util.RuntimeOptions) (_result *AddMediaMarksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaMarks)) {
		query["MediaMarks"] = request.MediaMarks
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddMediaMarks"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddMediaMarksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds marks for a media asset.
//
// @param request - AddMediaMarksRequest
//
// @return AddMediaMarksResponse
func (client *Client) AddMediaMarks(request *AddMediaMarksRequest) (_result *AddMediaMarksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddMediaMarksResponse{}
	_body, _err := client.AddMediaMarksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a template.
//
// Description:
//
//	  For more information about how to use a regular template, see [Create and use a regular template](https://help.aliyun.com/document_detail/445399.html).
//
//		- For more information about how to use an advanced template, see [Create and use advanced templates](https://help.aliyun.com/document_detail/445389.html).
//
//		- After an advanced template is created, it enters the Processing state. In this case, the template is unavailable. The template can be used only when it is in the Available state. The time required for template processing varies based on the size of the template file. Generally, it ranges from 10 seconds to 5 minutes.
//
// @param request - AddTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddTemplateResponse
func (client *Client) AddTemplateWithOptions(request *AddTemplateRequest, runtime *util.RuntimeOptions) (_result *AddTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CoverUrl)) {
		query["CoverUrl"] = request.CoverUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PreviewMedia)) {
		query["PreviewMedia"] = request.PreviewMedia
	}

	if !tea.BoolValue(util.IsUnset(request.RelatedMediaids)) {
		query["RelatedMediaids"] = request.RelatedMediaids
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Config)) {
		body["Config"] = request.Config
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a template.
//
// Description:
//
//	  For more information about how to use a regular template, see [Create and use a regular template](https://help.aliyun.com/document_detail/445399.html).
//
//		- For more information about how to use an advanced template, see [Create and use advanced templates](https://help.aliyun.com/document_detail/445389.html).
//
//		- After an advanced template is created, it enters the Processing state. In this case, the template is unavailable. The template can be used only when it is in the Available state. The time required for template processing varies based on the size of the template file. Generally, it ranges from 10 seconds to 5 minutes.
//
// @param request - AddTemplateRequest
//
// @return AddTemplateResponse
func (client *Client) AddTemplate(request *AddTemplateRequest) (_result *AddTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddTemplateResponse{}
	_body, _err := client.AddTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies search index information including index status and configurations.
//
// @param request - AlterSearchIndexRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AlterSearchIndexResponse
func (client *Client) AlterSearchIndexWithOptions(request *AlterSearchIndexRequest, runtime *util.RuntimeOptions) (_result *AlterSearchIndexResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IndexConfig)) {
		query["IndexConfig"] = request.IndexConfig
	}

	if !tea.BoolValue(util.IsUnset(request.IndexStatus)) {
		query["IndexStatus"] = request.IndexStatus
	}

	if !tea.BoolValue(util.IsUnset(request.IndexType)) {
		query["IndexType"] = request.IndexType
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AlterSearchIndex"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AlterSearchIndexResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies search index information including index status and configurations.
//
// @param request - AlterSearchIndexRequest
//
// @return AlterSearchIndexResponse
func (client *Client) AlterSearchIndex(request *AlterSearchIndexRequest) (_result *AlterSearchIndexResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AlterSearchIndexResponse{}
	_body, _err := client.AlterSearchIndexWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Ingests multiple assets for VOD packaging.
//
// @param tmpReq - BatchCreateVodPackagingAssetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchCreateVodPackagingAssetResponse
func (client *Client) BatchCreateVodPackagingAssetWithOptions(tmpReq *BatchCreateVodPackagingAssetRequest, runtime *util.RuntimeOptions) (_result *BatchCreateVodPackagingAssetResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &BatchCreateVodPackagingAssetShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Assets)) {
		request.AssetsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Assets, tea.String("Assets"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AssetsShrink)) {
		query["Assets"] = request.AssetsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchCreateVodPackagingAsset"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchCreateVodPackagingAssetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Ingests multiple assets for VOD packaging.
//
// @param request - BatchCreateVodPackagingAssetRequest
//
// @return BatchCreateVodPackagingAssetResponse
func (client *Client) BatchCreateVodPackagingAsset(request *BatchCreateVodPackagingAssetRequest) (_result *BatchCreateVodPackagingAssetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchCreateVodPackagingAssetResponse{}
	_body, _err := client.BatchCreateVodPackagingAssetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about multiple media assets at a time based on media asset IDs.
//
// @param request - BatchGetMediaInfosRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchGetMediaInfosResponse
func (client *Client) BatchGetMediaInfosWithOptions(request *BatchGetMediaInfosRequest, runtime *util.RuntimeOptions) (_result *BatchGetMediaInfosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdditionType)) {
		query["AdditionType"] = request.AdditionType
	}

	if !tea.BoolValue(util.IsUnset(request.AuthTimeout)) {
		query["AuthTimeout"] = request.AuthTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.MediaIds)) {
		query["MediaIds"] = request.MediaIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchGetMediaInfos"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchGetMediaInfosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about multiple media assets at a time based on media asset IDs.
//
// @param request - BatchGetMediaInfosRequest
//
// @return BatchGetMediaInfosResponse
func (client *Client) BatchGetMediaInfos(request *BatchGetMediaInfosRequest) (_result *BatchGetMediaInfosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchGetMediaInfosResponse{}
	_body, _err := client.BatchGetMediaInfosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Cancels a media fingerprint analysis job.
//
// Description:
//
//	  You can cancel a media fingerprint analysis job only if the job is in the Queuing state.
//
//		- We recommend that you call the **UpdatePipeline*	- operation to set the status of the ApsaraVideo Media Processing (MPS) queue to Paused before you cancel a job. This suspends job scheduling in the MPS queue. After the job is canceled, you must set the status of the MPS queue back to Active so that the other jobs in the MPS queue can be scheduled.
//
// @param request - CancelDNAJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CancelDNAJobResponse
func (client *Client) CancelDNAJobWithOptions(request *CancelDNAJobRequest, runtime *util.RuntimeOptions) (_result *CancelDNAJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelDNAJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelDNAJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Cancels a media fingerprint analysis job.
//
// Description:
//
//	  You can cancel a media fingerprint analysis job only if the job is in the Queuing state.
//
//		- We recommend that you call the **UpdatePipeline*	- operation to set the status of the ApsaraVideo Media Processing (MPS) queue to Paused before you cancel a job. This suspends job scheduling in the MPS queue. After the job is canceled, you must set the status of the MPS queue back to Active so that the other jobs in the MPS queue can be scheduled.
//
// @param request - CancelDNAJobRequest
//
// @return CancelDNAJobResponse
func (client *Client) CancelDNAJob(request *CancelDNAJobRequest) (_result *CancelDNAJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelDNAJobResponse{}
	_body, _err := client.CancelDNAJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 取消收藏公共媒资
//
// @param request - CancelFavoritePublicMediaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CancelFavoritePublicMediaResponse
func (client *Client) CancelFavoritePublicMediaWithOptions(request *CancelFavoritePublicMediaRequest, runtime *util.RuntimeOptions) (_result *CancelFavoritePublicMediaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaIds)) {
		query["MediaIds"] = request.MediaIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelFavoritePublicMedia"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelFavoritePublicMediaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 取消收藏公共媒资
//
// @param request - CancelFavoritePublicMediaRequest
//
// @return CancelFavoritePublicMediaResponse
func (client *Client) CancelFavoritePublicMedia(request *CancelFavoritePublicMediaRequest) (_result *CancelFavoritePublicMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelFavoritePublicMediaResponse{}
	_body, _err := client.CancelFavoritePublicMediaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits manual review results for media assets.
//
// @param request - CreateAuditRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAuditResponse
func (client *Client) CreateAuditWithOptions(request *CreateAuditRequest, runtime *util.RuntimeOptions) (_result *CreateAuditResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuditContent)) {
		query["AuditContent"] = request.AuditContent
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAudit"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAuditResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits manual review results for media assets.
//
// @param request - CreateAuditRequest
//
// @return CreateAuditResponse
func (client *Client) CreateAudit(request *CreateAuditRequest) (_result *CreateAuditResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAuditResponse{}
	_body, _err := client.CreateAuditWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a digital human training job. You can configure the basic information of the digital human and the materials required for the training. Note: This operation is used to initialize the training job. It does not submit the training job. To submit the training job, call the SubmitAvatarTrainingJob operation.
//
// @param request - CreateAvatarTrainingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAvatarTrainingJobResponse
func (client *Client) CreateAvatarTrainingJobWithOptions(request *CreateAvatarTrainingJobRequest, runtime *util.RuntimeOptions) (_result *CreateAvatarTrainingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AvatarDescription)) {
		query["AvatarDescription"] = request.AvatarDescription
	}

	if !tea.BoolValue(util.IsUnset(request.AvatarName)) {
		query["AvatarName"] = request.AvatarName
	}

	if !tea.BoolValue(util.IsUnset(request.AvatarType)) {
		query["AvatarType"] = request.AvatarType
	}

	if !tea.BoolValue(util.IsUnset(request.Portrait)) {
		query["Portrait"] = request.Portrait
	}

	if !tea.BoolValue(util.IsUnset(request.Thumbnail)) {
		query["Thumbnail"] = request.Thumbnail
	}

	if !tea.BoolValue(util.IsUnset(request.Transparent)) {
		query["Transparent"] = request.Transparent
	}

	if !tea.BoolValue(util.IsUnset(request.Video)) {
		query["Video"] = request.Video
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAvatarTrainingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAvatarTrainingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a digital human training job. You can configure the basic information of the digital human and the materials required for the training. Note: This operation is used to initialize the training job. It does not submit the training job. To submit the training job, call the SubmitAvatarTrainingJob operation.
//
// @param request - CreateAvatarTrainingJobRequest
//
// @return CreateAvatarTrainingJobResponse
func (client *Client) CreateAvatarTrainingJob(request *CreateAvatarTrainingJobRequest) (_result *CreateAvatarTrainingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAvatarTrainingJobResponse{}
	_body, _err := client.CreateAvatarTrainingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a channel in MediaWeaver.
//
// @param request - CreateChannelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateChannelResponse
func (client *Client) CreateChannelWithOptions(request *CreateChannelRequest, runtime *util.RuntimeOptions) (_result *CreateChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessPolicy)) {
		query["AccessPolicy"] = request.AccessPolicy
	}

	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["AccessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.ChannelName)) {
		query["ChannelName"] = request.ChannelName
	}

	if !tea.BoolValue(util.IsUnset(request.ChannelTier)) {
		query["ChannelTier"] = request.ChannelTier
	}

	if !tea.BoolValue(util.IsUnset(request.FillerSourceLocationName)) {
		query["FillerSourceLocationName"] = request.FillerSourceLocationName
	}

	if !tea.BoolValue(util.IsUnset(request.FillerSourceName)) {
		query["FillerSourceName"] = request.FillerSourceName
	}

	if !tea.BoolValue(util.IsUnset(request.OutPutConfigList)) {
		query["OutPutConfigList"] = request.OutPutConfigList
	}

	if !tea.BoolValue(util.IsUnset(request.PlaybackMode)) {
		query["PlaybackMode"] = request.PlaybackMode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateChannel"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a channel in MediaWeaver.
//
// @param request - CreateChannelRequest
//
// @return CreateChannelResponse
func (client *Client) CreateChannel(request *CreateChannelRequest) (_result *CreateChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateChannelResponse{}
	_body, _err := client.CreateChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a custom template.
//
// @param request - CreateCustomTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCustomTemplateResponse
func (client *Client) CreateCustomTemplateWithOptions(request *CreateCustomTemplateRequest, runtime *util.RuntimeOptions) (_result *CreateCustomTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Subtype)) {
		query["Subtype"] = request.Subtype
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateConfig)) {
		query["TemplateConfig"] = request.TemplateConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCustomTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCustomTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a custom template.
//
// @param request - CreateCustomTemplateRequest
//
// @return CreateCustomTemplateResponse
func (client *Client) CreateCustomTemplate(request *CreateCustomTemplateRequest) (_result *CreateCustomTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCustomTemplateResponse{}
	_body, _err := client.CreateCustomTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a human voice cloning job. You can configure the basic information of the human voice cloning job.
//
// @param request - CreateCustomizedVoiceJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCustomizedVoiceJobResponse
func (client *Client) CreateCustomizedVoiceJobWithOptions(request *CreateCustomizedVoiceJobRequest, runtime *util.RuntimeOptions) (_result *CreateCustomizedVoiceJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Gender)) {
		query["Gender"] = request.Gender
	}

	if !tea.BoolValue(util.IsUnset(request.Scenario)) {
		query["Scenario"] = request.Scenario
	}

	if !tea.BoolValue(util.IsUnset(request.VoiceDesc)) {
		query["VoiceDesc"] = request.VoiceDesc
	}

	if !tea.BoolValue(util.IsUnset(request.VoiceId)) {
		query["VoiceId"] = request.VoiceId
	}

	if !tea.BoolValue(util.IsUnset(request.VoiceName)) {
		query["VoiceName"] = request.VoiceName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCustomizedVoiceJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCustomizedVoiceJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a human voice cloning job. You can configure the basic information of the human voice cloning job.
//
// @param request - CreateCustomizedVoiceJobRequest
//
// @return CreateCustomizedVoiceJobResponse
func (client *Client) CreateCustomizedVoiceJob(request *CreateCustomizedVoiceJobRequest) (_result *CreateCustomizedVoiceJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCustomizedVoiceJobResponse{}
	_body, _err := client.CreateCustomizedVoiceJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates media fingerprint libraries.
//
// Description:
//
//	You can create up to five media fingerprint libraries within an account. To increase the quota, submit a ticket. You can call the DeleteDNADB operation to delete the fingerprint libraries that you no longer need.
//
// @param request - CreateDNADBRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDNADBResponse
func (client *Client) CreateDNADBWithOptions(request *CreateDNADBRequest, runtime *util.RuntimeOptions) (_result *CreateDNADBResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Model)) {
		query["Model"] = request.Model
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDNADB"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDNADBResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates media fingerprint libraries.
//
// Description:
//
//	You can create up to five media fingerprint libraries within an account. To increase the quota, submit a ticket. You can call the DeleteDNADB operation to delete the fingerprint libraries that you no longer need.
//
// @param request - CreateDNADBRequest
//
// @return CreateDNADBResponse
func (client *Client) CreateDNADB(request *CreateDNADBRequest) (_result *CreateDNADBResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDNADBResponse{}
	_body, _err := client.CreateDNADBWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an online editing project. You can specify configurations such as the title, description, timeline, and thumbnail for the project.
//
// @param request - CreateEditingProjectRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateEditingProjectResponse
func (client *Client) CreateEditingProjectWithOptions(request *CreateEditingProjectRequest, runtime *util.RuntimeOptions) (_result *CreateEditingProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessConfig)) {
		query["BusinessConfig"] = request.BusinessConfig
	}

	if !tea.BoolValue(util.IsUnset(request.ClipsParam)) {
		query["ClipsParam"] = request.ClipsParam
	}

	if !tea.BoolValue(util.IsUnset(request.CoverURL)) {
		query["CoverURL"] = request.CoverURL
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.MaterialMaps)) {
		query["MaterialMaps"] = request.MaterialMaps
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectType)) {
		query["ProjectType"] = request.ProjectType
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateType)) {
		query["TemplateType"] = request.TemplateType
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Timeline)) {
		body["Timeline"] = request.Timeline
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateEditingProject"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateEditingProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an online editing project. You can specify configurations such as the title, description, timeline, and thumbnail for the project.
//
// @param request - CreateEditingProjectRequest
//
// @return CreateEditingProjectResponse
func (client *Client) CreateEditingProject(request *CreateEditingProjectRequest) (_result *CreateEditingProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEditingProjectResponse{}
	_body, _err := client.CreateEditingProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建热词库
//
// @param tmpReq - CreateHotwordLibraryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateHotwordLibraryResponse
func (client *Client) CreateHotwordLibraryWithOptions(tmpReq *CreateHotwordLibraryRequest, runtime *util.RuntimeOptions) (_result *CreateHotwordLibraryResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateHotwordLibraryShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Hotwords)) {
		request.HotwordsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Hotwords, tea.String("Hotwords"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.HotwordsShrink)) {
		query["Hotwords"] = request.HotwordsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.UsageScenario)) {
		query["UsageScenario"] = request.UsageScenario
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateHotwordLibrary"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateHotwordLibraryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建热词库
//
// @param request - CreateHotwordLibraryRequest
//
// @return CreateHotwordLibraryResponse
func (client *Client) CreateHotwordLibrary(request *CreateHotwordLibraryRequest) (_result *CreateHotwordLibraryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateHotwordLibraryResponse{}
	_body, _err := client.CreateHotwordLibraryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a live package channel.
//
// Description:
//
// ## [](#)Usage notes
//
// After you call this operation to create a live package channel, the system will automatically generate the ingest endpoint URL, and username and password required for authentication.
//
// ### [](#)Precautions
//
//   - Channel group names and channel names can contain only letters, digits, underscores (_), and hyphens (-).
//
//   - Only `HLS` is supported.
//
//   - The segment duration must be from 1 to 30 seconds.
//
//   - The number of M3U8 segments must be from 2 to 100.
//
// If the request succeeds, the system will return the details of the newly created channel, including the channel name, creation time, modification time, and ingest endpoint details.
//
// @param request - CreateLivePackageChannelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLivePackageChannelResponse
func (client *Client) CreateLivePackageChannelWithOptions(request *CreateLivePackageChannelRequest, runtime *util.RuntimeOptions) (_result *CreateLivePackageChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelName)) {
		body["ChannelName"] = request.ChannelName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		body["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.Protocol)) {
		body["Protocol"] = request.Protocol
	}

	if !tea.BoolValue(util.IsUnset(request.SegmentCount)) {
		body["SegmentCount"] = request.SegmentCount
	}

	if !tea.BoolValue(util.IsUnset(request.SegmentDuration)) {
		body["SegmentDuration"] = request.SegmentDuration
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLivePackageChannel"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateLivePackageChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a live package channel.
//
// Description:
//
// ## [](#)Usage notes
//
// After you call this operation to create a live package channel, the system will automatically generate the ingest endpoint URL, and username and password required for authentication.
//
// ### [](#)Precautions
//
//   - Channel group names and channel names can contain only letters, digits, underscores (_), and hyphens (-).
//
//   - Only `HLS` is supported.
//
//   - The segment duration must be from 1 to 30 seconds.
//
//   - The number of M3U8 segments must be from 2 to 100.
//
// If the request succeeds, the system will return the details of the newly created channel, including the channel name, creation time, modification time, and ingest endpoint details.
//
// @param request - CreateLivePackageChannelRequest
//
// @return CreateLivePackageChannelResponse
func (client *Client) CreateLivePackageChannel(request *CreateLivePackageChannelRequest) (_result *CreateLivePackageChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLivePackageChannelResponse{}
	_body, _err := client.CreateLivePackageChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a live package channel group with a custom name and description.
//
// Description:
//
// After you create a channel group, the assigned origin domain is returned.
//
// @param request - CreateLivePackageChannelGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLivePackageChannelGroupResponse
func (client *Client) CreateLivePackageChannelGroupWithOptions(request *CreateLivePackageChannelGroupRequest, runtime *util.RuntimeOptions) (_result *CreateLivePackageChannelGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		body["GroupName"] = request.GroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLivePackageChannelGroup"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateLivePackageChannelGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a live package channel group with a custom name and description.
//
// Description:
//
// After you create a channel group, the assigned origin domain is returned.
//
// @param request - CreateLivePackageChannelGroupRequest
//
// @return CreateLivePackageChannelGroupResponse
func (client *Client) CreateLivePackageChannelGroup(request *CreateLivePackageChannelGroupRequest) (_result *CreateLivePackageChannelGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLivePackageChannelGroupResponse{}
	_body, _err := client.CreateLivePackageChannelGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an origin endpoint for a live package channel to deliver live streams in HLS format.
//
// Description:
//
// ## [](#)Usage notes
//
// This API operation is mainly used to configure origin settings, security policies including the IP address blacklist and whitelist and authorization code, and time shifting settings for channels. Before you create an origin endpoint, you must create a live package channel group and channel. After you create the endpoint, the endpoint URL and other configuration details are returned.
//
// @param tmpReq - CreateLivePackageOriginEndpointRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLivePackageOriginEndpointResponse
func (client *Client) CreateLivePackageOriginEndpointWithOptions(tmpReq *CreateLivePackageOriginEndpointRequest, runtime *util.RuntimeOptions) (_result *CreateLivePackageOriginEndpointResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateLivePackageOriginEndpointShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.LivePackagingConfig)) {
		request.LivePackagingConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.LivePackagingConfig, tea.String("LivePackagingConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuthorizationCode)) {
		body["AuthorizationCode"] = request.AuthorizationCode
	}

	if !tea.BoolValue(util.IsUnset(request.ChannelName)) {
		body["ChannelName"] = request.ChannelName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EndpointName)) {
		body["EndpointName"] = request.EndpointName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		body["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.IpBlacklist)) {
		body["IpBlacklist"] = request.IpBlacklist
	}

	if !tea.BoolValue(util.IsUnset(request.IpWhitelist)) {
		body["IpWhitelist"] = request.IpWhitelist
	}

	if !tea.BoolValue(util.IsUnset(request.LivePackagingConfigShrink)) {
		body["LivePackagingConfig"] = request.LivePackagingConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ManifestName)) {
		body["ManifestName"] = request.ManifestName
	}

	if !tea.BoolValue(util.IsUnset(request.Protocol)) {
		body["Protocol"] = request.Protocol
	}

	if !tea.BoolValue(util.IsUnset(request.TimeshiftVision)) {
		body["TimeshiftVision"] = request.TimeshiftVision
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLivePackageOriginEndpoint"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateLivePackageOriginEndpointResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an origin endpoint for a live package channel to deliver live streams in HLS format.
//
// Description:
//
// ## [](#)Usage notes
//
// This API operation is mainly used to configure origin settings, security policies including the IP address blacklist and whitelist and authorization code, and time shifting settings for channels. Before you create an origin endpoint, you must create a live package channel group and channel. After you create the endpoint, the endpoint URL and other configuration details are returned.
//
// @param request - CreateLivePackageOriginEndpointRequest
//
// @return CreateLivePackageOriginEndpointResponse
func (client *Client) CreateLivePackageOriginEndpoint(request *CreateLivePackageOriginEndpointRequest) (_result *CreateLivePackageOriginEndpointResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLivePackageOriginEndpointResponse{}
	_body, _err := client.CreateLivePackageOriginEndpointWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a live stream recording template to submit live stream recording jobs.
//
// Description:
//
// You must specify a recording template for live stream recording. You can configure information such as the format and duration of a recording in a recording template. The recording format can be M3U8, MP4, or FLV.
//
// @param tmpReq - CreateLiveRecordTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLiveRecordTemplateResponse
func (client *Client) CreateLiveRecordTemplateWithOptions(tmpReq *CreateLiveRecordTemplateRequest, runtime *util.RuntimeOptions) (_result *CreateLiveRecordTemplateResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateLiveRecordTemplateShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.RecordFormat)) {
		request.RecordFormatShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RecordFormat, tea.String("RecordFormat"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RecordFormatShrink)) {
		body["RecordFormat"] = request.RecordFormatShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLiveRecordTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateLiveRecordTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a live stream recording template to submit live stream recording jobs.
//
// Description:
//
// You must specify a recording template for live stream recording. You can configure information such as the format and duration of a recording in a recording template. The recording format can be M3U8, MP4, or FLV.
//
// @param request - CreateLiveRecordTemplateRequest
//
// @return CreateLiveRecordTemplateResponse
func (client *Client) CreateLiveRecordTemplate(request *CreateLiveRecordTemplateRequest) (_result *CreateLiveRecordTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLiveRecordTemplateResponse{}
	_body, _err := client.CreateLiveRecordTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Create a live stream snapshot template to facilitate the creation of snapshot jobs.
//
// @param request - CreateLiveSnapshotTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLiveSnapshotTemplateResponse
func (client *Client) CreateLiveSnapshotTemplateWithOptions(request *CreateLiveSnapshotTemplateRequest, runtime *util.RuntimeOptions) (_result *CreateLiveSnapshotTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OverwriteFormat)) {
		body["OverwriteFormat"] = request.OverwriteFormat
	}

	if !tea.BoolValue(util.IsUnset(request.SequenceFormat)) {
		body["SequenceFormat"] = request.SequenceFormat
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		body["TemplateName"] = request.TemplateName
	}

	if !tea.BoolValue(util.IsUnset(request.TimeInterval)) {
		body["TimeInterval"] = request.TimeInterval
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLiveSnapshotTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateLiveSnapshotTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Create a live stream snapshot template to facilitate the creation of snapshot jobs.
//
// @param request - CreateLiveSnapshotTemplateRequest
//
// @return CreateLiveSnapshotTemplateResponse
func (client *Client) CreateLiveSnapshotTemplate(request *CreateLiveSnapshotTemplateRequest) (_result *CreateLiveSnapshotTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLiveSnapshotTemplateResponse{}
	_body, _err := client.CreateLiveSnapshotTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a live stream transcoding template to submit live stream transcoding jobs.
//
// @param tmpReq - CreateLiveTranscodeTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLiveTranscodeTemplateResponse
func (client *Client) CreateLiveTranscodeTemplateWithOptions(tmpReq *CreateLiveTranscodeTemplateRequest, runtime *util.RuntimeOptions) (_result *CreateLiveTranscodeTemplateResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateLiveTranscodeTemplateShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.TemplateConfig)) {
		request.TemplateConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TemplateConfig, tea.String("TemplateConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateConfigShrink)) {
		query["TemplateConfig"] = request.TemplateConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLiveTranscodeTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateLiveTranscodeTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a live stream transcoding template to submit live stream transcoding jobs.
//
// @param request - CreateLiveTranscodeTemplateRequest
//
// @return CreateLiveTranscodeTemplateResponse
func (client *Client) CreateLiveTranscodeTemplate(request *CreateLiveTranscodeTemplateRequest) (_result *CreateLiveTranscodeTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLiveTranscodeTemplateResponse{}
	_body, _err := client.CreateLiveTranscodeTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a MediaConnect flow.
//
// Description:
//
//	  The flow names cannot be duplicated in the same region.
//
//		- Take note of the returned flow ID. You may reference it in other API operations.
//
// @param request - CreateMediaConnectFlowRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMediaConnectFlowResponse
func (client *Client) CreateMediaConnectFlowWithOptions(request *CreateMediaConnectFlowRequest, runtime *util.RuntimeOptions) (_result *CreateMediaConnectFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FlowName)) {
		query["FlowName"] = request.FlowName
	}

	if !tea.BoolValue(util.IsUnset(request.FlowRegion)) {
		query["FlowRegion"] = request.FlowRegion
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMediaConnectFlow"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMediaConnectFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a MediaConnect flow.
//
// Description:
//
//	  The flow names cannot be duplicated in the same region.
//
//		- Take note of the returned flow ID. You may reference it in other API operations.
//
// @param request - CreateMediaConnectFlowRequest
//
// @return CreateMediaConnectFlowResponse
func (client *Client) CreateMediaConnectFlow(request *CreateMediaConnectFlowRequest) (_result *CreateMediaConnectFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMediaConnectFlowResponse{}
	_body, _err := client.CreateMediaConnectFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a MediaLive channel.
//
// Description:
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param tmpReq - CreateMediaLiveChannelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMediaLiveChannelResponse
func (client *Client) CreateMediaLiveChannelWithOptions(tmpReq *CreateMediaLiveChannelRequest, runtime *util.RuntimeOptions) (_result *CreateMediaLiveChannelResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateMediaLiveChannelShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.AudioSettings)) {
		request.AudioSettingsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AudioSettings, tea.String("AudioSettings"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.InputAttachments)) {
		request.InputAttachmentsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InputAttachments, tea.String("InputAttachments"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.OutputGroups)) {
		request.OutputGroupsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.OutputGroups, tea.String("OutputGroups"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.VideoSettings)) {
		request.VideoSettingsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.VideoSettings, tea.String("VideoSettings"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AudioSettingsShrink)) {
		body["AudioSettings"] = request.AudioSettingsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.InputAttachmentsShrink)) {
		body["InputAttachments"] = request.InputAttachmentsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OutputGroupsShrink)) {
		body["OutputGroups"] = request.OutputGroupsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.VideoSettingsShrink)) {
		body["VideoSettings"] = request.VideoSettingsShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMediaLiveChannel"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMediaLiveChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a MediaLive channel.
//
// Description:
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateMediaLiveChannelRequest
//
// @return CreateMediaLiveChannelResponse
func (client *Client) CreateMediaLiveChannel(request *CreateMediaLiveChannelRequest) (_result *CreateMediaLiveChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMediaLiveChannelResponse{}
	_body, _err := client.CreateMediaLiveChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a MediaLive input.
//
// Description:
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param tmpReq - CreateMediaLiveInputRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMediaLiveInputResponse
func (client *Client) CreateMediaLiveInputWithOptions(tmpReq *CreateMediaLiveInputRequest, runtime *util.RuntimeOptions) (_result *CreateMediaLiveInputResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateMediaLiveInputShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InputSettings)) {
		request.InputSettingsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InputSettings, tea.String("InputSettings"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.SecurityGroupIds)) {
		request.SecurityGroupIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SecurityGroupIds, tea.String("SecurityGroupIds"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputSettingsShrink)) {
		body["InputSettings"] = request.InputSettingsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupIdsShrink)) {
		body["SecurityGroupIds"] = request.SecurityGroupIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMediaLiveInput"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMediaLiveInputResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a MediaLive input.
//
// Description:
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateMediaLiveInputRequest
//
// @return CreateMediaLiveInputResponse
func (client *Client) CreateMediaLiveInput(request *CreateMediaLiveInputRequest) (_result *CreateMediaLiveInputResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMediaLiveInputResponse{}
	_body, _err := client.CreateMediaLiveInputWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a security group in MediaLive.
//
// Description:
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param tmpReq - CreateMediaLiveInputSecurityGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMediaLiveInputSecurityGroupResponse
func (client *Client) CreateMediaLiveInputSecurityGroupWithOptions(tmpReq *CreateMediaLiveInputSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *CreateMediaLiveInputSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateMediaLiveInputSecurityGroupShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.WhitelistRules)) {
		request.WhitelistRulesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.WhitelistRules, tea.String("WhitelistRules"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.WhitelistRulesShrink)) {
		body["WhitelistRules"] = request.WhitelistRulesShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMediaLiveInputSecurityGroup"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMediaLiveInputSecurityGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a security group in MediaLive.
//
// Description:
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateMediaLiveInputSecurityGroupRequest
//
// @return CreateMediaLiveInputSecurityGroupResponse
func (client *Client) CreateMediaLiveInputSecurityGroup(request *CreateMediaLiveInputSecurityGroupRequest) (_result *CreateMediaLiveInputSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMediaLiveInputSecurityGroupResponse{}
	_body, _err := client.CreateMediaLiveInputSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an ApsaraVideo Media Processing (MPS) queue.
//
// @param request - CreatePipelineRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreatePipelineResponse
func (client *Client) CreatePipelineWithOptions(request *CreatePipelineRequest, runtime *util.RuntimeOptions) (_result *CreatePipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.Speed)) {
		query["Speed"] = request.Speed
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreatePipeline"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreatePipelineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an ApsaraVideo Media Processing (MPS) queue.
//
// @param request - CreatePipelineRequest
//
// @return CreatePipelineResponse
func (client *Client) CreatePipeline(request *CreatePipelineRequest) (_result *CreatePipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreatePipelineResponse{}
	_body, _err := client.CreatePipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a program in a MediaWeaver channel.
//
// @param request - CreateProgramRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateProgramResponse
func (client *Client) CreateProgramWithOptions(request *CreateProgramRequest, runtime *util.RuntimeOptions) (_result *CreateProgramResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdBreaks)) {
		query["AdBreaks"] = request.AdBreaks
	}

	if !tea.BoolValue(util.IsUnset(request.ChannelName)) {
		query["ChannelName"] = request.ChannelName
	}

	if !tea.BoolValue(util.IsUnset(request.ClipRange)) {
		query["ClipRange"] = request.ClipRange
	}

	if !tea.BoolValue(util.IsUnset(request.ProgramName)) {
		query["ProgramName"] = request.ProgramName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceLocationName)) {
		query["SourceLocationName"] = request.SourceLocationName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceName)) {
		query["SourceName"] = request.SourceName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceType)) {
		query["SourceType"] = request.SourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Transition)) {
		query["Transition"] = request.Transition
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateProgram"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateProgramResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a program in a MediaWeaver channel.
//
// @param request - CreateProgramRequest
//
// @return CreateProgramResponse
func (client *Client) CreateProgram(request *CreateProgramRequest) (_result *CreateProgramResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateProgramResponse{}
	_body, _err := client.CreateProgramWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建自定义实体
//
// @param request - CreateRecognitionEntityRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateRecognitionEntityResponse
func (client *Client) CreateRecognitionEntityWithOptions(request *CreateRecognitionEntityRequest, runtime *util.RuntimeOptions) (_result *CreateRecognitionEntityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Algorithm)) {
		query["Algorithm"] = request.Algorithm
	}

	if !tea.BoolValue(util.IsUnset(request.EntityInfo)) {
		query["EntityInfo"] = request.EntityInfo
	}

	if !tea.BoolValue(util.IsUnset(request.EntityName)) {
		query["EntityName"] = request.EntityName
	}

	if !tea.BoolValue(util.IsUnset(request.LibId)) {
		query["LibId"] = request.LibId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateRecognitionEntity"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateRecognitionEntityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建自定义实体
//
// @param request - CreateRecognitionEntityRequest
//
// @return CreateRecognitionEntityResponse
func (client *Client) CreateRecognitionEntity(request *CreateRecognitionEntityRequest) (_result *CreateRecognitionEntityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRecognitionEntityResponse{}
	_body, _err := client.CreateRecognitionEntityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建自定义库。
//
// @param request - CreateRecognitionLibRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateRecognitionLibResponse
func (client *Client) CreateRecognitionLibWithOptions(request *CreateRecognitionLibRequest, runtime *util.RuntimeOptions) (_result *CreateRecognitionLibResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Algorithm)) {
		query["Algorithm"] = request.Algorithm
	}

	if !tea.BoolValue(util.IsUnset(request.LibDescription)) {
		query["LibDescription"] = request.LibDescription
	}

	if !tea.BoolValue(util.IsUnset(request.LibName)) {
		query["LibName"] = request.LibName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateRecognitionLib"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateRecognitionLibResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建自定义库。
//
// @param request - CreateRecognitionLibRequest
//
// @return CreateRecognitionLibResponse
func (client *Client) CreateRecognitionLib(request *CreateRecognitionLibRequest) (_result *CreateRecognitionLibResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRecognitionLibResponse{}
	_body, _err := client.CreateRecognitionLibWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 注册自定义实体照片
//
// @param request - CreateRecognitionSampleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateRecognitionSampleResponse
func (client *Client) CreateRecognitionSampleWithOptions(request *CreateRecognitionSampleRequest, runtime *util.RuntimeOptions) (_result *CreateRecognitionSampleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Algorithm)) {
		query["Algorithm"] = request.Algorithm
	}

	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		query["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageUrl)) {
		query["ImageUrl"] = request.ImageUrl
	}

	if !tea.BoolValue(util.IsUnset(request.LabelPrompt)) {
		query["LabelPrompt"] = request.LabelPrompt
	}

	if !tea.BoolValue(util.IsUnset(request.LibId)) {
		query["LibId"] = request.LibId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateRecognitionSample"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateRecognitionSampleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 注册自定义实体照片
//
// @param request - CreateRecognitionSampleRequest
//
// @return CreateRecognitionSampleResponse
func (client *Client) CreateRecognitionSample(request *CreateRecognitionSampleRequest) (_result *CreateRecognitionSampleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRecognitionSampleResponse{}
	_body, _err := client.CreateRecognitionSampleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建搜索索引
//
// Description:
//
// The large visual model feature is still in the public preview phase. You can use this feature for free for 1,000 hours of videos.
//
// @param request - CreateSearchIndexRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSearchIndexResponse
func (client *Client) CreateSearchIndexWithOptions(request *CreateSearchIndexRequest, runtime *util.RuntimeOptions) (_result *CreateSearchIndexResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IndexConfig)) {
		query["IndexConfig"] = request.IndexConfig
	}

	if !tea.BoolValue(util.IsUnset(request.IndexStatus)) {
		query["IndexStatus"] = request.IndexStatus
	}

	if !tea.BoolValue(util.IsUnset(request.IndexType)) {
		query["IndexType"] = request.IndexType
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSearchIndex"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSearchIndexResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建搜索索引
//
// Description:
//
// The large visual model feature is still in the public preview phase. You can use this feature for free for 1,000 hours of videos.
//
// @param request - CreateSearchIndexRequest
//
// @return CreateSearchIndexResponse
func (client *Client) CreateSearchIndex(request *CreateSearchIndexRequest) (_result *CreateSearchIndexResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSearchIndexResponse{}
	_body, _err := client.CreateSearchIndexWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a search library to store media assets.
//
// @param request - CreateSearchLibRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSearchLibResponse
func (client *Client) CreateSearchLibWithOptions(request *CreateSearchLibRequest, runtime *util.RuntimeOptions) (_result *CreateSearchLibResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSearchLib"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSearchLibResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a search library to store media assets.
//
// @param request - CreateSearchLibRequest
//
// @return CreateSearchLibResponse
func (client *Client) CreateSearchLib(request *CreateSearchLibRequest) (_result *CreateSearchLibResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSearchLibResponse{}
	_body, _err := client.CreateSearchLibWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a source in MediaWeaver.
//
// @param request - CreateSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSourceResponse
func (client *Client) CreateSourceWithOptions(request *CreateSourceRequest, runtime *util.RuntimeOptions) (_result *CreateSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HttpPackageConfigurations)) {
		query["HttpPackageConfigurations"] = request.HttpPackageConfigurations
	}

	if !tea.BoolValue(util.IsUnset(request.SourceLocationName)) {
		query["SourceLocationName"] = request.SourceLocationName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceName)) {
		query["SourceName"] = request.SourceName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceType)) {
		query["SourceType"] = request.SourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSource"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a source in MediaWeaver.
//
// @param request - CreateSourceRequest
//
// @return CreateSourceResponse
func (client *Client) CreateSource(request *CreateSourceRequest) (_result *CreateSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSourceResponse{}
	_body, _err := client.CreateSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a source location.
//
// @param request - CreateSourceLocationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSourceLocationResponse
func (client *Client) CreateSourceLocationWithOptions(request *CreateSourceLocationRequest, runtime *util.RuntimeOptions) (_result *CreateSourceLocationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BaseUrl)) {
		query["BaseUrl"] = request.BaseUrl
	}

	if !tea.BoolValue(util.IsUnset(request.EnableSegmentDelivery)) {
		query["EnableSegmentDelivery"] = request.EnableSegmentDelivery
	}

	if !tea.BoolValue(util.IsUnset(request.SegmentDeliveryUrl)) {
		query["SegmentDeliveryUrl"] = request.SegmentDeliveryUrl
	}

	if !tea.BoolValue(util.IsUnset(request.SourceLocationName)) {
		query["SourceLocationName"] = request.SourceLocationName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSourceLocation"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSourceLocationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a source location.
//
// @param request - CreateSourceLocationRequest
//
// @return CreateSourceLocationResponse
func (client *Client) CreateSourceLocation(request *CreateSourceLocationRequest) (_result *CreateSourceLocationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSourceLocationResponse{}
	_body, _err := client.CreateSourceLocationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains the upload URL and credential of a media asset and creates information about the media asset.
//
// Description:
//
//	  You can call this operation to obtain the upload URLs and credentials of audio and video files. You can also call this operation to obtain the upload URLs and credentials of images and auxiliary media assets.
//
//		- Obtaining an upload URL and credential is essential for Intelligent Media Services (IMS) and is required in each upload operation.
//
//		- If the video upload credential expires, you can call the RefreshUploadMedia operation to obtain a new upload credential. The default validity period of a video upload credential is 3,000 seconds.
//
//		- After you upload a media asset, you can configure a callback to receive upload event notifications or call the GetMediaInfo operation to determine whether the media asset is uploaded based on the returned status.
//
//		- The MediaId parameter returned by this operation can be used for media asset lifecycle management or media processing.
//
//		- You can call this operation to upload media assets only to ApsaraVideo VOD, but not to your own Object Storage Service (OSS) buckets. To upload a media asset to your own OSS bucket, you can upload the file to your OSS bucket by using [OSS SDK](https://help.aliyun.com/document_detail/32006.html), and then call the [RegisterMediaInfo](https://help.aliyun.com/document_detail/441152.html) operation to register the file in the OSS bucket with the media asset library.
//
//		- This operation is available only in the China (Shanghai), China (Beijing), and China (Shenzhen) regions.
//
// @param request - CreateUploadMediaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateUploadMediaResponse
func (client *Client) CreateUploadMediaWithOptions(request *CreateUploadMediaRequest, runtime *util.RuntimeOptions) (_result *CreateUploadMediaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		query["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.FileInfo)) {
		query["FileInfo"] = request.FileInfo
	}

	if !tea.BoolValue(util.IsUnset(request.MediaMetaData)) {
		query["MediaMetaData"] = request.MediaMetaData
	}

	if !tea.BoolValue(util.IsUnset(request.PostProcessConfig)) {
		query["PostProcessConfig"] = request.PostProcessConfig
	}

	if !tea.BoolValue(util.IsUnset(request.UploadTargetConfig)) {
		query["UploadTargetConfig"] = request.UploadTargetConfig
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateUploadMedia"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateUploadMediaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains the upload URL and credential of a media asset and creates information about the media asset.
//
// Description:
//
//	  You can call this operation to obtain the upload URLs and credentials of audio and video files. You can also call this operation to obtain the upload URLs and credentials of images and auxiliary media assets.
//
//		- Obtaining an upload URL and credential is essential for Intelligent Media Services (IMS) and is required in each upload operation.
//
//		- If the video upload credential expires, you can call the RefreshUploadMedia operation to obtain a new upload credential. The default validity period of a video upload credential is 3,000 seconds.
//
//		- After you upload a media asset, you can configure a callback to receive upload event notifications or call the GetMediaInfo operation to determine whether the media asset is uploaded based on the returned status.
//
//		- The MediaId parameter returned by this operation can be used for media asset lifecycle management or media processing.
//
//		- You can call this operation to upload media assets only to ApsaraVideo VOD, but not to your own Object Storage Service (OSS) buckets. To upload a media asset to your own OSS bucket, you can upload the file to your OSS bucket by using [OSS SDK](https://help.aliyun.com/document_detail/32006.html), and then call the [RegisterMediaInfo](https://help.aliyun.com/document_detail/441152.html) operation to register the file in the OSS bucket with the media asset library.
//
//		- This operation is available only in the China (Shanghai), China (Beijing), and China (Shenzhen) regions.
//
// @param request - CreateUploadMediaRequest
//
// @return CreateUploadMediaResponse
func (client *Client) CreateUploadMedia(request *CreateUploadMediaRequest) (_result *CreateUploadMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateUploadMediaResponse{}
	_body, _err := client.CreateUploadMediaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains the upload URL and credential of a media stream.
//
// Description:
//
//	  You can call this operation to upload only a local media stream. After the media stream is uploaded, it is associated with the specified media asset ID.
//
//		- You can call this operation to upload media streams only to ApsaraVideo VOD, but not to your own Object Storage Service (OSS) buckets. To upload a media stream to your own OSS bucket, you can upload the file to your OSS bucket by using [OSS SDK](https://help.aliyun.com/document_detail/32006.html), and then call the [RegisterMediaStream](https://help.aliyun.com/document_detail/440765.html) operation to associate the media stream with the specified media asset ID.
//
//		- This operation is available only in the China (Shanghai), China (Beijing), and China (Shenzhen) regions.
//
// @param request - CreateUploadStreamRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateUploadStreamResponse
func (client *Client) CreateUploadStreamWithOptions(request *CreateUploadStreamRequest, runtime *util.RuntimeOptions) (_result *CreateUploadStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Definition)) {
		query["Definition"] = request.Definition
	}

	if !tea.BoolValue(util.IsUnset(request.FileExtension)) {
		query["FileExtension"] = request.FileExtension
	}

	if !tea.BoolValue(util.IsUnset(request.HDRType)) {
		query["HDRType"] = request.HDRType
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateUploadStream"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateUploadStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains the upload URL and credential of a media stream.
//
// Description:
//
//	  You can call this operation to upload only a local media stream. After the media stream is uploaded, it is associated with the specified media asset ID.
//
//		- You can call this operation to upload media streams only to ApsaraVideo VOD, but not to your own Object Storage Service (OSS) buckets. To upload a media stream to your own OSS bucket, you can upload the file to your OSS bucket by using [OSS SDK](https://help.aliyun.com/document_detail/32006.html), and then call the [RegisterMediaStream](https://help.aliyun.com/document_detail/440765.html) operation to associate the media stream with the specified media asset ID.
//
//		- This operation is available only in the China (Shanghai), China (Beijing), and China (Shenzhen) regions.
//
// @param request - CreateUploadStreamRequest
//
// @return CreateUploadStreamResponse
func (client *Client) CreateUploadStream(request *CreateUploadStreamRequest) (_result *CreateUploadStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateUploadStreamResponse{}
	_body, _err := client.CreateUploadStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Ingests an asset for VOD packaging.
//
// @param tmpReq - CreateVodPackagingAssetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateVodPackagingAssetResponse
func (client *Client) CreateVodPackagingAssetWithOptions(tmpReq *CreateVodPackagingAssetRequest, runtime *util.RuntimeOptions) (_result *CreateVodPackagingAssetResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateVodPackagingAssetShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Input)) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Input, tea.String("Input"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AssetName)) {
		query["AssetName"] = request.AssetName
	}

	if !tea.BoolValue(util.IsUnset(request.ContentId)) {
		query["ContentId"] = request.ContentId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateVodPackagingAsset"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateVodPackagingAssetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Ingests an asset for VOD packaging.
//
// @param request - CreateVodPackagingAssetRequest
//
// @return CreateVodPackagingAssetResponse
func (client *Client) CreateVodPackagingAsset(request *CreateVodPackagingAssetRequest) (_result *CreateVodPackagingAssetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateVodPackagingAssetResponse{}
	_body, _err := client.CreateVodPackagingAssetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a packaging configuration.
//
// @param tmpReq - CreateVodPackagingConfigurationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateVodPackagingConfigurationResponse
func (client *Client) CreateVodPackagingConfigurationWithOptions(tmpReq *CreateVodPackagingConfigurationRequest, runtime *util.RuntimeOptions) (_result *CreateVodPackagingConfigurationResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateVodPackagingConfigurationShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.PackageConfig)) {
		request.PackageConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.PackageConfig, tea.String("PackageConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigurationName)) {
		query["ConfigurationName"] = request.ConfigurationName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.PackageConfigShrink)) {
		query["PackageConfig"] = request.PackageConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Protocol)) {
		query["Protocol"] = request.Protocol
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateVodPackagingConfiguration"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateVodPackagingConfigurationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a packaging configuration.
//
// @param request - CreateVodPackagingConfigurationRequest
//
// @return CreateVodPackagingConfigurationResponse
func (client *Client) CreateVodPackagingConfiguration(request *CreateVodPackagingConfigurationRequest) (_result *CreateVodPackagingConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateVodPackagingConfigurationResponse{}
	_body, _err := client.CreateVodPackagingConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a packaging group.
//
// @param request - CreateVodPackagingGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateVodPackagingGroupResponse
func (client *Client) CreateVodPackagingGroupWithOptions(request *CreateVodPackagingGroupRequest, runtime *util.RuntimeOptions) (_result *CreateVodPackagingGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateVodPackagingGroup"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateVodPackagingGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a packaging group.
//
// @param request - CreateVodPackagingGroupRequest
//
// @return CreateVodPackagingGroupResponse
func (client *Client) CreateVodPackagingGroup(request *CreateVodPackagingGroupRequest) (_result *CreateVodPackagingGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateVodPackagingGroupResponse{}
	_body, _err := client.CreateVodPackagingGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Decrypts the ciphertext specified by CiphertextBlob in the Key Management Service (KMS) data key.
//
// @param request - DecryptKMSDataKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DecryptKMSDataKeyResponse
func (client *Client) DecryptKMSDataKeyWithOptions(request *DecryptKMSDataKeyRequest, runtime *util.RuntimeOptions) (_result *DecryptKMSDataKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CiphertextBlob)) {
		query["CiphertextBlob"] = request.CiphertextBlob
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DecryptKMSDataKey"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DecryptKMSDataKeyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Decrypts the ciphertext specified by CiphertextBlob in the Key Management Service (KMS) data key.
//
// @param request - DecryptKMSDataKeyRequest
//
// @return DecryptKMSDataKeyResponse
func (client *Client) DecryptKMSDataKey(request *DecryptKMSDataKeyRequest) (_result *DecryptKMSDataKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DecryptKMSDataKeyResponse{}
	_body, _err := client.DecryptKMSDataKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除智能体的对话历史记录。
//
// @param request - DeleteAIAgentDialogueRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAIAgentDialogueResponse
func (client *Client) DeleteAIAgentDialogueWithOptions(request *DeleteAIAgentDialogueRequest, runtime *util.RuntimeOptions) (_result *DeleteAIAgentDialogueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DialogueId)) {
		query["DialogueId"] = request.DialogueId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		query["SessionId"] = request.SessionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAIAgentDialogue"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAIAgentDialogueResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除智能体的对话历史记录。
//
// @param request - DeleteAIAgentDialogueRequest
//
// @return DeleteAIAgentDialogueResponse
func (client *Client) DeleteAIAgentDialogue(request *DeleteAIAgentDialogueRequest) (_result *DeleteAIAgentDialogueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAIAgentDialogueResponse{}
	_body, _err := client.DeleteAIAgentDialogueWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an ad insertion configuration.
//
// @param request - DeleteAdInsertionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAdInsertionResponse
func (client *Client) DeleteAdInsertionWithOptions(request *DeleteAdInsertionRequest, runtime *util.RuntimeOptions) (_result *DeleteAdInsertionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAdInsertion"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAdInsertionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an ad insertion configuration.
//
// @param request - DeleteAdInsertionRequest
//
// @return DeleteAdInsertionResponse
func (client *Client) DeleteAdInsertion(request *DeleteAdInsertionRequest) (_result *DeleteAdInsertionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAdInsertionResponse{}
	_body, _err := client.DeleteAdInsertionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a digital human training job that is in the Init or Fail state.
//
// @param request - DeleteAvatarTrainingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAvatarTrainingJobResponse
func (client *Client) DeleteAvatarTrainingJobWithOptions(request *DeleteAvatarTrainingJobRequest, runtime *util.RuntimeOptions) (_result *DeleteAvatarTrainingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAvatarTrainingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAvatarTrainingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a digital human training job that is in the Init or Fail state.
//
// @param request - DeleteAvatarTrainingJobRequest
//
// @return DeleteAvatarTrainingJobResponse
func (client *Client) DeleteAvatarTrainingJob(request *DeleteAvatarTrainingJobRequest) (_result *DeleteAvatarTrainingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAvatarTrainingJobResponse{}
	_body, _err := client.DeleteAvatarTrainingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a media asset category.
//
// Description:
//
// This operation also deletes the subcategories, including the level-2 and level-3 categories, of the category.
//
// @param request - DeleteCategoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCategoryResponse
func (client *Client) DeleteCategoryWithOptions(request *DeleteCategoryRequest, runtime *util.RuntimeOptions) (_result *DeleteCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CateId)) {
		query["CateId"] = request.CateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCategory"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCategoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a media asset category.
//
// Description:
//
// This operation also deletes the subcategories, including the level-2 and level-3 categories, of the category.
//
// @param request - DeleteCategoryRequest
//
// @return DeleteCategoryResponse
func (client *Client) DeleteCategory(request *DeleteCategoryRequest) (_result *DeleteCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCategoryResponse{}
	_body, _err := client.DeleteCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a channel in MediaWeaver.
//
// @param request - DeleteChannelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteChannelResponse
func (client *Client) DeleteChannelWithOptions(request *DeleteChannelRequest, runtime *util.RuntimeOptions) (_result *DeleteChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelName)) {
		query["ChannelName"] = request.ChannelName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteChannel"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a channel in MediaWeaver.
//
// @param request - DeleteChannelRequest
//
// @return DeleteChannelResponse
func (client *Client) DeleteChannel(request *DeleteChannelRequest) (_result *DeleteChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteChannelResponse{}
	_body, _err := client.DeleteChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a custom template.
//
// @param request - DeleteCustomTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCustomTemplateResponse
func (client *Client) DeleteCustomTemplateWithOptions(request *DeleteCustomTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteCustomTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCustomTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCustomTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a custom template.
//
// @param request - DeleteCustomTemplateRequest
//
// @return DeleteCustomTemplateResponse
func (client *Client) DeleteCustomTemplate(request *DeleteCustomTemplateRequest) (_result *DeleteCustomTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCustomTemplateResponse{}
	_body, _err := client.DeleteCustomTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a human voice cloning job that is not in the Training or Success state.
//
// @param request - DeleteCustomizedVoiceJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCustomizedVoiceJobResponse
func (client *Client) DeleteCustomizedVoiceJobWithOptions(request *DeleteCustomizedVoiceJobRequest, runtime *util.RuntimeOptions) (_result *DeleteCustomizedVoiceJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCustomizedVoiceJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCustomizedVoiceJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a human voice cloning job that is not in the Training or Success state.
//
// @param request - DeleteCustomizedVoiceJobRequest
//
// @return DeleteCustomizedVoiceJobResponse
func (client *Client) DeleteCustomizedVoiceJob(request *DeleteCustomizedVoiceJobRequest) (_result *DeleteCustomizedVoiceJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCustomizedVoiceJobResponse{}
	_body, _err := client.DeleteCustomizedVoiceJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a media fingerprint library.
//
// @param request - DeleteDNADBRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDNADBResponse
func (client *Client) DeleteDNADBWithOptions(request *DeleteDNADBRequest, runtime *util.RuntimeOptions) (_result *DeleteDNADBResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBId)) {
		query["DBId"] = request.DBId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDNADB"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDNADBResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a media fingerprint library.
//
// @param request - DeleteDNADBRequest
//
// @return DeleteDNADBResponse
func (client *Client) DeleteDNADB(request *DeleteDNADBRequest) (_result *DeleteDNADBResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDNADBResponse{}
	_body, _err := client.DeleteDNADBWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes files from a media fingerprint library.
//
// @param request - DeleteDNAFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDNAFilesResponse
func (client *Client) DeleteDNAFilesWithOptions(request *DeleteDNAFilesRequest, runtime *util.RuntimeOptions) (_result *DeleteDNAFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBId)) {
		query["DBId"] = request.DBId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PrimaryKeys)) {
		query["PrimaryKeys"] = request.PrimaryKeys
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDNAFiles"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDNAFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes files from a media fingerprint library.
//
// @param request - DeleteDNAFilesRequest
//
// @return DeleteDNAFilesResponse
func (client *Client) DeleteDNAFiles(request *DeleteDNAFilesRequest) (_result *DeleteDNAFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDNAFilesResponse{}
	_body, _err := client.DeleteDNAFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes one or more materials from an online editing project.
//
// @param request - DeleteEditingProjectMaterialsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteEditingProjectMaterialsResponse
func (client *Client) DeleteEditingProjectMaterialsWithOptions(request *DeleteEditingProjectMaterialsRequest, runtime *util.RuntimeOptions) (_result *DeleteEditingProjectMaterialsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaterialIds)) {
		query["MaterialIds"] = request.MaterialIds
	}

	if !tea.BoolValue(util.IsUnset(request.MaterialType)) {
		query["MaterialType"] = request.MaterialType
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteEditingProjectMaterials"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteEditingProjectMaterialsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes one or more materials from an online editing project.
//
// @param request - DeleteEditingProjectMaterialsRequest
//
// @return DeleteEditingProjectMaterialsResponse
func (client *Client) DeleteEditingProjectMaterials(request *DeleteEditingProjectMaterialsRequest) (_result *DeleteEditingProjectMaterialsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEditingProjectMaterialsResponse{}
	_body, _err := client.DeleteEditingProjectMaterialsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes one or more online editing project.
//
// @param request - DeleteEditingProjectsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteEditingProjectsResponse
func (client *Client) DeleteEditingProjectsWithOptions(request *DeleteEditingProjectsRequest, runtime *util.RuntimeOptions) (_result *DeleteEditingProjectsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectIds)) {
		query["ProjectIds"] = request.ProjectIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteEditingProjects"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteEditingProjectsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes one or more online editing project.
//
// @param request - DeleteEditingProjectsRequest
//
// @return DeleteEditingProjectsResponse
func (client *Client) DeleteEditingProjects(request *DeleteEditingProjectsRequest) (_result *DeleteEditingProjectsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEditingProjectsResponse{}
	_body, _err := client.DeleteEditingProjectsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除热词词库
//
// @param request - DeleteHotwordLibraryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteHotwordLibraryResponse
func (client *Client) DeleteHotwordLibraryWithOptions(request *DeleteHotwordLibraryRequest, runtime *util.RuntimeOptions) (_result *DeleteHotwordLibraryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HotwordLibraryId)) {
		query["HotwordLibraryId"] = request.HotwordLibraryId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteHotwordLibrary"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteHotwordLibraryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除热词词库
//
// @param request - DeleteHotwordLibraryRequest
//
// @return DeleteHotwordLibraryResponse
func (client *Client) DeleteHotwordLibrary(request *DeleteHotwordLibraryRequest) (_result *DeleteHotwordLibraryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteHotwordLibraryResponse{}
	_body, _err := client.DeleteHotwordLibraryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a live package channel by GroupName and ChannelName.
//
// Description:
//
// ## [](#)Usage notes
//
// You need to provide GroupName and ChannelName as parameters to specify exactly which channel to delete. Before you delete a channel, you must delete the origin endpoints associated with the channel.
//
// @param request - DeleteLivePackageChannelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLivePackageChannelResponse
func (client *Client) DeleteLivePackageChannelWithOptions(request *DeleteLivePackageChannelRequest, runtime *util.RuntimeOptions) (_result *DeleteLivePackageChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelName)) {
		query["ChannelName"] = request.ChannelName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLivePackageChannel"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLivePackageChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a live package channel by GroupName and ChannelName.
//
// Description:
//
// ## [](#)Usage notes
//
// You need to provide GroupName and ChannelName as parameters to specify exactly which channel to delete. Before you delete a channel, you must delete the origin endpoints associated with the channel.
//
// @param request - DeleteLivePackageChannelRequest
//
// @return DeleteLivePackageChannelResponse
func (client *Client) DeleteLivePackageChannel(request *DeleteLivePackageChannelRequest) (_result *DeleteLivePackageChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLivePackageChannelResponse{}
	_body, _err := client.DeleteLivePackageChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a live package channel group by name.
//
// Description:
//
// ## [](#)Usage notes
//
// Make sure that no channels are included in the channel group before you delete it.
//
// @param request - DeleteLivePackageChannelGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLivePackageChannelGroupResponse
func (client *Client) DeleteLivePackageChannelGroupWithOptions(request *DeleteLivePackageChannelGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteLivePackageChannelGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLivePackageChannelGroup"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLivePackageChannelGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a live package channel group by name.
//
// Description:
//
// ## [](#)Usage notes
//
// Make sure that no channels are included in the channel group before you delete it.
//
// @param request - DeleteLivePackageChannelGroupRequest
//
// @return DeleteLivePackageChannelGroupResponse
func (client *Client) DeleteLivePackageChannelGroup(request *DeleteLivePackageChannelGroupRequest) (_result *DeleteLivePackageChannelGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLivePackageChannelGroupResponse{}
	_body, _err := client.DeleteLivePackageChannelGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an origin endpoint associated with a live package channel.
//
// Description:
//
// ## [](#)Usage notes
//
// This API operation is used to delete an origin endpoint associated with a live package channel by specifying `GroupName`, `ChannelName`, and `EndpointName`. This operation will permanently delete the relevant configurations. Exercise caution when you perform this operation.
//
// @param request - DeleteLivePackageOriginEndpointRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLivePackageOriginEndpointResponse
func (client *Client) DeleteLivePackageOriginEndpointWithOptions(request *DeleteLivePackageOriginEndpointRequest, runtime *util.RuntimeOptions) (_result *DeleteLivePackageOriginEndpointResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelName)) {
		query["ChannelName"] = request.ChannelName
	}

	if !tea.BoolValue(util.IsUnset(request.EndpointName)) {
		query["EndpointName"] = request.EndpointName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLivePackageOriginEndpoint"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLivePackageOriginEndpointResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an origin endpoint associated with a live package channel.
//
// Description:
//
// ## [](#)Usage notes
//
// This API operation is used to delete an origin endpoint associated with a live package channel by specifying `GroupName`, `ChannelName`, and `EndpointName`. This operation will permanently delete the relevant configurations. Exercise caution when you perform this operation.
//
// @param request - DeleteLivePackageOriginEndpointRequest
//
// @return DeleteLivePackageOriginEndpointResponse
func (client *Client) DeleteLivePackageOriginEndpoint(request *DeleteLivePackageOriginEndpointRequest) (_result *DeleteLivePackageOriginEndpointResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLivePackageOriginEndpointResponse{}
	_body, _err := client.DeleteLivePackageOriginEndpointWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes live stream recording files. You can choose to delete only the recording files or delete both the recording files and the original Object Storage Service (OSS) files.
//
// @param request - DeleteLiveRecordFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveRecordFilesResponse
func (client *Client) DeleteLiveRecordFilesWithOptions(request *DeleteLiveRecordFilesRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveRecordFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RecordIds)) {
		query["RecordIds"] = request.RecordIds
	}

	if !tea.BoolValue(util.IsUnset(request.RemoveFile)) {
		query["RemoveFile"] = request.RemoveFile
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveRecordFiles"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveRecordFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes live stream recording files. You can choose to delete only the recording files or delete both the recording files and the original Object Storage Service (OSS) files.
//
// @param request - DeleteLiveRecordFilesRequest
//
// @return DeleteLiveRecordFilesResponse
func (client *Client) DeleteLiveRecordFiles(request *DeleteLiveRecordFilesRequest) (_result *DeleteLiveRecordFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveRecordFilesResponse{}
	_body, _err := client.DeleteLiveRecordFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a live stream recording template without affecting existing jobs.
//
// @param request - DeleteLiveRecordTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveRecordTemplateResponse
func (client *Client) DeleteLiveRecordTemplateWithOptions(request *DeleteLiveRecordTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveRecordTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveRecordTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveRecordTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a live stream recording template without affecting existing jobs.
//
// @param request - DeleteLiveRecordTemplateRequest
//
// @return DeleteLiveRecordTemplateResponse
func (client *Client) DeleteLiveRecordTemplate(request *DeleteLiveRecordTemplateRequest) (_result *DeleteLiveRecordTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveRecordTemplateResponse{}
	_body, _err := client.DeleteLiveRecordTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes live stream snapshot files. You can choose to delete only the snapshot files or delete both the snapshot files and the original Object Storage Service (OSS) files.
//
// @param tmpReq - DeleteLiveSnapshotFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveSnapshotFilesResponse
func (client *Client) DeleteLiveSnapshotFilesWithOptions(tmpReq *DeleteLiveSnapshotFilesRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveSnapshotFilesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeleteLiveSnapshotFilesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.CreateTimestampList)) {
		request.CreateTimestampListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CreateTimestampList, tea.String("CreateTimestampList"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CreateTimestampListShrink)) {
		query["CreateTimestampList"] = request.CreateTimestampListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DeleteOriginalFile)) {
		query["DeleteOriginalFile"] = request.DeleteOriginalFile
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveSnapshotFiles"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveSnapshotFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes live stream snapshot files. You can choose to delete only the snapshot files or delete both the snapshot files and the original Object Storage Service (OSS) files.
//
// @param request - DeleteLiveSnapshotFilesRequest
//
// @return DeleteLiveSnapshotFilesResponse
func (client *Client) DeleteLiveSnapshotFiles(request *DeleteLiveSnapshotFilesRequest) (_result *DeleteLiveSnapshotFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveSnapshotFilesResponse{}
	_body, _err := client.DeleteLiveSnapshotFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a live stream snapshot template.
//
// @param request - DeleteLiveSnapshotTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveSnapshotTemplateResponse
func (client *Client) DeleteLiveSnapshotTemplateWithOptions(request *DeleteLiveSnapshotTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveSnapshotTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		body["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveSnapshotTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveSnapshotTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a live stream snapshot template.
//
// @param request - DeleteLiveSnapshotTemplateRequest
//
// @return DeleteLiveSnapshotTemplateResponse
func (client *Client) DeleteLiveSnapshotTemplate(request *DeleteLiveSnapshotTemplateRequest) (_result *DeleteLiveSnapshotTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveSnapshotTemplateResponse{}
	_body, _err := client.DeleteLiveSnapshotTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除指定转码任务
//
// @param request - DeleteLiveTranscodeJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveTranscodeJobResponse
func (client *Client) DeleteLiveTranscodeJobWithOptions(request *DeleteLiveTranscodeJobRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveTranscodeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveTranscodeJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveTranscodeJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除指定转码任务
//
// @param request - DeleteLiveTranscodeJobRequest
//
// @return DeleteLiveTranscodeJobResponse
func (client *Client) DeleteLiveTranscodeJob(request *DeleteLiveTranscodeJobRequest) (_result *DeleteLiveTranscodeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveTranscodeJobResponse{}
	_body, _err := client.DeleteLiveTranscodeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a live stream transcoding template.
//
// @param request - DeleteLiveTranscodeTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveTranscodeTemplateResponse
func (client *Client) DeleteLiveTranscodeTemplateWithOptions(request *DeleteLiveTranscodeTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveTranscodeTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveTranscodeTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveTranscodeTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a live stream transcoding template.
//
// @param request - DeleteLiveTranscodeTemplateRequest
//
// @return DeleteLiveTranscodeTemplateResponse
func (client *Client) DeleteLiveTranscodeTemplate(request *DeleteLiveTranscodeTemplateRequest) (_result *DeleteLiveTranscodeTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveTranscodeTemplateResponse{}
	_body, _err := client.DeleteLiveTranscodeTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a MediaConnect flow.
//
// Description:
//
//	  When the specified flow ID is not available, an error code is returned.
//
//		- When a flow is deleted, its source and outputs are also deleted.
//
//		- When a flow is in the online state, it cannot be deleted.
//
// @param request - DeleteMediaConnectFlowRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMediaConnectFlowResponse
func (client *Client) DeleteMediaConnectFlowWithOptions(request *DeleteMediaConnectFlowRequest, runtime *util.RuntimeOptions) (_result *DeleteMediaConnectFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FlowId)) {
		query["FlowId"] = request.FlowId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMediaConnectFlow"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMediaConnectFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a MediaConnect flow.
//
// Description:
//
//	  When the specified flow ID is not available, an error code is returned.
//
//		- When a flow is deleted, its source and outputs are also deleted.
//
//		- When a flow is in the online state, it cannot be deleted.
//
// @param request - DeleteMediaConnectFlowRequest
//
// @return DeleteMediaConnectFlowResponse
func (client *Client) DeleteMediaConnectFlow(request *DeleteMediaConnectFlowRequest) (_result *DeleteMediaConnectFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMediaConnectFlowResponse{}
	_body, _err := client.DeleteMediaConnectFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the source of a MediaConnect flow.
//
// Description:
//
//	  When the specified flow ID is not available, an error code is returned.
//
//		- When a flow is in the online state, its source cannot be deleted.
//
//		- You can delete the source only after all outputs of the flow have been deleted.
//
// @param request - DeleteMediaConnectFlowInputRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMediaConnectFlowInputResponse
func (client *Client) DeleteMediaConnectFlowInputWithOptions(request *DeleteMediaConnectFlowInputRequest, runtime *util.RuntimeOptions) (_result *DeleteMediaConnectFlowInputResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FlowId)) {
		query["FlowId"] = request.FlowId
	}

	if !tea.BoolValue(util.IsUnset(request.InputName)) {
		query["InputName"] = request.InputName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMediaConnectFlowInput"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMediaConnectFlowInputResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the source of a MediaConnect flow.
//
// Description:
//
//	  When the specified flow ID is not available, an error code is returned.
//
//		- When a flow is in the online state, its source cannot be deleted.
//
//		- You can delete the source only after all outputs of the flow have been deleted.
//
// @param request - DeleteMediaConnectFlowInputRequest
//
// @return DeleteMediaConnectFlowInputResponse
func (client *Client) DeleteMediaConnectFlowInput(request *DeleteMediaConnectFlowInputRequest) (_result *DeleteMediaConnectFlowInputResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMediaConnectFlowInputResponse{}
	_body, _err := client.DeleteMediaConnectFlowInputWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an output of a MediaConnect flow.
//
// Description:
//
//	  When the specified flow ID is not available, an error code is returned.
//
//		- When a flow is in the online state, its outputs cannot be deleted.
//
// @param request - DeleteMediaConnectFlowOutputRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMediaConnectFlowOutputResponse
func (client *Client) DeleteMediaConnectFlowOutputWithOptions(request *DeleteMediaConnectFlowOutputRequest, runtime *util.RuntimeOptions) (_result *DeleteMediaConnectFlowOutputResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FlowId)) {
		query["FlowId"] = request.FlowId
	}

	if !tea.BoolValue(util.IsUnset(request.OutputName)) {
		query["OutputName"] = request.OutputName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMediaConnectFlowOutput"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMediaConnectFlowOutputResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an output of a MediaConnect flow.
//
// Description:
//
//	  When the specified flow ID is not available, an error code is returned.
//
//		- When a flow is in the online state, its outputs cannot be deleted.
//
// @param request - DeleteMediaConnectFlowOutputRequest
//
// @return DeleteMediaConnectFlowOutputResponse
func (client *Client) DeleteMediaConnectFlowOutput(request *DeleteMediaConnectFlowOutputRequest) (_result *DeleteMediaConnectFlowOutputResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMediaConnectFlowOutputResponse{}
	_body, _err := client.DeleteMediaConnectFlowOutputWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a specific media asset from a search library.
//
// @param request - DeleteMediaFromSearchLibRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMediaFromSearchLibResponse
func (client *Client) DeleteMediaFromSearchLibWithOptions(request *DeleteMediaFromSearchLibRequest, runtime *util.RuntimeOptions) (_result *DeleteMediaFromSearchLibResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MsgBody)) {
		query["MsgBody"] = request.MsgBody
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMediaFromSearchLib"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMediaFromSearchLibResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a specific media asset from a search library.
//
// @param request - DeleteMediaFromSearchLibRequest
//
// @return DeleteMediaFromSearchLibResponse
func (client *Client) DeleteMediaFromSearchLib(request *DeleteMediaFromSearchLibRequest) (_result *DeleteMediaFromSearchLibResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMediaFromSearchLibResponse{}
	_body, _err := client.DeleteMediaFromSearchLibWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes multiple media assets at a time. You can delete at most 20 media assets at a time. If MediaIds is specified, it is preferentially used. If MediaIds is empty, InputURLs must be specified.
//
// @param request - DeleteMediaInfosRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMediaInfosResponse
func (client *Client) DeleteMediaInfosWithOptions(request *DeleteMediaInfosRequest, runtime *util.RuntimeOptions) (_result *DeleteMediaInfosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeletePhysicalFiles)) {
		query["DeletePhysicalFiles"] = request.DeletePhysicalFiles
	}

	if !tea.BoolValue(util.IsUnset(request.InputURLs)) {
		query["InputURLs"] = request.InputURLs
	}

	if !tea.BoolValue(util.IsUnset(request.MediaIds)) {
		query["MediaIds"] = request.MediaIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMediaInfos"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMediaInfosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes multiple media assets at a time. You can delete at most 20 media assets at a time. If MediaIds is specified, it is preferentially used. If MediaIds is empty, InputURLs must be specified.
//
// @param request - DeleteMediaInfosRequest
//
// @return DeleteMediaInfosResponse
func (client *Client) DeleteMediaInfos(request *DeleteMediaInfosRequest) (_result *DeleteMediaInfosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMediaInfosResponse{}
	_body, _err := client.DeleteMediaInfosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a MediaLive channel.
//
// Description:
//
//	You can only delete a channel that is not running.
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteMediaLiveChannelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMediaLiveChannelResponse
func (client *Client) DeleteMediaLiveChannelWithOptions(request *DeleteMediaLiveChannelRequest, runtime *util.RuntimeOptions) (_result *DeleteMediaLiveChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMediaLiveChannel"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMediaLiveChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a MediaLive channel.
//
// Description:
//
//	You can only delete a channel that is not running.
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteMediaLiveChannelRequest
//
// @return DeleteMediaLiveChannelResponse
func (client *Client) DeleteMediaLiveChannel(request *DeleteMediaLiveChannelRequest) (_result *DeleteMediaLiveChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMediaLiveChannelResponse{}
	_body, _err := client.DeleteMediaLiveChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a MediaLive input.
//
// Description:
//
//	You can delete an input only when it is not associated with a MediaLive channel.
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteMediaLiveInputRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMediaLiveInputResponse
func (client *Client) DeleteMediaLiveInputWithOptions(request *DeleteMediaLiveInputRequest, runtime *util.RuntimeOptions) (_result *DeleteMediaLiveInputResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputId)) {
		body["InputId"] = request.InputId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMediaLiveInput"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMediaLiveInputResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a MediaLive input.
//
// Description:
//
//	You can delete an input only when it is not associated with a MediaLive channel.
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteMediaLiveInputRequest
//
// @return DeleteMediaLiveInputResponse
func (client *Client) DeleteMediaLiveInput(request *DeleteMediaLiveInputRequest) (_result *DeleteMediaLiveInputResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMediaLiveInputResponse{}
	_body, _err := client.DeleteMediaLiveInputWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a security group in MediaLive.
//
// Description:
//
//	You can only delete a security group not associated with an input.
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteMediaLiveInputSecurityGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMediaLiveInputSecurityGroupResponse
func (client *Client) DeleteMediaLiveInputSecurityGroupWithOptions(request *DeleteMediaLiveInputSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteMediaLiveInputSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		body["SecurityGroupId"] = request.SecurityGroupId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMediaLiveInputSecurityGroup"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMediaLiveInputSecurityGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a security group in MediaLive.
//
// Description:
//
//	You can only delete a security group not associated with an input.
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteMediaLiveInputSecurityGroupRequest
//
// @return DeleteMediaLiveInputSecurityGroupResponse
func (client *Client) DeleteMediaLiveInputSecurityGroup(request *DeleteMediaLiveInputSecurityGroupRequest) (_result *DeleteMediaLiveInputSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMediaLiveInputSecurityGroupResponse{}
	_body, _err := client.DeleteMediaLiveInputSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the marks of a media asset.
//
// @param request - DeleteMediaMarksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMediaMarksResponse
func (client *Client) DeleteMediaMarksWithOptions(request *DeleteMediaMarksRequest, runtime *util.RuntimeOptions) (_result *DeleteMediaMarksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaMarkIds)) {
		query["MediaMarkIds"] = request.MediaMarkIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMediaMarks"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMediaMarksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the marks of a media asset.
//
// @param request - DeleteMediaMarksRequest
//
// @return DeleteMediaMarksResponse
func (client *Client) DeleteMediaMarks(request *DeleteMediaMarksRequest) (_result *DeleteMediaMarksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMediaMarksResponse{}
	_body, _err := client.DeleteMediaMarksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an ApsaraVideo Media Processing (MPS) queue.
//
// @param request - DeletePipelineRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeletePipelineResponse
func (client *Client) DeletePipelineWithOptions(request *DeletePipelineRequest, runtime *util.RuntimeOptions) (_result *DeletePipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		query["PipelineId"] = request.PipelineId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePipeline"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePipelineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an ApsaraVideo Media Processing (MPS) queue.
//
// @param request - DeletePipelineRequest
//
// @return DeletePipelineResponse
func (client *Client) DeletePipeline(request *DeletePipelineRequest) (_result *DeletePipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePipelineResponse{}
	_body, _err := client.DeletePipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes media streams such as video streams and audio streams.
//
// Description:
//
// You can call this operation to delete multiple media streams at a time.
//
// @param request - DeletePlayInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeletePlayInfoResponse
func (client *Client) DeletePlayInfoWithOptions(request *DeletePlayInfoRequest, runtime *util.RuntimeOptions) (_result *DeletePlayInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeletePhysicalFiles)) {
		query["DeletePhysicalFiles"] = request.DeletePhysicalFiles
	}

	if !tea.BoolValue(util.IsUnset(request.FileURLs)) {
		query["FileURLs"] = request.FileURLs
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePlayInfo"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePlayInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes media streams such as video streams and audio streams.
//
// Description:
//
// You can call this operation to delete multiple media streams at a time.
//
// @param request - DeletePlayInfoRequest
//
// @return DeletePlayInfoResponse
func (client *Client) DeletePlayInfo(request *DeletePlayInfoRequest) (_result *DeletePlayInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePlayInfoResponse{}
	_body, _err := client.DeletePlayInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a program from a channel.
//
// @param request - DeleteProgramRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteProgramResponse
func (client *Client) DeleteProgramWithOptions(request *DeleteProgramRequest, runtime *util.RuntimeOptions) (_result *DeleteProgramResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelName)) {
		query["ChannelName"] = request.ChannelName
	}

	if !tea.BoolValue(util.IsUnset(request.ProgramName)) {
		query["ProgramName"] = request.ProgramName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteProgram"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteProgramResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a program from a channel.
//
// @param request - DeleteProgramRequest
//
// @return DeleteProgramResponse
func (client *Client) DeleteProgram(request *DeleteProgramRequest) (_result *DeleteProgramResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteProgramResponse{}
	_body, _err := client.DeleteProgramWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除自定义库实体
//
// @param request - DeleteRecognitionEntityRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteRecognitionEntityResponse
func (client *Client) DeleteRecognitionEntityWithOptions(request *DeleteRecognitionEntityRequest, runtime *util.RuntimeOptions) (_result *DeleteRecognitionEntityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Algorithm)) {
		query["Algorithm"] = request.Algorithm
	}

	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		query["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.LibId)) {
		query["LibId"] = request.LibId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteRecognitionEntity"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteRecognitionEntityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除自定义库实体
//
// @param request - DeleteRecognitionEntityRequest
//
// @return DeleteRecognitionEntityResponse
func (client *Client) DeleteRecognitionEntity(request *DeleteRecognitionEntityRequest) (_result *DeleteRecognitionEntityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRecognitionEntityResponse{}
	_body, _err := client.DeleteRecognitionEntityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除自定义库
//
// @param request - DeleteRecognitionLibRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteRecognitionLibResponse
func (client *Client) DeleteRecognitionLibWithOptions(request *DeleteRecognitionLibRequest, runtime *util.RuntimeOptions) (_result *DeleteRecognitionLibResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Algorithm)) {
		query["Algorithm"] = request.Algorithm
	}

	if !tea.BoolValue(util.IsUnset(request.LibId)) {
		query["LibId"] = request.LibId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteRecognitionLib"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteRecognitionLibResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除自定义库
//
// @param request - DeleteRecognitionLibRequest
//
// @return DeleteRecognitionLibResponse
func (client *Client) DeleteRecognitionLib(request *DeleteRecognitionLibRequest) (_result *DeleteRecognitionLibResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRecognitionLibResponse{}
	_body, _err := client.DeleteRecognitionLibWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除自定义实体照片
//
// @param request - DeleteRecognitionSampleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteRecognitionSampleResponse
func (client *Client) DeleteRecognitionSampleWithOptions(request *DeleteRecognitionSampleRequest, runtime *util.RuntimeOptions) (_result *DeleteRecognitionSampleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Algorithm)) {
		query["Algorithm"] = request.Algorithm
	}

	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		query["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.LibId)) {
		query["LibId"] = request.LibId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SampleId)) {
		query["SampleId"] = request.SampleId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteRecognitionSample"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteRecognitionSampleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除自定义实体照片
//
// @param request - DeleteRecognitionSampleRequest
//
// @return DeleteRecognitionSampleResponse
func (client *Client) DeleteRecognitionSample(request *DeleteRecognitionSampleRequest) (_result *DeleteRecognitionSampleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRecognitionSampleResponse{}
	_body, _err := client.DeleteRecognitionSampleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes intelligent jobs based on job IDs.
//
// @param request - DeleteSmartJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSmartJobResponse
func (client *Client) DeleteSmartJobWithOptions(request *DeleteSmartJobRequest, runtime *util.RuntimeOptions) (_result *DeleteSmartJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSmartJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSmartJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes intelligent jobs based on job IDs.
//
// @param request - DeleteSmartJobRequest
//
// @return DeleteSmartJobResponse
func (client *Client) DeleteSmartJob(request *DeleteSmartJobRequest) (_result *DeleteSmartJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSmartJobResponse{}
	_body, _err := client.DeleteSmartJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a source from MediaWeaver.
//
// @param request - DeleteSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSourceResponse
func (client *Client) DeleteSourceWithOptions(request *DeleteSourceRequest, runtime *util.RuntimeOptions) (_result *DeleteSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SoftDelete)) {
		query["SoftDelete"] = request.SoftDelete
	}

	if !tea.BoolValue(util.IsUnset(request.SourceLocationName)) {
		query["SourceLocationName"] = request.SourceLocationName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceName)) {
		query["SourceName"] = request.SourceName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceType)) {
		query["SourceType"] = request.SourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSource"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a source from MediaWeaver.
//
// @param request - DeleteSourceRequest
//
// @return DeleteSourceResponse
func (client *Client) DeleteSource(request *DeleteSourceRequest) (_result *DeleteSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSourceResponse{}
	_body, _err := client.DeleteSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a source location.
//
// @param request - DeleteSourceLocationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSourceLocationResponse
func (client *Client) DeleteSourceLocationWithOptions(request *DeleteSourceLocationRequest, runtime *util.RuntimeOptions) (_result *DeleteSourceLocationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SoftDelete)) {
		query["SoftDelete"] = request.SoftDelete
	}

	if !tea.BoolValue(util.IsUnset(request.SourceLocationName)) {
		query["SourceLocationName"] = request.SourceLocationName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSourceLocation"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSourceLocationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a source location.
//
// @param request - DeleteSourceLocationRequest
//
// @return DeleteSourceLocationResponse
func (client *Client) DeleteSourceLocation(request *DeleteSourceLocationRequest) (_result *DeleteSourceLocationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSourceLocationResponse{}
	_body, _err := client.DeleteSourceLocationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes templates.
//
// Description:
//
// A template is an encapsulation of the timeline of a media editing and production job. You can define a common timeline as a template. When you have the same requirements, you need to only specify key parameters and materials to produce videos.
//
//   - For more information about how to use a regular template, see [Create and use a regular template](https://help.aliyun.com/document_detail/445399.html).
//
//   - For more information about how to use an advanced template, see [Create and use advanced templates](https://help.aliyun.com/document_detail/445389.html).
//
// @param request - DeleteTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteTemplateResponse
func (client *Client) DeleteTemplateWithOptions(request *DeleteTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes templates.
//
// Description:
//
// A template is an encapsulation of the timeline of a media editing and production job. You can define a common timeline as a template. When you have the same requirements, you need to only specify key parameters and materials to produce videos.
//
//   - For more information about how to use a regular template, see [Create and use a regular template](https://help.aliyun.com/document_detail/445399.html).
//
//   - For more information about how to use an advanced template, see [Create and use advanced templates](https://help.aliyun.com/document_detail/445389.html).
//
// @param request - DeleteTemplateRequest
//
// @return DeleteTemplateResponse
func (client *Client) DeleteTemplate(request *DeleteTemplateRequest) (_result *DeleteTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTemplateResponse{}
	_body, _err := client.DeleteTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a VOD packaging asset.
//
// @param request - DeleteVodPackagingAssetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteVodPackagingAssetResponse
func (client *Client) DeleteVodPackagingAssetWithOptions(request *DeleteVodPackagingAssetRequest, runtime *util.RuntimeOptions) (_result *DeleteVodPackagingAssetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AssetName)) {
		query["AssetName"] = request.AssetName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteVodPackagingAsset"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteVodPackagingAssetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a VOD packaging asset.
//
// @param request - DeleteVodPackagingAssetRequest
//
// @return DeleteVodPackagingAssetResponse
func (client *Client) DeleteVodPackagingAsset(request *DeleteVodPackagingAssetRequest) (_result *DeleteVodPackagingAssetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteVodPackagingAssetResponse{}
	_body, _err := client.DeleteVodPackagingAssetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a packaging configuration.
//
// @param request - DeleteVodPackagingConfigurationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteVodPackagingConfigurationResponse
func (client *Client) DeleteVodPackagingConfigurationWithOptions(request *DeleteVodPackagingConfigurationRequest, runtime *util.RuntimeOptions) (_result *DeleteVodPackagingConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigurationName)) {
		query["ConfigurationName"] = request.ConfigurationName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteVodPackagingConfiguration"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteVodPackagingConfigurationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a packaging configuration.
//
// @param request - DeleteVodPackagingConfigurationRequest
//
// @return DeleteVodPackagingConfigurationResponse
func (client *Client) DeleteVodPackagingConfiguration(request *DeleteVodPackagingConfigurationRequest) (_result *DeleteVodPackagingConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteVodPackagingConfigurationResponse{}
	_body, _err := client.DeleteVodPackagingConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a packaging group.
//
// @param request - DeleteVodPackagingGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteVodPackagingGroupResponse
func (client *Client) DeleteVodPackagingGroupWithOptions(request *DeleteVodPackagingGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteVodPackagingGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteVodPackagingGroup"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteVodPackagingGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a packaging group.
//
// @param request - DeleteVodPackagingGroupRequest
//
// @return DeleteVodPackagingGroupResponse
func (client *Client) DeleteVodPackagingGroup(request *DeleteVodPackagingGroupRequest) (_result *DeleteVodPackagingGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteVodPackagingGroupResponse{}
	_body, _err := client.DeleteVodPackagingGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about an AI agent.
//
// Description:
//
// ## [](#)Request description
//
//   - **Feature**: You can call this operation to query the information about an AI agent.
//
//   - **Scenario**: If you need to monitor or analyze the performance of an AI agent in a call or debug the agent configurations, you can call this operation to obtain required data.
//
// @param request - DescribeAIAgentInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAIAgentInstanceResponse
func (client *Client) DescribeAIAgentInstanceWithOptions(request *DescribeAIAgentInstanceRequest, runtime *util.RuntimeOptions) (_result *DescribeAIAgentInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAIAgentInstance"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAIAgentInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about an AI agent.
//
// Description:
//
// ## [](#)Request description
//
//   - **Feature**: You can call this operation to query the information about an AI agent.
//
//   - **Scenario**: If you need to monitor or analyze the performance of an AI agent in a call or debug the agent configurations, you can call this operation to obtain required data.
//
// @param request - DescribeAIAgentInstanceRequest
//
// @return DescribeAIAgentInstanceResponse
func (client *Client) DescribeAIAgentInstance(request *DescribeAIAgentInstanceRequest) (_result *DescribeAIAgentInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAIAgentInstanceResponse{}
	_body, _err := client.DescribeAIAgentInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the usage statistics of Intelligent Media Services (IMS) on video-on-demand (VOD) editing. The maximum query range is 31 days. You can query data within the last 90 days.
//
// @param request - DescribeMeterImsEditUsageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMeterImsEditUsageResponse
func (client *Client) DescribeMeterImsEditUsageWithOptions(request *DescribeMeterImsEditUsageRequest, runtime *util.RuntimeOptions) (_result *DescribeMeterImsEditUsageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.StartTs)) {
		query["StartTs"] = request.StartTs
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMeterImsEditUsage"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMeterImsEditUsageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the usage statistics of Intelligent Media Services (IMS) on video-on-demand (VOD) editing. The maximum query range is 31 days. You can query data within the last 90 days.
//
// @param request - DescribeMeterImsEditUsageRequest
//
// @return DescribeMeterImsEditUsageResponse
func (client *Client) DescribeMeterImsEditUsage(request *DescribeMeterImsEditUsageRequest) (_result *DescribeMeterImsEditUsageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMeterImsEditUsageResponse{}
	_body, _err := client.DescribeMeterImsEditUsageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the usage statistics of Intelligent Media Services (IMS) on ultra high definition (UHD) transcoding of ApsaraVideo Media Processing (MPS). The maximum query range is 31 days. You can query data within the last 90 days.
//
// @param request - DescribeMeterImsMediaConvertUHDUsageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMeterImsMediaConvertUHDUsageResponse
func (client *Client) DescribeMeterImsMediaConvertUHDUsageWithOptions(request *DescribeMeterImsMediaConvertUHDUsageRequest, runtime *util.RuntimeOptions) (_result *DescribeMeterImsMediaConvertUHDUsageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTs)) {
		query["StartTs"] = request.StartTs
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMeterImsMediaConvertUHDUsage"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMeterImsMediaConvertUHDUsageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the usage statistics of Intelligent Media Services (IMS) on ultra high definition (UHD) transcoding of ApsaraVideo Media Processing (MPS). The maximum query range is 31 days. You can query data within the last 90 days.
//
// @param request - DescribeMeterImsMediaConvertUHDUsageRequest
//
// @return DescribeMeterImsMediaConvertUHDUsageResponse
func (client *Client) DescribeMeterImsMediaConvertUHDUsage(request *DescribeMeterImsMediaConvertUHDUsageRequest) (_result *DescribeMeterImsMediaConvertUHDUsageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMeterImsMediaConvertUHDUsageResponse{}
	_body, _err := client.DescribeMeterImsMediaConvertUHDUsageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the usage statistics of Intelligent Media Services (IMS) on video-on-demand (VOD) transcoding. The maximum query range is 31 days. You can query data within the last 90 days.
//
// @param request - DescribeMeterImsMediaConvertUsageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMeterImsMediaConvertUsageResponse
func (client *Client) DescribeMeterImsMediaConvertUsageWithOptions(request *DescribeMeterImsMediaConvertUsageRequest, runtime *util.RuntimeOptions) (_result *DescribeMeterImsMediaConvertUsageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.StartTs)) {
		query["StartTs"] = request.StartTs
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMeterImsMediaConvertUsage"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMeterImsMediaConvertUsageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the usage statistics of Intelligent Media Services (IMS) on video-on-demand (VOD) transcoding. The maximum query range is 31 days. You can query data within the last 90 days.
//
// @param request - DescribeMeterImsMediaConvertUsageRequest
//
// @return DescribeMeterImsMediaConvertUsageResponse
func (client *Client) DescribeMeterImsMediaConvertUsage(request *DescribeMeterImsMediaConvertUsageRequest) (_result *DescribeMeterImsMediaConvertUsageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMeterImsMediaConvertUsageResponse{}
	_body, _err := client.DescribeMeterImsMediaConvertUsageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the usage statistics of Intelligent Media Services (IMS) on AI processing of ApsaraVideo Media Processing (MPS). The maximum query range is 31 days. You can query data within the last 90 days.
//
// @param request - DescribeMeterImsMpsAiUsageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMeterImsMpsAiUsageResponse
func (client *Client) DescribeMeterImsMpsAiUsageWithOptions(request *DescribeMeterImsMpsAiUsageRequest, runtime *util.RuntimeOptions) (_result *DescribeMeterImsMpsAiUsageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.StartTs)) {
		query["StartTs"] = request.StartTs
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMeterImsMpsAiUsage"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMeterImsMpsAiUsageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the usage statistics of Intelligent Media Services (IMS) on AI processing of ApsaraVideo Media Processing (MPS). The maximum query range is 31 days. You can query data within the last 90 days.
//
// @param request - DescribeMeterImsMpsAiUsageRequest
//
// @return DescribeMeterImsMpsAiUsageResponse
func (client *Client) DescribeMeterImsMpsAiUsage(request *DescribeMeterImsMpsAiUsageRequest) (_result *DescribeMeterImsMpsAiUsageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMeterImsMpsAiUsageResponse{}
	_body, _err := client.DescribeMeterImsMpsAiUsageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the usage statistics of Intelligent Media Services (IMS). The maximum query range is 31 days. You can query data within the last 90 days.
//
// @param request - DescribeMeterImsSummaryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMeterImsSummaryResponse
func (client *Client) DescribeMeterImsSummaryWithOptions(request *DescribeMeterImsSummaryRequest, runtime *util.RuntimeOptions) (_result *DescribeMeterImsSummaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.StartTs)) {
		query["StartTs"] = request.StartTs
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMeterImsSummary"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMeterImsSummaryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the usage statistics of Intelligent Media Services (IMS). The maximum query range is 31 days. You can query data within the last 90 days.
//
// @param request - DescribeMeterImsSummaryRequest
//
// @return DescribeMeterImsSummaryResponse
func (client *Client) DescribeMeterImsSummary(request *DescribeMeterImsSummaryRequest) (_result *DescribeMeterImsSummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMeterImsSummaryResponse{}
	_body, _err := client.DescribeMeterImsSummaryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the event callback configurations of an AI agent.
//
// Description:
//
// You can call this operation to query the detailed callback configurations of an AI agent.
//
// @param request - DescribeNotifyConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeNotifyConfigResponse
func (client *Client) DescribeNotifyConfigWithOptions(request *DescribeNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AIAgentId)) {
		query["AIAgentId"] = request.AIAgentId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNotifyConfig"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the event callback configurations of an AI agent.
//
// Description:
//
// You can call this operation to query the detailed callback configurations of an AI agent.
//
// @param request - DescribeNotifyConfigRequest
//
// @return DescribeNotifyConfigResponse
func (client *Client) DescribeNotifyConfig(request *DescribeNotifyConfigRequest) (_result *DescribeNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNotifyConfigResponse{}
	_body, _err := client.DescribeNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribePlayListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePlayListResponse
func (client *Client) DescribePlayListWithOptions(request *DescribePlayListRequest, runtime *util.RuntimeOptions) (_result *DescribePlayListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BeginTs)) {
		query["BeginTs"] = request.BeginTs
	}

	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.OrderName)) {
		query["OrderName"] = request.OrderName
	}

	if !tea.BoolValue(util.IsUnset(request.OrderType)) {
		query["OrderType"] = request.OrderType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PlayType)) {
		query["PlayType"] = request.PlayType
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TraceId)) {
		query["TraceId"] = request.TraceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePlayList"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePlayListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribePlayListRequest
//
// @return DescribePlayListResponse
func (client *Client) DescribePlayList(request *DescribePlayListRequest) (_result *DescribePlayListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePlayListResponse{}
	_body, _err := client.DescribePlayListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询实例
//
// @param request - DescribeRtcRobotInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRtcRobotInstanceResponse
func (client *Client) DescribeRtcRobotInstanceWithOptions(request *DescribeRtcRobotInstanceRequest, runtime *util.RuntimeOptions) (_result *DescribeRtcRobotInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRtcRobotInstance"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRtcRobotInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询实例
//
// @param request - DescribeRtcRobotInstanceRequest
//
// @return DescribeRtcRobotInstanceResponse
func (client *Client) DescribeRtcRobotInstance(request *DescribeRtcRobotInstanceRequest) (_result *DescribeRtcRobotInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRtcRobotInstanceResponse{}
	_body, _err := client.DescribeRtcRobotInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Checks whether the reading of users has issues, such as noticeable pronunciation errors or background noise. After the audio is checked on the cloud, the qualified audio is temporarily stored on the cloud for subsequent training. Do not skip this step.
//
// @param request - DetectAudioForCustomizedVoiceJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DetectAudioForCustomizedVoiceJobResponse
func (client *Client) DetectAudioForCustomizedVoiceJobWithOptions(request *DetectAudioForCustomizedVoiceJobRequest, runtime *util.RuntimeOptions) (_result *DetectAudioForCustomizedVoiceJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AudioRecordId)) {
		query["AudioRecordId"] = request.AudioRecordId
	}

	if !tea.BoolValue(util.IsUnset(request.RecordUrl)) {
		query["RecordUrl"] = request.RecordUrl
	}

	if !tea.BoolValue(util.IsUnset(request.VoiceId)) {
		query["VoiceId"] = request.VoiceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DetectAudioForCustomizedVoiceJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DetectAudioForCustomizedVoiceJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Checks whether the reading of users has issues, such as noticeable pronunciation errors or background noise. After the audio is checked on the cloud, the qualified audio is temporarily stored on the cloud for subsequent training. Do not skip this step.
//
// @param request - DetectAudioForCustomizedVoiceJobRequest
//
// @return DetectAudioForCustomizedVoiceJobResponse
func (client *Client) DetectAudioForCustomizedVoiceJob(request *DetectAudioForCustomizedVoiceJobRequest) (_result *DetectAudioForCustomizedVoiceJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetectAudioForCustomizedVoiceJobResponse{}
	_body, _err := client.DetectAudioForCustomizedVoiceJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a search index. After you delete a search index, the existing index data is cleared and index-based analysis, storage, and query are not supported for subsequent media assets.
//
// @param request - DropSearchIndexRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DropSearchIndexResponse
func (client *Client) DropSearchIndexWithOptions(request *DropSearchIndexRequest, runtime *util.RuntimeOptions) (_result *DropSearchIndexResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IndexType)) {
		query["IndexType"] = request.IndexType
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DropSearchIndex"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DropSearchIndexResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a search index. After you delete a search index, the existing index data is cleared and index-based analysis, storage, and query are not supported for subsequent media assets.
//
// @param request - DropSearchIndexRequest
//
// @return DropSearchIndexResponse
func (client *Client) DropSearchIndex(request *DropSearchIndexRequest) (_result *DropSearchIndexResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DropSearchIndexResponse{}
	_body, _err := client.DropSearchIndexWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a search library and all media assets in the library.
//
// @param request - DropSearchLibRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DropSearchLibResponse
func (client *Client) DropSearchLibWithOptions(request *DropSearchLibRequest, runtime *util.RuntimeOptions) (_result *DropSearchLibResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DropSearchLib"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DropSearchLibResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a search library and all media assets in the library.
//
// @param request - DropSearchLibRequest
//
// @return DropSearchLibResponse
func (client *Client) DropSearchLib(request *DropSearchLibRequest) (_result *DropSearchLibResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DropSearchLibResponse{}
	_body, _err := client.DropSearchLibWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an AI agent. This operation returns the channel in which the AI agent resides, the username of the AI agent in the channel, and the token that you can use to join the channel.
//
// Description:
//
// ## [](#)Request description
//
// You can call this operation to create an AI agent based on the provided ID. You can join the channel based on the returned information and talk to the agent.
//
// **Note:*	- Make sure that the provided AI agent ID is valid and configure optional parameters based on your business requirements.
//
// @param tmpReq - GenerateAIAgentCallRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GenerateAIAgentCallResponse
func (client *Client) GenerateAIAgentCallWithOptions(tmpReq *GenerateAIAgentCallRequest, runtime *util.RuntimeOptions) (_result *GenerateAIAgentCallResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GenerateAIAgentCallShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.AgentConfig)) {
		request.AgentConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AgentConfig, tea.String("AgentConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ChatSyncConfig)) {
		request.ChatSyncConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ChatSyncConfig, tea.String("ChatSyncConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TemplateConfig)) {
		request.TemplateConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TemplateConfig, tea.String("TemplateConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AIAgentId)) {
		query["AIAgentId"] = request.AIAgentId
	}

	if !tea.BoolValue(util.IsUnset(request.AgentConfigShrink)) {
		query["AgentConfig"] = request.AgentConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ChatSyncConfigShrink)) {
		query["ChatSyncConfig"] = request.ChatSyncConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Expire)) {
		query["Expire"] = request.Expire
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		query["SessionId"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateConfigShrink)) {
		query["TemplateConfig"] = request.TemplateConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GenerateAIAgentCall"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GenerateAIAgentCallResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an AI agent. This operation returns the channel in which the AI agent resides, the username of the AI agent in the channel, and the token that you can use to join the channel.
//
// Description:
//
// ## [](#)Request description
//
// You can call this operation to create an AI agent based on the provided ID. You can join the channel based on the returned information and talk to the agent.
//
// **Note:*	- Make sure that the provided AI agent ID is valid and configure optional parameters based on your business requirements.
//
// @param request - GenerateAIAgentCallRequest
//
// @return GenerateAIAgentCallResponse
func (client *Client) GenerateAIAgentCall(request *GenerateAIAgentCallRequest) (_result *GenerateAIAgentCallResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GenerateAIAgentCallResponse{}
	_body, _err := client.GenerateAIAgentCallWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Generates a random Key Management Service (KMS) data key used for HTTP Live Streaming (HLS) encryption and transcoding of videos.
//
// @param request - GenerateKMSDataKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GenerateKMSDataKeyResponse
func (client *Client) GenerateKMSDataKeyWithOptions(runtime *util.RuntimeOptions) (_result *GenerateKMSDataKeyResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GenerateKMSDataKey"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GenerateKMSDataKeyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Generates a random Key Management Service (KMS) data key used for HTTP Live Streaming (HLS) encryption and transcoding of videos.
//
// @return GenerateKMSDataKeyResponse
func (client *Client) GenerateKMSDataKey() (_result *GenerateKMSDataKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GenerateKMSDataKeyResponse{}
	_body, _err := client.GenerateKMSDataKeyWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 生成直播互动消息所需的token
//
// @param request - GenerateMessageChatTokenRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GenerateMessageChatTokenResponse
func (client *Client) GenerateMessageChatTokenWithOptions(request *GenerateMessageChatTokenRequest, runtime *util.RuntimeOptions) (_result *GenerateMessageChatTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AIAgentId)) {
		query["AIAgentId"] = request.AIAgentId
	}

	if !tea.BoolValue(util.IsUnset(request.Expire)) {
		query["Expire"] = request.Expire
	}

	if !tea.BoolValue(util.IsUnset(request.Role)) {
		query["Role"] = request.Role
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GenerateMessageChatToken"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GenerateMessageChatTokenResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 生成直播互动消息所需的token
//
// @param request - GenerateMessageChatTokenRequest
//
// @return GenerateMessageChatTokenResponse
func (client *Client) GenerateMessageChatToken(request *GenerateMessageChatTokenRequest) (_result *GenerateMessageChatTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GenerateMessageChatTokenResponse{}
	_body, _err := client.GenerateMessageChatTokenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains details of an ad insertion configuration.
//
// @param request - GetAdInsertionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAdInsertionResponse
func (client *Client) GetAdInsertionWithOptions(request *GetAdInsertionRequest, runtime *util.RuntimeOptions) (_result *GetAdInsertionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAdInsertion"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAdInsertionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains details of an ad insertion configuration.
//
// @param request - GetAdInsertionRequest
//
// @return GetAdInsertionResponse
func (client *Client) GetAdInsertion(request *GetAdInsertionRequest) (_result *GetAdInsertionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAdInsertionResponse{}
	_body, _err := client.GetAdInsertionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a trained digital human.
//
// @param request - GetAvatarRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAvatarResponse
func (client *Client) GetAvatarWithOptions(request *GetAvatarRequest, runtime *util.RuntimeOptions) (_result *GetAvatarResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AvatarId)) {
		query["AvatarId"] = request.AvatarId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAvatar"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAvatarResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a trained digital human.
//
// @param request - GetAvatarRequest
//
// @return GetAvatarResponse
func (client *Client) GetAvatar(request *GetAvatarRequest) (_result *GetAvatarResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAvatarResponse{}
	_body, _err := client.GetAvatarWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a digital human training job.
//
// @param request - GetAvatarTrainingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAvatarTrainingJobResponse
func (client *Client) GetAvatarTrainingJobWithOptions(request *GetAvatarTrainingJobRequest, runtime *util.RuntimeOptions) (_result *GetAvatarTrainingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAvatarTrainingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAvatarTrainingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a digital human training job.
//
// @param request - GetAvatarTrainingJobRequest
//
// @return GetAvatarTrainingJobResponse
func (client *Client) GetAvatarTrainingJob(request *GetAvatarTrainingJobRequest) (_result *GetAvatarTrainingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAvatarTrainingJobResponse{}
	_body, _err := client.GetAvatarTrainingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a quick video production job, including the input parameters, job state, and the IDs and URLs of the output media assets. You can call this operation to query only quick video production jobs created within the past year.
//
// @param request - GetBatchMediaProducingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetBatchMediaProducingJobResponse
func (client *Client) GetBatchMediaProducingJobWithOptions(request *GetBatchMediaProducingJobRequest, runtime *util.RuntimeOptions) (_result *GetBatchMediaProducingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBatchMediaProducingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBatchMediaProducingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a quick video production job, including the input parameters, job state, and the IDs and URLs of the output media assets. You can call this operation to query only quick video production jobs created within the past year.
//
// @param request - GetBatchMediaProducingJobRequest
//
// @return GetBatchMediaProducingJobResponse
func (client *Client) GetBatchMediaProducingJob(request *GetBatchMediaProducingJobRequest) (_result *GetBatchMediaProducingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBatchMediaProducingJobResponse{}
	_body, _err := client.GetBatchMediaProducingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a category and its subcategories.
//
// Description:
//
// You can call this operation to query the information about a category and its subcategories based on the category ID and category type.
//
// @param request - GetCategoriesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCategoriesResponse
func (client *Client) GetCategoriesWithOptions(request *GetCategoriesRequest, runtime *util.RuntimeOptions) (_result *GetCategoriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CateId)) {
		query["CateId"] = request.CateId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCategories"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCategoriesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a category and its subcategories.
//
// Description:
//
// You can call this operation to query the information about a category and its subcategories based on the category ID and category type.
//
// @param request - GetCategoriesRequest
//
// @return GetCategoriesResponse
func (client *Client) GetCategories(request *GetCategoriesRequest) (_result *GetCategoriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCategoriesResponse{}
	_body, _err := client.GetCategoriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries information about a channel in MediaWeaver.
//
// @param request - GetChannelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetChannelResponse
func (client *Client) GetChannelWithOptions(request *GetChannelRequest, runtime *util.RuntimeOptions) (_result *GetChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelName)) {
		query["ChannelName"] = request.ChannelName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetChannel"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries information about a channel in MediaWeaver.
//
// @param request - GetChannelRequest
//
// @return GetChannelResponse
func (client *Client) GetChannel(request *GetChannelRequest) (_result *GetChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetChannelResponse{}
	_body, _err := client.GetChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取内容分析搜索配置
//
// @param request - GetContentAnalyzeConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetContentAnalyzeConfigResponse
func (client *Client) GetContentAnalyzeConfigWithOptions(runtime *util.RuntimeOptions) (_result *GetContentAnalyzeConfigResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetContentAnalyzeConfig"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetContentAnalyzeConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取内容分析搜索配置
//
// @return GetContentAnalyzeConfigResponse
func (client *Client) GetContentAnalyzeConfig() (_result *GetContentAnalyzeConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetContentAnalyzeConfigResponse{}
	_body, _err := client.GetContentAnalyzeConfigWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a custom template.
//
// Description:
//
// You can call this operation to query the information about a template with the ID specified by the TemplateId parameter. You can also query the information about the default template. If TemplateId is specified, other parameters are ignored and the template whose ID is specified is queried. If TemplateId is not specified, the default template is queried based on other parameters. In this case, Type is required.
//
// Template types:
//
// 1.  1: transcoding template.
//
// 2.  2: snapshot template.
//
// 3.  3: animated image template.
//
// 4.  4\\. image watermark template.
//
// 5.  5: text watermark template.
//
// 6.  6: subtitle template.
//
// 7.  7: AI-assisted content moderation template.
//
// 8.  8: AI-assisted intelligent thumbnail template.
//
// 9.  9: AI-assisted intelligent erasure template.
//
// Subtypes of transcoding templates:
//
// 1.  1 (Normal): regular template.
//
// 2.  2 (AudioTranscode): audio transcoding template.
//
// 3.  3 (Remux): container format conversion template.
//
// 4.  4 (NarrowBandV1): Narrowband HD 1.0 template.
//
// 5.  5 (NarrowBandV2): Narrowband HD 2.0 template.
//
// Subtypes of snapshot templates:
//
// 1.  1 (Normal): regular template.
//
// 2.  2 (Sprite): sprite template.
//
// 3.  3 (WebVtt): WebVTT template.
//
// Subtypes of AI-assisted content moderation templates:
//
// 1.  1 (Video): video moderation template.
//
// 2.  2 (Audio): audio moderation template.
//
// 3.  3 (Image): image moderation template.
//
// Subtypes of AI-assisted intelligent erasure templates:
//
// 1.  1 (VideoDelogo): logo erasure template.
//
// 2.  2 (VideoDetext): subtitle erasure template.
//
// @param request - GetCustomTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCustomTemplateResponse
func (client *Client) GetCustomTemplateWithOptions(request *GetCustomTemplateRequest, runtime *util.RuntimeOptions) (_result *GetCustomTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Subtype)) {
		query["Subtype"] = request.Subtype
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCustomTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCustomTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a custom template.
//
// Description:
//
// You can call this operation to query the information about a template with the ID specified by the TemplateId parameter. You can also query the information about the default template. If TemplateId is specified, other parameters are ignored and the template whose ID is specified is queried. If TemplateId is not specified, the default template is queried based on other parameters. In this case, Type is required.
//
// Template types:
//
// 1.  1: transcoding template.
//
// 2.  2: snapshot template.
//
// 3.  3: animated image template.
//
// 4.  4\\. image watermark template.
//
// 5.  5: text watermark template.
//
// 6.  6: subtitle template.
//
// 7.  7: AI-assisted content moderation template.
//
// 8.  8: AI-assisted intelligent thumbnail template.
//
// 9.  9: AI-assisted intelligent erasure template.
//
// Subtypes of transcoding templates:
//
// 1.  1 (Normal): regular template.
//
// 2.  2 (AudioTranscode): audio transcoding template.
//
// 3.  3 (Remux): container format conversion template.
//
// 4.  4 (NarrowBandV1): Narrowband HD 1.0 template.
//
// 5.  5 (NarrowBandV2): Narrowband HD 2.0 template.
//
// Subtypes of snapshot templates:
//
// 1.  1 (Normal): regular template.
//
// 2.  2 (Sprite): sprite template.
//
// 3.  3 (WebVtt): WebVTT template.
//
// Subtypes of AI-assisted content moderation templates:
//
// 1.  1 (Video): video moderation template.
//
// 2.  2 (Audio): audio moderation template.
//
// 3.  3 (Image): image moderation template.
//
// Subtypes of AI-assisted intelligent erasure templates:
//
// 1.  1 (VideoDelogo): logo erasure template.
//
// 2.  2 (VideoDetext): subtitle erasure template.
//
// @param request - GetCustomTemplateRequest
//
// @return GetCustomTemplateResponse
func (client *Client) GetCustomTemplate(request *GetCustomTemplateRequest) (_result *GetCustomTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCustomTemplateResponse{}
	_body, _err := client.GetCustomTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a personalized human voice.
//
// @param request - GetCustomizedVoiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCustomizedVoiceResponse
func (client *Client) GetCustomizedVoiceWithOptions(request *GetCustomizedVoiceRequest, runtime *util.RuntimeOptions) (_result *GetCustomizedVoiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.VoiceId)) {
		query["VoiceId"] = request.VoiceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCustomizedVoice"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCustomizedVoiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a personalized human voice.
//
// @param request - GetCustomizedVoiceRequest
//
// @return GetCustomizedVoiceResponse
func (client *Client) GetCustomizedVoice(request *GetCustomizedVoiceRequest) (_result *GetCustomizedVoiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCustomizedVoiceResponse{}
	_body, _err := client.GetCustomizedVoiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a human voice cloning job.
//
// @param request - GetCustomizedVoiceJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCustomizedVoiceJobResponse
func (client *Client) GetCustomizedVoiceJobWithOptions(request *GetCustomizedVoiceJobRequest, runtime *util.RuntimeOptions) (_result *GetCustomizedVoiceJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCustomizedVoiceJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCustomizedVoiceJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a human voice cloning job.
//
// @param request - GetCustomizedVoiceJobRequest
//
// @return GetCustomizedVoiceJobResponse
func (client *Client) GetCustomizedVoiceJob(request *GetCustomizedVoiceJobRequest) (_result *GetCustomizedVoiceJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCustomizedVoiceJobResponse{}
	_body, _err := client.GetCustomizedVoiceJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取用户默认存储地址
//
// @param request - GetDefaultStorageLocationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDefaultStorageLocationResponse
func (client *Client) GetDefaultStorageLocationWithOptions(runtime *util.RuntimeOptions) (_result *GetDefaultStorageLocationResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetDefaultStorageLocation"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDefaultStorageLocationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取用户默认存储地址
//
// @return GetDefaultStorageLocationResponse
func (client *Client) GetDefaultStorageLocation() (_result *GetDefaultStorageLocationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDefaultStorageLocationResponse{}
	_body, _err := client.GetDefaultStorageLocationWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the text to be read and sample audio for training a personalized human voice.
//
// @param request - GetDemonstrationForCustomizedVoiceJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDemonstrationForCustomizedVoiceJobResponse
func (client *Client) GetDemonstrationForCustomizedVoiceJobWithOptions(request *GetDemonstrationForCustomizedVoiceJobRequest, runtime *util.RuntimeOptions) (_result *GetDemonstrationForCustomizedVoiceJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Scenario)) {
		query["Scenario"] = request.Scenario
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDemonstrationForCustomizedVoiceJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDemonstrationForCustomizedVoiceJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the text to be read and sample audio for training a personalized human voice.
//
// @param request - GetDemonstrationForCustomizedVoiceJobRequest
//
// @return GetDemonstrationForCustomizedVoiceJobResponse
func (client *Client) GetDemonstrationForCustomizedVoiceJob(request *GetDemonstrationForCustomizedVoiceJobRequest) (_result *GetDemonstrationForCustomizedVoiceJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDemonstrationForCustomizedVoiceJobResponse{}
	_body, _err := client.GetDemonstrationForCustomizedVoiceJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about an image animation job.
//
// @param request - GetDynamicImageJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDynamicImageJobResponse
func (client *Client) GetDynamicImageJobWithOptions(request *GetDynamicImageJobRequest, runtime *util.RuntimeOptions) (_result *GetDynamicImageJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDynamicImageJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDynamicImageJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about an image animation job.
//
// @param request - GetDynamicImageJobRequest
//
// @return GetDynamicImageJobResponse
func (client *Client) GetDynamicImageJob(request *GetDynamicImageJobRequest) (_result *GetDynamicImageJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDynamicImageJobResponse{}
	_body, _err := client.GetDynamicImageJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about an online editing project.
//
// @param request - GetEditingProjectRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetEditingProjectResponse
func (client *Client) GetEditingProjectWithOptions(request *GetEditingProjectRequest, runtime *util.RuntimeOptions) (_result *GetEditingProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RequestSource)) {
		query["RequestSource"] = request.RequestSource
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetEditingProject"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEditingProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about an online editing project.
//
// @param request - GetEditingProjectRequest
//
// @return GetEditingProjectResponse
func (client *Client) GetEditingProject(request *GetEditingProjectRequest) (_result *GetEditingProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEditingProjectResponse{}
	_body, _err := client.GetEditingProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries all materials associated with an online editing project.
//
// @param request - GetEditingProjectMaterialsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetEditingProjectMaterialsResponse
func (client *Client) GetEditingProjectMaterialsWithOptions(request *GetEditingProjectMaterialsRequest, runtime *util.RuntimeOptions) (_result *GetEditingProjectMaterialsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetEditingProjectMaterials"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEditingProjectMaterialsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries all materials associated with an online editing project.
//
// @param request - GetEditingProjectMaterialsRequest
//
// @return GetEditingProjectMaterialsResponse
func (client *Client) GetEditingProjectMaterials(request *GetEditingProjectMaterialsRequest) (_result *GetEditingProjectMaterialsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEditingProjectMaterialsResponse{}
	_body, _err := client.GetEditingProjectMaterialsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries event callback configurations.
//
// @param request - GetEventCallbackRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetEventCallbackResponse
func (client *Client) GetEventCallbackWithOptions(runtime *util.RuntimeOptions) (_result *GetEventCallbackResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetEventCallback"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEventCallbackResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries event callback configurations.
//
// @return GetEventCallbackResponse
func (client *Client) GetEventCallback() (_result *GetEventCallbackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEventCallbackResponse{}
	_body, _err := client.GetEventCallbackWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询热词词库
//
// @param request - GetHotwordLibraryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetHotwordLibraryResponse
func (client *Client) GetHotwordLibraryWithOptions(request *GetHotwordLibraryRequest, runtime *util.RuntimeOptions) (_result *GetHotwordLibraryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HotwordLibraryId)) {
		query["HotwordLibraryId"] = request.HotwordLibraryId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetHotwordLibrary"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetHotwordLibraryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询热词词库
//
// @param request - GetHotwordLibraryRequest
//
// @return GetHotwordLibraryResponse
func (client *Client) GetHotwordLibrary(request *GetHotwordLibraryRequest) (_result *GetHotwordLibraryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetHotwordLibraryResponse{}
	_body, _err := client.GetHotwordLibraryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the index file of a live stream. The index file is used to preview an editing project in the console.
//
// @param request - GetLiveEditingIndexFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetLiveEditingIndexFileResponse
func (client *Client) GetLiveEditingIndexFileWithOptions(request *GetLiveEditingIndexFileRequest, runtime *util.RuntimeOptions) (_result *GetLiveEditingIndexFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLiveEditingIndexFile"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLiveEditingIndexFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the index file of a live stream. The index file is used to preview an editing project in the console.
//
// @param request - GetLiveEditingIndexFileRequest
//
// @return GetLiveEditingIndexFileResponse
func (client *Client) GetLiveEditingIndexFile(request *GetLiveEditingIndexFileRequest) (_result *GetLiveEditingIndexFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLiveEditingIndexFileResponse{}
	_body, _err := client.GetLiveEditingIndexFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a live editing job. The requested information includes the state, timeline, and template of the job, the ID and URL of the output file, and the configurations of the job. You can call this operation to query only live editing jobs created within the past year.
//
// @param request - GetLiveEditingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetLiveEditingJobResponse
func (client *Client) GetLiveEditingJobWithOptions(request *GetLiveEditingJobRequest, runtime *util.RuntimeOptions) (_result *GetLiveEditingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLiveEditingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLiveEditingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a live editing job. The requested information includes the state, timeline, and template of the job, the ID and URL of the output file, and the configurations of the job. You can call this operation to query only live editing jobs created within the past year.
//
// @param request - GetLiveEditingJobRequest
//
// @return GetLiveEditingJobResponse
func (client *Client) GetLiveEditingJob(request *GetLiveEditingJobRequest) (_result *GetLiveEditingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLiveEditingJobResponse{}
	_body, _err := client.GetLiveEditingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a live package channel.
//
// Description:
//
// ## [](#)Usage notes
//
// This API operation allows you to query the details of a live package channel, including the creation time, description, ingest endpoint, protocol, number of segments, and segment duration.
//
// @param request - GetLivePackageChannelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetLivePackageChannelResponse
func (client *Client) GetLivePackageChannelWithOptions(request *GetLivePackageChannelRequest, runtime *util.RuntimeOptions) (_result *GetLivePackageChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelName)) {
		query["ChannelName"] = request.ChannelName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLivePackageChannel"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLivePackageChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a live package channel.
//
// Description:
//
// ## [](#)Usage notes
//
// This API operation allows you to query the details of a live package channel, including the creation time, description, ingest endpoint, protocol, number of segments, and segment duration.
//
// @param request - GetLivePackageChannelRequest
//
// @return GetLivePackageChannelResponse
func (client *Client) GetLivePackageChannel(request *GetLivePackageChannelRequest) (_result *GetLivePackageChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLivePackageChannelResponse{}
	_body, _err := client.GetLivePackageChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a live package channel group by name.
//
// Description:
//
// ## [](#)Usage notes
//
// You can call this API operation to query the details of a specific channel group, including its name, description, origin domain, and creation and last modification timestamps.
//
// @param request - GetLivePackageChannelGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetLivePackageChannelGroupResponse
func (client *Client) GetLivePackageChannelGroupWithOptions(request *GetLivePackageChannelGroupRequest, runtime *util.RuntimeOptions) (_result *GetLivePackageChannelGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLivePackageChannelGroup"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLivePackageChannelGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a live package channel group by name.
//
// Description:
//
// ## [](#)Usage notes
//
// You can call this API operation to query the details of a specific channel group, including its name, description, origin domain, and creation and last modification timestamps.
//
// @param request - GetLivePackageChannelGroupRequest
//
// @return GetLivePackageChannelGroupResponse
func (client *Client) GetLivePackageChannelGroup(request *GetLivePackageChannelGroupRequest) (_result *GetLivePackageChannelGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLivePackageChannelGroupResponse{}
	_body, _err := client.GetLivePackageChannelGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries origin endpoints associated with a live package channel.
//
// Description:
//
// ## [](#)Usage notes
//
// @param request - GetLivePackageOriginEndpointRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetLivePackageOriginEndpointResponse
func (client *Client) GetLivePackageOriginEndpointWithOptions(request *GetLivePackageOriginEndpointRequest, runtime *util.RuntimeOptions) (_result *GetLivePackageOriginEndpointResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelName)) {
		query["ChannelName"] = request.ChannelName
	}

	if !tea.BoolValue(util.IsUnset(request.EndpointName)) {
		query["EndpointName"] = request.EndpointName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLivePackageOriginEndpoint"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLivePackageOriginEndpointResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries origin endpoints associated with a live package channel.
//
// Description:
//
// ## [](#)Usage notes
//
// @param request - GetLivePackageOriginEndpointRequest
//
// @return GetLivePackageOriginEndpointResponse
func (client *Client) GetLivePackageOriginEndpoint(request *GetLivePackageOriginEndpointRequest) (_result *GetLivePackageOriginEndpointResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLivePackageOriginEndpointResponse{}
	_body, _err := client.GetLivePackageOriginEndpointWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a live stream recording job.
//
// @param request - GetLiveRecordJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetLiveRecordJobResponse
func (client *Client) GetLiveRecordJobWithOptions(request *GetLiveRecordJobRequest, runtime *util.RuntimeOptions) (_result *GetLiveRecordJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLiveRecordJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLiveRecordJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a live stream recording job.
//
// @param request - GetLiveRecordJobRequest
//
// @return GetLiveRecordJobResponse
func (client *Client) GetLiveRecordJob(request *GetLiveRecordJobRequest) (_result *GetLiveRecordJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLiveRecordJobResponse{}
	_body, _err := client.GetLiveRecordJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a live stream recording template or a snapshot of the template.
//
// @param request - GetLiveRecordTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetLiveRecordTemplateResponse
func (client *Client) GetLiveRecordTemplateWithOptions(request *GetLiveRecordTemplateRequest, runtime *util.RuntimeOptions) (_result *GetLiveRecordTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLiveRecordTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLiveRecordTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a live stream recording template or a snapshot of the template.
//
// @param request - GetLiveRecordTemplateRequest
//
// @return GetLiveRecordTemplateResponse
func (client *Client) GetLiveRecordTemplate(request *GetLiveRecordTemplateRequest) (_result *GetLiveRecordTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLiveRecordTemplateResponse{}
	_body, _err := client.GetLiveRecordTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information a live stream snapshot job.
//
// @param request - GetLiveSnapshotJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetLiveSnapshotJobResponse
func (client *Client) GetLiveSnapshotJobWithOptions(request *GetLiveSnapshotJobRequest, runtime *util.RuntimeOptions) (_result *GetLiveSnapshotJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLiveSnapshotJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLiveSnapshotJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information a live stream snapshot job.
//
// @param request - GetLiveSnapshotJobRequest
//
// @return GetLiveSnapshotJobResponse
func (client *Client) GetLiveSnapshotJob(request *GetLiveSnapshotJobRequest) (_result *GetLiveSnapshotJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLiveSnapshotJobResponse{}
	_body, _err := client.GetLiveSnapshotJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a live stream snapshot template.
//
// @param request - GetLiveSnapshotTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetLiveSnapshotTemplateResponse
func (client *Client) GetLiveSnapshotTemplateWithOptions(request *GetLiveSnapshotTemplateRequest, runtime *util.RuntimeOptions) (_result *GetLiveSnapshotTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLiveSnapshotTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLiveSnapshotTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a live stream snapshot template.
//
// @param request - GetLiveSnapshotTemplateRequest
//
// @return GetLiveSnapshotTemplateResponse
func (client *Client) GetLiveSnapshotTemplate(request *GetLiveSnapshotTemplateRequest) (_result *GetLiveSnapshotTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLiveSnapshotTemplateResponse{}
	_body, _err := client.GetLiveSnapshotTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a live stream transcoding job.
//
// @param request - GetLiveTranscodeJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetLiveTranscodeJobResponse
func (client *Client) GetLiveTranscodeJobWithOptions(request *GetLiveTranscodeJobRequest, runtime *util.RuntimeOptions) (_result *GetLiveTranscodeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLiveTranscodeJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLiveTranscodeJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a live stream transcoding job.
//
// @param request - GetLiveTranscodeJobRequest
//
// @return GetLiveTranscodeJobResponse
func (client *Client) GetLiveTranscodeJob(request *GetLiveTranscodeJobRequest) (_result *GetLiveTranscodeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLiveTranscodeJobResponse{}
	_body, _err := client.GetLiveTranscodeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information a live stream transcoding template.
//
// @param request - GetLiveTranscodeTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetLiveTranscodeTemplateResponse
func (client *Client) GetLiveTranscodeTemplateWithOptions(request *GetLiveTranscodeTemplateRequest, runtime *util.RuntimeOptions) (_result *GetLiveTranscodeTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLiveTranscodeTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLiveTranscodeTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information a live stream transcoding template.
//
// @param request - GetLiveTranscodeTemplateRequest
//
// @return GetLiveTranscodeTemplateResponse
func (client *Client) GetLiveTranscodeTemplate(request *GetLiveTranscodeTemplateRequest) (_result *GetLiveTranscodeTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLiveTranscodeTemplateResponse{}
	_body, _err := client.GetLiveTranscodeTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains information about a specific MediaConnect flow.
//
// Description:
//
//	  When the specified flow ID is not available, an error code is returned.
//
//		- The returned StartTime is valid only when the flow is in the online state.
//
// @param request - GetMediaConnectFlowRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMediaConnectFlowResponse
func (client *Client) GetMediaConnectFlowWithOptions(request *GetMediaConnectFlowRequest, runtime *util.RuntimeOptions) (_result *GetMediaConnectFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FlowId)) {
		query["FlowId"] = request.FlowId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMediaConnectFlow"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMediaConnectFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains information about a specific MediaConnect flow.
//
// Description:
//
//	  When the specified flow ID is not available, an error code is returned.
//
//		- The returned StartTime is valid only when the flow is in the online state.
//
// @param request - GetMediaConnectFlowRequest
//
// @return GetMediaConnectFlowResponse
func (client *Client) GetMediaConnectFlow(request *GetMediaConnectFlowRequest) (_result *GetMediaConnectFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMediaConnectFlowResponse{}
	_body, _err := client.GetMediaConnectFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains information about the source of a MediaConnect flow.
//
// Description:
//
//	When the specified flow ID is not available, an error code is returned.
//
// @param request - GetMediaConnectFlowInputRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMediaConnectFlowInputResponse
func (client *Client) GetMediaConnectFlowInputWithOptions(request *GetMediaConnectFlowInputRequest, runtime *util.RuntimeOptions) (_result *GetMediaConnectFlowInputResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FlowId)) {
		query["FlowId"] = request.FlowId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMediaConnectFlowInput"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMediaConnectFlowInputResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains information about the source of a MediaConnect flow.
//
// Description:
//
//	When the specified flow ID is not available, an error code is returned.
//
// @param request - GetMediaConnectFlowInputRequest
//
// @return GetMediaConnectFlowInputResponse
func (client *Client) GetMediaConnectFlowInput(request *GetMediaConnectFlowInputRequest) (_result *GetMediaConnectFlowInputResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMediaConnectFlowInputResponse{}
	_body, _err := client.GetMediaConnectFlowInputWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains information about an output of a MediaConnect flow.
//
// Description:
//
//	When the specified flow ID is not available, an error code is returned.
//
// @param request - GetMediaConnectFlowOutputRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMediaConnectFlowOutputResponse
func (client *Client) GetMediaConnectFlowOutputWithOptions(request *GetMediaConnectFlowOutputRequest, runtime *util.RuntimeOptions) (_result *GetMediaConnectFlowOutputResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FlowId)) {
		query["FlowId"] = request.FlowId
	}

	if !tea.BoolValue(util.IsUnset(request.OutputName)) {
		query["OutputName"] = request.OutputName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMediaConnectFlowOutput"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMediaConnectFlowOutputResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains information about an output of a MediaConnect flow.
//
// Description:
//
//	When the specified flow ID is not available, an error code is returned.
//
// @param request - GetMediaConnectFlowOutputRequest
//
// @return GetMediaConnectFlowOutputResponse
func (client *Client) GetMediaConnectFlowOutput(request *GetMediaConnectFlowOutputRequest) (_result *GetMediaConnectFlowOutputResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMediaConnectFlowOutputResponse{}
	_body, _err := client.GetMediaConnectFlowOutputWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains the details of a transcoding task.
//
// @param request - GetMediaConvertJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMediaConvertJobResponse
func (client *Client) GetMediaConvertJobWithOptions(request *GetMediaConvertJobRequest, runtime *util.RuntimeOptions) (_result *GetMediaConvertJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMediaConvertJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMediaConvertJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains the details of a transcoding task.
//
// @param request - GetMediaConvertJobRequest
//
// @return GetMediaConvertJobResponse
func (client *Client) GetMediaConvertJob(request *GetMediaConvertJobRequest) (_result *GetMediaConvertJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMediaConvertJobResponse{}
	_body, _err := client.GetMediaConvertJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries information about a media asset based on the ID of the media asset in Intelligent Media Services (IMS) or the input URL of the media asset.
//
// Description:
//
// If the MediaId parameter is specified, the MediaId parameter is preferentially used for the query. If the MediaId parameter is left empty, the InputURL parameter must be specified.
//
// @param request - GetMediaInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMediaInfoResponse
func (client *Client) GetMediaInfoWithOptions(request *GetMediaInfoRequest, runtime *util.RuntimeOptions) (_result *GetMediaInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuthTimeout)) {
		query["AuthTimeout"] = request.AuthTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.InputURL)) {
		query["InputURL"] = request.InputURL
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.OutputType)) {
		query["OutputType"] = request.OutputType
	}

	if !tea.BoolValue(util.IsUnset(request.ReturnDetailedInfo)) {
		query["ReturnDetailedInfo"] = request.ReturnDetailedInfo
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMediaInfo"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMediaInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries information about a media asset based on the ID of the media asset in Intelligent Media Services (IMS) or the input URL of the media asset.
//
// Description:
//
// If the MediaId parameter is specified, the MediaId parameter is preferentially used for the query. If the MediaId parameter is left empty, the InputURL parameter must be specified.
//
// @param request - GetMediaInfoRequest
//
// @return GetMediaInfoResponse
func (client *Client) GetMediaInfo(request *GetMediaInfoRequest) (_result *GetMediaInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMediaInfoResponse{}
	_body, _err := client.GetMediaInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a media information analysis job.
//
// @param request - GetMediaInfoJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMediaInfoJobResponse
func (client *Client) GetMediaInfoJobWithOptions(request *GetMediaInfoJobRequest, runtime *util.RuntimeOptions) (_result *GetMediaInfoJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMediaInfoJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMediaInfoJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a media information analysis job.
//
// @param request - GetMediaInfoJobRequest
//
// @return GetMediaInfoJobResponse
func (client *Client) GetMediaInfoJob(request *GetMediaInfoJobRequest) (_result *GetMediaInfoJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMediaInfoJobResponse{}
	_body, _err := client.GetMediaInfoJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a MediaLive channel.
//
// Description:
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - GetMediaLiveChannelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMediaLiveChannelResponse
func (client *Client) GetMediaLiveChannelWithOptions(request *GetMediaLiveChannelRequest, runtime *util.RuntimeOptions) (_result *GetMediaLiveChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMediaLiveChannel"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMediaLiveChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a MediaLive channel.
//
// Description:
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - GetMediaLiveChannelRequest
//
// @return GetMediaLiveChannelResponse
func (client *Client) GetMediaLiveChannel(request *GetMediaLiveChannelRequest) (_result *GetMediaLiveChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMediaLiveChannelResponse{}
	_body, _err := client.GetMediaLiveChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a MediaLive input.
//
// Description:
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - GetMediaLiveInputRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMediaLiveInputResponse
func (client *Client) GetMediaLiveInputWithOptions(request *GetMediaLiveInputRequest, runtime *util.RuntimeOptions) (_result *GetMediaLiveInputResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputId)) {
		body["InputId"] = request.InputId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMediaLiveInput"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMediaLiveInputResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a MediaLive input.
//
// Description:
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - GetMediaLiveInputRequest
//
// @return GetMediaLiveInputResponse
func (client *Client) GetMediaLiveInput(request *GetMediaLiveInputRequest) (_result *GetMediaLiveInputResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMediaLiveInputResponse{}
	_body, _err := client.GetMediaLiveInputWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a security group in MediaLive.
//
// Description:
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - GetMediaLiveInputSecurityGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMediaLiveInputSecurityGroupResponse
func (client *Client) GetMediaLiveInputSecurityGroupWithOptions(request *GetMediaLiveInputSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *GetMediaLiveInputSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		body["SecurityGroupId"] = request.SecurityGroupId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMediaLiveInputSecurityGroup"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMediaLiveInputSecurityGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a security group in MediaLive.
//
// Description:
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - GetMediaLiveInputSecurityGroupRequest
//
// @return GetMediaLiveInputSecurityGroupResponse
func (client *Client) GetMediaLiveInputSecurityGroup(request *GetMediaLiveInputSecurityGroupRequest) (_result *GetMediaLiveInputSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMediaLiveInputSecurityGroupResponse{}
	_body, _err := client.GetMediaLiveInputSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about marks based on mark IDs.
//
// @param request - GetMediaMarksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMediaMarksResponse
func (client *Client) GetMediaMarksWithOptions(request *GetMediaMarksRequest, runtime *util.RuntimeOptions) (_result *GetMediaMarksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaMarkIds)) {
		query["MediaMarkIds"] = request.MediaMarkIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMediaMarks"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMediaMarksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about marks based on mark IDs.
//
// @param request - GetMediaMarksRequest
//
// @return GetMediaMarksResponse
func (client *Client) GetMediaMarks(request *GetMediaMarksRequest) (_result *GetMediaMarksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMediaMarksResponse{}
	_body, _err := client.GetMediaMarksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a media editing and production job. The requested information includes the state, timeline, template, and data of the job. You can call this operation to query only media editing and production jobs created within the past year.
//
// @param request - GetMediaProducingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMediaProducingJobResponse
func (client *Client) GetMediaProducingJobWithOptions(request *GetMediaProducingJobRequest, runtime *util.RuntimeOptions) (_result *GetMediaProducingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMediaProducingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMediaProducingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a media editing and production job. The requested information includes the state, timeline, template, and data of the job. You can call this operation to query only media editing and production jobs created within the past year.
//
// @param request - GetMediaProducingJobRequest
//
// @return GetMediaProducingJobResponse
func (client *Client) GetMediaProducingJob(request *GetMediaProducingJobRequest) (_result *GetMediaProducingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMediaProducingJobResponse{}
	_body, _err := client.GetMediaProducingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a packaging job.
//
// @param request - GetPackageJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPackageJobResponse
func (client *Client) GetPackageJobWithOptions(request *GetPackageJobRequest, runtime *util.RuntimeOptions) (_result *GetPackageJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPackageJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPackageJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a packaging job.
//
// @param request - GetPackageJobRequest
//
// @return GetPackageJobResponse
func (client *Client) GetPackageJob(request *GetPackageJobRequest) (_result *GetPackageJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPackageJobResponse{}
	_body, _err := client.GetPackageJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about an ApsaraVideo Media Processing (MPS) queue.
//
// @param request - GetPipelineRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPipelineResponse
func (client *Client) GetPipelineWithOptions(request *GetPipelineRequest, runtime *util.RuntimeOptions) (_result *GetPipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		query["PipelineId"] = request.PipelineId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPipeline"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPipelineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about an ApsaraVideo Media Processing (MPS) queue.
//
// @param request - GetPipelineRequest
//
// @return GetPipelineResponse
func (client *Client) GetPipeline(request *GetPipelineRequest) (_result *GetPipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPipelineResponse{}
	_body, _err := client.GetPipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the playback URL of a video or audio file based on its ID.
//
// Description:
//
// You use the ID of a video or audio file to query the playback URL of the file. Then, you can use the playback URL to play the audio or video in ApsaraVideo Player SDK (for URL-based playback) or a third-party player.
//
// @param request - GetPlayInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPlayInfoResponse
func (client *Client) GetPlayInfoWithOptions(request *GetPlayInfoRequest, runtime *util.RuntimeOptions) (_result *GetPlayInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuthTimeout)) {
		query["AuthTimeout"] = request.AuthTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.InputURL)) {
		query["InputURL"] = request.InputURL
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPlayInfo"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPlayInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the playback URL of a video or audio file based on its ID.
//
// Description:
//
// You use the ID of a video or audio file to query the playback URL of the file. Then, you can use the playback URL to play the audio or video in ApsaraVideo Player SDK (for URL-based playback) or a third-party player.
//
// @param request - GetPlayInfoRequest
//
// @return GetPlayInfoResponse
func (client *Client) GetPlayInfo(request *GetPlayInfoRequest) (_result *GetPlayInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPlayInfoResponse{}
	_body, _err := client.GetPlayInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a program.
//
// @param request - GetProgramRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetProgramResponse
func (client *Client) GetProgramWithOptions(request *GetProgramRequest, runtime *util.RuntimeOptions) (_result *GetProgramResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelName)) {
		query["ChannelName"] = request.ChannelName
	}

	if !tea.BoolValue(util.IsUnset(request.ProgramName)) {
		query["ProgramName"] = request.ProgramName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetProgram"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetProgramResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a program.
//
// @param request - GetProgramRequest
//
// @return GetProgramResponse
func (client *Client) GetProgram(request *GetProgramRequest) (_result *GetProgramResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetProgramResponse{}
	_body, _err := client.GetProgramWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询工程导出任务
//
// @param request - GetProjectExportJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetProjectExportJobResponse
func (client *Client) GetProjectExportJobWithOptions(request *GetProjectExportJobRequest, runtime *util.RuntimeOptions) (_result *GetProjectExportJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetProjectExportJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetProjectExportJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询工程导出任务
//
// @param request - GetProjectExportJobRequest
//
// @return GetProjectExportJobResponse
func (client *Client) GetProjectExportJob(request *GetProjectExportJobRequest) (_result *GetProjectExportJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetProjectExportJobResponse{}
	_body, _err := client.GetProjectExportJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取公共媒资内容信息
//
// @param request - GetPublicMediaInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPublicMediaInfoResponse
func (client *Client) GetPublicMediaInfoWithOptions(request *GetPublicMediaInfoRequest, runtime *util.RuntimeOptions) (_result *GetPublicMediaInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPublicMediaInfo"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("Anonymous"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPublicMediaInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取公共媒资内容信息
//
// @param request - GetPublicMediaInfoRequest
//
// @return GetPublicMediaInfoResponse
func (client *Client) GetPublicMediaInfo(request *GetPublicMediaInfoRequest) (_result *GetPublicMediaInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPublicMediaInfoResponse{}
	_body, _err := client.GetPublicMediaInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about an intelligent job and the execution results of the job based the job ID. You can call this operation to query only intelligent jobs created within the past year.
//
// @param request - GetSmartHandleJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSmartHandleJobResponse
func (client *Client) GetSmartHandleJobWithOptions(request *GetSmartHandleJobRequest, runtime *util.RuntimeOptions) (_result *GetSmartHandleJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSmartHandleJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSmartHandleJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about an intelligent job and the execution results of the job based the job ID. You can call this operation to query only intelligent jobs created within the past year.
//
// @param request - GetSmartHandleJobRequest
//
// @return GetSmartHandleJobResponse
func (client *Client) GetSmartHandleJob(request *GetSmartHandleJobRequest) (_result *GetSmartHandleJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSmartHandleJobResponse{}
	_body, _err := client.GetSmartHandleJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a snapshot job.
//
// @param request - GetSnapshotJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSnapshotJobResponse
func (client *Client) GetSnapshotJobWithOptions(request *GetSnapshotJobRequest, runtime *util.RuntimeOptions) (_result *GetSnapshotJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSnapshotJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSnapshotJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a snapshot job.
//
// @param request - GetSnapshotJobRequest
//
// @return GetSnapshotJobResponse
func (client *Client) GetSnapshotJob(request *GetSnapshotJobRequest) (_result *GetSnapshotJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSnapshotJobResponse{}
	_body, _err := client.GetSnapshotJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the accessible URLs of the output images of a snapshot job.
//
// @param request - GetSnapshotUrlsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSnapshotUrlsResponse
func (client *Client) GetSnapshotUrlsWithOptions(request *GetSnapshotUrlsRequest, runtime *util.RuntimeOptions) (_result *GetSnapshotUrlsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSnapshotUrls"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSnapshotUrlsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the accessible URLs of the output images of a snapshot job.
//
// @param request - GetSnapshotUrlsRequest
//
// @return GetSnapshotUrlsResponse
func (client *Client) GetSnapshotUrls(request *GetSnapshotUrlsRequest) (_result *GetSnapshotUrlsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSnapshotUrlsResponse{}
	_body, _err := client.GetSnapshotUrlsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a source in MediaWeaver.
//
// @param request - GetSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSourceResponse
func (client *Client) GetSourceWithOptions(request *GetSourceRequest, runtime *util.RuntimeOptions) (_result *GetSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SourceLocationName)) {
		query["SourceLocationName"] = request.SourceLocationName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceName)) {
		query["SourceName"] = request.SourceName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceType)) {
		query["SourceType"] = request.SourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSource"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a source in MediaWeaver.
//
// @param request - GetSourceRequest
//
// @return GetSourceResponse
func (client *Client) GetSource(request *GetSourceRequest) (_result *GetSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSourceResponse{}
	_body, _err := client.GetSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a source location.
//
// @param request - GetSourceLocationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSourceLocationResponse
func (client *Client) GetSourceLocationWithOptions(request *GetSourceLocationRequest, runtime *util.RuntimeOptions) (_result *GetSourceLocationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SourceLocationName)) {
		query["SourceLocationName"] = request.SourceLocationName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSourceLocation"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSourceLocationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a source location.
//
// @param request - GetSourceLocationRequest
//
// @return GetSourceLocationResponse
func (client *Client) GetSourceLocation(request *GetSourceLocationRequest) (_result *GetSourceLocationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSourceLocationResponse{}
	_body, _err := client.GetSourceLocationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取存储地址列表
//
// @param request - GetStorageListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetStorageListResponse
func (client *Client) GetStorageListWithOptions(request *GetStorageListRequest, runtime *util.RuntimeOptions) (_result *GetStorageListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.StorageType)) {
		query["StorageType"] = request.StorageType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetStorageList"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetStorageListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取存储地址列表
//
// @param request - GetStorageListRequest
//
// @return GetStorageListResponse
func (client *Client) GetStorageList(request *GetStorageListRequest) (_result *GetStorageListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetStorageListResponse{}
	_body, _err := client.GetStorageListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a system template.
//
// @param request - GetSystemTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSystemTemplateResponse
func (client *Client) GetSystemTemplateWithOptions(request *GetSystemTemplateRequest, runtime *util.RuntimeOptions) (_result *GetSystemTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSystemTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSystemTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a system template.
//
// @param request - GetSystemTemplateRequest
//
// @return GetSystemTemplateResponse
func (client *Client) GetSystemTemplate(request *GetSystemTemplateRequest) (_result *GetSystemTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSystemTemplateResponse{}
	_body, _err := client.GetSystemTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a template based on the template ID. You can call this operation to query the information about an advanced template if the template is in the Available state.
//
// Description:
//
// A template is an encapsulation of the timeline of a media editing and production job. You can define a common timeline as a template. When you have the same requirements, you need to only specify key parameters and materials to produce videos.
//
//   - For more information about how to use a regular template, see [Create and use a regular template](https://help.aliyun.com/document_detail/445399.html).
//
//   - For more information about how to use an advanced template, see [Create and use advanced templates](https://help.aliyun.com/document_detail/445389.html).
//
// @param request - GetTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTemplateResponse
func (client *Client) GetTemplateWithOptions(request *GetTemplateRequest, runtime *util.RuntimeOptions) (_result *GetTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RelatedMediaidFlag)) {
		query["RelatedMediaidFlag"] = request.RelatedMediaidFlag
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a template based on the template ID. You can call this operation to query the information about an advanced template if the template is in the Available state.
//
// Description:
//
// A template is an encapsulation of the timeline of a media editing and production job. You can define a common timeline as a template. When you have the same requirements, you need to only specify key parameters and materials to produce videos.
//
//   - For more information about how to use a regular template, see [Create and use a regular template](https://help.aliyun.com/document_detail/445399.html).
//
//   - For more information about how to use an advanced template, see [Create and use advanced templates](https://help.aliyun.com/document_detail/445389.html).
//
// @param request - GetTemplateRequest
//
// @return GetTemplateResponse
func (client *Client) GetTemplate(request *GetTemplateRequest) (_result *GetTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTemplateResponse{}
	_body, _err := client.GetTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the URLs of materials associated with an advanced template for use by the advanced template editor. The URLs expire in 30 minutes. FileList is an array of materials that you want to query. If you do not specify this parameter, the URLs of all materials are returned. A maximum of 400 URLs can be returned.
//
// @param request - GetTemplateMaterialsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTemplateMaterialsResponse
func (client *Client) GetTemplateMaterialsWithOptions(request *GetTemplateMaterialsRequest, runtime *util.RuntimeOptions) (_result *GetTemplateMaterialsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileList)) {
		query["FileList"] = request.FileList
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTemplateMaterials"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTemplateMaterialsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the URLs of materials associated with an advanced template for use by the advanced template editor. The URLs expire in 30 minutes. FileList is an array of materials that you want to query. If you do not specify this parameter, the URLs of all materials are returned. A maximum of 400 URLs can be returned.
//
// @param request - GetTemplateMaterialsRequest
//
// @return GetTemplateMaterialsResponse
func (client *Client) GetTemplateMaterials(request *GetTemplateMaterialsRequest) (_result *GetTemplateMaterialsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTemplateMaterialsResponse{}
	_body, _err := client.GetTemplateMaterialsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the parameters for replaceable materials in a template, including the parameter names, default values, and material thumbnails. Only advanced templates are supported.
//
// @param request - GetTemplateParamsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTemplateParamsResponse
func (client *Client) GetTemplateParamsWithOptions(request *GetTemplateParamsRequest, runtime *util.RuntimeOptions) (_result *GetTemplateParamsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTemplateParams"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTemplateParamsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the parameters for replaceable materials in a template, including the parameter names, default values, and material thumbnails. Only advanced templates are supported.
//
// @param request - GetTemplateParamsRequest
//
// @return GetTemplateParamsResponse
func (client *Client) GetTemplateParams(request *GetTemplateParamsRequest) (_result *GetTemplateParamsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTemplateParamsResponse{}
	_body, _err := client.GetTemplateParamsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a transcoding job.
//
// @param request - GetTranscodeJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTranscodeJobResponse
func (client *Client) GetTranscodeJobWithOptions(request *GetTranscodeJobRequest, runtime *util.RuntimeOptions) (_result *GetTranscodeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ParentJobId)) {
		query["ParentJobId"] = request.ParentJobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTranscodeJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTranscodeJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a transcoding job.
//
// @param request - GetTranscodeJobRequest
//
// @return GetTranscodeJobResponse
func (client *Client) GetTranscodeJob(request *GetTranscodeJobRequest) (_result *GetTranscodeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTranscodeJobResponse{}
	_body, _err := client.GetTranscodeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about URL-based upload jobs.
//
// Description:
//
// You can call this operation to query the information, including the upload status, user data, creation time, and completion time, about URL-based upload jobs based on the returned job IDs or the URLs used during the upload.
//
// If an upload job fails, you can view the error code and error message. If an upload job is successful, you can obtain the video ID.
//
// @param request - GetUrlUploadInfosRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetUrlUploadInfosResponse
func (client *Client) GetUrlUploadInfosWithOptions(request *GetUrlUploadInfosRequest, runtime *util.RuntimeOptions) (_result *GetUrlUploadInfosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobIds)) {
		query["JobIds"] = request.JobIds
	}

	if !tea.BoolValue(util.IsUnset(request.UploadURLs)) {
		query["UploadURLs"] = request.UploadURLs
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetUrlUploadInfos"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetUrlUploadInfosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about URL-based upload jobs.
//
// Description:
//
// You can call this operation to query the information, including the upload status, user data, creation time, and completion time, about URL-based upload jobs based on the returned job IDs or the URLs used during the upload.
//
// If an upload job fails, you can view the error code and error message. If an upload job is successful, you can obtain the video ID.
//
// @param request - GetUrlUploadInfosRequest
//
// @return GetUrlUploadInfosResponse
func (client *Client) GetUrlUploadInfos(request *GetUrlUploadInfosRequest) (_result *GetUrlUploadInfosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetUrlUploadInfosResponse{}
	_body, _err := client.GetUrlUploadInfosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries information about video and audio files.
//
// Description:
//
// You can call this operation to query information about up to the first 5,000 audio and video files based on the filter condition, such as the status or category ID of the file. We recommend that you set the StartTime and EndTime parameters to narrow down the time range and perform multiple queries to obtain data.
//
// @param request - GetVideoListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetVideoListResponse
func (client *Client) GetVideoListWithOptions(request *GetVideoListRequest, runtime *util.RuntimeOptions) (_result *GetVideoListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CateId)) {
		query["CateId"] = request.CateId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetVideoList"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetVideoListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries information about video and audio files.
//
// Description:
//
// You can call this operation to query information about up to the first 5,000 audio and video files based on the filter condition, such as the status or category ID of the file. We recommend that you set the StartTime and EndTime parameters to narrow down the time range and perform multiple queries to obtain data.
//
// @param request - GetVideoListRequest
//
// @return GetVideoListResponse
func (client *Client) GetVideoList(request *GetVideoListRequest) (_result *GetVideoListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetVideoListResponse{}
	_body, _err := client.GetVideoListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a VOD packaging asset.
//
// @param request - GetVodPackagingAssetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetVodPackagingAssetResponse
func (client *Client) GetVodPackagingAssetWithOptions(request *GetVodPackagingAssetRequest, runtime *util.RuntimeOptions) (_result *GetVodPackagingAssetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AssetName)) {
		query["AssetName"] = request.AssetName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetVodPackagingAsset"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetVodPackagingAssetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a VOD packaging asset.
//
// @param request - GetVodPackagingAssetRequest
//
// @return GetVodPackagingAssetResponse
func (client *Client) GetVodPackagingAsset(request *GetVodPackagingAssetRequest) (_result *GetVodPackagingAssetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetVodPackagingAssetResponse{}
	_body, _err := client.GetVodPackagingAssetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a packaging configuration.
//
// @param request - GetVodPackagingConfigurationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetVodPackagingConfigurationResponse
func (client *Client) GetVodPackagingConfigurationWithOptions(request *GetVodPackagingConfigurationRequest, runtime *util.RuntimeOptions) (_result *GetVodPackagingConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigurationName)) {
		query["ConfigurationName"] = request.ConfigurationName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetVodPackagingConfiguration"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetVodPackagingConfigurationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a packaging configuration.
//
// @param request - GetVodPackagingConfigurationRequest
//
// @return GetVodPackagingConfigurationResponse
func (client *Client) GetVodPackagingConfiguration(request *GetVodPackagingConfigurationRequest) (_result *GetVodPackagingConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetVodPackagingConfigurationResponse{}
	_body, _err := client.GetVodPackagingConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a packaging group.
//
// @param request - GetVodPackagingGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetVodPackagingGroupResponse
func (client *Client) GetVodPackagingGroupWithOptions(request *GetVodPackagingGroupRequest, runtime *util.RuntimeOptions) (_result *GetVodPackagingGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetVodPackagingGroup"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetVodPackagingGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a packaging group.
//
// @param request - GetVodPackagingGroupRequest
//
// @return GetVodPackagingGroupResponse
func (client *Client) GetVodPackagingGroup(request *GetVodPackagingGroupRequest) (_result *GetVodPackagingGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetVodPackagingGroupResponse{}
	_body, _err := client.GetVodPackagingGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a workflow task by task ID, including the workflow ID and the status and result of the task. You can query only the workflow task data of the last year.
//
// @param request - GetWorkflowTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetWorkflowTaskResponse
func (client *Client) GetWorkflowTaskWithOptions(request *GetWorkflowTaskRequest, runtime *util.RuntimeOptions) (_result *GetWorkflowTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetWorkflowTask"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetWorkflowTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a workflow task by task ID, including the workflow ID and the status and result of the task. You can query only the workflow task data of the last year.
//
// @param request - GetWorkflowTaskRequest
//
// @return GetWorkflowTaskResponse
func (client *Client) GetWorkflowTask(request *GetWorkflowTaskRequest) (_result *GetWorkflowTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetWorkflowTaskResponse{}
	_body, _err := client.GetWorkflowTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a media asset in a search library. Before you call this operation, you must create a search library.
//
// @param request - InsertMediaToSearchLibRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InsertMediaToSearchLibResponse
func (client *Client) InsertMediaToSearchLibWithOptions(request *InsertMediaToSearchLibRequest, runtime *util.RuntimeOptions) (_result *InsertMediaToSearchLibResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ImagesInput)) {
		query["ImagesInput"] = request.ImagesInput
	}

	if !tea.BoolValue(util.IsUnset(request.Input)) {
		query["Input"] = request.Input
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.MsgBody)) {
		query["MsgBody"] = request.MsgBody
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InsertMediaToSearchLib"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InsertMediaToSearchLibResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a media asset in a search library. Before you call this operation, you must create a search library.
//
// @param request - InsertMediaToSearchLibRequest
//
// @return InsertMediaToSearchLibResponse
func (client *Client) InsertMediaToSearchLib(request *InsertMediaToSearchLibRequest) (_result *InsertMediaToSearchLibResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InsertMediaToSearchLibResponse{}
	_body, _err := client.InsertMediaToSearchLibWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 列出智能体的对话历史记录。
//
// @param request - ListAIAgentDialoguesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAIAgentDialoguesResponse
func (client *Client) ListAIAgentDialoguesWithOptions(request *ListAIAgentDialoguesRequest, runtime *util.RuntimeOptions) (_result *ListAIAgentDialoguesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		query["Order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RoundLimit)) {
		query["RoundLimit"] = request.RoundLimit
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		query["SessionId"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAIAgentDialogues"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAIAgentDialoguesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 列出智能体的对话历史记录。
//
// @param request - ListAIAgentDialoguesRequest
//
// @return ListAIAgentDialoguesResponse
func (client *Client) ListAIAgentDialogues(request *ListAIAgentDialoguesRequest) (_result *ListAIAgentDialoguesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAIAgentDialoguesResponse{}
	_body, _err := client.ListAIAgentDialoguesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of AI agents.
//
// Description:
//
// ## [](#)Request description
//
// You can call this operation to query a list of AI agents based on the `AIAgentId`. The optional parameters include `StartTime`, `EndTime`, `PageSize`, and `PageNumber`. The returned result includes the status, runtime configurations, template configurations, custom information, and the URL of call log file for each AI agent.
//
// **Note**:
//
//   - The default value of `PageSize` is 10, and the default value of `PageNumber` is 1.
//
// @param request - ListAIAgentInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAIAgentInstanceResponse
func (client *Client) ListAIAgentInstanceWithOptions(request *ListAIAgentInstanceRequest, runtime *util.RuntimeOptions) (_result *ListAIAgentInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AIAgentId)) {
		query["AIAgentId"] = request.AIAgentId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAIAgentInstance"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAIAgentInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of AI agents.
//
// Description:
//
// ## [](#)Request description
//
// You can call this operation to query a list of AI agents based on the `AIAgentId`. The optional parameters include `StartTime`, `EndTime`, `PageSize`, and `PageNumber`. The returned result includes the status, runtime configurations, template configurations, custom information, and the URL of call log file for each AI agent.
//
// **Note**:
//
//   - The default value of `PageSize` is 10, and the default value of `PageNumber` is 1.
//
// @param request - ListAIAgentInstanceRequest
//
// @return ListAIAgentInstanceResponse
func (client *Client) ListAIAgentInstance(request *ListAIAgentInstanceRequest) (_result *ListAIAgentInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAIAgentInstanceResponse{}
	_body, _err := client.ListAIAgentInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 罗列用户电话资源接口
//
// @param request - ListAIAgentPhoneNumberRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAIAgentPhoneNumberResponse
func (client *Client) ListAIAgentPhoneNumberWithOptions(request *ListAIAgentPhoneNumberRequest, runtime *util.RuntimeOptions) (_result *ListAIAgentPhoneNumberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Number)) {
		query["Number"] = request.Number
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAIAgentPhoneNumber"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAIAgentPhoneNumberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 罗列用户电话资源接口
//
// @param request - ListAIAgentPhoneNumberRequest
//
// @return ListAIAgentPhoneNumberResponse
func (client *Client) ListAIAgentPhoneNumber(request *ListAIAgentPhoneNumberRequest) (_result *ListAIAgentPhoneNumberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAIAgentPhoneNumberResponse{}
	_body, _err := client.ListAIAgentPhoneNumberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains ad insertion configurations.
//
// @param request - ListAdInsertionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAdInsertionsResponse
func (client *Client) ListAdInsertionsWithOptions(request *ListAdInsertionsRequest, runtime *util.RuntimeOptions) (_result *ListAdInsertionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAdInsertions"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAdInsertionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains ad insertion configurations.
//
// @param request - ListAdInsertionsRequest
//
// @return ListAdInsertionsResponse
func (client *Client) ListAdInsertions(request *ListAdInsertionsRequest) (_result *ListAdInsertionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAdInsertionsResponse{}
	_body, _err := client.ListAdInsertionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Lists alerts received in MediaWeaver.
//
// @param request - ListAlertsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAlertsResponse
func (client *Client) ListAlertsWithOptions(request *ListAlertsRequest, runtime *util.RuntimeOptions) (_result *ListAlertsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.GmtEnd)) {
		query["GmtEnd"] = request.GmtEnd
	}

	if !tea.BoolValue(util.IsUnset(request.GmtStart)) {
		query["GmtStart"] = request.GmtStart
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceArn)) {
		query["ResourceArn"] = request.ResourceArn
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.SortByModifiedTime)) {
		query["SortByModifiedTime"] = request.SortByModifiedTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAlerts"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAlertsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Lists alerts received in MediaWeaver.
//
// @param request - ListAlertsRequest
//
// @return ListAlertsResponse
func (client *Client) ListAlerts(request *ListAlertsRequest) (_result *ListAlertsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAlertsResponse{}
	_body, _err := client.ListAlertsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of tags of media assets in the public media library.
//
// @param request - ListAllPublicMediaTagsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAllPublicMediaTagsResponse
func (client *Client) ListAllPublicMediaTagsWithOptions(request *ListAllPublicMediaTagsRequest, runtime *util.RuntimeOptions) (_result *ListAllPublicMediaTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessType)) {
		query["BusinessType"] = request.BusinessType
	}

	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		query["EntityId"] = request.EntityId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAllPublicMediaTags"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("Anonymous"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAllPublicMediaTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of tags of media assets in the public media library.
//
// @param request - ListAllPublicMediaTagsRequest
//
// @return ListAllPublicMediaTagsResponse
func (client *Client) ListAllPublicMediaTags(request *ListAllPublicMediaTagsRequest) (_result *ListAllPublicMediaTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAllPublicMediaTagsResponse{}
	_body, _err := client.ListAllPublicMediaTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of digital human training jobs.
//
// @param request - ListAvatarTrainingJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAvatarTrainingJobsResponse
func (client *Client) ListAvatarTrainingJobsWithOptions(request *ListAvatarTrainingJobsRequest, runtime *util.RuntimeOptions) (_result *ListAvatarTrainingJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAvatarTrainingJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAvatarTrainingJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of digital human training jobs.
//
// @param request - ListAvatarTrainingJobsRequest
//
// @return ListAvatarTrainingJobsResponse
func (client *Client) ListAvatarTrainingJobs(request *ListAvatarTrainingJobsRequest) (_result *ListAvatarTrainingJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAvatarTrainingJobsResponse{}
	_body, _err := client.ListAvatarTrainingJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of trained digital humans.
//
// @param request - ListAvatarsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAvatarsResponse
func (client *Client) ListAvatarsWithOptions(request *ListAvatarsRequest, runtime *util.RuntimeOptions) (_result *ListAvatarsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AvatarType)) {
		query["AvatarType"] = request.AvatarType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAvatars"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAvatarsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of trained digital humans.
//
// @param request - ListAvatarsRequest
//
// @return ListAvatarsResponse
func (client *Client) ListAvatars(request *ListAvatarsRequest) (_result *ListAvatarsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAvatarsResponse{}
	_body, _err := client.ListAvatarsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of quick video production jobs based on conditions such as the job type and state.
//
// @param request - ListBatchMediaProducingJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListBatchMediaProducingJobsResponse
func (client *Client) ListBatchMediaProducingJobsWithOptions(request *ListBatchMediaProducingJobsRequest, runtime *util.RuntimeOptions) (_result *ListBatchMediaProducingJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.JobType)) {
		query["JobType"] = request.JobType
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListBatchMediaProducingJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListBatchMediaProducingJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of quick video production jobs based on conditions such as the job type and state.
//
// @param request - ListBatchMediaProducingJobsRequest
//
// @return ListBatchMediaProducingJobsResponse
func (client *Client) ListBatchMediaProducingJobs(request *ListBatchMediaProducingJobsRequest) (_result *ListBatchMediaProducingJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListBatchMediaProducingJobsResponse{}
	_body, _err := client.ListBatchMediaProducingJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Lists alerts for resources in a MediaWeaver channel.
//
// @param request - ListChannelAlertsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListChannelAlertsResponse
func (client *Client) ListChannelAlertsWithOptions(request *ListChannelAlertsRequest, runtime *util.RuntimeOptions) (_result *ListChannelAlertsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.GmtEnd)) {
		query["GmtEnd"] = request.GmtEnd
	}

	if !tea.BoolValue(util.IsUnset(request.GmtStart)) {
		query["GmtStart"] = request.GmtStart
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceArn)) {
		query["ResourceArn"] = request.ResourceArn
	}

	if !tea.BoolValue(util.IsUnset(request.SortByModifiedTime)) {
		query["SortByModifiedTime"] = request.SortByModifiedTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListChannelAlerts"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListChannelAlertsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Lists alerts for resources in a MediaWeaver channel.
//
// @param request - ListChannelAlertsRequest
//
// @return ListChannelAlertsResponse
func (client *Client) ListChannelAlerts(request *ListChannelAlertsRequest) (_result *ListChannelAlertsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListChannelAlertsResponse{}
	_body, _err := client.ListChannelAlertsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Lists MediaWeaver channels.
//
// @param request - ListChannelsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListChannelsResponse
func (client *Client) ListChannelsWithOptions(request *ListChannelsRequest, runtime *util.RuntimeOptions) (_result *ListChannelsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelName)) {
		query["ChannelName"] = request.ChannelName
	}

	if !tea.BoolValue(util.IsUnset(request.ChannelTier)) {
		query["ChannelTier"] = request.ChannelTier
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PlaybackMode)) {
		query["PlaybackMode"] = request.PlaybackMode
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.SortByModifiedTime)) {
		query["SortByModifiedTime"] = request.SortByModifiedTime
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		query["State"] = request.State
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListChannels"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListChannelsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Lists MediaWeaver channels.
//
// @param request - ListChannelsRequest
//
// @return ListChannelsResponse
func (client *Client) ListChannels(request *ListChannelsRequest) (_result *ListChannelsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListChannelsResponse{}
	_body, _err := client.ListChannelsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of custom templates.
//
// @param request - ListCustomTemplatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCustomTemplatesResponse
func (client *Client) ListCustomTemplatesWithOptions(request *ListCustomTemplatesRequest, runtime *util.RuntimeOptions) (_result *ListCustomTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Subtype)) {
		query["Subtype"] = request.Subtype
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCustomTemplates"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCustomTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of custom templates.
//
// @param request - ListCustomTemplatesRequest
//
// @return ListCustomTemplatesResponse
func (client *Client) ListCustomTemplates(request *ListCustomTemplatesRequest) (_result *ListCustomTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCustomTemplatesResponse{}
	_body, _err := client.ListCustomTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of human voice cloning jobs.
//
// @param request - ListCustomizedVoiceJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCustomizedVoiceJobsResponse
func (client *Client) ListCustomizedVoiceJobsWithOptions(request *ListCustomizedVoiceJobsRequest, runtime *util.RuntimeOptions) (_result *ListCustomizedVoiceJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCustomizedVoiceJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCustomizedVoiceJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of human voice cloning jobs.
//
// @param request - ListCustomizedVoiceJobsRequest
//
// @return ListCustomizedVoiceJobsResponse
func (client *Client) ListCustomizedVoiceJobs(request *ListCustomizedVoiceJobsRequest) (_result *ListCustomizedVoiceJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCustomizedVoiceJobsResponse{}
	_body, _err := client.ListCustomizedVoiceJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of personalized human voices.
//
// @param request - ListCustomizedVoicesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCustomizedVoicesResponse
func (client *Client) ListCustomizedVoicesWithOptions(request *ListCustomizedVoicesRequest, runtime *util.RuntimeOptions) (_result *ListCustomizedVoicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCustomizedVoices"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCustomizedVoicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of personalized human voices.
//
// @param request - ListCustomizedVoicesRequest
//
// @return ListCustomizedVoicesResponse
func (client *Client) ListCustomizedVoices(request *ListCustomizedVoicesRequest) (_result *ListCustomizedVoicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCustomizedVoicesResponse{}
	_body, _err := client.ListCustomizedVoicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of media fingerprint libraries.
//
// @param request - ListDNADBRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDNADBResponse
func (client *Client) ListDNADBWithOptions(request *ListDNADBRequest, runtime *util.RuntimeOptions) (_result *ListDNADBResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBIds)) {
		query["DBIds"] = request.DBIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDNADB"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDNADBResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of media fingerprint libraries.
//
// @param request - ListDNADBRequest
//
// @return ListDNADBResponse
func (client *Client) ListDNADB(request *ListDNADBRequest) (_result *ListDNADBResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDNADBResponse{}
	_body, _err := client.ListDNADBWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of files in a media fingerprint library.
//
// Description:
//
// You can call this operation to query files in a media fingerprint library based on the library ID. The queried results can be paginated.
//
// @param request - ListDNAFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDNAFilesResponse
func (client *Client) ListDNAFilesWithOptions(request *ListDNAFilesRequest, runtime *util.RuntimeOptions) (_result *ListDNAFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBId)) {
		query["DBId"] = request.DBId
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDNAFiles"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDNAFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of files in a media fingerprint library.
//
// Description:
//
// You can call this operation to query files in a media fingerprint library based on the library ID. The queried results can be paginated.
//
// @param request - ListDNAFilesRequest
//
// @return ListDNAFilesResponse
func (client *Client) ListDNAFiles(request *ListDNAFilesRequest) (_result *ListDNAFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDNAFilesResponse{}
	_body, _err := client.ListDNAFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of image animation jobs.
//
// @param request - ListDynamicImageJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDynamicImageJobsResponse
func (client *Client) ListDynamicImageJobsWithOptions(request *ListDynamicImageJobsRequest, runtime *util.RuntimeOptions) (_result *ListDynamicImageJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndOfCreateTime)) {
		query["EndOfCreateTime"] = request.EndOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartOfCreateTime)) {
		query["StartOfCreateTime"] = request.StartOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDynamicImageJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDynamicImageJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of image animation jobs.
//
// @param request - ListDynamicImageJobsRequest
//
// @return ListDynamicImageJobsResponse
func (client *Client) ListDynamicImageJobs(request *ListDynamicImageJobsRequest) (_result *ListDynamicImageJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDynamicImageJobsResponse{}
	_body, _err := client.ListDynamicImageJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of projects that meet the specified conditions. You can filter projects by project creation time.
//
// @param request - ListEditingProjectsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListEditingProjectsResponse
func (client *Client) ListEditingProjectsWithOptions(request *ListEditingProjectsRequest, runtime *util.RuntimeOptions) (_result *ListEditingProjectsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CreateSource)) {
		query["CreateSource"] = request.CreateSource
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectType)) {
		query["ProjectType"] = request.ProjectType
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateType)) {
		query["TemplateType"] = request.TemplateType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListEditingProjects"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListEditingProjectsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of projects that meet the specified conditions. You can filter projects by project creation time.
//
// @param request - ListEditingProjectsRequest
//
// @return ListEditingProjectsResponse
func (client *Client) ListEditingProjects(request *ListEditingProjectsRequest) (_result *ListEditingProjectsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListEditingProjectsResponse{}
	_body, _err := client.ListEditingProjectsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询所有热词库的列表
//
// @param request - ListHotwordLibrariesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHotwordLibrariesResponse
func (client *Client) ListHotwordLibrariesWithOptions(request *ListHotwordLibrariesRequest, runtime *util.RuntimeOptions) (_result *ListHotwordLibrariesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.UsageScenario)) {
		query["UsageScenario"] = request.UsageScenario
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHotwordLibraries"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListHotwordLibrariesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询所有热词库的列表
//
// @param request - ListHotwordLibrariesRequest
//
// @return ListHotwordLibrariesResponse
func (client *Client) ListHotwordLibraries(request *ListHotwordLibrariesRequest) (_result *ListHotwordLibrariesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHotwordLibrariesResponse{}
	_body, _err := client.ListHotwordLibrariesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries live package channel groups by page. Fuzzy search by name or description and sorting are supported.
//
// Description:
//
// ## [](#)Usage notes
//
// @param request - ListLivePackageChannelGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLivePackageChannelGroupsResponse
func (client *Client) ListLivePackageChannelGroupsWithOptions(request *ListLivePackageChannelGroupsRequest, runtime *util.RuntimeOptions) (_result *ListLivePackageChannelGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLivePackageChannelGroups"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLivePackageChannelGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries live package channel groups by page. Fuzzy search by name or description and sorting are supported.
//
// Description:
//
// ## [](#)Usage notes
//
// @param request - ListLivePackageChannelGroupsRequest
//
// @return ListLivePackageChannelGroupsResponse
func (client *Client) ListLivePackageChannelGroups(request *ListLivePackageChannelGroupsRequest) (_result *ListLivePackageChannelGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLivePackageChannelGroupsResponse{}
	_body, _err := client.ListLivePackageChannelGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries live package channels by channel group and keyword. Paging and sorting are supported.
//
// Description:
//
// ## [](#)Usage notes
//
// This API operation allows you to query live package channels by **GroupName*	- and **Keyword**. Keyword is optional. You can sort the channels by creation time in ascending or descending order and paginate the results. This facilitates the management of channels and retrieval of channel information.
//
//   - **GroupName*	- is required to specify the channel group to which the channel belongs.
//
//   - **Keyword*	- supports fuzzy match of channel names or descriptions, which helps quickly filter desired channels.
//
//   - **PageNo*	- and **PageSize*	- can help control the paging of returned results to facilitate batch processing of data.
//
//   - **SortBy*	- allows you to customize how the results are sorted. By default, the results are sorted in descending order.
//
// **RequestId*	- in the response is used for subsequent troubleshooting. **TotalCount*	- indicates the total number of channels that meet the conditions.
//
// @param request - ListLivePackageChannelsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLivePackageChannelsResponse
func (client *Client) ListLivePackageChannelsWithOptions(request *ListLivePackageChannelsRequest, runtime *util.RuntimeOptions) (_result *ListLivePackageChannelsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLivePackageChannels"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLivePackageChannelsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries live package channels by channel group and keyword. Paging and sorting are supported.
//
// Description:
//
// ## [](#)Usage notes
//
// This API operation allows you to query live package channels by **GroupName*	- and **Keyword**. Keyword is optional. You can sort the channels by creation time in ascending or descending order and paginate the results. This facilitates the management of channels and retrieval of channel information.
//
//   - **GroupName*	- is required to specify the channel group to which the channel belongs.
//
//   - **Keyword*	- supports fuzzy match of channel names or descriptions, which helps quickly filter desired channels.
//
//   - **PageNo*	- and **PageSize*	- can help control the paging of returned results to facilitate batch processing of data.
//
//   - **SortBy*	- allows you to customize how the results are sorted. By default, the results are sorted in descending order.
//
// **RequestId*	- in the response is used for subsequent troubleshooting. **TotalCount*	- indicates the total number of channels that meet the conditions.
//
// @param request - ListLivePackageChannelsRequest
//
// @return ListLivePackageChannelsResponse
func (client *Client) ListLivePackageChannels(request *ListLivePackageChannelsRequest) (_result *ListLivePackageChannelsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLivePackageChannelsResponse{}
	_body, _err := client.ListLivePackageChannelsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries origin endpoints by channel group and channel name. Paging and sorting are supported.
//
// Description:
//
// ## [](#)Usage notes
//
// This API operation allows you to query origin endpoints associated with a live package channel. The results include detailed configurations about the origin endpoints, such as access URL, protocol, and security policies. Paging and sorting by creation time are supported.
//
// @param request - ListLivePackageOriginEndpointsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLivePackageOriginEndpointsResponse
func (client *Client) ListLivePackageOriginEndpointsWithOptions(request *ListLivePackageOriginEndpointsRequest, runtime *util.RuntimeOptions) (_result *ListLivePackageOriginEndpointsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelName)) {
		query["ChannelName"] = request.ChannelName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLivePackageOriginEndpoints"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLivePackageOriginEndpointsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries origin endpoints by channel group and channel name. Paging and sorting are supported.
//
// Description:
//
// ## [](#)Usage notes
//
// This API operation allows you to query origin endpoints associated with a live package channel. The results include detailed configurations about the origin endpoints, such as access URL, protocol, and security policies. Paging and sorting by creation time are supported.
//
// @param request - ListLivePackageOriginEndpointsRequest
//
// @return ListLivePackageOriginEndpointsResponse
func (client *Client) ListLivePackageOriginEndpoints(request *ListLivePackageOriginEndpointsRequest) (_result *ListLivePackageOriginEndpointsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLivePackageOriginEndpointsResponse{}
	_body, _err := client.ListLivePackageOriginEndpointsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries all recording index files in the specified period of time.
//
// @param request - ListLiveRecordFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLiveRecordFilesResponse
func (client *Client) ListLiveRecordFilesWithOptions(request *ListLiveRecordFilesRequest, runtime *util.RuntimeOptions) (_result *ListLiveRecordFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLiveRecordFiles"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLiveRecordFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries all recording index files in the specified period of time.
//
// @param request - ListLiveRecordFilesRequest
//
// @return ListLiveRecordFilesResponse
func (client *Client) ListLiveRecordFiles(request *ListLiveRecordFilesRequest) (_result *ListLiveRecordFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLiveRecordFilesResponse{}
	_body, _err := client.ListLiveRecordFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of live stream recording jobs by page.
//
// @param request - ListLiveRecordJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLiveRecordJobsResponse
func (client *Client) ListLiveRecordJobsWithOptions(request *ListLiveRecordJobsRequest, runtime *util.RuntimeOptions) (_result *ListLiveRecordJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLiveRecordJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLiveRecordJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of live stream recording jobs by page.
//
// @param request - ListLiveRecordJobsRequest
//
// @return ListLiveRecordJobsResponse
func (client *Client) ListLiveRecordJobs(request *ListLiveRecordJobsRequest) (_result *ListLiveRecordJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLiveRecordJobsResponse{}
	_body, _err := client.ListLiveRecordJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of live stream recording templates.
//
// @param request - ListLiveRecordTemplatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLiveRecordTemplatesResponse
func (client *Client) ListLiveRecordTemplatesWithOptions(request *ListLiveRecordTemplatesRequest, runtime *util.RuntimeOptions) (_result *ListLiveRecordTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLiveRecordTemplates"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLiveRecordTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of live stream recording templates.
//
// @param request - ListLiveRecordTemplatesRequest
//
// @return ListLiveRecordTemplatesResponse
func (client *Client) ListLiveRecordTemplates(request *ListLiveRecordTemplatesRequest) (_result *ListLiveRecordTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLiveRecordTemplatesResponse{}
	_body, _err := client.ListLiveRecordTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of live stream snapshot files by page.
//
// @param request - ListLiveSnapshotFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLiveSnapshotFilesResponse
func (client *Client) ListLiveSnapshotFilesWithOptions(request *ListLiveSnapshotFilesRequest, runtime *util.RuntimeOptions) (_result *ListLiveSnapshotFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLiveSnapshotFiles"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLiveSnapshotFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of live stream snapshot files by page.
//
// @param request - ListLiveSnapshotFilesRequest
//
// @return ListLiveSnapshotFilesResponse
func (client *Client) ListLiveSnapshotFiles(request *ListLiveSnapshotFilesRequest) (_result *ListLiveSnapshotFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLiveSnapshotFilesResponse{}
	_body, _err := client.ListLiveSnapshotFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of live stream snapshot jobs by page.
//
// @param request - ListLiveSnapshotJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLiveSnapshotJobsResponse
func (client *Client) ListLiveSnapshotJobsWithOptions(request *ListLiveSnapshotJobsRequest, runtime *util.RuntimeOptions) (_result *ListLiveSnapshotJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLiveSnapshotJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLiveSnapshotJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of live stream snapshot jobs by page.
//
// @param request - ListLiveSnapshotJobsRequest
//
// @return ListLiveSnapshotJobsResponse
func (client *Client) ListLiveSnapshotJobs(request *ListLiveSnapshotJobsRequest) (_result *ListLiveSnapshotJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLiveSnapshotJobsResponse{}
	_body, _err := client.ListLiveSnapshotJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of live stream snapshot templates by page.
//
// @param request - ListLiveSnapshotTemplatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLiveSnapshotTemplatesResponse
func (client *Client) ListLiveSnapshotTemplatesWithOptions(request *ListLiveSnapshotTemplatesRequest, runtime *util.RuntimeOptions) (_result *ListLiveSnapshotTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLiveSnapshotTemplates"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLiveSnapshotTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of live stream snapshot templates by page.
//
// @param request - ListLiveSnapshotTemplatesRequest
//
// @return ListLiveSnapshotTemplatesResponse
func (client *Client) ListLiveSnapshotTemplates(request *ListLiveSnapshotTemplatesRequest) (_result *ListLiveSnapshotTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLiveSnapshotTemplatesResponse{}
	_body, _err := client.ListLiveSnapshotTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of live stream transcoding jobs.
//
// @param request - ListLiveTranscodeJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLiveTranscodeJobsResponse
func (client *Client) ListLiveTranscodeJobsWithOptions(request *ListLiveTranscodeJobsRequest, runtime *util.RuntimeOptions) (_result *ListLiveTranscodeJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.KeyWord)) {
		query["KeyWord"] = request.KeyWord
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.StartMode)) {
		query["StartMode"] = request.StartMode
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLiveTranscodeJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLiveTranscodeJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of live stream transcoding jobs.
//
// @param request - ListLiveTranscodeJobsRequest
//
// @return ListLiveTranscodeJobsResponse
func (client *Client) ListLiveTranscodeJobs(request *ListLiveTranscodeJobsRequest) (_result *ListLiveTranscodeJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLiveTranscodeJobsResponse{}
	_body, _err := client.ListLiveTranscodeJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of live stream transcoding templates.
//
// @param request - ListLiveTranscodeTemplatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLiveTranscodeTemplatesResponse
func (client *Client) ListLiveTranscodeTemplatesWithOptions(request *ListLiveTranscodeTemplatesRequest, runtime *util.RuntimeOptions) (_result *ListLiveTranscodeTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.KeyWord)) {
		query["KeyWord"] = request.KeyWord
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.VideoCodec)) {
		query["VideoCodec"] = request.VideoCodec
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLiveTranscodeTemplates"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLiveTranscodeTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of live stream transcoding templates.
//
// @param request - ListLiveTranscodeTemplatesRequest
//
// @return ListLiveTranscodeTemplatesResponse
func (client *Client) ListLiveTranscodeTemplates(request *ListLiveTranscodeTemplatesRequest) (_result *ListLiveTranscodeTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLiveTranscodeTemplatesResponse{}
	_body, _err := client.ListLiveTranscodeTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the basic information of all media assets that meet the specified conditions.
//
// Description:
//
// If includeFileBasicInfo is set to true, the basic information, such as the duration and file size, of the source file is also returned. At most the first 100 entries that meet the specified conditions are returned. All media assets must exactly match all non-empty fields. The fields that support exact match include MediaType, Source, BusinessType, Category, and Status. If all information cannot be returned at a time, you can use NextToken to initiate a request to retrieve a new page of results.
//
// @param request - ListMediaBasicInfosRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMediaBasicInfosResponse
func (client *Client) ListMediaBasicInfosWithOptions(request *ListMediaBasicInfosRequest, runtime *util.RuntimeOptions) (_result *ListMediaBasicInfosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuthTimeout)) {
		query["AuthTimeout"] = request.AuthTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessType)) {
		query["BusinessType"] = request.BusinessType
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeFileBasicInfo)) {
		query["IncludeFileBasicInfo"] = request.IncludeFileBasicInfo
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMediaBasicInfos"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMediaBasicInfosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the basic information of all media assets that meet the specified conditions.
//
// Description:
//
// If includeFileBasicInfo is set to true, the basic information, such as the duration and file size, of the source file is also returned. At most the first 100 entries that meet the specified conditions are returned. All media assets must exactly match all non-empty fields. The fields that support exact match include MediaType, Source, BusinessType, Category, and Status. If all information cannot be returned at a time, you can use NextToken to initiate a request to retrieve a new page of results.
//
// @param request - ListMediaBasicInfosRequest
//
// @return ListMediaBasicInfosResponse
func (client *Client) ListMediaBasicInfos(request *ListMediaBasicInfosRequest) (_result *ListMediaBasicInfosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMediaBasicInfosResponse{}
	_body, _err := client.ListMediaBasicInfosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询 MediaConvertJob 列表
//
// @param request - ListMediaConvertJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMediaConvertJobsResponse
func (client *Client) ListMediaConvertJobsWithOptions(request *ListMediaConvertJobsRequest, runtime *util.RuntimeOptions) (_result *ListMediaConvertJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndOfCreateTime)) {
		query["EndOfCreateTime"] = request.EndOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartOfCreateTime)) {
		query["StartOfCreateTime"] = request.StartOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMediaConvertJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMediaConvertJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询 MediaConvertJob 列表
//
// @param request - ListMediaConvertJobsRequest
//
// @return ListMediaConvertJobsResponse
func (client *Client) ListMediaConvertJobs(request *ListMediaConvertJobsRequest) (_result *ListMediaConvertJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMediaConvertJobsResponse{}
	_body, _err := client.ListMediaConvertJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of media information analysis jobs.
//
// @param request - ListMediaInfoJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMediaInfoJobsResponse
func (client *Client) ListMediaInfoJobsWithOptions(request *ListMediaInfoJobsRequest, runtime *util.RuntimeOptions) (_result *ListMediaInfoJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndOfCreateTime)) {
		query["EndOfCreateTime"] = request.EndOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartOfCreateTime)) {
		query["StartOfCreateTime"] = request.StartOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMediaInfoJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMediaInfoJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of media information analysis jobs.
//
// @param request - ListMediaInfoJobsRequest
//
// @return ListMediaInfoJobsResponse
func (client *Client) ListMediaInfoJobs(request *ListMediaInfoJobsRequest) (_result *ListMediaInfoJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMediaInfoJobsResponse{}
	_body, _err := client.ListMediaInfoJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries MediaLive channels.
//
// Description:
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListMediaLiveChannelsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMediaLiveChannelsResponse
func (client *Client) ListMediaLiveChannelsWithOptions(request *ListMediaLiveChannelsRequest, runtime *util.RuntimeOptions) (_result *ListMediaLiveChannelsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		body["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.Skip)) {
		body["Skip"] = request.Skip
	}

	if !tea.BoolValue(util.IsUnset(request.SortOrder)) {
		body["SortOrder"] = request.SortOrder
	}

	if !tea.BoolValue(util.IsUnset(request.States)) {
		body["States"] = request.States
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMediaLiveChannels"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMediaLiveChannelsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries MediaLive channels.
//
// Description:
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListMediaLiveChannelsRequest
//
// @return ListMediaLiveChannelsResponse
func (client *Client) ListMediaLiveChannels(request *ListMediaLiveChannelsRequest) (_result *ListMediaLiveChannelsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMediaLiveChannelsResponse{}
	_body, _err := client.ListMediaLiveChannelsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the security groups in MediaLive.
//
// Description:
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListMediaLiveInputSecurityGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMediaLiveInputSecurityGroupsResponse
func (client *Client) ListMediaLiveInputSecurityGroupsWithOptions(request *ListMediaLiveInputSecurityGroupsRequest, runtime *util.RuntimeOptions) (_result *ListMediaLiveInputSecurityGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		body["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.Skip)) {
		body["Skip"] = request.Skip
	}

	if !tea.BoolValue(util.IsUnset(request.SortOrder)) {
		body["SortOrder"] = request.SortOrder
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMediaLiveInputSecurityGroups"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMediaLiveInputSecurityGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the security groups in MediaLive.
//
// Description:
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListMediaLiveInputSecurityGroupsRequest
//
// @return ListMediaLiveInputSecurityGroupsResponse
func (client *Client) ListMediaLiveInputSecurityGroups(request *ListMediaLiveInputSecurityGroupsRequest) (_result *ListMediaLiveInputSecurityGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMediaLiveInputSecurityGroupsResponse{}
	_body, _err := client.ListMediaLiveInputSecurityGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries MediaLive inputs.
//
// Description:
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListMediaLiveInputsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMediaLiveInputsResponse
func (client *Client) ListMediaLiveInputsWithOptions(request *ListMediaLiveInputsRequest, runtime *util.RuntimeOptions) (_result *ListMediaLiveInputsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		body["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.Skip)) {
		body["Skip"] = request.Skip
	}

	if !tea.BoolValue(util.IsUnset(request.SortOrder)) {
		body["SortOrder"] = request.SortOrder
	}

	if !tea.BoolValue(util.IsUnset(request.Types)) {
		body["Types"] = request.Types
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMediaLiveInputs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMediaLiveInputsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries MediaLive inputs.
//
// Description:
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListMediaLiveInputsRequest
//
// @return ListMediaLiveInputsResponse
func (client *Client) ListMediaLiveInputs(request *ListMediaLiveInputsRequest) (_result *ListMediaLiveInputsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMediaLiveInputsResponse{}
	_body, _err := client.ListMediaLiveInputsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of marks of a media asset.
//
// @param request - ListMediaMarksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMediaMarksResponse
func (client *Client) ListMediaMarksWithOptions(request *ListMediaMarksRequest, runtime *util.RuntimeOptions) (_result *ListMediaMarksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaMarkIds)) {
		query["MediaMarkIds"] = request.MediaMarkIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMediaMarks"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMediaMarksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of marks of a media asset.
//
// @param request - ListMediaMarksRequest
//
// @return ListMediaMarksResponse
func (client *Client) ListMediaMarks(request *ListMediaMarksRequest) (_result *ListMediaMarksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMediaMarksResponse{}
	_body, _err := client.ListMediaMarksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of media editing and production jobs that meet the specified conditions. You can query the jobs based on the job state and type.
//
// @param request - ListMediaProducingJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMediaProducingJobsResponse
func (client *Client) ListMediaProducingJobsWithOptions(request *ListMediaProducingJobsRequest, runtime *util.RuntimeOptions) (_result *ListMediaProducingJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.JobType)) {
		query["JobType"] = request.JobType
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.MasterJobId)) {
		query["MasterJobId"] = request.MasterJobId
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMediaProducingJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMediaProducingJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of media editing and production jobs that meet the specified conditions. You can query the jobs based on the job state and type.
//
// @param request - ListMediaProducingJobsRequest
//
// @return ListMediaProducingJobsResponse
func (client *Client) ListMediaProducingJobs(request *ListMediaProducingJobsRequest) (_result *ListMediaProducingJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMediaProducingJobsResponse{}
	_body, _err := client.ListMediaProducingJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of packaging jobs.
//
// @param request - ListPackageJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPackageJobsResponse
func (client *Client) ListPackageJobsWithOptions(request *ListPackageJobsRequest, runtime *util.RuntimeOptions) (_result *ListPackageJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndOfCreateTime)) {
		query["EndOfCreateTime"] = request.EndOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartOfCreateTime)) {
		query["StartOfCreateTime"] = request.StartOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPackageJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPackageJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of packaging jobs.
//
// @param request - ListPackageJobsRequest
//
// @return ListPackageJobsResponse
func (client *Client) ListPackageJobs(request *ListPackageJobsRequest) (_result *ListPackageJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPackageJobsResponse{}
	_body, _err := client.ListPackageJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of ApsaraVideo Media Processing (MPS) queues.
//
// @param request - ListPipelinesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPipelinesResponse
func (client *Client) ListPipelinesWithOptions(request *ListPipelinesRequest, runtime *util.RuntimeOptions) (_result *ListPipelinesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Speed)) {
		query["Speed"] = request.Speed
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPipelines"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPipelinesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of ApsaraVideo Media Processing (MPS) queues.
//
// @param request - ListPipelinesRequest
//
// @return ListPipelinesResponse
func (client *Client) ListPipelines(request *ListPipelinesRequest) (_result *ListPipelinesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPipelinesResponse{}
	_body, _err := client.ListPipelinesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Lists programs.
//
// @param request - ListProgramsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListProgramsResponse
func (client *Client) ListProgramsWithOptions(request *ListProgramsRequest, runtime *util.RuntimeOptions) (_result *ListProgramsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelName)) {
		query["ChannelName"] = request.ChannelName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProgramName)) {
		query["ProgramName"] = request.ProgramName
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPrograms"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListProgramsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Lists programs.
//
// @param request - ListProgramsRequest
//
// @return ListProgramsResponse
func (client *Client) ListPrograms(request *ListProgramsRequest) (_result *ListProgramsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListProgramsResponse{}
	_body, _err := client.ListProgramsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of media assets in the public media library that meet the specified conditions. A maximum of 100 media assets can be returned.
//
// @param request - ListPublicMediaBasicInfosRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPublicMediaBasicInfosResponse
func (client *Client) ListPublicMediaBasicInfosWithOptions(request *ListPublicMediaBasicInfosRequest, runtime *util.RuntimeOptions) (_result *ListPublicMediaBasicInfosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessType)) {
		query["BusinessType"] = request.BusinessType
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeFileBasicInfo)) {
		query["IncludeFileBasicInfo"] = request.IncludeFileBasicInfo
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.MediaTagId)) {
		query["MediaTagId"] = request.MediaTagId
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPublicMediaBasicInfos"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("Anonymous"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPublicMediaBasicInfosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of media assets in the public media library that meet the specified conditions. A maximum of 100 media assets can be returned.
//
// @param request - ListPublicMediaBasicInfosRequest
//
// @return ListPublicMediaBasicInfosResponse
func (client *Client) ListPublicMediaBasicInfos(request *ListPublicMediaBasicInfosRequest) (_result *ListPublicMediaBasicInfosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPublicMediaBasicInfosResponse{}
	_body, _err := client.ListPublicMediaBasicInfosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取自定义库下实体列表
//
// @param request - ListRecognitionEntitiesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRecognitionEntitiesResponse
func (client *Client) ListRecognitionEntitiesWithOptions(request *ListRecognitionEntitiesRequest, runtime *util.RuntimeOptions) (_result *ListRecognitionEntitiesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Algorithm)) {
		query["Algorithm"] = request.Algorithm
	}

	if !tea.BoolValue(util.IsUnset(request.LibId)) {
		query["LibId"] = request.LibId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRecognitionEntities"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRecognitionEntitiesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取自定义库下实体列表
//
// @param request - ListRecognitionEntitiesRequest
//
// @return ListRecognitionEntitiesResponse
func (client *Client) ListRecognitionEntities(request *ListRecognitionEntitiesRequest) (_result *ListRecognitionEntitiesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRecognitionEntitiesResponse{}
	_body, _err := client.ListRecognitionEntitiesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取自定义库列表
//
// @param request - ListRecognitionLibsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRecognitionLibsResponse
func (client *Client) ListRecognitionLibsWithOptions(request *ListRecognitionLibsRequest, runtime *util.RuntimeOptions) (_result *ListRecognitionLibsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Algorithm)) {
		query["Algorithm"] = request.Algorithm
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRecognitionLibs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRecognitionLibsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取自定义库列表
//
// @param request - ListRecognitionLibsRequest
//
// @return ListRecognitionLibsResponse
func (client *Client) ListRecognitionLibs(request *ListRecognitionLibsRequest) (_result *ListRecognitionLibsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRecognitionLibsResponse{}
	_body, _err := client.ListRecognitionLibsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取自定义库实体的图片列表
//
// @param request - ListRecognitionSamplesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRecognitionSamplesResponse
func (client *Client) ListRecognitionSamplesWithOptions(request *ListRecognitionSamplesRequest, runtime *util.RuntimeOptions) (_result *ListRecognitionSamplesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Algorithm)) {
		query["Algorithm"] = request.Algorithm
	}

	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		query["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.LibId)) {
		query["LibId"] = request.LibId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRecognitionSamples"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRecognitionSamplesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取自定义库实体的图片列表
//
// @param request - ListRecognitionSamplesRequest
//
// @return ListRecognitionSamplesResponse
func (client *Client) ListRecognitionSamples(request *ListRecognitionSamplesRequest) (_result *ListRecognitionSamplesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRecognitionSamplesResponse{}
	_body, _err := client.ListRecognitionSamplesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Lists the program schedule of a MediaWeaver channel.
//
// @param request - ListSchedulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSchedulesResponse
func (client *Client) ListSchedulesWithOptions(request *ListSchedulesRequest, runtime *util.RuntimeOptions) (_result *ListSchedulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelName)) {
		query["ChannelName"] = request.ChannelName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.WindowDurationSeconds)) {
		query["WindowDurationSeconds"] = request.WindowDurationSeconds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSchedules"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSchedulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Lists the program schedule of a MediaWeaver channel.
//
// @param request - ListSchedulesRequest
//
// @return ListSchedulesResponse
func (client *Client) ListSchedules(request *ListSchedulesRequest) (_result *ListSchedulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSchedulesResponse{}
	_body, _err := client.ListSchedulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about search libraries.
//
// @param request - ListSearchLibRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSearchLibResponse
func (client *Client) ListSearchLibWithOptions(request *ListSearchLibRequest, runtime *util.RuntimeOptions) (_result *ListSearchLibResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSearchLib"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSearchLibResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about search libraries.
//
// @param request - ListSearchLibRequest
//
// @return ListSearchLibResponse
func (client *Client) ListSearchLib(request *ListSearchLibRequest) (_result *ListSearchLibResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSearchLibResponse{}
	_body, _err := client.ListSearchLibWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of intelligent jobs based on specified parameters.
//
// @param request - ListSmartJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSmartJobsResponse
func (client *Client) ListSmartJobsWithOptions(request *ListSmartJobsRequest, runtime *util.RuntimeOptions) (_result *ListSmartJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSmartJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSmartJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of intelligent jobs based on specified parameters.
//
// @param request - ListSmartJobsRequest
//
// @return ListSmartJobsResponse
func (client *Client) ListSmartJobs(request *ListSmartJobsRequest) (_result *ListSmartJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSmartJobsResponse{}
	_body, _err := client.ListSmartJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of system digital humans. This operation supports paged queries.
//
// @param request - ListSmartSysAvatarModelsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSmartSysAvatarModelsResponse
func (client *Client) ListSmartSysAvatarModelsWithOptions(request *ListSmartSysAvatarModelsRequest, runtime *util.RuntimeOptions) (_result *ListSmartSysAvatarModelsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SdkVersion)) {
		query["SdkVersion"] = request.SdkVersion
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSmartSysAvatarModels"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSmartSysAvatarModelsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of system digital humans. This operation supports paged queries.
//
// @param request - ListSmartSysAvatarModelsRequest
//
// @return ListSmartSysAvatarModelsResponse
func (client *Client) ListSmartSysAvatarModels(request *ListSmartSysAvatarModelsRequest) (_result *ListSmartSysAvatarModelsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSmartSysAvatarModelsResponse{}
	_body, _err := client.ListSmartSysAvatarModelsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of speaker groups, including the name, gender, and sample audio of each speaker. The list is grouped by scenario.
//
// @param request - ListSmartVoiceGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSmartVoiceGroupsResponse
func (client *Client) ListSmartVoiceGroupsWithOptions(request *ListSmartVoiceGroupsRequest, runtime *util.RuntimeOptions) (_result *ListSmartVoiceGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSmartVoiceGroups"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSmartVoiceGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of speaker groups, including the name, gender, and sample audio of each speaker. The list is grouped by scenario.
//
// @param request - ListSmartVoiceGroupsRequest
//
// @return ListSmartVoiceGroupsResponse
func (client *Client) ListSmartVoiceGroups(request *ListSmartVoiceGroupsRequest) (_result *ListSmartVoiceGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSmartVoiceGroupsResponse{}
	_body, _err := client.ListSmartVoiceGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of snapshot jobs.
//
// @param request - ListSnapshotJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSnapshotJobsResponse
func (client *Client) ListSnapshotJobsWithOptions(request *ListSnapshotJobsRequest, runtime *util.RuntimeOptions) (_result *ListSnapshotJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndOfCreateTime)) {
		query["EndOfCreateTime"] = request.EndOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartOfCreateTime)) {
		query["StartOfCreateTime"] = request.StartOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSnapshotJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSnapshotJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of snapshot jobs.
//
// @param request - ListSnapshotJobsRequest
//
// @return ListSnapshotJobsResponse
func (client *Client) ListSnapshotJobs(request *ListSnapshotJobsRequest) (_result *ListSnapshotJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSnapshotJobsResponse{}
	_body, _err := client.ListSnapshotJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Lists source locations.
//
// @param request - ListSourceLocationsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSourceLocationsResponse
func (client *Client) ListSourceLocationsWithOptions(request *ListSourceLocationsRequest, runtime *util.RuntimeOptions) (_result *ListSourceLocationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FilterState)) {
		query["FilterState"] = request.FilterState
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.SortByModifiedTime)) {
		query["SortByModifiedTime"] = request.SortByModifiedTime
	}

	if !tea.BoolValue(util.IsUnset(request.SourceLocationName)) {
		query["SourceLocationName"] = request.SourceLocationName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSourceLocations"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSourceLocationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Lists source locations.
//
// @param request - ListSourceLocationsRequest
//
// @return ListSourceLocationsResponse
func (client *Client) ListSourceLocations(request *ListSourceLocationsRequest) (_result *ListSourceLocationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSourceLocationsResponse{}
	_body, _err := client.ListSourceLocationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Lists sources in MediaWeaver.
//
// @param request - ListSourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSourcesResponse
func (client *Client) ListSourcesWithOptions(request *ListSourcesRequest, runtime *util.RuntimeOptions) (_result *ListSourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FilterState)) {
		query["FilterState"] = request.FilterState
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.SortByModifiedTime)) {
		query["SortByModifiedTime"] = request.SortByModifiedTime
	}

	if !tea.BoolValue(util.IsUnset(request.SourceLocationName)) {
		query["SourceLocationName"] = request.SourceLocationName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceName)) {
		query["SourceName"] = request.SourceName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceType)) {
		query["SourceType"] = request.SourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSources"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Lists sources in MediaWeaver.
//
// @param request - ListSourcesRequest
//
// @return ListSourcesResponse
func (client *Client) ListSources(request *ListSourcesRequest) (_result *ListSourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSourcesResponse{}
	_body, _err := client.ListSourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of system templates.
//
// Description:
//
// Template types:
//
// 1.  1: transcoding template.
//
// 2.  2: snapshot template.
//
// 3.  3: animated image template.
//
// 4.  4\\. image watermark template.
//
// 5.  5: text watermark template.
//
// 6.  6: subtitle template.
//
// 7.  7: AI-assisted content moderation template.
//
// 8.  8: AI-assisted intelligent thumbnail template.
//
// 9.  9: AI-assisted intelligent erasure template.
//
// Subtypes of transcoding templates:
//
// 1.  1 (Normal): regular template.
//
// 2.  2 (AudioTranscode): audio transcoding template.
//
// 3.  3 (Remux): container format conversion template.
//
// 4.  4 (NarrowBandV1): Narrowband HD 1.0 template.
//
// 5.  5 (NarrowBandV2): Narrowband HD 2.0 template.
//
// Subtypes of snapshot templates:
//
// 1.  1 (Normal): regular template.
//
// 2.  2 (Sprite): sprite template.
//
// 3.  3 (WebVtt): WebVTT template.
//
// Subtypes of AI-assisted content moderation templates:
//
// 1.  1 (Video): video moderation template.
//
// 2.  2 (Audio): audio moderation template.
//
// 3.  3 (Image): image moderation template.
//
// Subtypes of AI-assisted intelligent erasure templates:
//
// 1.  1 (VideoDelogo): logo erasure template.
//
// 2.  2 (VideoDetext): subtitle erasure template.
//
// @param request - ListSystemTemplatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSystemTemplatesResponse
func (client *Client) ListSystemTemplatesWithOptions(request *ListSystemTemplatesRequest, runtime *util.RuntimeOptions) (_result *ListSystemTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Subtype)) {
		query["Subtype"] = request.Subtype
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSystemTemplates"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSystemTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of system templates.
//
// Description:
//
// Template types:
//
// 1.  1: transcoding template.
//
// 2.  2: snapshot template.
//
// 3.  3: animated image template.
//
// 4.  4\\. image watermark template.
//
// 5.  5: text watermark template.
//
// 6.  6: subtitle template.
//
// 7.  7: AI-assisted content moderation template.
//
// 8.  8: AI-assisted intelligent thumbnail template.
//
// 9.  9: AI-assisted intelligent erasure template.
//
// Subtypes of transcoding templates:
//
// 1.  1 (Normal): regular template.
//
// 2.  2 (AudioTranscode): audio transcoding template.
//
// 3.  3 (Remux): container format conversion template.
//
// 4.  4 (NarrowBandV1): Narrowband HD 1.0 template.
//
// 5.  5 (NarrowBandV2): Narrowband HD 2.0 template.
//
// Subtypes of snapshot templates:
//
// 1.  1 (Normal): regular template.
//
// 2.  2 (Sprite): sprite template.
//
// 3.  3 (WebVtt): WebVTT template.
//
// Subtypes of AI-assisted content moderation templates:
//
// 1.  1 (Video): video moderation template.
//
// 2.  2 (Audio): audio moderation template.
//
// 3.  3 (Image): image moderation template.
//
// Subtypes of AI-assisted intelligent erasure templates:
//
// 1.  1 (VideoDelogo): logo erasure template.
//
// 2.  2 (VideoDetext): subtitle erasure template.
//
// @param request - ListSystemTemplatesRequest
//
// @return ListSystemTemplatesResponse
func (client *Client) ListSystemTemplates(request *ListSystemTemplatesRequest) (_result *ListSystemTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSystemTemplatesResponse{}
	_body, _err := client.ListSystemTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of templates that meet the specified conditions. You can query templates based on information such as the template status and creation source.
//
// Description:
//
// A template is an encapsulation of the timeline of a media editing and production job. You can define a common timeline as a template. When you have the same requirements, you need to only specify key parameters and materials to produce videos.
//
//   - For more information about how to use a regular template, see [Create and use a regular template](https://help.aliyun.com/document_detail/445399.html).
//
//   - For more information about how to use an advanced template, see [Create and use advanced templates](https://help.aliyun.com/document_detail/445389.html).
//
// @param request - ListTemplatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTemplatesResponse
func (client *Client) ListTemplatesWithOptions(request *ListTemplatesRequest, runtime *util.RuntimeOptions) (_result *ListTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CreateSource)) {
		query["CreateSource"] = request.CreateSource
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortType)) {
		query["SortType"] = request.SortType
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTemplates"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of templates that meet the specified conditions. You can query templates based on information such as the template status and creation source.
//
// Description:
//
// A template is an encapsulation of the timeline of a media editing and production job. You can define a common timeline as a template. When you have the same requirements, you need to only specify key parameters and materials to produce videos.
//
//   - For more information about how to use a regular template, see [Create and use a regular template](https://help.aliyun.com/document_detail/445399.html).
//
//   - For more information about how to use an advanced template, see [Create and use advanced templates](https://help.aliyun.com/document_detail/445389.html).
//
// @param request - ListTemplatesRequest
//
// @return ListTemplatesResponse
func (client *Client) ListTemplates(request *ListTemplatesRequest) (_result *ListTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTemplatesResponse{}
	_body, _err := client.ListTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of transcoding jobs.
//
// @param request - ListTranscodeJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTranscodeJobsResponse
func (client *Client) ListTranscodeJobsWithOptions(request *ListTranscodeJobsRequest, runtime *util.RuntimeOptions) (_result *ListTranscodeJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndOfCreateTime)) {
		query["EndOfCreateTime"] = request.EndOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ParentJobId)) {
		query["ParentJobId"] = request.ParentJobId
	}

	if !tea.BoolValue(util.IsUnset(request.StartOfCreateTime)) {
		query["StartOfCreateTime"] = request.StartOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTranscodeJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTranscodeJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of transcoding jobs.
//
// @param request - ListTranscodeJobsRequest
//
// @return ListTranscodeJobsResponse
func (client *Client) ListTranscodeJobs(request *ListTranscodeJobsRequest) (_result *ListTranscodeJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTranscodeJobsResponse{}
	_body, _err := client.ListTranscodeJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Lists VOD packaging assets.
//
// @param request - ListVodPackagingAssetsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListVodPackagingAssetsResponse
func (client *Client) ListVodPackagingAssetsWithOptions(request *ListVodPackagingAssetsRequest, runtime *util.RuntimeOptions) (_result *ListVodPackagingAssetsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListVodPackagingAssets"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListVodPackagingAssetsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Lists VOD packaging assets.
//
// @param request - ListVodPackagingAssetsRequest
//
// @return ListVodPackagingAssetsResponse
func (client *Client) ListVodPackagingAssets(request *ListVodPackagingAssetsRequest) (_result *ListVodPackagingAssetsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListVodPackagingAssetsResponse{}
	_body, _err := client.ListVodPackagingAssetsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Lists packaging configurations.
//
// @param request - ListVodPackagingConfigurationsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListVodPackagingConfigurationsResponse
func (client *Client) ListVodPackagingConfigurationsWithOptions(request *ListVodPackagingConfigurationsRequest, runtime *util.RuntimeOptions) (_result *ListVodPackagingConfigurationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListVodPackagingConfigurations"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListVodPackagingConfigurationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Lists packaging configurations.
//
// @param request - ListVodPackagingConfigurationsRequest
//
// @return ListVodPackagingConfigurationsResponse
func (client *Client) ListVodPackagingConfigurations(request *ListVodPackagingConfigurationsRequest) (_result *ListVodPackagingConfigurationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListVodPackagingConfigurationsResponse{}
	_body, _err := client.ListVodPackagingConfigurationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Lists packaging groups.
//
// @param request - ListVodPackagingGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListVodPackagingGroupsResponse
func (client *Client) ListVodPackagingGroupsWithOptions(request *ListVodPackagingGroupsRequest, runtime *util.RuntimeOptions) (_result *ListVodPackagingGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListVodPackagingGroups"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListVodPackagingGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Lists packaging groups.
//
// @param request - ListVodPackagingGroupsRequest
//
// @return ListVodPackagingGroupsResponse
func (client *Client) ListVodPackagingGroups(request *ListVodPackagingGroupsRequest) (_result *ListVodPackagingGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListVodPackagingGroupsResponse{}
	_body, _err := client.ListVodPackagingGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询版权水印提取任务
//
// @param request - QueryCopyrightExtractJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryCopyrightExtractJobResponse
func (client *Client) QueryCopyrightExtractJobWithOptions(request *QueryCopyrightExtractJobRequest, runtime *util.RuntimeOptions) (_result *QueryCopyrightExtractJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryCopyrightExtractJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryCopyrightExtractJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询版权水印提取任务
//
// @param request - QueryCopyrightExtractJobRequest
//
// @return QueryCopyrightExtractJobResponse
func (client *Client) QueryCopyrightExtractJob(request *QueryCopyrightExtractJobRequest) (_result *QueryCopyrightExtractJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCopyrightExtractJobResponse{}
	_body, _err := client.QueryCopyrightExtractJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询视频版权水印任务列表
//
// @param request - QueryCopyrightJobListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryCopyrightJobListResponse
func (client *Client) QueryCopyrightJobListWithOptions(request *QueryCopyrightJobListRequest, runtime *util.RuntimeOptions) (_result *QueryCopyrightJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CreateTimeEnd)) {
		query["CreateTimeEnd"] = request.CreateTimeEnd
	}

	if !tea.BoolValue(util.IsUnset(request.CreateTimeStart)) {
		query["CreateTimeStart"] = request.CreateTimeStart
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.Level)) {
		query["Level"] = request.Level
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryCopyrightJobList"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryCopyrightJobListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询视频版权水印任务列表
//
// @param request - QueryCopyrightJobListRequest
//
// @return QueryCopyrightJobListResponse
func (client *Client) QueryCopyrightJobList(request *QueryCopyrightJobListRequest) (_result *QueryCopyrightJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCopyrightJobListResponse{}
	_body, _err := client.QueryCopyrightJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of media fingerprint analysis jobs.
//
// @param request - QueryDNAJobListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryDNAJobListResponse
func (client *Client) QueryDNAJobListWithOptions(request *QueryDNAJobListRequest, runtime *util.RuntimeOptions) (_result *QueryDNAJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobIds)) {
		query["JobIds"] = request.JobIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryDNAJobList"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryDNAJobListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of media fingerprint analysis jobs.
//
// @param request - QueryDNAJobListRequest
//
// @return QueryDNAJobListResponse
func (client *Client) QueryDNAJobList(request *QueryDNAJobListRequest) (_result *QueryDNAJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDNAJobListResponse{}
	_body, _err := client.QueryDNAJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the status and result of an intelligent production job.
//
// @param request - QueryIProductionJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryIProductionJobResponse
func (client *Client) QueryIProductionJobWithOptions(request *QueryIProductionJobRequest, runtime *util.RuntimeOptions) (_result *QueryIProductionJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryIProductionJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryIProductionJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the status and result of an intelligent production job.
//
// @param request - QueryIProductionJobRequest
//
// @return QueryIProductionJobResponse
func (client *Client) QueryIProductionJob(request *QueryIProductionJobRequest) (_result *QueryIProductionJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryIProductionJobResponse{}
	_body, _err := client.QueryIProductionJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a content moderation job.
//
// Description:
//
// In the content moderation results, the moderation results of the video are sorted in ascending order by time into a timeline. If the video is long, the content moderation results are paginated, and the first page is returned. You can call this operation again to query the remaining moderation results of the video.
//
// @param request - QueryMediaCensorJobDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMediaCensorJobDetailResponse
func (client *Client) QueryMediaCensorJobDetailWithOptions(request *QueryMediaCensorJobDetailRequest, runtime *util.RuntimeOptions) (_result *QueryMediaCensorJobDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.MaximumPageSize)) {
		query["MaximumPageSize"] = request.MaximumPageSize
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMediaCensorJobDetail"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMediaCensorJobDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a content moderation job.
//
// Description:
//
// In the content moderation results, the moderation results of the video are sorted in ascending order by time into a timeline. If the video is long, the content moderation results are paginated, and the first page is returned. You can call this operation again to query the remaining moderation results of the video.
//
// @param request - QueryMediaCensorJobDetailRequest
//
// @return QueryMediaCensorJobDetailResponse
func (client *Client) QueryMediaCensorJobDetail(request *QueryMediaCensorJobDetailRequest) (_result *QueryMediaCensorJobDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMediaCensorJobDetailResponse{}
	_body, _err := client.QueryMediaCensorJobDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of content moderation jobs.
//
// Description:
//
// You can call this operation to query only the content moderation jobs within the most recent three months.
//
// @param request - QueryMediaCensorJobListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMediaCensorJobListResponse
func (client *Client) QueryMediaCensorJobListWithOptions(request *QueryMediaCensorJobListRequest, runtime *util.RuntimeOptions) (_result *QueryMediaCensorJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndOfJobCreatedTimeRange)) {
		query["EndOfJobCreatedTimeRange"] = request.EndOfJobCreatedTimeRange
	}

	if !tea.BoolValue(util.IsUnset(request.JobIds)) {
		query["JobIds"] = request.JobIds
	}

	if !tea.BoolValue(util.IsUnset(request.MaximumPageSize)) {
		query["MaximumPageSize"] = request.MaximumPageSize
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		query["PipelineId"] = request.PipelineId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartOfJobCreatedTimeRange)) {
		query["StartOfJobCreatedTimeRange"] = request.StartOfJobCreatedTimeRange
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		query["State"] = request.State
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMediaCensorJobList"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMediaCensorJobListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of content moderation jobs.
//
// Description:
//
// You can call this operation to query only the content moderation jobs within the most recent three months.
//
// @param request - QueryMediaCensorJobListRequest
//
// @return QueryMediaCensorJobListResponse
func (client *Client) QueryMediaCensorJobList(request *QueryMediaCensorJobListRequest) (_result *QueryMediaCensorJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMediaCensorJobListResponse{}
	_body, _err := client.QueryMediaCensorJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the indexing jobs enabled for a media asset.
//
// @param request - QueryMediaIndexJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMediaIndexJobResponse
func (client *Client) QueryMediaIndexJobWithOptions(request *QueryMediaIndexJobRequest, runtime *util.RuntimeOptions) (_result *QueryMediaIndexJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMediaIndexJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMediaIndexJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the indexing jobs enabled for a media asset.
//
// @param request - QueryMediaIndexJobRequest
//
// @return QueryMediaIndexJobResponse
func (client *Client) QueryMediaIndexJob(request *QueryMediaIndexJobRequest) (_result *QueryMediaIndexJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMediaIndexJobResponse{}
	_body, _err := client.QueryMediaIndexJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a search index.
//
// @param request - QuerySearchIndexRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySearchIndexResponse
func (client *Client) QuerySearchIndexWithOptions(request *QuerySearchIndexRequest, runtime *util.RuntimeOptions) (_result *QuerySearchIndexResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IndexType)) {
		query["IndexType"] = request.IndexType
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySearchIndex"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySearchIndexResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a search index.
//
// @param request - QuerySearchIndexRequest
//
// @return QuerySearchIndexResponse
func (client *Client) QuerySearchIndex(request *QuerySearchIndexRequest) (_result *QuerySearchIndexResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySearchIndexResponse{}
	_body, _err := client.QuerySearchIndexWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a search library.
//
// @param request - QuerySearchLibRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySearchLibResponse
func (client *Client) QuerySearchLibWithOptions(request *QuerySearchLibRequest, runtime *util.RuntimeOptions) (_result *QuerySearchLibResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySearchLib"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySearchLibResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a search library.
//
// @param request - QuerySearchLibRequest
//
// @return QuerySearchLibResponse
func (client *Client) QuerySearchLib(request *QuerySearchLibRequest) (_result *QuerySearchLibResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySearchLibResponse{}
	_body, _err := client.QuerySearchLibWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a smart tagging job.
//
// @param request - QuerySmarttagJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmarttagJobResponse
func (client *Client) QuerySmarttagJobWithOptions(request *QuerySmarttagJobRequest, runtime *util.RuntimeOptions) (_result *QuerySmarttagJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.Params)) {
		query["Params"] = request.Params
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmarttagJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmarttagJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a smart tagging job.
//
// @param request - QuerySmarttagJobRequest
//
// @return QuerySmarttagJobResponse
func (client *Client) QuerySmarttagJob(request *QuerySmarttagJobRequest) (_result *QuerySmarttagJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmarttagJobResponse{}
	_body, _err := client.QuerySmarttagJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询视频溯源水印ab流任务
//
// @param request - QueryTraceAbJobListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryTraceAbJobListResponse
func (client *Client) QueryTraceAbJobListWithOptions(request *QueryTraceAbJobListRequest, runtime *util.RuntimeOptions) (_result *QueryTraceAbJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CreateTimeEnd)) {
		query["CreateTimeEnd"] = request.CreateTimeEnd
	}

	if !tea.BoolValue(util.IsUnset(request.CreateTimeStart)) {
		query["CreateTimeStart"] = request.CreateTimeStart
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TraceMediaId)) {
		query["TraceMediaId"] = request.TraceMediaId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTraceAbJobList"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTraceAbJobListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询视频溯源水印ab流任务
//
// @param request - QueryTraceAbJobListRequest
//
// @return QueryTraceAbJobListResponse
func (client *Client) QueryTraceAbJobList(request *QueryTraceAbJobListRequest) (_result *QueryTraceAbJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTraceAbJobListResponse{}
	_body, _err := client.QueryTraceAbJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询溯源水印提取任务
//
// @param request - QueryTraceExtractJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryTraceExtractJobResponse
func (client *Client) QueryTraceExtractJobWithOptions(request *QueryTraceExtractJobRequest, runtime *util.RuntimeOptions) (_result *QueryTraceExtractJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTraceExtractJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTraceExtractJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询溯源水印提取任务
//
// @param request - QueryTraceExtractJobRequest
//
// @return QueryTraceExtractJobResponse
func (client *Client) QueryTraceExtractJob(request *QueryTraceExtractJobRequest) (_result *QueryTraceExtractJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTraceExtractJobResponse{}
	_body, _err := client.QueryTraceExtractJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询视频溯源水印m3u8任务
//
// @param request - QueryTraceM3u8JobListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryTraceM3u8JobListResponse
func (client *Client) QueryTraceM3u8JobListWithOptions(request *QueryTraceM3u8JobListRequest, runtime *util.RuntimeOptions) (_result *QueryTraceM3u8JobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CreateTimeEnd)) {
		query["CreateTimeEnd"] = request.CreateTimeEnd
	}

	if !tea.BoolValue(util.IsUnset(request.CreateTimeStart)) {
		query["CreateTimeStart"] = request.CreateTimeStart
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTraceM3u8JobList"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTraceM3u8JobListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询视频溯源水印m3u8任务
//
// @param request - QueryTraceM3u8JobListRequest
//
// @return QueryTraceM3u8JobListResponse
func (client *Client) QueryTraceM3u8JobList(request *QueryTraceM3u8JobListRequest) (_result *QueryTraceM3u8JobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTraceM3u8JobListResponse{}
	_body, _err := client.QueryTraceM3u8JobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtain a new upload credential for a media asset after its upload 
//
// Description:
//
// You can also call this operation to overwrite media files. After you obtain the upload URL of a media file, you can upload the media file again without changing the audio or video ID.
//
// @param request - RefreshUploadMediaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RefreshUploadMediaResponse
func (client *Client) RefreshUploadMediaWithOptions(request *RefreshUploadMediaRequest, runtime *util.RuntimeOptions) (_result *RefreshUploadMediaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RefreshUploadMedia"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RefreshUploadMediaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtain a new upload credential for a media asset after its upload credential expires.
//
// Description:
//
// You can also call this operation to overwrite media files. After you obtain the upload URL of a media file, you can upload the media file again without changing the audio or video ID.
//
// @param request - RefreshUploadMediaRequest
//
// @return RefreshUploadMediaResponse
func (client *Client) RefreshUploadMedia(request *RefreshUploadMediaRequest) (_result *RefreshUploadMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RefreshUploadMediaResponse{}
	_body, _err := client.RefreshUploadMediaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Registers a media asset with Intelligent Media Services (IMS). IMS assigns an ID to the media asset. This operation asynchronously accesses the media asset service in which the media asset is stored to obtain the file information of the media asset based on the input URL. You can also specify basic information, such as the title, tags, and description, for the media asset. This operation returns the ID of the media asset. You can call the GetMediaInfo operation based on the ID to query the details of the media asset. You can set InputURL only to the URL of an Object Storage Service (OSS) file or an ApsaraVideo VOD media asset.
//
// Description:
//
// Registering a media asset is an asynchronous job that takes 2 to 3 seconds. When the operation returns the ID of the media asset, the registration may have not be completed. If you call the GetMediaInfo operation at this time, you may fail to obtain the information about the media asset.
//
// @param request - RegisterMediaInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RegisterMediaInfoResponse
func (client *Client) RegisterMediaInfoWithOptions(request *RegisterMediaInfoRequest, runtime *util.RuntimeOptions) (_result *RegisterMediaInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessType)) {
		query["BusinessType"] = request.BusinessType
	}

	if !tea.BoolValue(util.IsUnset(request.CateId)) {
		query["CateId"] = request.CateId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.CoverURL)) {
		query["CoverURL"] = request.CoverURL
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InputURL)) {
		query["InputURL"] = request.InputURL
	}

	if !tea.BoolValue(util.IsUnset(request.MediaTags)) {
		query["MediaTags"] = request.MediaTags
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.Overwrite)) {
		query["Overwrite"] = request.Overwrite
	}

	if !tea.BoolValue(util.IsUnset(request.ReferenceId)) {
		query["ReferenceId"] = request.ReferenceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegisterConfig)) {
		query["RegisterConfig"] = request.RegisterConfig
	}

	if !tea.BoolValue(util.IsUnset(request.SmartTagTemplateId)) {
		query["SmartTagTemplateId"] = request.SmartTagTemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	if !tea.BoolValue(util.IsUnset(request.WorkflowId)) {
		query["WorkflowId"] = request.WorkflowId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RegisterMediaInfo"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RegisterMediaInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Registers a media asset with Intelligent Media Services (IMS). IMS assigns an ID to the media asset. This operation asynchronously accesses the media asset service in which the media asset is stored to obtain the file information of the media asset based on the input URL. You can also specify basic information, such as the title, tags, and description, for the media asset. This operation returns the ID of the media asset. You can call the GetMediaInfo operation based on the ID to query the details of the media asset. You can set InputURL only to the URL of an Object Storage Service (OSS) file or an ApsaraVideo VOD media asset.
//
// Description:
//
// Registering a media asset is an asynchronous job that takes 2 to 3 seconds. When the operation returns the ID of the media asset, the registration may have not be completed. If you call the GetMediaInfo operation at this time, you may fail to obtain the information about the media asset.
//
// @param request - RegisterMediaInfoRequest
//
// @return RegisterMediaInfoResponse
func (client *Client) RegisterMediaInfo(request *RegisterMediaInfoRequest) (_result *RegisterMediaInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RegisterMediaInfoResponse{}
	_body, _err := client.RegisterMediaInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Registers a media stream.
//
// Description:
//
// You can call this operation to register a media stream file in an Object Storage Service (OSS) bucket with Intelligent Media Services (IMS) and associate the media stream with the specified media asset ID.
//
// @param request - RegisterMediaStreamRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RegisterMediaStreamResponse
func (client *Client) RegisterMediaStreamWithOptions(request *RegisterMediaStreamRequest, runtime *util.RuntimeOptions) (_result *RegisterMediaStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputURL)) {
		query["InputURL"] = request.InputURL
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RegisterMediaStream"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RegisterMediaStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Registers a media stream.
//
// Description:
//
// You can call this operation to register a media stream file in an Object Storage Service (OSS) bucket with Intelligent Media Services (IMS) and associate the media stream with the specified media asset ID.
//
// @param request - RegisterMediaStreamRequest
//
// @return RegisterMediaStreamResponse
func (client *Client) RegisterMediaStream(request *RegisterMediaStreamRequest) (_result *RegisterMediaStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RegisterMediaStreamResponse{}
	_body, _err := client.RegisterMediaStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries online editing projects by creation time and status.
//
// @param request - SearchEditingProjectRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchEditingProjectResponse
func (client *Client) SearchEditingProjectWithOptions(request *SearchEditingProjectRequest, runtime *util.RuntimeOptions) (_result *SearchEditingProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CreateSource)) {
		query["CreateSource"] = request.CreateSource
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectType)) {
		query["ProjectType"] = request.ProjectType
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateType)) {
		query["TemplateType"] = request.TemplateType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchEditingProject"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchEditingProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries online editing projects by creation time and status.
//
// @param request - SearchEditingProjectRequest
//
// @return SearchEditingProjectResponse
func (client *Client) SearchEditingProject(request *SearchEditingProjectRequest) (_result *SearchEditingProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchEditingProjectResponse{}
	_body, _err := client.SearchEditingProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Re-analyzes the search index jobs of media assets. You can re-run the search index jobs of up to 20 media assets in each request.
//
// @param request - SearchIndexJobRerunRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchIndexJobRerunResponse
func (client *Client) SearchIndexJobRerunWithOptions(request *SearchIndexJobRerunRequest, runtime *util.RuntimeOptions) (_result *SearchIndexJobRerunResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaIds)) {
		query["MediaIds"] = request.MediaIds
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	if !tea.BoolValue(util.IsUnset(request.Task)) {
		query["Task"] = request.Task
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchIndexJobRerun"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchIndexJobRerunResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Re-analyzes the search index jobs of media assets. You can re-run the search index jobs of up to 20 media assets in each request.
//
// @param request - SearchIndexJobRerunRequest
//
// @return SearchIndexJobRerunResponse
func (client *Client) SearchIndexJobRerun(request *SearchIndexJobRerunRequest) (_result *SearchIndexJobRerunResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchIndexJobRerunResponse{}
	_body, _err := client.SearchIndexJobRerunWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries information about media assets based on the request parameters.
//
// Description:
//
// If you have questions about how to use the media asset search feature in Intelligent Media Services (IMS), contact technical support in the DingTalk group (ID 30415005038).
//
// @param request - SearchMediaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchMediaResponse
func (client *Client) SearchMediaWithOptions(request *SearchMediaRequest, runtime *util.RuntimeOptions) (_result *SearchMediaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		query["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.Match)) {
		query["Match"] = request.Match
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ScrollToken)) {
		query["ScrollToken"] = request.ScrollToken
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchMedia"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchMediaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries information about media assets based on the request parameters.
//
// Description:
//
// If you have questions about how to use the media asset search feature in Intelligent Media Services (IMS), contact technical support in the DingTalk group (ID 30415005038).
//
// @param request - SearchMediaRequest
//
// @return SearchMediaResponse
func (client *Client) SearchMedia(request *SearchMediaRequest) (_result *SearchMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchMediaResponse{}
	_body, _err := client.SearchMediaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries media assets based on character names, subtitles, or AI categories.
//
// Description:
//
// You can call this operation to query media assets or media asset clips based on character names, subtitles, or AI categories.
//
// @param request - SearchMediaByAILabelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchMediaByAILabelResponse
func (client *Client) SearchMediaByAILabelWithOptions(request *SearchMediaByAILabelRequest, runtime *util.RuntimeOptions) (_result *SearchMediaByAILabelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MatchingMode)) {
		query["MatchingMode"] = request.MatchingMode
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.MultimodalSearchType)) {
		query["MultimodalSearchType"] = request.MultimodalSearchType
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.SpecificSearch)) {
		query["SpecificSearch"] = request.SpecificSearch
	}

	if !tea.BoolValue(util.IsUnset(request.Text)) {
		query["Text"] = request.Text
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchMediaByAILabel"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchMediaByAILabelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries media assets based on character names, subtitles, or AI categories.
//
// Description:
//
// You can call this operation to query media assets or media asset clips based on character names, subtitles, or AI categories.
//
// @param request - SearchMediaByAILabelRequest
//
// @return SearchMediaByAILabelResponse
func (client *Client) SearchMediaByAILabel(request *SearchMediaByAILabelRequest) (_result *SearchMediaByAILabelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchMediaByAILabelResponse{}
	_body, _err := client.SearchMediaByAILabelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about media assets that are related to a specific face.
//
// Description:
//
// If you have questions about how to use the media asset search feature in Intelligent Media Services (IMS), contact technical support in the DingTalk group (ID 30415005038).
//
// @param request - SearchMediaByFaceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchMediaByFaceResponse
func (client *Client) SearchMediaByFaceWithOptions(request *SearchMediaByFaceRequest, runtime *util.RuntimeOptions) (_result *SearchMediaByFaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		query["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.FaceSearchToken)) {
		query["FaceSearchToken"] = request.FaceSearchToken
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PersonImageUrl)) {
		query["PersonImageUrl"] = request.PersonImageUrl
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchMediaByFace"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchMediaByFaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about media assets that are related to a specific face.
//
// Description:
//
// If you have questions about how to use the media asset search feature in Intelligent Media Services (IMS), contact technical support in the DingTalk group (ID 30415005038).
//
// @param request - SearchMediaByFaceRequest
//
// @return SearchMediaByFaceResponse
func (client *Client) SearchMediaByFace(request *SearchMediaByFaceRequest) (_result *SearchMediaByFaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchMediaByFaceResponse{}
	_body, _err := client.SearchMediaByFaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries media assets by using the hybrid search feature. This operation allows you to search for media assets by using natural language based on intelligent tag text search and the search capabilities of large language models (LLMs). This implements multimodal retrieval.
//
// @param request - SearchMediaByHybridRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchMediaByHybridResponse
func (client *Client) SearchMediaByHybridWithOptions(request *SearchMediaByHybridRequest, runtime *util.RuntimeOptions) (_result *SearchMediaByHybridResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	if !tea.BoolValue(util.IsUnset(request.Text)) {
		query["Text"] = request.Text
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchMediaByHybrid"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchMediaByHybridResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries media assets by using the hybrid search feature. This operation allows you to search for media assets by using natural language based on intelligent tag text search and the search capabilities of large language models (LLMs). This implements multimodal retrieval.
//
// @param request - SearchMediaByHybridRequest
//
// @return SearchMediaByHybridResponse
func (client *Client) SearchMediaByHybrid(request *SearchMediaByHybridRequest) (_result *SearchMediaByHybridResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchMediaByHybridResponse{}
	_body, _err := client.SearchMediaByHybridWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries media assets by using the large visual model. You can use natural language for the query.
//
// Description:
//
// If you have questions about how to use the media asset search feature in Intelligent Media Services (IMS), contact technical support in the DingTalk group (ID 30415005038).
//
// @param request - SearchMediaByMultimodalRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchMediaByMultimodalResponse
func (client *Client) SearchMediaByMultimodalWithOptions(request *SearchMediaByMultimodalRequest, runtime *util.RuntimeOptions) (_result *SearchMediaByMultimodalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	if !tea.BoolValue(util.IsUnset(request.Text)) {
		query["Text"] = request.Text
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchMediaByMultimodal"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchMediaByMultimodalResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries media assets by using the large visual model. You can use natural language for the query.
//
// Description:
//
// If you have questions about how to use the media asset search feature in Intelligent Media Services (IMS), contact technical support in the DingTalk group (ID 30415005038).
//
// @param request - SearchMediaByMultimodalRequest
//
// @return SearchMediaByMultimodalResponse
func (client *Client) SearchMediaByMultimodal(request *SearchMediaByMultimodalRequest) (_result *SearchMediaByMultimodalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchMediaByMultimodalResponse{}
	_body, _err := client.SearchMediaByMultimodalWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about media asset clips that are related to a specific face based on the response to the SearchMediaByFace operation.
//
// Description:
//
// If you have questions about how to use the media asset search feature in Intelligent Media Services (IMS), contact technical support in the DingTalk group (ID 30415005038).
//
// @param request - SearchMediaClipByFaceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchMediaClipByFaceResponse
func (client *Client) SearchMediaClipByFaceWithOptions(request *SearchMediaClipByFaceRequest, runtime *util.RuntimeOptions) (_result *SearchMediaClipByFaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		query["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.FaceSearchToken)) {
		query["FaceSearchToken"] = request.FaceSearchToken
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchMediaClipByFace"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchMediaClipByFaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about media asset clips that are related to a specific face based on the response to the SearchMediaByFace operation.
//
// Description:
//
// If you have questions about how to use the media asset search feature in Intelligent Media Services (IMS), contact technical support in the DingTalk group (ID 30415005038).
//
// @param request - SearchMediaClipByFaceRequest
//
// @return SearchMediaClipByFaceResponse
func (client *Client) SearchMediaClipByFace(request *SearchMediaClipByFaceRequest) (_result *SearchMediaClipByFaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchMediaClipByFaceResponse{}
	_body, _err := client.SearchMediaClipByFaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 搜索公共媒资信息
//
// @param request - SearchPublicMediaInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchPublicMediaInfoResponse
func (client *Client) SearchPublicMediaInfoWithOptions(request *SearchPublicMediaInfoRequest, runtime *util.RuntimeOptions) (_result *SearchPublicMediaInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Authorized)) {
		query["Authorized"] = request.Authorized
	}

	if !tea.BoolValue(util.IsUnset(request.DynamicMetaDataMatchFields)) {
		query["DynamicMetaDataMatchFields"] = request.DynamicMetaDataMatchFields
	}

	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		query["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.Favorite)) {
		query["Favorite"] = request.Favorite
	}

	if !tea.BoolValue(util.IsUnset(request.MediaIds)) {
		query["MediaIds"] = request.MediaIds
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchPublicMediaInfo"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchPublicMediaInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 搜索公共媒资信息
//
// @param request - SearchPublicMediaInfoRequest
//
// @return SearchPublicMediaInfoResponse
func (client *Client) SearchPublicMediaInfo(request *SearchPublicMediaInfoRequest) (_result *SearchPublicMediaInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchPublicMediaInfoResponse{}
	_body, _err := client.SearchPublicMediaInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Sends a DataChannel message to an AI agent.
//
// @param request - SendAIAgentDataChannelMessageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SendAIAgentDataChannelMessageResponse
func (client *Client) SendAIAgentDataChannelMessageWithOptions(request *SendAIAgentDataChannelMessageRequest, runtime *util.RuntimeOptions) (_result *SendAIAgentDataChannelMessageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Message)) {
		query["Message"] = request.Message
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SendAIAgentDataChannelMessage"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendAIAgentDataChannelMessageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Sends a DataChannel message to an AI agent.
//
// @param request - SendAIAgentDataChannelMessageRequest
//
// @return SendAIAgentDataChannelMessageResponse
func (client *Client) SendAIAgentDataChannelMessage(request *SendAIAgentDataChannelMessageRequest) (_result *SendAIAgentDataChannelMessageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendAIAgentDataChannelMessageResponse{}
	_body, _err := client.SendAIAgentDataChannelMessageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Instructs an AI agent to immediately broadcast a text message and supports interruption settings.
//
// Description:
//
// You can call this operation to instruct an AI agent to broadcast the content that you specify. You can determine whether this broadcast can immediately interrupt the ongoing speech. The interruption is allowed by default.
//
// **Note**
//
//   - Make sure that the `InstanceId` is valid and corresponds to an existing AI agent.
//
//   - The content of `Text` must comply with the specifications and does not contain sensitive or inappropriate information.
//
//   - If you do not want the new broadcast to interrupt the ongoing speech, you must set `EnableInterrupt` to `false`.
//
// @param request - SendAIAgentSpeechRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SendAIAgentSpeechResponse
func (client *Client) SendAIAgentSpeechWithOptions(request *SendAIAgentSpeechRequest, runtime *util.RuntimeOptions) (_result *SendAIAgentSpeechResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnableInterrupt)) {
		query["EnableInterrupt"] = request.EnableInterrupt
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Text)) {
		query["Text"] = request.Text
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SendAIAgentSpeech"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendAIAgentSpeechResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Instructs an AI agent to immediately broadcast a text message and supports interruption settings.
//
// Description:
//
// You can call this operation to instruct an AI agent to broadcast the content that you specify. You can determine whether this broadcast can immediately interrupt the ongoing speech. The interruption is allowed by default.
//
// **Note**
//
//   - Make sure that the `InstanceId` is valid and corresponds to an existing AI agent.
//
//   - The content of `Text` must comply with the specifications and does not contain sensitive or inappropriate information.
//
//   - If you do not want the new broadcast to interrupt the ongoing speech, you must set `EnableInterrupt` to `false`.
//
// @param request - SendAIAgentSpeechRequest
//
// @return SendAIAgentSpeechResponse
func (client *Client) SendAIAgentSpeech(request *SendAIAgentSpeechRequest) (_result *SendAIAgentSpeechResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendAIAgentSpeechResponse{}
	_body, _err := client.SendAIAgentSpeechWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 传入消息作为LLM输入。
//
// @param request - SendAIAgentTextRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SendAIAgentTextResponse
func (client *Client) SendAIAgentTextWithOptions(request *SendAIAgentTextRequest, runtime *util.RuntimeOptions) (_result *SendAIAgentTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Text)) {
		query["Text"] = request.Text
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SendAIAgentText"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendAIAgentTextResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 传入消息作为LLM输入。
//
// @param request - SendAIAgentTextRequest
//
// @return SendAIAgentTextResponse
func (client *Client) SendAIAgentText(request *SendAIAgentTextRequest) (_result *SendAIAgentTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendAIAgentTextResponse{}
	_body, _err := client.SendAIAgentTextWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Sends a command to process a live stream snapshot job.
//
// @param request - SendLiveSnapshotJobCommandRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SendLiveSnapshotJobCommandResponse
func (client *Client) SendLiveSnapshotJobCommandWithOptions(request *SendLiveSnapshotJobCommandRequest, runtime *util.RuntimeOptions) (_result *SendLiveSnapshotJobCommandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Command)) {
		body["Command"] = request.Command
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		body["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SendLiveSnapshotJobCommand"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendLiveSnapshotJobCommandResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Sends a command to process a live stream snapshot job.
//
// @param request - SendLiveSnapshotJobCommandRequest
//
// @return SendLiveSnapshotJobCommandResponse
func (client *Client) SendLiveSnapshotJobCommand(request *SendLiveSnapshotJobCommandRequest) (_result *SendLiveSnapshotJobCommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendLiveSnapshotJobCommandResponse{}
	_body, _err := client.SendLiveSnapshotJobCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Sends a command to process a live stream transcoding job.
//
// @param request - SendLiveTranscodeJobCommandRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SendLiveTranscodeJobCommandResponse
func (client *Client) SendLiveTranscodeJobCommandWithOptions(request *SendLiveTranscodeJobCommandRequest, runtime *util.RuntimeOptions) (_result *SendLiveTranscodeJobCommandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Command)) {
		query["Command"] = request.Command
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SendLiveTranscodeJobCommand"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendLiveTranscodeJobCommandResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Sends a command to process a live stream transcoding job.
//
// @param request - SendLiveTranscodeJobCommandRequest
//
// @return SendLiveTranscodeJobCommandResponse
func (client *Client) SendLiveTranscodeJobCommand(request *SendLiveTranscodeJobCommandRequest) (_result *SendLiveTranscodeJobCommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendLiveTranscodeJobCommandResponse{}
	_body, _err := client.SendLiveTranscodeJobCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 向IM客户端发送消息。
//
// @param request - SendMessageChatTextRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SendMessageChatTextResponse
func (client *Client) SendMessageChatTextWithOptions(request *SendMessageChatTextRequest, runtime *util.RuntimeOptions) (_result *SendMessageChatTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AIAgentId)) {
		query["AIAgentId"] = request.AIAgentId
	}

	if !tea.BoolValue(util.IsUnset(request.Mode)) {
		query["Mode"] = request.Mode
	}

	if !tea.BoolValue(util.IsUnset(request.NeedArchiving)) {
		query["NeedArchiving"] = request.NeedArchiving
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiverId)) {
		query["ReceiverId"] = request.ReceiverId
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		query["SessionId"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.Text)) {
		query["Text"] = request.Text
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SendMessageChatText"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendMessageChatTextResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 向IM客户端发送消息。
//
// @param request - SendMessageChatTextRequest
//
// @return SendMessageChatTextResponse
func (client *Client) SendMessageChatText(request *SendMessageChatTextRequest) (_result *SendMessageChatTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendMessageChatTextResponse{}
	_body, _err := client.SendMessageChatTextWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 设置内容分析搜索配置
//
// @param request - SetContentAnalyzeConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetContentAnalyzeConfigResponse
func (client *Client) SetContentAnalyzeConfigWithOptions(request *SetContentAnalyzeConfigRequest, runtime *util.RuntimeOptions) (_result *SetContentAnalyzeConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Auto)) {
		query["Auto"] = request.Auto
	}

	if !tea.BoolValue(util.IsUnset(request.SaveType)) {
		query["SaveType"] = request.SaveType
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetContentAnalyzeConfig"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetContentAnalyzeConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 设置内容分析搜索配置
//
// @param request - SetContentAnalyzeConfigRequest
//
// @return SetContentAnalyzeConfigResponse
func (client *Client) SetContentAnalyzeConfig(request *SetContentAnalyzeConfigRequest) (_result *SetContentAnalyzeConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetContentAnalyzeConfigResponse{}
	_body, _err := client.SetContentAnalyzeConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Sets a custom template as the default template.
//
// @param request - SetDefaultCustomTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetDefaultCustomTemplateResponse
func (client *Client) SetDefaultCustomTemplateWithOptions(request *SetDefaultCustomTemplateRequest, runtime *util.RuntimeOptions) (_result *SetDefaultCustomTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetDefaultCustomTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetDefaultCustomTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Sets a custom template as the default template.
//
// @param request - SetDefaultCustomTemplateRequest
//
// @return SetDefaultCustomTemplateResponse
func (client *Client) SetDefaultCustomTemplate(request *SetDefaultCustomTemplateRequest) (_result *SetDefaultCustomTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDefaultCustomTemplateResponse{}
	_body, _err := client.SetDefaultCustomTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 设置默认存储路径
//
// @param request - SetDefaultStorageLocationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetDefaultStorageLocationResponse
func (client *Client) SetDefaultStorageLocationWithOptions(request *SetDefaultStorageLocationRequest, runtime *util.RuntimeOptions) (_result *SetDefaultStorageLocationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bucket)) {
		query["Bucket"] = request.Bucket
	}

	if !tea.BoolValue(util.IsUnset(request.Path)) {
		query["Path"] = request.Path
	}

	if !tea.BoolValue(util.IsUnset(request.StorageType)) {
		query["StorageType"] = request.StorageType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetDefaultStorageLocation"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetDefaultStorageLocationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 设置默认存储路径
//
// @param request - SetDefaultStorageLocationRequest
//
// @return SetDefaultStorageLocationResponse
func (client *Client) SetDefaultStorageLocation(request *SetDefaultStorageLocationRequest) (_result *SetDefaultStorageLocationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDefaultStorageLocationResponse{}
	_body, _err := client.SetDefaultStorageLocationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures a callback method for one or more events.
//
// @param request - SetEventCallbackRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetEventCallbackResponse
func (client *Client) SetEventCallbackWithOptions(request *SetEventCallbackRequest, runtime *util.RuntimeOptions) (_result *SetEventCallbackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuthKey)) {
		query["AuthKey"] = request.AuthKey
	}

	if !tea.BoolValue(util.IsUnset(request.AuthSwitch)) {
		query["AuthSwitch"] = request.AuthSwitch
	}

	if !tea.BoolValue(util.IsUnset(request.CallbackQueueName)) {
		query["CallbackQueueName"] = request.CallbackQueueName
	}

	if !tea.BoolValue(util.IsUnset(request.CallbackType)) {
		query["CallbackType"] = request.CallbackType
	}

	if !tea.BoolValue(util.IsUnset(request.CallbackURL)) {
		query["CallbackURL"] = request.CallbackURL
	}

	if !tea.BoolValue(util.IsUnset(request.EventTypeList)) {
		query["EventTypeList"] = request.EventTypeList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetEventCallback"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetEventCallbackResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures a callback method for one or more events.
//
// @param request - SetEventCallbackRequest
//
// @return SetEventCallbackResponse
func (client *Client) SetEventCallback(request *SetEventCallbackRequest) (_result *SetEventCallbackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetEventCallbackResponse{}
	_body, _err := client.SetEventCallbackWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables or disables event notifications for an AI agent and configures the callback URL and event types.
//
// Description:
//
// ## [](#)Request description
//
// You can call this operation to configure event notifications for an AI agent. You can configure `EnableNotify` to enable or disable event notifications, configure `CallbackUrl` to specify a callback URL, and configure `EventTypes` to specify event types. You can also configure `Token` to specify an authentication token for enhanced security. The system returns a unique `RequestId` for subsequent tracing after a successful request.
//
// @param request - SetNotifyConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetNotifyConfigResponse
func (client *Client) SetNotifyConfigWithOptions(request *SetNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *SetNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AIAgentId)) {
		query["AIAgentId"] = request.AIAgentId
	}

	if !tea.BoolValue(util.IsUnset(request.AudioOssPath)) {
		query["AudioOssPath"] = request.AudioOssPath
	}

	if !tea.BoolValue(util.IsUnset(request.CallbackUrl)) {
		query["CallbackUrl"] = request.CallbackUrl
	}

	if !tea.BoolValue(util.IsUnset(request.EnableAudioRecording)) {
		query["EnableAudioRecording"] = request.EnableAudioRecording
	}

	if !tea.BoolValue(util.IsUnset(request.EnableNotify)) {
		query["EnableNotify"] = request.EnableNotify
	}

	if !tea.BoolValue(util.IsUnset(request.EventTypes)) {
		query["EventTypes"] = request.EventTypes
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		query["Token"] = request.Token
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetNotifyConfig"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables or disables event notifications for an AI agent and configures the callback URL and event types.
//
// Description:
//
// ## [](#)Request description
//
// You can call this operation to configure event notifications for an AI agent. You can configure `EnableNotify` to enable or disable event notifications, configure `CallbackUrl` to specify a callback URL, and configure `EventTypes` to specify event types. You can also configure `Token` to specify an authentication token for enhanced security. The system returns a unique `RequestId` for subsequent tracing after a successful request.
//
// @param request - SetNotifyConfigRequest
//
// @return SetNotifyConfigResponse
func (client *Client) SetNotifyConfig(request *SetNotifyConfigRequest) (_result *SetNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetNotifyConfigResponse{}
	_body, _err := client.SetNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Starts an AI agent that is configured in the Intelligent Media Services (IMS) console.
//
// Description:
//
// You can call this operation to start an AI agent instance for a conversation. ``````“When the AI agent is started, the system returns a unique `InstanceId` for subsequent tracking and operations.
//
// @param tmpReq - StartAIAgentInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartAIAgentInstanceResponse
func (client *Client) StartAIAgentInstanceWithOptions(tmpReq *StartAIAgentInstanceRequest, runtime *util.RuntimeOptions) (_result *StartAIAgentInstanceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &StartAIAgentInstanceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.AgentConfig)) {
		request.AgentConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AgentConfig, tea.String("AgentConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ChatSyncConfig)) {
		request.ChatSyncConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ChatSyncConfig, tea.String("ChatSyncConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.RuntimeConfig)) {
		request.RuntimeConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RuntimeConfig, tea.String("RuntimeConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TemplateConfig)) {
		request.TemplateConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TemplateConfig, tea.String("TemplateConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AIAgentId)) {
		query["AIAgentId"] = request.AIAgentId
	}

	if !tea.BoolValue(util.IsUnset(request.AgentConfigShrink)) {
		query["AgentConfig"] = request.AgentConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ChatSyncConfigShrink)) {
		query["ChatSyncConfig"] = request.ChatSyncConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.RuntimeConfigShrink)) {
		query["RuntimeConfig"] = request.RuntimeConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		query["SessionId"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateConfigShrink)) {
		query["TemplateConfig"] = request.TemplateConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartAIAgentInstance"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartAIAgentInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Starts an AI agent that is configured in the Intelligent Media Services (IMS) console.
//
// Description:
//
// You can call this operation to start an AI agent instance for a conversation. ``````“When the AI agent is started, the system returns a unique `InstanceId` for subsequent tracking and operations.
//
// @param request - StartAIAgentInstanceRequest
//
// @return StartAIAgentInstanceResponse
func (client *Client) StartAIAgentInstance(request *StartAIAgentInstanceRequest) (_result *StartAIAgentInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartAIAgentInstanceResponse{}
	_body, _err := client.StartAIAgentInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建一个智能体实例，返回智能体所在的频道、频道内名称以及进入频道所需的token。
//
// @param tmpReq - StartAIAgentOutboundCallRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartAIAgentOutboundCallResponse
func (client *Client) StartAIAgentOutboundCallWithOptions(tmpReq *StartAIAgentOutboundCallRequest, runtime *util.RuntimeOptions) (_result *StartAIAgentOutboundCallResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &StartAIAgentOutboundCallShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Config)) {
		request.ConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Config, tea.String("Config"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AIAgentId)) {
		query["AIAgentId"] = request.AIAgentId
	}

	if !tea.BoolValue(util.IsUnset(request.CalledNumber)) {
		query["CalledNumber"] = request.CalledNumber
	}

	if !tea.BoolValue(util.IsUnset(request.CallerNumber)) {
		query["CallerNumber"] = request.CallerNumber
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigShrink)) {
		query["Config"] = request.ConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ImsAIAgentFreeObCall)) {
		query["ImsAIAgentFreeObCall"] = request.ImsAIAgentFreeObCall
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		query["SessionId"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartAIAgentOutboundCall"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartAIAgentOutboundCallResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建一个智能体实例，返回智能体所在的频道、频道内名称以及进入频道所需的token。
//
// @param request - StartAIAgentOutboundCallRequest
//
// @return StartAIAgentOutboundCallResponse
func (client *Client) StartAIAgentOutboundCall(request *StartAIAgentOutboundCallRequest) (_result *StartAIAgentOutboundCallResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartAIAgentOutboundCallResponse{}
	_body, _err := client.StartAIAgentOutboundCallWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Starts a channel.
//
// @param request - StartChannelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartChannelResponse
func (client *Client) StartChannelWithOptions(request *StartChannelRequest, runtime *util.RuntimeOptions) (_result *StartChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelName)) {
		query["ChannelName"] = request.ChannelName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartChannel"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Starts a channel.
//
// @param request - StartChannelRequest
//
// @return StartChannelResponse
func (client *Client) StartChannel(request *StartChannelRequest) (_result *StartChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartChannelResponse{}
	_body, _err := client.StartChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Starts a MediaLive channel.
//
// Description:
//
//	You can call this operation only when the channel is idle. You cannot start a channel repeatedly.
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StartMediaLiveChannelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartMediaLiveChannelResponse
func (client *Client) StartMediaLiveChannelWithOptions(request *StartMediaLiveChannelRequest, runtime *util.RuntimeOptions) (_result *StartMediaLiveChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StartMediaLiveChannel"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartMediaLiveChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Starts a MediaLive channel.
//
// Description:
//
//	You can call this operation only when the channel is idle. You cannot start a channel repeatedly.
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StartMediaLiveChannelRequest
//
// @return StartMediaLiveChannelResponse
func (client *Client) StartMediaLiveChannel(request *StartMediaLiveChannelRequest) (_result *StartMediaLiveChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartMediaLiveChannelResponse{}
	_body, _err := client.StartMediaLiveChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 开启一个机器人实例
//
// @param tmpReq - StartRtcRobotInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartRtcRobotInstanceResponse
func (client *Client) StartRtcRobotInstanceWithOptions(tmpReq *StartRtcRobotInstanceRequest, runtime *util.RuntimeOptions) (_result *StartRtcRobotInstanceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &StartRtcRobotInstanceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Config)) {
		request.ConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Config, tea.String("Config"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuthToken)) {
		query["AuthToken"] = request.AuthToken
	}

	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		query["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigShrink)) {
		query["Config"] = request.ConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.RobotId)) {
		query["RobotId"] = request.RobotId
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartRtcRobotInstance"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartRtcRobotInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 开启一个机器人实例
//
// @param request - StartRtcRobotInstanceRequest
//
// @return StartRtcRobotInstanceResponse
func (client *Client) StartRtcRobotInstance(request *StartRtcRobotInstanceRequest) (_result *StartRtcRobotInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartRtcRobotInstanceResponse{}
	_body, _err := client.StartRtcRobotInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits a workflow task. You can submit a workflow task to implement automated media processing based on a workflow template.
//
// Description:
//
//	  Only media assets from Intelligent Media Services (IMS) or ApsaraVideo VOD can be used as the input of a workflow.
//
//		- When you submit a workflow task, you must specify a workflow template. You can create a workflow template in the [IMS console](https://ims.console.aliyun.com/settings/workflow/list) or use a preset workflow template.
//
// @param request - StartWorkflowRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartWorkflowResponse
func (client *Client) StartWorkflowWithOptions(request *StartWorkflowRequest, runtime *util.RuntimeOptions) (_result *StartWorkflowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SkipInputVerification)) {
		query["SkipInputVerification"] = request.SkipInputVerification
	}

	if !tea.BoolValue(util.IsUnset(request.TaskInput)) {
		query["TaskInput"] = request.TaskInput
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	if !tea.BoolValue(util.IsUnset(request.WorkflowId)) {
		query["WorkflowId"] = request.WorkflowId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartWorkflow"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartWorkflowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a workflow task. You can submit a workflow task to implement automated media processing based on a workflow template.
//
// Description:
//
//	  Only media assets from Intelligent Media Services (IMS) or ApsaraVideo VOD can be used as the input of a workflow.
//
//		- When you submit a workflow task, you must specify a workflow template. You can create a workflow template in the [IMS console](https://ims.console.aliyun.com/settings/workflow/list) or use a preset workflow template.
//
// @param request - StartWorkflowRequest
//
// @return StartWorkflowResponse
func (client *Client) StartWorkflow(request *StartWorkflowRequest) (_result *StartWorkflowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartWorkflowResponse{}
	_body, _err := client.StartWorkflowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Stops an AI agent instance.
//
// Description:
//
//	  When you no longer need an AI agent to participate in a conversation or task, you can call this operation to stop the running agent and release relevant resources.****
//
//		- You must specify the unique ID of the AI agent that you want to stop by using InstanceId.****
//
//		- ****
//
// @param request - StopAIAgentInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopAIAgentInstanceResponse
func (client *Client) StopAIAgentInstanceWithOptions(request *StopAIAgentInstanceRequest, runtime *util.RuntimeOptions) (_result *StopAIAgentInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopAIAgentInstance"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopAIAgentInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Stops an AI agent instance.
//
// Description:
//
//	  When you no longer need an AI agent to participate in a conversation or task, you can call this operation to stop the running agent and release relevant resources.****
//
//		- You must specify the unique ID of the AI agent that you want to stop by using InstanceId.****
//
//		- ****
//
// @param request - StopAIAgentInstanceRequest
//
// @return StopAIAgentInstanceResponse
func (client *Client) StopAIAgentInstance(request *StopAIAgentInstanceRequest) (_result *StopAIAgentInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopAIAgentInstanceResponse{}
	_body, _err := client.StopAIAgentInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Stops a MediaWeaver channel.
//
// @param request - StopChannelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopChannelResponse
func (client *Client) StopChannelWithOptions(request *StopChannelRequest, runtime *util.RuntimeOptions) (_result *StopChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelName)) {
		query["ChannelName"] = request.ChannelName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopChannel"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Stops a MediaWeaver channel.
//
// @param request - StopChannelRequest
//
// @return StopChannelResponse
func (client *Client) StopChannel(request *StopChannelRequest) (_result *StopChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopChannelResponse{}
	_body, _err := client.StopChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Stops a MediaLive channel.
//
// Description:
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StopMediaLiveChannelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopMediaLiveChannelResponse
func (client *Client) StopMediaLiveChannelWithOptions(request *StopMediaLiveChannelRequest, runtime *util.RuntimeOptions) (_result *StopMediaLiveChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StopMediaLiveChannel"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopMediaLiveChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Stops a MediaLive channel.
//
// Description:
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StopMediaLiveChannelRequest
//
// @return StopMediaLiveChannelResponse
func (client *Client) StopMediaLiveChannel(request *StopMediaLiveChannelRequest) (_result *StopMediaLiveChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopMediaLiveChannelResponse{}
	_body, _err := client.StopMediaLiveChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 停止一个机器人实例
//
// @param request - StopRtcRobotInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopRtcRobotInstanceResponse
func (client *Client) StopRtcRobotInstanceWithOptions(request *StopRtcRobotInstanceRequest, runtime *util.RuntimeOptions) (_result *StopRtcRobotInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopRtcRobotInstance"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopRtcRobotInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 停止一个机器人实例
//
// @param request - StopRtcRobotInstanceRequest
//
// @return StopRtcRobotInstanceResponse
func (client *Client) StopRtcRobotInstance(request *StopRtcRobotInstanceRequest) (_result *StopRtcRobotInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopRtcRobotInstanceResponse{}
	_body, _err := client.StopRtcRobotInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交视频送审任务
//
// @param tmpReq - SubmitAIAgentVideoAuditTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitAIAgentVideoAuditTaskResponse
func (client *Client) SubmitAIAgentVideoAuditTaskWithOptions(tmpReq *SubmitAIAgentVideoAuditTaskRequest, runtime *util.RuntimeOptions) (_result *SubmitAIAgentVideoAuditTaskResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitAIAgentVideoAuditTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.CallbackConfig)) {
		request.CallbackConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CallbackConfig, tea.String("CallbackConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.CapturePolicies)) {
		request.CapturePoliciesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CapturePolicies, tea.String("CapturePolicies"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Input)) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Input, tea.String("Input"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AIAgentId)) {
		query["AIAgentId"] = request.AIAgentId
	}

	if !tea.BoolValue(util.IsUnset(request.AuditInterval)) {
		query["AuditInterval"] = request.AuditInterval
	}

	if !tea.BoolValue(util.IsUnset(request.CallbackConfigShrink)) {
		query["CallbackConfig"] = request.CallbackConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.CapturePoliciesShrink)) {
		query["CapturePolicies"] = request.CapturePoliciesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitAIAgentVideoAuditTask"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitAIAgentVideoAuditTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交视频送审任务
//
// @param request - SubmitAIAgentVideoAuditTaskRequest
//
// @return SubmitAIAgentVideoAuditTaskResponse
func (client *Client) SubmitAIAgentVideoAuditTask(request *SubmitAIAgentVideoAuditTaskRequest) (_result *SubmitAIAgentVideoAuditTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitAIAgentVideoAuditTaskResponse{}
	_body, _err := client.SubmitAIAgentVideoAuditTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits an automatic speech recognition (ASR) job to extract the start and end time and the corresponding text information of a speech in a video.
//
// @param request - SubmitASRJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitASRJobResponse
func (client *Client) SubmitASRJobWithOptions(request *SubmitASRJobRequest, runtime *util.RuntimeOptions) (_result *SubmitASRJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Duration)) {
		query["Duration"] = request.Duration
	}

	if !tea.BoolValue(util.IsUnset(request.EditingConfig)) {
		query["EditingConfig"] = request.EditingConfig
	}

	if !tea.BoolValue(util.IsUnset(request.InputFile)) {
		query["InputFile"] = request.InputFile
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitASRJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitASRJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits an automatic speech recognition (ASR) job to extract the start and end time and the corresponding text information of a speech in a video.
//
// @param request - SubmitASRJobRequest
//
// @return SubmitASRJobResponse
func (client *Client) SubmitASRJob(request *SubmitASRJobRequest) (_result *SubmitASRJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitASRJobResponse{}
	_body, _err := client.SubmitASRJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits an audio production job that converts text into an audio file.
//
// @param request - SubmitAudioProduceJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitAudioProduceJobResponse
func (client *Client) SubmitAudioProduceJobWithOptions(request *SubmitAudioProduceJobRequest, runtime *util.RuntimeOptions) (_result *SubmitAudioProduceJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EditingConfig)) {
		query["EditingConfig"] = request.EditingConfig
	}

	if !tea.BoolValue(util.IsUnset(request.InputConfig)) {
		query["InputConfig"] = request.InputConfig
	}

	if !tea.BoolValue(util.IsUnset(request.OutputConfig)) {
		query["OutputConfig"] = request.OutputConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Overwrite)) {
		query["Overwrite"] = request.Overwrite
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitAudioProduceJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitAudioProduceJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits an audio production job that converts text into an audio file.
//
// @param request - SubmitAudioProduceJobRequest
//
// @return SubmitAudioProduceJobResponse
func (client *Client) SubmitAudioProduceJob(request *SubmitAudioProduceJobRequest) (_result *SubmitAudioProduceJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitAudioProduceJobResponse{}
	_body, _err := client.SubmitAudioProduceJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits a digital human training job. You can call this operation to submit a job the first time or submit a job again with updated parameters if the training failed.
//
// @param request - SubmitAvatarTrainingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitAvatarTrainingJobResponse
func (client *Client) SubmitAvatarTrainingJobWithOptions(request *SubmitAvatarTrainingJobRequest, runtime *util.RuntimeOptions) (_result *SubmitAvatarTrainingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitAvatarTrainingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitAvatarTrainingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a digital human training job. You can call this operation to submit a job the first time or submit a job again with updated parameters if the training failed.
//
// @param request - SubmitAvatarTrainingJobRequest
//
// @return SubmitAvatarTrainingJobResponse
func (client *Client) SubmitAvatarTrainingJob(request *SubmitAvatarTrainingJobRequest) (_result *SubmitAvatarTrainingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitAvatarTrainingJobResponse{}
	_body, _err := client.SubmitAvatarTrainingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits a video rendering job for a digitized virtual human based on text or an audio file of a human voice.
//
// @param request - SubmitAvatarVideoJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitAvatarVideoJobResponse
func (client *Client) SubmitAvatarVideoJobWithOptions(request *SubmitAvatarVideoJobRequest, runtime *util.RuntimeOptions) (_result *SubmitAvatarVideoJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EditingConfig)) {
		query["EditingConfig"] = request.EditingConfig
	}

	if !tea.BoolValue(util.IsUnset(request.InputConfig)) {
		query["InputConfig"] = request.InputConfig
	}

	if !tea.BoolValue(util.IsUnset(request.OutputConfig)) {
		query["OutputConfig"] = request.OutputConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitAvatarVideoJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitAvatarVideoJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a video rendering job for a digitized virtual human based on text or an audio file of a human voice.
//
// @param request - SubmitAvatarVideoJobRequest
//
// @return SubmitAvatarVideoJobResponse
func (client *Client) SubmitAvatarVideoJob(request *SubmitAvatarVideoJobRequest) (_result *SubmitAvatarVideoJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitAvatarVideoJobResponse{}
	_body, _err := client.SubmitAvatarVideoJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits a quick video production job that intelligently edits multiple video, audio, and image assets to generate multiple videos at a time.
//
// @param request - SubmitBatchMediaProducingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitBatchMediaProducingJobResponse
func (client *Client) SubmitBatchMediaProducingJobWithOptions(request *SubmitBatchMediaProducingJobRequest, runtime *util.RuntimeOptions) (_result *SubmitBatchMediaProducingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.OutputConfig)) {
		query["OutputConfig"] = request.OutputConfig
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateConfig)) {
		query["TemplateConfig"] = request.TemplateConfig
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EditingConfig)) {
		body["EditingConfig"] = request.EditingConfig
	}

	if !tea.BoolValue(util.IsUnset(request.InputConfig)) {
		body["InputConfig"] = request.InputConfig
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitBatchMediaProducingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitBatchMediaProducingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a quick video production job that intelligently edits multiple video, audio, and image assets to generate multiple videos at a time.
//
// @param request - SubmitBatchMediaProducingJobRequest
//
// @return SubmitBatchMediaProducingJobResponse
func (client *Client) SubmitBatchMediaProducingJob(request *SubmitBatchMediaProducingJobRequest) (_result *SubmitBatchMediaProducingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitBatchMediaProducingJobResponse{}
	_body, _err := client.SubmitBatchMediaProducingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交版权水印提取作业
//
// @param tmpReq - SubmitCopyrightExtractJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitCopyrightExtractJobResponse
func (client *Client) SubmitCopyrightExtractJobWithOptions(tmpReq *SubmitCopyrightExtractJobRequest, runtime *util.RuntimeOptions) (_result *SubmitCopyrightExtractJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitCopyrightExtractJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Input)) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Input, tea.String("Input"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Params)) {
		query["Params"] = request.Params
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitCopyrightExtractJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitCopyrightExtractJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交版权水印提取作业
//
// @param request - SubmitCopyrightExtractJobRequest
//
// @return SubmitCopyrightExtractJobResponse
func (client *Client) SubmitCopyrightExtractJob(request *SubmitCopyrightExtractJobRequest) (_result *SubmitCopyrightExtractJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitCopyrightExtractJobResponse{}
	_body, _err := client.SubmitCopyrightExtractJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交版权水印任务
//
// @param tmpReq - SubmitCopyrightJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitCopyrightJobResponse
func (client *Client) SubmitCopyrightJobWithOptions(tmpReq *SubmitCopyrightJobRequest, runtime *util.RuntimeOptions) (_result *SubmitCopyrightJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitCopyrightJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Input)) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Input, tea.String("Input"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Output)) {
		request.OutputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Output, tea.String("Output"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Level)) {
		query["Level"] = request.Level
	}

	if !tea.BoolValue(util.IsUnset(request.Message)) {
		query["Message"] = request.Message
	}

	if !tea.BoolValue(util.IsUnset(request.OutputShrink)) {
		query["Output"] = request.OutputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Params)) {
		query["Params"] = request.Params
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TotalTime)) {
		query["TotalTime"] = request.TotalTime
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitCopyrightJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitCopyrightJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交版权水印任务
//
// @param request - SubmitCopyrightJobRequest
//
// @return SubmitCopyrightJobResponse
func (client *Client) SubmitCopyrightJob(request *SubmitCopyrightJobRequest) (_result *SubmitCopyrightJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitCopyrightJobResponse{}
	_body, _err := client.SubmitCopyrightJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits a human voice cloning job. The value of VoiceId must be the one used during audio check. The system uses this ID to find the cached audio file for training. After you call this operation, the JobId is returned. The training process is asynchronous. During training, you can call the GetCustomizedVoiceJob operation to query information such as the job state.
//
// @param request - SubmitCustomizedVoiceJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitCustomizedVoiceJobResponse
func (client *Client) SubmitCustomizedVoiceJobWithOptions(request *SubmitCustomizedVoiceJobRequest, runtime *util.RuntimeOptions) (_result *SubmitCustomizedVoiceJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DemoAudioMediaURL)) {
		query["DemoAudioMediaURL"] = request.DemoAudioMediaURL
	}

	if !tea.BoolValue(util.IsUnset(request.VoiceId)) {
		query["VoiceId"] = request.VoiceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitCustomizedVoiceJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitCustomizedVoiceJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a human voice cloning job. The value of VoiceId must be the one used during audio check. The system uses this ID to find the cached audio file for training. After you call this operation, the JobId is returned. The training process is asynchronous. During training, you can call the GetCustomizedVoiceJob operation to query information such as the job state.
//
// @param request - SubmitCustomizedVoiceJobRequest
//
// @return SubmitCustomizedVoiceJobResponse
func (client *Client) SubmitCustomizedVoiceJob(request *SubmitCustomizedVoiceJobRequest) (_result *SubmitCustomizedVoiceJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitCustomizedVoiceJobResponse{}
	_body, _err := client.SubmitCustomizedVoiceJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits a media fingerprint analysis job.
//
// Description:
//
//	  SubmitDNAJob is an asynchronous operation. After a request is sent, the system returns a request ID and a job ID and runs the task in the background.
//
//		- You can call this operation only in the China (Beijing), China (Hangzhou), and China (Shanghai) regions.
//
//		- You can submit a text fingerprint analysis job only in the China (Shanghai) region.
//
// @param tmpReq - SubmitDNAJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitDNAJobResponse
func (client *Client) SubmitDNAJobWithOptions(tmpReq *SubmitDNAJobRequest, runtime *util.RuntimeOptions) (_result *SubmitDNAJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitDNAJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Input)) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Input, tea.String("Input"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.DBId)) {
		query["DBId"] = request.DBId
	}

	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		query["PipelineId"] = request.PipelineId
	}

	if !tea.BoolValue(util.IsUnset(request.PrimaryKey)) {
		query["PrimaryKey"] = request.PrimaryKey
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitDNAJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitDNAJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a media fingerprint analysis job.
//
// Description:
//
//	  SubmitDNAJob is an asynchronous operation. After a request is sent, the system returns a request ID and a job ID and runs the task in the background.
//
//		- You can call this operation only in the China (Beijing), China (Hangzhou), and China (Shanghai) regions.
//
//		- You can submit a text fingerprint analysis job only in the China (Shanghai) region.
//
// @param request - SubmitDNAJobRequest
//
// @return SubmitDNAJobResponse
func (client *Client) SubmitDNAJob(request *SubmitDNAJobRequest) (_result *SubmitDNAJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitDNAJobResponse{}
	_body, _err := client.SubmitDNAJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Generates animated charts based on Excel datasheets, such as line, pie, and bar charts. You can modify the line color and font.
//
// Description:
//
// This feature is available only in the China (Shanghai) region.
//
//   - You can add a title, subtitle, data source, and unit to a chart and specify the font and font size. For supported fonts, see [Fonts](https://help.aliyun.com/document_detail/449567.html).
//
//   - This feature provides five styles of animated charts: normal, mystery, lively, business, and green.
//
//   - You can set the background color or image.
//
//   - You can set the animation duration, size, and bitrate.
//
// Examples
//
//   - Line chart: [Sample datasheet](https://ice-public-media.oss-cn-shanghai.aliyuncs.com/smart/dynamicChart/line.xlsx), [Effect](https://ice-public-media.oss-cn-shanghai.aliyuncs.com/smart/dynamicChart/line.mp4)
//
//   - Bar chart: [Sample datasheet](https://ice-public-media.oss-cn-shanghai.aliyuncs.com/smart/dynamicChart/histgram.xlsx), [Effect](https://ice-public-media.oss-cn-shanghai.aliyuncs.com/smart/dynamicChart/histgram.mp4)
//
//   - Pie chart: [Sample datasheet](https://ice-public-media.oss-cn-shanghai.aliyuncs.com/smart/dynamicChart/pie.xlsx), [Effect](https://ice-public-media.oss-cn-shanghai.aliyuncs.com/smart/dynamicChart/pie.mp4)
//
//   - Normal: [Effect](https://ice-public-media.oss-cn-shanghai.aliyuncs.com/smart/dynamicChart/Normal.mp4)
//
//   - Mystery: [Effect](https://ice-public-media.oss-cn-shanghai.aliyuncs.com/smart/dynamicChart/Mystery.mp4)
//
//   - Lively: [Effect](https://ice-public-media.oss-cn-shanghai.aliyuncs.com/smart/dynamicChart/Lively.mp4)
//
//   - Business: [Effect](https://ice-public-media.oss-cn-shanghai.aliyuncs.com/smart/dynamicChart/Business.mp4)
//
//   - Green: [Effect](https://ice-public-media.oss-cn-shanghai.aliyuncs.com/smart/dynamicChart/Green.mp4)
//
// @param request - SubmitDynamicChartJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitDynamicChartJobResponse
func (client *Client) SubmitDynamicChartJobWithOptions(request *SubmitDynamicChartJobRequest, runtime *util.RuntimeOptions) (_result *SubmitDynamicChartJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AxisParams)) {
		query["AxisParams"] = request.AxisParams
	}

	if !tea.BoolValue(util.IsUnset(request.Background)) {
		query["Background"] = request.Background
	}

	if !tea.BoolValue(util.IsUnset(request.ChartConfig)) {
		query["ChartConfig"] = request.ChartConfig
	}

	if !tea.BoolValue(util.IsUnset(request.ChartTitle)) {
		query["ChartTitle"] = request.ChartTitle
	}

	if !tea.BoolValue(util.IsUnset(request.ChartType)) {
		query["ChartType"] = request.ChartType
	}

	if !tea.BoolValue(util.IsUnset(request.DataSource)) {
		query["DataSource"] = request.DataSource
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Input)) {
		query["Input"] = request.Input
	}

	if !tea.BoolValue(util.IsUnset(request.OutputConfig)) {
		query["OutputConfig"] = request.OutputConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Subtitle)) {
		query["Subtitle"] = request.Subtitle
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.Unit)) {
		query["Unit"] = request.Unit
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitDynamicChartJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitDynamicChartJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Generates animated charts based on Excel datasheets, such as line, pie, and bar charts. You can modify the line color and font.
//
// Description:
//
// This feature is available only in the China (Shanghai) region.
//
//   - You can add a title, subtitle, data source, and unit to a chart and specify the font and font size. For supported fonts, see [Fonts](https://help.aliyun.com/document_detail/449567.html).
//
//   - This feature provides five styles of animated charts: normal, mystery, lively, business, and green.
//
//   - You can set the background color or image.
//
//   - You can set the animation duration, size, and bitrate.
//
// Examples
//
//   - Line chart: [Sample datasheet](https://ice-public-media.oss-cn-shanghai.aliyuncs.com/smart/dynamicChart/line.xlsx), [Effect](https://ice-public-media.oss-cn-shanghai.aliyuncs.com/smart/dynamicChart/line.mp4)
//
//   - Bar chart: [Sample datasheet](https://ice-public-media.oss-cn-shanghai.aliyuncs.com/smart/dynamicChart/histgram.xlsx), [Effect](https://ice-public-media.oss-cn-shanghai.aliyuncs.com/smart/dynamicChart/histgram.mp4)
//
//   - Pie chart: [Sample datasheet](https://ice-public-media.oss-cn-shanghai.aliyuncs.com/smart/dynamicChart/pie.xlsx), [Effect](https://ice-public-media.oss-cn-shanghai.aliyuncs.com/smart/dynamicChart/pie.mp4)
//
//   - Normal: [Effect](https://ice-public-media.oss-cn-shanghai.aliyuncs.com/smart/dynamicChart/Normal.mp4)
//
//   - Mystery: [Effect](https://ice-public-media.oss-cn-shanghai.aliyuncs.com/smart/dynamicChart/Mystery.mp4)
//
//   - Lively: [Effect](https://ice-public-media.oss-cn-shanghai.aliyuncs.com/smart/dynamicChart/Lively.mp4)
//
//   - Business: [Effect](https://ice-public-media.oss-cn-shanghai.aliyuncs.com/smart/dynamicChart/Business.mp4)
//
//   - Green: [Effect](https://ice-public-media.oss-cn-shanghai.aliyuncs.com/smart/dynamicChart/Green.mp4)
//
// @param request - SubmitDynamicChartJobRequest
//
// @return SubmitDynamicChartJobResponse
func (client *Client) SubmitDynamicChartJob(request *SubmitDynamicChartJobRequest) (_result *SubmitDynamicChartJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitDynamicChartJobResponse{}
	_body, _err := client.SubmitDynamicChartJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits an image animation job.
//
// @param tmpReq - SubmitDynamicImageJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitDynamicImageJobResponse
func (client *Client) SubmitDynamicImageJobWithOptions(tmpReq *SubmitDynamicImageJobRequest, runtime *util.RuntimeOptions) (_result *SubmitDynamicImageJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitDynamicImageJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Input)) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Input, tea.String("Input"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Output)) {
		request.OutputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Output, tea.String("Output"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ScheduleConfig)) {
		request.ScheduleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScheduleConfig, tea.String("ScheduleConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TemplateConfig)) {
		request.TemplateConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TemplateConfig, tea.String("TemplateConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OutputShrink)) {
		query["Output"] = request.OutputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConfigShrink)) {
		query["ScheduleConfig"] = request.ScheduleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateConfigShrink)) {
		query["TemplateConfig"] = request.TemplateConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitDynamicImageJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitDynamicImageJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits an image animation job.
//
// @param request - SubmitDynamicImageJobRequest
//
// @return SubmitDynamicImageJobResponse
func (client *Client) SubmitDynamicImageJob(request *SubmitDynamicImageJobRequest) (_result *SubmitDynamicImageJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitDynamicImageJobResponse{}
	_body, _err := client.SubmitDynamicImageJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits a highlight extraction task.
//
// @param request - SubmitHighlightExtractionJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitHighlightExtractionJobResponse
func (client *Client) SubmitHighlightExtractionJobWithOptions(request *SubmitHighlightExtractionJobRequest, runtime *util.RuntimeOptions) (_result *SubmitHighlightExtractionJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.OutputConfig)) {
		query["OutputConfig"] = request.OutputConfig
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputConfig)) {
		body["InputConfig"] = request.InputConfig
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitHighlightExtractionJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitHighlightExtractionJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a highlight extraction task.
//
// @param request - SubmitHighlightExtractionJobRequest
//
// @return SubmitHighlightExtractionJobResponse
func (client *Client) SubmitHighlightExtractionJob(request *SubmitHighlightExtractionJobRequest) (_result *SubmitHighlightExtractionJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitHighlightExtractionJobResponse{}
	_body, _err := client.SubmitHighlightExtractionJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits an intelligent production job.
//
// @param tmpReq - SubmitIProductionJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitIProductionJobResponse
func (client *Client) SubmitIProductionJobWithOptions(tmpReq *SubmitIProductionJobRequest, runtime *util.RuntimeOptions) (_result *SubmitIProductionJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitIProductionJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Input)) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Input, tea.String("Input"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Output)) {
		request.OutputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Output, tea.String("Output"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ScheduleConfig)) {
		request.ScheduleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScheduleConfig, tea.String("ScheduleConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FunctionName)) {
		query["FunctionName"] = request.FunctionName
	}

	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.JobParams)) {
		query["JobParams"] = request.JobParams
	}

	if !tea.BoolValue(util.IsUnset(request.ModelId)) {
		query["ModelId"] = request.ModelId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OutputShrink)) {
		query["Output"] = request.OutputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConfigShrink)) {
		query["ScheduleConfig"] = request.ScheduleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitIProductionJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitIProductionJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits an intelligent production job.
//
// @param request - SubmitIProductionJobRequest
//
// @return SubmitIProductionJobResponse
func (client *Client) SubmitIProductionJob(request *SubmitIProductionJobRequest) (_result *SubmitIProductionJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitIProductionJobResponse{}
	_body, _err := client.SubmitIProductionJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits a live editing job to merge one or more live stream clips into one video. After a live editing job is submitted, the job is queued in the background for asynchronous processing. You can call the GeLiveEditingJob operation to query the state of the job based on the job ID. You can also call the GetMediaInfo operation to query the information about the generated media asset based on the media asset ID.
//
// Description:
//
// Live editing is supported for live streams that are recorded and stored in Object Storage Service (OSS) and ApsaraVideo VOD. If multiple live streams are involved in a single job, only those recorded within the same application are supported for mixed editing. The streams must all be recorded either in OSS or ApsaraVideo VOD.
//
// @param request - SubmitLiveEditingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitLiveEditingJobResponse
func (client *Client) SubmitLiveEditingJobWithOptions(request *SubmitLiveEditingJobRequest, runtime *util.RuntimeOptions) (_result *SubmitLiveEditingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Clips)) {
		query["Clips"] = request.Clips
	}

	if !tea.BoolValue(util.IsUnset(request.LiveStreamConfig)) {
		query["LiveStreamConfig"] = request.LiveStreamConfig
	}

	if !tea.BoolValue(util.IsUnset(request.MediaProduceConfig)) {
		query["MediaProduceConfig"] = request.MediaProduceConfig
	}

	if !tea.BoolValue(util.IsUnset(request.OutputMediaConfig)) {
		query["OutputMediaConfig"] = request.OutputMediaConfig
	}

	if !tea.BoolValue(util.IsUnset(request.OutputMediaTarget)) {
		query["OutputMediaTarget"] = request.OutputMediaTarget
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitLiveEditingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitLiveEditingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a live editing job to merge one or more live stream clips into one video. After a live editing job is submitted, the job is queued in the background for asynchronous processing. You can call the GeLiveEditingJob operation to query the state of the job based on the job ID. You can also call the GetMediaInfo operation to query the information about the generated media asset based on the media asset ID.
//
// Description:
//
// Live editing is supported for live streams that are recorded and stored in Object Storage Service (OSS) and ApsaraVideo VOD. If multiple live streams are involved in a single job, only those recorded within the same application are supported for mixed editing. The streams must all be recorded either in OSS or ApsaraVideo VOD.
//
// @param request - SubmitLiveEditingJobRequest
//
// @return SubmitLiveEditingJobResponse
func (client *Client) SubmitLiveEditingJob(request *SubmitLiveEditingJobRequest) (_result *SubmitLiveEditingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitLiveEditingJobResponse{}
	_body, _err := client.SubmitLiveEditingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits a live stream recording job.
//
// Description:
//
// You can call this operation to record live streams of ApsaraVideo Live or third-party Real-Time Messaging Protocol (RTMP) live streams. We recommend that you ingest a stream before you call this operation to submit a recording job. If no stream is pulled from the streaming URL, the job attempts to pull a stream for 3 minutes. If the attempt times out, the recording service stops.
//
// Before you submit a recording job, you must prepare an Object Storage Service (OSS) or ApsaraVideo VOD bucket. We recommend that you use a storage address configured in Intelligent Media Services (IMS) to facilitate the management and processing of generated recording files.
//
// If the preset recording template does not meet your requirements, you can create a custom recording template.
//
// @param tmpReq - SubmitLiveRecordJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitLiveRecordJobResponse
func (client *Client) SubmitLiveRecordJobWithOptions(tmpReq *SubmitLiveRecordJobRequest, runtime *util.RuntimeOptions) (_result *SubmitLiveRecordJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitLiveRecordJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.RecordOutput)) {
		request.RecordOutputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RecordOutput, tea.String("RecordOutput"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.StreamInput)) {
		request.StreamInputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.StreamInput, tea.String("StreamInput"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyUrl)) {
		body["NotifyUrl"] = request.NotifyUrl
	}

	if !tea.BoolValue(util.IsUnset(request.RecordOutputShrink)) {
		body["RecordOutput"] = request.RecordOutputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.StreamInputShrink)) {
		body["StreamInput"] = request.StreamInputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		body["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitLiveRecordJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitLiveRecordJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a live stream recording job.
//
// Description:
//
// You can call this operation to record live streams of ApsaraVideo Live or third-party Real-Time Messaging Protocol (RTMP) live streams. We recommend that you ingest a stream before you call this operation to submit a recording job. If no stream is pulled from the streaming URL, the job attempts to pull a stream for 3 minutes. If the attempt times out, the recording service stops.
//
// Before you submit a recording job, you must prepare an Object Storage Service (OSS) or ApsaraVideo VOD bucket. We recommend that you use a storage address configured in Intelligent Media Services (IMS) to facilitate the management and processing of generated recording files.
//
// If the preset recording template does not meet your requirements, you can create a custom recording template.
//
// @param request - SubmitLiveRecordJobRequest
//
// @return SubmitLiveRecordJobResponse
func (client *Client) SubmitLiveRecordJob(request *SubmitLiveRecordJobRequest) (_result *SubmitLiveRecordJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitLiveRecordJobResponse{}
	_body, _err := client.SubmitLiveRecordJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits a live stream snapshot job. If the job is submitted during stream ingest, it automatically starts in asynchronous mode. Otherwise, it does not start.
//
// @param tmpReq - SubmitLiveSnapshotJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitLiveSnapshotJobResponse
func (client *Client) SubmitLiveSnapshotJobWithOptions(tmpReq *SubmitLiveSnapshotJobRequest, runtime *util.RuntimeOptions) (_result *SubmitLiveSnapshotJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitLiveSnapshotJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.SnapshotOutput)) {
		request.SnapshotOutputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SnapshotOutput, tea.String("SnapshotOutput"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.StreamInput)) {
		request.StreamInputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.StreamInput, tea.String("StreamInput"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallbackUrl)) {
		body["CallbackUrl"] = request.CallbackUrl
	}

	if !tea.BoolValue(util.IsUnset(request.JobName)) {
		body["JobName"] = request.JobName
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotOutputShrink)) {
		body["SnapshotOutput"] = request.SnapshotOutputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.StreamInputShrink)) {
		body["StreamInput"] = request.StreamInputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		body["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitLiveSnapshotJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitLiveSnapshotJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a live stream snapshot job. If the job is submitted during stream ingest, it automatically starts in asynchronous mode. Otherwise, it does not start.
//
// @param request - SubmitLiveSnapshotJobRequest
//
// @return SubmitLiveSnapshotJobResponse
func (client *Client) SubmitLiveSnapshotJob(request *SubmitLiveSnapshotJobRequest) (_result *SubmitLiveSnapshotJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitLiveSnapshotJobResponse{}
	_body, _err := client.SubmitLiveSnapshotJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits a live stream transcoding job.
//
// Description:
//
//	  When you submit a transcoding job that immediately takes effect, make sure that the input stream can be streamed.
//
//		- When you submit a timed transcoding job, make sure that the input stream can be streamed before the specified time.
//
// @param tmpReq - SubmitLiveTranscodeJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitLiveTranscodeJobResponse
func (client *Client) SubmitLiveTranscodeJobWithOptions(tmpReq *SubmitLiveTranscodeJobRequest, runtime *util.RuntimeOptions) (_result *SubmitLiveTranscodeJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitLiveTranscodeJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.StreamInput)) {
		request.StreamInputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.StreamInput, tea.String("StreamInput"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TimedConfig)) {
		request.TimedConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TimedConfig, tea.String("TimedConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TranscodeOutput)) {
		request.TranscodeOutputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TranscodeOutput, tea.String("TranscodeOutput"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.StartMode)) {
		query["StartMode"] = request.StartMode
	}

	if !tea.BoolValue(util.IsUnset(request.StreamInputShrink)) {
		query["StreamInput"] = request.StreamInputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.TimedConfigShrink)) {
		query["TimedConfig"] = request.TimedConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TranscodeOutputShrink)) {
		query["TranscodeOutput"] = request.TranscodeOutputShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitLiveTranscodeJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitLiveTranscodeJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a live stream transcoding job.
//
// Description:
//
//	  When you submit a transcoding job that immediately takes effect, make sure that the input stream can be streamed.
//
//		- When you submit a timed transcoding job, make sure that the input stream can be streamed before the specified time.
//
// @param request - SubmitLiveTranscodeJobRequest
//
// @return SubmitLiveTranscodeJobResponse
func (client *Client) SubmitLiveTranscodeJob(request *SubmitLiveTranscodeJobRequest) (_result *SubmitLiveTranscodeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitLiveTranscodeJobResponse{}
	_body, _err := client.SubmitLiveTranscodeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits a structural analysis job for a media asset. For example, you can submit a job to analyze the speaker, translate the video, and obtain the paragraph summary.
//
// @param request - SubmitMediaAiAnalysisJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitMediaAiAnalysisJobResponse
func (client *Client) SubmitMediaAiAnalysisJobWithOptions(request *SubmitMediaAiAnalysisJobRequest, runtime *util.RuntimeOptions) (_result *SubmitMediaAiAnalysisJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AnalysisParams)) {
		query["AnalysisParams"] = request.AnalysisParams
	}

	if !tea.BoolValue(util.IsUnset(request.Input)) {
		query["Input"] = request.Input
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitMediaAiAnalysisJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitMediaAiAnalysisJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a structural analysis job for a media asset. For example, you can submit a job to analyze the speaker, translate the video, and obtain the paragraph summary.
//
// @param request - SubmitMediaAiAnalysisJobRequest
//
// @return SubmitMediaAiAnalysisJobResponse
func (client *Client) SubmitMediaAiAnalysisJob(request *SubmitMediaAiAnalysisJobRequest) (_result *SubmitMediaAiAnalysisJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitMediaAiAnalysisJobResponse{}
	_body, _err := client.SubmitMediaAiAnalysisJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits a content moderation job.
//
// Description:
//
// The job that you submit by calling this operation is run in asynchronous mode. The job is added to an ApsaraVideo Media Processing (MPS) queue to be scheduled and run. You can call the [QueryMediaCensorJobDetail](https://help.aliyun.com/document_detail/444847.html) operation or configure an asynchronous notification to obtain the job results.
//
// @param tmpReq - SubmitMediaCensorJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitMediaCensorJobResponse
func (client *Client) SubmitMediaCensorJobWithOptions(tmpReq *SubmitMediaCensorJobRequest, runtime *util.RuntimeOptions) (_result *SubmitMediaCensorJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitMediaCensorJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Input)) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Input, tea.String("Input"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ScheduleConfig)) {
		request.ScheduleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScheduleConfig, tea.String("ScheduleConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Barrages)) {
		query["Barrages"] = request.Barrages
	}

	if !tea.BoolValue(util.IsUnset(request.CoverImages)) {
		query["CoverImages"] = request.CoverImages
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyUrl)) {
		query["NotifyUrl"] = request.NotifyUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Output)) {
		query["Output"] = request.Output
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConfigShrink)) {
		query["ScheduleConfig"] = request.ScheduleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitMediaCensorJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitMediaCensorJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a content moderation job.
//
// Description:
//
// The job that you submit by calling this operation is run in asynchronous mode. The job is added to an ApsaraVideo Media Processing (MPS) queue to be scheduled and run. You can call the [QueryMediaCensorJobDetail](https://help.aliyun.com/document_detail/444847.html) operation or configure an asynchronous notification to obtain the job results.
//
// @param request - SubmitMediaCensorJobRequest
//
// @return SubmitMediaCensorJobResponse
func (client *Client) SubmitMediaCensorJob(request *SubmitMediaCensorJobRequest) (_result *SubmitMediaCensorJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitMediaCensorJobResponse{}
	_body, _err := client.SubmitMediaCensorJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits a transcoding task.
//
// @param request - SubmitMediaConvertJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitMediaConvertJobResponse
func (client *Client) SubmitMediaConvertJobWithOptions(request *SubmitMediaConvertJobRequest, runtime *util.RuntimeOptions) (_result *SubmitMediaConvertJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		query["PipelineId"] = request.PipelineId
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitMediaConvertJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitMediaConvertJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a transcoding task.
//
// @param request - SubmitMediaConvertJobRequest
//
// @return SubmitMediaConvertJobResponse
func (client *Client) SubmitMediaConvertJob(request *SubmitMediaConvertJobRequest) (_result *SubmitMediaConvertJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitMediaConvertJobResponse{}
	_body, _err := client.SubmitMediaConvertJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits a media information analysis job in asynchronous mode.
//
// Description:
//
// You can call this operation to analyze an input media file by using a callback mechanism or initiating subsequent queries. This operation is suitable for scenarios in which real-time performance is less critical and high concurrency is expected.
//
// @param tmpReq - SubmitMediaInfoJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitMediaInfoJobResponse
func (client *Client) SubmitMediaInfoJobWithOptions(tmpReq *SubmitMediaInfoJobRequest, runtime *util.RuntimeOptions) (_result *SubmitMediaInfoJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitMediaInfoJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Input)) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Input, tea.String("Input"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ScheduleConfig)) {
		request.ScheduleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScheduleConfig, tea.String("ScheduleConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConfigShrink)) {
		query["ScheduleConfig"] = request.ScheduleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitMediaInfoJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitMediaInfoJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a media information analysis job in asynchronous mode.
//
// Description:
//
// You can call this operation to analyze an input media file by using a callback mechanism or initiating subsequent queries. This operation is suitable for scenarios in which real-time performance is less critical and high concurrency is expected.
//
// @param request - SubmitMediaInfoJobRequest
//
// @return SubmitMediaInfoJobResponse
func (client *Client) SubmitMediaInfoJob(request *SubmitMediaInfoJobRequest) (_result *SubmitMediaInfoJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitMediaInfoJobResponse{}
	_body, _err := client.SubmitMediaInfoJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits a media editing and production job. If you need to perform any form of post-production such as editing and production on video or audio materials, you can call this operation to automate the process.
//
// Description:
//
//	  This operation returns only the submission result of a media editing and production job. When the submission result is returned, the job may still be in progress. After a media editing and production job is submitted, the job is queued in the background for asynchronous processing.
//
//		- The materials referenced in the timeline of an online editing project can be media assets in the media asset library or Object Storage Service (OSS) objects. External URLs or Alibaba Cloud Content Delivery Network (CDN) URLs are not supported. To use an OSS object as a material, you must set MediaUrl to an OSS URL, such as https://your-bucket.oss-region-name.aliyuncs.com/your-object.ext.
//
//		- After the production is complete, the output file is automatically registered as a media asset. The media asset first needs to be analyzed. After the media asset is analyzed, you can query the duration and resolution information based on the media asset ID.
//
// ## [](#)Limits
//
//   - The throttling threshold of this operation is 30 queries per second (QPS).
//
//     **
//
//     **Note*	- If the threshold is exceeded, a "Throttling.User" error is returned when you submit an editing job. For more information about how to resolve this issue, see the [FAQ](https://help.aliyun.com/document_detail/453484.html).
//
//   - You can create up to 100 video tracks, 100 image tracks, and 100 subtitle tracks in a project.
//
//   - The total size of material files cannot exceed 1 TB.
//
//   - The OSS buckets in which the materials reside and where the output media assets are stored must be in the same region as the region in which Intelligent Media Services (IMS) is activated.
//
//   - An output video must meet the following requirements:
//
//   - Both the width and height must be at least 128 pixels.
//
//   - Both the width and height cannot exceed 4,096 pixels.
//
//   - The shorter side of the video cannot exceed 2,160 pixels.
//
// @param request - SubmitMediaProducingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitMediaProducingJobResponse
func (client *Client) SubmitMediaProducingJobWithOptions(request *SubmitMediaProducingJobRequest, runtime *util.RuntimeOptions) (_result *SubmitMediaProducingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.ClipsParam)) {
		query["ClipsParam"] = request.ClipsParam
	}

	if !tea.BoolValue(util.IsUnset(request.EditingProduceConfig)) {
		query["EditingProduceConfig"] = request.EditingProduceConfig
	}

	if !tea.BoolValue(util.IsUnset(request.MediaMetadata)) {
		query["MediaMetadata"] = request.MediaMetadata
	}

	if !tea.BoolValue(util.IsUnset(request.OutputMediaConfig)) {
		query["OutputMediaConfig"] = request.OutputMediaConfig
	}

	if !tea.BoolValue(util.IsUnset(request.OutputMediaTarget)) {
		query["OutputMediaTarget"] = request.OutputMediaTarget
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectMetadata)) {
		query["ProjectMetadata"] = request.ProjectMetadata
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Timeline)) {
		body["Timeline"] = request.Timeline
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitMediaProducingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitMediaProducingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a media editing and production job. If you need to perform any form of post-production such as editing and production on video or audio materials, you can call this operation to automate the process.
//
// Description:
//
//	  This operation returns only the submission result of a media editing and production job. When the submission result is returned, the job may still be in progress. After a media editing and production job is submitted, the job is queued in the background for asynchronous processing.
//
//		- The materials referenced in the timeline of an online editing project can be media assets in the media asset library or Object Storage Service (OSS) objects. External URLs or Alibaba Cloud Content Delivery Network (CDN) URLs are not supported. To use an OSS object as a material, you must set MediaUrl to an OSS URL, such as https://your-bucket.oss-region-name.aliyuncs.com/your-object.ext.
//
//		- After the production is complete, the output file is automatically registered as a media asset. The media asset first needs to be analyzed. After the media asset is analyzed, you can query the duration and resolution information based on the media asset ID.
//
// ## [](#)Limits
//
//   - The throttling threshold of this operation is 30 queries per second (QPS).
//
//     **
//
//     **Note*	- If the threshold is exceeded, a "Throttling.User" error is returned when you submit an editing job. For more information about how to resolve this issue, see the [FAQ](https://help.aliyun.com/document_detail/453484.html).
//
//   - You can create up to 100 video tracks, 100 image tracks, and 100 subtitle tracks in a project.
//
//   - The total size of material files cannot exceed 1 TB.
//
//   - The OSS buckets in which the materials reside and where the output media assets are stored must be in the same region as the region in which Intelligent Media Services (IMS) is activated.
//
//   - An output video must meet the following requirements:
//
//   - Both the width and height must be at least 128 pixels.
//
//   - Both the width and height cannot exceed 4,096 pixels.
//
//   - The shorter side of the video cannot exceed 2,160 pixels.
//
// @param request - SubmitMediaProducingJobRequest
//
// @return SubmitMediaProducingJobResponse
func (client *Client) SubmitMediaProducingJob(request *SubmitMediaProducingJobRequest) (_result *SubmitMediaProducingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitMediaProducingJobResponse{}
	_body, _err := client.SubmitMediaProducingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits a packaging job.
//
// @param tmpReq - SubmitPackageJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitPackageJobResponse
func (client *Client) SubmitPackageJobWithOptions(tmpReq *SubmitPackageJobRequest, runtime *util.RuntimeOptions) (_result *SubmitPackageJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitPackageJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Inputs)) {
		request.InputsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Inputs, tea.String("Inputs"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Output)) {
		request.OutputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Output, tea.String("Output"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ScheduleConfig)) {
		request.ScheduleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScheduleConfig, tea.String("ScheduleConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputsShrink)) {
		query["Inputs"] = request.InputsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OutputShrink)) {
		query["Output"] = request.OutputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConfigShrink)) {
		query["ScheduleConfig"] = request.ScheduleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitPackageJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitPackageJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a packaging job.
//
// @param request - SubmitPackageJobRequest
//
// @return SubmitPackageJobResponse
func (client *Client) SubmitPackageJob(request *SubmitPackageJobRequest) (_result *SubmitPackageJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitPackageJobResponse{}
	_body, _err := client.SubmitPackageJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交工程导出任务
//
// @param request - SubmitProjectExportJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitProjectExportJobResponse
func (client *Client) SubmitProjectExportJobWithOptions(request *SubmitProjectExportJobRequest, runtime *util.RuntimeOptions) (_result *SubmitProjectExportJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ExportType)) {
		query["ExportType"] = request.ExportType
	}

	if !tea.BoolValue(util.IsUnset(request.OutputMediaConfig)) {
		query["OutputMediaConfig"] = request.OutputMediaConfig
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Timeline)) {
		body["Timeline"] = request.Timeline
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitProjectExportJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitProjectExportJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交工程导出任务
//
// @param request - SubmitProjectExportJobRequest
//
// @return SubmitProjectExportJobResponse
func (client *Client) SubmitProjectExportJob(request *SubmitProjectExportJobRequest) (_result *SubmitProjectExportJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitProjectExportJobResponse{}
	_body, _err := client.SubmitProjectExportJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits a task to automatically recognize the highlight segments in the video input and compile them into a dramatic and engaging clip.
//
// @param request - SubmitScreenMediaHighlightsJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitScreenMediaHighlightsJobResponse
func (client *Client) SubmitScreenMediaHighlightsJobWithOptions(request *SubmitScreenMediaHighlightsJobRequest, runtime *util.RuntimeOptions) (_result *SubmitScreenMediaHighlightsJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OutputConfig)) {
		query["OutputConfig"] = request.OutputConfig
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EditingConfig)) {
		body["EditingConfig"] = request.EditingConfig
	}

	if !tea.BoolValue(util.IsUnset(request.InputConfig)) {
		body["InputConfig"] = request.InputConfig
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitScreenMediaHighlightsJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitScreenMediaHighlightsJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a task to automatically recognize the highlight segments in the video input and compile them into a dramatic and engaging clip.
//
// @param request - SubmitScreenMediaHighlightsJobRequest
//
// @return SubmitScreenMediaHighlightsJobResponse
func (client *Client) SubmitScreenMediaHighlightsJob(request *SubmitScreenMediaHighlightsJobRequest) (_result *SubmitScreenMediaHighlightsJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitScreenMediaHighlightsJobResponse{}
	_body, _err := client.SubmitScreenMediaHighlightsJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交拆条任务
//
// @param request - SubmitSegmentationJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitSegmentationJobResponse
func (client *Client) SubmitSegmentationJobWithOptions(request *SubmitSegmentationJobRequest, runtime *util.RuntimeOptions) (_result *SubmitSegmentationJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.JobParams)) {
		query["JobParams"] = request.JobParams
	}

	if !tea.BoolValue(util.IsUnset(request.OutputConfig)) {
		query["OutputConfig"] = request.OutputConfig
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputConfig)) {
		body["InputConfig"] = request.InputConfig
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitSegmentationJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitSegmentationJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交拆条任务
//
// @param request - SubmitSegmentationJobRequest
//
// @return SubmitSegmentationJobResponse
func (client *Client) SubmitSegmentationJob(request *SubmitSegmentationJobRequest) (_result *SubmitSegmentationJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitSegmentationJobResponse{}
	_body, _err := client.SubmitSegmentationJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits a smart tagging job.
//
// Description:
//
// Before you call this operation to submit a smart tagging job, you must add a smart tagging template and specify the analysis types that you want to use in the template. For more information, see CreateCustomTemplate. You can use the smart tagging feature only in the China (Beijing), China (Shanghai), and China (Hangzhou) regions. By default, an ApsaraVideo Media Processing (MPS) queue can process a maximum of two concurrent smart tagging jobs. If you need to process more concurrent smart tagging jobs, submit a ticket to contact Alibaba Cloud Technical Support for evaluation and configuration.
//
// @param tmpReq - SubmitSmarttagJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitSmarttagJobResponse
func (client *Client) SubmitSmarttagJobWithOptions(tmpReq *SubmitSmarttagJobRequest, runtime *util.RuntimeOptions) (_result *SubmitSmarttagJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitSmarttagJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Input)) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Input, tea.String("Input"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ScheduleConfig)) {
		request.ScheduleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScheduleConfig, tea.String("ScheduleConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		query["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.ContentAddr)) {
		query["ContentAddr"] = request.ContentAddr
	}

	if !tea.BoolValue(util.IsUnset(request.ContentType)) {
		query["ContentType"] = request.ContentType
	}

	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyUrl)) {
		query["NotifyUrl"] = request.NotifyUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Params)) {
		query["Params"] = request.Params
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConfigShrink)) {
		query["ScheduleConfig"] = request.ScheduleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitSmarttagJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitSmarttagJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a smart tagging job.
//
// Description:
//
// Before you call this operation to submit a smart tagging job, you must add a smart tagging template and specify the analysis types that you want to use in the template. For more information, see CreateCustomTemplate. You can use the smart tagging feature only in the China (Beijing), China (Shanghai), and China (Hangzhou) regions. By default, an ApsaraVideo Media Processing (MPS) queue can process a maximum of two concurrent smart tagging jobs. If you need to process more concurrent smart tagging jobs, submit a ticket to contact Alibaba Cloud Technical Support for evaluation and configuration.
//
// @param request - SubmitSmarttagJobRequest
//
// @return SubmitSmarttagJobResponse
func (client *Client) SubmitSmarttagJob(request *SubmitSmarttagJobRequest) (_result *SubmitSmarttagJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitSmarttagJobResponse{}
	_body, _err := client.SubmitSmarttagJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits a snapshot job.
//
// @param tmpReq - SubmitSnapshotJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitSnapshotJobResponse
func (client *Client) SubmitSnapshotJobWithOptions(tmpReq *SubmitSnapshotJobRequest, runtime *util.RuntimeOptions) (_result *SubmitSnapshotJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitSnapshotJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Input)) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Input, tea.String("Input"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Output)) {
		request.OutputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Output, tea.String("Output"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ScheduleConfig)) {
		request.ScheduleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScheduleConfig, tea.String("ScheduleConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TemplateConfig)) {
		request.TemplateConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TemplateConfig, tea.String("TemplateConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OutputShrink)) {
		query["Output"] = request.OutputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConfigShrink)) {
		query["ScheduleConfig"] = request.ScheduleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateConfigShrink)) {
		query["TemplateConfig"] = request.TemplateConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitSnapshotJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitSnapshotJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a snapshot job.
//
// @param request - SubmitSnapshotJobRequest
//
// @return SubmitSnapshotJobResponse
func (client *Client) SubmitSnapshotJob(request *SubmitSnapshotJobRequest) (_result *SubmitSnapshotJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitSnapshotJobResponse{}
	_body, _err := client.SubmitSnapshotJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits a sports highlights job to generate a highlights video of an event based on event materials that contain commentary.
//
// @param request - SubmitSportsHighlightsJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitSportsHighlightsJobResponse
func (client *Client) SubmitSportsHighlightsJobWithOptions(request *SubmitSportsHighlightsJobRequest, runtime *util.RuntimeOptions) (_result *SubmitSportsHighlightsJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.OutputConfig)) {
		query["OutputConfig"] = request.OutputConfig
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputConfig)) {
		body["InputConfig"] = request.InputConfig
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitSportsHighlightsJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitSportsHighlightsJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a sports highlights job to generate a highlights video of an event based on event materials that contain commentary.
//
// @param request - SubmitSportsHighlightsJobRequest
//
// @return SubmitSportsHighlightsJobResponse
func (client *Client) SubmitSportsHighlightsJob(request *SubmitSportsHighlightsJobRequest) (_result *SubmitSportsHighlightsJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitSportsHighlightsJobResponse{}
	_body, _err := client.SubmitSportsHighlightsJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits a standard human voice cloning job. After you call this operation, the JobId is returned. The training process is asynchronous. During training, you can call the GetCustomizedVoiceJob operation to query information such as the job state.
//
// @param request - SubmitStandardCustomizedVoiceJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitStandardCustomizedVoiceJobResponse
func (client *Client) SubmitStandardCustomizedVoiceJobWithOptions(request *SubmitStandardCustomizedVoiceJobRequest, runtime *util.RuntimeOptions) (_result *SubmitStandardCustomizedVoiceJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Audios)) {
		query["Audios"] = request.Audios
	}

	if !tea.BoolValue(util.IsUnset(request.Authentication)) {
		query["Authentication"] = request.Authentication
	}

	if !tea.BoolValue(util.IsUnset(request.DemoAudioMediaURL)) {
		query["DemoAudioMediaURL"] = request.DemoAudioMediaURL
	}

	if !tea.BoolValue(util.IsUnset(request.Gender)) {
		query["Gender"] = request.Gender
	}

	if !tea.BoolValue(util.IsUnset(request.VoiceName)) {
		query["VoiceName"] = request.VoiceName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitStandardCustomizedVoiceJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitStandardCustomizedVoiceJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a standard human voice cloning job. After you call this operation, the JobId is returned. The training process is asynchronous. During training, you can call the GetCustomizedVoiceJob operation to query information such as the job state.
//
// @param request - SubmitStandardCustomizedVoiceJobRequest
//
// @return SubmitStandardCustomizedVoiceJobResponse
func (client *Client) SubmitStandardCustomizedVoiceJob(request *SubmitStandardCustomizedVoiceJobRequest) (_result *SubmitStandardCustomizedVoiceJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitStandardCustomizedVoiceJobResponse{}
	_body, _err := client.SubmitStandardCustomizedVoiceJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits a media file in synchronous mode for media information analysis.
//
// Description:
//
// You can call this operation to analyze an input media file in synchronous mode. This operation is suitable for scenarios that require high real-time performance and low concurrency. If it takes an extended period of time to obtain the media information about the input media file, the request may time out or the obtained information may be inaccurate. We recommend that you call the [SubmitMediaInfoJob](https://help.aliyun.com/document_detail/441222.html) operation to obtain media information.
//
// @param tmpReq - SubmitSyncMediaInfoJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitSyncMediaInfoJobResponse
func (client *Client) SubmitSyncMediaInfoJobWithOptions(tmpReq *SubmitSyncMediaInfoJobRequest, runtime *util.RuntimeOptions) (_result *SubmitSyncMediaInfoJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitSyncMediaInfoJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Input)) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Input, tea.String("Input"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ScheduleConfig)) {
		request.ScheduleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScheduleConfig, tea.String("ScheduleConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConfigShrink)) {
		query["ScheduleConfig"] = request.ScheduleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitSyncMediaInfoJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitSyncMediaInfoJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a media file in synchronous mode for media information analysis.
//
// Description:
//
// You can call this operation to analyze an input media file in synchronous mode. This operation is suitable for scenarios that require high real-time performance and low concurrency. If it takes an extended period of time to obtain the media information about the input media file, the request may time out or the obtained information may be inaccurate. We recommend that you call the [SubmitMediaInfoJob](https://help.aliyun.com/document_detail/441222.html) operation to obtain media information.
//
// @param request - SubmitSyncMediaInfoJobRequest
//
// @return SubmitSyncMediaInfoJobResponse
func (client *Client) SubmitSyncMediaInfoJob(request *SubmitSyncMediaInfoJobRequest) (_result *SubmitSyncMediaInfoJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitSyncMediaInfoJobResponse{}
	_body, _err := client.SubmitSyncMediaInfoJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits a text generation job to generate marketing copies based on keywords and the requirements for the word count and number of output copies. The word count of the output copies may differ from the specified word count. After the job is submitted, you can call the GetSmartHandleJob operation to obtain the job state and result based on the job ID.
//
// @param request - SubmitTextGenerateJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitTextGenerateJobResponse
func (client *Client) SubmitTextGenerateJobWithOptions(request *SubmitTextGenerateJobRequest, runtime *util.RuntimeOptions) (_result *SubmitTextGenerateJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GenerateConfig)) {
		query["GenerateConfig"] = request.GenerateConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitTextGenerateJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitTextGenerateJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a text generation job to generate marketing copies based on keywords and the requirements for the word count and number of output copies. The word count of the output copies may differ from the specified word count. After the job is submitted, you can call the GetSmartHandleJob operation to obtain the job state and result based on the job ID.
//
// @param request - SubmitTextGenerateJobRequest
//
// @return SubmitTextGenerateJobResponse
func (client *Client) SubmitTextGenerateJob(request *SubmitTextGenerateJobRequest) (_result *SubmitTextGenerateJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitTextGenerateJobResponse{}
	_body, _err := client.SubmitTextGenerateJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交视频溯源水印ab流任务
//
// @param tmpReq - SubmitTraceAbJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitTraceAbJobResponse
func (client *Client) SubmitTraceAbJobWithOptions(tmpReq *SubmitTraceAbJobRequest, runtime *util.RuntimeOptions) (_result *SubmitTraceAbJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitTraceAbJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Input)) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Input, tea.String("Input"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Output)) {
		request.OutputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Output, tea.String("Output"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CipherBase64ed)) {
		query["CipherBase64ed"] = request.CipherBase64ed
	}

	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Level)) {
		query["Level"] = request.Level
	}

	if !tea.BoolValue(util.IsUnset(request.OutputShrink)) {
		query["Output"] = request.OutputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TotalTime)) {
		query["TotalTime"] = request.TotalTime
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitTraceAbJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitTraceAbJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交视频溯源水印ab流任务
//
// @param request - SubmitTraceAbJobRequest
//
// @return SubmitTraceAbJobResponse
func (client *Client) SubmitTraceAbJob(request *SubmitTraceAbJobRequest) (_result *SubmitTraceAbJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitTraceAbJobResponse{}
	_body, _err := client.SubmitTraceAbJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交溯源水印提取任务
//
// @param tmpReq - SubmitTraceExtractJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitTraceExtractJobResponse
func (client *Client) SubmitTraceExtractJobWithOptions(tmpReq *SubmitTraceExtractJobRequest, runtime *util.RuntimeOptions) (_result *SubmitTraceExtractJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitTraceExtractJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Input)) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Input, tea.String("Input"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Params)) {
		query["Params"] = request.Params
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitTraceExtractJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitTraceExtractJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交溯源水印提取任务
//
// @param request - SubmitTraceExtractJobRequest
//
// @return SubmitTraceExtractJobResponse
func (client *Client) SubmitTraceExtractJob(request *SubmitTraceExtractJobRequest) (_result *SubmitTraceExtractJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitTraceExtractJobResponse{}
	_body, _err := client.SubmitTraceExtractJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交视频溯源水印m3u8文件任务
//
// @param tmpReq - SubmitTraceM3u8JobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitTraceM3u8JobResponse
func (client *Client) SubmitTraceM3u8JobWithOptions(tmpReq *SubmitTraceM3u8JobRequest, runtime *util.RuntimeOptions) (_result *SubmitTraceM3u8JobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitTraceM3u8JobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Output)) {
		request.OutputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Output, tea.String("Output"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.KeyUri)) {
		query["KeyUri"] = request.KeyUri
	}

	if !tea.BoolValue(util.IsUnset(request.OutputShrink)) {
		query["Output"] = request.OutputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Params)) {
		query["Params"] = request.Params
	}

	if !tea.BoolValue(util.IsUnset(request.Trace)) {
		query["Trace"] = request.Trace
	}

	if !tea.BoolValue(util.IsUnset(request.TraceMediaId)) {
		query["TraceMediaId"] = request.TraceMediaId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitTraceM3u8Job"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitTraceM3u8JobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交视频溯源水印m3u8文件任务
//
// @param request - SubmitTraceM3u8JobRequest
//
// @return SubmitTraceM3u8JobResponse
func (client *Client) SubmitTraceM3u8Job(request *SubmitTraceM3u8JobRequest) (_result *SubmitTraceM3u8JobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitTraceM3u8JobResponse{}
	_body, _err := client.SubmitTraceM3u8JobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits a transcoding job.
//
// @param tmpReq - SubmitTranscodeJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitTranscodeJobResponse
func (client *Client) SubmitTranscodeJobWithOptions(tmpReq *SubmitTranscodeJobRequest, runtime *util.RuntimeOptions) (_result *SubmitTranscodeJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitTranscodeJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InputGroup)) {
		request.InputGroupShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InputGroup, tea.String("InputGroup"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.OutputGroup)) {
		request.OutputGroupShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.OutputGroup, tea.String("OutputGroup"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ScheduleConfig)) {
		request.ScheduleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScheduleConfig, tea.String("ScheduleConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.InputGroupShrink)) {
		query["InputGroup"] = request.InputGroupShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OutputGroupShrink)) {
		query["OutputGroup"] = request.OutputGroupShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConfigShrink)) {
		query["ScheduleConfig"] = request.ScheduleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitTranscodeJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitTranscodeJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a transcoding job.
//
// @param request - SubmitTranscodeJobRequest
//
// @return SubmitTranscodeJobResponse
func (client *Client) SubmitTranscodeJob(request *SubmitTranscodeJobRequest) (_result *SubmitTranscodeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitTranscodeJobResponse{}
	_body, _err := client.SubmitTranscodeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Submits a video translation job. You can call this operation to translate subtitles in a video and audio to a specific language. Lip-sync adaptation will be supported in the future.
//
// Description:
//
// After you call this operation to submit a video translation job, the system returns a job ID. You can call the GetSmartHandleJob operation based on the job ID to obtain the status and result information of the job.
//
// @param request - SubmitVideoTranslationJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitVideoTranslationJobResponse
func (client *Client) SubmitVideoTranslationJobWithOptions(request *SubmitVideoTranslationJobRequest, runtime *util.RuntimeOptions) (_result *SubmitVideoTranslationJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EditingConfig)) {
		query["EditingConfig"] = request.EditingConfig
	}

	if !tea.BoolValue(util.IsUnset(request.InputConfig)) {
		query["InputConfig"] = request.InputConfig
	}

	if !tea.BoolValue(util.IsUnset(request.OutputConfig)) {
		query["OutputConfig"] = request.OutputConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Signature)) {
		query["Signature"] = request.Signature
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureMehtod)) {
		query["SignatureMehtod"] = request.SignatureMehtod
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureNonce)) {
		query["SignatureNonce"] = request.SignatureNonce
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureType)) {
		query["SignatureType"] = request.SignatureType
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureVersion)) {
		query["SignatureVersion"] = request.SignatureVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitVideoTranslationJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitVideoTranslationJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a video translation job. You can call this operation to translate subtitles in a video and audio to a specific language. Lip-sync adaptation will be supported in the future.
//
// Description:
//
// After you call this operation to submit a video translation job, the system returns a job ID. You can call the GetSmartHandleJob operation based on the job ID to obtain the status and result information of the job.
//
// @param request - SubmitVideoTranslationJobRequest
//
// @return SubmitVideoTranslationJobResponse
func (client *Client) SubmitVideoTranslationJob(request *SubmitVideoTranslationJobRequest) (_result *SubmitVideoTranslationJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitVideoTranslationJobResponse{}
	_body, _err := client.SubmitVideoTranslationJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Hands off a conversation to a human agent.
//
// @param request - TakeoverAIAgentCallRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TakeoverAIAgentCallResponse
func (client *Client) TakeoverAIAgentCallWithOptions(request *TakeoverAIAgentCallRequest, runtime *util.RuntimeOptions) (_result *TakeoverAIAgentCallResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HumanAgentUserId)) {
		query["HumanAgentUserId"] = request.HumanAgentUserId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RequireToken)) {
		query["RequireToken"] = request.RequireToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TakeoverAIAgentCall"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TakeoverAIAgentCallResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Hands off a conversation to a human agent.
//
// @param request - TakeoverAIAgentCallRequest
//
// @return TakeoverAIAgentCallResponse
func (client *Client) TakeoverAIAgentCall(request *TakeoverAIAgentCallRequest) (_result *TakeoverAIAgentCallResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TakeoverAIAgentCallResponse{}
	_body, _err := client.TakeoverAIAgentCallWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the configurations of an AI agent.
//
// Description:
//
// ## [](#)Request description
//
// You can call this operation to update the configurations of an AI agent, such as the tone, by specifying the agent ID and configurations.
//
// @param tmpReq - UpdateAIAgentInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateAIAgentInstanceResponse
func (client *Client) UpdateAIAgentInstanceWithOptions(tmpReq *UpdateAIAgentInstanceRequest, runtime *util.RuntimeOptions) (_result *UpdateAIAgentInstanceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateAIAgentInstanceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.AgentConfig)) {
		request.AgentConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AgentConfig, tea.String("AgentConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TemplateConfig)) {
		request.TemplateConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TemplateConfig, tea.String("TemplateConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentConfigShrink)) {
		query["AgentConfig"] = request.AgentConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateConfigShrink)) {
		query["TemplateConfig"] = request.TemplateConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAIAgentInstance"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAIAgentInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the configurations of an AI agent.
//
// Description:
//
// ## [](#)Request description
//
// You can call this operation to update the configurations of an AI agent, such as the tone, by specifying the agent ID and configurations.
//
// @param request - UpdateAIAgentInstanceRequest
//
// @return UpdateAIAgentInstanceResponse
func (client *Client) UpdateAIAgentInstance(request *UpdateAIAgentInstanceRequest) (_result *UpdateAIAgentInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAIAgentInstanceResponse{}
	_body, _err := client.UpdateAIAgentInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies an ad insertion configuration.
//
// @param request - UpdateAdInsertionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateAdInsertionResponse
func (client *Client) UpdateAdInsertionWithOptions(request *UpdateAdInsertionRequest, runtime *util.RuntimeOptions) (_result *UpdateAdInsertionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdMarkerPassthrough)) {
		body["AdMarkerPassthrough"] = request.AdMarkerPassthrough
	}

	if !tea.BoolValue(util.IsUnset(request.AdsUrl)) {
		body["AdsUrl"] = request.AdsUrl
	}

	if !tea.BoolValue(util.IsUnset(request.CdnAdSegmentUrlPrefix)) {
		body["CdnAdSegmentUrlPrefix"] = request.CdnAdSegmentUrlPrefix
	}

	if !tea.BoolValue(util.IsUnset(request.CdnContentSegmentUrlPrefix)) {
		body["CdnContentSegmentUrlPrefix"] = request.CdnContentSegmentUrlPrefix
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigAliases)) {
		body["ConfigAliases"] = request.ConfigAliases
	}

	if !tea.BoolValue(util.IsUnset(request.ContentUrlPrefix)) {
		body["ContentUrlPrefix"] = request.ContentUrlPrefix
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PersonalizationThreshold)) {
		body["PersonalizationThreshold"] = request.PersonalizationThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.SlateAdUrl)) {
		body["SlateAdUrl"] = request.SlateAdUrl
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAdInsertion"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAdInsertionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies an ad insertion configuration.
//
// @param request - UpdateAdInsertionRequest
//
// @return UpdateAdInsertionResponse
func (client *Client) UpdateAdInsertion(request *UpdateAdInsertionRequest) (_result *UpdateAdInsertionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAdInsertionResponse{}
	_body, _err := client.UpdateAdInsertionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a digital human training job. You can modify the basic information or update parameters such as Video and Transparent for retraining if the training failed.
//
// @param request - UpdateAvatarTrainingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateAvatarTrainingJobResponse
func (client *Client) UpdateAvatarTrainingJobWithOptions(request *UpdateAvatarTrainingJobRequest, runtime *util.RuntimeOptions) (_result *UpdateAvatarTrainingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AvatarDescription)) {
		query["AvatarDescription"] = request.AvatarDescription
	}

	if !tea.BoolValue(util.IsUnset(request.AvatarName)) {
		query["AvatarName"] = request.AvatarName
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.Portrait)) {
		query["Portrait"] = request.Portrait
	}

	if !tea.BoolValue(util.IsUnset(request.Thumbnail)) {
		query["Thumbnail"] = request.Thumbnail
	}

	if !tea.BoolValue(util.IsUnset(request.Transparent)) {
		query["Transparent"] = request.Transparent
	}

	if !tea.BoolValue(util.IsUnset(request.Video)) {
		query["Video"] = request.Video
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAvatarTrainingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAvatarTrainingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a digital human training job. You can modify the basic information or update parameters such as Video and Transparent for retraining if the training failed.
//
// @param request - UpdateAvatarTrainingJobRequest
//
// @return UpdateAvatarTrainingJobResponse
func (client *Client) UpdateAvatarTrainingJob(request *UpdateAvatarTrainingJobRequest) (_result *UpdateAvatarTrainingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAvatarTrainingJobResponse{}
	_body, _err := client.UpdateAvatarTrainingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a category.
//
// Description:
//
// After you create a media asset category, you can call this operation to find the category based on the category ID and change the name of the category.
//
// @param request - UpdateCategoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateCategoryResponse
func (client *Client) UpdateCategoryWithOptions(request *UpdateCategoryRequest, runtime *util.RuntimeOptions) (_result *UpdateCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CateId)) {
		query["CateId"] = request.CateId
	}

	if !tea.BoolValue(util.IsUnset(request.CateName)) {
		query["CateName"] = request.CateName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateCategory"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateCategoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a category.
//
// Description:
//
// After you create a media asset category, you can call this operation to find the category based on the category ID and change the name of the category.
//
// @param request - UpdateCategoryRequest
//
// @return UpdateCategoryResponse
func (client *Client) UpdateCategory(request *UpdateCategoryRequest) (_result *UpdateCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateCategoryResponse{}
	_body, _err := client.UpdateCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a MediaWeaver channel.
//
// @param request - UpdateChannelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateChannelResponse
func (client *Client) UpdateChannelWithOptions(request *UpdateChannelRequest, runtime *util.RuntimeOptions) (_result *UpdateChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessPolicy)) {
		query["AccessPolicy"] = request.AccessPolicy
	}

	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["AccessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.ChannelName)) {
		query["ChannelName"] = request.ChannelName
	}

	if !tea.BoolValue(util.IsUnset(request.FillerSourceLocationName)) {
		query["FillerSourceLocationName"] = request.FillerSourceLocationName
	}

	if !tea.BoolValue(util.IsUnset(request.FillerSourceName)) {
		query["FillerSourceName"] = request.FillerSourceName
	}

	if !tea.BoolValue(util.IsUnset(request.OutPutConfigList)) {
		query["OutPutConfigList"] = request.OutPutConfigList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateChannel"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a MediaWeaver channel.
//
// @param request - UpdateChannelRequest
//
// @return UpdateChannelResponse
func (client *Client) UpdateChannel(request *UpdateChannelRequest) (_result *UpdateChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateChannelResponse{}
	_body, _err := client.UpdateChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a custom template.
//
// @param request - UpdateCustomTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateCustomTemplateResponse
func (client *Client) UpdateCustomTemplateWithOptions(request *UpdateCustomTemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateCustomTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateConfig)) {
		query["TemplateConfig"] = request.TemplateConfig
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateCustomTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateCustomTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a custom template.
//
// @param request - UpdateCustomTemplateRequest
//
// @return UpdateCustomTemplateResponse
func (client *Client) UpdateCustomTemplate(request *UpdateCustomTemplateRequest) (_result *UpdateCustomTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateCustomTemplateResponse{}
	_body, _err := client.UpdateCustomTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a personalized human voice. Only the media asset ID of the sample audio file can be modified.
//
// @param request - UpdateCustomizedVoiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateCustomizedVoiceResponse
func (client *Client) UpdateCustomizedVoiceWithOptions(request *UpdateCustomizedVoiceRequest, runtime *util.RuntimeOptions) (_result *UpdateCustomizedVoiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DemoAudioMediaId)) {
		query["DemoAudioMediaId"] = request.DemoAudioMediaId
	}

	if !tea.BoolValue(util.IsUnset(request.VoiceId)) {
		query["VoiceId"] = request.VoiceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateCustomizedVoice"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateCustomizedVoiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a personalized human voice. Only the media asset ID of the sample audio file can be modified.
//
// @param request - UpdateCustomizedVoiceRequest
//
// @return UpdateCustomizedVoiceResponse
func (client *Client) UpdateCustomizedVoice(request *UpdateCustomizedVoiceRequest) (_result *UpdateCustomizedVoiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateCustomizedVoiceResponse{}
	_body, _err := client.UpdateCustomizedVoiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies an online editing project. You can call this operation to modify the configurations such as the title, timeline, and thumbnail of an online editing project.
//
// @param request - UpdateEditingProjectRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateEditingProjectResponse
func (client *Client) UpdateEditingProjectWithOptions(request *UpdateEditingProjectRequest, runtime *util.RuntimeOptions) (_result *UpdateEditingProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessStatus)) {
		query["BusinessStatus"] = request.BusinessStatus
	}

	if !tea.BoolValue(util.IsUnset(request.ClipsParam)) {
		query["ClipsParam"] = request.ClipsParam
	}

	if !tea.BoolValue(util.IsUnset(request.CoverURL)) {
		query["CoverURL"] = request.CoverURL
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Timeline)) {
		body["Timeline"] = request.Timeline
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateEditingProject"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateEditingProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies an online editing project. You can call this operation to modify the configurations such as the title, timeline, and thumbnail of an online editing project.
//
// @param request - UpdateEditingProjectRequest
//
// @return UpdateEditingProjectResponse
func (client *Client) UpdateEditingProject(request *UpdateEditingProjectRequest) (_result *UpdateEditingProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateEditingProjectResponse{}
	_body, _err := client.UpdateEditingProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新热词库
//
// @param tmpReq - UpdateHotwordLibraryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateHotwordLibraryResponse
func (client *Client) UpdateHotwordLibraryWithOptions(tmpReq *UpdateHotwordLibraryRequest, runtime *util.RuntimeOptions) (_result *UpdateHotwordLibraryResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateHotwordLibraryShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Hotwords)) {
		request.HotwordsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Hotwords, tea.String("Hotwords"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.HotwordLibraryId)) {
		query["HotwordLibraryId"] = request.HotwordLibraryId
	}

	if !tea.BoolValue(util.IsUnset(request.HotwordsShrink)) {
		query["Hotwords"] = request.HotwordsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateHotwordLibrary"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateHotwordLibraryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新热词库
//
// @param request - UpdateHotwordLibraryRequest
//
// @return UpdateHotwordLibraryResponse
func (client *Client) UpdateHotwordLibrary(request *UpdateHotwordLibraryRequest) (_result *UpdateHotwordLibraryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateHotwordLibraryResponse{}
	_body, _err := client.UpdateHotwordLibraryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the configuration of a live package channel, including the protocol, segment duration, and number of segments.
//
// Description:
//
// ## [](#)Usage notes
//
// You need to provide the name of the channel group to which the channel belongs, channel name, protocol, segment duration, and number of segments to update. In addition, you can choose to add or modify the description of the channel. Make sure that the provided channel group name and channel name conform to the naming conventions.
//
// @param request - UpdateLivePackageChannelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLivePackageChannelResponse
func (client *Client) UpdateLivePackageChannelWithOptions(request *UpdateLivePackageChannelRequest, runtime *util.RuntimeOptions) (_result *UpdateLivePackageChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelName)) {
		body["ChannelName"] = request.ChannelName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		body["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.Protocol)) {
		body["Protocol"] = request.Protocol
	}

	if !tea.BoolValue(util.IsUnset(request.SegmentCount)) {
		body["SegmentCount"] = request.SegmentCount
	}

	if !tea.BoolValue(util.IsUnset(request.SegmentDuration)) {
		body["SegmentDuration"] = request.SegmentDuration
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLivePackageChannel"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLivePackageChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the configuration of a live package channel, including the protocol, segment duration, and number of segments.
//
// Description:
//
// ## [](#)Usage notes
//
// You need to provide the name of the channel group to which the channel belongs, channel name, protocol, segment duration, and number of segments to update. In addition, you can choose to add or modify the description of the channel. Make sure that the provided channel group name and channel name conform to the naming conventions.
//
// @param request - UpdateLivePackageChannelRequest
//
// @return UpdateLivePackageChannelResponse
func (client *Client) UpdateLivePackageChannel(request *UpdateLivePackageChannelRequest) (_result *UpdateLivePackageChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLivePackageChannelResponse{}
	_body, _err := client.UpdateLivePackageChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the credentials of ingest endpoints associated with a live package channel.
//
// Description:
//
// ## [](#)Usage notes
//
// You can choose to update the primary endpoint, secondary endpoint, or both. The response includes the updated ingest endpoint URL, username, and password for the ingest device to reconfigure.
//
// @param request - UpdateLivePackageChannelCredentialsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLivePackageChannelCredentialsResponse
func (client *Client) UpdateLivePackageChannelCredentialsWithOptions(request *UpdateLivePackageChannelCredentialsRequest, runtime *util.RuntimeOptions) (_result *UpdateLivePackageChannelCredentialsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelName)) {
		body["ChannelName"] = request.ChannelName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		body["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.RotateCredentials)) {
		body["RotateCredentials"] = request.RotateCredentials
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLivePackageChannelCredentials"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLivePackageChannelCredentialsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the credentials of ingest endpoints associated with a live package channel.
//
// Description:
//
// ## [](#)Usage notes
//
// You can choose to update the primary endpoint, secondary endpoint, or both. The response includes the updated ingest endpoint URL, username, and password for the ingest device to reconfigure.
//
// @param request - UpdateLivePackageChannelCredentialsRequest
//
// @return UpdateLivePackageChannelCredentialsResponse
func (client *Client) UpdateLivePackageChannelCredentials(request *UpdateLivePackageChannelCredentialsRequest) (_result *UpdateLivePackageChannelCredentialsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLivePackageChannelCredentialsResponse{}
	_body, _err := client.UpdateLivePackageChannelCredentialsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the information about a live package channel group including its description.
//
// Description:
//
// ## [](#)Usage notes
//
// This API operation allows you to modify the name and description of a live package channel group. The channel group name must conform to the naming conventions and can be up to 1,000 characters. The API response includes the updated channel group details and unique identifier of the request.
//
// @param request - UpdateLivePackageChannelGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLivePackageChannelGroupResponse
func (client *Client) UpdateLivePackageChannelGroupWithOptions(request *UpdateLivePackageChannelGroupRequest, runtime *util.RuntimeOptions) (_result *UpdateLivePackageChannelGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		body["GroupName"] = request.GroupName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLivePackageChannelGroup"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLivePackageChannelGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the information about a live package channel group including its description.
//
// Description:
//
// ## [](#)Usage notes
//
// This API operation allows you to modify the name and description of a live package channel group. The channel group name must conform to the naming conventions and can be up to 1,000 characters. The API response includes the updated channel group details and unique identifier of the request.
//
// @param request - UpdateLivePackageChannelGroupRequest
//
// @return UpdateLivePackageChannelGroupResponse
func (client *Client) UpdateLivePackageChannelGroup(request *UpdateLivePackageChannelGroupRequest) (_result *UpdateLivePackageChannelGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLivePackageChannelGroupResponse{}
	_body, _err := client.UpdateLivePackageChannelGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the origin endpoint settings including the protocol, time shifting, and access control settings.
//
// Description:
//
// ## [](#)Usage notes
//
// You can call this operation to modify the origin protocol, set the number of days that time-shifted content is available, define playlist names, and configure the IP address blacklist and whitelist, allowing for fine-grained control over streaming media distribution. Some parameters are required. You must configure IpWhitelist, AuthorizationCode, or both.
//
// @param tmpReq - UpdateLivePackageOriginEndpointRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLivePackageOriginEndpointResponse
func (client *Client) UpdateLivePackageOriginEndpointWithOptions(tmpReq *UpdateLivePackageOriginEndpointRequest, runtime *util.RuntimeOptions) (_result *UpdateLivePackageOriginEndpointResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateLivePackageOriginEndpointShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.LivePackagingConfig)) {
		request.LivePackagingConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.LivePackagingConfig, tea.String("LivePackagingConfig"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuthorizationCode)) {
		body["AuthorizationCode"] = request.AuthorizationCode
	}

	if !tea.BoolValue(util.IsUnset(request.ChannelName)) {
		body["ChannelName"] = request.ChannelName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EndpointName)) {
		body["EndpointName"] = request.EndpointName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		body["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.IpBlacklist)) {
		body["IpBlacklist"] = request.IpBlacklist
	}

	if !tea.BoolValue(util.IsUnset(request.IpWhitelist)) {
		body["IpWhitelist"] = request.IpWhitelist
	}

	if !tea.BoolValue(util.IsUnset(request.LivePackagingConfigShrink)) {
		body["LivePackagingConfig"] = request.LivePackagingConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ManifestName)) {
		body["ManifestName"] = request.ManifestName
	}

	if !tea.BoolValue(util.IsUnset(request.Protocol)) {
		body["Protocol"] = request.Protocol
	}

	if !tea.BoolValue(util.IsUnset(request.TimeshiftVision)) {
		body["TimeshiftVision"] = request.TimeshiftVision
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLivePackageOriginEndpoint"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLivePackageOriginEndpointResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the origin endpoint settings including the protocol, time shifting, and access control settings.
//
// Description:
//
// ## [](#)Usage notes
//
// You can call this operation to modify the origin protocol, set the number of days that time-shifted content is available, define playlist names, and configure the IP address blacklist and whitelist, allowing for fine-grained control over streaming media distribution. Some parameters are required. You must configure IpWhitelist, AuthorizationCode, or both.
//
// @param request - UpdateLivePackageOriginEndpointRequest
//
// @return UpdateLivePackageOriginEndpointResponse
func (client *Client) UpdateLivePackageOriginEndpoint(request *UpdateLivePackageOriginEndpointRequest) (_result *UpdateLivePackageOriginEndpointResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLivePackageOriginEndpointResponse{}
	_body, _err := client.UpdateLivePackageOriginEndpointWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the information about a live stream recording template.
//
// Description:
//
// Only user-created templates can be updated. The preset template cannot be updated.
//
// @param tmpReq - UpdateLiveRecordTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveRecordTemplateResponse
func (client *Client) UpdateLiveRecordTemplateWithOptions(tmpReq *UpdateLiveRecordTemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveRecordTemplateResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateLiveRecordTemplateShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.RecordFormat)) {
		request.RecordFormatShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RecordFormat, tea.String("RecordFormat"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RecordFormatShrink)) {
		body["RecordFormat"] = request.RecordFormatShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		body["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLiveRecordTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLiveRecordTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the information about a live stream recording template.
//
// Description:
//
// Only user-created templates can be updated. The preset template cannot be updated.
//
// @param request - UpdateLiveRecordTemplateRequest
//
// @return UpdateLiveRecordTemplateResponse
func (client *Client) UpdateLiveRecordTemplate(request *UpdateLiveRecordTemplateRequest) (_result *UpdateLiveRecordTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveRecordTemplateResponse{}
	_body, _err := client.UpdateLiveRecordTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the information about a live stream snapshot template.
//
// @param request - UpdateLiveSnapshotTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveSnapshotTemplateResponse
func (client *Client) UpdateLiveSnapshotTemplateWithOptions(request *UpdateLiveSnapshotTemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveSnapshotTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OverwriteFormat)) {
		body["OverwriteFormat"] = request.OverwriteFormat
	}

	if !tea.BoolValue(util.IsUnset(request.SequenceFormat)) {
		body["SequenceFormat"] = request.SequenceFormat
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		body["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		body["TemplateName"] = request.TemplateName
	}

	if !tea.BoolValue(util.IsUnset(request.TimeInterval)) {
		body["TimeInterval"] = request.TimeInterval
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLiveSnapshotTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLiveSnapshotTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the information about a live stream snapshot template.
//
// @param request - UpdateLiveSnapshotTemplateRequest
//
// @return UpdateLiveSnapshotTemplateResponse
func (client *Client) UpdateLiveSnapshotTemplate(request *UpdateLiveSnapshotTemplateRequest) (_result *UpdateLiveSnapshotTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveSnapshotTemplateResponse{}
	_body, _err := client.UpdateLiveSnapshotTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the information about a live stream transcoding job.
//
// Description:
//
//	  For a non-timed transcoding job, you can modify the Name parameter of the job, regardless of the job state.
//
//		- For a timed job, you can modify the Name, StreamInput, TranscodeOutput, and TimedConfig parameters. However, the StreamInput, TranscodeOutput, and TimedConfig parameters can be modified only when the job is not started.
//
// @param tmpReq - UpdateLiveTranscodeJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveTranscodeJobResponse
func (client *Client) UpdateLiveTranscodeJobWithOptions(tmpReq *UpdateLiveTranscodeJobRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveTranscodeJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateLiveTranscodeJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.StreamInput)) {
		request.StreamInputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.StreamInput, tea.String("StreamInput"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TimedConfig)) {
		request.TimedConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TimedConfig, tea.String("TimedConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TranscodeOutput)) {
		request.TranscodeOutputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TranscodeOutput, tea.String("TranscodeOutput"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.StreamInputShrink)) {
		query["StreamInput"] = request.StreamInputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TimedConfigShrink)) {
		query["TimedConfig"] = request.TimedConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TranscodeOutputShrink)) {
		query["TranscodeOutput"] = request.TranscodeOutputShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLiveTranscodeJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLiveTranscodeJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the information about a live stream transcoding job.
//
// Description:
//
//	  For a non-timed transcoding job, you can modify the Name parameter of the job, regardless of the job state.
//
//		- For a timed job, you can modify the Name, StreamInput, TranscodeOutput, and TimedConfig parameters. However, the StreamInput, TranscodeOutput, and TimedConfig parameters can be modified only when the job is not started.
//
// @param request - UpdateLiveTranscodeJobRequest
//
// @return UpdateLiveTranscodeJobResponse
func (client *Client) UpdateLiveTranscodeJob(request *UpdateLiveTranscodeJobRequest) (_result *UpdateLiveTranscodeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveTranscodeJobResponse{}
	_body, _err := client.UpdateLiveTranscodeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the information about a live stream transcoding template.
//
// @param tmpReq - UpdateLiveTranscodeTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveTranscodeTemplateResponse
func (client *Client) UpdateLiveTranscodeTemplateWithOptions(tmpReq *UpdateLiveTranscodeTemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveTranscodeTemplateResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateLiveTranscodeTemplateShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.TemplateConfig)) {
		request.TemplateConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TemplateConfig, tea.String("TemplateConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateConfigShrink)) {
		query["TemplateConfig"] = request.TemplateConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLiveTranscodeTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLiveTranscodeTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the information about a live stream transcoding template.
//
// @param request - UpdateLiveTranscodeTemplateRequest
//
// @return UpdateLiveTranscodeTemplateResponse
func (client *Client) UpdateLiveTranscodeTemplate(request *UpdateLiveTranscodeTemplateRequest) (_result *UpdateLiveTranscodeTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveTranscodeTemplateResponse{}
	_body, _err := client.UpdateLiveTranscodeTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the source of a MediaConnect flow.
//
// Description:
//
//	  You can modify the source only when the flow is in the offline state.
//
//		- The source type cannot be modified.
//
// @param request - UpdateMediaConnectFlowInputRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMediaConnectFlowInputResponse
func (client *Client) UpdateMediaConnectFlowInputWithOptions(request *UpdateMediaConnectFlowInputRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaConnectFlowInputResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Cidrs)) {
		query["Cidrs"] = request.Cidrs
	}

	if !tea.BoolValue(util.IsUnset(request.FlowId)) {
		query["FlowId"] = request.FlowId
	}

	if !tea.BoolValue(util.IsUnset(request.InputFromUrl)) {
		query["InputFromUrl"] = request.InputFromUrl
	}

	if !tea.BoolValue(util.IsUnset(request.InputName)) {
		query["InputName"] = request.InputName
	}

	if !tea.BoolValue(util.IsUnset(request.MaxBitrate)) {
		query["MaxBitrate"] = request.MaxBitrate
	}

	if !tea.BoolValue(util.IsUnset(request.SrtLatency)) {
		query["SrtLatency"] = request.SrtLatency
	}

	if !tea.BoolValue(util.IsUnset(request.SrtPassphrase)) {
		query["SrtPassphrase"] = request.SrtPassphrase
	}

	if !tea.BoolValue(util.IsUnset(request.SrtPbkeyLen)) {
		query["SrtPbkeyLen"] = request.SrtPbkeyLen
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMediaConnectFlowInput"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMediaConnectFlowInputResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the source of a MediaConnect flow.
//
// Description:
//
//	  You can modify the source only when the flow is in the offline state.
//
//		- The source type cannot be modified.
//
// @param request - UpdateMediaConnectFlowInputRequest
//
// @return UpdateMediaConnectFlowInputResponse
func (client *Client) UpdateMediaConnectFlowInput(request *UpdateMediaConnectFlowInputRequest) (_result *UpdateMediaConnectFlowInputResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMediaConnectFlowInputResponse{}
	_body, _err := client.UpdateMediaConnectFlowInputWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies an output of a MediaConnect flow.
//
// Description:
//
//	  You can modify an output only when the flow is in the offline state.
//
//		- The output type cannot be modified.
//
// @param request - UpdateMediaConnectFlowOutputRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMediaConnectFlowOutputResponse
func (client *Client) UpdateMediaConnectFlowOutputWithOptions(request *UpdateMediaConnectFlowOutputRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaConnectFlowOutputResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Cidrs)) {
		query["Cidrs"] = request.Cidrs
	}

	if !tea.BoolValue(util.IsUnset(request.FlowId)) {
		query["FlowId"] = request.FlowId
	}

	if !tea.BoolValue(util.IsUnset(request.OutputName)) {
		query["OutputName"] = request.OutputName
	}

	if !tea.BoolValue(util.IsUnset(request.OutputToUrl)) {
		query["OutputToUrl"] = request.OutputToUrl
	}

	if !tea.BoolValue(util.IsUnset(request.PlayerLimit)) {
		query["PlayerLimit"] = request.PlayerLimit
	}

	if !tea.BoolValue(util.IsUnset(request.SrtLatency)) {
		query["SrtLatency"] = request.SrtLatency
	}

	if !tea.BoolValue(util.IsUnset(request.SrtPassphrase)) {
		query["SrtPassphrase"] = request.SrtPassphrase
	}

	if !tea.BoolValue(util.IsUnset(request.SrtPbkeyLen)) {
		query["SrtPbkeyLen"] = request.SrtPbkeyLen
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMediaConnectFlowOutput"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMediaConnectFlowOutputResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies an output of a MediaConnect flow.
//
// Description:
//
//	  You can modify an output only when the flow is in the offline state.
//
//		- The output type cannot be modified.
//
// @param request - UpdateMediaConnectFlowOutputRequest
//
// @return UpdateMediaConnectFlowOutputResponse
func (client *Client) UpdateMediaConnectFlowOutput(request *UpdateMediaConnectFlowOutputRequest) (_result *UpdateMediaConnectFlowOutputResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMediaConnectFlowOutputResponse{}
	_body, _err := client.UpdateMediaConnectFlowOutputWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the state of a MediaConnect flow.
//
// @param request - UpdateMediaConnectFlowStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMediaConnectFlowStatusResponse
func (client *Client) UpdateMediaConnectFlowStatusWithOptions(request *UpdateMediaConnectFlowStatusRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaConnectFlowStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FlowId)) {
		query["FlowId"] = request.FlowId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMediaConnectFlowStatus"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMediaConnectFlowStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the state of a MediaConnect flow.
//
// @param request - UpdateMediaConnectFlowStatusRequest
//
// @return UpdateMediaConnectFlowStatusResponse
func (client *Client) UpdateMediaConnectFlowStatus(request *UpdateMediaConnectFlowStatusRequest) (_result *UpdateMediaConnectFlowStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMediaConnectFlowStatusResponse{}
	_body, _err := client.UpdateMediaConnectFlowStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates information about a media asset based on the ID of the media asset in Intelligent Media Services (IMS) or the input URL of the media asset.
//
// Description:
//
// If the MediaId parameter is specified, the MediaId parameter is preferentially used for the query. If the MediaId parameter is left empty, the InputURL parameter must be specified. The request ID and media asset ID are returned. You cannot modify the input URL of a media asset by specifying the ID of the media asset.
//
// @param request - UpdateMediaInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMediaInfoResponse
func (client *Client) UpdateMediaInfoWithOptions(request *UpdateMediaInfoRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppendTags)) {
		query["AppendTags"] = request.AppendTags
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessType)) {
		query["BusinessType"] = request.BusinessType
	}

	if !tea.BoolValue(util.IsUnset(request.CateId)) {
		query["CateId"] = request.CateId
	}

	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.CoverURL)) {
		query["CoverURL"] = request.CoverURL
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InputURL)) {
		query["InputURL"] = request.InputURL
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaTags)) {
		query["MediaTags"] = request.MediaTags
	}

	if !tea.BoolValue(util.IsUnset(request.ReferenceId)) {
		query["ReferenceId"] = request.ReferenceId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMediaInfo"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMediaInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates information about a media asset based on the ID of the media asset in Intelligent Media Services (IMS) or the input URL of the media asset.
//
// Description:
//
// If the MediaId parameter is specified, the MediaId parameter is preferentially used for the query. If the MediaId parameter is left empty, the InputURL parameter must be specified. The request ID and media asset ID are returned. You cannot modify the input URL of a media asset by specifying the ID of the media asset.
//
// @param request - UpdateMediaInfoRequest
//
// @return UpdateMediaInfoResponse
func (client *Client) UpdateMediaInfo(request *UpdateMediaInfoRequest) (_result *UpdateMediaInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMediaInfoResponse{}
	_body, _err := client.UpdateMediaInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a MediaLive channel.
//
// Description:
//
//	You can modify a MediaLive channel only when it is not running.
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param tmpReq - UpdateMediaLiveChannelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMediaLiveChannelResponse
func (client *Client) UpdateMediaLiveChannelWithOptions(tmpReq *UpdateMediaLiveChannelRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaLiveChannelResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateMediaLiveChannelShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.AudioSettings)) {
		request.AudioSettingsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AudioSettings, tea.String("AudioSettings"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.InputAttachments)) {
		request.InputAttachmentsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InputAttachments, tea.String("InputAttachments"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.OutputGroups)) {
		request.OutputGroupsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.OutputGroups, tea.String("OutputGroups"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.VideoSettings)) {
		request.VideoSettingsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.VideoSettings, tea.String("VideoSettings"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AudioSettingsShrink)) {
		body["AudioSettings"] = request.AudioSettingsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.InputAttachmentsShrink)) {
		body["InputAttachments"] = request.InputAttachmentsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OutputGroupsShrink)) {
		body["OutputGroups"] = request.OutputGroupsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.VideoSettingsShrink)) {
		body["VideoSettings"] = request.VideoSettingsShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMediaLiveChannel"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMediaLiveChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a MediaLive channel.
//
// Description:
//
//	You can modify a MediaLive channel only when it is not running.
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateMediaLiveChannelRequest
//
// @return UpdateMediaLiveChannelResponse
func (client *Client) UpdateMediaLiveChannel(request *UpdateMediaLiveChannelRequest) (_result *UpdateMediaLiveChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMediaLiveChannelResponse{}
	_body, _err := client.UpdateMediaLiveChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies an input of MediaLive.
//
// Description:
//
//	You can modify an input only when it is not associated with a MediaLive channel.
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param tmpReq - UpdateMediaLiveInputRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMediaLiveInputResponse
func (client *Client) UpdateMediaLiveInputWithOptions(tmpReq *UpdateMediaLiveInputRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaLiveInputResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateMediaLiveInputShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InputSettings)) {
		request.InputSettingsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InputSettings, tea.String("InputSettings"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.SecurityGroupIds)) {
		request.SecurityGroupIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SecurityGroupIds, tea.String("SecurityGroupIds"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputSettingsShrink)) {
		query["InputSettings"] = request.InputSettingsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupIdsShrink)) {
		query["SecurityGroupIds"] = request.SecurityGroupIdsShrink
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputId)) {
		body["InputId"] = request.InputId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMediaLiveInput"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMediaLiveInputResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies an input of MediaLive.
//
// Description:
//
//	You can modify an input only when it is not associated with a MediaLive channel.
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateMediaLiveInputRequest
//
// @return UpdateMediaLiveInputResponse
func (client *Client) UpdateMediaLiveInput(request *UpdateMediaLiveInputRequest) (_result *UpdateMediaLiveInputResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMediaLiveInputResponse{}
	_body, _err := client.UpdateMediaLiveInputWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a security group created in MediaLive.
//
// Description:
//
//	You can modify a security group only when it is not associated with a MediaLive input.
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param tmpReq - UpdateMediaLiveInputSecurityGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMediaLiveInputSecurityGroupResponse
func (client *Client) UpdateMediaLiveInputSecurityGroupWithOptions(tmpReq *UpdateMediaLiveInputSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaLiveInputSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateMediaLiveInputSecurityGroupShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.WhitelistRules)) {
		request.WhitelistRulesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.WhitelistRules, tea.String("WhitelistRules"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		body["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.WhitelistRulesShrink)) {
		body["WhitelistRules"] = request.WhitelistRulesShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMediaLiveInputSecurityGroup"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMediaLiveInputSecurityGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a security group created in MediaLive.
//
// Description:
//
//	You can modify a security group only when it is not associated with a MediaLive input.
//
// ## QPS limit
//
// This operation can be called up to 50 times per second for each Alibaba Cloud account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateMediaLiveInputSecurityGroupRequest
//
// @return UpdateMediaLiveInputSecurityGroupResponse
func (client *Client) UpdateMediaLiveInputSecurityGroup(request *UpdateMediaLiveInputSecurityGroupRequest) (_result *UpdateMediaLiveInputSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMediaLiveInputSecurityGroupResponse{}
	_body, _err := client.UpdateMediaLiveInputSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the marks of a media asset.
//
// @param request - UpdateMediaMarksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMediaMarksResponse
func (client *Client) UpdateMediaMarksWithOptions(request *UpdateMediaMarksRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaMarksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaMarks)) {
		query["MediaMarks"] = request.MediaMarks
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMediaMarks"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMediaMarksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the marks of a media asset.
//
// @param request - UpdateMediaMarksRequest
//
// @return UpdateMediaMarksResponse
func (client *Client) UpdateMediaMarks(request *UpdateMediaMarksRequest) (_result *UpdateMediaMarksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMediaMarksResponse{}
	_body, _err := client.UpdateMediaMarksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the media asset information in a search library.
//
// @param request - UpdateMediaToSearchLibRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMediaToSearchLibResponse
func (client *Client) UpdateMediaToSearchLibWithOptions(request *UpdateMediaToSearchLibRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaToSearchLibResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MsgBody)) {
		query["MsgBody"] = request.MsgBody
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMediaToSearchLib"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMediaToSearchLibResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the media asset information in a search library.
//
// @param request - UpdateMediaToSearchLibRequest
//
// @return UpdateMediaToSearchLibResponse
func (client *Client) UpdateMediaToSearchLib(request *UpdateMediaToSearchLibRequest) (_result *UpdateMediaToSearchLibResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMediaToSearchLibResponse{}
	_body, _err := client.UpdateMediaToSearchLibWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the information about an ApsaraVideo Media Processing (MPS) queue.
//
// @param request - UpdatePipelineRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdatePipelineResponse
func (client *Client) UpdatePipelineWithOptions(request *UpdatePipelineRequest, runtime *util.RuntimeOptions) (_result *UpdatePipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		query["PipelineId"] = request.PipelineId
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdatePipeline"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdatePipelineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the information about an ApsaraVideo Media Processing (MPS) queue.
//
// @param request - UpdatePipelineRequest
//
// @return UpdatePipelineResponse
func (client *Client) UpdatePipeline(request *UpdatePipelineRequest) (_result *UpdatePipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdatePipelineResponse{}
	_body, _err := client.UpdatePipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a program in a MediaWeaver channel.
//
// @param request - UpdateProgramRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateProgramResponse
func (client *Client) UpdateProgramWithOptions(request *UpdateProgramRequest, runtime *util.RuntimeOptions) (_result *UpdateProgramResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdBreaks)) {
		query["AdBreaks"] = request.AdBreaks
	}

	if !tea.BoolValue(util.IsUnset(request.ChannelName)) {
		query["ChannelName"] = request.ChannelName
	}

	if !tea.BoolValue(util.IsUnset(request.ClipRange)) {
		query["ClipRange"] = request.ClipRange
	}

	if !tea.BoolValue(util.IsUnset(request.ProgramName)) {
		query["ProgramName"] = request.ProgramName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceLocationName)) {
		query["SourceLocationName"] = request.SourceLocationName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceName)) {
		query["SourceName"] = request.SourceName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceType)) {
		query["SourceType"] = request.SourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Transition)) {
		query["Transition"] = request.Transition
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateProgram"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateProgramResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a program in a MediaWeaver channel.
//
// @param request - UpdateProgramRequest
//
// @return UpdateProgramResponse
func (client *Client) UpdateProgram(request *UpdateProgramRequest) (_result *UpdateProgramResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateProgramResponse{}
	_body, _err := client.UpdateProgramWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改实例的配置
//
// @param tmpReq - UpdateRtcRobotInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateRtcRobotInstanceResponse
func (client *Client) UpdateRtcRobotInstanceWithOptions(tmpReq *UpdateRtcRobotInstanceRequest, runtime *util.RuntimeOptions) (_result *UpdateRtcRobotInstanceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateRtcRobotInstanceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Config)) {
		request.ConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Config, tea.String("Config"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigShrink)) {
		query["Config"] = request.ConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateRtcRobotInstance"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateRtcRobotInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改实例的配置
//
// @param request - UpdateRtcRobotInstanceRequest
//
// @return UpdateRtcRobotInstanceResponse
func (client *Client) UpdateRtcRobotInstance(request *UpdateRtcRobotInstanceRequest) (_result *UpdateRtcRobotInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateRtcRobotInstanceResponse{}
	_body, _err := client.UpdateRtcRobotInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a source in MediaWeaver.
//
// @param request - UpdateSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateSourceResponse
func (client *Client) UpdateSourceWithOptions(request *UpdateSourceRequest, runtime *util.RuntimeOptions) (_result *UpdateSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HttpPackageConfigurations)) {
		query["HttpPackageConfigurations"] = request.HttpPackageConfigurations
	}

	if !tea.BoolValue(util.IsUnset(request.SourceLocationName)) {
		query["SourceLocationName"] = request.SourceLocationName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceName)) {
		query["SourceName"] = request.SourceName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceType)) {
		query["SourceType"] = request.SourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSource"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a source in MediaWeaver.
//
// @param request - UpdateSourceRequest
//
// @return UpdateSourceResponse
func (client *Client) UpdateSource(request *UpdateSourceRequest) (_result *UpdateSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSourceResponse{}
	_body, _err := client.UpdateSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a source location.
//
// @param request - UpdateSourceLocationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateSourceLocationResponse
func (client *Client) UpdateSourceLocationWithOptions(request *UpdateSourceLocationRequest, runtime *util.RuntimeOptions) (_result *UpdateSourceLocationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BaseUrl)) {
		query["BaseUrl"] = request.BaseUrl
	}

	if !tea.BoolValue(util.IsUnset(request.EnableSegmentDelivery)) {
		query["EnableSegmentDelivery"] = request.EnableSegmentDelivery
	}

	if !tea.BoolValue(util.IsUnset(request.SegmentDeliveryUrl)) {
		query["SegmentDeliveryUrl"] = request.SegmentDeliveryUrl
	}

	if !tea.BoolValue(util.IsUnset(request.SourceLocationName)) {
		query["SourceLocationName"] = request.SourceLocationName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSourceLocation"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSourceLocationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a source location.
//
// @param request - UpdateSourceLocationRequest
//
// @return UpdateSourceLocationResponse
func (client *Client) UpdateSourceLocation(request *UpdateSourceLocationRequest) (_result *UpdateSourceLocationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSourceLocationResponse{}
	_body, _err := client.UpdateSourceLocationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies an online editing template. You can modify the template title and template configurations.
//
// Description:
//
//	  For more information about how to use a regular template, see [Create and use a regular template](https://help.aliyun.com/document_detail/445399.html).
//
//		- For more information about how to use an advanced template, see [Create and use advanced templates](https://help.aliyun.com/document_detail/445389.html).
//
// @param request - UpdateTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateTemplateResponse
func (client *Client) UpdateTemplateWithOptions(request *UpdateTemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CoverUrl)) {
		query["CoverUrl"] = request.CoverUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PreviewMedia)) {
		query["PreviewMedia"] = request.PreviewMedia
	}

	if !tea.BoolValue(util.IsUnset(request.RelatedMediaids)) {
		query["RelatedMediaids"] = request.RelatedMediaids
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Config)) {
		body["Config"] = request.Config
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies an online editing template. You can modify the template title and template configurations.
//
// Description:
//
//	  For more information about how to use a regular template, see [Create and use a regular template](https://help.aliyun.com/document_detail/445399.html).
//
//		- For more information about how to use an advanced template, see [Create and use advanced templates](https://help.aliyun.com/document_detail/445389.html).
//
// @param request - UpdateTemplateRequest
//
// @return UpdateTemplateResponse
func (client *Client) UpdateTemplate(request *UpdateTemplateRequest) (_result *UpdateTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateTemplateResponse{}
	_body, _err := client.UpdateTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Uploads an audio or video file based on the URL of the source file. You can upload multiple media files at a time.
//
// Description:
//
//	  If a callback is configured, you will receive an UploadByURLComplete event notification after the file is uploaded. You can query the upload status by calling the GetURLUploadInfos operation.
//
//		- After a request is submitted, the upload job is queued as an asynchronous job in the cloud. You can query the status of the upload job based on information such as the URL and media asset ID that are returned in the event notification.
//
//		- You can call this operation to upload media files that are not stored on a local server or device and must be uploaded by using URLs that are accessible over the Internet.
//
//		- You can call this operation to upload media files only to ApsaraVideo VOD, but not to your own Object Storage Service (OSS) buckets. To upload a media file to an OSS bucket, pull the file to a local directory, use [OSS SDK](https://help.aliyun.com/document_detail/32006.html) to upload the file to an OSS bucket, and then call the [RegisterMediaInfo](https://help.aliyun.com/document_detail/441152.html) operation to register the file in the OSS bucket with the media asset library.
//
//		- This operation is available only in the China (Shanghai), China (Beijing), and China (Shenzhen) regions.
//
//		- You can call this operation to upload only audio and video files.
//
// @param request - UploadMediaByURLRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UploadMediaByURLResponse
func (client *Client) UploadMediaByURLWithOptions(request *UploadMediaByURLRequest, runtime *util.RuntimeOptions) (_result *UploadMediaByURLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		query["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaMetaData)) {
		query["MediaMetaData"] = request.MediaMetaData
	}

	if !tea.BoolValue(util.IsUnset(request.PostProcessConfig)) {
		query["PostProcessConfig"] = request.PostProcessConfig
	}

	if !tea.BoolValue(util.IsUnset(request.UploadTargetConfig)) {
		query["UploadTargetConfig"] = request.UploadTargetConfig
	}

	if !tea.BoolValue(util.IsUnset(request.UploadURLs)) {
		query["UploadURLs"] = request.UploadURLs
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UploadMediaByURL"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UploadMediaByURLResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Uploads an audio or video file based on the URL of the source file. You can upload multiple media files at a time.
//
// Description:
//
//	  If a callback is configured, you will receive an UploadByURLComplete event notification after the file is uploaded. You can query the upload status by calling the GetURLUploadInfos operation.
//
//		- After a request is submitted, the upload job is queued as an asynchronous job in the cloud. You can query the status of the upload job based on information such as the URL and media asset ID that are returned in the event notification.
//
//		- You can call this operation to upload media files that are not stored on a local server or device and must be uploaded by using URLs that are accessible over the Internet.
//
//		- You can call this operation to upload media files only to ApsaraVideo VOD, but not to your own Object Storage Service (OSS) buckets. To upload a media file to an OSS bucket, pull the file to a local directory, use [OSS SDK](https://help.aliyun.com/document_detail/32006.html) to upload the file to an OSS bucket, and then call the [RegisterMediaInfo](https://help.aliyun.com/document_detail/441152.html) operation to register the file in the OSS bucket with the media asset library.
//
//		- This operation is available only in the China (Shanghai), China (Beijing), and China (Shenzhen) regions.
//
//		- You can call this operation to upload only audio and video files.
//
// @param request - UploadMediaByURLRequest
//
// @return UploadMediaByURLResponse
func (client *Client) UploadMediaByURL(request *UploadMediaByURLRequest) (_result *UploadMediaByURLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UploadMediaByURLResponse{}
	_body, _err := client.UploadMediaByURLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Uploads a media stream file based on the URL of the source file.
//
// Description:
//
//	  You can call this operation to pull a media stream file based on a URL and upload the file. After the media stream file is uploaded, the media stream is associated with the specified media asset ID.
//
//		- You can call this operation to upload media stream files only to ApsaraVideo VOD, but not to your own Object Storage Service (OSS) buckets. To upload a media stream file to an OSS bucket, pull the file to a local directory, use [OSS SDK](https://help.aliyun.com/document_detail/32006.html) to upload the file to an OSS bucket, and then call the [RegisterMediaStream](https://help.aliyun.com/document_detail/440765.html) operation to associate the media stream with the specified media asset ID.
//
//		- This operation is available only in the China (Shanghai), China (Beijing), and China (Shenzhen) regions.
//
// @param request - UploadStreamByURLRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UploadStreamByURLResponse
func (client *Client) UploadStreamByURLWithOptions(request *UploadStreamByURLRequest, runtime *util.RuntimeOptions) (_result *UploadStreamByURLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Definition)) {
		query["Definition"] = request.Definition
	}

	if !tea.BoolValue(util.IsUnset(request.FileExtension)) {
		query["FileExtension"] = request.FileExtension
	}

	if !tea.BoolValue(util.IsUnset(request.HDRType)) {
		query["HDRType"] = request.HDRType
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.StreamURL)) {
		query["StreamURL"] = request.StreamURL
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UploadStreamByURL"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UploadStreamByURLResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Uploads a media stream file based on the URL of the source file.
//
// Description:
//
//	  You can call this operation to pull a media stream file based on a URL and upload the file. After the media stream file is uploaded, the media stream is associated with the specified media asset ID.
//
//		- You can call this operation to upload media stream files only to ApsaraVideo VOD, but not to your own Object Storage Service (OSS) buckets. To upload a media stream file to an OSS bucket, pull the file to a local directory, use [OSS SDK](https://help.aliyun.com/document_detail/32006.html) to upload the file to an OSS bucket, and then call the [RegisterMediaStream](https://help.aliyun.com/document_detail/440765.html) operation to associate the media stream with the specified media asset ID.
//
//		- This operation is available only in the China (Shanghai), China (Beijing), and China (Shenzhen) regions.
//
// @param request - UploadStreamByURLRequest
//
// @return UploadStreamByURLResponse
func (client *Client) UploadStreamByURL(request *UploadStreamByURLRequest) (_result *UploadStreamByURLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UploadStreamByURLResponse{}
	_body, _err := client.UploadStreamByURLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
