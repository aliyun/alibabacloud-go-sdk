// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AiotDevice struct {
	// ip地址
	IPAddr *string `json:"IPAddr,omitempty" xml:"IPAddr,omitempty"`
	// 纬度
	Latitude *float32 `json:"Latitude,omitempty" xml:"Latitude,omitempty"`
	// 经度
	Longitude *float32 `json:"Longitude,omitempty" xml:"Longitude,omitempty"`
	// 名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 安装位置
	Place *string `json:"Place,omitempty" xml:"Place,omitempty"`
	// 端口
	Port *int64 `json:"Port,omitempty" xml:"Port,omitempty"`
}

func (s AiotDevice) String() string {
	return tea.Prettify(s)
}

func (s AiotDevice) GoString() string {
	return s.String()
}

func (s *AiotDevice) SetIPAddr(v string) *AiotDevice {
	s.IPAddr = &v
	return s
}

func (s *AiotDevice) SetLatitude(v float32) *AiotDevice {
	s.Latitude = &v
	return s
}

func (s *AiotDevice) SetLongitude(v float32) *AiotDevice {
	s.Longitude = &v
	return s
}

func (s *AiotDevice) SetName(v string) *AiotDevice {
	s.Name = &v
	return s
}

func (s *AiotDevice) SetPlace(v string) *AiotDevice {
	s.Place = &v
	return s
}

func (s *AiotDevice) SetPort(v int64) *AiotDevice {
	s.Port = &v
	return s
}

type AddAiotDevicesRequest struct {
	AiotDeviceList []*AddAiotDevicesRequestAiotDeviceList `json:"AiotDeviceList,omitempty" xml:"AiotDeviceList,omitempty" type:"Repeated"`
}

func (s AddAiotDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s AddAiotDevicesRequest) GoString() string {
	return s.String()
}

func (s *AddAiotDevicesRequest) SetAiotDeviceList(v []*AddAiotDevicesRequestAiotDeviceList) *AddAiotDevicesRequest {
	s.AiotDeviceList = v
	return s
}

type AddAiotDevicesRequestAiotDeviceList struct {
	CorpId    *string  `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DeviceId  *string  `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	IPAddr    *string  `json:"IPAddr,omitempty" xml:"IPAddr,omitempty"`
	Latitude  *float32 `json:"Latitude,omitempty" xml:"Latitude,omitempty"`
	Longitude *float32 `json:"Longitude,omitempty" xml:"Longitude,omitempty"`
	Name      *string  `json:"Name,omitempty" xml:"Name,omitempty"`
	Place     *string  `json:"Place,omitempty" xml:"Place,omitempty"`
	Port      *int64   `json:"Port,omitempty" xml:"Port,omitempty"`
}

func (s AddAiotDevicesRequestAiotDeviceList) String() string {
	return tea.Prettify(s)
}

func (s AddAiotDevicesRequestAiotDeviceList) GoString() string {
	return s.String()
}

func (s *AddAiotDevicesRequestAiotDeviceList) SetCorpId(v string) *AddAiotDevicesRequestAiotDeviceList {
	s.CorpId = &v
	return s
}

func (s *AddAiotDevicesRequestAiotDeviceList) SetDeviceId(v string) *AddAiotDevicesRequestAiotDeviceList {
	s.DeviceId = &v
	return s
}

func (s *AddAiotDevicesRequestAiotDeviceList) SetIPAddr(v string) *AddAiotDevicesRequestAiotDeviceList {
	s.IPAddr = &v
	return s
}

func (s *AddAiotDevicesRequestAiotDeviceList) SetLatitude(v float32) *AddAiotDevicesRequestAiotDeviceList {
	s.Latitude = &v
	return s
}

func (s *AddAiotDevicesRequestAiotDeviceList) SetLongitude(v float32) *AddAiotDevicesRequestAiotDeviceList {
	s.Longitude = &v
	return s
}

func (s *AddAiotDevicesRequestAiotDeviceList) SetName(v string) *AddAiotDevicesRequestAiotDeviceList {
	s.Name = &v
	return s
}

func (s *AddAiotDevicesRequestAiotDeviceList) SetPlace(v string) *AddAiotDevicesRequestAiotDeviceList {
	s.Place = &v
	return s
}

func (s *AddAiotDevicesRequestAiotDeviceList) SetPort(v int64) *AddAiotDevicesRequestAiotDeviceList {
	s.Port = &v
	return s
}

type AddAiotDevicesShrinkRequest struct {
	AiotDeviceListShrink *string `json:"AiotDeviceList,omitempty" xml:"AiotDeviceList,omitempty"`
}

func (s AddAiotDevicesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s AddAiotDevicesShrinkRequest) GoString() string {
	return s.String()
}

func (s *AddAiotDevicesShrinkRequest) SetAiotDeviceListShrink(v string) *AddAiotDevicesShrinkRequest {
	s.AiotDeviceListShrink = &v
	return s
}

type AddAiotDevicesResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId  *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultList []*AddAiotDevicesResponseBodyResultList `json:"ResultList,omitempty" xml:"ResultList,omitempty" type:"Repeated"`
}

func (s AddAiotDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddAiotDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *AddAiotDevicesResponseBody) SetCode(v string) *AddAiotDevicesResponseBody {
	s.Code = &v
	return s
}

func (s *AddAiotDevicesResponseBody) SetMessage(v string) *AddAiotDevicesResponseBody {
	s.Message = &v
	return s
}

func (s *AddAiotDevicesResponseBody) SetRequestId(v string) *AddAiotDevicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddAiotDevicesResponseBody) SetResultList(v []*AddAiotDevicesResponseBodyResultList) *AddAiotDevicesResponseBody {
	s.ResultList = v
	return s
}

type AddAiotDevicesResponseBodyResultList struct {
	Code               *string `json:"Code,omitempty" xml:"Code,omitempty"`
	DeviceId           *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	Id                 *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Message            *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Password           *string `json:"Password,omitempty" xml:"Password,omitempty"`
	ServerHost         *string `json:"ServerHost,omitempty" xml:"ServerHost,omitempty"`
	ServerHostInternal *string `json:"ServerHostInternal,omitempty" xml:"ServerHostInternal,omitempty"`
	ServerId           *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	ServerIp           *string `json:"ServerIp,omitempty" xml:"ServerIp,omitempty"`
	ServerIpInternal   *string `json:"ServerIpInternal,omitempty" xml:"ServerIpInternal,omitempty"`
	ServerPort         *string `json:"ServerPort,omitempty" xml:"ServerPort,omitempty"`
	ServerWssPort      *string `json:"ServerWssPort,omitempty" xml:"ServerWssPort,omitempty"`
	UserId             *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s AddAiotDevicesResponseBodyResultList) String() string {
	return tea.Prettify(s)
}

func (s AddAiotDevicesResponseBodyResultList) GoString() string {
	return s.String()
}

func (s *AddAiotDevicesResponseBodyResultList) SetCode(v string) *AddAiotDevicesResponseBodyResultList {
	s.Code = &v
	return s
}

func (s *AddAiotDevicesResponseBodyResultList) SetDeviceId(v string) *AddAiotDevicesResponseBodyResultList {
	s.DeviceId = &v
	return s
}

func (s *AddAiotDevicesResponseBodyResultList) SetId(v string) *AddAiotDevicesResponseBodyResultList {
	s.Id = &v
	return s
}

func (s *AddAiotDevicesResponseBodyResultList) SetMessage(v string) *AddAiotDevicesResponseBodyResultList {
	s.Message = &v
	return s
}

func (s *AddAiotDevicesResponseBodyResultList) SetPassword(v string) *AddAiotDevicesResponseBodyResultList {
	s.Password = &v
	return s
}

func (s *AddAiotDevicesResponseBodyResultList) SetServerHost(v string) *AddAiotDevicesResponseBodyResultList {
	s.ServerHost = &v
	return s
}

func (s *AddAiotDevicesResponseBodyResultList) SetServerHostInternal(v string) *AddAiotDevicesResponseBodyResultList {
	s.ServerHostInternal = &v
	return s
}

func (s *AddAiotDevicesResponseBodyResultList) SetServerId(v string) *AddAiotDevicesResponseBodyResultList {
	s.ServerId = &v
	return s
}

func (s *AddAiotDevicesResponseBodyResultList) SetServerIp(v string) *AddAiotDevicesResponseBodyResultList {
	s.ServerIp = &v
	return s
}

func (s *AddAiotDevicesResponseBodyResultList) SetServerIpInternal(v string) *AddAiotDevicesResponseBodyResultList {
	s.ServerIpInternal = &v
	return s
}

func (s *AddAiotDevicesResponseBodyResultList) SetServerPort(v string) *AddAiotDevicesResponseBodyResultList {
	s.ServerPort = &v
	return s
}

func (s *AddAiotDevicesResponseBodyResultList) SetServerWssPort(v string) *AddAiotDevicesResponseBodyResultList {
	s.ServerWssPort = &v
	return s
}

func (s *AddAiotDevicesResponseBodyResultList) SetUserId(v string) *AddAiotDevicesResponseBodyResultList {
	s.UserId = &v
	return s
}

type AddAiotDevicesResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddAiotDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddAiotDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s AddAiotDevicesResponse) GoString() string {
	return s.String()
}

func (s *AddAiotDevicesResponse) SetHeaders(v map[string]*string) *AddAiotDevicesResponse {
	s.Headers = v
	return s
}

func (s *AddAiotDevicesResponse) SetBody(v *AddAiotDevicesResponseBody) *AddAiotDevicesResponse {
	s.Body = v
	return s
}

type AddAiotPersonTableRequest struct {
	Id          *string                               `json:"Id,omitempty" xml:"Id,omitempty"`
	PersonTable *AddAiotPersonTableRequestPersonTable `json:"PersonTable,omitempty" xml:"PersonTable,omitempty" type:"Struct"`
}

func (s AddAiotPersonTableRequest) String() string {
	return tea.Prettify(s)
}

func (s AddAiotPersonTableRequest) GoString() string {
	return s.String()
}

func (s *AddAiotPersonTableRequest) SetId(v string) *AddAiotPersonTableRequest {
	s.Id = &v
	return s
}

func (s *AddAiotPersonTableRequest) SetPersonTable(v *AddAiotPersonTableRequestPersonTable) *AddAiotPersonTableRequest {
	s.PersonTable = v
	return s
}

type AddAiotPersonTableRequestPersonTable struct {
	Name                  *string  `json:"Name,omitempty" xml:"Name,omitempty"`
	PersonTableId         *string  `json:"PersonTableId,omitempty" xml:"PersonTableId,omitempty"`
	Type                  *int64   `json:"Type,omitempty" xml:"Type,omitempty"`
	VerificationModelList []*int64 `json:"VerificationModelList,omitempty" xml:"VerificationModelList,omitempty" type:"Repeated"`
}

func (s AddAiotPersonTableRequestPersonTable) String() string {
	return tea.Prettify(s)
}

func (s AddAiotPersonTableRequestPersonTable) GoString() string {
	return s.String()
}

func (s *AddAiotPersonTableRequestPersonTable) SetName(v string) *AddAiotPersonTableRequestPersonTable {
	s.Name = &v
	return s
}

func (s *AddAiotPersonTableRequestPersonTable) SetPersonTableId(v string) *AddAiotPersonTableRequestPersonTable {
	s.PersonTableId = &v
	return s
}

func (s *AddAiotPersonTableRequestPersonTable) SetType(v int64) *AddAiotPersonTableRequestPersonTable {
	s.Type = &v
	return s
}

func (s *AddAiotPersonTableRequestPersonTable) SetVerificationModelList(v []*int64) *AddAiotPersonTableRequestPersonTable {
	s.VerificationModelList = v
	return s
}

type AddAiotPersonTableResponseBody struct {
	Code          *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	PersonTableId *string `json:"PersonTableId,omitempty" xml:"PersonTableId,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddAiotPersonTableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddAiotPersonTableResponseBody) GoString() string {
	return s.String()
}

func (s *AddAiotPersonTableResponseBody) SetCode(v string) *AddAiotPersonTableResponseBody {
	s.Code = &v
	return s
}

func (s *AddAiotPersonTableResponseBody) SetMessage(v string) *AddAiotPersonTableResponseBody {
	s.Message = &v
	return s
}

func (s *AddAiotPersonTableResponseBody) SetPersonTableId(v string) *AddAiotPersonTableResponseBody {
	s.PersonTableId = &v
	return s
}

func (s *AddAiotPersonTableResponseBody) SetRequestId(v string) *AddAiotPersonTableResponseBody {
	s.RequestId = &v
	return s
}

type AddAiotPersonTableResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddAiotPersonTableResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddAiotPersonTableResponse) String() string {
	return tea.Prettify(s)
}

func (s AddAiotPersonTableResponse) GoString() string {
	return s.String()
}

func (s *AddAiotPersonTableResponse) SetHeaders(v map[string]*string) *AddAiotPersonTableResponse {
	s.Headers = v
	return s
}

func (s *AddAiotPersonTableResponse) SetBody(v *AddAiotPersonTableResponseBody) *AddAiotPersonTableResponse {
	s.Body = v
	return s
}

type AddAiotPersonTableItemsRequest struct {
	Id                  *string                                              `json:"Id,omitempty" xml:"Id,omitempty"`
	PersonTableId       *string                                              `json:"PersonTableId,omitempty" xml:"PersonTableId,omitempty"`
	PersonTableItemList []*AddAiotPersonTableItemsRequestPersonTableItemList `json:"PersonTableItemList,omitempty" xml:"PersonTableItemList,omitempty" type:"Repeated"`
}

func (s AddAiotPersonTableItemsRequest) String() string {
	return tea.Prettify(s)
}

func (s AddAiotPersonTableItemsRequest) GoString() string {
	return s.String()
}

func (s *AddAiotPersonTableItemsRequest) SetId(v string) *AddAiotPersonTableItemsRequest {
	s.Id = &v
	return s
}

func (s *AddAiotPersonTableItemsRequest) SetPersonTableId(v string) *AddAiotPersonTableItemsRequest {
	s.PersonTableId = &v
	return s
}

func (s *AddAiotPersonTableItemsRequest) SetPersonTableItemList(v []*AddAiotPersonTableItemsRequestPersonTableItemList) *AddAiotPersonTableItemsRequest {
	s.PersonTableItemList = v
	return s
}

type AddAiotPersonTableItemsRequestPersonTableItemList struct {
	IdentificationList []*AddAiotPersonTableItemsRequestPersonTableItemListIdentificationList `json:"IdentificationList,omitempty" xml:"IdentificationList,omitempty" type:"Repeated"`
	IdentificationNum  *int64                                                                 `json:"IdentificationNum,omitempty" xml:"IdentificationNum,omitempty"`
	ImageList          []*AddAiotPersonTableItemsRequestPersonTableItemListImageList          `json:"ImageList,omitempty" xml:"ImageList,omitempty" type:"Repeated"`
	ImageNum           *int64                                                                 `json:"ImageNum,omitempty" xml:"ImageNum,omitempty"`
	PersonCode         *string                                                                `json:"PersonCode,omitempty" xml:"PersonCode,omitempty"`
	PersonId           *string                                                                `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	PersonName         *string                                                                `json:"PersonName,omitempty" xml:"PersonName,omitempty"`
	Remarks            *string                                                                `json:"Remarks,omitempty" xml:"Remarks,omitempty"`
}

func (s AddAiotPersonTableItemsRequestPersonTableItemList) String() string {
	return tea.Prettify(s)
}

func (s AddAiotPersonTableItemsRequestPersonTableItemList) GoString() string {
	return s.String()
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemList) SetIdentificationList(v []*AddAiotPersonTableItemsRequestPersonTableItemListIdentificationList) *AddAiotPersonTableItemsRequestPersonTableItemList {
	s.IdentificationList = v
	return s
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemList) SetIdentificationNum(v int64) *AddAiotPersonTableItemsRequestPersonTableItemList {
	s.IdentificationNum = &v
	return s
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemList) SetImageList(v []*AddAiotPersonTableItemsRequestPersonTableItemListImageList) *AddAiotPersonTableItemsRequestPersonTableItemList {
	s.ImageList = v
	return s
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemList) SetImageNum(v int64) *AddAiotPersonTableItemsRequestPersonTableItemList {
	s.ImageNum = &v
	return s
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemList) SetPersonCode(v string) *AddAiotPersonTableItemsRequestPersonTableItemList {
	s.PersonCode = &v
	return s
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemList) SetPersonId(v string) *AddAiotPersonTableItemsRequestPersonTableItemList {
	s.PersonId = &v
	return s
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemList) SetPersonName(v string) *AddAiotPersonTableItemsRequestPersonTableItemList {
	s.PersonName = &v
	return s
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemList) SetRemarks(v string) *AddAiotPersonTableItemsRequestPersonTableItemList {
	s.Remarks = &v
	return s
}

type AddAiotPersonTableItemsRequestPersonTableItemListIdentificationList struct {
	Number *string `json:"Number,omitempty" xml:"Number,omitempty"`
	Type   *int64  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AddAiotPersonTableItemsRequestPersonTableItemListIdentificationList) String() string {
	return tea.Prettify(s)
}

func (s AddAiotPersonTableItemsRequestPersonTableItemListIdentificationList) GoString() string {
	return s.String()
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemListIdentificationList) SetNumber(v string) *AddAiotPersonTableItemsRequestPersonTableItemListIdentificationList {
	s.Number = &v
	return s
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemListIdentificationList) SetType(v int64) *AddAiotPersonTableItemsRequestPersonTableItemListIdentificationList {
	s.Type = &v
	return s
}

type AddAiotPersonTableItemsRequestPersonTableItemListImageList struct {
	Data        *string                                                                `json:"Data,omitempty" xml:"Data,omitempty"`
	DeviceId    *string                                                                `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	EventSort   *string                                                                `json:"EventSort,omitempty" xml:"EventSort,omitempty"`
	FeatureInfo *AddAiotPersonTableItemsRequestPersonTableItemListImageListFeatureInfo `json:"FeatureInfo,omitempty" xml:"FeatureInfo,omitempty" type:"Struct"`
	FileFormat  *string                                                                `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	Height      *int64                                                                 `json:"Height,omitempty" xml:"Height,omitempty"`
	ImageId     *string                                                                `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ShotTime    *string                                                                `json:"ShotTime,omitempty" xml:"ShotTime,omitempty"`
	Size        *int64                                                                 `json:"Size,omitempty" xml:"Size,omitempty"`
	StoragePath *string                                                                `json:"StoragePath,omitempty" xml:"StoragePath,omitempty"`
	Type        *string                                                                `json:"Type,omitempty" xml:"Type,omitempty"`
	Width       *int64                                                                 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s AddAiotPersonTableItemsRequestPersonTableItemListImageList) String() string {
	return tea.Prettify(s)
}

func (s AddAiotPersonTableItemsRequestPersonTableItemListImageList) GoString() string {
	return s.String()
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemListImageList) SetData(v string) *AddAiotPersonTableItemsRequestPersonTableItemListImageList {
	s.Data = &v
	return s
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemListImageList) SetDeviceId(v string) *AddAiotPersonTableItemsRequestPersonTableItemListImageList {
	s.DeviceId = &v
	return s
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemListImageList) SetEventSort(v string) *AddAiotPersonTableItemsRequestPersonTableItemListImageList {
	s.EventSort = &v
	return s
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemListImageList) SetFeatureInfo(v *AddAiotPersonTableItemsRequestPersonTableItemListImageListFeatureInfo) *AddAiotPersonTableItemsRequestPersonTableItemListImageList {
	s.FeatureInfo = v
	return s
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemListImageList) SetFileFormat(v string) *AddAiotPersonTableItemsRequestPersonTableItemListImageList {
	s.FileFormat = &v
	return s
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemListImageList) SetHeight(v int64) *AddAiotPersonTableItemsRequestPersonTableItemListImageList {
	s.Height = &v
	return s
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemListImageList) SetImageId(v string) *AddAiotPersonTableItemsRequestPersonTableItemListImageList {
	s.ImageId = &v
	return s
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemListImageList) SetShotTime(v string) *AddAiotPersonTableItemsRequestPersonTableItemListImageList {
	s.ShotTime = &v
	return s
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemListImageList) SetSize(v int64) *AddAiotPersonTableItemsRequestPersonTableItemListImageList {
	s.Size = &v
	return s
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemListImageList) SetStoragePath(v string) *AddAiotPersonTableItemsRequestPersonTableItemListImageList {
	s.StoragePath = &v
	return s
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemListImageList) SetType(v string) *AddAiotPersonTableItemsRequestPersonTableItemListImageList {
	s.Type = &v
	return s
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemListImageList) SetWidth(v int64) *AddAiotPersonTableItemsRequestPersonTableItemListImageList {
	s.Width = &v
	return s
}

type AddAiotPersonTableItemsRequestPersonTableItemListImageListFeatureInfo struct {
	AlgorithmType    *string `json:"AlgorithmType,omitempty" xml:"AlgorithmType,omitempty"`
	AlgorithmVersion *string `json:"AlgorithmVersion,omitempty" xml:"AlgorithmVersion,omitempty"`
	FeatureData      *string `json:"FeatureData,omitempty" xml:"FeatureData,omitempty"`
	ImageId          *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ObjectId         *string `json:"ObjectId,omitempty" xml:"ObjectId,omitempty"`
	TabIed           *string `json:"TabIed,omitempty" xml:"TabIed,omitempty"`
	Vendor           *string `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s AddAiotPersonTableItemsRequestPersonTableItemListImageListFeatureInfo) String() string {
	return tea.Prettify(s)
}

func (s AddAiotPersonTableItemsRequestPersonTableItemListImageListFeatureInfo) GoString() string {
	return s.String()
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemListImageListFeatureInfo) SetAlgorithmType(v string) *AddAiotPersonTableItemsRequestPersonTableItemListImageListFeatureInfo {
	s.AlgorithmType = &v
	return s
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemListImageListFeatureInfo) SetAlgorithmVersion(v string) *AddAiotPersonTableItemsRequestPersonTableItemListImageListFeatureInfo {
	s.AlgorithmVersion = &v
	return s
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemListImageListFeatureInfo) SetFeatureData(v string) *AddAiotPersonTableItemsRequestPersonTableItemListImageListFeatureInfo {
	s.FeatureData = &v
	return s
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemListImageListFeatureInfo) SetImageId(v string) *AddAiotPersonTableItemsRequestPersonTableItemListImageListFeatureInfo {
	s.ImageId = &v
	return s
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemListImageListFeatureInfo) SetObjectId(v string) *AddAiotPersonTableItemsRequestPersonTableItemListImageListFeatureInfo {
	s.ObjectId = &v
	return s
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemListImageListFeatureInfo) SetTabIed(v string) *AddAiotPersonTableItemsRequestPersonTableItemListImageListFeatureInfo {
	s.TabIed = &v
	return s
}

func (s *AddAiotPersonTableItemsRequestPersonTableItemListImageListFeatureInfo) SetVendor(v string) *AddAiotPersonTableItemsRequestPersonTableItemListImageListFeatureInfo {
	s.Vendor = &v
	return s
}

type AddAiotPersonTableItemsResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId  *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultList []*AddAiotPersonTableItemsResponseBodyResultList `json:"ResultList,omitempty" xml:"ResultList,omitempty" type:"Repeated"`
}

func (s AddAiotPersonTableItemsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddAiotPersonTableItemsResponseBody) GoString() string {
	return s.String()
}

func (s *AddAiotPersonTableItemsResponseBody) SetCode(v string) *AddAiotPersonTableItemsResponseBody {
	s.Code = &v
	return s
}

func (s *AddAiotPersonTableItemsResponseBody) SetMessage(v string) *AddAiotPersonTableItemsResponseBody {
	s.Message = &v
	return s
}

func (s *AddAiotPersonTableItemsResponseBody) SetRequestId(v string) *AddAiotPersonTableItemsResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddAiotPersonTableItemsResponseBody) SetResultList(v []*AddAiotPersonTableItemsResponseBodyResultList) *AddAiotPersonTableItemsResponseBody {
	s.ResultList = v
	return s
}

type AddAiotPersonTableItemsResponseBodyResultList struct {
	Code              *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message           *string `json:"Message,omitempty" xml:"Message,omitempty"`
	PersonTableItemId *string `json:"PersonTableItemId,omitempty" xml:"PersonTableItemId,omitempty"`
}

func (s AddAiotPersonTableItemsResponseBodyResultList) String() string {
	return tea.Prettify(s)
}

func (s AddAiotPersonTableItemsResponseBodyResultList) GoString() string {
	return s.String()
}

func (s *AddAiotPersonTableItemsResponseBodyResultList) SetCode(v string) *AddAiotPersonTableItemsResponseBodyResultList {
	s.Code = &v
	return s
}

func (s *AddAiotPersonTableItemsResponseBodyResultList) SetMessage(v string) *AddAiotPersonTableItemsResponseBodyResultList {
	s.Message = &v
	return s
}

func (s *AddAiotPersonTableItemsResponseBodyResultList) SetPersonTableItemId(v string) *AddAiotPersonTableItemsResponseBodyResultList {
	s.PersonTableItemId = &v
	return s
}

type AddAiotPersonTableItemsResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddAiotPersonTableItemsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddAiotPersonTableItemsResponse) String() string {
	return tea.Prettify(s)
}

func (s AddAiotPersonTableItemsResponse) GoString() string {
	return s.String()
}

func (s *AddAiotPersonTableItemsResponse) SetHeaders(v map[string]*string) *AddAiotPersonTableItemsResponse {
	s.Headers = v
	return s
}

func (s *AddAiotPersonTableItemsResponse) SetBody(v *AddAiotPersonTableItemsResponseBody) *AddAiotPersonTableItemsResponse {
	s.Body = v
	return s
}

type AddAiotPersonTableItemsForTablesRequest struct {
	PersonTableItemList []*AddAiotPersonTableItemsForTablesRequestPersonTableItemList `json:"PersonTableItemList,omitempty" xml:"PersonTableItemList,omitempty" type:"Repeated"`
	PersonTableList     []*AddAiotPersonTableItemsForTablesRequestPersonTableList     `json:"PersonTableList,omitempty" xml:"PersonTableList,omitempty" type:"Repeated"`
}

func (s AddAiotPersonTableItemsForTablesRequest) String() string {
	return tea.Prettify(s)
}

func (s AddAiotPersonTableItemsForTablesRequest) GoString() string {
	return s.String()
}

func (s *AddAiotPersonTableItemsForTablesRequest) SetPersonTableItemList(v []*AddAiotPersonTableItemsForTablesRequestPersonTableItemList) *AddAiotPersonTableItemsForTablesRequest {
	s.PersonTableItemList = v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequest) SetPersonTableList(v []*AddAiotPersonTableItemsForTablesRequestPersonTableList) *AddAiotPersonTableItemsForTablesRequest {
	s.PersonTableList = v
	return s
}

type AddAiotPersonTableItemsForTablesRequestPersonTableItemList struct {
	IdentificationList []*AddAiotPersonTableItemsForTablesRequestPersonTableItemListIdentificationList `json:"IdentificationList,omitempty" xml:"IdentificationList,omitempty" type:"Repeated"`
	IdentificationNum  *int64                                                                          `json:"IdentificationNum,omitempty" xml:"IdentificationNum,omitempty"`
	ImageList          []*AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList          `json:"ImageList,omitempty" xml:"ImageList,omitempty" type:"Repeated"`
	ImageNum           *int64                                                                          `json:"ImageNum,omitempty" xml:"ImageNum,omitempty"`
	PersonCode         *string                                                                         `json:"PersonCode,omitempty" xml:"PersonCode,omitempty"`
	PersonId           *string                                                                         `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	PersonName         *string                                                                         `json:"PersonName,omitempty" xml:"PersonName,omitempty"`
	Remarks            *string                                                                         `json:"Remarks,omitempty" xml:"Remarks,omitempty"`
}

func (s AddAiotPersonTableItemsForTablesRequestPersonTableItemList) String() string {
	return tea.Prettify(s)
}

func (s AddAiotPersonTableItemsForTablesRequestPersonTableItemList) GoString() string {
	return s.String()
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemList) SetIdentificationList(v []*AddAiotPersonTableItemsForTablesRequestPersonTableItemListIdentificationList) *AddAiotPersonTableItemsForTablesRequestPersonTableItemList {
	s.IdentificationList = v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemList) SetIdentificationNum(v int64) *AddAiotPersonTableItemsForTablesRequestPersonTableItemList {
	s.IdentificationNum = &v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemList) SetImageList(v []*AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList) *AddAiotPersonTableItemsForTablesRequestPersonTableItemList {
	s.ImageList = v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemList) SetImageNum(v int64) *AddAiotPersonTableItemsForTablesRequestPersonTableItemList {
	s.ImageNum = &v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemList) SetPersonCode(v string) *AddAiotPersonTableItemsForTablesRequestPersonTableItemList {
	s.PersonCode = &v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemList) SetPersonId(v string) *AddAiotPersonTableItemsForTablesRequestPersonTableItemList {
	s.PersonId = &v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemList) SetPersonName(v string) *AddAiotPersonTableItemsForTablesRequestPersonTableItemList {
	s.PersonName = &v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemList) SetRemarks(v string) *AddAiotPersonTableItemsForTablesRequestPersonTableItemList {
	s.Remarks = &v
	return s
}

type AddAiotPersonTableItemsForTablesRequestPersonTableItemListIdentificationList struct {
	Number *string `json:"Number,omitempty" xml:"Number,omitempty"`
	Type   *int64  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AddAiotPersonTableItemsForTablesRequestPersonTableItemListIdentificationList) String() string {
	return tea.Prettify(s)
}

func (s AddAiotPersonTableItemsForTablesRequestPersonTableItemListIdentificationList) GoString() string {
	return s.String()
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemListIdentificationList) SetNumber(v string) *AddAiotPersonTableItemsForTablesRequestPersonTableItemListIdentificationList {
	s.Number = &v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemListIdentificationList) SetType(v int64) *AddAiotPersonTableItemsForTablesRequestPersonTableItemListIdentificationList {
	s.Type = &v
	return s
}

type AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList struct {
	Data        *string                                                                         `json:"Data,omitempty" xml:"Data,omitempty"`
	DeviceId    *string                                                                         `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	EventSort   *string                                                                         `json:"EventSort,omitempty" xml:"EventSort,omitempty"`
	FeatureInfo *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageListFeatureInfo `json:"FeatureInfo,omitempty" xml:"FeatureInfo,omitempty" type:"Struct"`
	FileFormat  *string                                                                         `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	Height      *int64                                                                          `json:"Height,omitempty" xml:"Height,omitempty"`
	ImageId     *string                                                                         `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ShotTime    *string                                                                         `json:"ShotTime,omitempty" xml:"ShotTime,omitempty"`
	Size        *int64                                                                          `json:"Size,omitempty" xml:"Size,omitempty"`
	StoragePath *string                                                                         `json:"StoragePath,omitempty" xml:"StoragePath,omitempty"`
	Type        *string                                                                         `json:"Type,omitempty" xml:"Type,omitempty"`
	Width       *int64                                                                          `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList) String() string {
	return tea.Prettify(s)
}

func (s AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList) GoString() string {
	return s.String()
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList) SetData(v string) *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList {
	s.Data = &v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList) SetDeviceId(v string) *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList {
	s.DeviceId = &v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList) SetEventSort(v string) *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList {
	s.EventSort = &v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList) SetFeatureInfo(v *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageListFeatureInfo) *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList {
	s.FeatureInfo = v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList) SetFileFormat(v string) *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList {
	s.FileFormat = &v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList) SetHeight(v int64) *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList {
	s.Height = &v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList) SetImageId(v string) *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList {
	s.ImageId = &v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList) SetShotTime(v string) *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList {
	s.ShotTime = &v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList) SetSize(v int64) *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList {
	s.Size = &v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList) SetStoragePath(v string) *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList {
	s.StoragePath = &v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList) SetType(v string) *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList {
	s.Type = &v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList) SetWidth(v int64) *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageList {
	s.Width = &v
	return s
}

type AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageListFeatureInfo struct {
	AlgorithmType    *string `json:"AlgorithmType,omitempty" xml:"AlgorithmType,omitempty"`
	AlgorithmVersion *string `json:"AlgorithmVersion,omitempty" xml:"AlgorithmVersion,omitempty"`
	FeatureData      *string `json:"FeatureData,omitempty" xml:"FeatureData,omitempty"`
	ImageId          *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ObjectId         *string `json:"ObjectId,omitempty" xml:"ObjectId,omitempty"`
	TabIed           *string `json:"TabIed,omitempty" xml:"TabIed,omitempty"`
	Vendor           *string `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageListFeatureInfo) String() string {
	return tea.Prettify(s)
}

func (s AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageListFeatureInfo) GoString() string {
	return s.String()
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageListFeatureInfo) SetAlgorithmType(v string) *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageListFeatureInfo {
	s.AlgorithmType = &v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageListFeatureInfo) SetAlgorithmVersion(v string) *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageListFeatureInfo {
	s.AlgorithmVersion = &v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageListFeatureInfo) SetFeatureData(v string) *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageListFeatureInfo {
	s.FeatureData = &v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageListFeatureInfo) SetImageId(v string) *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageListFeatureInfo {
	s.ImageId = &v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageListFeatureInfo) SetObjectId(v string) *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageListFeatureInfo {
	s.ObjectId = &v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageListFeatureInfo) SetTabIed(v string) *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageListFeatureInfo {
	s.TabIed = &v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageListFeatureInfo) SetVendor(v string) *AddAiotPersonTableItemsForTablesRequestPersonTableItemListImageListFeatureInfo {
	s.Vendor = &v
	return s
}

type AddAiotPersonTableItemsForTablesRequestPersonTableList struct {
	Id            *string `json:"Id,omitempty" xml:"Id,omitempty"`
	PersonTableId *string `json:"PersonTableId,omitempty" xml:"PersonTableId,omitempty"`
}

func (s AddAiotPersonTableItemsForTablesRequestPersonTableList) String() string {
	return tea.Prettify(s)
}

func (s AddAiotPersonTableItemsForTablesRequestPersonTableList) GoString() string {
	return s.String()
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableList) SetId(v string) *AddAiotPersonTableItemsForTablesRequestPersonTableList {
	s.Id = &v
	return s
}

func (s *AddAiotPersonTableItemsForTablesRequestPersonTableList) SetPersonTableId(v string) *AddAiotPersonTableItemsForTablesRequestPersonTableList {
	s.PersonTableId = &v
	return s
}

type AddAiotPersonTableItemsForTablesResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddAiotPersonTableItemsForTablesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddAiotPersonTableItemsForTablesResponseBody) GoString() string {
	return s.String()
}

func (s *AddAiotPersonTableItemsForTablesResponseBody) SetCode(v string) *AddAiotPersonTableItemsForTablesResponseBody {
	s.Code = &v
	return s
}

func (s *AddAiotPersonTableItemsForTablesResponseBody) SetMessage(v string) *AddAiotPersonTableItemsForTablesResponseBody {
	s.Message = &v
	return s
}

func (s *AddAiotPersonTableItemsForTablesResponseBody) SetRequestId(v string) *AddAiotPersonTableItemsForTablesResponseBody {
	s.RequestId = &v
	return s
}

type AddAiotPersonTableItemsForTablesResponse struct {
	Headers map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddAiotPersonTableItemsForTablesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddAiotPersonTableItemsForTablesResponse) String() string {
	return tea.Prettify(s)
}

func (s AddAiotPersonTableItemsForTablesResponse) GoString() string {
	return s.String()
}

func (s *AddAiotPersonTableItemsForTablesResponse) SetHeaders(v map[string]*string) *AddAiotPersonTableItemsForTablesResponse {
	s.Headers = v
	return s
}

func (s *AddAiotPersonTableItemsForTablesResponse) SetBody(v *AddAiotPersonTableItemsForTablesResponseBody) *AddAiotPersonTableItemsForTablesResponse {
	s.Body = v
	return s
}

type AddAiotVehicleTableItemsRequest struct {
	Id               *string                                          `json:"Id,omitempty" xml:"Id,omitempty"`
	VehicleTableId   *string                                          `json:"VehicleTableId,omitempty" xml:"VehicleTableId,omitempty"`
	VehicleTableItem *AddAiotVehicleTableItemsRequestVehicleTableItem `json:"VehicleTableItem,omitempty" xml:"VehicleTableItem,omitempty" type:"Struct"`
}

func (s AddAiotVehicleTableItemsRequest) String() string {
	return tea.Prettify(s)
}

func (s AddAiotVehicleTableItemsRequest) GoString() string {
	return s.String()
}

func (s *AddAiotVehicleTableItemsRequest) SetId(v string) *AddAiotVehicleTableItemsRequest {
	s.Id = &v
	return s
}

func (s *AddAiotVehicleTableItemsRequest) SetVehicleTableId(v string) *AddAiotVehicleTableItemsRequest {
	s.VehicleTableId = &v
	return s
}

func (s *AddAiotVehicleTableItemsRequest) SetVehicleTableItem(v *AddAiotVehicleTableItemsRequestVehicleTableItem) *AddAiotVehicleTableItemsRequest {
	s.VehicleTableItem = v
	return s
}

type AddAiotVehicleTableItemsRequestVehicleTableItem struct {
	BeginTime          *string `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	EndTime            *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerName          *string `json:"OwnerName,omitempty" xml:"OwnerName,omitempty"`
	PhoneNo            *string `json:"PhoneNo,omitempty" xml:"PhoneNo,omitempty"`
	PlateNo            *string `json:"PlateNo,omitempty" xml:"PlateNo,omitempty"`
	Remarks            *string `json:"Remarks,omitempty" xml:"Remarks,omitempty"`
	VehicleTableItemId *string `json:"VehicleTableItemId,omitempty" xml:"VehicleTableItemId,omitempty"`
}

func (s AddAiotVehicleTableItemsRequestVehicleTableItem) String() string {
	return tea.Prettify(s)
}

func (s AddAiotVehicleTableItemsRequestVehicleTableItem) GoString() string {
	return s.String()
}

func (s *AddAiotVehicleTableItemsRequestVehicleTableItem) SetBeginTime(v string) *AddAiotVehicleTableItemsRequestVehicleTableItem {
	s.BeginTime = &v
	return s
}

func (s *AddAiotVehicleTableItemsRequestVehicleTableItem) SetEndTime(v string) *AddAiotVehicleTableItemsRequestVehicleTableItem {
	s.EndTime = &v
	return s
}

func (s *AddAiotVehicleTableItemsRequestVehicleTableItem) SetOwnerName(v string) *AddAiotVehicleTableItemsRequestVehicleTableItem {
	s.OwnerName = &v
	return s
}

func (s *AddAiotVehicleTableItemsRequestVehicleTableItem) SetPhoneNo(v string) *AddAiotVehicleTableItemsRequestVehicleTableItem {
	s.PhoneNo = &v
	return s
}

func (s *AddAiotVehicleTableItemsRequestVehicleTableItem) SetPlateNo(v string) *AddAiotVehicleTableItemsRequestVehicleTableItem {
	s.PlateNo = &v
	return s
}

func (s *AddAiotVehicleTableItemsRequestVehicleTableItem) SetRemarks(v string) *AddAiotVehicleTableItemsRequestVehicleTableItem {
	s.Remarks = &v
	return s
}

func (s *AddAiotVehicleTableItemsRequestVehicleTableItem) SetVehicleTableItemId(v string) *AddAiotVehicleTableItemsRequestVehicleTableItem {
	s.VehicleTableItemId = &v
	return s
}

type AddAiotVehicleTableItemsShrinkRequest struct {
	Id                     *string `json:"Id,omitempty" xml:"Id,omitempty"`
	VehicleTableId         *string `json:"VehicleTableId,omitempty" xml:"VehicleTableId,omitempty"`
	VehicleTableItemShrink *string `json:"VehicleTableItem,omitempty" xml:"VehicleTableItem,omitempty"`
}

func (s AddAiotVehicleTableItemsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s AddAiotVehicleTableItemsShrinkRequest) GoString() string {
	return s.String()
}

func (s *AddAiotVehicleTableItemsShrinkRequest) SetId(v string) *AddAiotVehicleTableItemsShrinkRequest {
	s.Id = &v
	return s
}

func (s *AddAiotVehicleTableItemsShrinkRequest) SetVehicleTableId(v string) *AddAiotVehicleTableItemsShrinkRequest {
	s.VehicleTableId = &v
	return s
}

func (s *AddAiotVehicleTableItemsShrinkRequest) SetVehicleTableItemShrink(v string) *AddAiotVehicleTableItemsShrinkRequest {
	s.VehicleTableItemShrink = &v
	return s
}

type AddAiotVehicleTableItemsResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddAiotVehicleTableItemsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddAiotVehicleTableItemsResponseBody) GoString() string {
	return s.String()
}

func (s *AddAiotVehicleTableItemsResponseBody) SetCode(v string) *AddAiotVehicleTableItemsResponseBody {
	s.Code = &v
	return s
}

func (s *AddAiotVehicleTableItemsResponseBody) SetMessage(v string) *AddAiotVehicleTableItemsResponseBody {
	s.Message = &v
	return s
}

func (s *AddAiotVehicleTableItemsResponseBody) SetRequestId(v string) *AddAiotVehicleTableItemsResponseBody {
	s.RequestId = &v
	return s
}

type AddAiotVehicleTableItemsResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddAiotVehicleTableItemsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddAiotVehicleTableItemsResponse) String() string {
	return tea.Prettify(s)
}

func (s AddAiotVehicleTableItemsResponse) GoString() string {
	return s.String()
}

func (s *AddAiotVehicleTableItemsResponse) SetHeaders(v map[string]*string) *AddAiotVehicleTableItemsResponse {
	s.Headers = v
	return s
}

func (s *AddAiotVehicleTableItemsResponse) SetBody(v *AddAiotVehicleTableItemsResponseBody) *AddAiotVehicleTableItemsResponse {
	s.Body = v
	return s
}

type AddCameraForInstanceRequest struct {
	// 设备Id
	CameraIds []*string `json:"CameraIds,omitempty" xml:"CameraIds,omitempty" type:"Repeated"`
	// 实例Id
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s AddCameraForInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCameraForInstanceRequest) GoString() string {
	return s.String()
}

func (s *AddCameraForInstanceRequest) SetCameraIds(v []*string) *AddCameraForInstanceRequest {
	s.CameraIds = v
	return s
}

func (s *AddCameraForInstanceRequest) SetInstanceId(v string) *AddCameraForInstanceRequest {
	s.InstanceId = &v
	return s
}

type AddCameraForInstanceShrinkRequest struct {
	// 设备Id
	CameraIdsShrink *string `json:"CameraIds,omitempty" xml:"CameraIds,omitempty"`
	// 实例Id
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s AddCameraForInstanceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCameraForInstanceShrinkRequest) GoString() string {
	return s.String()
}

func (s *AddCameraForInstanceShrinkRequest) SetCameraIdsShrink(v string) *AddCameraForInstanceShrinkRequest {
	s.CameraIdsShrink = &v
	return s
}

func (s *AddCameraForInstanceShrinkRequest) SetInstanceId(v string) *AddCameraForInstanceShrinkRequest {
	s.InstanceId = &v
	return s
}

type AddCameraForInstanceResponseBody struct {
	// code码
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// 返回结果消息
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddCameraForInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCameraForInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *AddCameraForInstanceResponseBody) SetCode(v string) *AddCameraForInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *AddCameraForInstanceResponseBody) SetMessage(v string) *AddCameraForInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *AddCameraForInstanceResponseBody) SetRequestId(v string) *AddCameraForInstanceResponseBody {
	s.RequestId = &v
	return s
}

type AddCameraForInstanceResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddCameraForInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddCameraForInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCameraForInstanceResponse) GoString() string {
	return s.String()
}

func (s *AddCameraForInstanceResponse) SetHeaders(v map[string]*string) *AddCameraForInstanceResponse {
	s.Headers = v
	return s
}

func (s *AddCameraForInstanceResponse) SetBody(v *AddCameraForInstanceResponseBody) *AddCameraForInstanceResponse {
	s.Body = v
	return s
}

type AddChannelRequest struct {
	ParentDeviceGbId *string `json:"ParentDeviceGbId,omitempty" xml:"ParentDeviceGbId,omitempty"`
}

func (s AddChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s AddChannelRequest) GoString() string {
	return s.String()
}

func (s *AddChannelRequest) SetParentDeviceGbId(v string) *AddChannelRequest {
	s.ParentDeviceGbId = &v
	return s
}

type AddChannelResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddChannelResponseBody) GoString() string {
	return s.String()
}

func (s *AddChannelResponseBody) SetCode(v string) *AddChannelResponseBody {
	s.Code = &v
	return s
}

func (s *AddChannelResponseBody) SetData(v string) *AddChannelResponseBody {
	s.Data = &v
	return s
}

func (s *AddChannelResponseBody) SetMessage(v string) *AddChannelResponseBody {
	s.Message = &v
	return s
}

func (s *AddChannelResponseBody) SetRequestId(v string) *AddChannelResponseBody {
	s.RequestId = &v
	return s
}

type AddChannelResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddChannelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s AddChannelResponse) GoString() string {
	return s.String()
}

func (s *AddChannelResponse) SetHeaders(v map[string]*string) *AddChannelResponse {
	s.Headers = v
	return s
}

func (s *AddChannelResponse) SetBody(v *AddChannelResponseBody) *AddChannelResponse {
	s.Body = v
	return s
}

type AddDataSourceRequest struct {
	CorpId         *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Url            *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s AddDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s AddDataSourceRequest) GoString() string {
	return s.String()
}

func (s *AddDataSourceRequest) SetCorpId(v string) *AddDataSourceRequest {
	s.CorpId = &v
	return s
}

func (s *AddDataSourceRequest) SetDataSourceName(v string) *AddDataSourceRequest {
	s.DataSourceName = &v
	return s
}

func (s *AddDataSourceRequest) SetDataSourceType(v string) *AddDataSourceRequest {
	s.DataSourceType = &v
	return s
}

func (s *AddDataSourceRequest) SetDescription(v string) *AddDataSourceRequest {
	s.Description = &v
	return s
}

func (s *AddDataSourceRequest) SetUrl(v string) *AddDataSourceRequest {
	s.Url = &v
	return s
}

type AddDataSourceResponseBody struct {
	Code      *string                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *AddDataSourceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                        `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *AddDataSourceResponseBody) SetCode(v string) *AddDataSourceResponseBody {
	s.Code = &v
	return s
}

func (s *AddDataSourceResponseBody) SetData(v *AddDataSourceResponseBodyData) *AddDataSourceResponseBody {
	s.Data = v
	return s
}

func (s *AddDataSourceResponseBody) SetMessage(v string) *AddDataSourceResponseBody {
	s.Message = &v
	return s
}

func (s *AddDataSourceResponseBody) SetRequestId(v string) *AddDataSourceResponseBody {
	s.RequestId = &v
	return s
}

type AddDataSourceResponseBodyData struct {
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	KafkaTopic   *string `json:"KafkaTopic,omitempty" xml:"KafkaTopic,omitempty"`
	OssPath      *string `json:"OssPath,omitempty" xml:"OssPath,omitempty"`
}

func (s AddDataSourceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AddDataSourceResponseBodyData) GoString() string {
	return s.String()
}

func (s *AddDataSourceResponseBodyData) SetDataSourceId(v string) *AddDataSourceResponseBodyData {
	s.DataSourceId = &v
	return s
}

func (s *AddDataSourceResponseBodyData) SetKafkaTopic(v string) *AddDataSourceResponseBodyData {
	s.KafkaTopic = &v
	return s
}

func (s *AddDataSourceResponseBodyData) SetOssPath(v string) *AddDataSourceResponseBodyData {
	s.OssPath = &v
	return s
}

type AddDataSourceResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s AddDataSourceResponse) GoString() string {
	return s.String()
}

func (s *AddDataSourceResponse) SetHeaders(v map[string]*string) *AddDataSourceResponse {
	s.Headers = v
	return s
}

func (s *AddDataSourceResponse) SetBody(v *AddDataSourceResponseBody) *AddDataSourceResponse {
	s.Body = v
	return s
}

type AddDeviceRequest struct {
	BitRate          *string `json:"BitRate,omitempty" xml:"BitRate,omitempty"`
	CorpId           *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DeviceAddress    *string `json:"DeviceAddress,omitempty" xml:"DeviceAddress,omitempty"`
	DeviceDirection  *string `json:"DeviceDirection,omitempty" xml:"DeviceDirection,omitempty"`
	DeviceName       *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DeviceResolution *string `json:"DeviceResolution,omitempty" xml:"DeviceResolution,omitempty"`
	DeviceSite       *string `json:"DeviceSite,omitempty" xml:"DeviceSite,omitempty"`
	DeviceType       *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	GbId             *string `json:"GbId,omitempty" xml:"GbId,omitempty"`
	Vendor           *string `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s AddDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s AddDeviceRequest) GoString() string {
	return s.String()
}

func (s *AddDeviceRequest) SetBitRate(v string) *AddDeviceRequest {
	s.BitRate = &v
	return s
}

func (s *AddDeviceRequest) SetCorpId(v string) *AddDeviceRequest {
	s.CorpId = &v
	return s
}

func (s *AddDeviceRequest) SetDeviceAddress(v string) *AddDeviceRequest {
	s.DeviceAddress = &v
	return s
}

func (s *AddDeviceRequest) SetDeviceDirection(v string) *AddDeviceRequest {
	s.DeviceDirection = &v
	return s
}

func (s *AddDeviceRequest) SetDeviceName(v string) *AddDeviceRequest {
	s.DeviceName = &v
	return s
}

func (s *AddDeviceRequest) SetDeviceResolution(v string) *AddDeviceRequest {
	s.DeviceResolution = &v
	return s
}

func (s *AddDeviceRequest) SetDeviceSite(v string) *AddDeviceRequest {
	s.DeviceSite = &v
	return s
}

func (s *AddDeviceRequest) SetDeviceType(v string) *AddDeviceRequest {
	s.DeviceType = &v
	return s
}

func (s *AddDeviceRequest) SetGbId(v string) *AddDeviceRequest {
	s.GbId = &v
	return s
}

func (s *AddDeviceRequest) SetVendor(v string) *AddDeviceRequest {
	s.Vendor = &v
	return s
}

type AddDeviceResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *AddDeviceResponseBody) SetCode(v string) *AddDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *AddDeviceResponseBody) SetData(v string) *AddDeviceResponseBody {
	s.Data = &v
	return s
}

func (s *AddDeviceResponseBody) SetMessage(v string) *AddDeviceResponseBody {
	s.Message = &v
	return s
}

func (s *AddDeviceResponseBody) SetRequestId(v string) *AddDeviceResponseBody {
	s.RequestId = &v
	return s
}

type AddDeviceResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s AddDeviceResponse) GoString() string {
	return s.String()
}

func (s *AddDeviceResponse) SetHeaders(v map[string]*string) *AddDeviceResponse {
	s.Headers = v
	return s
}

func (s *AddDeviceResponse) SetBody(v *AddDeviceResponseBody) *AddDeviceResponse {
	s.Body = v
	return s
}

type AddDoubleVerificationGroupsRequest struct {
	DoubleVerificationGroupList []*AddDoubleVerificationGroupsRequestDoubleVerificationGroupList `json:"DoubleVerificationGroupList,omitempty" xml:"DoubleVerificationGroupList,omitempty" type:"Repeated"`
	Id                          *string                                                          `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s AddDoubleVerificationGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s AddDoubleVerificationGroupsRequest) GoString() string {
	return s.String()
}

func (s *AddDoubleVerificationGroupsRequest) SetDoubleVerificationGroupList(v []*AddDoubleVerificationGroupsRequestDoubleVerificationGroupList) *AddDoubleVerificationGroupsRequest {
	s.DoubleVerificationGroupList = v
	return s
}

func (s *AddDoubleVerificationGroupsRequest) SetId(v string) *AddDoubleVerificationGroupsRequest {
	s.Id = &v
	return s
}

type AddDoubleVerificationGroupsRequestDoubleVerificationGroupList struct {
	GroupId      *string                                                                      `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Interval     *int64                                                                       `json:"Interval,omitempty" xml:"Interval,omitempty"`
	MemberNumber *int64                                                                       `json:"MemberNumber,omitempty" xml:"MemberNumber,omitempty"`
	PersonIdList []*AddDoubleVerificationGroupsRequestDoubleVerificationGroupListPersonIdList `json:"PersonIdList,omitempty" xml:"PersonIdList,omitempty" type:"Repeated"`
}

func (s AddDoubleVerificationGroupsRequestDoubleVerificationGroupList) String() string {
	return tea.Prettify(s)
}

func (s AddDoubleVerificationGroupsRequestDoubleVerificationGroupList) GoString() string {
	return s.String()
}

func (s *AddDoubleVerificationGroupsRequestDoubleVerificationGroupList) SetGroupId(v string) *AddDoubleVerificationGroupsRequestDoubleVerificationGroupList {
	s.GroupId = &v
	return s
}

func (s *AddDoubleVerificationGroupsRequestDoubleVerificationGroupList) SetInterval(v int64) *AddDoubleVerificationGroupsRequestDoubleVerificationGroupList {
	s.Interval = &v
	return s
}

func (s *AddDoubleVerificationGroupsRequestDoubleVerificationGroupList) SetMemberNumber(v int64) *AddDoubleVerificationGroupsRequestDoubleVerificationGroupList {
	s.MemberNumber = &v
	return s
}

func (s *AddDoubleVerificationGroupsRequestDoubleVerificationGroupList) SetPersonIdList(v []*AddDoubleVerificationGroupsRequestDoubleVerificationGroupListPersonIdList) *AddDoubleVerificationGroupsRequestDoubleVerificationGroupList {
	s.PersonIdList = v
	return s
}

type AddDoubleVerificationGroupsRequestDoubleVerificationGroupListPersonIdList struct {
	PersonId      *string `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	PersonTableId *string `json:"PersonTableId,omitempty" xml:"PersonTableId,omitempty"`
}

func (s AddDoubleVerificationGroupsRequestDoubleVerificationGroupListPersonIdList) String() string {
	return tea.Prettify(s)
}

func (s AddDoubleVerificationGroupsRequestDoubleVerificationGroupListPersonIdList) GoString() string {
	return s.String()
}

func (s *AddDoubleVerificationGroupsRequestDoubleVerificationGroupListPersonIdList) SetPersonId(v string) *AddDoubleVerificationGroupsRequestDoubleVerificationGroupListPersonIdList {
	s.PersonId = &v
	return s
}

func (s *AddDoubleVerificationGroupsRequestDoubleVerificationGroupListPersonIdList) SetPersonTableId(v string) *AddDoubleVerificationGroupsRequestDoubleVerificationGroupListPersonIdList {
	s.PersonTableId = &v
	return s
}

type AddDoubleVerificationGroupsResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId  *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultList []*AddDoubleVerificationGroupsResponseBodyResultList `json:"ResultList,omitempty" xml:"ResultList,omitempty" type:"Repeated"`
}

func (s AddDoubleVerificationGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddDoubleVerificationGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *AddDoubleVerificationGroupsResponseBody) SetCode(v string) *AddDoubleVerificationGroupsResponseBody {
	s.Code = &v
	return s
}

func (s *AddDoubleVerificationGroupsResponseBody) SetMessage(v string) *AddDoubleVerificationGroupsResponseBody {
	s.Message = &v
	return s
}

func (s *AddDoubleVerificationGroupsResponseBody) SetRequestId(v string) *AddDoubleVerificationGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddDoubleVerificationGroupsResponseBody) SetResultList(v []*AddDoubleVerificationGroupsResponseBodyResultList) *AddDoubleVerificationGroupsResponseBody {
	s.ResultList = v
	return s
}

type AddDoubleVerificationGroupsResponseBodyResultList struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s AddDoubleVerificationGroupsResponseBodyResultList) String() string {
	return tea.Prettify(s)
}

func (s AddDoubleVerificationGroupsResponseBodyResultList) GoString() string {
	return s.String()
}

func (s *AddDoubleVerificationGroupsResponseBodyResultList) SetCode(v string) *AddDoubleVerificationGroupsResponseBodyResultList {
	s.Code = &v
	return s
}

func (s *AddDoubleVerificationGroupsResponseBodyResultList) SetGroupId(v string) *AddDoubleVerificationGroupsResponseBodyResultList {
	s.GroupId = &v
	return s
}

func (s *AddDoubleVerificationGroupsResponseBodyResultList) SetMessage(v string) *AddDoubleVerificationGroupsResponseBodyResultList {
	s.Message = &v
	return s
}

type AddDoubleVerificationGroupsResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddDoubleVerificationGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddDoubleVerificationGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s AddDoubleVerificationGroupsResponse) GoString() string {
	return s.String()
}

func (s *AddDoubleVerificationGroupsResponse) SetHeaders(v map[string]*string) *AddDoubleVerificationGroupsResponse {
	s.Headers = v
	return s
}

func (s *AddDoubleVerificationGroupsResponse) SetBody(v *AddDoubleVerificationGroupsResponseBody) *AddDoubleVerificationGroupsResponse {
	s.Body = v
	return s
}

type AddMonitorRequest struct {
	AlgorithmVendor      *string `json:"AlgorithmVendor,omitempty" xml:"AlgorithmVendor,omitempty"`
	BatchIndicator       *int32  `json:"BatchIndicator,omitempty" xml:"BatchIndicator,omitempty"`
	CorpId               *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	MonitorType          *string `json:"MonitorType,omitempty" xml:"MonitorType,omitempty"`
	NotifierAppSecret    *string `json:"NotifierAppSecret,omitempty" xml:"NotifierAppSecret,omitempty"`
	NotifierExtendValues *string `json:"NotifierExtendValues,omitempty" xml:"NotifierExtendValues,omitempty"`
	NotifierTimeOut      *int32  `json:"NotifierTimeOut,omitempty" xml:"NotifierTimeOut,omitempty"`
	NotifierType         *string `json:"NotifierType,omitempty" xml:"NotifierType,omitempty"`
	NotifierUrl          *string `json:"NotifierUrl,omitempty" xml:"NotifierUrl,omitempty"`
}

func (s AddMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s AddMonitorRequest) GoString() string {
	return s.String()
}

func (s *AddMonitorRequest) SetAlgorithmVendor(v string) *AddMonitorRequest {
	s.AlgorithmVendor = &v
	return s
}

func (s *AddMonitorRequest) SetBatchIndicator(v int32) *AddMonitorRequest {
	s.BatchIndicator = &v
	return s
}

func (s *AddMonitorRequest) SetCorpId(v string) *AddMonitorRequest {
	s.CorpId = &v
	return s
}

func (s *AddMonitorRequest) SetDescription(v string) *AddMonitorRequest {
	s.Description = &v
	return s
}

func (s *AddMonitorRequest) SetMonitorType(v string) *AddMonitorRequest {
	s.MonitorType = &v
	return s
}

func (s *AddMonitorRequest) SetNotifierAppSecret(v string) *AddMonitorRequest {
	s.NotifierAppSecret = &v
	return s
}

func (s *AddMonitorRequest) SetNotifierExtendValues(v string) *AddMonitorRequest {
	s.NotifierExtendValues = &v
	return s
}

func (s *AddMonitorRequest) SetNotifierTimeOut(v int32) *AddMonitorRequest {
	s.NotifierTimeOut = &v
	return s
}

func (s *AddMonitorRequest) SetNotifierType(v string) *AddMonitorRequest {
	s.NotifierType = &v
	return s
}

func (s *AddMonitorRequest) SetNotifierUrl(v string) *AddMonitorRequest {
	s.NotifierUrl = &v
	return s
}

type AddMonitorResponseBody struct {
	Code      *string                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *AddMonitorResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                     `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *AddMonitorResponseBody) SetCode(v string) *AddMonitorResponseBody {
	s.Code = &v
	return s
}

func (s *AddMonitorResponseBody) SetData(v *AddMonitorResponseBodyData) *AddMonitorResponseBody {
	s.Data = v
	return s
}

func (s *AddMonitorResponseBody) SetMessage(v string) *AddMonitorResponseBody {
	s.Message = &v
	return s
}

func (s *AddMonitorResponseBody) SetRequestId(v string) *AddMonitorResponseBody {
	s.RequestId = &v
	return s
}

type AddMonitorResponseBodyData struct {
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s AddMonitorResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AddMonitorResponseBodyData) GoString() string {
	return s.String()
}

func (s *AddMonitorResponseBodyData) SetTaskId(v string) *AddMonitorResponseBodyData {
	s.TaskId = &v
	return s
}

type AddMonitorResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s AddMonitorResponse) GoString() string {
	return s.String()
}

func (s *AddMonitorResponse) SetHeaders(v map[string]*string) *AddMonitorResponse {
	s.Headers = v
	return s
}

func (s *AddMonitorResponse) SetBody(v *AddMonitorResponseBody) *AddMonitorResponse {
	s.Body = v
	return s
}

type AddProfileRequest struct {
	BizId       *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	CatalogId   *int64  `json:"CatalogId,omitempty" xml:"CatalogId,omitempty"`
	CorpId      *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	FaceUrl     *string `json:"FaceUrl,omitempty" xml:"FaceUrl,omitempty"`
	Gender      *int32  `json:"Gender,omitempty" xml:"Gender,omitempty"`
	IdNumber    *string `json:"IdNumber,omitempty" xml:"IdNumber,omitempty"`
	IsvSubId    *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	LiveAddress *string `json:"LiveAddress,omitempty" xml:"LiveAddress,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PhoneNo     *string `json:"PhoneNo,omitempty" xml:"PhoneNo,omitempty"`
	PlateNo     *string `json:"PlateNo,omitempty" xml:"PlateNo,omitempty"`
	SceneType   *string `json:"SceneType,omitempty" xml:"SceneType,omitempty"`
}

func (s AddProfileRequest) String() string {
	return tea.Prettify(s)
}

func (s AddProfileRequest) GoString() string {
	return s.String()
}

func (s *AddProfileRequest) SetBizId(v string) *AddProfileRequest {
	s.BizId = &v
	return s
}

func (s *AddProfileRequest) SetCatalogId(v int64) *AddProfileRequest {
	s.CatalogId = &v
	return s
}

func (s *AddProfileRequest) SetCorpId(v string) *AddProfileRequest {
	s.CorpId = &v
	return s
}

func (s *AddProfileRequest) SetFaceUrl(v string) *AddProfileRequest {
	s.FaceUrl = &v
	return s
}

func (s *AddProfileRequest) SetGender(v int32) *AddProfileRequest {
	s.Gender = &v
	return s
}

func (s *AddProfileRequest) SetIdNumber(v string) *AddProfileRequest {
	s.IdNumber = &v
	return s
}

func (s *AddProfileRequest) SetIsvSubId(v string) *AddProfileRequest {
	s.IsvSubId = &v
	return s
}

func (s *AddProfileRequest) SetLiveAddress(v string) *AddProfileRequest {
	s.LiveAddress = &v
	return s
}

func (s *AddProfileRequest) SetName(v string) *AddProfileRequest {
	s.Name = &v
	return s
}

func (s *AddProfileRequest) SetPhoneNo(v string) *AddProfileRequest {
	s.PhoneNo = &v
	return s
}

func (s *AddProfileRequest) SetPlateNo(v string) *AddProfileRequest {
	s.PlateNo = &v
	return s
}

func (s *AddProfileRequest) SetSceneType(v string) *AddProfileRequest {
	s.SceneType = &v
	return s
}

type AddProfileResponseBody struct {
	Code      *string                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *AddProfileResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                     `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddProfileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddProfileResponseBody) GoString() string {
	return s.String()
}

func (s *AddProfileResponseBody) SetCode(v string) *AddProfileResponseBody {
	s.Code = &v
	return s
}

func (s *AddProfileResponseBody) SetData(v *AddProfileResponseBodyData) *AddProfileResponseBody {
	s.Data = v
	return s
}

func (s *AddProfileResponseBody) SetMessage(v string) *AddProfileResponseBody {
	s.Message = &v
	return s
}

func (s *AddProfileResponseBody) SetRequestId(v string) *AddProfileResponseBody {
	s.RequestId = &v
	return s
}

type AddProfileResponseBodyData struct {
	BizId       *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	CatalogId   *int32  `json:"CatalogId,omitempty" xml:"CatalogId,omitempty"`
	FaceUrl     *string `json:"FaceUrl,omitempty" xml:"FaceUrl,omitempty"`
	Gender      *string `json:"Gender,omitempty" xml:"Gender,omitempty"`
	IdNumber    *string `json:"IdNumber,omitempty" xml:"IdNumber,omitempty"`
	IsvSubId    *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	LiveAddress *string `json:"LiveAddress,omitempty" xml:"LiveAddress,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PhoneNo     *string `json:"PhoneNo,omitempty" xml:"PhoneNo,omitempty"`
	PlateNo     *string `json:"PlateNo,omitempty" xml:"PlateNo,omitempty"`
	ProfileId   *int32  `json:"ProfileId,omitempty" xml:"ProfileId,omitempty"`
	SceneType   *string `json:"SceneType,omitempty" xml:"SceneType,omitempty"`
}

func (s AddProfileResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AddProfileResponseBodyData) GoString() string {
	return s.String()
}

func (s *AddProfileResponseBodyData) SetBizId(v string) *AddProfileResponseBodyData {
	s.BizId = &v
	return s
}

func (s *AddProfileResponseBodyData) SetCatalogId(v int32) *AddProfileResponseBodyData {
	s.CatalogId = &v
	return s
}

func (s *AddProfileResponseBodyData) SetFaceUrl(v string) *AddProfileResponseBodyData {
	s.FaceUrl = &v
	return s
}

func (s *AddProfileResponseBodyData) SetGender(v string) *AddProfileResponseBodyData {
	s.Gender = &v
	return s
}

func (s *AddProfileResponseBodyData) SetIdNumber(v string) *AddProfileResponseBodyData {
	s.IdNumber = &v
	return s
}

func (s *AddProfileResponseBodyData) SetIsvSubId(v string) *AddProfileResponseBodyData {
	s.IsvSubId = &v
	return s
}

func (s *AddProfileResponseBodyData) SetLiveAddress(v string) *AddProfileResponseBodyData {
	s.LiveAddress = &v
	return s
}

func (s *AddProfileResponseBodyData) SetName(v string) *AddProfileResponseBodyData {
	s.Name = &v
	return s
}

func (s *AddProfileResponseBodyData) SetPhoneNo(v string) *AddProfileResponseBodyData {
	s.PhoneNo = &v
	return s
}

func (s *AddProfileResponseBodyData) SetPlateNo(v string) *AddProfileResponseBodyData {
	s.PlateNo = &v
	return s
}

func (s *AddProfileResponseBodyData) SetProfileId(v int32) *AddProfileResponseBodyData {
	s.ProfileId = &v
	return s
}

func (s *AddProfileResponseBodyData) SetSceneType(v string) *AddProfileResponseBodyData {
	s.SceneType = &v
	return s
}

type AddProfileResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddProfileResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddProfileResponse) String() string {
	return tea.Prettify(s)
}

func (s AddProfileResponse) GoString() string {
	return s.String()
}

func (s *AddProfileResponse) SetHeaders(v map[string]*string) *AddProfileResponse {
	s.Headers = v
	return s
}

func (s *AddProfileResponse) SetBody(v *AddProfileResponseBody) *AddProfileResponse {
	s.Body = v
	return s
}

type AddProfileCatalogRequest struct {
	CatalogName     *string `json:"CatalogName,omitempty" xml:"CatalogName,omitempty"`
	CorpId          *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	IsvSubId        *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	ParentCatalogId *int64  `json:"ParentCatalogId,omitempty" xml:"ParentCatalogId,omitempty"`
}

func (s AddProfileCatalogRequest) String() string {
	return tea.Prettify(s)
}

func (s AddProfileCatalogRequest) GoString() string {
	return s.String()
}

func (s *AddProfileCatalogRequest) SetCatalogName(v string) *AddProfileCatalogRequest {
	s.CatalogName = &v
	return s
}

func (s *AddProfileCatalogRequest) SetCorpId(v string) *AddProfileCatalogRequest {
	s.CorpId = &v
	return s
}

func (s *AddProfileCatalogRequest) SetIsvSubId(v string) *AddProfileCatalogRequest {
	s.IsvSubId = &v
	return s
}

func (s *AddProfileCatalogRequest) SetParentCatalogId(v int64) *AddProfileCatalogRequest {
	s.ParentCatalogId = &v
	return s
}

type AddProfileCatalogResponseBody struct {
	Code      *string                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *AddProfileCatalogResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                            `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddProfileCatalogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddProfileCatalogResponseBody) GoString() string {
	return s.String()
}

func (s *AddProfileCatalogResponseBody) SetCode(v string) *AddProfileCatalogResponseBody {
	s.Code = &v
	return s
}

func (s *AddProfileCatalogResponseBody) SetData(v *AddProfileCatalogResponseBodyData) *AddProfileCatalogResponseBody {
	s.Data = v
	return s
}

func (s *AddProfileCatalogResponseBody) SetMessage(v string) *AddProfileCatalogResponseBody {
	s.Message = &v
	return s
}

func (s *AddProfileCatalogResponseBody) SetRequestId(v string) *AddProfileCatalogResponseBody {
	s.RequestId = &v
	return s
}

type AddProfileCatalogResponseBodyData struct {
	CatalogId   *int64  `json:"CatalogId,omitempty" xml:"CatalogId,omitempty"`
	CatalogName *string `json:"CatalogName,omitempty" xml:"CatalogName,omitempty"`
	IsvSubId    *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
}

func (s AddProfileCatalogResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AddProfileCatalogResponseBodyData) GoString() string {
	return s.String()
}

func (s *AddProfileCatalogResponseBodyData) SetCatalogId(v int64) *AddProfileCatalogResponseBodyData {
	s.CatalogId = &v
	return s
}

func (s *AddProfileCatalogResponseBodyData) SetCatalogName(v string) *AddProfileCatalogResponseBodyData {
	s.CatalogName = &v
	return s
}

func (s *AddProfileCatalogResponseBodyData) SetIsvSubId(v string) *AddProfileCatalogResponseBodyData {
	s.IsvSubId = &v
	return s
}

type AddProfileCatalogResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddProfileCatalogResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddProfileCatalogResponse) String() string {
	return tea.Prettify(s)
}

func (s AddProfileCatalogResponse) GoString() string {
	return s.String()
}

func (s *AddProfileCatalogResponse) SetHeaders(v map[string]*string) *AddProfileCatalogResponse {
	s.Headers = v
	return s
}

func (s *AddProfileCatalogResponse) SetBody(v *AddProfileCatalogResponseBody) *AddProfileCatalogResponse {
	s.Body = v
	return s
}

type AddWatchItemsRequest struct {
	WatchItemList []*AddWatchItemsRequestWatchItemList `json:"WatchItemList,omitempty" xml:"WatchItemList,omitempty" type:"Repeated"`
	WatchPolicyId *string                              `json:"WatchPolicyId,omitempty" xml:"WatchPolicyId,omitempty"`
}

func (s AddWatchItemsRequest) String() string {
	return tea.Prettify(s)
}

func (s AddWatchItemsRequest) GoString() string {
	return s.String()
}

func (s *AddWatchItemsRequest) SetWatchItemList(v []*AddWatchItemsRequestWatchItemList) *AddWatchItemsRequest {
	s.WatchItemList = v
	return s
}

func (s *AddWatchItemsRequest) SetWatchPolicyId(v string) *AddWatchItemsRequest {
	s.WatchPolicyId = &v
	return s
}

type AddWatchItemsRequestWatchItemList struct {
	ItemAttributes *string `json:"ItemAttributes,omitempty" xml:"ItemAttributes,omitempty"`
	ItemImageUrl   *string `json:"ItemImageUrl,omitempty" xml:"ItemImageUrl,omitempty"`
	WatchItemId    *string `json:"WatchItemId,omitempty" xml:"WatchItemId,omitempty"`
	WatchItemName  *string `json:"WatchItemName,omitempty" xml:"WatchItemName,omitempty"`
}

func (s AddWatchItemsRequestWatchItemList) String() string {
	return tea.Prettify(s)
}

func (s AddWatchItemsRequestWatchItemList) GoString() string {
	return s.String()
}

func (s *AddWatchItemsRequestWatchItemList) SetItemAttributes(v string) *AddWatchItemsRequestWatchItemList {
	s.ItemAttributes = &v
	return s
}

func (s *AddWatchItemsRequestWatchItemList) SetItemImageUrl(v string) *AddWatchItemsRequestWatchItemList {
	s.ItemImageUrl = &v
	return s
}

func (s *AddWatchItemsRequestWatchItemList) SetWatchItemId(v string) *AddWatchItemsRequestWatchItemList {
	s.WatchItemId = &v
	return s
}

func (s *AddWatchItemsRequestWatchItemList) SetWatchItemName(v string) *AddWatchItemsRequestWatchItemList {
	s.WatchItemName = &v
	return s
}

type AddWatchItemsResponseBody struct {
	Code    *string                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *AddWatchItemsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                        `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AddWatchItemsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddWatchItemsResponseBody) GoString() string {
	return s.String()
}

func (s *AddWatchItemsResponseBody) SetCode(v string) *AddWatchItemsResponseBody {
	s.Code = &v
	return s
}

func (s *AddWatchItemsResponseBody) SetData(v *AddWatchItemsResponseBodyData) *AddWatchItemsResponseBody {
	s.Data = v
	return s
}

func (s *AddWatchItemsResponseBody) SetMessage(v string) *AddWatchItemsResponseBody {
	s.Message = &v
	return s
}

func (s *AddWatchItemsResponseBody) SetRequestId(v string) *AddWatchItemsResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddWatchItemsResponseBody) SetSuccess(v bool) *AddWatchItemsResponseBody {
	s.Success = &v
	return s
}

type AddWatchItemsResponseBodyData struct {
	AddedItemIds  *string `json:"AddedItemIds,omitempty" xml:"AddedItemIds,omitempty"`
	FailedItemIds *string `json:"FailedItemIds,omitempty" xml:"FailedItemIds,omitempty"`
}

func (s AddWatchItemsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AddWatchItemsResponseBodyData) GoString() string {
	return s.String()
}

func (s *AddWatchItemsResponseBodyData) SetAddedItemIds(v string) *AddWatchItemsResponseBodyData {
	s.AddedItemIds = &v
	return s
}

func (s *AddWatchItemsResponseBodyData) SetFailedItemIds(v string) *AddWatchItemsResponseBodyData {
	s.FailedItemIds = &v
	return s
}

type AddWatchItemsResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddWatchItemsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddWatchItemsResponse) String() string {
	return tea.Prettify(s)
}

func (s AddWatchItemsResponse) GoString() string {
	return s.String()
}

func (s *AddWatchItemsResponse) SetHeaders(v map[string]*string) *AddWatchItemsResponse {
	s.Headers = v
	return s
}

func (s *AddWatchItemsResponse) SetBody(v *AddWatchItemsResponseBody) *AddWatchItemsResponse {
	s.Body = v
	return s
}

type BatchDeleteInstanceRequest struct {
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	ProjectId   *string   `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s BatchDeleteInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteInstanceRequest) GoString() string {
	return s.String()
}

func (s *BatchDeleteInstanceRequest) SetInstanceIds(v []*string) *BatchDeleteInstanceRequest {
	s.InstanceIds = v
	return s
}

func (s *BatchDeleteInstanceRequest) SetProjectId(v string) *BatchDeleteInstanceRequest {
	s.ProjectId = &v
	return s
}

type BatchDeleteInstanceShrinkRequest struct {
	InstanceIdsShrink *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	ProjectId         *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s BatchDeleteInstanceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteInstanceShrinkRequest) GoString() string {
	return s.String()
}

func (s *BatchDeleteInstanceShrinkRequest) SetInstanceIdsShrink(v string) *BatchDeleteInstanceShrinkRequest {
	s.InstanceIdsShrink = &v
	return s
}

func (s *BatchDeleteInstanceShrinkRequest) SetProjectId(v string) *BatchDeleteInstanceShrinkRequest {
	s.ProjectId = &v
	return s
}

type BatchDeleteInstanceResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s BatchDeleteInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *BatchDeleteInstanceResponseBody) SetCode(v string) *BatchDeleteInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *BatchDeleteInstanceResponseBody) SetMessage(v string) *BatchDeleteInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *BatchDeleteInstanceResponseBody) SetRequestId(v string) *BatchDeleteInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchDeleteInstanceResponseBody) SetSuccess(v bool) *BatchDeleteInstanceResponseBody {
	s.Success = &v
	return s
}

type BatchDeleteInstanceResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BatchDeleteInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchDeleteInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteInstanceResponse) GoString() string {
	return s.String()
}

func (s *BatchDeleteInstanceResponse) SetHeaders(v map[string]*string) *BatchDeleteInstanceResponse {
	s.Headers = v
	return s
}

func (s *BatchDeleteInstanceResponse) SetBody(v *BatchDeleteInstanceResponseBody) *BatchDeleteInstanceResponse {
	s.Body = v
	return s
}

type BindCorpGroupRequest struct {
	CorpGroupId *string `json:"CorpGroupId,omitempty" xml:"CorpGroupId,omitempty"`
	CorpId      *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
}

func (s BindCorpGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s BindCorpGroupRequest) GoString() string {
	return s.String()
}

func (s *BindCorpGroupRequest) SetCorpGroupId(v string) *BindCorpGroupRequest {
	s.CorpGroupId = &v
	return s
}

func (s *BindCorpGroupRequest) SetCorpId(v string) *BindCorpGroupRequest {
	s.CorpId = &v
	return s
}

type BindCorpGroupResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s BindCorpGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindCorpGroupResponseBody) GoString() string {
	return s.String()
}

func (s *BindCorpGroupResponseBody) SetCode(v string) *BindCorpGroupResponseBody {
	s.Code = &v
	return s
}

func (s *BindCorpGroupResponseBody) SetMessage(v string) *BindCorpGroupResponseBody {
	s.Message = &v
	return s
}

func (s *BindCorpGroupResponseBody) SetRequestId(v string) *BindCorpGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *BindCorpGroupResponseBody) SetSuccess(v bool) *BindCorpGroupResponseBody {
	s.Success = &v
	return s
}

type BindCorpGroupResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BindCorpGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BindCorpGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s BindCorpGroupResponse) GoString() string {
	return s.String()
}

func (s *BindCorpGroupResponse) SetHeaders(v map[string]*string) *BindCorpGroupResponse {
	s.Headers = v
	return s
}

func (s *BindCorpGroupResponse) SetBody(v *BindCorpGroupResponseBody) *BindCorpGroupResponse {
	s.Body = v
	return s
}

type BindDevicesRequest struct {
	CorpId        *string                            `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DeviceId      *string                            `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	SubDeviceList []*BindDevicesRequestSubDeviceList `json:"SubDeviceList,omitempty" xml:"SubDeviceList,omitempty" type:"Repeated"`
}

func (s BindDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s BindDevicesRequest) GoString() string {
	return s.String()
}

func (s *BindDevicesRequest) SetCorpId(v string) *BindDevicesRequest {
	s.CorpId = &v
	return s
}

func (s *BindDevicesRequest) SetDeviceId(v string) *BindDevicesRequest {
	s.DeviceId = &v
	return s
}

func (s *BindDevicesRequest) SetSubDeviceList(v []*BindDevicesRequestSubDeviceList) *BindDevicesRequest {
	s.SubDeviceList = v
	return s
}

type BindDevicesRequestSubDeviceList struct {
	AccessProtocol *string `json:"AccessProtocol,omitempty" xml:"AccessProtocol,omitempty"`
	LoginName      *string `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	PIN            *string `json:"PIN,omitempty" xml:"PIN,omitempty"`
	SubDeviceIp    *string `json:"SubDeviceIp,omitempty" xml:"SubDeviceIp,omitempty"`
	SubDeviceName  *string `json:"SubDeviceName,omitempty" xml:"SubDeviceName,omitempty"`
	SubDevicePort  *string `json:"SubDevicePort,omitempty" xml:"SubDevicePort,omitempty"`
}

func (s BindDevicesRequestSubDeviceList) String() string {
	return tea.Prettify(s)
}

func (s BindDevicesRequestSubDeviceList) GoString() string {
	return s.String()
}

func (s *BindDevicesRequestSubDeviceList) SetAccessProtocol(v string) *BindDevicesRequestSubDeviceList {
	s.AccessProtocol = &v
	return s
}

func (s *BindDevicesRequestSubDeviceList) SetLoginName(v string) *BindDevicesRequestSubDeviceList {
	s.LoginName = &v
	return s
}

func (s *BindDevicesRequestSubDeviceList) SetPIN(v string) *BindDevicesRequestSubDeviceList {
	s.PIN = &v
	return s
}

func (s *BindDevicesRequestSubDeviceList) SetSubDeviceIp(v string) *BindDevicesRequestSubDeviceList {
	s.SubDeviceIp = &v
	return s
}

func (s *BindDevicesRequestSubDeviceList) SetSubDeviceName(v string) *BindDevicesRequestSubDeviceList {
	s.SubDeviceName = &v
	return s
}

func (s *BindDevicesRequestSubDeviceList) SetSubDevicePort(v string) *BindDevicesRequestSubDeviceList {
	s.SubDevicePort = &v
	return s
}

type BindDevicesShrinkRequest struct {
	CorpId              *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DeviceId            *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	SubDeviceListShrink *string `json:"SubDeviceList,omitempty" xml:"SubDeviceList,omitempty"`
}

func (s BindDevicesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s BindDevicesShrinkRequest) GoString() string {
	return s.String()
}

func (s *BindDevicesShrinkRequest) SetCorpId(v string) *BindDevicesShrinkRequest {
	s.CorpId = &v
	return s
}

func (s *BindDevicesShrinkRequest) SetDeviceId(v string) *BindDevicesShrinkRequest {
	s.DeviceId = &v
	return s
}

func (s *BindDevicesShrinkRequest) SetSubDeviceListShrink(v string) *BindDevicesShrinkRequest {
	s.SubDeviceListShrink = &v
	return s
}

type BindDevicesResponseBody struct {
	Code    *string                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *BindDevicesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                      `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BindDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *BindDevicesResponseBody) SetCode(v string) *BindDevicesResponseBody {
	s.Code = &v
	return s
}

func (s *BindDevicesResponseBody) SetData(v *BindDevicesResponseBodyData) *BindDevicesResponseBody {
	s.Data = v
	return s
}

func (s *BindDevicesResponseBody) SetMessage(v string) *BindDevicesResponseBody {
	s.Message = &v
	return s
}

func (s *BindDevicesResponseBody) SetRequestId(v string) *BindDevicesResponseBody {
	s.RequestId = &v
	return s
}

type BindDevicesResponseBodyData struct {
	SubDeviceList []*BindDevicesResponseBodyDataSubDeviceList `json:"SubDeviceList,omitempty" xml:"SubDeviceList,omitempty" type:"Repeated"`
}

func (s BindDevicesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s BindDevicesResponseBodyData) GoString() string {
	return s.String()
}

func (s *BindDevicesResponseBodyData) SetSubDeviceList(v []*BindDevicesResponseBodyDataSubDeviceList) *BindDevicesResponseBodyData {
	s.SubDeviceList = v
	return s
}

type BindDevicesResponseBodyDataSubDeviceList struct {
	Code          *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	SubDeviceId   *string `json:"SubDeviceId,omitempty" xml:"SubDeviceId,omitempty"`
	SubDeviceIp   *string `json:"SubDeviceIp,omitempty" xml:"SubDeviceIp,omitempty"`
	SubDeviceName *string `json:"SubDeviceName,omitempty" xml:"SubDeviceName,omitempty"`
	SubDeviceNum  *string `json:"SubDeviceNum,omitempty" xml:"SubDeviceNum,omitempty"`
	SubDevicePort *string `json:"SubDevicePort,omitempty" xml:"SubDevicePort,omitempty"`
}

func (s BindDevicesResponseBodyDataSubDeviceList) String() string {
	return tea.Prettify(s)
}

func (s BindDevicesResponseBodyDataSubDeviceList) GoString() string {
	return s.String()
}

func (s *BindDevicesResponseBodyDataSubDeviceList) SetCode(v string) *BindDevicesResponseBodyDataSubDeviceList {
	s.Code = &v
	return s
}

func (s *BindDevicesResponseBodyDataSubDeviceList) SetMessage(v string) *BindDevicesResponseBodyDataSubDeviceList {
	s.Message = &v
	return s
}

func (s *BindDevicesResponseBodyDataSubDeviceList) SetSubDeviceId(v string) *BindDevicesResponseBodyDataSubDeviceList {
	s.SubDeviceId = &v
	return s
}

func (s *BindDevicesResponseBodyDataSubDeviceList) SetSubDeviceIp(v string) *BindDevicesResponseBodyDataSubDeviceList {
	s.SubDeviceIp = &v
	return s
}

func (s *BindDevicesResponseBodyDataSubDeviceList) SetSubDeviceName(v string) *BindDevicesResponseBodyDataSubDeviceList {
	s.SubDeviceName = &v
	return s
}

func (s *BindDevicesResponseBodyDataSubDeviceList) SetSubDeviceNum(v string) *BindDevicesResponseBodyDataSubDeviceList {
	s.SubDeviceNum = &v
	return s
}

func (s *BindDevicesResponseBodyDataSubDeviceList) SetSubDevicePort(v string) *BindDevicesResponseBodyDataSubDeviceList {
	s.SubDevicePort = &v
	return s
}

type BindDevicesResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BindDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BindDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s BindDevicesResponse) GoString() string {
	return s.String()
}

func (s *BindDevicesResponse) SetHeaders(v map[string]*string) *BindDevicesResponse {
	s.Headers = v
	return s
}

func (s *BindDevicesResponse) SetBody(v *BindDevicesResponseBody) *BindDevicesResponse {
	s.Body = v
	return s
}

type BindPersonRequest struct {
	CorpId             *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	IsvSubId           *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	PersonId           *string `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	PersonMatchingRate *string `json:"PersonMatchingRate,omitempty" xml:"PersonMatchingRate,omitempty"`
	ProfileId          *int64  `json:"ProfileId,omitempty" xml:"ProfileId,omitempty"`
}

func (s BindPersonRequest) String() string {
	return tea.Prettify(s)
}

func (s BindPersonRequest) GoString() string {
	return s.String()
}

func (s *BindPersonRequest) SetCorpId(v string) *BindPersonRequest {
	s.CorpId = &v
	return s
}

func (s *BindPersonRequest) SetIsvSubId(v string) *BindPersonRequest {
	s.IsvSubId = &v
	return s
}

func (s *BindPersonRequest) SetPersonId(v string) *BindPersonRequest {
	s.PersonId = &v
	return s
}

func (s *BindPersonRequest) SetPersonMatchingRate(v string) *BindPersonRequest {
	s.PersonMatchingRate = &v
	return s
}

func (s *BindPersonRequest) SetProfileId(v int64) *BindPersonRequest {
	s.ProfileId = &v
	return s
}

type BindPersonResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BindPersonResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindPersonResponseBody) GoString() string {
	return s.String()
}

func (s *BindPersonResponseBody) SetCode(v string) *BindPersonResponseBody {
	s.Code = &v
	return s
}

func (s *BindPersonResponseBody) SetData(v bool) *BindPersonResponseBody {
	s.Data = &v
	return s
}

func (s *BindPersonResponseBody) SetMessage(v string) *BindPersonResponseBody {
	s.Message = &v
	return s
}

func (s *BindPersonResponseBody) SetRequestId(v string) *BindPersonResponseBody {
	s.RequestId = &v
	return s
}

type BindPersonResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BindPersonResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BindPersonResponse) String() string {
	return tea.Prettify(s)
}

func (s BindPersonResponse) GoString() string {
	return s.String()
}

func (s *BindPersonResponse) SetHeaders(v map[string]*string) *BindPersonResponse {
	s.Headers = v
	return s
}

func (s *BindPersonResponse) SetBody(v *BindPersonResponseBody) *BindPersonResponse {
	s.Body = v
	return s
}

type BindUserRequest struct {
	CorpId       *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	IsvSubId     *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	MatchingRate *string `json:"MatchingRate,omitempty" xml:"MatchingRate,omitempty"`
	PersonId     *string `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	UserId       *int64  `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s BindUserRequest) String() string {
	return tea.Prettify(s)
}

func (s BindUserRequest) GoString() string {
	return s.String()
}

func (s *BindUserRequest) SetCorpId(v string) *BindUserRequest {
	s.CorpId = &v
	return s
}

func (s *BindUserRequest) SetIsvSubId(v string) *BindUserRequest {
	s.IsvSubId = &v
	return s
}

func (s *BindUserRequest) SetMatchingRate(v string) *BindUserRequest {
	s.MatchingRate = &v
	return s
}

func (s *BindUserRequest) SetPersonId(v string) *BindUserRequest {
	s.PersonId = &v
	return s
}

func (s *BindUserRequest) SetUserId(v int64) *BindUserRequest {
	s.UserId = &v
	return s
}

type BindUserResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BindUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindUserResponseBody) GoString() string {
	return s.String()
}

func (s *BindUserResponseBody) SetCode(v string) *BindUserResponseBody {
	s.Code = &v
	return s
}

func (s *BindUserResponseBody) SetData(v bool) *BindUserResponseBody {
	s.Data = &v
	return s
}

func (s *BindUserResponseBody) SetMessage(v string) *BindUserResponseBody {
	s.Message = &v
	return s
}

func (s *BindUserResponseBody) SetRequestId(v string) *BindUserResponseBody {
	s.RequestId = &v
	return s
}

type BindUserResponse struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BindUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BindUserResponse) String() string {
	return tea.Prettify(s)
}

func (s BindUserResponse) GoString() string {
	return s.String()
}

func (s *BindUserResponse) SetHeaders(v map[string]*string) *BindUserResponse {
	s.Headers = v
	return s
}

func (s *BindUserResponse) SetBody(v *BindUserResponseBody) *BindUserResponse {
	s.Body = v
	return s
}

type ControlAiotDeviceRequest struct {
	AssociatedDeviceId             *string                             `json:"AssociatedDeviceId,omitempty" xml:"AssociatedDeviceId,omitempty"`
	AssociatedIPAddr               *string                             `json:"AssociatedIPAddr,omitempty" xml:"AssociatedIPAddr,omitempty"`
	AssociatedPort                 *int64                              `json:"AssociatedPort,omitempty" xml:"AssociatedPort,omitempty"`
	AssociatedVerificationEnable   *string                             `json:"AssociatedVerificationEnable,omitempty" xml:"AssociatedVerificationEnable,omitempty"`
	BarrierCommand                 *int64                              `json:"BarrierCommand,omitempty" xml:"BarrierCommand,omitempty"`
	CheckEnabled                   *string                             `json:"CheckEnabled,omitempty" xml:"CheckEnabled,omitempty"`
	CommandType                    *int64                              `json:"CommandType,omitempty" xml:"CommandType,omitempty"`
	DoubleVerificationGroupEnabled *string                             `json:"DoubleVerificationGroupEnabled,omitempty" xml:"DoubleVerificationGroupEnabled,omitempty"`
	GateCtlStatus                  *int64                              `json:"GateCtlStatus,omitempty" xml:"GateCtlStatus,omitempty"`
	Id                             *string                             `json:"Id,omitempty" xml:"Id,omitempty"`
	IdentityNumber                 *string                             `json:"IdentityNumber,omitempty" xml:"IdentityNumber,omitempty"`
	MiFareCard                     *ControlAiotDeviceRequestMiFareCard `json:"MiFareCard,omitempty" xml:"MiFareCard,omitempty" type:"Struct"`
	Name                           *string                             `json:"Name,omitempty" xml:"Name,omitempty"`
	RebootDevice                   *string                             `json:"RebootDevice,omitempty" xml:"RebootDevice,omitempty"`
	SingleInterval                 *int64                              `json:"SingleInterval,omitempty" xml:"SingleInterval,omitempty"`
	SuperPassword                  *string                             `json:"SuperPassword,omitempty" xml:"SuperPassword,omitempty"`
	UpgradeFileURL                 *string                             `json:"UpgradeFileURL,omitempty" xml:"UpgradeFileURL,omitempty"`
}

func (s ControlAiotDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s ControlAiotDeviceRequest) GoString() string {
	return s.String()
}

func (s *ControlAiotDeviceRequest) SetAssociatedDeviceId(v string) *ControlAiotDeviceRequest {
	s.AssociatedDeviceId = &v
	return s
}

func (s *ControlAiotDeviceRequest) SetAssociatedIPAddr(v string) *ControlAiotDeviceRequest {
	s.AssociatedIPAddr = &v
	return s
}

func (s *ControlAiotDeviceRequest) SetAssociatedPort(v int64) *ControlAiotDeviceRequest {
	s.AssociatedPort = &v
	return s
}

func (s *ControlAiotDeviceRequest) SetAssociatedVerificationEnable(v string) *ControlAiotDeviceRequest {
	s.AssociatedVerificationEnable = &v
	return s
}

func (s *ControlAiotDeviceRequest) SetBarrierCommand(v int64) *ControlAiotDeviceRequest {
	s.BarrierCommand = &v
	return s
}

func (s *ControlAiotDeviceRequest) SetCheckEnabled(v string) *ControlAiotDeviceRequest {
	s.CheckEnabled = &v
	return s
}

func (s *ControlAiotDeviceRequest) SetCommandType(v int64) *ControlAiotDeviceRequest {
	s.CommandType = &v
	return s
}

func (s *ControlAiotDeviceRequest) SetDoubleVerificationGroupEnabled(v string) *ControlAiotDeviceRequest {
	s.DoubleVerificationGroupEnabled = &v
	return s
}

func (s *ControlAiotDeviceRequest) SetGateCtlStatus(v int64) *ControlAiotDeviceRequest {
	s.GateCtlStatus = &v
	return s
}

func (s *ControlAiotDeviceRequest) SetId(v string) *ControlAiotDeviceRequest {
	s.Id = &v
	return s
}

func (s *ControlAiotDeviceRequest) SetIdentityNumber(v string) *ControlAiotDeviceRequest {
	s.IdentityNumber = &v
	return s
}

func (s *ControlAiotDeviceRequest) SetMiFareCard(v *ControlAiotDeviceRequestMiFareCard) *ControlAiotDeviceRequest {
	s.MiFareCard = v
	return s
}

func (s *ControlAiotDeviceRequest) SetName(v string) *ControlAiotDeviceRequest {
	s.Name = &v
	return s
}

func (s *ControlAiotDeviceRequest) SetRebootDevice(v string) *ControlAiotDeviceRequest {
	s.RebootDevice = &v
	return s
}

func (s *ControlAiotDeviceRequest) SetSingleInterval(v int64) *ControlAiotDeviceRequest {
	s.SingleInterval = &v
	return s
}

func (s *ControlAiotDeviceRequest) SetSuperPassword(v string) *ControlAiotDeviceRequest {
	s.SuperPassword = &v
	return s
}

func (s *ControlAiotDeviceRequest) SetUpgradeFileURL(v string) *ControlAiotDeviceRequest {
	s.UpgradeFileURL = &v
	return s
}

type ControlAiotDeviceRequestMiFareCard struct {
	AreaCode    *int64  `json:"AreaCode,omitempty" xml:"AreaCode,omitempty"`
	AreaDeviate *int64  `json:"AreaDeviate,omitempty" xml:"AreaDeviate,omitempty"`
	AreaLen     *int64  `json:"AreaLen,omitempty" xml:"AreaLen,omitempty"`
	Enabled     *string `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	KeyType     *int64  `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
	LastChange  *string `json:"LastChange,omitempty" xml:"LastChange,omitempty"`
	SecretKey   *string `json:"SecretKey,omitempty" xml:"SecretKey,omitempty"`
}

func (s ControlAiotDeviceRequestMiFareCard) String() string {
	return tea.Prettify(s)
}

func (s ControlAiotDeviceRequestMiFareCard) GoString() string {
	return s.String()
}

func (s *ControlAiotDeviceRequestMiFareCard) SetAreaCode(v int64) *ControlAiotDeviceRequestMiFareCard {
	s.AreaCode = &v
	return s
}

func (s *ControlAiotDeviceRequestMiFareCard) SetAreaDeviate(v int64) *ControlAiotDeviceRequestMiFareCard {
	s.AreaDeviate = &v
	return s
}

func (s *ControlAiotDeviceRequestMiFareCard) SetAreaLen(v int64) *ControlAiotDeviceRequestMiFareCard {
	s.AreaLen = &v
	return s
}

func (s *ControlAiotDeviceRequestMiFareCard) SetEnabled(v string) *ControlAiotDeviceRequestMiFareCard {
	s.Enabled = &v
	return s
}

func (s *ControlAiotDeviceRequestMiFareCard) SetKeyType(v int64) *ControlAiotDeviceRequestMiFareCard {
	s.KeyType = &v
	return s
}

func (s *ControlAiotDeviceRequestMiFareCard) SetLastChange(v string) *ControlAiotDeviceRequestMiFareCard {
	s.LastChange = &v
	return s
}

func (s *ControlAiotDeviceRequestMiFareCard) SetSecretKey(v string) *ControlAiotDeviceRequestMiFareCard {
	s.SecretKey = &v
	return s
}

type ControlAiotDeviceResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ControlAiotDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ControlAiotDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *ControlAiotDeviceResponseBody) SetCode(v string) *ControlAiotDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *ControlAiotDeviceResponseBody) SetMessage(v string) *ControlAiotDeviceResponseBody {
	s.Message = &v
	return s
}

func (s *ControlAiotDeviceResponseBody) SetRequestId(v string) *ControlAiotDeviceResponseBody {
	s.RequestId = &v
	return s
}

type ControlAiotDeviceResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ControlAiotDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ControlAiotDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s ControlAiotDeviceResponse) GoString() string {
	return s.String()
}

func (s *ControlAiotDeviceResponse) SetHeaders(v map[string]*string) *ControlAiotDeviceResponse {
	s.Headers = v
	return s
}

func (s *ControlAiotDeviceResponse) SetBody(v *ControlAiotDeviceResponseBody) *ControlAiotDeviceResponse {
	s.Body = v
	return s
}

type CreateAIInstanceRequest struct {
	// 算子Id
	AlgorithmId *string `json:"AlgorithmId,omitempty" xml:"AlgorithmId,omitempty"`
	// 算法名称
	AlgorithmName *string `json:"AlgorithmName,omitempty" xml:"AlgorithmName,omitempty"`
	// 计算类型
	ComputeType *string `json:"ComputeType,omitempty" xml:"ComputeType,omitempty"`
	// 数据来源
	DataSource *string `json:"DataSource,omitempty" xml:"DataSource,omitempty"`
	// 数据类型
	DataType *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	// 实例名称
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// 所属项目Id
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// ScheduleType为EVERY_WEEK、EVERY_MONTH时必填
	ScheduleCycleDates []*int64 `json:"ScheduleCycleDates,omitempty" xml:"ScheduleCycleDates,omitempty" type:"Repeated"`
	// 执行时间段，支持多段，指定多段时不能重合交错。
	ScheduleTimes []*CreateAIInstanceRequestScheduleTimes `json:"ScheduleTimes,omitempty" xml:"ScheduleTimes,omitempty" type:"Repeated"`
	// 调度类型
	ScheduleType *string `json:"ScheduleType,omitempty" xml:"ScheduleType,omitempty"`
	// 多少秒抽取1帧，取值范围[0, 3600]。 0表示不抽帧。
	Spf *int64 `json:"Spf,omitempty" xml:"Spf,omitempty"`
}

func (s CreateAIInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAIInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateAIInstanceRequest) SetAlgorithmId(v string) *CreateAIInstanceRequest {
	s.AlgorithmId = &v
	return s
}

func (s *CreateAIInstanceRequest) SetAlgorithmName(v string) *CreateAIInstanceRequest {
	s.AlgorithmName = &v
	return s
}

func (s *CreateAIInstanceRequest) SetComputeType(v string) *CreateAIInstanceRequest {
	s.ComputeType = &v
	return s
}

func (s *CreateAIInstanceRequest) SetDataSource(v string) *CreateAIInstanceRequest {
	s.DataSource = &v
	return s
}

func (s *CreateAIInstanceRequest) SetDataType(v string) *CreateAIInstanceRequest {
	s.DataType = &v
	return s
}

func (s *CreateAIInstanceRequest) SetInstanceName(v string) *CreateAIInstanceRequest {
	s.InstanceName = &v
	return s
}

func (s *CreateAIInstanceRequest) SetProjectId(v string) *CreateAIInstanceRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateAIInstanceRequest) SetScheduleCycleDates(v []*int64) *CreateAIInstanceRequest {
	s.ScheduleCycleDates = v
	return s
}

func (s *CreateAIInstanceRequest) SetScheduleTimes(v []*CreateAIInstanceRequestScheduleTimes) *CreateAIInstanceRequest {
	s.ScheduleTimes = v
	return s
}

func (s *CreateAIInstanceRequest) SetScheduleType(v string) *CreateAIInstanceRequest {
	s.ScheduleType = &v
	return s
}

func (s *CreateAIInstanceRequest) SetSpf(v int64) *CreateAIInstanceRequest {
	s.Spf = &v
	return s
}

type CreateAIInstanceRequestScheduleTimes struct {
	// 结束执行时间
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// 开始执行时间
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s CreateAIInstanceRequestScheduleTimes) String() string {
	return tea.Prettify(s)
}

func (s CreateAIInstanceRequestScheduleTimes) GoString() string {
	return s.String()
}

func (s *CreateAIInstanceRequestScheduleTimes) SetEndTime(v string) *CreateAIInstanceRequestScheduleTimes {
	s.EndTime = &v
	return s
}

func (s *CreateAIInstanceRequestScheduleTimes) SetStartTime(v string) *CreateAIInstanceRequestScheduleTimes {
	s.StartTime = &v
	return s
}

type CreateAIInstanceShrinkRequest struct {
	// 算子Id
	AlgorithmId *string `json:"AlgorithmId,omitempty" xml:"AlgorithmId,omitempty"`
	// 算法名称
	AlgorithmName *string `json:"AlgorithmName,omitempty" xml:"AlgorithmName,omitempty"`
	// 计算类型
	ComputeType *string `json:"ComputeType,omitempty" xml:"ComputeType,omitempty"`
	// 数据来源
	DataSource *string `json:"DataSource,omitempty" xml:"DataSource,omitempty"`
	// 数据类型
	DataType *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	// 实例名称
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// 所属项目Id
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// ScheduleType为EVERY_WEEK、EVERY_MONTH时必填
	ScheduleCycleDatesShrink *string `json:"ScheduleCycleDates,omitempty" xml:"ScheduleCycleDates,omitempty"`
	// 执行时间段，支持多段，指定多段时不能重合交错。
	ScheduleTimesShrink *string `json:"ScheduleTimes,omitempty" xml:"ScheduleTimes,omitempty"`
	// 调度类型
	ScheduleType *string `json:"ScheduleType,omitempty" xml:"ScheduleType,omitempty"`
	// 多少秒抽取1帧，取值范围[0, 3600]。 0表示不抽帧。
	Spf *int64 `json:"Spf,omitempty" xml:"Spf,omitempty"`
}

func (s CreateAIInstanceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAIInstanceShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateAIInstanceShrinkRequest) SetAlgorithmId(v string) *CreateAIInstanceShrinkRequest {
	s.AlgorithmId = &v
	return s
}

func (s *CreateAIInstanceShrinkRequest) SetAlgorithmName(v string) *CreateAIInstanceShrinkRequest {
	s.AlgorithmName = &v
	return s
}

func (s *CreateAIInstanceShrinkRequest) SetComputeType(v string) *CreateAIInstanceShrinkRequest {
	s.ComputeType = &v
	return s
}

func (s *CreateAIInstanceShrinkRequest) SetDataSource(v string) *CreateAIInstanceShrinkRequest {
	s.DataSource = &v
	return s
}

func (s *CreateAIInstanceShrinkRequest) SetDataType(v string) *CreateAIInstanceShrinkRequest {
	s.DataType = &v
	return s
}

func (s *CreateAIInstanceShrinkRequest) SetInstanceName(v string) *CreateAIInstanceShrinkRequest {
	s.InstanceName = &v
	return s
}

func (s *CreateAIInstanceShrinkRequest) SetProjectId(v string) *CreateAIInstanceShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateAIInstanceShrinkRequest) SetScheduleCycleDatesShrink(v string) *CreateAIInstanceShrinkRequest {
	s.ScheduleCycleDatesShrink = &v
	return s
}

func (s *CreateAIInstanceShrinkRequest) SetScheduleTimesShrink(v string) *CreateAIInstanceShrinkRequest {
	s.ScheduleTimesShrink = &v
	return s
}

func (s *CreateAIInstanceShrinkRequest) SetScheduleType(v string) *CreateAIInstanceShrinkRequest {
	s.ScheduleType = &v
	return s
}

func (s *CreateAIInstanceShrinkRequest) SetSpf(v int64) *CreateAIInstanceShrinkRequest {
	s.Spf = &v
	return s
}

type CreateAIInstanceResponseBody struct {
	// 返回code码
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// 返回数据
	Data *CreateAIInstanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// 错误信息
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// 请求id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateAIInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAIInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAIInstanceResponseBody) SetCode(v string) *CreateAIInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *CreateAIInstanceResponseBody) SetData(v *CreateAIInstanceResponseBodyData) *CreateAIInstanceResponseBody {
	s.Data = v
	return s
}

func (s *CreateAIInstanceResponseBody) SetMessage(v string) *CreateAIInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *CreateAIInstanceResponseBody) SetRequestId(v string) *CreateAIInstanceResponseBody {
	s.RequestId = &v
	return s
}

type CreateAIInstanceResponseBodyData struct {
	// 当前实例ACU使用量
	AcuUsed *int64 `json:"AcuUsed,omitempty" xml:"AcuUsed,omitempty"`
	// 实例Id
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s CreateAIInstanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateAIInstanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateAIInstanceResponseBodyData) SetAcuUsed(v int64) *CreateAIInstanceResponseBodyData {
	s.AcuUsed = &v
	return s
}

func (s *CreateAIInstanceResponseBodyData) SetInstanceId(v string) *CreateAIInstanceResponseBodyData {
	s.InstanceId = &v
	return s
}

type CreateAIInstanceResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateAIInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateAIInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAIInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateAIInstanceResponse) SetHeaders(v map[string]*string) *CreateAIInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateAIInstanceResponse) SetBody(v *CreateAIInstanceResponseBody) *CreateAIInstanceResponse {
	s.Body = v
	return s
}

type CreateComputeInstanceRequest struct {
	AcuUsed              *int64                                    `json:"AcuUsed,omitempty" xml:"AcuUsed,omitempty"`
	AlgorithmType        *string                                   `json:"AlgorithmType,omitempty" xml:"AlgorithmType,omitempty"`
	Algorithms           []*CreateComputeInstanceRequestAlgorithms `json:"Algorithms,omitempty" xml:"Algorithms,omitempty" type:"Repeated"`
	ComputePictureType   *string                                   `json:"ComputePictureType,omitempty" xml:"ComputePictureType,omitempty"`
	ComputePictureValue  *string                                   `json:"ComputePictureValue,omitempty" xml:"ComputePictureValue,omitempty"`
	DatasourceType       *string                                   `json:"DatasourceType,omitempty" xml:"DatasourceType,omitempty"`
	Devices              []*CreateComputeInstanceRequestDevices    `json:"Devices,omitempty" xml:"Devices,omitempty" type:"Repeated"`
	InstanceName         *string                                   `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	IsFrameExtraction    *string                                   `json:"IsFrameExtraction,omitempty" xml:"IsFrameExtraction,omitempty"`
	IsPolling            *bool                                     `json:"IsPolling,omitempty" xml:"IsPolling,omitempty"`
	OverallExecutionTime *string                                   `json:"OverallExecutionTime,omitempty" xml:"OverallExecutionTime,omitempty"`
	PicTopic             *string                                   `json:"PicTopic,omitempty" xml:"PicTopic,omitempty"`
	PicType              *string                                   `json:"PicType,omitempty" xml:"PicType,omitempty"`
	PollingConfigs       *string                                   `json:"PollingConfigs,omitempty" xml:"PollingConfigs,omitempty"`
	ProjectId            *string                                   `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ScheduleCycleDate    *string                                   `json:"ScheduleCycleDate,omitempty" xml:"ScheduleCycleDate,omitempty"`
	ScheduleDay          *string                                   `json:"ScheduleDay,omitempty" xml:"ScheduleDay,omitempty"`
	ScheduleDaySize      *string                                   `json:"ScheduleDaySize,omitempty" xml:"ScheduleDaySize,omitempty"`
	ScheduleTimes        *string                                   `json:"ScheduleTimes,omitempty" xml:"ScheduleTimes,omitempty"`
	ScheduleType         *string                                   `json:"ScheduleType,omitempty" xml:"ScheduleType,omitempty"`
	SliceExecutionTime   *string                                   `json:"SliceExecutionTime,omitempty" xml:"SliceExecutionTime,omitempty"`
	StorageUsed          *string                                   `json:"StorageUsed,omitempty" xml:"StorageUsed,omitempty"`
}

func (s CreateComputeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateComputeInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateComputeInstanceRequest) SetAcuUsed(v int64) *CreateComputeInstanceRequest {
	s.AcuUsed = &v
	return s
}

func (s *CreateComputeInstanceRequest) SetAlgorithmType(v string) *CreateComputeInstanceRequest {
	s.AlgorithmType = &v
	return s
}

func (s *CreateComputeInstanceRequest) SetAlgorithms(v []*CreateComputeInstanceRequestAlgorithms) *CreateComputeInstanceRequest {
	s.Algorithms = v
	return s
}

func (s *CreateComputeInstanceRequest) SetComputePictureType(v string) *CreateComputeInstanceRequest {
	s.ComputePictureType = &v
	return s
}

func (s *CreateComputeInstanceRequest) SetComputePictureValue(v string) *CreateComputeInstanceRequest {
	s.ComputePictureValue = &v
	return s
}

func (s *CreateComputeInstanceRequest) SetDatasourceType(v string) *CreateComputeInstanceRequest {
	s.DatasourceType = &v
	return s
}

func (s *CreateComputeInstanceRequest) SetDevices(v []*CreateComputeInstanceRequestDevices) *CreateComputeInstanceRequest {
	s.Devices = v
	return s
}

func (s *CreateComputeInstanceRequest) SetInstanceName(v string) *CreateComputeInstanceRequest {
	s.InstanceName = &v
	return s
}

func (s *CreateComputeInstanceRequest) SetIsFrameExtraction(v string) *CreateComputeInstanceRequest {
	s.IsFrameExtraction = &v
	return s
}

func (s *CreateComputeInstanceRequest) SetIsPolling(v bool) *CreateComputeInstanceRequest {
	s.IsPolling = &v
	return s
}

func (s *CreateComputeInstanceRequest) SetOverallExecutionTime(v string) *CreateComputeInstanceRequest {
	s.OverallExecutionTime = &v
	return s
}

func (s *CreateComputeInstanceRequest) SetPicTopic(v string) *CreateComputeInstanceRequest {
	s.PicTopic = &v
	return s
}

func (s *CreateComputeInstanceRequest) SetPicType(v string) *CreateComputeInstanceRequest {
	s.PicType = &v
	return s
}

func (s *CreateComputeInstanceRequest) SetPollingConfigs(v string) *CreateComputeInstanceRequest {
	s.PollingConfigs = &v
	return s
}

func (s *CreateComputeInstanceRequest) SetProjectId(v string) *CreateComputeInstanceRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateComputeInstanceRequest) SetScheduleCycleDate(v string) *CreateComputeInstanceRequest {
	s.ScheduleCycleDate = &v
	return s
}

func (s *CreateComputeInstanceRequest) SetScheduleDay(v string) *CreateComputeInstanceRequest {
	s.ScheduleDay = &v
	return s
}

func (s *CreateComputeInstanceRequest) SetScheduleDaySize(v string) *CreateComputeInstanceRequest {
	s.ScheduleDaySize = &v
	return s
}

func (s *CreateComputeInstanceRequest) SetScheduleTimes(v string) *CreateComputeInstanceRequest {
	s.ScheduleTimes = &v
	return s
}

func (s *CreateComputeInstanceRequest) SetScheduleType(v string) *CreateComputeInstanceRequest {
	s.ScheduleType = &v
	return s
}

func (s *CreateComputeInstanceRequest) SetSliceExecutionTime(v string) *CreateComputeInstanceRequest {
	s.SliceExecutionTime = &v
	return s
}

func (s *CreateComputeInstanceRequest) SetStorageUsed(v string) *CreateComputeInstanceRequest {
	s.StorageUsed = &v
	return s
}

type CreateComputeInstanceRequestAlgorithms struct {
	AlgorithmId   *string `json:"AlgorithmId,omitempty" xml:"AlgorithmId,omitempty"`
	AlgorithmName *string `json:"AlgorithmName,omitempty" xml:"AlgorithmName,omitempty"`
}

func (s CreateComputeInstanceRequestAlgorithms) String() string {
	return tea.Prettify(s)
}

func (s CreateComputeInstanceRequestAlgorithms) GoString() string {
	return s.String()
}

func (s *CreateComputeInstanceRequestAlgorithms) SetAlgorithmId(v string) *CreateComputeInstanceRequestAlgorithms {
	s.AlgorithmId = &v
	return s
}

func (s *CreateComputeInstanceRequestAlgorithms) SetAlgorithmName(v string) *CreateComputeInstanceRequestAlgorithms {
	s.AlgorithmName = &v
	return s
}

type CreateComputeInstanceRequestDevices struct {
	BitRate        *string `json:"BitRate,omitempty" xml:"BitRate,omitempty"`
	CodingFormat   *string `json:"CodingFormat,omitempty" xml:"CodingFormat,omitempty"`
	DeviceId       *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResolvingPower *string `json:"ResolvingPower,omitempty" xml:"ResolvingPower,omitempty"`
	StartStream    *bool   `json:"StartStream,omitempty" xml:"StartStream,omitempty"`
}

func (s CreateComputeInstanceRequestDevices) String() string {
	return tea.Prettify(s)
}

func (s CreateComputeInstanceRequestDevices) GoString() string {
	return s.String()
}

func (s *CreateComputeInstanceRequestDevices) SetBitRate(v string) *CreateComputeInstanceRequestDevices {
	s.BitRate = &v
	return s
}

func (s *CreateComputeInstanceRequestDevices) SetCodingFormat(v string) *CreateComputeInstanceRequestDevices {
	s.CodingFormat = &v
	return s
}

func (s *CreateComputeInstanceRequestDevices) SetDeviceId(v string) *CreateComputeInstanceRequestDevices {
	s.DeviceId = &v
	return s
}

func (s *CreateComputeInstanceRequestDevices) SetRegionId(v string) *CreateComputeInstanceRequestDevices {
	s.RegionId = &v
	return s
}

func (s *CreateComputeInstanceRequestDevices) SetResolvingPower(v string) *CreateComputeInstanceRequestDevices {
	s.ResolvingPower = &v
	return s
}

func (s *CreateComputeInstanceRequestDevices) SetStartStream(v bool) *CreateComputeInstanceRequestDevices {
	s.StartStream = &v
	return s
}

type CreateComputeInstanceShrinkRequest struct {
	AcuUsed              *int64  `json:"AcuUsed,omitempty" xml:"AcuUsed,omitempty"`
	AlgorithmType        *string `json:"AlgorithmType,omitempty" xml:"AlgorithmType,omitempty"`
	AlgorithmsShrink     *string `json:"Algorithms,omitempty" xml:"Algorithms,omitempty"`
	ComputePictureType   *string `json:"ComputePictureType,omitempty" xml:"ComputePictureType,omitempty"`
	ComputePictureValue  *string `json:"ComputePictureValue,omitempty" xml:"ComputePictureValue,omitempty"`
	DatasourceType       *string `json:"DatasourceType,omitempty" xml:"DatasourceType,omitempty"`
	DevicesShrink        *string `json:"Devices,omitempty" xml:"Devices,omitempty"`
	InstanceName         *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	IsFrameExtraction    *string `json:"IsFrameExtraction,omitempty" xml:"IsFrameExtraction,omitempty"`
	IsPolling            *bool   `json:"IsPolling,omitempty" xml:"IsPolling,omitempty"`
	OverallExecutionTime *string `json:"OverallExecutionTime,omitempty" xml:"OverallExecutionTime,omitempty"`
	PicTopic             *string `json:"PicTopic,omitempty" xml:"PicTopic,omitempty"`
	PicType              *string `json:"PicType,omitempty" xml:"PicType,omitempty"`
	PollingConfigs       *string `json:"PollingConfigs,omitempty" xml:"PollingConfigs,omitempty"`
	ProjectId            *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ScheduleCycleDate    *string `json:"ScheduleCycleDate,omitempty" xml:"ScheduleCycleDate,omitempty"`
	ScheduleDay          *string `json:"ScheduleDay,omitempty" xml:"ScheduleDay,omitempty"`
	ScheduleDaySize      *string `json:"ScheduleDaySize,omitempty" xml:"ScheduleDaySize,omitempty"`
	ScheduleTimes        *string `json:"ScheduleTimes,omitempty" xml:"ScheduleTimes,omitempty"`
	ScheduleType         *string `json:"ScheduleType,omitempty" xml:"ScheduleType,omitempty"`
	SliceExecutionTime   *string `json:"SliceExecutionTime,omitempty" xml:"SliceExecutionTime,omitempty"`
	StorageUsed          *string `json:"StorageUsed,omitempty" xml:"StorageUsed,omitempty"`
}

func (s CreateComputeInstanceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateComputeInstanceShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateComputeInstanceShrinkRequest) SetAcuUsed(v int64) *CreateComputeInstanceShrinkRequest {
	s.AcuUsed = &v
	return s
}

func (s *CreateComputeInstanceShrinkRequest) SetAlgorithmType(v string) *CreateComputeInstanceShrinkRequest {
	s.AlgorithmType = &v
	return s
}

func (s *CreateComputeInstanceShrinkRequest) SetAlgorithmsShrink(v string) *CreateComputeInstanceShrinkRequest {
	s.AlgorithmsShrink = &v
	return s
}

func (s *CreateComputeInstanceShrinkRequest) SetComputePictureType(v string) *CreateComputeInstanceShrinkRequest {
	s.ComputePictureType = &v
	return s
}

func (s *CreateComputeInstanceShrinkRequest) SetComputePictureValue(v string) *CreateComputeInstanceShrinkRequest {
	s.ComputePictureValue = &v
	return s
}

func (s *CreateComputeInstanceShrinkRequest) SetDatasourceType(v string) *CreateComputeInstanceShrinkRequest {
	s.DatasourceType = &v
	return s
}

func (s *CreateComputeInstanceShrinkRequest) SetDevicesShrink(v string) *CreateComputeInstanceShrinkRequest {
	s.DevicesShrink = &v
	return s
}

func (s *CreateComputeInstanceShrinkRequest) SetInstanceName(v string) *CreateComputeInstanceShrinkRequest {
	s.InstanceName = &v
	return s
}

func (s *CreateComputeInstanceShrinkRequest) SetIsFrameExtraction(v string) *CreateComputeInstanceShrinkRequest {
	s.IsFrameExtraction = &v
	return s
}

func (s *CreateComputeInstanceShrinkRequest) SetIsPolling(v bool) *CreateComputeInstanceShrinkRequest {
	s.IsPolling = &v
	return s
}

func (s *CreateComputeInstanceShrinkRequest) SetOverallExecutionTime(v string) *CreateComputeInstanceShrinkRequest {
	s.OverallExecutionTime = &v
	return s
}

func (s *CreateComputeInstanceShrinkRequest) SetPicTopic(v string) *CreateComputeInstanceShrinkRequest {
	s.PicTopic = &v
	return s
}

func (s *CreateComputeInstanceShrinkRequest) SetPicType(v string) *CreateComputeInstanceShrinkRequest {
	s.PicType = &v
	return s
}

func (s *CreateComputeInstanceShrinkRequest) SetPollingConfigs(v string) *CreateComputeInstanceShrinkRequest {
	s.PollingConfigs = &v
	return s
}

func (s *CreateComputeInstanceShrinkRequest) SetProjectId(v string) *CreateComputeInstanceShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateComputeInstanceShrinkRequest) SetScheduleCycleDate(v string) *CreateComputeInstanceShrinkRequest {
	s.ScheduleCycleDate = &v
	return s
}

func (s *CreateComputeInstanceShrinkRequest) SetScheduleDay(v string) *CreateComputeInstanceShrinkRequest {
	s.ScheduleDay = &v
	return s
}

func (s *CreateComputeInstanceShrinkRequest) SetScheduleDaySize(v string) *CreateComputeInstanceShrinkRequest {
	s.ScheduleDaySize = &v
	return s
}

func (s *CreateComputeInstanceShrinkRequest) SetScheduleTimes(v string) *CreateComputeInstanceShrinkRequest {
	s.ScheduleTimes = &v
	return s
}

func (s *CreateComputeInstanceShrinkRequest) SetScheduleType(v string) *CreateComputeInstanceShrinkRequest {
	s.ScheduleType = &v
	return s
}

func (s *CreateComputeInstanceShrinkRequest) SetSliceExecutionTime(v string) *CreateComputeInstanceShrinkRequest {
	s.SliceExecutionTime = &v
	return s
}

func (s *CreateComputeInstanceShrinkRequest) SetStorageUsed(v string) *CreateComputeInstanceShrinkRequest {
	s.StorageUsed = &v
	return s
}

type CreateComputeInstanceResponseBody struct {
	Code      *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *CreateComputeInstanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateComputeInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateComputeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateComputeInstanceResponseBody) SetCode(v string) *CreateComputeInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *CreateComputeInstanceResponseBody) SetData(v *CreateComputeInstanceResponseBodyData) *CreateComputeInstanceResponseBody {
	s.Data = v
	return s
}

func (s *CreateComputeInstanceResponseBody) SetMessage(v string) *CreateComputeInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *CreateComputeInstanceResponseBody) SetRequestId(v string) *CreateComputeInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateComputeInstanceResponseBody) SetSuccess(v bool) *CreateComputeInstanceResponseBody {
	s.Success = &v
	return s
}

type CreateComputeInstanceResponseBodyData struct {
	AcuUsed    *int64  `json:"AcuUsed,omitempty" xml:"AcuUsed,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s CreateComputeInstanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateComputeInstanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateComputeInstanceResponseBodyData) SetAcuUsed(v int64) *CreateComputeInstanceResponseBodyData {
	s.AcuUsed = &v
	return s
}

func (s *CreateComputeInstanceResponseBodyData) SetInstanceId(v string) *CreateComputeInstanceResponseBodyData {
	s.InstanceId = &v
	return s
}

type CreateComputeInstanceResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateComputeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateComputeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateComputeInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateComputeInstanceResponse) SetHeaders(v map[string]*string) *CreateComputeInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateComputeInstanceResponse) SetBody(v *CreateComputeInstanceResponseBody) *CreateComputeInstanceResponse {
	s.Body = v
	return s
}

type CreateCorpRequest struct {
	AlgorithmType *string `json:"AlgorithmType,omitempty" xml:"AlgorithmType,omitempty"`
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	CorpName      *string `json:"CorpName,omitempty" xml:"CorpName,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	IconPath      *string `json:"IconPath,omitempty" xml:"IconPath,omitempty"`
	IsvSubId      *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	ParentCorpId  *string `json:"ParentCorpId,omitempty" xml:"ParentCorpId,omitempty"`
}

func (s CreateCorpRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCorpRequest) GoString() string {
	return s.String()
}

func (s *CreateCorpRequest) SetAlgorithmType(v string) *CreateCorpRequest {
	s.AlgorithmType = &v
	return s
}

func (s *CreateCorpRequest) SetAppName(v string) *CreateCorpRequest {
	s.AppName = &v
	return s
}

func (s *CreateCorpRequest) SetCorpName(v string) *CreateCorpRequest {
	s.CorpName = &v
	return s
}

func (s *CreateCorpRequest) SetDescription(v string) *CreateCorpRequest {
	s.Description = &v
	return s
}

func (s *CreateCorpRequest) SetIconPath(v string) *CreateCorpRequest {
	s.IconPath = &v
	return s
}

func (s *CreateCorpRequest) SetIsvSubId(v string) *CreateCorpRequest {
	s.IsvSubId = &v
	return s
}

func (s *CreateCorpRequest) SetParentCorpId(v string) *CreateCorpRequest {
	s.ParentCorpId = &v
	return s
}

type CreateCorpResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	CorpId    *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateCorpResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCorpResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCorpResponseBody) SetCode(v string) *CreateCorpResponseBody {
	s.Code = &v
	return s
}

func (s *CreateCorpResponseBody) SetCorpId(v string) *CreateCorpResponseBody {
	s.CorpId = &v
	return s
}

func (s *CreateCorpResponseBody) SetMessage(v string) *CreateCorpResponseBody {
	s.Message = &v
	return s
}

func (s *CreateCorpResponseBody) SetRequestId(v string) *CreateCorpResponseBody {
	s.RequestId = &v
	return s
}

type CreateCorpResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateCorpResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateCorpResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCorpResponse) GoString() string {
	return s.String()
}

func (s *CreateCorpResponse) SetHeaders(v map[string]*string) *CreateCorpResponse {
	s.Headers = v
	return s
}

func (s *CreateCorpResponse) SetBody(v *CreateCorpResponseBody) *CreateCorpResponse {
	s.Body = v
	return s
}

type CreateCorpGroupRequest struct {
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	CorpId      *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	GroupId     *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s CreateCorpGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCorpGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateCorpGroupRequest) SetClientToken(v string) *CreateCorpGroupRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateCorpGroupRequest) SetCorpId(v string) *CreateCorpGroupRequest {
	s.CorpId = &v
	return s
}

func (s *CreateCorpGroupRequest) SetGroupId(v string) *CreateCorpGroupRequest {
	s.GroupId = &v
	return s
}

type CreateCorpGroupResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateCorpGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCorpGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCorpGroupResponseBody) SetCode(v string) *CreateCorpGroupResponseBody {
	s.Code = &v
	return s
}

func (s *CreateCorpGroupResponseBody) SetMessage(v string) *CreateCorpGroupResponseBody {
	s.Message = &v
	return s
}

func (s *CreateCorpGroupResponseBody) SetRequestId(v string) *CreateCorpGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCorpGroupResponseBody) SetSuccess(v bool) *CreateCorpGroupResponseBody {
	s.Success = &v
	return s
}

type CreateCorpGroupResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateCorpGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateCorpGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCorpGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateCorpGroupResponse) SetHeaders(v map[string]*string) *CreateCorpGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateCorpGroupResponse) SetBody(v *CreateCorpGroupResponseBody) *CreateCorpGroupResponse {
	s.Body = v
	return s
}

type CreateDeviceRequest struct {
	ActivateCode     *string `json:"ActivateCode,omitempty" xml:"ActivateCode,omitempty"`
	AudioEnable      *string `json:"AudioEnable,omitempty" xml:"AudioEnable,omitempty"`
	CityCode         *string `json:"CityCode,omitempty" xml:"CityCode,omitempty"`
	CorpId           *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DataSourceType   *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	DeviceAddress    *string `json:"DeviceAddress,omitempty" xml:"DeviceAddress,omitempty"`
	DeviceDirection  *string `json:"DeviceDirection,omitempty" xml:"DeviceDirection,omitempty"`
	DeviceId         *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	DeviceModel      *string `json:"DeviceModel,omitempty" xml:"DeviceModel,omitempty"`
	DeviceName       *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DeviceRate       *string `json:"DeviceRate,omitempty" xml:"DeviceRate,omitempty"`
	DeviceResolution *string `json:"DeviceResolution,omitempty" xml:"DeviceResolution,omitempty"`
	DeviceSite       *string `json:"DeviceSite,omitempty" xml:"DeviceSite,omitempty"`
	DeviceSn         *string `json:"DeviceSn,omitempty" xml:"DeviceSn,omitempty"`
	DeviceType       *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	EncodeFormat     *string `json:"EncodeFormat,omitempty" xml:"EncodeFormat,omitempty"`
	FrameRate        *string `json:"FrameRate,omitempty" xml:"FrameRate,omitempty"`
	GovLength        *string `json:"GovLength,omitempty" xml:"GovLength,omitempty"`
	InProtocol       *string `json:"InProtocol,omitempty" xml:"InProtocol,omitempty"`
	Latitude         *string `json:"Latitude,omitempty" xml:"Latitude,omitempty"`
	Longitude        *string `json:"Longitude,omitempty" xml:"Longitude,omitempty"`
	OSDTimeEnable    *string `json:"OSDTimeEnable,omitempty" xml:"OSDTimeEnable,omitempty"`
	OSDTimeType      *string `json:"OSDTimeType,omitempty" xml:"OSDTimeType,omitempty"`
	OSDTimeX         *string `json:"OSDTimeX,omitempty" xml:"OSDTimeX,omitempty"`
	OSDTimeY         *string `json:"OSDTimeY,omitempty" xml:"OSDTimeY,omitempty"`
	ParentDeviceId   *string `json:"ParentDeviceId,omitempty" xml:"ParentDeviceId,omitempty"`
	SubDeviceCount   *int64  `json:"SubDeviceCount,omitempty" xml:"SubDeviceCount,omitempty"`
	SubDeviceIdList  *string `json:"SubDeviceIdList,omitempty" xml:"SubDeviceIdList,omitempty"`
	Vendor           *string `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s CreateDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDeviceRequest) GoString() string {
	return s.String()
}

func (s *CreateDeviceRequest) SetActivateCode(v string) *CreateDeviceRequest {
	s.ActivateCode = &v
	return s
}

func (s *CreateDeviceRequest) SetAudioEnable(v string) *CreateDeviceRequest {
	s.AudioEnable = &v
	return s
}

func (s *CreateDeviceRequest) SetCityCode(v string) *CreateDeviceRequest {
	s.CityCode = &v
	return s
}

func (s *CreateDeviceRequest) SetCorpId(v string) *CreateDeviceRequest {
	s.CorpId = &v
	return s
}

func (s *CreateDeviceRequest) SetDataSourceType(v string) *CreateDeviceRequest {
	s.DataSourceType = &v
	return s
}

func (s *CreateDeviceRequest) SetDeviceAddress(v string) *CreateDeviceRequest {
	s.DeviceAddress = &v
	return s
}

func (s *CreateDeviceRequest) SetDeviceDirection(v string) *CreateDeviceRequest {
	s.DeviceDirection = &v
	return s
}

func (s *CreateDeviceRequest) SetDeviceId(v string) *CreateDeviceRequest {
	s.DeviceId = &v
	return s
}

func (s *CreateDeviceRequest) SetDeviceModel(v string) *CreateDeviceRequest {
	s.DeviceModel = &v
	return s
}

func (s *CreateDeviceRequest) SetDeviceName(v string) *CreateDeviceRequest {
	s.DeviceName = &v
	return s
}

func (s *CreateDeviceRequest) SetDeviceRate(v string) *CreateDeviceRequest {
	s.DeviceRate = &v
	return s
}

func (s *CreateDeviceRequest) SetDeviceResolution(v string) *CreateDeviceRequest {
	s.DeviceResolution = &v
	return s
}

func (s *CreateDeviceRequest) SetDeviceSite(v string) *CreateDeviceRequest {
	s.DeviceSite = &v
	return s
}

func (s *CreateDeviceRequest) SetDeviceSn(v string) *CreateDeviceRequest {
	s.DeviceSn = &v
	return s
}

func (s *CreateDeviceRequest) SetDeviceType(v string) *CreateDeviceRequest {
	s.DeviceType = &v
	return s
}

func (s *CreateDeviceRequest) SetEncodeFormat(v string) *CreateDeviceRequest {
	s.EncodeFormat = &v
	return s
}

func (s *CreateDeviceRequest) SetFrameRate(v string) *CreateDeviceRequest {
	s.FrameRate = &v
	return s
}

func (s *CreateDeviceRequest) SetGovLength(v string) *CreateDeviceRequest {
	s.GovLength = &v
	return s
}

func (s *CreateDeviceRequest) SetInProtocol(v string) *CreateDeviceRequest {
	s.InProtocol = &v
	return s
}

func (s *CreateDeviceRequest) SetLatitude(v string) *CreateDeviceRequest {
	s.Latitude = &v
	return s
}

func (s *CreateDeviceRequest) SetLongitude(v string) *CreateDeviceRequest {
	s.Longitude = &v
	return s
}

func (s *CreateDeviceRequest) SetOSDTimeEnable(v string) *CreateDeviceRequest {
	s.OSDTimeEnable = &v
	return s
}

func (s *CreateDeviceRequest) SetOSDTimeType(v string) *CreateDeviceRequest {
	s.OSDTimeType = &v
	return s
}

func (s *CreateDeviceRequest) SetOSDTimeX(v string) *CreateDeviceRequest {
	s.OSDTimeX = &v
	return s
}

func (s *CreateDeviceRequest) SetOSDTimeY(v string) *CreateDeviceRequest {
	s.OSDTimeY = &v
	return s
}

func (s *CreateDeviceRequest) SetParentDeviceId(v string) *CreateDeviceRequest {
	s.ParentDeviceId = &v
	return s
}

func (s *CreateDeviceRequest) SetSubDeviceCount(v int64) *CreateDeviceRequest {
	s.SubDeviceCount = &v
	return s
}

func (s *CreateDeviceRequest) SetSubDeviceIdList(v string) *CreateDeviceRequest {
	s.SubDeviceIdList = &v
	return s
}

func (s *CreateDeviceRequest) SetVendor(v string) *CreateDeviceRequest {
	s.Vendor = &v
	return s
}

type CreateDeviceResponseBody struct {
	Code      *string                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *CreateDeviceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                       `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDeviceResponseBody) SetCode(v string) *CreateDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *CreateDeviceResponseBody) SetData(v *CreateDeviceResponseBodyData) *CreateDeviceResponseBody {
	s.Data = v
	return s
}

func (s *CreateDeviceResponseBody) SetMessage(v string) *CreateDeviceResponseBody {
	s.Message = &v
	return s
}

func (s *CreateDeviceResponseBody) SetRequestId(v string) *CreateDeviceResponseBody {
	s.RequestId = &v
	return s
}

type CreateDeviceResponseBodyData struct {
	DeviceId      *string                                      `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	Password      *string                                      `json:"Password,omitempty" xml:"Password,omitempty"`
	ServerId      *string                                      `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	ServerIp      *string                                      `json:"ServerIp,omitempty" xml:"ServerIp,omitempty"`
	ServerPort    *string                                      `json:"ServerPort,omitempty" xml:"ServerPort,omitempty"`
	ServerRealm   *string                                      `json:"ServerRealm,omitempty" xml:"ServerRealm,omitempty"`
	SubDeviceInfo []*CreateDeviceResponseBodyDataSubDeviceInfo `json:"SubDeviceInfo,omitempty" xml:"SubDeviceInfo,omitempty" type:"Repeated"`
}

func (s CreateDeviceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateDeviceResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateDeviceResponseBodyData) SetDeviceId(v string) *CreateDeviceResponseBodyData {
	s.DeviceId = &v
	return s
}

func (s *CreateDeviceResponseBodyData) SetPassword(v string) *CreateDeviceResponseBodyData {
	s.Password = &v
	return s
}

func (s *CreateDeviceResponseBodyData) SetServerId(v string) *CreateDeviceResponseBodyData {
	s.ServerId = &v
	return s
}

func (s *CreateDeviceResponseBodyData) SetServerIp(v string) *CreateDeviceResponseBodyData {
	s.ServerIp = &v
	return s
}

func (s *CreateDeviceResponseBodyData) SetServerPort(v string) *CreateDeviceResponseBodyData {
	s.ServerPort = &v
	return s
}

func (s *CreateDeviceResponseBodyData) SetServerRealm(v string) *CreateDeviceResponseBodyData {
	s.ServerRealm = &v
	return s
}

func (s *CreateDeviceResponseBodyData) SetSubDeviceInfo(v []*CreateDeviceResponseBodyDataSubDeviceInfo) *CreateDeviceResponseBodyData {
	s.SubDeviceInfo = v
	return s
}

type CreateDeviceResponseBodyDataSubDeviceInfo struct {
	SubDeviceId *string `json:"SubDeviceId,omitempty" xml:"SubDeviceId,omitempty"`
}

func (s CreateDeviceResponseBodyDataSubDeviceInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateDeviceResponseBodyDataSubDeviceInfo) GoString() string {
	return s.String()
}

func (s *CreateDeviceResponseBodyDataSubDeviceInfo) SetSubDeviceId(v string) *CreateDeviceResponseBodyDataSubDeviceInfo {
	s.SubDeviceId = &v
	return s
}

type CreateDeviceResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDeviceResponse) GoString() string {
	return s.String()
}

func (s *CreateDeviceResponse) SetHeaders(v map[string]*string) *CreateDeviceResponse {
	s.Headers = v
	return s
}

func (s *CreateDeviceResponse) SetBody(v *CreateDeviceResponseBody) *CreateDeviceResponse {
	s.Body = v
	return s
}

type CreateModelServiceRequest struct {
	AlgorithmCode *string `json:"AlgorithmCode,omitempty" xml:"AlgorithmCode,omitempty"`
	ClientToken   *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	InstanceName  *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	QPSRequired   *int32  `json:"QPSRequired,omitempty" xml:"QPSRequired,omitempty"`
}

func (s CreateModelServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateModelServiceRequest) GoString() string {
	return s.String()
}

func (s *CreateModelServiceRequest) SetAlgorithmCode(v string) *CreateModelServiceRequest {
	s.AlgorithmCode = &v
	return s
}

func (s *CreateModelServiceRequest) SetClientToken(v string) *CreateModelServiceRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateModelServiceRequest) SetInstanceName(v string) *CreateModelServiceRequest {
	s.InstanceName = &v
	return s
}

func (s *CreateModelServiceRequest) SetQPSRequired(v int32) *CreateModelServiceRequest {
	s.QPSRequired = &v
	return s
}

type CreateModelServiceResponseBody struct {
	Code    *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *CreateModelServiceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateModelServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateModelServiceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateModelServiceResponseBody) SetCode(v string) *CreateModelServiceResponseBody {
	s.Code = &v
	return s
}

func (s *CreateModelServiceResponseBody) SetData(v *CreateModelServiceResponseBodyData) *CreateModelServiceResponseBody {
	s.Data = v
	return s
}

func (s *CreateModelServiceResponseBody) SetMessage(v string) *CreateModelServiceResponseBody {
	s.Message = &v
	return s
}

func (s *CreateModelServiceResponseBody) SetRequestId(v string) *CreateModelServiceResponseBody {
	s.RequestId = &v
	return s
}

type CreateModelServiceResponseBodyData struct {
	AppCode                *string                                           `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	ModelApiList           []*CreateModelServiceResponseBodyDataModelApiList `json:"ModelApiList,omitempty" xml:"ModelApiList,omitempty" type:"Repeated"`
	ModelServiceInstanceId *string                                           `json:"ModelServiceInstanceId,omitempty" xml:"ModelServiceInstanceId,omitempty"`
	ModelServiceStatus     *string                                           `json:"ModelServiceStatus,omitempty" xml:"ModelServiceStatus,omitempty"`
	QpsRequired            *int32                                            `json:"QpsRequired,omitempty" xml:"QpsRequired,omitempty"`
}

func (s CreateModelServiceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateModelServiceResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateModelServiceResponseBodyData) SetAppCode(v string) *CreateModelServiceResponseBodyData {
	s.AppCode = &v
	return s
}

func (s *CreateModelServiceResponseBodyData) SetModelApiList(v []*CreateModelServiceResponseBodyDataModelApiList) *CreateModelServiceResponseBodyData {
	s.ModelApiList = v
	return s
}

func (s *CreateModelServiceResponseBodyData) SetModelServiceInstanceId(v string) *CreateModelServiceResponseBodyData {
	s.ModelServiceInstanceId = &v
	return s
}

func (s *CreateModelServiceResponseBodyData) SetModelServiceStatus(v string) *CreateModelServiceResponseBodyData {
	s.ModelServiceStatus = &v
	return s
}

func (s *CreateModelServiceResponseBodyData) SetQpsRequired(v int32) *CreateModelServiceResponseBodyData {
	s.QpsRequired = &v
	return s
}

type CreateModelServiceResponseBodyDataModelApiList struct {
	AlgorithmApiCode *string `json:"AlgorithmApiCode,omitempty" xml:"AlgorithmApiCode,omitempty"`
	ApiId            *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ApiName          *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	ApiPath          *string `json:"ApiPath,omitempty" xml:"ApiPath,omitempty"`
	CreateTime       *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
}

func (s CreateModelServiceResponseBodyDataModelApiList) String() string {
	return tea.Prettify(s)
}

func (s CreateModelServiceResponseBodyDataModelApiList) GoString() string {
	return s.String()
}

func (s *CreateModelServiceResponseBodyDataModelApiList) SetAlgorithmApiCode(v string) *CreateModelServiceResponseBodyDataModelApiList {
	s.AlgorithmApiCode = &v
	return s
}

func (s *CreateModelServiceResponseBodyDataModelApiList) SetApiId(v string) *CreateModelServiceResponseBodyDataModelApiList {
	s.ApiId = &v
	return s
}

func (s *CreateModelServiceResponseBodyDataModelApiList) SetApiName(v string) *CreateModelServiceResponseBodyDataModelApiList {
	s.ApiName = &v
	return s
}

func (s *CreateModelServiceResponseBodyDataModelApiList) SetApiPath(v string) *CreateModelServiceResponseBodyDataModelApiList {
	s.ApiPath = &v
	return s
}

func (s *CreateModelServiceResponseBodyDataModelApiList) SetCreateTime(v string) *CreateModelServiceResponseBodyDataModelApiList {
	s.CreateTime = &v
	return s
}

type CreateModelServiceResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateModelServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateModelServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateModelServiceResponse) GoString() string {
	return s.String()
}

func (s *CreateModelServiceResponse) SetHeaders(v map[string]*string) *CreateModelServiceResponse {
	s.Headers = v
	return s
}

func (s *CreateModelServiceResponse) SetBody(v *CreateModelServiceResponseBody) *CreateModelServiceResponse {
	s.Body = v
	return s
}

type CreateNewDeviceRequest struct {
	CityCode       *string `json:"CityCode,omitempty" xml:"CityCode,omitempty"`
	CorpId         *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	DeviceAddress  *string `json:"DeviceAddress,omitempty" xml:"DeviceAddress,omitempty"`
	DeviceId       *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	DeviceModel    *string `json:"DeviceModel,omitempty" xml:"DeviceModel,omitempty"`
	DeviceName     *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DeviceType     *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	FilePath       *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	InProtocol     *string `json:"InProtocol,omitempty" xml:"InProtocol,omitempty"`
	Latitude       *string `json:"Latitude,omitempty" xml:"Latitude,omitempty"`
	Longitude      *string `json:"Longitude,omitempty" xml:"Longitude,omitempty"`
	SubDeviceCount *int64  `json:"SubDeviceCount,omitempty" xml:"SubDeviceCount,omitempty"`
	Vendor         *string `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s CreateNewDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNewDeviceRequest) GoString() string {
	return s.String()
}

func (s *CreateNewDeviceRequest) SetCityCode(v string) *CreateNewDeviceRequest {
	s.CityCode = &v
	return s
}

func (s *CreateNewDeviceRequest) SetCorpId(v string) *CreateNewDeviceRequest {
	s.CorpId = &v
	return s
}

func (s *CreateNewDeviceRequest) SetDataSourceType(v string) *CreateNewDeviceRequest {
	s.DataSourceType = &v
	return s
}

func (s *CreateNewDeviceRequest) SetDeviceAddress(v string) *CreateNewDeviceRequest {
	s.DeviceAddress = &v
	return s
}

func (s *CreateNewDeviceRequest) SetDeviceId(v string) *CreateNewDeviceRequest {
	s.DeviceId = &v
	return s
}

func (s *CreateNewDeviceRequest) SetDeviceModel(v string) *CreateNewDeviceRequest {
	s.DeviceModel = &v
	return s
}

func (s *CreateNewDeviceRequest) SetDeviceName(v string) *CreateNewDeviceRequest {
	s.DeviceName = &v
	return s
}

func (s *CreateNewDeviceRequest) SetDeviceType(v string) *CreateNewDeviceRequest {
	s.DeviceType = &v
	return s
}

func (s *CreateNewDeviceRequest) SetFilePath(v string) *CreateNewDeviceRequest {
	s.FilePath = &v
	return s
}

func (s *CreateNewDeviceRequest) SetInProtocol(v string) *CreateNewDeviceRequest {
	s.InProtocol = &v
	return s
}

func (s *CreateNewDeviceRequest) SetLatitude(v string) *CreateNewDeviceRequest {
	s.Latitude = &v
	return s
}

func (s *CreateNewDeviceRequest) SetLongitude(v string) *CreateNewDeviceRequest {
	s.Longitude = &v
	return s
}

func (s *CreateNewDeviceRequest) SetSubDeviceCount(v int64) *CreateNewDeviceRequest {
	s.SubDeviceCount = &v
	return s
}

func (s *CreateNewDeviceRequest) SetVendor(v string) *CreateNewDeviceRequest {
	s.Vendor = &v
	return s
}

type CreateNewDeviceResponseBody struct {
	Code      *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *CreateNewDeviceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                          `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateNewDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateNewDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateNewDeviceResponseBody) SetCode(v string) *CreateNewDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *CreateNewDeviceResponseBody) SetData(v *CreateNewDeviceResponseBodyData) *CreateNewDeviceResponseBody {
	s.Data = v
	return s
}

func (s *CreateNewDeviceResponseBody) SetMessage(v string) *CreateNewDeviceResponseBody {
	s.Message = &v
	return s
}

func (s *CreateNewDeviceResponseBody) SetRequestId(v string) *CreateNewDeviceResponseBody {
	s.RequestId = &v
	return s
}

type CreateNewDeviceResponseBodyData struct {
	DeviceId      *string                                         `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	Password      *string                                         `json:"Password,omitempty" xml:"Password,omitempty"`
	ServerId      *string                                         `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	ServerIp      *string                                         `json:"ServerIp,omitempty" xml:"ServerIp,omitempty"`
	ServerPort    *string                                         `json:"ServerPort,omitempty" xml:"ServerPort,omitempty"`
	SipRealm      *string                                         `json:"SipRealm,omitempty" xml:"SipRealm,omitempty"`
	SubDeviceInfo []*CreateNewDeviceResponseBodyDataSubDeviceInfo `json:"SubDeviceInfo,omitempty" xml:"SubDeviceInfo,omitempty" type:"Repeated"`
}

func (s CreateNewDeviceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateNewDeviceResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateNewDeviceResponseBodyData) SetDeviceId(v string) *CreateNewDeviceResponseBodyData {
	s.DeviceId = &v
	return s
}

func (s *CreateNewDeviceResponseBodyData) SetPassword(v string) *CreateNewDeviceResponseBodyData {
	s.Password = &v
	return s
}

func (s *CreateNewDeviceResponseBodyData) SetServerId(v string) *CreateNewDeviceResponseBodyData {
	s.ServerId = &v
	return s
}

func (s *CreateNewDeviceResponseBodyData) SetServerIp(v string) *CreateNewDeviceResponseBodyData {
	s.ServerIp = &v
	return s
}

func (s *CreateNewDeviceResponseBodyData) SetServerPort(v string) *CreateNewDeviceResponseBodyData {
	s.ServerPort = &v
	return s
}

func (s *CreateNewDeviceResponseBodyData) SetSipRealm(v string) *CreateNewDeviceResponseBodyData {
	s.SipRealm = &v
	return s
}

func (s *CreateNewDeviceResponseBodyData) SetSubDeviceInfo(v []*CreateNewDeviceResponseBodyDataSubDeviceInfo) *CreateNewDeviceResponseBodyData {
	s.SubDeviceInfo = v
	return s
}

type CreateNewDeviceResponseBodyDataSubDeviceInfo struct {
	ChannelDeviceId *string `json:"ChannelDeviceId,omitempty" xml:"ChannelDeviceId,omitempty"`
}

func (s CreateNewDeviceResponseBodyDataSubDeviceInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateNewDeviceResponseBodyDataSubDeviceInfo) GoString() string {
	return s.String()
}

func (s *CreateNewDeviceResponseBodyDataSubDeviceInfo) SetChannelDeviceId(v string) *CreateNewDeviceResponseBodyDataSubDeviceInfo {
	s.ChannelDeviceId = &v
	return s
}

type CreateNewDeviceResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateNewDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateNewDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNewDeviceResponse) GoString() string {
	return s.String()
}

func (s *CreateNewDeviceResponse) SetHeaders(v map[string]*string) *CreateNewDeviceResponse {
	s.Headers = v
	return s
}

func (s *CreateNewDeviceResponse) SetBody(v *CreateNewDeviceResponseBody) *CreateNewDeviceResponse {
	s.Body = v
	return s
}

type CreateScanDeviceRequest struct {
	AudioEnable      *string `json:"AudioEnable,omitempty" xml:"AudioEnable,omitempty"`
	CityCode         *string `json:"CityCode,omitempty" xml:"CityCode,omitempty"`
	CorpId           *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DataSourceType   *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	DeviceAddress    *string `json:"DeviceAddress,omitempty" xml:"DeviceAddress,omitempty"`
	DeviceDirection  *string `json:"DeviceDirection,omitempty" xml:"DeviceDirection,omitempty"`
	DeviceId         *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	DeviceModel      *string `json:"DeviceModel,omitempty" xml:"DeviceModel,omitempty"`
	DeviceName       *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DeviceRate       *string `json:"DeviceRate,omitempty" xml:"DeviceRate,omitempty"`
	DeviceResolution *string `json:"DeviceResolution,omitempty" xml:"DeviceResolution,omitempty"`
	DeviceSite       *string `json:"DeviceSite,omitempty" xml:"DeviceSite,omitempty"`
	DeviceSn         *string `json:"DeviceSn,omitempty" xml:"DeviceSn,omitempty"`
	DeviceType       *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	EncodeFormat     *string `json:"EncodeFormat,omitempty" xml:"EncodeFormat,omitempty"`
	FrameRate        *string `json:"FrameRate,omitempty" xml:"FrameRate,omitempty"`
	GovLength        *string `json:"GovLength,omitempty" xml:"GovLength,omitempty"`
	InProtocol       *string `json:"InProtocol,omitempty" xml:"InProtocol,omitempty"`
	Latitude         *string `json:"Latitude,omitempty" xml:"Latitude,omitempty"`
	Longitude        *string `json:"Longitude,omitempty" xml:"Longitude,omitempty"`
	OSDTimeEnable    *string `json:"OSDTimeEnable,omitempty" xml:"OSDTimeEnable,omitempty"`
	OSDTimeType      *string `json:"OSDTimeType,omitempty" xml:"OSDTimeType,omitempty"`
	OSDTimeX         *string `json:"OSDTimeX,omitempty" xml:"OSDTimeX,omitempty"`
	OSDTimeY         *string `json:"OSDTimeY,omitempty" xml:"OSDTimeY,omitempty"`
	SubDeviceCount   *int64  `json:"SubDeviceCount,omitempty" xml:"SubDeviceCount,omitempty"`
	Vendor           *string `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s CreateScanDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateScanDeviceRequest) GoString() string {
	return s.String()
}

func (s *CreateScanDeviceRequest) SetAudioEnable(v string) *CreateScanDeviceRequest {
	s.AudioEnable = &v
	return s
}

func (s *CreateScanDeviceRequest) SetCityCode(v string) *CreateScanDeviceRequest {
	s.CityCode = &v
	return s
}

func (s *CreateScanDeviceRequest) SetCorpId(v string) *CreateScanDeviceRequest {
	s.CorpId = &v
	return s
}

func (s *CreateScanDeviceRequest) SetDataSourceType(v string) *CreateScanDeviceRequest {
	s.DataSourceType = &v
	return s
}

func (s *CreateScanDeviceRequest) SetDeviceAddress(v string) *CreateScanDeviceRequest {
	s.DeviceAddress = &v
	return s
}

func (s *CreateScanDeviceRequest) SetDeviceDirection(v string) *CreateScanDeviceRequest {
	s.DeviceDirection = &v
	return s
}

func (s *CreateScanDeviceRequest) SetDeviceId(v string) *CreateScanDeviceRequest {
	s.DeviceId = &v
	return s
}

func (s *CreateScanDeviceRequest) SetDeviceModel(v string) *CreateScanDeviceRequest {
	s.DeviceModel = &v
	return s
}

func (s *CreateScanDeviceRequest) SetDeviceName(v string) *CreateScanDeviceRequest {
	s.DeviceName = &v
	return s
}

func (s *CreateScanDeviceRequest) SetDeviceRate(v string) *CreateScanDeviceRequest {
	s.DeviceRate = &v
	return s
}

func (s *CreateScanDeviceRequest) SetDeviceResolution(v string) *CreateScanDeviceRequest {
	s.DeviceResolution = &v
	return s
}

func (s *CreateScanDeviceRequest) SetDeviceSite(v string) *CreateScanDeviceRequest {
	s.DeviceSite = &v
	return s
}

func (s *CreateScanDeviceRequest) SetDeviceSn(v string) *CreateScanDeviceRequest {
	s.DeviceSn = &v
	return s
}

func (s *CreateScanDeviceRequest) SetDeviceType(v string) *CreateScanDeviceRequest {
	s.DeviceType = &v
	return s
}

func (s *CreateScanDeviceRequest) SetEncodeFormat(v string) *CreateScanDeviceRequest {
	s.EncodeFormat = &v
	return s
}

func (s *CreateScanDeviceRequest) SetFrameRate(v string) *CreateScanDeviceRequest {
	s.FrameRate = &v
	return s
}

func (s *CreateScanDeviceRequest) SetGovLength(v string) *CreateScanDeviceRequest {
	s.GovLength = &v
	return s
}

func (s *CreateScanDeviceRequest) SetInProtocol(v string) *CreateScanDeviceRequest {
	s.InProtocol = &v
	return s
}

func (s *CreateScanDeviceRequest) SetLatitude(v string) *CreateScanDeviceRequest {
	s.Latitude = &v
	return s
}

func (s *CreateScanDeviceRequest) SetLongitude(v string) *CreateScanDeviceRequest {
	s.Longitude = &v
	return s
}

func (s *CreateScanDeviceRequest) SetOSDTimeEnable(v string) *CreateScanDeviceRequest {
	s.OSDTimeEnable = &v
	return s
}

func (s *CreateScanDeviceRequest) SetOSDTimeType(v string) *CreateScanDeviceRequest {
	s.OSDTimeType = &v
	return s
}

func (s *CreateScanDeviceRequest) SetOSDTimeX(v string) *CreateScanDeviceRequest {
	s.OSDTimeX = &v
	return s
}

func (s *CreateScanDeviceRequest) SetOSDTimeY(v string) *CreateScanDeviceRequest {
	s.OSDTimeY = &v
	return s
}

func (s *CreateScanDeviceRequest) SetSubDeviceCount(v int64) *CreateScanDeviceRequest {
	s.SubDeviceCount = &v
	return s
}

func (s *CreateScanDeviceRequest) SetVendor(v string) *CreateScanDeviceRequest {
	s.Vendor = &v
	return s
}

type CreateScanDeviceResponseBody struct {
	Code      *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *CreateScanDeviceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                           `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateScanDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateScanDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateScanDeviceResponseBody) SetCode(v string) *CreateScanDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *CreateScanDeviceResponseBody) SetData(v *CreateScanDeviceResponseBodyData) *CreateScanDeviceResponseBody {
	s.Data = v
	return s
}

func (s *CreateScanDeviceResponseBody) SetMessage(v string) *CreateScanDeviceResponseBody {
	s.Message = &v
	return s
}

func (s *CreateScanDeviceResponseBody) SetRequestId(v string) *CreateScanDeviceResponseBody {
	s.RequestId = &v
	return s
}

type CreateScanDeviceResponseBodyData struct {
	CorpId        *string                                          `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DeviceId      *string                                          `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	DeviceSn      *string                                          `json:"DeviceSn,omitempty" xml:"DeviceSn,omitempty"`
	Password      *string                                          `json:"Password,omitempty" xml:"Password,omitempty"`
	ServerId      *string                                          `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	ServerIp      *string                                          `json:"ServerIp,omitempty" xml:"ServerIp,omitempty"`
	ServerPort    *string                                          `json:"ServerPort,omitempty" xml:"ServerPort,omitempty"`
	ServerRealm   *string                                          `json:"ServerRealm,omitempty" xml:"ServerRealm,omitempty"`
	SipDeviceGbId *string                                          `json:"SipDeviceGbId,omitempty" xml:"SipDeviceGbId,omitempty"`
	SubDeviceInfo []*CreateScanDeviceResponseBodyDataSubDeviceInfo `json:"SubDeviceInfo,omitempty" xml:"SubDeviceInfo,omitempty" type:"Repeated"`
}

func (s CreateScanDeviceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateScanDeviceResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateScanDeviceResponseBodyData) SetCorpId(v string) *CreateScanDeviceResponseBodyData {
	s.CorpId = &v
	return s
}

func (s *CreateScanDeviceResponseBodyData) SetDeviceId(v string) *CreateScanDeviceResponseBodyData {
	s.DeviceId = &v
	return s
}

func (s *CreateScanDeviceResponseBodyData) SetDeviceSn(v string) *CreateScanDeviceResponseBodyData {
	s.DeviceSn = &v
	return s
}

func (s *CreateScanDeviceResponseBodyData) SetPassword(v string) *CreateScanDeviceResponseBodyData {
	s.Password = &v
	return s
}

func (s *CreateScanDeviceResponseBodyData) SetServerId(v string) *CreateScanDeviceResponseBodyData {
	s.ServerId = &v
	return s
}

func (s *CreateScanDeviceResponseBodyData) SetServerIp(v string) *CreateScanDeviceResponseBodyData {
	s.ServerIp = &v
	return s
}

func (s *CreateScanDeviceResponseBodyData) SetServerPort(v string) *CreateScanDeviceResponseBodyData {
	s.ServerPort = &v
	return s
}

func (s *CreateScanDeviceResponseBodyData) SetServerRealm(v string) *CreateScanDeviceResponseBodyData {
	s.ServerRealm = &v
	return s
}

func (s *CreateScanDeviceResponseBodyData) SetSipDeviceGbId(v string) *CreateScanDeviceResponseBodyData {
	s.SipDeviceGbId = &v
	return s
}

func (s *CreateScanDeviceResponseBodyData) SetSubDeviceInfo(v []*CreateScanDeviceResponseBodyDataSubDeviceInfo) *CreateScanDeviceResponseBodyData {
	s.SubDeviceInfo = v
	return s
}

type CreateScanDeviceResponseBodyDataSubDeviceInfo struct {
	ChannelDeviceId *string `json:"ChannelDeviceId,omitempty" xml:"ChannelDeviceId,omitempty"`
}

func (s CreateScanDeviceResponseBodyDataSubDeviceInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateScanDeviceResponseBodyDataSubDeviceInfo) GoString() string {
	return s.String()
}

func (s *CreateScanDeviceResponseBodyDataSubDeviceInfo) SetChannelDeviceId(v string) *CreateScanDeviceResponseBodyDataSubDeviceInfo {
	s.ChannelDeviceId = &v
	return s
}

type CreateScanDeviceResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateScanDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateScanDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateScanDeviceResponse) GoString() string {
	return s.String()
}

func (s *CreateScanDeviceResponse) SetHeaders(v map[string]*string) *CreateScanDeviceResponse {
	s.Headers = v
	return s
}

func (s *CreateScanDeviceResponse) SetBody(v *CreateScanDeviceResponseBody) *CreateScanDeviceResponse {
	s.Body = v
	return s
}

type CreateUserRequest struct {
	Address      *string `json:"Address,omitempty" xml:"Address,omitempty"`
	Age          *int32  `json:"Age,omitempty" xml:"Age,omitempty"`
	Attachment   *string `json:"Attachment,omitempty" xml:"Attachment,omitempty"`
	BizId        *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	CorpId       *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	FaceImageUrl *string `json:"FaceImageUrl,omitempty" xml:"FaceImageUrl,omitempty"`
	Gender       *int32  `json:"Gender,omitempty" xml:"Gender,omitempty"`
	IdNumber     *string `json:"IdNumber,omitempty" xml:"IdNumber,omitempty"`
	IsvSubId     *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	PhoneNo      *string `json:"PhoneNo,omitempty" xml:"PhoneNo,omitempty"`
	PlateNo      *string `json:"PlateNo,omitempty" xml:"PlateNo,omitempty"`
	UserGroupId  *int64  `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
	UserName     *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s CreateUserRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUserRequest) GoString() string {
	return s.String()
}

func (s *CreateUserRequest) SetAddress(v string) *CreateUserRequest {
	s.Address = &v
	return s
}

func (s *CreateUserRequest) SetAge(v int32) *CreateUserRequest {
	s.Age = &v
	return s
}

func (s *CreateUserRequest) SetAttachment(v string) *CreateUserRequest {
	s.Attachment = &v
	return s
}

func (s *CreateUserRequest) SetBizId(v string) *CreateUserRequest {
	s.BizId = &v
	return s
}

func (s *CreateUserRequest) SetCorpId(v string) *CreateUserRequest {
	s.CorpId = &v
	return s
}

func (s *CreateUserRequest) SetFaceImageUrl(v string) *CreateUserRequest {
	s.FaceImageUrl = &v
	return s
}

func (s *CreateUserRequest) SetGender(v int32) *CreateUserRequest {
	s.Gender = &v
	return s
}

func (s *CreateUserRequest) SetIdNumber(v string) *CreateUserRequest {
	s.IdNumber = &v
	return s
}

func (s *CreateUserRequest) SetIsvSubId(v string) *CreateUserRequest {
	s.IsvSubId = &v
	return s
}

func (s *CreateUserRequest) SetPhoneNo(v string) *CreateUserRequest {
	s.PhoneNo = &v
	return s
}

func (s *CreateUserRequest) SetPlateNo(v string) *CreateUserRequest {
	s.PlateNo = &v
	return s
}

func (s *CreateUserRequest) SetUserGroupId(v int64) *CreateUserRequest {
	s.UserGroupId = &v
	return s
}

func (s *CreateUserRequest) SetUserName(v string) *CreateUserRequest {
	s.UserName = &v
	return s
}

type CreateUserResponseBody struct {
	Code      *string                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *CreateUserResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                     `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateUserResponseBody) GoString() string {
	return s.String()
}

func (s *CreateUserResponseBody) SetCode(v string) *CreateUserResponseBody {
	s.Code = &v
	return s
}

func (s *CreateUserResponseBody) SetData(v *CreateUserResponseBodyData) *CreateUserResponseBody {
	s.Data = v
	return s
}

func (s *CreateUserResponseBody) SetMessage(v string) *CreateUserResponseBody {
	s.Message = &v
	return s
}

func (s *CreateUserResponseBody) SetRequestId(v string) *CreateUserResponseBody {
	s.RequestId = &v
	return s
}

type CreateUserResponseBodyData struct {
	Address      *string `json:"Address,omitempty" xml:"Address,omitempty"`
	Age          *string `json:"Age,omitempty" xml:"Age,omitempty"`
	Attachment   *string `json:"Attachment,omitempty" xml:"Attachment,omitempty"`
	BizId        *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	FaceImageUrl *string `json:"FaceImageUrl,omitempty" xml:"FaceImageUrl,omitempty"`
	Gender       *string `json:"Gender,omitempty" xml:"Gender,omitempty"`
	IdNumber     *string `json:"IdNumber,omitempty" xml:"IdNumber,omitempty"`
	IsvSubId     *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	PhoneNo      *string `json:"PhoneNo,omitempty" xml:"PhoneNo,omitempty"`
	PlateNo      *string `json:"PlateNo,omitempty" xml:"PlateNo,omitempty"`
	UserGroupId  *int32  `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
	UserId       *int32  `json:"UserId,omitempty" xml:"UserId,omitempty"`
	UserName     *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s CreateUserResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateUserResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateUserResponseBodyData) SetAddress(v string) *CreateUserResponseBodyData {
	s.Address = &v
	return s
}

func (s *CreateUserResponseBodyData) SetAge(v string) *CreateUserResponseBodyData {
	s.Age = &v
	return s
}

func (s *CreateUserResponseBodyData) SetAttachment(v string) *CreateUserResponseBodyData {
	s.Attachment = &v
	return s
}

func (s *CreateUserResponseBodyData) SetBizId(v string) *CreateUserResponseBodyData {
	s.BizId = &v
	return s
}

func (s *CreateUserResponseBodyData) SetFaceImageUrl(v string) *CreateUserResponseBodyData {
	s.FaceImageUrl = &v
	return s
}

func (s *CreateUserResponseBodyData) SetGender(v string) *CreateUserResponseBodyData {
	s.Gender = &v
	return s
}

func (s *CreateUserResponseBodyData) SetIdNumber(v string) *CreateUserResponseBodyData {
	s.IdNumber = &v
	return s
}

func (s *CreateUserResponseBodyData) SetIsvSubId(v string) *CreateUserResponseBodyData {
	s.IsvSubId = &v
	return s
}

func (s *CreateUserResponseBodyData) SetPhoneNo(v string) *CreateUserResponseBodyData {
	s.PhoneNo = &v
	return s
}

func (s *CreateUserResponseBodyData) SetPlateNo(v string) *CreateUserResponseBodyData {
	s.PlateNo = &v
	return s
}

func (s *CreateUserResponseBodyData) SetUserGroupId(v int32) *CreateUserResponseBodyData {
	s.UserGroupId = &v
	return s
}

func (s *CreateUserResponseBodyData) SetUserId(v int32) *CreateUserResponseBodyData {
	s.UserId = &v
	return s
}

func (s *CreateUserResponseBodyData) SetUserName(v string) *CreateUserResponseBodyData {
	s.UserName = &v
	return s
}

type CreateUserResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateUserResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUserResponse) GoString() string {
	return s.String()
}

func (s *CreateUserResponse) SetHeaders(v map[string]*string) *CreateUserResponse {
	s.Headers = v
	return s
}

func (s *CreateUserResponse) SetBody(v *CreateUserResponseBody) *CreateUserResponse {
	s.Body = v
	return s
}

type CreateUserGroupRequest struct {
	CorpId            *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	IsvSubId          *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	ParentUserGroupId *int64  `json:"ParentUserGroupId,omitempty" xml:"ParentUserGroupId,omitempty"`
	UserGroupName     *string `json:"UserGroupName,omitempty" xml:"UserGroupName,omitempty"`
}

func (s CreateUserGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUserGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateUserGroupRequest) SetCorpId(v string) *CreateUserGroupRequest {
	s.CorpId = &v
	return s
}

func (s *CreateUserGroupRequest) SetIsvSubId(v string) *CreateUserGroupRequest {
	s.IsvSubId = &v
	return s
}

func (s *CreateUserGroupRequest) SetParentUserGroupId(v int64) *CreateUserGroupRequest {
	s.ParentUserGroupId = &v
	return s
}

func (s *CreateUserGroupRequest) SetUserGroupName(v string) *CreateUserGroupRequest {
	s.UserGroupName = &v
	return s
}

type CreateUserGroupResponseBody struct {
	Code      *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *CreateUserGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                          `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateUserGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateUserGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateUserGroupResponseBody) SetCode(v string) *CreateUserGroupResponseBody {
	s.Code = &v
	return s
}

func (s *CreateUserGroupResponseBody) SetData(v *CreateUserGroupResponseBodyData) *CreateUserGroupResponseBody {
	s.Data = v
	return s
}

func (s *CreateUserGroupResponseBody) SetMessage(v string) *CreateUserGroupResponseBody {
	s.Message = &v
	return s
}

func (s *CreateUserGroupResponseBody) SetRequestId(v string) *CreateUserGroupResponseBody {
	s.RequestId = &v
	return s
}

type CreateUserGroupResponseBodyData struct {
	IsvSubId      *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	UserGroupId   *int64  `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
	UserGroupName *string `json:"UserGroupName,omitempty" xml:"UserGroupName,omitempty"`
}

func (s CreateUserGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateUserGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateUserGroupResponseBodyData) SetIsvSubId(v string) *CreateUserGroupResponseBodyData {
	s.IsvSubId = &v
	return s
}

func (s *CreateUserGroupResponseBodyData) SetUserGroupId(v int64) *CreateUserGroupResponseBodyData {
	s.UserGroupId = &v
	return s
}

func (s *CreateUserGroupResponseBodyData) SetUserGroupName(v string) *CreateUserGroupResponseBodyData {
	s.UserGroupName = &v
	return s
}

type CreateUserGroupResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateUserGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateUserGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUserGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateUserGroupResponse) SetHeaders(v map[string]*string) *CreateUserGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateUserGroupResponse) SetBody(v *CreateUserGroupResponseBody) *CreateUserGroupResponse {
	s.Body = v
	return s
}

type CreateVideoComposeTaskRequest struct {
	AudioFileName   *string `json:"AudioFileName,omitempty" xml:"AudioFileName,omitempty"`
	BucketName      *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
	CorpId          *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DomainName      *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	ImageFileNames  *string `json:"ImageFileNames,omitempty" xml:"ImageFileNames,omitempty"`
	ImageParameters *string `json:"ImageParameters,omitempty" xml:"ImageParameters,omitempty"`
	VideoFormat     *string `json:"VideoFormat,omitempty" xml:"VideoFormat,omitempty"`
	VideoFrameRate  *int32  `json:"VideoFrameRate,omitempty" xml:"VideoFrameRate,omitempty"`
}

func (s CreateVideoComposeTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVideoComposeTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateVideoComposeTaskRequest) SetAudioFileName(v string) *CreateVideoComposeTaskRequest {
	s.AudioFileName = &v
	return s
}

func (s *CreateVideoComposeTaskRequest) SetBucketName(v string) *CreateVideoComposeTaskRequest {
	s.BucketName = &v
	return s
}

func (s *CreateVideoComposeTaskRequest) SetCorpId(v string) *CreateVideoComposeTaskRequest {
	s.CorpId = &v
	return s
}

func (s *CreateVideoComposeTaskRequest) SetDomainName(v string) *CreateVideoComposeTaskRequest {
	s.DomainName = &v
	return s
}

func (s *CreateVideoComposeTaskRequest) SetImageFileNames(v string) *CreateVideoComposeTaskRequest {
	s.ImageFileNames = &v
	return s
}

func (s *CreateVideoComposeTaskRequest) SetImageParameters(v string) *CreateVideoComposeTaskRequest {
	s.ImageParameters = &v
	return s
}

func (s *CreateVideoComposeTaskRequest) SetVideoFormat(v string) *CreateVideoComposeTaskRequest {
	s.VideoFormat = &v
	return s
}

func (s *CreateVideoComposeTaskRequest) SetVideoFrameRate(v int32) *CreateVideoComposeTaskRequest {
	s.VideoFrameRate = &v
	return s
}

type CreateVideoComposeTaskResponseBody struct {
	BucketName *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
	Code       *string `json:"Code,omitempty" xml:"Code,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Message    *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateVideoComposeTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateVideoComposeTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateVideoComposeTaskResponseBody) SetBucketName(v string) *CreateVideoComposeTaskResponseBody {
	s.BucketName = &v
	return s
}

func (s *CreateVideoComposeTaskResponseBody) SetCode(v string) *CreateVideoComposeTaskResponseBody {
	s.Code = &v
	return s
}

func (s *CreateVideoComposeTaskResponseBody) SetDomainName(v string) *CreateVideoComposeTaskResponseBody {
	s.DomainName = &v
	return s
}

func (s *CreateVideoComposeTaskResponseBody) SetMessage(v string) *CreateVideoComposeTaskResponseBody {
	s.Message = &v
	return s
}

func (s *CreateVideoComposeTaskResponseBody) SetRequestId(v string) *CreateVideoComposeTaskResponseBody {
	s.RequestId = &v
	return s
}

type CreateVideoComposeTaskResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateVideoComposeTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateVideoComposeTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVideoComposeTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateVideoComposeTaskResponse) SetHeaders(v map[string]*string) *CreateVideoComposeTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateVideoComposeTaskResponse) SetBody(v *CreateVideoComposeTaskResponseBody) *CreateVideoComposeTaskResponse {
	s.Body = v
	return s
}

type CreateVideoSummaryTaskRequest struct {
	CorpId           *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DeviceId         *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	EndTimeStamp     *int64  `json:"EndTimeStamp,omitempty" xml:"EndTimeStamp,omitempty"`
	LiveVideoSummary *string `json:"LiveVideoSummary,omitempty" xml:"LiveVideoSummary,omitempty"`
	OptionList       *string `json:"OptionList,omitempty" xml:"OptionList,omitempty"`
	StartTimeStamp   *int64  `json:"StartTimeStamp,omitempty" xml:"StartTimeStamp,omitempty"`
}

func (s CreateVideoSummaryTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVideoSummaryTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateVideoSummaryTaskRequest) SetCorpId(v string) *CreateVideoSummaryTaskRequest {
	s.CorpId = &v
	return s
}

func (s *CreateVideoSummaryTaskRequest) SetDeviceId(v string) *CreateVideoSummaryTaskRequest {
	s.DeviceId = &v
	return s
}

func (s *CreateVideoSummaryTaskRequest) SetEndTimeStamp(v int64) *CreateVideoSummaryTaskRequest {
	s.EndTimeStamp = &v
	return s
}

func (s *CreateVideoSummaryTaskRequest) SetLiveVideoSummary(v string) *CreateVideoSummaryTaskRequest {
	s.LiveVideoSummary = &v
	return s
}

func (s *CreateVideoSummaryTaskRequest) SetOptionList(v string) *CreateVideoSummaryTaskRequest {
	s.OptionList = &v
	return s
}

func (s *CreateVideoSummaryTaskRequest) SetStartTimeStamp(v int64) *CreateVideoSummaryTaskRequest {
	s.StartTimeStamp = &v
	return s
}

type CreateVideoSummaryTaskResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateVideoSummaryTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateVideoSummaryTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateVideoSummaryTaskResponseBody) SetCode(v string) *CreateVideoSummaryTaskResponseBody {
	s.Code = &v
	return s
}

func (s *CreateVideoSummaryTaskResponseBody) SetData(v string) *CreateVideoSummaryTaskResponseBody {
	s.Data = &v
	return s
}

func (s *CreateVideoSummaryTaskResponseBody) SetMessage(v string) *CreateVideoSummaryTaskResponseBody {
	s.Message = &v
	return s
}

func (s *CreateVideoSummaryTaskResponseBody) SetRequestId(v string) *CreateVideoSummaryTaskResponseBody {
	s.RequestId = &v
	return s
}

type CreateVideoSummaryTaskResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateVideoSummaryTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateVideoSummaryTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVideoSummaryTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateVideoSummaryTaskResponse) SetHeaders(v map[string]*string) *CreateVideoSummaryTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateVideoSummaryTaskResponse) SetBody(v *CreateVideoSummaryTaskResponseBody) *CreateVideoSummaryTaskResponse {
	s.Body = v
	return s
}

type CreateWatchPolicyRequest struct {
	ItemMatchType       *string  `json:"ItemMatchType,omitempty" xml:"ItemMatchType,omitempty"`
	SimilarityThreshold *float64 `json:"SimilarityThreshold,omitempty" xml:"SimilarityThreshold,omitempty"`
	TargetType          *string  `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
	WatchMode           *string  `json:"WatchMode,omitempty" xml:"WatchMode,omitempty"`
	WatchPolicyName     *string  `json:"WatchPolicyName,omitempty" xml:"WatchPolicyName,omitempty"`
}

func (s CreateWatchPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWatchPolicyRequest) GoString() string {
	return s.String()
}

func (s *CreateWatchPolicyRequest) SetItemMatchType(v string) *CreateWatchPolicyRequest {
	s.ItemMatchType = &v
	return s
}

func (s *CreateWatchPolicyRequest) SetSimilarityThreshold(v float64) *CreateWatchPolicyRequest {
	s.SimilarityThreshold = &v
	return s
}

func (s *CreateWatchPolicyRequest) SetTargetType(v string) *CreateWatchPolicyRequest {
	s.TargetType = &v
	return s
}

func (s *CreateWatchPolicyRequest) SetWatchMode(v string) *CreateWatchPolicyRequest {
	s.WatchMode = &v
	return s
}

func (s *CreateWatchPolicyRequest) SetWatchPolicyName(v string) *CreateWatchPolicyRequest {
	s.WatchPolicyName = &v
	return s
}

type CreateWatchPolicyResponseBody struct {
	Code    *string                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *CreateWatchPolicyResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                            `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateWatchPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateWatchPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *CreateWatchPolicyResponseBody) SetCode(v string) *CreateWatchPolicyResponseBody {
	s.Code = &v
	return s
}

func (s *CreateWatchPolicyResponseBody) SetData(v *CreateWatchPolicyResponseBodyData) *CreateWatchPolicyResponseBody {
	s.Data = v
	return s
}

func (s *CreateWatchPolicyResponseBody) SetMessage(v string) *CreateWatchPolicyResponseBody {
	s.Message = &v
	return s
}

func (s *CreateWatchPolicyResponseBody) SetRequestId(v string) *CreateWatchPolicyResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateWatchPolicyResponseBody) SetSuccess(v bool) *CreateWatchPolicyResponseBody {
	s.Success = &v
	return s
}

type CreateWatchPolicyResponseBodyData struct {
	WatchPolicyId *string `json:"WatchPolicyId,omitempty" xml:"WatchPolicyId,omitempty"`
}

func (s CreateWatchPolicyResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateWatchPolicyResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateWatchPolicyResponseBodyData) SetWatchPolicyId(v string) *CreateWatchPolicyResponseBodyData {
	s.WatchPolicyId = &v
	return s
}

type CreateWatchPolicyResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateWatchPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateWatchPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateWatchPolicyResponse) GoString() string {
	return s.String()
}

func (s *CreateWatchPolicyResponse) SetHeaders(v map[string]*string) *CreateWatchPolicyResponse {
	s.Headers = v
	return s
}

func (s *CreateWatchPolicyResponse) SetBody(v *CreateWatchPolicyResponseBody) *CreateWatchPolicyResponse {
	s.Body = v
	return s
}

type CreateWatchTaskRequest struct {
	CorpId             *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	Description        *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DeviceList         *string `json:"DeviceList,omitempty" xml:"DeviceList,omitempty"`
	MessageReceiver    *string `json:"MessageReceiver,omitempty" xml:"MessageReceiver,omitempty"`
	ScheduleCycleDates *string `json:"ScheduleCycleDates,omitempty" xml:"ScheduleCycleDates,omitempty"`
	ScheduleTimes      *string `json:"ScheduleTimes,omitempty" xml:"ScheduleTimes,omitempty"`
	ScheduleType       *string `json:"ScheduleType,omitempty" xml:"ScheduleType,omitempty"`
	TaskName           *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	WatchPolicyIds     *string `json:"WatchPolicyIds,omitempty" xml:"WatchPolicyIds,omitempty"`
}

func (s CreateWatchTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWatchTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateWatchTaskRequest) SetCorpId(v string) *CreateWatchTaskRequest {
	s.CorpId = &v
	return s
}

func (s *CreateWatchTaskRequest) SetDescription(v string) *CreateWatchTaskRequest {
	s.Description = &v
	return s
}

func (s *CreateWatchTaskRequest) SetDeviceList(v string) *CreateWatchTaskRequest {
	s.DeviceList = &v
	return s
}

func (s *CreateWatchTaskRequest) SetMessageReceiver(v string) *CreateWatchTaskRequest {
	s.MessageReceiver = &v
	return s
}

func (s *CreateWatchTaskRequest) SetScheduleCycleDates(v string) *CreateWatchTaskRequest {
	s.ScheduleCycleDates = &v
	return s
}

func (s *CreateWatchTaskRequest) SetScheduleTimes(v string) *CreateWatchTaskRequest {
	s.ScheduleTimes = &v
	return s
}

func (s *CreateWatchTaskRequest) SetScheduleType(v string) *CreateWatchTaskRequest {
	s.ScheduleType = &v
	return s
}

func (s *CreateWatchTaskRequest) SetTaskName(v string) *CreateWatchTaskRequest {
	s.TaskName = &v
	return s
}

func (s *CreateWatchTaskRequest) SetWatchPolicyIds(v string) *CreateWatchTaskRequest {
	s.WatchPolicyIds = &v
	return s
}

type CreateWatchTaskResponseBody struct {
	Code    *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *CreateWatchTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                          `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateWatchTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateWatchTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateWatchTaskResponseBody) SetCode(v string) *CreateWatchTaskResponseBody {
	s.Code = &v
	return s
}

func (s *CreateWatchTaskResponseBody) SetData(v *CreateWatchTaskResponseBodyData) *CreateWatchTaskResponseBody {
	s.Data = v
	return s
}

func (s *CreateWatchTaskResponseBody) SetMessage(v string) *CreateWatchTaskResponseBody {
	s.Message = &v
	return s
}

func (s *CreateWatchTaskResponseBody) SetRequestId(v string) *CreateWatchTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateWatchTaskResponseBody) SetSuccess(v bool) *CreateWatchTaskResponseBody {
	s.Success = &v
	return s
}

type CreateWatchTaskResponseBodyData struct {
	WatchTaskId *string `json:"WatchTaskId,omitempty" xml:"WatchTaskId,omitempty"`
}

func (s CreateWatchTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateWatchTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateWatchTaskResponseBodyData) SetWatchTaskId(v string) *CreateWatchTaskResponseBodyData {
	s.WatchTaskId = &v
	return s
}

type CreateWatchTaskResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateWatchTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateWatchTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateWatchTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateWatchTaskResponse) SetHeaders(v map[string]*string) *CreateWatchTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateWatchTaskResponse) SetBody(v *CreateWatchTaskResponseBody) *CreateWatchTaskResponse {
	s.Body = v
	return s
}

type DeleteAIInstanceRequest struct {
	// 需要删除的计算实例id
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
}

func (s DeleteAIInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAIInstanceRequest) GoString() string {
	return s.String()
}

func (s *DeleteAIInstanceRequest) SetInstanceIds(v []*string) *DeleteAIInstanceRequest {
	s.InstanceIds = v
	return s
}

type DeleteAIInstanceShrinkRequest struct {
	// 需要删除的计算实例id
	InstanceIdsShrink *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
}

func (s DeleteAIInstanceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAIInstanceShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteAIInstanceShrinkRequest) SetInstanceIdsShrink(v string) *DeleteAIInstanceShrinkRequest {
	s.InstanceIdsShrink = &v
	return s
}

type DeleteAIInstanceResponseBody struct {
	// 返回code码
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// 错误信息
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAIInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAIInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAIInstanceResponseBody) SetCode(v string) *DeleteAIInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteAIInstanceResponseBody) SetMessage(v string) *DeleteAIInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteAIInstanceResponseBody) SetRequestId(v string) *DeleteAIInstanceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteAIInstanceResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteAIInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteAIInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAIInstanceResponse) GoString() string {
	return s.String()
}

func (s *DeleteAIInstanceResponse) SetHeaders(v map[string]*string) *DeleteAIInstanceResponse {
	s.Headers = v
	return s
}

func (s *DeleteAIInstanceResponse) SetBody(v *DeleteAIInstanceResponseBody) *DeleteAIInstanceResponse {
	s.Body = v
	return s
}

type DeleteAiotDeviceRequest struct {
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteAiotDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAiotDeviceRequest) GoString() string {
	return s.String()
}

func (s *DeleteAiotDeviceRequest) SetId(v string) *DeleteAiotDeviceRequest {
	s.Id = &v
	return s
}

type DeleteAiotDeviceResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAiotDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAiotDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAiotDeviceResponseBody) SetCode(v string) *DeleteAiotDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteAiotDeviceResponseBody) SetMessage(v string) *DeleteAiotDeviceResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteAiotDeviceResponseBody) SetRequestId(v string) *DeleteAiotDeviceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteAiotDeviceResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteAiotDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteAiotDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAiotDeviceResponse) GoString() string {
	return s.String()
}

func (s *DeleteAiotDeviceResponse) SetHeaders(v map[string]*string) *DeleteAiotDeviceResponse {
	s.Headers = v
	return s
}

func (s *DeleteAiotDeviceResponse) SetBody(v *DeleteAiotDeviceResponseBody) *DeleteAiotDeviceResponse {
	s.Body = v
	return s
}

type DeleteAiotPersonTableRequest struct {
	Id            *string `json:"Id,omitempty" xml:"Id,omitempty"`
	PersonTableId *string `json:"PersonTableId,omitempty" xml:"PersonTableId,omitempty"`
}

func (s DeleteAiotPersonTableRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAiotPersonTableRequest) GoString() string {
	return s.String()
}

func (s *DeleteAiotPersonTableRequest) SetId(v string) *DeleteAiotPersonTableRequest {
	s.Id = &v
	return s
}

func (s *DeleteAiotPersonTableRequest) SetPersonTableId(v string) *DeleteAiotPersonTableRequest {
	s.PersonTableId = &v
	return s
}

type DeleteAiotPersonTableResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAiotPersonTableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAiotPersonTableResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAiotPersonTableResponseBody) SetCode(v string) *DeleteAiotPersonTableResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteAiotPersonTableResponseBody) SetMessage(v string) *DeleteAiotPersonTableResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteAiotPersonTableResponseBody) SetRequestId(v string) *DeleteAiotPersonTableResponseBody {
	s.RequestId = &v
	return s
}

type DeleteAiotPersonTableResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteAiotPersonTableResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteAiotPersonTableResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAiotPersonTableResponse) GoString() string {
	return s.String()
}

func (s *DeleteAiotPersonTableResponse) SetHeaders(v map[string]*string) *DeleteAiotPersonTableResponse {
	s.Headers = v
	return s
}

func (s *DeleteAiotPersonTableResponse) SetBody(v *DeleteAiotPersonTableResponseBody) *DeleteAiotPersonTableResponse {
	s.Body = v
	return s
}

type DeleteAiotPersonTableItemRequest struct {
	Id                *string `json:"Id,omitempty" xml:"Id,omitempty"`
	PersonTableId     *string `json:"PersonTableId,omitempty" xml:"PersonTableId,omitempty"`
	PersonTableItemId *string `json:"PersonTableItemId,omitempty" xml:"PersonTableItemId,omitempty"`
}

func (s DeleteAiotPersonTableItemRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAiotPersonTableItemRequest) GoString() string {
	return s.String()
}

func (s *DeleteAiotPersonTableItemRequest) SetId(v string) *DeleteAiotPersonTableItemRequest {
	s.Id = &v
	return s
}

func (s *DeleteAiotPersonTableItemRequest) SetPersonTableId(v string) *DeleteAiotPersonTableItemRequest {
	s.PersonTableId = &v
	return s
}

func (s *DeleteAiotPersonTableItemRequest) SetPersonTableItemId(v string) *DeleteAiotPersonTableItemRequest {
	s.PersonTableItemId = &v
	return s
}

type DeleteAiotPersonTableItemResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAiotPersonTableItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAiotPersonTableItemResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAiotPersonTableItemResponseBody) SetCode(v string) *DeleteAiotPersonTableItemResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteAiotPersonTableItemResponseBody) SetMessage(v string) *DeleteAiotPersonTableItemResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteAiotPersonTableItemResponseBody) SetRequestId(v string) *DeleteAiotPersonTableItemResponseBody {
	s.RequestId = &v
	return s
}

type DeleteAiotPersonTableItemResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteAiotPersonTableItemResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteAiotPersonTableItemResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAiotPersonTableItemResponse) GoString() string {
	return s.String()
}

func (s *DeleteAiotPersonTableItemResponse) SetHeaders(v map[string]*string) *DeleteAiotPersonTableItemResponse {
	s.Headers = v
	return s
}

func (s *DeleteAiotPersonTableItemResponse) SetBody(v *DeleteAiotPersonTableItemResponseBody) *DeleteAiotPersonTableItemResponse {
	s.Body = v
	return s
}

type DeleteAiotVehicleTableItemRequest struct {
	Id                 *string `json:"Id,omitempty" xml:"Id,omitempty"`
	VehicleTableId     *string `json:"VehicleTableId,omitempty" xml:"VehicleTableId,omitempty"`
	VehicleTableItemId *string `json:"VehicleTableItemId,omitempty" xml:"VehicleTableItemId,omitempty"`
}

func (s DeleteAiotVehicleTableItemRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAiotVehicleTableItemRequest) GoString() string {
	return s.String()
}

func (s *DeleteAiotVehicleTableItemRequest) SetId(v string) *DeleteAiotVehicleTableItemRequest {
	s.Id = &v
	return s
}

func (s *DeleteAiotVehicleTableItemRequest) SetVehicleTableId(v string) *DeleteAiotVehicleTableItemRequest {
	s.VehicleTableId = &v
	return s
}

func (s *DeleteAiotVehicleTableItemRequest) SetVehicleTableItemId(v string) *DeleteAiotVehicleTableItemRequest {
	s.VehicleTableItemId = &v
	return s
}

type DeleteAiotVehicleTableItemResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAiotVehicleTableItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAiotVehicleTableItemResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAiotVehicleTableItemResponseBody) SetCode(v string) *DeleteAiotVehicleTableItemResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteAiotVehicleTableItemResponseBody) SetMessage(v string) *DeleteAiotVehicleTableItemResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteAiotVehicleTableItemResponseBody) SetRequestId(v string) *DeleteAiotVehicleTableItemResponseBody {
	s.RequestId = &v
	return s
}

type DeleteAiotVehicleTableItemResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteAiotVehicleTableItemResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteAiotVehicleTableItemResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAiotVehicleTableItemResponse) GoString() string {
	return s.String()
}

func (s *DeleteAiotVehicleTableItemResponse) SetHeaders(v map[string]*string) *DeleteAiotVehicleTableItemResponse {
	s.Headers = v
	return s
}

func (s *DeleteAiotVehicleTableItemResponse) SetBody(v *DeleteAiotVehicleTableItemResponseBody) *DeleteAiotVehicleTableItemResponse {
	s.Body = v
	return s
}

type DeleteChannelRequest struct {
	DeviceCodes *string `json:"DeviceCodes,omitempty" xml:"DeviceCodes,omitempty"`
}

func (s DeleteChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteChannelRequest) GoString() string {
	return s.String()
}

func (s *DeleteChannelRequest) SetDeviceCodes(v string) *DeleteChannelRequest {
	s.DeviceCodes = &v
	return s
}

type DeleteChannelResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteChannelResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteChannelResponseBody) SetCode(v string) *DeleteChannelResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteChannelResponseBody) SetData(v string) *DeleteChannelResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteChannelResponseBody) SetMessage(v string) *DeleteChannelResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteChannelResponseBody) SetRequestId(v string) *DeleteChannelResponseBody {
	s.RequestId = &v
	return s
}

type DeleteChannelResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteChannelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteChannelResponse) GoString() string {
	return s.String()
}

func (s *DeleteChannelResponse) SetHeaders(v map[string]*string) *DeleteChannelResponse {
	s.Headers = v
	return s
}

func (s *DeleteChannelResponse) SetBody(v *DeleteChannelResponseBody) *DeleteChannelResponse {
	s.Body = v
	return s
}

type DeleteCorpGroupRequest struct {
	CorpId  *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s DeleteCorpGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCorpGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteCorpGroupRequest) SetCorpId(v string) *DeleteCorpGroupRequest {
	s.CorpId = &v
	return s
}

func (s *DeleteCorpGroupRequest) SetGroupId(v string) *DeleteCorpGroupRequest {
	s.GroupId = &v
	return s
}

type DeleteCorpGroupResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteCorpGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCorpGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCorpGroupResponseBody) SetCode(v string) *DeleteCorpGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteCorpGroupResponseBody) SetMessage(v string) *DeleteCorpGroupResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteCorpGroupResponseBody) SetRequestId(v string) *DeleteCorpGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCorpGroupResponseBody) SetSuccess(v bool) *DeleteCorpGroupResponseBody {
	s.Success = &v
	return s
}

type DeleteCorpGroupResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteCorpGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCorpGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCorpGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteCorpGroupResponse) SetHeaders(v map[string]*string) *DeleteCorpGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteCorpGroupResponse) SetBody(v *DeleteCorpGroupResponseBody) *DeleteCorpGroupResponse {
	s.Body = v
	return s
}

type DeleteDataSourceRequest struct {
	CorpId       *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
}

func (s DeleteDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataSourceRequest) GoString() string {
	return s.String()
}

func (s *DeleteDataSourceRequest) SetCorpId(v string) *DeleteDataSourceRequest {
	s.CorpId = &v
	return s
}

func (s *DeleteDataSourceRequest) SetDataSourceId(v string) *DeleteDataSourceRequest {
	s.DataSourceId = &v
	return s
}

type DeleteDataSourceResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s DeleteDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDataSourceResponseBody) SetCode(v string) *DeleteDataSourceResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteDataSourceResponseBody) SetData(v string) *DeleteDataSourceResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteDataSourceResponseBody) SetMessage(v string) *DeleteDataSourceResponseBody {
	s.Message = &v
	return s
}

type DeleteDataSourceResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataSourceResponse) GoString() string {
	return s.String()
}

func (s *DeleteDataSourceResponse) SetHeaders(v map[string]*string) *DeleteDataSourceResponse {
	s.Headers = v
	return s
}

func (s *DeleteDataSourceResponse) SetBody(v *DeleteDataSourceResponseBody) *DeleteDataSourceResponse {
	s.Body = v
	return s
}

type DeleteDataSourcesRequest struct {
	DataSourceIdList *string `json:"DataSourceIdList,omitempty" xml:"DataSourceIdList,omitempty"`
}

func (s DeleteDataSourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataSourcesRequest) GoString() string {
	return s.String()
}

func (s *DeleteDataSourcesRequest) SetDataSourceIdList(v string) *DeleteDataSourcesRequest {
	s.DataSourceIdList = &v
	return s
}

type DeleteDataSourcesResponseBody struct {
	Code      *string                              `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []*DeleteDataSourcesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message   *string                              `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDataSourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataSourcesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDataSourcesResponseBody) SetCode(v string) *DeleteDataSourcesResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteDataSourcesResponseBody) SetData(v []*DeleteDataSourcesResponseBodyData) *DeleteDataSourcesResponseBody {
	s.Data = v
	return s
}

func (s *DeleteDataSourcesResponseBody) SetMessage(v string) *DeleteDataSourcesResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteDataSourcesResponseBody) SetRequestId(v string) *DeleteDataSourcesResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDataSourcesResponseBodyData struct {
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	Message      *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s DeleteDataSourcesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataSourcesResponseBodyData) GoString() string {
	return s.String()
}

func (s *DeleteDataSourcesResponseBodyData) SetCode(v string) *DeleteDataSourcesResponseBodyData {
	s.Code = &v
	return s
}

func (s *DeleteDataSourcesResponseBodyData) SetDataSourceId(v string) *DeleteDataSourcesResponseBodyData {
	s.DataSourceId = &v
	return s
}

func (s *DeleteDataSourcesResponseBodyData) SetMessage(v string) *DeleteDataSourcesResponseBodyData {
	s.Message = &v
	return s
}

type DeleteDataSourcesResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDataSourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDataSourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataSourcesResponse) GoString() string {
	return s.String()
}

func (s *DeleteDataSourcesResponse) SetHeaders(v map[string]*string) *DeleteDataSourcesResponse {
	s.Headers = v
	return s
}

func (s *DeleteDataSourcesResponse) SetBody(v *DeleteDataSourcesResponseBody) *DeleteDataSourcesResponse {
	s.Body = v
	return s
}

type DeleteDeviceRequest struct {
	CorpId *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	GbId   *string `json:"GbId,omitempty" xml:"GbId,omitempty"`
}

func (s DeleteDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceRequest) GoString() string {
	return s.String()
}

func (s *DeleteDeviceRequest) SetCorpId(v string) *DeleteDeviceRequest {
	s.CorpId = &v
	return s
}

func (s *DeleteDeviceRequest) SetGbId(v string) *DeleteDeviceRequest {
	s.GbId = &v
	return s
}

type DeleteDeviceResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDeviceResponseBody) SetCode(v string) *DeleteDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteDeviceResponseBody) SetData(v string) *DeleteDeviceResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteDeviceResponseBody) SetMessage(v string) *DeleteDeviceResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteDeviceResponseBody) SetRequestId(v string) *DeleteDeviceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDeviceResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceResponse) GoString() string {
	return s.String()
}

func (s *DeleteDeviceResponse) SetHeaders(v map[string]*string) *DeleteDeviceResponse {
	s.Headers = v
	return s
}

func (s *DeleteDeviceResponse) SetBody(v *DeleteDeviceResponseBody) *DeleteDeviceResponse {
	s.Body = v
	return s
}

type DeleteDeviceForInstanceRequest struct {
	AlgorithmId        *string                                  `json:"AlgorithmId,omitempty" xml:"AlgorithmId,omitempty"`
	DeleteInstanceFlag *bool                                    `json:"DeleteInstanceFlag,omitempty" xml:"DeleteInstanceFlag,omitempty"`
	DeviceCount        *string                                  `json:"DeviceCount,omitempty" xml:"DeviceCount,omitempty"`
	Devices            []*DeleteDeviceForInstanceRequestDevices `json:"Devices,omitempty" xml:"Devices,omitempty" type:"Repeated"`
	InstanceId         *string                                  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ProjectId          *string                                  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s DeleteDeviceForInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceForInstanceRequest) GoString() string {
	return s.String()
}

func (s *DeleteDeviceForInstanceRequest) SetAlgorithmId(v string) *DeleteDeviceForInstanceRequest {
	s.AlgorithmId = &v
	return s
}

func (s *DeleteDeviceForInstanceRequest) SetDeleteInstanceFlag(v bool) *DeleteDeviceForInstanceRequest {
	s.DeleteInstanceFlag = &v
	return s
}

func (s *DeleteDeviceForInstanceRequest) SetDeviceCount(v string) *DeleteDeviceForInstanceRequest {
	s.DeviceCount = &v
	return s
}

func (s *DeleteDeviceForInstanceRequest) SetDevices(v []*DeleteDeviceForInstanceRequestDevices) *DeleteDeviceForInstanceRequest {
	s.Devices = v
	return s
}

func (s *DeleteDeviceForInstanceRequest) SetInstanceId(v string) *DeleteDeviceForInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteDeviceForInstanceRequest) SetProjectId(v string) *DeleteDeviceForInstanceRequest {
	s.ProjectId = &v
	return s
}

type DeleteDeviceForInstanceRequestDevices struct {
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteDeviceForInstanceRequestDevices) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceForInstanceRequestDevices) GoString() string {
	return s.String()
}

func (s *DeleteDeviceForInstanceRequestDevices) SetDeviceId(v string) *DeleteDeviceForInstanceRequestDevices {
	s.DeviceId = &v
	return s
}

func (s *DeleteDeviceForInstanceRequestDevices) SetRegionId(v string) *DeleteDeviceForInstanceRequestDevices {
	s.RegionId = &v
	return s
}

type DeleteDeviceForInstanceShrinkRequest struct {
	AlgorithmId        *string `json:"AlgorithmId,omitempty" xml:"AlgorithmId,omitempty"`
	DeleteInstanceFlag *bool   `json:"DeleteInstanceFlag,omitempty" xml:"DeleteInstanceFlag,omitempty"`
	DeviceCount        *string `json:"DeviceCount,omitempty" xml:"DeviceCount,omitempty"`
	DevicesShrink      *string `json:"Devices,omitempty" xml:"Devices,omitempty"`
	InstanceId         *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ProjectId          *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s DeleteDeviceForInstanceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceForInstanceShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteDeviceForInstanceShrinkRequest) SetAlgorithmId(v string) *DeleteDeviceForInstanceShrinkRequest {
	s.AlgorithmId = &v
	return s
}

func (s *DeleteDeviceForInstanceShrinkRequest) SetDeleteInstanceFlag(v bool) *DeleteDeviceForInstanceShrinkRequest {
	s.DeleteInstanceFlag = &v
	return s
}

func (s *DeleteDeviceForInstanceShrinkRequest) SetDeviceCount(v string) *DeleteDeviceForInstanceShrinkRequest {
	s.DeviceCount = &v
	return s
}

func (s *DeleteDeviceForInstanceShrinkRequest) SetDevicesShrink(v string) *DeleteDeviceForInstanceShrinkRequest {
	s.DevicesShrink = &v
	return s
}

func (s *DeleteDeviceForInstanceShrinkRequest) SetInstanceId(v string) *DeleteDeviceForInstanceShrinkRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteDeviceForInstanceShrinkRequest) SetProjectId(v string) *DeleteDeviceForInstanceShrinkRequest {
	s.ProjectId = &v
	return s
}

type DeleteDeviceForInstanceResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteDeviceForInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceForInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDeviceForInstanceResponseBody) SetCode(v string) *DeleteDeviceForInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteDeviceForInstanceResponseBody) SetMessage(v string) *DeleteDeviceForInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteDeviceForInstanceResponseBody) SetRequestId(v string) *DeleteDeviceForInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDeviceForInstanceResponseBody) SetSuccess(v bool) *DeleteDeviceForInstanceResponseBody {
	s.Success = &v
	return s
}

type DeleteDeviceForInstanceResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDeviceForInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDeviceForInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceForInstanceResponse) GoString() string {
	return s.String()
}

func (s *DeleteDeviceForInstanceResponse) SetHeaders(v map[string]*string) *DeleteDeviceForInstanceResponse {
	s.Headers = v
	return s
}

func (s *DeleteDeviceForInstanceResponse) SetBody(v *DeleteDeviceForInstanceResponseBody) *DeleteDeviceForInstanceResponse {
	s.Body = v
	return s
}

type DeleteDevicesRequest struct {
	DeviceIdList *string `json:"DeviceIdList,omitempty" xml:"DeviceIdList,omitempty"`
}

func (s DeleteDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDevicesRequest) GoString() string {
	return s.String()
}

func (s *DeleteDevicesRequest) SetDeviceIdList(v string) *DeleteDevicesRequest {
	s.DeviceIdList = &v
	return s
}

type DeleteDevicesResponseBody struct {
	Code      *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []*DeleteDevicesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message   *string                          `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDevicesResponseBody) SetCode(v string) *DeleteDevicesResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteDevicesResponseBody) SetData(v []*DeleteDevicesResponseBodyData) *DeleteDevicesResponseBody {
	s.Data = v
	return s
}

func (s *DeleteDevicesResponseBody) SetMessage(v string) *DeleteDevicesResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteDevicesResponseBody) SetRequestId(v string) *DeleteDevicesResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDevicesResponseBodyData struct {
	Code        *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DeviceId    *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
}

func (s DeleteDevicesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DeleteDevicesResponseBodyData) GoString() string {
	return s.String()
}

func (s *DeleteDevicesResponseBodyData) SetCode(v string) *DeleteDevicesResponseBodyData {
	s.Code = &v
	return s
}

func (s *DeleteDevicesResponseBodyData) SetDescription(v string) *DeleteDevicesResponseBodyData {
	s.Description = &v
	return s
}

func (s *DeleteDevicesResponseBodyData) SetDeviceId(v string) *DeleteDevicesResponseBodyData {
	s.DeviceId = &v
	return s
}

type DeleteDevicesResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDevicesResponse) GoString() string {
	return s.String()
}

func (s *DeleteDevicesResponse) SetHeaders(v map[string]*string) *DeleteDevicesResponse {
	s.Headers = v
	return s
}

func (s *DeleteDevicesResponse) SetBody(v *DeleteDevicesResponseBody) *DeleteDevicesResponse {
	s.Body = v
	return s
}

type DeleteDoubleVerificationGroupRequest struct {
	DoubleVerificationGroupId *string `json:"DoubleVerificationGroupId,omitempty" xml:"DoubleVerificationGroupId,omitempty"`
	Id                        *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteDoubleVerificationGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDoubleVerificationGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteDoubleVerificationGroupRequest) SetDoubleVerificationGroupId(v string) *DeleteDoubleVerificationGroupRequest {
	s.DoubleVerificationGroupId = &v
	return s
}

func (s *DeleteDoubleVerificationGroupRequest) SetId(v string) *DeleteDoubleVerificationGroupRequest {
	s.Id = &v
	return s
}

type DeleteDoubleVerificationGroupResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDoubleVerificationGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDoubleVerificationGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDoubleVerificationGroupResponseBody) SetCode(v string) *DeleteDoubleVerificationGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteDoubleVerificationGroupResponseBody) SetMessage(v string) *DeleteDoubleVerificationGroupResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteDoubleVerificationGroupResponseBody) SetRequestId(v string) *DeleteDoubleVerificationGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDoubleVerificationGroupResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDoubleVerificationGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDoubleVerificationGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDoubleVerificationGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteDoubleVerificationGroupResponse) SetHeaders(v map[string]*string) *DeleteDoubleVerificationGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteDoubleVerificationGroupResponse) SetBody(v *DeleteDoubleVerificationGroupResponseBody) *DeleteDoubleVerificationGroupResponse {
	s.Body = v
	return s
}

type DeleteIPCDeviceRequest struct {
	DeviceCodes *string `json:"DeviceCodes,omitempty" xml:"DeviceCodes,omitempty"`
}

func (s DeleteIPCDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteIPCDeviceRequest) GoString() string {
	return s.String()
}

func (s *DeleteIPCDeviceRequest) SetDeviceCodes(v string) *DeleteIPCDeviceRequest {
	s.DeviceCodes = &v
	return s
}

type DeleteIPCDeviceResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteIPCDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteIPCDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteIPCDeviceResponseBody) SetCode(v string) *DeleteIPCDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteIPCDeviceResponseBody) SetData(v string) *DeleteIPCDeviceResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteIPCDeviceResponseBody) SetMessage(v string) *DeleteIPCDeviceResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteIPCDeviceResponseBody) SetRequestId(v string) *DeleteIPCDeviceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteIPCDeviceResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteIPCDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteIPCDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteIPCDeviceResponse) GoString() string {
	return s.String()
}

func (s *DeleteIPCDeviceResponse) SetHeaders(v map[string]*string) *DeleteIPCDeviceResponse {
	s.Headers = v
	return s
}

func (s *DeleteIPCDeviceResponse) SetBody(v *DeleteIPCDeviceResponseBody) *DeleteIPCDeviceResponse {
	s.Body = v
	return s
}

type DeleteModelServiceRequest struct {
	ModelServiceId *string `json:"ModelServiceId,omitempty" xml:"ModelServiceId,omitempty"`
}

func (s DeleteModelServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteModelServiceRequest) GoString() string {
	return s.String()
}

func (s *DeleteModelServiceRequest) SetModelServiceId(v string) *DeleteModelServiceRequest {
	s.ModelServiceId = &v
	return s
}

type DeleteModelServiceResponseBody struct {
	Code    *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *DeleteModelServiceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteModelServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteModelServiceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteModelServiceResponseBody) SetCode(v string) *DeleteModelServiceResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteModelServiceResponseBody) SetData(v *DeleteModelServiceResponseBodyData) *DeleteModelServiceResponseBody {
	s.Data = v
	return s
}

func (s *DeleteModelServiceResponseBody) SetMessage(v string) *DeleteModelServiceResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteModelServiceResponseBody) SetRequestId(v string) *DeleteModelServiceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteModelServiceResponseBodyData struct {
	ModelServiceInstanceId   *string `json:"ModelServiceInstanceId,omitempty" xml:"ModelServiceInstanceId,omitempty"`
	ModelServiceInstanceName *int32  `json:"ModelServiceInstanceName,omitempty" xml:"ModelServiceInstanceName,omitempty"`
	ModelServiceStatus       *string `json:"ModelServiceStatus,omitempty" xml:"ModelServiceStatus,omitempty"`
}

func (s DeleteModelServiceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DeleteModelServiceResponseBodyData) GoString() string {
	return s.String()
}

func (s *DeleteModelServiceResponseBodyData) SetModelServiceInstanceId(v string) *DeleteModelServiceResponseBodyData {
	s.ModelServiceInstanceId = &v
	return s
}

func (s *DeleteModelServiceResponseBodyData) SetModelServiceInstanceName(v int32) *DeleteModelServiceResponseBodyData {
	s.ModelServiceInstanceName = &v
	return s
}

func (s *DeleteModelServiceResponseBodyData) SetModelServiceStatus(v string) *DeleteModelServiceResponseBodyData {
	s.ModelServiceStatus = &v
	return s
}

type DeleteModelServiceResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteModelServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteModelServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteModelServiceResponse) GoString() string {
	return s.String()
}

func (s *DeleteModelServiceResponse) SetHeaders(v map[string]*string) *DeleteModelServiceResponse {
	s.Headers = v
	return s
}

func (s *DeleteModelServiceResponse) SetBody(v *DeleteModelServiceResponseBody) *DeleteModelServiceResponse {
	s.Body = v
	return s
}

type DeleteNVRDeviceRequest struct {
	DeviceCodes *string `json:"DeviceCodes,omitempty" xml:"DeviceCodes,omitempty"`
}

func (s DeleteNVRDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNVRDeviceRequest) GoString() string {
	return s.String()
}

func (s *DeleteNVRDeviceRequest) SetDeviceCodes(v string) *DeleteNVRDeviceRequest {
	s.DeviceCodes = &v
	return s
}

type DeleteNVRDeviceResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteNVRDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteNVRDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNVRDeviceResponseBody) SetCode(v string) *DeleteNVRDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteNVRDeviceResponseBody) SetData(v string) *DeleteNVRDeviceResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteNVRDeviceResponseBody) SetMessage(v string) *DeleteNVRDeviceResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteNVRDeviceResponseBody) SetRequestId(v string) *DeleteNVRDeviceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteNVRDeviceResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteNVRDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteNVRDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNVRDeviceResponse) GoString() string {
	return s.String()
}

func (s *DeleteNVRDeviceResponse) SetHeaders(v map[string]*string) *DeleteNVRDeviceResponse {
	s.Headers = v
	return s
}

func (s *DeleteNVRDeviceResponse) SetBody(v *DeleteNVRDeviceResponseBody) *DeleteNVRDeviceResponse {
	s.Body = v
	return s
}

type DeleteProfileRequest struct {
	CorpId    *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	IsvSubId  *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	ProfileId *int64  `json:"ProfileId,omitempty" xml:"ProfileId,omitempty"`
}

func (s DeleteProfileRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteProfileRequest) GoString() string {
	return s.String()
}

func (s *DeleteProfileRequest) SetCorpId(v string) *DeleteProfileRequest {
	s.CorpId = &v
	return s
}

func (s *DeleteProfileRequest) SetIsvSubId(v string) *DeleteProfileRequest {
	s.IsvSubId = &v
	return s
}

func (s *DeleteProfileRequest) SetProfileId(v int64) *DeleteProfileRequest {
	s.ProfileId = &v
	return s
}

type DeleteProfileResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteProfileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteProfileResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteProfileResponseBody) SetCode(v string) *DeleteProfileResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteProfileResponseBody) SetData(v bool) *DeleteProfileResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteProfileResponseBody) SetMessage(v string) *DeleteProfileResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteProfileResponseBody) SetRequestId(v string) *DeleteProfileResponseBody {
	s.RequestId = &v
	return s
}

type DeleteProfileResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteProfileResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteProfileResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteProfileResponse) GoString() string {
	return s.String()
}

func (s *DeleteProfileResponse) SetHeaders(v map[string]*string) *DeleteProfileResponse {
	s.Headers = v
	return s
}

func (s *DeleteProfileResponse) SetBody(v *DeleteProfileResponseBody) *DeleteProfileResponse {
	s.Body = v
	return s
}

type DeleteProfileCatalogRequest struct {
	CatalogId *string `json:"CatalogId,omitempty" xml:"CatalogId,omitempty"`
	CorpId    *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	IsvSubId  *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
}

func (s DeleteProfileCatalogRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteProfileCatalogRequest) GoString() string {
	return s.String()
}

func (s *DeleteProfileCatalogRequest) SetCatalogId(v string) *DeleteProfileCatalogRequest {
	s.CatalogId = &v
	return s
}

func (s *DeleteProfileCatalogRequest) SetCorpId(v string) *DeleteProfileCatalogRequest {
	s.CorpId = &v
	return s
}

func (s *DeleteProfileCatalogRequest) SetIsvSubId(v string) *DeleteProfileCatalogRequest {
	s.IsvSubId = &v
	return s
}

type DeleteProfileCatalogResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteProfileCatalogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteProfileCatalogResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteProfileCatalogResponseBody) SetCode(v string) *DeleteProfileCatalogResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteProfileCatalogResponseBody) SetData(v bool) *DeleteProfileCatalogResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteProfileCatalogResponseBody) SetMessage(v string) *DeleteProfileCatalogResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteProfileCatalogResponseBody) SetRequestId(v string) *DeleteProfileCatalogResponseBody {
	s.RequestId = &v
	return s
}

type DeleteProfileCatalogResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteProfileCatalogResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteProfileCatalogResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteProfileCatalogResponse) GoString() string {
	return s.String()
}

func (s *DeleteProfileCatalogResponse) SetHeaders(v map[string]*string) *DeleteProfileCatalogResponse {
	s.Headers = v
	return s
}

func (s *DeleteProfileCatalogResponse) SetBody(v *DeleteProfileCatalogResponseBody) *DeleteProfileCatalogResponse {
	s.Body = v
	return s
}

type DeleteProjectRequest struct {
	// 项目id,多个以”,“隔开
	ProjectIds *string `json:"ProjectIds,omitempty" xml:"ProjectIds,omitempty"`
}

func (s DeleteProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteProjectRequest) GoString() string {
	return s.String()
}

func (s *DeleteProjectRequest) SetProjectIds(v string) *DeleteProjectRequest {
	s.ProjectIds = &v
	return s
}

type DeleteProjectResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteProjectResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteProjectResponseBody) SetCode(v string) *DeleteProjectResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteProjectResponseBody) SetMessage(v string) *DeleteProjectResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteProjectResponseBody) SetRequestId(v string) *DeleteProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteProjectResponseBody) SetSuccess(v bool) *DeleteProjectResponseBody {
	s.Success = &v
	return s
}

type DeleteProjectResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteProjectResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteProjectResponse) GoString() string {
	return s.String()
}

func (s *DeleteProjectResponse) SetHeaders(v map[string]*string) *DeleteProjectResponse {
	s.Headers = v
	return s
}

func (s *DeleteProjectResponse) SetBody(v *DeleteProjectResponseBody) *DeleteProjectResponse {
	s.Body = v
	return s
}

type DeleteRecordsRequest struct {
	AlgorithmType *string `json:"AlgorithmType,omitempty" xml:"AlgorithmType,omitempty"`
	AttributeName *string `json:"AttributeName,omitempty" xml:"AttributeName,omitempty"`
	CorpId        *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	OperatorType  *string `json:"OperatorType,omitempty" xml:"OperatorType,omitempty"`
	Value         *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DeleteRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRecordsRequest) GoString() string {
	return s.String()
}

func (s *DeleteRecordsRequest) SetAlgorithmType(v string) *DeleteRecordsRequest {
	s.AlgorithmType = &v
	return s
}

func (s *DeleteRecordsRequest) SetAttributeName(v string) *DeleteRecordsRequest {
	s.AttributeName = &v
	return s
}

func (s *DeleteRecordsRequest) SetCorpId(v string) *DeleteRecordsRequest {
	s.CorpId = &v
	return s
}

func (s *DeleteRecordsRequest) SetOperatorType(v string) *DeleteRecordsRequest {
	s.OperatorType = &v
	return s
}

func (s *DeleteRecordsRequest) SetValue(v string) *DeleteRecordsRequest {
	s.Value = &v
	return s
}

type DeleteRecordsResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRecordsResponseBody) SetCode(v string) *DeleteRecordsResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteRecordsResponseBody) SetData(v string) *DeleteRecordsResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteRecordsResponseBody) SetMessage(v string) *DeleteRecordsResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteRecordsResponseBody) SetRequestId(v string) *DeleteRecordsResponseBody {
	s.RequestId = &v
	return s
}

type DeleteRecordsResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRecordsResponse) GoString() string {
	return s.String()
}

func (s *DeleteRecordsResponse) SetHeaders(v map[string]*string) *DeleteRecordsResponse {
	s.Headers = v
	return s
}

func (s *DeleteRecordsResponse) SetBody(v *DeleteRecordsResponseBody) *DeleteRecordsResponse {
	s.Body = v
	return s
}

type DeleteUserRequest struct {
	CorpId   *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	IsvSubId *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	UserId   *int64  `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s DeleteUserRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserRequest) GoString() string {
	return s.String()
}

func (s *DeleteUserRequest) SetCorpId(v string) *DeleteUserRequest {
	s.CorpId = &v
	return s
}

func (s *DeleteUserRequest) SetIsvSubId(v string) *DeleteUserRequest {
	s.IsvSubId = &v
	return s
}

func (s *DeleteUserRequest) SetUserId(v int64) *DeleteUserRequest {
	s.UserId = &v
	return s
}

type DeleteUserResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteUserResponseBody) SetCode(v string) *DeleteUserResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteUserResponseBody) SetData(v bool) *DeleteUserResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteUserResponseBody) SetMessage(v string) *DeleteUserResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteUserResponseBody) SetRequestId(v string) *DeleteUserResponseBody {
	s.RequestId = &v
	return s
}

type DeleteUserResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteUserResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserResponse) GoString() string {
	return s.String()
}

func (s *DeleteUserResponse) SetHeaders(v map[string]*string) *DeleteUserResponse {
	s.Headers = v
	return s
}

func (s *DeleteUserResponse) SetBody(v *DeleteUserResponseBody) *DeleteUserResponse {
	s.Body = v
	return s
}

type DeleteUserGroupRequest struct {
	CorpId      *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	IsvSubId    *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s DeleteUserGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteUserGroupRequest) SetCorpId(v string) *DeleteUserGroupRequest {
	s.CorpId = &v
	return s
}

func (s *DeleteUserGroupRequest) SetIsvSubId(v string) *DeleteUserGroupRequest {
	s.IsvSubId = &v
	return s
}

func (s *DeleteUserGroupRequest) SetUserGroupId(v string) *DeleteUserGroupRequest {
	s.UserGroupId = &v
	return s
}

type DeleteUserGroupResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteUserGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteUserGroupResponseBody) SetCode(v string) *DeleteUserGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteUserGroupResponseBody) SetData(v bool) *DeleteUserGroupResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteUserGroupResponseBody) SetMessage(v string) *DeleteUserGroupResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteUserGroupResponseBody) SetRequestId(v string) *DeleteUserGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteUserGroupResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteUserGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteUserGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteUserGroupResponse) SetHeaders(v map[string]*string) *DeleteUserGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteUserGroupResponse) SetBody(v *DeleteUserGroupResponseBody) *DeleteUserGroupResponse {
	s.Body = v
	return s
}

type DeleteVideoSummaryTaskRequest struct {
	CorpId *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DeleteVideoSummaryTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVideoSummaryTaskRequest) GoString() string {
	return s.String()
}

func (s *DeleteVideoSummaryTaskRequest) SetCorpId(v string) *DeleteVideoSummaryTaskRequest {
	s.CorpId = &v
	return s
}

func (s *DeleteVideoSummaryTaskRequest) SetTaskId(v string) *DeleteVideoSummaryTaskRequest {
	s.TaskId = &v
	return s
}

type DeleteVideoSummaryTaskResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteVideoSummaryTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteVideoSummaryTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteVideoSummaryTaskResponseBody) SetCode(v string) *DeleteVideoSummaryTaskResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteVideoSummaryTaskResponseBody) SetData(v string) *DeleteVideoSummaryTaskResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteVideoSummaryTaskResponseBody) SetMessage(v string) *DeleteVideoSummaryTaskResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteVideoSummaryTaskResponseBody) SetRequestId(v string) *DeleteVideoSummaryTaskResponseBody {
	s.RequestId = &v
	return s
}

type DeleteVideoSummaryTaskResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteVideoSummaryTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteVideoSummaryTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVideoSummaryTaskResponse) GoString() string {
	return s.String()
}

func (s *DeleteVideoSummaryTaskResponse) SetHeaders(v map[string]*string) *DeleteVideoSummaryTaskResponse {
	s.Headers = v
	return s
}

func (s *DeleteVideoSummaryTaskResponse) SetBody(v *DeleteVideoSummaryTaskResponseBody) *DeleteVideoSummaryTaskResponse {
	s.Body = v
	return s
}

type DeleteWatchPoliciesRequest struct {
	WatchPolicyIds *string `json:"WatchPolicyIds,omitempty" xml:"WatchPolicyIds,omitempty"`
}

func (s DeleteWatchPoliciesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteWatchPoliciesRequest) GoString() string {
	return s.String()
}

func (s *DeleteWatchPoliciesRequest) SetWatchPolicyIds(v string) *DeleteWatchPoliciesRequest {
	s.WatchPolicyIds = &v
	return s
}

type DeleteWatchPoliciesResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteWatchPoliciesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteWatchPoliciesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteWatchPoliciesResponseBody) SetCode(v string) *DeleteWatchPoliciesResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteWatchPoliciesResponseBody) SetMessage(v string) *DeleteWatchPoliciesResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteWatchPoliciesResponseBody) SetRequestId(v string) *DeleteWatchPoliciesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteWatchPoliciesResponseBody) SetSuccess(v bool) *DeleteWatchPoliciesResponseBody {
	s.Success = &v
	return s
}

type DeleteWatchPoliciesResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteWatchPoliciesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteWatchPoliciesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteWatchPoliciesResponse) GoString() string {
	return s.String()
}

func (s *DeleteWatchPoliciesResponse) SetHeaders(v map[string]*string) *DeleteWatchPoliciesResponse {
	s.Headers = v
	return s
}

func (s *DeleteWatchPoliciesResponse) SetBody(v *DeleteWatchPoliciesResponseBody) *DeleteWatchPoliciesResponse {
	s.Body = v
	return s
}

type DeleteWatchTasksRequest struct {
	WatchTaskIds *string `json:"WatchTaskIds,omitempty" xml:"WatchTaskIds,omitempty"`
}

func (s DeleteWatchTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteWatchTasksRequest) GoString() string {
	return s.String()
}

func (s *DeleteWatchTasksRequest) SetWatchTaskIds(v string) *DeleteWatchTasksRequest {
	s.WatchTaskIds = &v
	return s
}

type DeleteWatchTasksResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteWatchTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteWatchTasksResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteWatchTasksResponseBody) SetCode(v string) *DeleteWatchTasksResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteWatchTasksResponseBody) SetMessage(v string) *DeleteWatchTasksResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteWatchTasksResponseBody) SetRequestId(v string) *DeleteWatchTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteWatchTasksResponseBody) SetSuccess(v bool) *DeleteWatchTasksResponseBody {
	s.Success = &v
	return s
}

type DeleteWatchTasksResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteWatchTasksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteWatchTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteWatchTasksResponse) GoString() string {
	return s.String()
}

func (s *DeleteWatchTasksResponse) SetHeaders(v map[string]*string) *DeleteWatchTasksResponse {
	s.Headers = v
	return s
}

func (s *DeleteWatchTasksResponse) SetBody(v *DeleteWatchTasksResponseBody) *DeleteWatchTasksResponse {
	s.Body = v
	return s
}

type DescribeAIInstanceRequest struct {
	// 实例id
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// 实例名称
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// 当前页序号
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// 每页显示多少条数据
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// 项目id
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s DescribeAIInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAIInstanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeAIInstanceRequest) SetInstanceId(v string) *DescribeAIInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeAIInstanceRequest) SetInstanceName(v string) *DescribeAIInstanceRequest {
	s.InstanceName = &v
	return s
}

func (s *DescribeAIInstanceRequest) SetPageNumber(v int64) *DescribeAIInstanceRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAIInstanceRequest) SetPageSize(v int64) *DescribeAIInstanceRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAIInstanceRequest) SetProjectId(v string) *DescribeAIInstanceRequest {
	s.ProjectId = &v
	return s
}

type DescribeAIInstanceResponseBody struct {
	// 返回错误码
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// 返回数据
	Data *DescribeAIInstanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// 错误信息
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAIInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAIInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAIInstanceResponseBody) SetCode(v string) *DescribeAIInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAIInstanceResponseBody) SetData(v *DescribeAIInstanceResponseBodyData) *DescribeAIInstanceResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAIInstanceResponseBody) SetMessage(v string) *DescribeAIInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAIInstanceResponseBody) SetRequestId(v string) *DescribeAIInstanceResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAIInstanceResponseBodyData struct {
	// 当前页序号
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// 每页显示多少条
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// 返回数据条目
	Records []*DescribeAIInstanceResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	// 总数据数
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAIInstanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeAIInstanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeAIInstanceResponseBodyData) SetPageNumber(v int64) *DescribeAIInstanceResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *DescribeAIInstanceResponseBodyData) SetPageSize(v int64) *DescribeAIInstanceResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *DescribeAIInstanceResponseBodyData) SetRecords(v []*DescribeAIInstanceResponseBodyDataRecords) *DescribeAIInstanceResponseBodyData {
	s.Records = v
	return s
}

func (s *DescribeAIInstanceResponseBodyData) SetTotalCount(v int64) *DescribeAIInstanceResponseBodyData {
	s.TotalCount = &v
	return s
}

type DescribeAIInstanceResponseBodyDataRecords struct {
	// ACU使用数量
	AcuUsed *int64 `json:"AcuUsed,omitempty" xml:"AcuUsed,omitempty"`
	// 算子ID
	AlgorithmId *string `json:"AlgorithmId,omitempty" xml:"AlgorithmId,omitempty"`
	// 算子名称
	AlgorithmName *string `json:"AlgorithmName,omitempty" xml:"AlgorithmName,omitempty"`
	// 实例中计算的摄像机数量。 仅当DataSource是Camera时返回。
	CameraNumber *int64 `json:"CameraNumber,omitempty" xml:"CameraNumber,omitempty"`
	// 计算类型
	ComputeType *string `json:"ComputeType,omitempty" xml:"ComputeType,omitempty"`
	// 实例创建时间
	CreateDateTime *string `json:"CreateDateTime,omitempty" xml:"CreateDateTime,omitempty"`
	// 数据来源
	DataSource *string `json:"DataSource,omitempty" xml:"DataSource,omitempty"`
	// 数据类型
	DataType *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	// 实例ID
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// 实例名称
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// 含义随ScheduleType取值不同
	ScheduleCycleDates *string `json:"ScheduleCycleDates,omitempty" xml:"ScheduleCycleDates,omitempty"`
	// 执行时间段
	ScheduleTimes *string `json:"ScheduleTimes,omitempty" xml:"ScheduleTimes,omitempty"`
	// 调度类型
	ScheduleType *string `json:"ScheduleType,omitempty" xml:"ScheduleType,omitempty"`
	// 多少秒抽取1帧，取值范围[0, 3600]。 0表示不抽帧。
	Spf *int64 `json:"Spf,omitempty" xml:"Spf,omitempty"`
	// 实力状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 预计存储量
	Storage *float64 `json:"Storage,omitempty" xml:"Storage,omitempty"`
}

func (s DescribeAIInstanceResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s DescribeAIInstanceResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *DescribeAIInstanceResponseBodyDataRecords) SetAcuUsed(v int64) *DescribeAIInstanceResponseBodyDataRecords {
	s.AcuUsed = &v
	return s
}

func (s *DescribeAIInstanceResponseBodyDataRecords) SetAlgorithmId(v string) *DescribeAIInstanceResponseBodyDataRecords {
	s.AlgorithmId = &v
	return s
}

func (s *DescribeAIInstanceResponseBodyDataRecords) SetAlgorithmName(v string) *DescribeAIInstanceResponseBodyDataRecords {
	s.AlgorithmName = &v
	return s
}

func (s *DescribeAIInstanceResponseBodyDataRecords) SetCameraNumber(v int64) *DescribeAIInstanceResponseBodyDataRecords {
	s.CameraNumber = &v
	return s
}

func (s *DescribeAIInstanceResponseBodyDataRecords) SetComputeType(v string) *DescribeAIInstanceResponseBodyDataRecords {
	s.ComputeType = &v
	return s
}

func (s *DescribeAIInstanceResponseBodyDataRecords) SetCreateDateTime(v string) *DescribeAIInstanceResponseBodyDataRecords {
	s.CreateDateTime = &v
	return s
}

func (s *DescribeAIInstanceResponseBodyDataRecords) SetDataSource(v string) *DescribeAIInstanceResponseBodyDataRecords {
	s.DataSource = &v
	return s
}

func (s *DescribeAIInstanceResponseBodyDataRecords) SetDataType(v string) *DescribeAIInstanceResponseBodyDataRecords {
	s.DataType = &v
	return s
}

func (s *DescribeAIInstanceResponseBodyDataRecords) SetInstanceId(v string) *DescribeAIInstanceResponseBodyDataRecords {
	s.InstanceId = &v
	return s
}

func (s *DescribeAIInstanceResponseBodyDataRecords) SetInstanceName(v string) *DescribeAIInstanceResponseBodyDataRecords {
	s.InstanceName = &v
	return s
}

func (s *DescribeAIInstanceResponseBodyDataRecords) SetScheduleCycleDates(v string) *DescribeAIInstanceResponseBodyDataRecords {
	s.ScheduleCycleDates = &v
	return s
}

func (s *DescribeAIInstanceResponseBodyDataRecords) SetScheduleTimes(v string) *DescribeAIInstanceResponseBodyDataRecords {
	s.ScheduleTimes = &v
	return s
}

func (s *DescribeAIInstanceResponseBodyDataRecords) SetScheduleType(v string) *DescribeAIInstanceResponseBodyDataRecords {
	s.ScheduleType = &v
	return s
}

func (s *DescribeAIInstanceResponseBodyDataRecords) SetSpf(v int64) *DescribeAIInstanceResponseBodyDataRecords {
	s.Spf = &v
	return s
}

func (s *DescribeAIInstanceResponseBodyDataRecords) SetStatus(v string) *DescribeAIInstanceResponseBodyDataRecords {
	s.Status = &v
	return s
}

func (s *DescribeAIInstanceResponseBodyDataRecords) SetStorage(v float64) *DescribeAIInstanceResponseBodyDataRecords {
	s.Storage = &v
	return s
}

type DescribeAIInstanceResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeAIInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAIInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAIInstanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeAIInstanceResponse) SetHeaders(v map[string]*string) *DescribeAIInstanceResponse {
	s.Headers = v
	return s
}

func (s *DescribeAIInstanceResponse) SetBody(v *DescribeAIInstanceResponseBody) *DescribeAIInstanceResponse {
	s.Body = v
	return s
}

type DescribeAiotDevicesRequest struct {
	CorpIdList *string `json:"CorpIdList,omitempty" xml:"CorpIdList,omitempty"`
	IdList     *string `json:"IdList,omitempty" xml:"IdList,omitempty"`
	PageNum    *int64  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize   *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeAiotDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAiotDevicesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAiotDevicesRequest) SetCorpIdList(v string) *DescribeAiotDevicesRequest {
	s.CorpIdList = &v
	return s
}

func (s *DescribeAiotDevicesRequest) SetIdList(v string) *DescribeAiotDevicesRequest {
	s.IdList = &v
	return s
}

func (s *DescribeAiotDevicesRequest) SetPageNum(v int64) *DescribeAiotDevicesRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeAiotDevicesRequest) SetPageSize(v int64) *DescribeAiotDevicesRequest {
	s.PageSize = &v
	return s
}

type DescribeAiotDevicesResponseBody struct {
	AiotDevices *DescribeAiotDevicesResponseBodyAiotDevices `json:"AiotDevices,omitempty" xml:"AiotDevices,omitempty" type:"Struct"`
	Code        *string                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Message     *string                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAiotDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAiotDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAiotDevicesResponseBody) SetAiotDevices(v *DescribeAiotDevicesResponseBodyAiotDevices) *DescribeAiotDevicesResponseBody {
	s.AiotDevices = v
	return s
}

func (s *DescribeAiotDevicesResponseBody) SetCode(v string) *DescribeAiotDevicesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAiotDevicesResponseBody) SetMessage(v string) *DescribeAiotDevicesResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAiotDevicesResponseBody) SetRequestId(v string) *DescribeAiotDevicesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAiotDevicesResponseBodyAiotDevices struct {
	AiotDeviceList []*DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList `json:"AiotDeviceList,omitempty" xml:"AiotDeviceList,omitempty" type:"Repeated"`
	PageNum        *int64                                                      `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize       *int64                                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalNum       *int64                                                      `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
}

func (s DescribeAiotDevicesResponseBodyAiotDevices) String() string {
	return tea.Prettify(s)
}

func (s DescribeAiotDevicesResponseBodyAiotDevices) GoString() string {
	return s.String()
}

func (s *DescribeAiotDevicesResponseBodyAiotDevices) SetAiotDeviceList(v []*DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) *DescribeAiotDevicesResponseBodyAiotDevices {
	s.AiotDeviceList = v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevices) SetPageNum(v int64) *DescribeAiotDevicesResponseBodyAiotDevices {
	s.PageNum = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevices) SetPageSize(v int64) *DescribeAiotDevicesResponseBodyAiotDevices {
	s.PageSize = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevices) SetTotalNum(v int64) *DescribeAiotDevicesResponseBodyAiotDevices {
	s.TotalNum = &v
	return s
}

type DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList struct {
	CapDirection     *string  `json:"CapDirection,omitempty" xml:"CapDirection,omitempty"`
	CorpId           *string  `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DeviceId         *string  `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	DeviceType       *string  `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	FirmwareVersion  *string  `json:"FirmwareVersion,omitempty" xml:"FirmwareVersion,omitempty"`
	IPAddr           *string  `json:"IPAddr,omitempty" xml:"IPAddr,omitempty"`
	IPV6Addr         *string  `json:"IPV6Addr,omitempty" xml:"IPV6Addr,omitempty"`
	IPv4Gateway      *string  `json:"IPv4Gateway,omitempty" xml:"IPv4Gateway,omitempty"`
	IPv4Netmask      *string  `json:"IPv4Netmask,omitempty" xml:"IPv4Netmask,omitempty"`
	Id               *string  `json:"Id,omitempty" xml:"Id,omitempty"`
	IsOnline         *string  `json:"IsOnline,omitempty" xml:"IsOnline,omitempty"`
	Latitude         *float32 `json:"Latitude,omitempty" xml:"Latitude,omitempty"`
	Longitude        *float32 `json:"Longitude,omitempty" xml:"Longitude,omitempty"`
	MAC              *string  `json:"MAC,omitempty" xml:"MAC,omitempty"`
	Manufacturer     *string  `json:"Manufacturer,omitempty" xml:"Manufacturer,omitempty"`
	Model            *string  `json:"Model,omitempty" xml:"Model,omitempty"`
	MonitorAreaDesc  *string  `json:"MonitorAreaDesc,omitempty" xml:"MonitorAreaDesc,omitempty"`
	MonitorDirection *string  `json:"MonitorDirection,omitempty" xml:"MonitorDirection,omitempty"`
	Name             *string  `json:"Name,omitempty" xml:"Name,omitempty"`
	OrgCode          *string  `json:"OrgCode,omitempty" xml:"OrgCode,omitempty"`
	OwnerApsID       *string  `json:"OwnerApsID,omitempty" xml:"OwnerApsID,omitempty"`
	Password         *string  `json:"Password,omitempty" xml:"Password,omitempty"`
	Place            *string  `json:"Place,omitempty" xml:"Place,omitempty"`
	PlaceCode        *string  `json:"PlaceCode,omitempty" xml:"PlaceCode,omitempty"`
	Port             *int64   `json:"Port,omitempty" xml:"Port,omitempty"`
	SerialNuber      *string  `json:"SerialNuber,omitempty" xml:"SerialNuber,omitempty"`
	UserId           *string  `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) GoString() string {
	return s.String()
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetCapDirection(v string) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.CapDirection = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetCorpId(v string) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.CorpId = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetDeviceId(v string) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.DeviceId = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetDeviceType(v string) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.DeviceType = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetFirmwareVersion(v string) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.FirmwareVersion = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetIPAddr(v string) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.IPAddr = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetIPV6Addr(v string) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.IPV6Addr = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetIPv4Gateway(v string) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.IPv4Gateway = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetIPv4Netmask(v string) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.IPv4Netmask = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetId(v string) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.Id = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetIsOnline(v string) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.IsOnline = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetLatitude(v float32) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.Latitude = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetLongitude(v float32) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.Longitude = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetMAC(v string) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.MAC = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetManufacturer(v string) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.Manufacturer = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetModel(v string) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.Model = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetMonitorAreaDesc(v string) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.MonitorAreaDesc = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetMonitorDirection(v string) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.MonitorDirection = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetName(v string) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.Name = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetOrgCode(v string) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.OrgCode = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetOwnerApsID(v string) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.OwnerApsID = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetPassword(v string) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.Password = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetPlace(v string) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.Place = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetPlaceCode(v string) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.PlaceCode = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetPort(v int64) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.Port = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetSerialNuber(v string) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.SerialNuber = &v
	return s
}

func (s *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList) SetUserId(v string) *DescribeAiotDevicesResponseBodyAiotDevicesAiotDeviceList {
	s.UserId = &v
	return s
}

type DescribeAiotDevicesResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeAiotDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAiotDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAiotDevicesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAiotDevicesResponse) SetHeaders(v map[string]*string) *DescribeAiotDevicesResponse {
	s.Headers = v
	return s
}

func (s *DescribeAiotDevicesResponse) SetBody(v *DescribeAiotDevicesResponseBody) *DescribeAiotDevicesResponse {
	s.Body = v
	return s
}

type DescribeAiotPersonTableItemsRequest struct {
	Id                *string `json:"Id,omitempty" xml:"Id,omitempty"`
	PageNum           *int64  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize          *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PersonTableId     *string `json:"PersonTableId,omitempty" xml:"PersonTableId,omitempty"`
	PersonTableItemId *string `json:"PersonTableItemId,omitempty" xml:"PersonTableItemId,omitempty"`
}

func (s DescribeAiotPersonTableItemsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAiotPersonTableItemsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAiotPersonTableItemsRequest) SetId(v string) *DescribeAiotPersonTableItemsRequest {
	s.Id = &v
	return s
}

func (s *DescribeAiotPersonTableItemsRequest) SetPageNum(v int64) *DescribeAiotPersonTableItemsRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeAiotPersonTableItemsRequest) SetPageSize(v int64) *DescribeAiotPersonTableItemsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAiotPersonTableItemsRequest) SetPersonTableId(v string) *DescribeAiotPersonTableItemsRequest {
	s.PersonTableId = &v
	return s
}

func (s *DescribeAiotPersonTableItemsRequest) SetPersonTableItemId(v string) *DescribeAiotPersonTableItemsRequest {
	s.PersonTableItemId = &v
	return s
}

type DescribeAiotPersonTableItemsResponseBody struct {
	Code             *string                                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Message          *string                                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	PersonTableItems *DescribeAiotPersonTableItemsResponseBodyPersonTableItems `json:"PersonTableItems,omitempty" xml:"PersonTableItems,omitempty" type:"Struct"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAiotPersonTableItemsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAiotPersonTableItemsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAiotPersonTableItemsResponseBody) SetCode(v string) *DescribeAiotPersonTableItemsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBody) SetMessage(v string) *DescribeAiotPersonTableItemsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBody) SetPersonTableItems(v *DescribeAiotPersonTableItemsResponseBodyPersonTableItems) *DescribeAiotPersonTableItemsResponseBody {
	s.PersonTableItems = v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBody) SetRequestId(v string) *DescribeAiotPersonTableItemsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAiotPersonTableItemsResponseBodyPersonTableItems struct {
	PageNum             *int64                                                                         `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize            *int64                                                                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PersonTableItemList []*DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList `json:"PersonTableItemList,omitempty" xml:"PersonTableItemList,omitempty" type:"Repeated"`
	TotalNum            *int64                                                                         `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
}

func (s DescribeAiotPersonTableItemsResponseBodyPersonTableItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeAiotPersonTableItemsResponseBodyPersonTableItems) GoString() string {
	return s.String()
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItems) SetPageNum(v int64) *DescribeAiotPersonTableItemsResponseBodyPersonTableItems {
	s.PageNum = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItems) SetPageSize(v int64) *DescribeAiotPersonTableItemsResponseBodyPersonTableItems {
	s.PageSize = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItems) SetPersonTableItemList(v []*DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList) *DescribeAiotPersonTableItemsResponseBodyPersonTableItems {
	s.PersonTableItemList = v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItems) SetTotalNum(v int64) *DescribeAiotPersonTableItemsResponseBodyPersonTableItems {
	s.TotalNum = &v
	return s
}

type DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList struct {
	IdentificationList []*DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListIdentificationList `json:"IdentificationList,omitempty" xml:"IdentificationList,omitempty" type:"Repeated"`
	IdentificationNum  *int64                                                                                           `json:"IdentificationNum,omitempty" xml:"IdentificationNum,omitempty"`
	ImageList          []*DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList          `json:"ImageList,omitempty" xml:"ImageList,omitempty" type:"Repeated"`
	ImageNum           *int64                                                                                           `json:"ImageNum,omitempty" xml:"ImageNum,omitempty"`
	LastChange         *string                                                                                          `json:"LastChange,omitempty" xml:"LastChange,omitempty"`
	PersonCode         *string                                                                                          `json:"PersonCode,omitempty" xml:"PersonCode,omitempty"`
	PersonId           *string                                                                                          `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	PersonName         *string                                                                                          `json:"PersonName,omitempty" xml:"PersonName,omitempty"`
	PersonTableId      *string                                                                                          `json:"PersonTableId,omitempty" xml:"PersonTableId,omitempty"`
	Remarks            *string                                                                                          `json:"Remarks,omitempty" xml:"Remarks,omitempty"`
}

func (s DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList) GoString() string {
	return s.String()
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList) SetIdentificationList(v []*DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListIdentificationList) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList {
	s.IdentificationList = v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList) SetIdentificationNum(v int64) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList {
	s.IdentificationNum = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList) SetImageList(v []*DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList {
	s.ImageList = v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList) SetImageNum(v int64) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList {
	s.ImageNum = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList) SetLastChange(v string) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList {
	s.LastChange = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList) SetPersonCode(v string) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList {
	s.PersonCode = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList) SetPersonId(v string) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList {
	s.PersonId = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList) SetPersonName(v string) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList {
	s.PersonName = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList) SetPersonTableId(v string) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList {
	s.PersonTableId = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList) SetRemarks(v string) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemList {
	s.Remarks = &v
	return s
}

type DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListIdentificationList struct {
	Number *string `json:"Number,omitempty" xml:"Number,omitempty"`
	Type   *int64  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListIdentificationList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListIdentificationList) GoString() string {
	return s.String()
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListIdentificationList) SetNumber(v string) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListIdentificationList {
	s.Number = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListIdentificationList) SetType(v int64) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListIdentificationList {
	s.Type = &v
	return s
}

type DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList struct {
	Data        *string                                                                                          `json:"Data,omitempty" xml:"Data,omitempty"`
	DeviceId    *string                                                                                          `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	EventSort   *string                                                                                          `json:"EventSort,omitempty" xml:"EventSort,omitempty"`
	FeatureInfo *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageListFeatureInfo `json:"FeatureInfo,omitempty" xml:"FeatureInfo,omitempty" type:"Struct"`
	FileFormat  *string                                                                                          `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	Height      *int64                                                                                           `json:"Height,omitempty" xml:"Height,omitempty"`
	ImageId     *string                                                                                          `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ShotTime    *string                                                                                          `json:"ShotTime,omitempty" xml:"ShotTime,omitempty"`
	Size        *int64                                                                                           `json:"Size,omitempty" xml:"Size,omitempty"`
	StoragePath *string                                                                                          `json:"StoragePath,omitempty" xml:"StoragePath,omitempty"`
	Type        *string                                                                                          `json:"Type,omitempty" xml:"Type,omitempty"`
	Width       *int64                                                                                           `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList) GoString() string {
	return s.String()
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList) SetData(v string) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList {
	s.Data = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList) SetDeviceId(v string) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList {
	s.DeviceId = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList) SetEventSort(v string) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList {
	s.EventSort = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList) SetFeatureInfo(v *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageListFeatureInfo) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList {
	s.FeatureInfo = v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList) SetFileFormat(v string) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList {
	s.FileFormat = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList) SetHeight(v int64) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList {
	s.Height = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList) SetImageId(v string) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList {
	s.ImageId = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList) SetShotTime(v string) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList {
	s.ShotTime = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList) SetSize(v int64) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList {
	s.Size = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList) SetStoragePath(v string) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList {
	s.StoragePath = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList) SetType(v string) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList {
	s.Type = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList) SetWidth(v int64) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageList {
	s.Width = &v
	return s
}

type DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageListFeatureInfo struct {
	AlgorithmType    *string `json:"AlgorithmType,omitempty" xml:"AlgorithmType,omitempty"`
	AlgorithmVersion *string `json:"AlgorithmVersion,omitempty" xml:"AlgorithmVersion,omitempty"`
	FeatureData      *string `json:"FeatureData,omitempty" xml:"FeatureData,omitempty"`
	ImageId          *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ObjectId         *string `json:"ObjectId,omitempty" xml:"ObjectId,omitempty"`
	TableId          *string `json:"TableId,omitempty" xml:"TableId,omitempty"`
	Vendor           *string `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageListFeatureInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageListFeatureInfo) GoString() string {
	return s.String()
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageListFeatureInfo) SetAlgorithmType(v string) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageListFeatureInfo {
	s.AlgorithmType = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageListFeatureInfo) SetAlgorithmVersion(v string) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageListFeatureInfo {
	s.AlgorithmVersion = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageListFeatureInfo) SetFeatureData(v string) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageListFeatureInfo {
	s.FeatureData = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageListFeatureInfo) SetImageId(v string) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageListFeatureInfo {
	s.ImageId = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageListFeatureInfo) SetObjectId(v string) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageListFeatureInfo {
	s.ObjectId = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageListFeatureInfo) SetTableId(v string) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageListFeatureInfo {
	s.TableId = &v
	return s
}

func (s *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageListFeatureInfo) SetVendor(v string) *DescribeAiotPersonTableItemsResponseBodyPersonTableItemsPersonTableItemListImageListFeatureInfo {
	s.Vendor = &v
	return s
}

type DescribeAiotPersonTableItemsResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeAiotPersonTableItemsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAiotPersonTableItemsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAiotPersonTableItemsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAiotPersonTableItemsResponse) SetHeaders(v map[string]*string) *DescribeAiotPersonTableItemsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAiotPersonTableItemsResponse) SetBody(v *DescribeAiotPersonTableItemsResponseBody) *DescribeAiotPersonTableItemsResponse {
	s.Body = v
	return s
}

type DescribeAiotPersonTablesRequest struct {
	Id                *string `json:"Id,omitempty" xml:"Id,omitempty"`
	PersonTableIdList *string `json:"PersonTableIdList,omitempty" xml:"PersonTableIdList,omitempty"`
}

func (s DescribeAiotPersonTablesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAiotPersonTablesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAiotPersonTablesRequest) SetId(v string) *DescribeAiotPersonTablesRequest {
	s.Id = &v
	return s
}

func (s *DescribeAiotPersonTablesRequest) SetPersonTableIdList(v string) *DescribeAiotPersonTablesRequest {
	s.PersonTableIdList = &v
	return s
}

type DescribeAiotPersonTablesResponseBody struct {
	Code            *string                                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Message         *string                                                `json:"Message,omitempty" xml:"Message,omitempty"`
	PersonTableList []*DescribeAiotPersonTablesResponseBodyPersonTableList `json:"PersonTableList,omitempty" xml:"PersonTableList,omitempty" type:"Repeated"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAiotPersonTablesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAiotPersonTablesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAiotPersonTablesResponseBody) SetCode(v string) *DescribeAiotPersonTablesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAiotPersonTablesResponseBody) SetMessage(v string) *DescribeAiotPersonTablesResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAiotPersonTablesResponseBody) SetPersonTableList(v []*DescribeAiotPersonTablesResponseBodyPersonTableList) *DescribeAiotPersonTablesResponseBody {
	s.PersonTableList = v
	return s
}

func (s *DescribeAiotPersonTablesResponseBody) SetRequestId(v string) *DescribeAiotPersonTablesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAiotPersonTablesResponseBodyPersonTableList struct {
	DeviceId              *string  `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	FaceNum               *int64   `json:"FaceNum,omitempty" xml:"FaceNum,omitempty"`
	LastChange            *string  `json:"LastChange,omitempty" xml:"LastChange,omitempty"`
	Name                  *string  `json:"Name,omitempty" xml:"Name,omitempty"`
	PersonNum             *int64   `json:"PersonNum,omitempty" xml:"PersonNum,omitempty"`
	PersonTableId         *string  `json:"PersonTableId,omitempty" xml:"PersonTableId,omitempty"`
	TotalPersonNum        *int64   `json:"TotalPersonNum,omitempty" xml:"TotalPersonNum,omitempty"`
	Type                  *int64   `json:"Type,omitempty" xml:"Type,omitempty"`
	VerificationModelList []*int64 `json:"VerificationModelList,omitempty" xml:"VerificationModelList,omitempty" type:"Repeated"`
}

func (s DescribeAiotPersonTablesResponseBodyPersonTableList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAiotPersonTablesResponseBodyPersonTableList) GoString() string {
	return s.String()
}

func (s *DescribeAiotPersonTablesResponseBodyPersonTableList) SetDeviceId(v string) *DescribeAiotPersonTablesResponseBodyPersonTableList {
	s.DeviceId = &v
	return s
}

func (s *DescribeAiotPersonTablesResponseBodyPersonTableList) SetFaceNum(v int64) *DescribeAiotPersonTablesResponseBodyPersonTableList {
	s.FaceNum = &v
	return s
}

func (s *DescribeAiotPersonTablesResponseBodyPersonTableList) SetLastChange(v string) *DescribeAiotPersonTablesResponseBodyPersonTableList {
	s.LastChange = &v
	return s
}

func (s *DescribeAiotPersonTablesResponseBodyPersonTableList) SetName(v string) *DescribeAiotPersonTablesResponseBodyPersonTableList {
	s.Name = &v
	return s
}

func (s *DescribeAiotPersonTablesResponseBodyPersonTableList) SetPersonNum(v int64) *DescribeAiotPersonTablesResponseBodyPersonTableList {
	s.PersonNum = &v
	return s
}

func (s *DescribeAiotPersonTablesResponseBodyPersonTableList) SetPersonTableId(v string) *DescribeAiotPersonTablesResponseBodyPersonTableList {
	s.PersonTableId = &v
	return s
}

func (s *DescribeAiotPersonTablesResponseBodyPersonTableList) SetTotalPersonNum(v int64) *DescribeAiotPersonTablesResponseBodyPersonTableList {
	s.TotalPersonNum = &v
	return s
}

func (s *DescribeAiotPersonTablesResponseBodyPersonTableList) SetType(v int64) *DescribeAiotPersonTablesResponseBodyPersonTableList {
	s.Type = &v
	return s
}

func (s *DescribeAiotPersonTablesResponseBodyPersonTableList) SetVerificationModelList(v []*int64) *DescribeAiotPersonTablesResponseBodyPersonTableList {
	s.VerificationModelList = v
	return s
}

type DescribeAiotPersonTablesResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeAiotPersonTablesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAiotPersonTablesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAiotPersonTablesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAiotPersonTablesResponse) SetHeaders(v map[string]*string) *DescribeAiotPersonTablesResponse {
	s.Headers = v
	return s
}

func (s *DescribeAiotPersonTablesResponse) SetBody(v *DescribeAiotPersonTablesResponseBody) *DescribeAiotPersonTablesResponse {
	s.Body = v
	return s
}

type DescribeAiotVehicleTableItemsRequest struct {
	Id                 *string `json:"Id,omitempty" xml:"Id,omitempty"`
	PageNum            *int64  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize           *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	VehicleTableId     *string `json:"VehicleTableId,omitempty" xml:"VehicleTableId,omitempty"`
	VehicleTableItemId *string `json:"VehicleTableItemId,omitempty" xml:"VehicleTableItemId,omitempty"`
}

func (s DescribeAiotVehicleTableItemsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAiotVehicleTableItemsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAiotVehicleTableItemsRequest) SetId(v string) *DescribeAiotVehicleTableItemsRequest {
	s.Id = &v
	return s
}

func (s *DescribeAiotVehicleTableItemsRequest) SetPageNum(v int64) *DescribeAiotVehicleTableItemsRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeAiotVehicleTableItemsRequest) SetPageSize(v int64) *DescribeAiotVehicleTableItemsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAiotVehicleTableItemsRequest) SetVehicleTableId(v string) *DescribeAiotVehicleTableItemsRequest {
	s.VehicleTableId = &v
	return s
}

func (s *DescribeAiotVehicleTableItemsRequest) SetVehicleTableItemId(v string) *DescribeAiotVehicleTableItemsRequest {
	s.VehicleTableItemId = &v
	return s
}

type DescribeAiotVehicleTableItemsResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId         *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	VehicleTableItems *DescribeAiotVehicleTableItemsResponseBodyVehicleTableItems `json:"VehicleTableItems,omitempty" xml:"VehicleTableItems,omitempty" type:"Struct"`
}

func (s DescribeAiotVehicleTableItemsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAiotVehicleTableItemsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAiotVehicleTableItemsResponseBody) SetCode(v string) *DescribeAiotVehicleTableItemsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAiotVehicleTableItemsResponseBody) SetMessage(v string) *DescribeAiotVehicleTableItemsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAiotVehicleTableItemsResponseBody) SetRequestId(v string) *DescribeAiotVehicleTableItemsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAiotVehicleTableItemsResponseBody) SetVehicleTableItems(v *DescribeAiotVehicleTableItemsResponseBodyVehicleTableItems) *DescribeAiotVehicleTableItemsResponseBody {
	s.VehicleTableItems = v
	return s
}

type DescribeAiotVehicleTableItemsResponseBodyVehicleTableItems struct {
	PageNum              *int64                                                                            `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize             *int64                                                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalNum             *int64                                                                            `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	VehicleTableItemList []*DescribeAiotVehicleTableItemsResponseBodyVehicleTableItemsVehicleTableItemList `json:"VehicleTableItemList,omitempty" xml:"VehicleTableItemList,omitempty" type:"Repeated"`
}

func (s DescribeAiotVehicleTableItemsResponseBodyVehicleTableItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeAiotVehicleTableItemsResponseBodyVehicleTableItems) GoString() string {
	return s.String()
}

func (s *DescribeAiotVehicleTableItemsResponseBodyVehicleTableItems) SetPageNum(v int64) *DescribeAiotVehicleTableItemsResponseBodyVehicleTableItems {
	s.PageNum = &v
	return s
}

func (s *DescribeAiotVehicleTableItemsResponseBodyVehicleTableItems) SetPageSize(v int64) *DescribeAiotVehicleTableItemsResponseBodyVehicleTableItems {
	s.PageSize = &v
	return s
}

func (s *DescribeAiotVehicleTableItemsResponseBodyVehicleTableItems) SetTotalNum(v int64) *DescribeAiotVehicleTableItemsResponseBodyVehicleTableItems {
	s.TotalNum = &v
	return s
}

func (s *DescribeAiotVehicleTableItemsResponseBodyVehicleTableItems) SetVehicleTableItemList(v []*DescribeAiotVehicleTableItemsResponseBodyVehicleTableItemsVehicleTableItemList) *DescribeAiotVehicleTableItemsResponseBodyVehicleTableItems {
	s.VehicleTableItemList = v
	return s
}

type DescribeAiotVehicleTableItemsResponseBodyVehicleTableItemsVehicleTableItemList struct {
	BeginTime          *string `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	EndTime            *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerName          *string `json:"OwnerName,omitempty" xml:"OwnerName,omitempty"`
	PhoneNo            *string `json:"PhoneNo,omitempty" xml:"PhoneNo,omitempty"`
	PlateNo            *string `json:"PlateNo,omitempty" xml:"PlateNo,omitempty"`
	Remarks            *string `json:"Remarks,omitempty" xml:"Remarks,omitempty"`
	VehicleTableId     *string `json:"VehicleTableId,omitempty" xml:"VehicleTableId,omitempty"`
	VehicleTableItemId *string `json:"VehicleTableItemId,omitempty" xml:"VehicleTableItemId,omitempty"`
}

func (s DescribeAiotVehicleTableItemsResponseBodyVehicleTableItemsVehicleTableItemList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAiotVehicleTableItemsResponseBodyVehicleTableItemsVehicleTableItemList) GoString() string {
	return s.String()
}

func (s *DescribeAiotVehicleTableItemsResponseBodyVehicleTableItemsVehicleTableItemList) SetBeginTime(v string) *DescribeAiotVehicleTableItemsResponseBodyVehicleTableItemsVehicleTableItemList {
	s.BeginTime = &v
	return s
}

func (s *DescribeAiotVehicleTableItemsResponseBodyVehicleTableItemsVehicleTableItemList) SetEndTime(v string) *DescribeAiotVehicleTableItemsResponseBodyVehicleTableItemsVehicleTableItemList {
	s.EndTime = &v
	return s
}

func (s *DescribeAiotVehicleTableItemsResponseBodyVehicleTableItemsVehicleTableItemList) SetOwnerName(v string) *DescribeAiotVehicleTableItemsResponseBodyVehicleTableItemsVehicleTableItemList {
	s.OwnerName = &v
	return s
}

func (s *DescribeAiotVehicleTableItemsResponseBodyVehicleTableItemsVehicleTableItemList) SetPhoneNo(v string) *DescribeAiotVehicleTableItemsResponseBodyVehicleTableItemsVehicleTableItemList {
	s.PhoneNo = &v
	return s
}

func (s *DescribeAiotVehicleTableItemsResponseBodyVehicleTableItemsVehicleTableItemList) SetPlateNo(v string) *DescribeAiotVehicleTableItemsResponseBodyVehicleTableItemsVehicleTableItemList {
	s.PlateNo = &v
	return s
}

func (s *DescribeAiotVehicleTableItemsResponseBodyVehicleTableItemsVehicleTableItemList) SetRemarks(v string) *DescribeAiotVehicleTableItemsResponseBodyVehicleTableItemsVehicleTableItemList {
	s.Remarks = &v
	return s
}

func (s *DescribeAiotVehicleTableItemsResponseBodyVehicleTableItemsVehicleTableItemList) SetVehicleTableId(v string) *DescribeAiotVehicleTableItemsResponseBodyVehicleTableItemsVehicleTableItemList {
	s.VehicleTableId = &v
	return s
}

func (s *DescribeAiotVehicleTableItemsResponseBodyVehicleTableItemsVehicleTableItemList) SetVehicleTableItemId(v string) *DescribeAiotVehicleTableItemsResponseBodyVehicleTableItemsVehicleTableItemList {
	s.VehicleTableItemId = &v
	return s
}

type DescribeAiotVehicleTableItemsResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeAiotVehicleTableItemsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAiotVehicleTableItemsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAiotVehicleTableItemsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAiotVehicleTableItemsResponse) SetHeaders(v map[string]*string) *DescribeAiotVehicleTableItemsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAiotVehicleTableItemsResponse) SetBody(v *DescribeAiotVehicleTableItemsResponseBody) *DescribeAiotVehicleTableItemsResponse {
	s.Body = v
	return s
}

type DescribeAiotVehicleTablesRequest struct {
	Id                 *string `json:"Id,omitempty" xml:"Id,omitempty"`
	VehicleTableIdList *string `json:"VehicleTableIdList,omitempty" xml:"VehicleTableIdList,omitempty"`
}

func (s DescribeAiotVehicleTablesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAiotVehicleTablesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAiotVehicleTablesRequest) SetId(v string) *DescribeAiotVehicleTablesRequest {
	s.Id = &v
	return s
}

func (s *DescribeAiotVehicleTablesRequest) SetVehicleTableIdList(v string) *DescribeAiotVehicleTablesRequest {
	s.VehicleTableIdList = &v
	return s
}

type DescribeAiotVehicleTablesResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId        *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	VehicleTableList []*DescribeAiotVehicleTablesResponseBodyVehicleTableList `json:"VehicleTableList,omitempty" xml:"VehicleTableList,omitempty" type:"Repeated"`
}

func (s DescribeAiotVehicleTablesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAiotVehicleTablesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAiotVehicleTablesResponseBody) SetCode(v string) *DescribeAiotVehicleTablesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAiotVehicleTablesResponseBody) SetMessage(v string) *DescribeAiotVehicleTablesResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAiotVehicleTablesResponseBody) SetRequestId(v string) *DescribeAiotVehicleTablesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAiotVehicleTablesResponseBody) SetVehicleTableList(v []*DescribeAiotVehicleTablesResponseBodyVehicleTableList) *DescribeAiotVehicleTablesResponseBody {
	s.VehicleTableList = v
	return s
}

type DescribeAiotVehicleTablesResponseBodyVehicleTableList struct {
	VehicleTableId   *string `json:"VehicleTableId,omitempty" xml:"VehicleTableId,omitempty"`
	VehicleTableName *string `json:"VehicleTableName,omitempty" xml:"VehicleTableName,omitempty"`
}

func (s DescribeAiotVehicleTablesResponseBodyVehicleTableList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAiotVehicleTablesResponseBodyVehicleTableList) GoString() string {
	return s.String()
}

func (s *DescribeAiotVehicleTablesResponseBodyVehicleTableList) SetVehicleTableId(v string) *DescribeAiotVehicleTablesResponseBodyVehicleTableList {
	s.VehicleTableId = &v
	return s
}

func (s *DescribeAiotVehicleTablesResponseBodyVehicleTableList) SetVehicleTableName(v string) *DescribeAiotVehicleTablesResponseBodyVehicleTableList {
	s.VehicleTableName = &v
	return s
}

type DescribeAiotVehicleTablesResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeAiotVehicleTablesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAiotVehicleTablesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAiotVehicleTablesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAiotVehicleTablesResponse) SetHeaders(v map[string]*string) *DescribeAiotVehicleTablesResponse {
	s.Headers = v
	return s
}

func (s *DescribeAiotVehicleTablesResponse) SetBody(v *DescribeAiotVehicleTablesResponseBody) *DescribeAiotVehicleTablesResponse {
	s.Body = v
	return s
}

type DescribeCameraForInstanceRequest struct {
	// 实例id
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// 当前页序号
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// 每页显示多少条数据
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeCameraForInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCameraForInstanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeCameraForInstanceRequest) SetInstanceId(v string) *DescribeCameraForInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeCameraForInstanceRequest) SetPageNumber(v int64) *DescribeCameraForInstanceRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeCameraForInstanceRequest) SetPageSize(v int64) *DescribeCameraForInstanceRequest {
	s.PageSize = &v
	return s
}

type DescribeCameraForInstanceResponseBody struct {
	// 返回错误码
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// 返回数据
	Data *DescribeCameraForInstanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// 错误信息
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeCameraForInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCameraForInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCameraForInstanceResponseBody) SetCode(v string) *DescribeCameraForInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeCameraForInstanceResponseBody) SetData(v *DescribeCameraForInstanceResponseBodyData) *DescribeCameraForInstanceResponseBody {
	s.Data = v
	return s
}

func (s *DescribeCameraForInstanceResponseBody) SetMessage(v string) *DescribeCameraForInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeCameraForInstanceResponseBody) SetRequestId(v string) *DescribeCameraForInstanceResponseBody {
	s.RequestId = &v
	return s
}

type DescribeCameraForInstanceResponseBodyData struct {
	// 当前页序号
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// 每页显示多少条
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// 返回数据条目
	Records []*DescribeCameraForInstanceResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	// 总数据数
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeCameraForInstanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeCameraForInstanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeCameraForInstanceResponseBodyData) SetPageNumber(v int64) *DescribeCameraForInstanceResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *DescribeCameraForInstanceResponseBodyData) SetPageSize(v int64) *DescribeCameraForInstanceResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *DescribeCameraForInstanceResponseBodyData) SetRecords(v []*DescribeCameraForInstanceResponseBodyDataRecords) *DescribeCameraForInstanceResponseBodyData {
	s.Records = v
	return s
}

func (s *DescribeCameraForInstanceResponseBodyData) SetTotalCount(v int64) *DescribeCameraForInstanceResponseBodyData {
	s.TotalCount = &v
	return s
}

type DescribeCameraForInstanceResponseBodyDataRecords struct {
	// 设备地址
	CameraAddress *string `json:"CameraAddress,omitempty" xml:"CameraAddress,omitempty"`
	// 设备编号
	CameraId *string `json:"CameraId,omitempty" xml:"CameraId,omitempty"`
	// 设备名称
	CameraName *string `json:"CameraName,omitempty" xml:"CameraName,omitempty"`
	// 设备在线状态。 1表示在线，0表示离线, 2表示待注册
	CameraStatus *int64 `json:"CameraStatus,omitempty" xml:"CameraStatus,omitempty"`
}

func (s DescribeCameraForInstanceResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s DescribeCameraForInstanceResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *DescribeCameraForInstanceResponseBodyDataRecords) SetCameraAddress(v string) *DescribeCameraForInstanceResponseBodyDataRecords {
	s.CameraAddress = &v
	return s
}

func (s *DescribeCameraForInstanceResponseBodyDataRecords) SetCameraId(v string) *DescribeCameraForInstanceResponseBodyDataRecords {
	s.CameraId = &v
	return s
}

func (s *DescribeCameraForInstanceResponseBodyDataRecords) SetCameraName(v string) *DescribeCameraForInstanceResponseBodyDataRecords {
	s.CameraName = &v
	return s
}

func (s *DescribeCameraForInstanceResponseBodyDataRecords) SetCameraStatus(v int64) *DescribeCameraForInstanceResponseBodyDataRecords {
	s.CameraStatus = &v
	return s
}

type DescribeCameraForInstanceResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeCameraForInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCameraForInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCameraForInstanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeCameraForInstanceResponse) SetHeaders(v map[string]*string) *DescribeCameraForInstanceResponse {
	s.Headers = v
	return s
}

func (s *DescribeCameraForInstanceResponse) SetBody(v *DescribeCameraForInstanceResponseBody) *DescribeCameraForInstanceResponse {
	s.Body = v
	return s
}

type DescribeChannelsRequest struct {
	DeviceFilter *string `json:"DeviceFilter,omitempty" xml:"DeviceFilter,omitempty"`
	DeviceStatus *string `json:"DeviceStatus,omitempty" xml:"DeviceStatus,omitempty"`
	NvrId        *string `json:"NvrId,omitempty" xml:"NvrId,omitempty"`
	PageNum      *int64  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize     *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ShowUnConfig *int64  `json:"ShowUnConfig,omitempty" xml:"ShowUnConfig,omitempty"`
}

func (s DescribeChannelsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeChannelsRequest) GoString() string {
	return s.String()
}

func (s *DescribeChannelsRequest) SetDeviceFilter(v string) *DescribeChannelsRequest {
	s.DeviceFilter = &v
	return s
}

func (s *DescribeChannelsRequest) SetDeviceStatus(v string) *DescribeChannelsRequest {
	s.DeviceStatus = &v
	return s
}

func (s *DescribeChannelsRequest) SetNvrId(v string) *DescribeChannelsRequest {
	s.NvrId = &v
	return s
}

func (s *DescribeChannelsRequest) SetPageNum(v int64) *DescribeChannelsRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeChannelsRequest) SetPageSize(v int64) *DescribeChannelsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeChannelsRequest) SetShowUnConfig(v int64) *DescribeChannelsRequest {
	s.ShowUnConfig = &v
	return s
}

type DescribeChannelsResponseBody struct {
	Code      *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *DescribeChannelsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                           `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeChannelsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeChannelsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeChannelsResponseBody) SetCode(v string) *DescribeChannelsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeChannelsResponseBody) SetData(v *DescribeChannelsResponseBodyData) *DescribeChannelsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeChannelsResponseBody) SetMessage(v string) *DescribeChannelsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeChannelsResponseBody) SetRequestId(v string) *DescribeChannelsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeChannelsResponseBodyData struct {
	PageNum      *int64                                     `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize     *int64                                     `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records      []*DescribeChannelsResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount   *int64                                     `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	TotalPage    *int64                                     `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
	UnConfigList []*string                                  `json:"UnConfigList,omitempty" xml:"UnConfigList,omitempty" type:"Repeated"`
}

func (s DescribeChannelsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeChannelsResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeChannelsResponseBodyData) SetPageNum(v int64) *DescribeChannelsResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *DescribeChannelsResponseBodyData) SetPageSize(v int64) *DescribeChannelsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *DescribeChannelsResponseBodyData) SetRecords(v []*DescribeChannelsResponseBodyDataRecords) *DescribeChannelsResponseBodyData {
	s.Records = v
	return s
}

func (s *DescribeChannelsResponseBodyData) SetTotalCount(v int64) *DescribeChannelsResponseBodyData {
	s.TotalCount = &v
	return s
}

func (s *DescribeChannelsResponseBodyData) SetTotalPage(v int64) *DescribeChannelsResponseBodyData {
	s.TotalPage = &v
	return s
}

func (s *DescribeChannelsResponseBodyData) SetUnConfigList(v []*string) *DescribeChannelsResponseBodyData {
	s.UnConfigList = v
	return s
}

type DescribeChannelsResponseBodyDataRecords struct {
	AudioEnable      *string `json:"AudioEnable,omitempty" xml:"AudioEnable,omitempty"`
	CorpId           *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	CreateTime       *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DatasourceType   *string `json:"DatasourceType,omitempty" xml:"DatasourceType,omitempty"`
	DeviceAddress    *string `json:"DeviceAddress,omitempty" xml:"DeviceAddress,omitempty"`
	DeviceDirection  *string `json:"DeviceDirection,omitempty" xml:"DeviceDirection,omitempty"`
	DeviceId         *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	DeviceIp         *string `json:"DeviceIp,omitempty" xml:"DeviceIp,omitempty"`
	DeviceModel      *string `json:"DeviceModel,omitempty" xml:"DeviceModel,omitempty"`
	DeviceName       *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DeviceRate       *string `json:"DeviceRate,omitempty" xml:"DeviceRate,omitempty"`
	DeviceResolution *string `json:"DeviceResolution,omitempty" xml:"DeviceResolution,omitempty"`
	DeviceSite       *string `json:"DeviceSite,omitempty" xml:"DeviceSite,omitempty"`
	DeviceSn         *string `json:"DeviceSn,omitempty" xml:"DeviceSn,omitempty"`
	DeviceStatus     *string `json:"DeviceStatus,omitempty" xml:"DeviceStatus,omitempty"`
	DeviceSubType    *string `json:"DeviceSubType,omitempty" xml:"DeviceSubType,omitempty"`
	DeviceType       *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	EncodeFormat     *string `json:"EncodeFormat,omitempty" xml:"EncodeFormat,omitempty"`
	FrameRate        *string `json:"FrameRate,omitempty" xml:"FrameRate,omitempty"`
	GovLength        *string `json:"GovLength,omitempty" xml:"GovLength,omitempty"`
	InProtocol       *string `json:"InProtocol,omitempty" xml:"InProtocol,omitempty"`
	Latitude         *string `json:"Latitude,omitempty" xml:"Latitude,omitempty"`
	Longitude        *string `json:"Longitude,omitempty" xml:"Longitude,omitempty"`
	ModifyTime       *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	OSDTimeEnable    *string `json:"OSDTimeEnable,omitempty" xml:"OSDTimeEnable,omitempty"`
	OSDTimeType      *string `json:"OSDTimeType,omitempty" xml:"OSDTimeType,omitempty"`
	OSDTimeX         *string `json:"OSDTimeX,omitempty" xml:"OSDTimeX,omitempty"`
	OSDTimeY         *string `json:"OSDTimeY,omitempty" xml:"OSDTimeY,omitempty"`
	ParentDeviceId   *string `json:"ParentDeviceId,omitempty" xml:"ParentDeviceId,omitempty"`
	Password         *string `json:"Password,omitempty" xml:"Password,omitempty"`
	ServerId         *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	ServerIp         *string `json:"ServerIp,omitempty" xml:"ServerIp,omitempty"`
	ServerPort       *string `json:"ServerPort,omitempty" xml:"ServerPort,omitempty"`
	ServerRealm      *string `json:"ServerRealm,omitempty" xml:"ServerRealm,omitempty"`
	StreamAction     *string `json:"StreamAction,omitempty" xml:"StreamAction,omitempty"`
	StreamStatus     *string `json:"StreamStatus,omitempty" xml:"StreamStatus,omitempty"`
	Vap              *string `json:"Vap,omitempty" xml:"Vap,omitempty"`
	Vendor           *string `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s DescribeChannelsResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s DescribeChannelsResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *DescribeChannelsResponseBodyDataRecords) SetAudioEnable(v string) *DescribeChannelsResponseBodyDataRecords {
	s.AudioEnable = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetCorpId(v string) *DescribeChannelsResponseBodyDataRecords {
	s.CorpId = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetCreateTime(v string) *DescribeChannelsResponseBodyDataRecords {
	s.CreateTime = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetDatasourceType(v string) *DescribeChannelsResponseBodyDataRecords {
	s.DatasourceType = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetDeviceAddress(v string) *DescribeChannelsResponseBodyDataRecords {
	s.DeviceAddress = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetDeviceDirection(v string) *DescribeChannelsResponseBodyDataRecords {
	s.DeviceDirection = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetDeviceId(v string) *DescribeChannelsResponseBodyDataRecords {
	s.DeviceId = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetDeviceIp(v string) *DescribeChannelsResponseBodyDataRecords {
	s.DeviceIp = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetDeviceModel(v string) *DescribeChannelsResponseBodyDataRecords {
	s.DeviceModel = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetDeviceName(v string) *DescribeChannelsResponseBodyDataRecords {
	s.DeviceName = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetDeviceRate(v string) *DescribeChannelsResponseBodyDataRecords {
	s.DeviceRate = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetDeviceResolution(v string) *DescribeChannelsResponseBodyDataRecords {
	s.DeviceResolution = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetDeviceSite(v string) *DescribeChannelsResponseBodyDataRecords {
	s.DeviceSite = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetDeviceSn(v string) *DescribeChannelsResponseBodyDataRecords {
	s.DeviceSn = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetDeviceStatus(v string) *DescribeChannelsResponseBodyDataRecords {
	s.DeviceStatus = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetDeviceSubType(v string) *DescribeChannelsResponseBodyDataRecords {
	s.DeviceSubType = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetDeviceType(v string) *DescribeChannelsResponseBodyDataRecords {
	s.DeviceType = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetEncodeFormat(v string) *DescribeChannelsResponseBodyDataRecords {
	s.EncodeFormat = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetFrameRate(v string) *DescribeChannelsResponseBodyDataRecords {
	s.FrameRate = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetGovLength(v string) *DescribeChannelsResponseBodyDataRecords {
	s.GovLength = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetInProtocol(v string) *DescribeChannelsResponseBodyDataRecords {
	s.InProtocol = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetLatitude(v string) *DescribeChannelsResponseBodyDataRecords {
	s.Latitude = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetLongitude(v string) *DescribeChannelsResponseBodyDataRecords {
	s.Longitude = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetModifyTime(v string) *DescribeChannelsResponseBodyDataRecords {
	s.ModifyTime = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetOSDTimeEnable(v string) *DescribeChannelsResponseBodyDataRecords {
	s.OSDTimeEnable = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetOSDTimeType(v string) *DescribeChannelsResponseBodyDataRecords {
	s.OSDTimeType = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetOSDTimeX(v string) *DescribeChannelsResponseBodyDataRecords {
	s.OSDTimeX = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetOSDTimeY(v string) *DescribeChannelsResponseBodyDataRecords {
	s.OSDTimeY = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetParentDeviceId(v string) *DescribeChannelsResponseBodyDataRecords {
	s.ParentDeviceId = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetPassword(v string) *DescribeChannelsResponseBodyDataRecords {
	s.Password = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetServerId(v string) *DescribeChannelsResponseBodyDataRecords {
	s.ServerId = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetServerIp(v string) *DescribeChannelsResponseBodyDataRecords {
	s.ServerIp = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetServerPort(v string) *DescribeChannelsResponseBodyDataRecords {
	s.ServerPort = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetServerRealm(v string) *DescribeChannelsResponseBodyDataRecords {
	s.ServerRealm = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetStreamAction(v string) *DescribeChannelsResponseBodyDataRecords {
	s.StreamAction = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetStreamStatus(v string) *DescribeChannelsResponseBodyDataRecords {
	s.StreamStatus = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetVap(v string) *DescribeChannelsResponseBodyDataRecords {
	s.Vap = &v
	return s
}

func (s *DescribeChannelsResponseBodyDataRecords) SetVendor(v string) *DescribeChannelsResponseBodyDataRecords {
	s.Vendor = &v
	return s
}

type DescribeChannelsResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeChannelsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeChannelsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeChannelsResponse) GoString() string {
	return s.String()
}

func (s *DescribeChannelsResponse) SetHeaders(v map[string]*string) *DescribeChannelsResponse {
	s.Headers = v
	return s
}

func (s *DescribeChannelsResponse) SetBody(v *DescribeChannelsResponseBody) *DescribeChannelsResponse {
	s.Body = v
	return s
}

type DescribeDataSourcesRequest struct {
	CorpIdList         *string `json:"CorpIdList,omitempty" xml:"CorpIdList,omitempty"`
	DataSourceCategory *string `json:"DataSourceCategory,omitempty" xml:"DataSourceCategory,omitempty"`
	DataSourceFilter   *string `json:"DataSourceFilter,omitempty" xml:"DataSourceFilter,omitempty"`
	DataSourceIdList   *string `json:"DataSourceIdList,omitempty" xml:"DataSourceIdList,omitempty"`
	DataSourceType     *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	PageNum            *int64  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize           *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StreamStatus       *string `json:"StreamStatus,omitempty" xml:"StreamStatus,omitempty"`
}

func (s DescribeDataSourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataSourcesRequest) GoString() string {
	return s.String()
}

func (s *DescribeDataSourcesRequest) SetCorpIdList(v string) *DescribeDataSourcesRequest {
	s.CorpIdList = &v
	return s
}

func (s *DescribeDataSourcesRequest) SetDataSourceCategory(v string) *DescribeDataSourcesRequest {
	s.DataSourceCategory = &v
	return s
}

func (s *DescribeDataSourcesRequest) SetDataSourceFilter(v string) *DescribeDataSourcesRequest {
	s.DataSourceFilter = &v
	return s
}

func (s *DescribeDataSourcesRequest) SetDataSourceIdList(v string) *DescribeDataSourcesRequest {
	s.DataSourceIdList = &v
	return s
}

func (s *DescribeDataSourcesRequest) SetDataSourceType(v string) *DescribeDataSourcesRequest {
	s.DataSourceType = &v
	return s
}

func (s *DescribeDataSourcesRequest) SetPageNum(v int64) *DescribeDataSourcesRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeDataSourcesRequest) SetPageSize(v int64) *DescribeDataSourcesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDataSourcesRequest) SetStreamStatus(v string) *DescribeDataSourcesRequest {
	s.StreamStatus = &v
	return s
}

type DescribeDataSourcesResponseBody struct {
	Code      *string                              `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *DescribeDataSourcesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                              `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDataSourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataSourcesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDataSourcesResponseBody) SetCode(v string) *DescribeDataSourcesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeDataSourcesResponseBody) SetData(v *DescribeDataSourcesResponseBodyData) *DescribeDataSourcesResponseBody {
	s.Data = v
	return s
}

func (s *DescribeDataSourcesResponseBody) SetMessage(v string) *DescribeDataSourcesResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeDataSourcesResponseBody) SetRequestId(v string) *DescribeDataSourcesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDataSourcesResponseBodyData struct {
	PageNum    *int64                                        `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize   *int64                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*DescribeDataSourcesResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int64                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	TotalPage  *int64                                        `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s DescribeDataSourcesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataSourcesResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeDataSourcesResponseBodyData) SetPageNum(v int64) *DescribeDataSourcesResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *DescribeDataSourcesResponseBodyData) SetPageSize(v int64) *DescribeDataSourcesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *DescribeDataSourcesResponseBodyData) SetRecords(v []*DescribeDataSourcesResponseBodyDataRecords) *DescribeDataSourcesResponseBodyData {
	s.Records = v
	return s
}

func (s *DescribeDataSourcesResponseBodyData) SetTotalCount(v int64) *DescribeDataSourcesResponseBodyData {
	s.TotalCount = &v
	return s
}

func (s *DescribeDataSourcesResponseBodyData) SetTotalPage(v int64) *DescribeDataSourcesResponseBodyData {
	s.TotalPage = &v
	return s
}

type DescribeDataSourcesResponseBodyDataRecords struct {
	Action         *string `json:"Action,omitempty" xml:"Action,omitempty"`
	CorpId         *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	CreateTime     *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DataSourceId   *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	KafkaTopic     *string `json:"KafkaTopic,omitempty" xml:"KafkaTopic,omitempty"`
	OssPath        *string `json:"OssPath,omitempty" xml:"OssPath,omitempty"`
	StreamStatus   *string `json:"StreamStatus,omitempty" xml:"StreamStatus,omitempty"`
	Url            *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s DescribeDataSourcesResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataSourcesResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *DescribeDataSourcesResponseBodyDataRecords) SetAction(v string) *DescribeDataSourcesResponseBodyDataRecords {
	s.Action = &v
	return s
}

func (s *DescribeDataSourcesResponseBodyDataRecords) SetCorpId(v string) *DescribeDataSourcesResponseBodyDataRecords {
	s.CorpId = &v
	return s
}

func (s *DescribeDataSourcesResponseBodyDataRecords) SetCreateTime(v string) *DescribeDataSourcesResponseBodyDataRecords {
	s.CreateTime = &v
	return s
}

func (s *DescribeDataSourcesResponseBodyDataRecords) SetDataSourceId(v string) *DescribeDataSourcesResponseBodyDataRecords {
	s.DataSourceId = &v
	return s
}

func (s *DescribeDataSourcesResponseBodyDataRecords) SetDataSourceName(v string) *DescribeDataSourcesResponseBodyDataRecords {
	s.DataSourceName = &v
	return s
}

func (s *DescribeDataSourcesResponseBodyDataRecords) SetDataSourceType(v string) *DescribeDataSourcesResponseBodyDataRecords {
	s.DataSourceType = &v
	return s
}

func (s *DescribeDataSourcesResponseBodyDataRecords) SetDescription(v string) *DescribeDataSourcesResponseBodyDataRecords {
	s.Description = &v
	return s
}

func (s *DescribeDataSourcesResponseBodyDataRecords) SetKafkaTopic(v string) *DescribeDataSourcesResponseBodyDataRecords {
	s.KafkaTopic = &v
	return s
}

func (s *DescribeDataSourcesResponseBodyDataRecords) SetOssPath(v string) *DescribeDataSourcesResponseBodyDataRecords {
	s.OssPath = &v
	return s
}

func (s *DescribeDataSourcesResponseBodyDataRecords) SetStreamStatus(v string) *DescribeDataSourcesResponseBodyDataRecords {
	s.StreamStatus = &v
	return s
}

func (s *DescribeDataSourcesResponseBodyDataRecords) SetUrl(v string) *DescribeDataSourcesResponseBodyDataRecords {
	s.Url = &v
	return s
}

type DescribeDataSourcesResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDataSourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDataSourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataSourcesResponse) GoString() string {
	return s.String()
}

func (s *DescribeDataSourcesResponse) SetHeaders(v map[string]*string) *DescribeDataSourcesResponse {
	s.Headers = v
	return s
}

func (s *DescribeDataSourcesResponse) SetBody(v *DescribeDataSourcesResponseBody) *DescribeDataSourcesResponse {
	s.Body = v
	return s
}

type DescribeDevicesRequest struct {
	CorpIdList   *string `json:"CorpIdList,omitempty" xml:"CorpIdList,omitempty"`
	DeviceIdList *string `json:"DeviceIdList,omitempty" xml:"DeviceIdList,omitempty"`
	PageNum      *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDevicesRequest) GoString() string {
	return s.String()
}

func (s *DescribeDevicesRequest) SetCorpIdList(v string) *DescribeDevicesRequest {
	s.CorpIdList = &v
	return s
}

func (s *DescribeDevicesRequest) SetDeviceIdList(v string) *DescribeDevicesRequest {
	s.DeviceIdList = &v
	return s
}

func (s *DescribeDevicesRequest) SetPageNum(v int32) *DescribeDevicesRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeDevicesRequest) SetPageSize(v int32) *DescribeDevicesRequest {
	s.PageSize = &v
	return s
}

type DescribeDevicesResponseBody struct {
	Code      *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *DescribeDevicesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                          `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDevicesResponseBody) SetCode(v string) *DescribeDevicesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeDevicesResponseBody) SetData(v *DescribeDevicesResponseBodyData) *DescribeDevicesResponseBody {
	s.Data = v
	return s
}

func (s *DescribeDevicesResponseBody) SetMessage(v string) *DescribeDevicesResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeDevicesResponseBody) SetRequestId(v string) *DescribeDevicesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDevicesResponseBodyData struct {
	PageNum    *int32                                    `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize   *int32                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*DescribeDevicesResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int32                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	TotalPage  *int32                                    `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s DescribeDevicesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeDevicesResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeDevicesResponseBodyData) SetPageNum(v int32) *DescribeDevicesResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *DescribeDevicesResponseBodyData) SetPageSize(v int32) *DescribeDevicesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *DescribeDevicesResponseBodyData) SetRecords(v []*DescribeDevicesResponseBodyDataRecords) *DescribeDevicesResponseBodyData {
	s.Records = v
	return s
}

func (s *DescribeDevicesResponseBodyData) SetTotalCount(v int32) *DescribeDevicesResponseBodyData {
	s.TotalCount = &v
	return s
}

func (s *DescribeDevicesResponseBodyData) SetTotalPage(v int32) *DescribeDevicesResponseBodyData {
	s.TotalPage = &v
	return s
}

type DescribeDevicesResponseBodyDataRecords struct {
	CapturedPictureId *string `json:"CapturedPictureId,omitempty" xml:"CapturedPictureId,omitempty"`
	CorpId            *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	CreateTime        *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DeviceAddress     *string `json:"DeviceAddress,omitempty" xml:"DeviceAddress,omitempty"`
	DeviceId          *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	DeviceName        *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DeviceType        *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	InProtocol        *string `json:"InProtocol,omitempty" xml:"InProtocol,omitempty"`
	Latitude          *string `json:"Latitude,omitempty" xml:"Latitude,omitempty"`
	Longitude         *string `json:"Longitude,omitempty" xml:"Longitude,omitempty"`
	Password          *string `json:"Password,omitempty" xml:"Password,omitempty"`
	Status            *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Vendor            *string `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s DescribeDevicesResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s DescribeDevicesResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *DescribeDevicesResponseBodyDataRecords) SetCapturedPictureId(v string) *DescribeDevicesResponseBodyDataRecords {
	s.CapturedPictureId = &v
	return s
}

func (s *DescribeDevicesResponseBodyDataRecords) SetCorpId(v string) *DescribeDevicesResponseBodyDataRecords {
	s.CorpId = &v
	return s
}

func (s *DescribeDevicesResponseBodyDataRecords) SetCreateTime(v string) *DescribeDevicesResponseBodyDataRecords {
	s.CreateTime = &v
	return s
}

func (s *DescribeDevicesResponseBodyDataRecords) SetDeviceAddress(v string) *DescribeDevicesResponseBodyDataRecords {
	s.DeviceAddress = &v
	return s
}

func (s *DescribeDevicesResponseBodyDataRecords) SetDeviceId(v string) *DescribeDevicesResponseBodyDataRecords {
	s.DeviceId = &v
	return s
}

func (s *DescribeDevicesResponseBodyDataRecords) SetDeviceName(v string) *DescribeDevicesResponseBodyDataRecords {
	s.DeviceName = &v
	return s
}

func (s *DescribeDevicesResponseBodyDataRecords) SetDeviceType(v string) *DescribeDevicesResponseBodyDataRecords {
	s.DeviceType = &v
	return s
}

func (s *DescribeDevicesResponseBodyDataRecords) SetInProtocol(v string) *DescribeDevicesResponseBodyDataRecords {
	s.InProtocol = &v
	return s
}

func (s *DescribeDevicesResponseBodyDataRecords) SetLatitude(v string) *DescribeDevicesResponseBodyDataRecords {
	s.Latitude = &v
	return s
}

func (s *DescribeDevicesResponseBodyDataRecords) SetLongitude(v string) *DescribeDevicesResponseBodyDataRecords {
	s.Longitude = &v
	return s
}

func (s *DescribeDevicesResponseBodyDataRecords) SetPassword(v string) *DescribeDevicesResponseBodyDataRecords {
	s.Password = &v
	return s
}

func (s *DescribeDevicesResponseBodyDataRecords) SetStatus(v string) *DescribeDevicesResponseBodyDataRecords {
	s.Status = &v
	return s
}

func (s *DescribeDevicesResponseBodyDataRecords) SetVendor(v string) *DescribeDevicesResponseBodyDataRecords {
	s.Vendor = &v
	return s
}

type DescribeDevicesResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDevicesResponse) GoString() string {
	return s.String()
}

func (s *DescribeDevicesResponse) SetHeaders(v map[string]*string) *DescribeDevicesResponse {
	s.Headers = v
	return s
}

func (s *DescribeDevicesResponse) SetBody(v *DescribeDevicesResponseBody) *DescribeDevicesResponse {
	s.Body = v
	return s
}

type DescribeIpcsRequest struct {
	CorpIdList       *string `json:"CorpIdList,omitempty" xml:"CorpIdList,omitempty"`
	DeviceFilter     *string `json:"DeviceFilter,omitempty" xml:"DeviceFilter,omitempty"`
	DeviceIdList     *string `json:"DeviceIdList,omitempty" xml:"DeviceIdList,omitempty"`
	DeviceStatus     *string `json:"DeviceStatus,omitempty" xml:"DeviceStatus,omitempty"`
	NvrIdList        *string `json:"NvrIdList,omitempty" xml:"NvrIdList,omitempty"`
	PageNum          *int64  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize         *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ParentDeviceType *string `json:"ParentDeviceType,omitempty" xml:"ParentDeviceType,omitempty"`
}

func (s DescribeIpcsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpcsRequest) GoString() string {
	return s.String()
}

func (s *DescribeIpcsRequest) SetCorpIdList(v string) *DescribeIpcsRequest {
	s.CorpIdList = &v
	return s
}

func (s *DescribeIpcsRequest) SetDeviceFilter(v string) *DescribeIpcsRequest {
	s.DeviceFilter = &v
	return s
}

func (s *DescribeIpcsRequest) SetDeviceIdList(v string) *DescribeIpcsRequest {
	s.DeviceIdList = &v
	return s
}

func (s *DescribeIpcsRequest) SetDeviceStatus(v string) *DescribeIpcsRequest {
	s.DeviceStatus = &v
	return s
}

func (s *DescribeIpcsRequest) SetNvrIdList(v string) *DescribeIpcsRequest {
	s.NvrIdList = &v
	return s
}

func (s *DescribeIpcsRequest) SetPageNum(v int64) *DescribeIpcsRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeIpcsRequest) SetPageSize(v int64) *DescribeIpcsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeIpcsRequest) SetParentDeviceType(v string) *DescribeIpcsRequest {
	s.ParentDeviceType = &v
	return s
}

type DescribeIpcsResponseBody struct {
	Code      *string                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *DescribeIpcsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                       `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeIpcsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpcsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeIpcsResponseBody) SetCode(v string) *DescribeIpcsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeIpcsResponseBody) SetData(v *DescribeIpcsResponseBodyData) *DescribeIpcsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeIpcsResponseBody) SetMessage(v string) *DescribeIpcsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeIpcsResponseBody) SetRequestId(v string) *DescribeIpcsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeIpcsResponseBodyData struct {
	PageNum    *int64                                 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize   *int64                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*DescribeIpcsResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int64                                 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	TotalPage  *int64                                 `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s DescribeIpcsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpcsResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeIpcsResponseBodyData) SetPageNum(v int64) *DescribeIpcsResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *DescribeIpcsResponseBodyData) SetPageSize(v int64) *DescribeIpcsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *DescribeIpcsResponseBodyData) SetRecords(v []*DescribeIpcsResponseBodyDataRecords) *DescribeIpcsResponseBodyData {
	s.Records = v
	return s
}

func (s *DescribeIpcsResponseBodyData) SetTotalCount(v int64) *DescribeIpcsResponseBodyData {
	s.TotalCount = &v
	return s
}

func (s *DescribeIpcsResponseBodyData) SetTotalPage(v int64) *DescribeIpcsResponseBodyData {
	s.TotalPage = &v
	return s
}

type DescribeIpcsResponseBodyDataRecords struct {
	AudioEnable      *string `json:"AudioEnable,omitempty" xml:"AudioEnable,omitempty"`
	CorpId           *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	CreateTime       *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DatasourceType   *string `json:"DatasourceType,omitempty" xml:"DatasourceType,omitempty"`
	DeviceAddress    *string `json:"DeviceAddress,omitempty" xml:"DeviceAddress,omitempty"`
	DeviceDirection  *string `json:"DeviceDirection,omitempty" xml:"DeviceDirection,omitempty"`
	DeviceId         *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	DeviceIp         *string `json:"DeviceIp,omitempty" xml:"DeviceIp,omitempty"`
	DeviceModel      *string `json:"DeviceModel,omitempty" xml:"DeviceModel,omitempty"`
	DeviceName       *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DeviceRate       *string `json:"DeviceRate,omitempty" xml:"DeviceRate,omitempty"`
	DeviceResolution *string `json:"DeviceResolution,omitempty" xml:"DeviceResolution,omitempty"`
	DeviceSite       *string `json:"DeviceSite,omitempty" xml:"DeviceSite,omitempty"`
	DeviceSn         *string `json:"DeviceSn,omitempty" xml:"DeviceSn,omitempty"`
	DeviceStatus     *string `json:"DeviceStatus,omitempty" xml:"DeviceStatus,omitempty"`
	DeviceSubType    *string `json:"DeviceSubType,omitempty" xml:"DeviceSubType,omitempty"`
	DeviceType       *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	EncodeFormat     *string `json:"EncodeFormat,omitempty" xml:"EncodeFormat,omitempty"`
	FrameRate        *string `json:"FrameRate,omitempty" xml:"FrameRate,omitempty"`
	GovLength        *string `json:"GovLength,omitempty" xml:"GovLength,omitempty"`
	InProtocol       *string `json:"InProtocol,omitempty" xml:"InProtocol,omitempty"`
	Latitude         *string `json:"Latitude,omitempty" xml:"Latitude,omitempty"`
	Longitude        *string `json:"Longitude,omitempty" xml:"Longitude,omitempty"`
	ModifyTime       *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	OSDTimeEnable    *string `json:"OSDTimeEnable,omitempty" xml:"OSDTimeEnable,omitempty"`
	OSDTimeType      *string `json:"OSDTimeType,omitempty" xml:"OSDTimeType,omitempty"`
	OSDTimeX         *string `json:"OSDTimeX,omitempty" xml:"OSDTimeX,omitempty"`
	OSDTimeY         *string `json:"OSDTimeY,omitempty" xml:"OSDTimeY,omitempty"`
	ParentDeviceId   *string `json:"ParentDeviceId,omitempty" xml:"ParentDeviceId,omitempty"`
	Password         *string `json:"Password,omitempty" xml:"Password,omitempty"`
	ServerId         *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	ServerIp         *string `json:"ServerIp,omitempty" xml:"ServerIp,omitempty"`
	ServerPort       *string `json:"ServerPort,omitempty" xml:"ServerPort,omitempty"`
	ServerRealm      *string `json:"ServerRealm,omitempty" xml:"ServerRealm,omitempty"`
	StreamAction     *string `json:"StreamAction,omitempty" xml:"StreamAction,omitempty"`
	StreamStatus     *string `json:"StreamStatus,omitempty" xml:"StreamStatus,omitempty"`
	Vap              *string `json:"Vap,omitempty" xml:"Vap,omitempty"`
	Vendor           *string `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s DescribeIpcsResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpcsResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *DescribeIpcsResponseBodyDataRecords) SetAudioEnable(v string) *DescribeIpcsResponseBodyDataRecords {
	s.AudioEnable = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetCorpId(v string) *DescribeIpcsResponseBodyDataRecords {
	s.CorpId = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetCreateTime(v string) *DescribeIpcsResponseBodyDataRecords {
	s.CreateTime = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetDatasourceType(v string) *DescribeIpcsResponseBodyDataRecords {
	s.DatasourceType = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetDeviceAddress(v string) *DescribeIpcsResponseBodyDataRecords {
	s.DeviceAddress = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetDeviceDirection(v string) *DescribeIpcsResponseBodyDataRecords {
	s.DeviceDirection = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetDeviceId(v string) *DescribeIpcsResponseBodyDataRecords {
	s.DeviceId = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetDeviceIp(v string) *DescribeIpcsResponseBodyDataRecords {
	s.DeviceIp = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetDeviceModel(v string) *DescribeIpcsResponseBodyDataRecords {
	s.DeviceModel = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetDeviceName(v string) *DescribeIpcsResponseBodyDataRecords {
	s.DeviceName = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetDeviceRate(v string) *DescribeIpcsResponseBodyDataRecords {
	s.DeviceRate = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetDeviceResolution(v string) *DescribeIpcsResponseBodyDataRecords {
	s.DeviceResolution = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetDeviceSite(v string) *DescribeIpcsResponseBodyDataRecords {
	s.DeviceSite = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetDeviceSn(v string) *DescribeIpcsResponseBodyDataRecords {
	s.DeviceSn = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetDeviceStatus(v string) *DescribeIpcsResponseBodyDataRecords {
	s.DeviceStatus = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetDeviceSubType(v string) *DescribeIpcsResponseBodyDataRecords {
	s.DeviceSubType = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetDeviceType(v string) *DescribeIpcsResponseBodyDataRecords {
	s.DeviceType = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetEncodeFormat(v string) *DescribeIpcsResponseBodyDataRecords {
	s.EncodeFormat = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetFrameRate(v string) *DescribeIpcsResponseBodyDataRecords {
	s.FrameRate = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetGovLength(v string) *DescribeIpcsResponseBodyDataRecords {
	s.GovLength = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetInProtocol(v string) *DescribeIpcsResponseBodyDataRecords {
	s.InProtocol = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetLatitude(v string) *DescribeIpcsResponseBodyDataRecords {
	s.Latitude = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetLongitude(v string) *DescribeIpcsResponseBodyDataRecords {
	s.Longitude = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetModifyTime(v string) *DescribeIpcsResponseBodyDataRecords {
	s.ModifyTime = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetOSDTimeEnable(v string) *DescribeIpcsResponseBodyDataRecords {
	s.OSDTimeEnable = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetOSDTimeType(v string) *DescribeIpcsResponseBodyDataRecords {
	s.OSDTimeType = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetOSDTimeX(v string) *DescribeIpcsResponseBodyDataRecords {
	s.OSDTimeX = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetOSDTimeY(v string) *DescribeIpcsResponseBodyDataRecords {
	s.OSDTimeY = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetParentDeviceId(v string) *DescribeIpcsResponseBodyDataRecords {
	s.ParentDeviceId = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetPassword(v string) *DescribeIpcsResponseBodyDataRecords {
	s.Password = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetServerId(v string) *DescribeIpcsResponseBodyDataRecords {
	s.ServerId = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetServerIp(v string) *DescribeIpcsResponseBodyDataRecords {
	s.ServerIp = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetServerPort(v string) *DescribeIpcsResponseBodyDataRecords {
	s.ServerPort = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetServerRealm(v string) *DescribeIpcsResponseBodyDataRecords {
	s.ServerRealm = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetStreamAction(v string) *DescribeIpcsResponseBodyDataRecords {
	s.StreamAction = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetStreamStatus(v string) *DescribeIpcsResponseBodyDataRecords {
	s.StreamStatus = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetVap(v string) *DescribeIpcsResponseBodyDataRecords {
	s.Vap = &v
	return s
}

func (s *DescribeIpcsResponseBodyDataRecords) SetVendor(v string) *DescribeIpcsResponseBodyDataRecords {
	s.Vendor = &v
	return s
}

type DescribeIpcsResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeIpcsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeIpcsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpcsResponse) GoString() string {
	return s.String()
}

func (s *DescribeIpcsResponse) SetHeaders(v map[string]*string) *DescribeIpcsResponse {
	s.Headers = v
	return s
}

func (s *DescribeIpcsResponse) SetBody(v *DescribeIpcsResponseBody) *DescribeIpcsResponse {
	s.Body = v
	return s
}

type DescribeModelServiceRequest struct {
	ModelServiceId *string `json:"ModelServiceId,omitempty" xml:"ModelServiceId,omitempty"`
}

func (s DescribeModelServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeModelServiceRequest) GoString() string {
	return s.String()
}

func (s *DescribeModelServiceRequest) SetModelServiceId(v string) *DescribeModelServiceRequest {
	s.ModelServiceId = &v
	return s
}

type DescribeModelServiceResponseBody struct {
	Code    *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *DescribeModelServiceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                               `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeModelServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeModelServiceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeModelServiceResponseBody) SetCode(v string) *DescribeModelServiceResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeModelServiceResponseBody) SetData(v *DescribeModelServiceResponseBodyData) *DescribeModelServiceResponseBody {
	s.Data = v
	return s
}

func (s *DescribeModelServiceResponseBody) SetMessage(v string) *DescribeModelServiceResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeModelServiceResponseBody) SetRequestId(v string) *DescribeModelServiceResponseBody {
	s.RequestId = &v
	return s
}

type DescribeModelServiceResponseBodyData struct {
	AlgorithmCode            *string                                             `json:"AlgorithmCode,omitempty" xml:"AlgorithmCode,omitempty"`
	AppCode                  *string                                             `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	CreateTime               *string                                             `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ModelApiList             []*DescribeModelServiceResponseBodyDataModelApiList `json:"ModelApiList,omitempty" xml:"ModelApiList,omitempty" type:"Repeated"`
	ModelServiceInstanceId   *string                                             `json:"ModelServiceInstanceId,omitempty" xml:"ModelServiceInstanceId,omitempty"`
	ModelServiceInstanceName *string                                             `json:"ModelServiceInstanceName,omitempty" xml:"ModelServiceInstanceName,omitempty"`
	ModelServiceStatus       *string                                             `json:"ModelServiceStatus,omitempty" xml:"ModelServiceStatus,omitempty"`
	Qps                      *int64                                              `json:"Qps,omitempty" xml:"Qps,omitempty"`
}

func (s DescribeModelServiceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeModelServiceResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeModelServiceResponseBodyData) SetAlgorithmCode(v string) *DescribeModelServiceResponseBodyData {
	s.AlgorithmCode = &v
	return s
}

func (s *DescribeModelServiceResponseBodyData) SetAppCode(v string) *DescribeModelServiceResponseBodyData {
	s.AppCode = &v
	return s
}

func (s *DescribeModelServiceResponseBodyData) SetCreateTime(v string) *DescribeModelServiceResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *DescribeModelServiceResponseBodyData) SetModelApiList(v []*DescribeModelServiceResponseBodyDataModelApiList) *DescribeModelServiceResponseBodyData {
	s.ModelApiList = v
	return s
}

func (s *DescribeModelServiceResponseBodyData) SetModelServiceInstanceId(v string) *DescribeModelServiceResponseBodyData {
	s.ModelServiceInstanceId = &v
	return s
}

func (s *DescribeModelServiceResponseBodyData) SetModelServiceInstanceName(v string) *DescribeModelServiceResponseBodyData {
	s.ModelServiceInstanceName = &v
	return s
}

func (s *DescribeModelServiceResponseBodyData) SetModelServiceStatus(v string) *DescribeModelServiceResponseBodyData {
	s.ModelServiceStatus = &v
	return s
}

func (s *DescribeModelServiceResponseBodyData) SetQps(v int64) *DescribeModelServiceResponseBodyData {
	s.Qps = &v
	return s
}

type DescribeModelServiceResponseBodyDataModelApiList struct {
	AlgorithmApiCode *string `json:"AlgorithmApiCode,omitempty" xml:"AlgorithmApiCode,omitempty"`
	ApiId            *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ApiName          *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	ApiPath          *string `json:"ApiPath,omitempty" xml:"ApiPath,omitempty"`
	CreateTime       *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
}

func (s DescribeModelServiceResponseBodyDataModelApiList) String() string {
	return tea.Prettify(s)
}

func (s DescribeModelServiceResponseBodyDataModelApiList) GoString() string {
	return s.String()
}

func (s *DescribeModelServiceResponseBodyDataModelApiList) SetAlgorithmApiCode(v string) *DescribeModelServiceResponseBodyDataModelApiList {
	s.AlgorithmApiCode = &v
	return s
}

func (s *DescribeModelServiceResponseBodyDataModelApiList) SetApiId(v string) *DescribeModelServiceResponseBodyDataModelApiList {
	s.ApiId = &v
	return s
}

func (s *DescribeModelServiceResponseBodyDataModelApiList) SetApiName(v string) *DescribeModelServiceResponseBodyDataModelApiList {
	s.ApiName = &v
	return s
}

func (s *DescribeModelServiceResponseBodyDataModelApiList) SetApiPath(v string) *DescribeModelServiceResponseBodyDataModelApiList {
	s.ApiPath = &v
	return s
}

func (s *DescribeModelServiceResponseBodyDataModelApiList) SetCreateTime(v string) *DescribeModelServiceResponseBodyDataModelApiList {
	s.CreateTime = &v
	return s
}

type DescribeModelServiceResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeModelServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeModelServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeModelServiceResponse) GoString() string {
	return s.String()
}

func (s *DescribeModelServiceResponse) SetHeaders(v map[string]*string) *DescribeModelServiceResponse {
	s.Headers = v
	return s
}

func (s *DescribeModelServiceResponse) SetBody(v *DescribeModelServiceResponseBody) *DescribeModelServiceResponse {
	s.Body = v
	return s
}

type DescribeModelServiceListRequest struct {
	AlgorithmCode    *string `json:"AlgorithmCode,omitempty" xml:"AlgorithmCode,omitempty"`
	IncludeDeleted   *bool   `json:"IncludeDeleted,omitempty" xml:"IncludeDeleted,omitempty"`
	ModelServiceName *string `json:"ModelServiceName,omitempty" xml:"ModelServiceName,omitempty"`
	PageNum          *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize         *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeModelServiceListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeModelServiceListRequest) GoString() string {
	return s.String()
}

func (s *DescribeModelServiceListRequest) SetAlgorithmCode(v string) *DescribeModelServiceListRequest {
	s.AlgorithmCode = &v
	return s
}

func (s *DescribeModelServiceListRequest) SetIncludeDeleted(v bool) *DescribeModelServiceListRequest {
	s.IncludeDeleted = &v
	return s
}

func (s *DescribeModelServiceListRequest) SetModelServiceName(v string) *DescribeModelServiceListRequest {
	s.ModelServiceName = &v
	return s
}

func (s *DescribeModelServiceListRequest) SetPageNum(v int32) *DescribeModelServiceListRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeModelServiceListRequest) SetPageSize(v int32) *DescribeModelServiceListRequest {
	s.PageSize = &v
	return s
}

type DescribeModelServiceListResponseBody struct {
	Code    *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *DescribeModelServiceListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeModelServiceListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeModelServiceListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeModelServiceListResponseBody) SetCode(v string) *DescribeModelServiceListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeModelServiceListResponseBody) SetData(v *DescribeModelServiceListResponseBodyData) *DescribeModelServiceListResponseBody {
	s.Data = v
	return s
}

func (s *DescribeModelServiceListResponseBody) SetMessage(v string) *DescribeModelServiceListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeModelServiceListResponseBody) SetRequestId(v string) *DescribeModelServiceListResponseBody {
	s.RequestId = &v
	return s
}

type DescribeModelServiceListResponseBodyData struct {
	ModelList []*DescribeModelServiceListResponseBodyDataModelList `json:"ModelList,omitempty" xml:"ModelList,omitempty" type:"Repeated"`
	Total     *string                                              `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeModelServiceListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeModelServiceListResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeModelServiceListResponseBodyData) SetModelList(v []*DescribeModelServiceListResponseBodyDataModelList) *DescribeModelServiceListResponseBodyData {
	s.ModelList = v
	return s
}

func (s *DescribeModelServiceListResponseBodyData) SetTotal(v string) *DescribeModelServiceListResponseBodyData {
	s.Total = &v
	return s
}

type DescribeModelServiceListResponseBodyDataModelList struct {
	AlgorithmCode          *string `json:"AlgorithmCode,omitempty" xml:"AlgorithmCode,omitempty"`
	AppCode                *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	CreateTime             *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ModelServiceInstanceId *string `json:"ModelServiceInstanceId,omitempty" xml:"ModelServiceInstanceId,omitempty"`
	ModelServiceName       *string `json:"ModelServiceName,omitempty" xml:"ModelServiceName,omitempty"`
	ModelServiceStatus     *string `json:"ModelServiceStatus,omitempty" xml:"ModelServiceStatus,omitempty"`
	QpsRequired            *int32  `json:"QpsRequired,omitempty" xml:"QpsRequired,omitempty"`
}

func (s DescribeModelServiceListResponseBodyDataModelList) String() string {
	return tea.Prettify(s)
}

func (s DescribeModelServiceListResponseBodyDataModelList) GoString() string {
	return s.String()
}

func (s *DescribeModelServiceListResponseBodyDataModelList) SetAlgorithmCode(v string) *DescribeModelServiceListResponseBodyDataModelList {
	s.AlgorithmCode = &v
	return s
}

func (s *DescribeModelServiceListResponseBodyDataModelList) SetAppCode(v string) *DescribeModelServiceListResponseBodyDataModelList {
	s.AppCode = &v
	return s
}

func (s *DescribeModelServiceListResponseBodyDataModelList) SetCreateTime(v string) *DescribeModelServiceListResponseBodyDataModelList {
	s.CreateTime = &v
	return s
}

func (s *DescribeModelServiceListResponseBodyDataModelList) SetModelServiceInstanceId(v string) *DescribeModelServiceListResponseBodyDataModelList {
	s.ModelServiceInstanceId = &v
	return s
}

func (s *DescribeModelServiceListResponseBodyDataModelList) SetModelServiceName(v string) *DescribeModelServiceListResponseBodyDataModelList {
	s.ModelServiceName = &v
	return s
}

func (s *DescribeModelServiceListResponseBodyDataModelList) SetModelServiceStatus(v string) *DescribeModelServiceListResponseBodyDataModelList {
	s.ModelServiceStatus = &v
	return s
}

func (s *DescribeModelServiceListResponseBodyDataModelList) SetQpsRequired(v int32) *DescribeModelServiceListResponseBodyDataModelList {
	s.QpsRequired = &v
	return s
}

type DescribeModelServiceListResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeModelServiceListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeModelServiceListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeModelServiceListResponse) GoString() string {
	return s.String()
}

func (s *DescribeModelServiceListResponse) SetHeaders(v map[string]*string) *DescribeModelServiceListResponse {
	s.Headers = v
	return s
}

func (s *DescribeModelServiceListResponse) SetBody(v *DescribeModelServiceListResponseBody) *DescribeModelServiceListResponse {
	s.Body = v
	return s
}

type DescribeNvrDevicesRequest struct {
	CorpIdList      *string `json:"CorpIdList,omitempty" xml:"CorpIdList,omitempty"`
	DeviceFilter    *string `json:"DeviceFilter,omitempty" xml:"DeviceFilter,omitempty"`
	NvrDeviceIdList *string `json:"NvrDeviceIdList,omitempty" xml:"NvrDeviceIdList,omitempty"`
	PageNum         *int64  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize        *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeNvrDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNvrDevicesRequest) GoString() string {
	return s.String()
}

func (s *DescribeNvrDevicesRequest) SetCorpIdList(v string) *DescribeNvrDevicesRequest {
	s.CorpIdList = &v
	return s
}

func (s *DescribeNvrDevicesRequest) SetDeviceFilter(v string) *DescribeNvrDevicesRequest {
	s.DeviceFilter = &v
	return s
}

func (s *DescribeNvrDevicesRequest) SetNvrDeviceIdList(v string) *DescribeNvrDevicesRequest {
	s.NvrDeviceIdList = &v
	return s
}

func (s *DescribeNvrDevicesRequest) SetPageNum(v int64) *DescribeNvrDevicesRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeNvrDevicesRequest) SetPageSize(v int64) *DescribeNvrDevicesRequest {
	s.PageSize = &v
	return s
}

type DescribeNvrDevicesResponseBody struct {
	Code      *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *DescribeNvrDevicesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeNvrDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNvrDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNvrDevicesResponseBody) SetCode(v string) *DescribeNvrDevicesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeNvrDevicesResponseBody) SetData(v *DescribeNvrDevicesResponseBodyData) *DescribeNvrDevicesResponseBody {
	s.Data = v
	return s
}

func (s *DescribeNvrDevicesResponseBody) SetMessage(v string) *DescribeNvrDevicesResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeNvrDevicesResponseBody) SetRequestId(v string) *DescribeNvrDevicesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeNvrDevicesResponseBodyData struct {
	PageNum    *int64                                       `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize   *int64                                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*DescribeNvrDevicesResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int64                                       `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	TotalPage  *int64                                       `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s DescribeNvrDevicesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeNvrDevicesResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeNvrDevicesResponseBodyData) SetPageNum(v int64) *DescribeNvrDevicesResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *DescribeNvrDevicesResponseBodyData) SetPageSize(v int64) *DescribeNvrDevicesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *DescribeNvrDevicesResponseBodyData) SetRecords(v []*DescribeNvrDevicesResponseBodyDataRecords) *DescribeNvrDevicesResponseBodyData {
	s.Records = v
	return s
}

func (s *DescribeNvrDevicesResponseBodyData) SetTotalCount(v int64) *DescribeNvrDevicesResponseBodyData {
	s.TotalCount = &v
	return s
}

func (s *DescribeNvrDevicesResponseBodyData) SetTotalPage(v int64) *DescribeNvrDevicesResponseBodyData {
	s.TotalPage = &v
	return s
}

type DescribeNvrDevicesResponseBodyDataRecords struct {
	Channel        *string `json:"Channel,omitempty" xml:"Channel,omitempty"`
	CorpId         *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	CreateTime     *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DatasourceType *string `json:"DatasourceType,omitempty" xml:"DatasourceType,omitempty"`
	DeviceId       *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	DeviceModel    *string `json:"DeviceModel,omitempty" xml:"DeviceModel,omitempty"`
	DeviceName     *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DeviceSn       *string `json:"DeviceSn,omitempty" xml:"DeviceSn,omitempty"`
	DeviceStatus   *string `json:"DeviceStatus,omitempty" xml:"DeviceStatus,omitempty"`
	DeviceType     *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	ModifyTime     *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	ProjectName    *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	RegionName     *string `json:"RegionName,omitempty" xml:"RegionName,omitempty"`
}

func (s DescribeNvrDevicesResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s DescribeNvrDevicesResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *DescribeNvrDevicesResponseBodyDataRecords) SetChannel(v string) *DescribeNvrDevicesResponseBodyDataRecords {
	s.Channel = &v
	return s
}

func (s *DescribeNvrDevicesResponseBodyDataRecords) SetCorpId(v string) *DescribeNvrDevicesResponseBodyDataRecords {
	s.CorpId = &v
	return s
}

func (s *DescribeNvrDevicesResponseBodyDataRecords) SetCreateTime(v string) *DescribeNvrDevicesResponseBodyDataRecords {
	s.CreateTime = &v
	return s
}

func (s *DescribeNvrDevicesResponseBodyDataRecords) SetDatasourceType(v string) *DescribeNvrDevicesResponseBodyDataRecords {
	s.DatasourceType = &v
	return s
}

func (s *DescribeNvrDevicesResponseBodyDataRecords) SetDeviceId(v string) *DescribeNvrDevicesResponseBodyDataRecords {
	s.DeviceId = &v
	return s
}

func (s *DescribeNvrDevicesResponseBodyDataRecords) SetDeviceModel(v string) *DescribeNvrDevicesResponseBodyDataRecords {
	s.DeviceModel = &v
	return s
}

func (s *DescribeNvrDevicesResponseBodyDataRecords) SetDeviceName(v string) *DescribeNvrDevicesResponseBodyDataRecords {
	s.DeviceName = &v
	return s
}

func (s *DescribeNvrDevicesResponseBodyDataRecords) SetDeviceSn(v string) *DescribeNvrDevicesResponseBodyDataRecords {
	s.DeviceSn = &v
	return s
}

func (s *DescribeNvrDevicesResponseBodyDataRecords) SetDeviceStatus(v string) *DescribeNvrDevicesResponseBodyDataRecords {
	s.DeviceStatus = &v
	return s
}

func (s *DescribeNvrDevicesResponseBodyDataRecords) SetDeviceType(v string) *DescribeNvrDevicesResponseBodyDataRecords {
	s.DeviceType = &v
	return s
}

func (s *DescribeNvrDevicesResponseBodyDataRecords) SetModifyTime(v string) *DescribeNvrDevicesResponseBodyDataRecords {
	s.ModifyTime = &v
	return s
}

func (s *DescribeNvrDevicesResponseBodyDataRecords) SetProjectName(v string) *DescribeNvrDevicesResponseBodyDataRecords {
	s.ProjectName = &v
	return s
}

func (s *DescribeNvrDevicesResponseBodyDataRecords) SetRegionName(v string) *DescribeNvrDevicesResponseBodyDataRecords {
	s.RegionName = &v
	return s
}

type DescribeNvrDevicesResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeNvrDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeNvrDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNvrDevicesResponse) GoString() string {
	return s.String()
}

func (s *DescribeNvrDevicesResponse) SetHeaders(v map[string]*string) *DescribeNvrDevicesResponse {
	s.Headers = v
	return s
}

func (s *DescribeNvrDevicesResponse) SetBody(v *DescribeNvrDevicesResponseBody) *DescribeNvrDevicesResponse {
	s.Body = v
	return s
}

type DescribeNvrsRequest struct {
	CorpIdList      *string `json:"CorpIdList,omitempty" xml:"CorpIdList,omitempty"`
	DeviceFilter    *string `json:"DeviceFilter,omitempty" xml:"DeviceFilter,omitempty"`
	NvrDeviceIdList *string `json:"NvrDeviceIdList,omitempty" xml:"NvrDeviceIdList,omitempty"`
	PageNum         *int64  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize        *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeNvrsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNvrsRequest) GoString() string {
	return s.String()
}

func (s *DescribeNvrsRequest) SetCorpIdList(v string) *DescribeNvrsRequest {
	s.CorpIdList = &v
	return s
}

func (s *DescribeNvrsRequest) SetDeviceFilter(v string) *DescribeNvrsRequest {
	s.DeviceFilter = &v
	return s
}

func (s *DescribeNvrsRequest) SetNvrDeviceIdList(v string) *DescribeNvrsRequest {
	s.NvrDeviceIdList = &v
	return s
}

func (s *DescribeNvrsRequest) SetPageNum(v int64) *DescribeNvrsRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeNvrsRequest) SetPageSize(v int64) *DescribeNvrsRequest {
	s.PageSize = &v
	return s
}

type DescribeNvrsResponseBody struct {
	Code      *string                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *DescribeNvrsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                       `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeNvrsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNvrsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNvrsResponseBody) SetCode(v string) *DescribeNvrsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeNvrsResponseBody) SetData(v *DescribeNvrsResponseBodyData) *DescribeNvrsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeNvrsResponseBody) SetMessage(v string) *DescribeNvrsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeNvrsResponseBody) SetRequestId(v string) *DescribeNvrsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeNvrsResponseBodyData struct {
	PageNum    *int64                                 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize   *int64                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*DescribeNvrsResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int64                                 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	TotalPage  *int64                                 `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s DescribeNvrsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeNvrsResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeNvrsResponseBodyData) SetPageNum(v int64) *DescribeNvrsResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *DescribeNvrsResponseBodyData) SetPageSize(v int64) *DescribeNvrsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *DescribeNvrsResponseBodyData) SetRecords(v []*DescribeNvrsResponseBodyDataRecords) *DescribeNvrsResponseBodyData {
	s.Records = v
	return s
}

func (s *DescribeNvrsResponseBodyData) SetTotalCount(v int64) *DescribeNvrsResponseBodyData {
	s.TotalCount = &v
	return s
}

func (s *DescribeNvrsResponseBodyData) SetTotalPage(v int64) *DescribeNvrsResponseBodyData {
	s.TotalPage = &v
	return s
}

type DescribeNvrsResponseBodyDataRecords struct {
	CorpId         *string                                             `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	CreateTime     *string                                             `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DatasourceType *string                                             `json:"DatasourceType,omitempty" xml:"DatasourceType,omitempty"`
	DeviceAddress  *string                                             `json:"DeviceAddress,omitempty" xml:"DeviceAddress,omitempty"`
	DeviceId       *string                                             `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	DeviceModel    *string                                             `json:"DeviceModel,omitempty" xml:"DeviceModel,omitempty"`
	DeviceName     *string                                             `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DeviceSn       *string                                             `json:"DeviceSn,omitempty" xml:"DeviceSn,omitempty"`
	DeviceStatus   *string                                             `json:"DeviceStatus,omitempty" xml:"DeviceStatus,omitempty"`
	DeviceType     *string                                             `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	InProtocol     *string                                             `json:"InProtocol,omitempty" xml:"InProtocol,omitempty"`
	Latitude       *string                                             `json:"Latitude,omitempty" xml:"Latitude,omitempty"`
	Longitude      *string                                             `json:"Longitude,omitempty" xml:"Longitude,omitempty"`
	ModifyTime     *string                                             `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	Password       *string                                             `json:"Password,omitempty" xml:"Password,omitempty"`
	ServerId       *string                                             `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	ServerIp       *string                                             `json:"ServerIp,omitempty" xml:"ServerIp,omitempty"`
	ServerPort     *string                                             `json:"ServerPort,omitempty" xml:"ServerPort,omitempty"`
	ServerRealm    *string                                             `json:"ServerRealm,omitempty" xml:"ServerRealm,omitempty"`
	SubDeviceCount *string                                             `json:"SubDeviceCount,omitempty" xml:"SubDeviceCount,omitempty"`
	SubDeviceInfo  []*DescribeNvrsResponseBodyDataRecordsSubDeviceInfo `json:"SubDeviceInfo,omitempty" xml:"SubDeviceInfo,omitempty" type:"Repeated"`
	Vendor         *string                                             `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s DescribeNvrsResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s DescribeNvrsResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *DescribeNvrsResponseBodyDataRecords) SetCorpId(v string) *DescribeNvrsResponseBodyDataRecords {
	s.CorpId = &v
	return s
}

func (s *DescribeNvrsResponseBodyDataRecords) SetCreateTime(v string) *DescribeNvrsResponseBodyDataRecords {
	s.CreateTime = &v
	return s
}

func (s *DescribeNvrsResponseBodyDataRecords) SetDatasourceType(v string) *DescribeNvrsResponseBodyDataRecords {
	s.DatasourceType = &v
	return s
}

func (s *DescribeNvrsResponseBodyDataRecords) SetDeviceAddress(v string) *DescribeNvrsResponseBodyDataRecords {
	s.DeviceAddress = &v
	return s
}

func (s *DescribeNvrsResponseBodyDataRecords) SetDeviceId(v string) *DescribeNvrsResponseBodyDataRecords {
	s.DeviceId = &v
	return s
}

func (s *DescribeNvrsResponseBodyDataRecords) SetDeviceModel(v string) *DescribeNvrsResponseBodyDataRecords {
	s.DeviceModel = &v
	return s
}

func (s *DescribeNvrsResponseBodyDataRecords) SetDeviceName(v string) *DescribeNvrsResponseBodyDataRecords {
	s.DeviceName = &v
	return s
}

func (s *DescribeNvrsResponseBodyDataRecords) SetDeviceSn(v string) *DescribeNvrsResponseBodyDataRecords {
	s.DeviceSn = &v
	return s
}

func (s *DescribeNvrsResponseBodyDataRecords) SetDeviceStatus(v string) *DescribeNvrsResponseBodyDataRecords {
	s.DeviceStatus = &v
	return s
}

func (s *DescribeNvrsResponseBodyDataRecords) SetDeviceType(v string) *DescribeNvrsResponseBodyDataRecords {
	s.DeviceType = &v
	return s
}

func (s *DescribeNvrsResponseBodyDataRecords) SetInProtocol(v string) *DescribeNvrsResponseBodyDataRecords {
	s.InProtocol = &v
	return s
}

func (s *DescribeNvrsResponseBodyDataRecords) SetLatitude(v string) *DescribeNvrsResponseBodyDataRecords {
	s.Latitude = &v
	return s
}

func (s *DescribeNvrsResponseBodyDataRecords) SetLongitude(v string) *DescribeNvrsResponseBodyDataRecords {
	s.Longitude = &v
	return s
}

func (s *DescribeNvrsResponseBodyDataRecords) SetModifyTime(v string) *DescribeNvrsResponseBodyDataRecords {
	s.ModifyTime = &v
	return s
}

func (s *DescribeNvrsResponseBodyDataRecords) SetPassword(v string) *DescribeNvrsResponseBodyDataRecords {
	s.Password = &v
	return s
}

func (s *DescribeNvrsResponseBodyDataRecords) SetServerId(v string) *DescribeNvrsResponseBodyDataRecords {
	s.ServerId = &v
	return s
}

func (s *DescribeNvrsResponseBodyDataRecords) SetServerIp(v string) *DescribeNvrsResponseBodyDataRecords {
	s.ServerIp = &v
	return s
}

func (s *DescribeNvrsResponseBodyDataRecords) SetServerPort(v string) *DescribeNvrsResponseBodyDataRecords {
	s.ServerPort = &v
	return s
}

func (s *DescribeNvrsResponseBodyDataRecords) SetServerRealm(v string) *DescribeNvrsResponseBodyDataRecords {
	s.ServerRealm = &v
	return s
}

func (s *DescribeNvrsResponseBodyDataRecords) SetSubDeviceCount(v string) *DescribeNvrsResponseBodyDataRecords {
	s.SubDeviceCount = &v
	return s
}

func (s *DescribeNvrsResponseBodyDataRecords) SetSubDeviceInfo(v []*DescribeNvrsResponseBodyDataRecordsSubDeviceInfo) *DescribeNvrsResponseBodyDataRecords {
	s.SubDeviceInfo = v
	return s
}

func (s *DescribeNvrsResponseBodyDataRecords) SetVendor(v string) *DescribeNvrsResponseBodyDataRecords {
	s.Vendor = &v
	return s
}

type DescribeNvrsResponseBodyDataRecordsSubDeviceInfo struct {
	SubDeviceId *string `json:"SubDeviceId,omitempty" xml:"SubDeviceId,omitempty"`
}

func (s DescribeNvrsResponseBodyDataRecordsSubDeviceInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeNvrsResponseBodyDataRecordsSubDeviceInfo) GoString() string {
	return s.String()
}

func (s *DescribeNvrsResponseBodyDataRecordsSubDeviceInfo) SetSubDeviceId(v string) *DescribeNvrsResponseBodyDataRecordsSubDeviceInfo {
	s.SubDeviceId = &v
	return s
}

type DescribeNvrsResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeNvrsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeNvrsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNvrsResponse) GoString() string {
	return s.String()
}

func (s *DescribeNvrsResponse) SetHeaders(v map[string]*string) *DescribeNvrsResponse {
	s.Headers = v
	return s
}

func (s *DescribeNvrsResponse) SetBody(v *DescribeNvrsResponseBody) *DescribeNvrsResponse {
	s.Body = v
	return s
}

type DescribeWatchItemsRequest struct {
	PageNumber    *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	WatchItemIds  *string `json:"WatchItemIds,omitempty" xml:"WatchItemIds,omitempty"`
	WatchPolicyId *string `json:"WatchPolicyId,omitempty" xml:"WatchPolicyId,omitempty"`
}

func (s DescribeWatchItemsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeWatchItemsRequest) GoString() string {
	return s.String()
}

func (s *DescribeWatchItemsRequest) SetPageNumber(v int64) *DescribeWatchItemsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeWatchItemsRequest) SetPageSize(v int64) *DescribeWatchItemsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeWatchItemsRequest) SetWatchItemIds(v string) *DescribeWatchItemsRequest {
	s.WatchItemIds = &v
	return s
}

func (s *DescribeWatchItemsRequest) SetWatchPolicyId(v string) *DescribeWatchItemsRequest {
	s.WatchPolicyId = &v
	return s
}

type DescribeWatchItemsResponseBody struct {
	Code    *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *DescribeWatchItemsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeWatchItemsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeWatchItemsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeWatchItemsResponseBody) SetCode(v string) *DescribeWatchItemsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeWatchItemsResponseBody) SetData(v *DescribeWatchItemsResponseBodyData) *DescribeWatchItemsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeWatchItemsResponseBody) SetMessage(v string) *DescribeWatchItemsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeWatchItemsResponseBody) SetRequestId(v string) *DescribeWatchItemsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeWatchItemsResponseBody) SetSuccess(v bool) *DescribeWatchItemsResponseBody {
	s.Success = &v
	return s
}

type DescribeWatchItemsResponseBodyData struct {
	PageNumber *int64                                       `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int64                                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*DescribeWatchItemsResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int64                                       `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeWatchItemsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeWatchItemsResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeWatchItemsResponseBodyData) SetPageNumber(v int64) *DescribeWatchItemsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *DescribeWatchItemsResponseBodyData) SetPageSize(v int64) *DescribeWatchItemsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *DescribeWatchItemsResponseBodyData) SetRecords(v []*DescribeWatchItemsResponseBodyDataRecords) *DescribeWatchItemsResponseBodyData {
	s.Records = v
	return s
}

func (s *DescribeWatchItemsResponseBodyData) SetTotalCount(v int64) *DescribeWatchItemsResponseBodyData {
	s.TotalCount = &v
	return s
}

type DescribeWatchItemsResponseBodyDataRecords struct {
	ItemAttributes *string `json:"ItemAttributes,omitempty" xml:"ItemAttributes,omitempty"`
	ItemImageUrl   *string `json:"ItemImageUrl,omitempty" xml:"ItemImageUrl,omitempty"`
	WatchItemId    *string `json:"WatchItemId,omitempty" xml:"WatchItemId,omitempty"`
	WatchItemName  *string `json:"WatchItemName,omitempty" xml:"WatchItemName,omitempty"`
}

func (s DescribeWatchItemsResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s DescribeWatchItemsResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *DescribeWatchItemsResponseBodyDataRecords) SetItemAttributes(v string) *DescribeWatchItemsResponseBodyDataRecords {
	s.ItemAttributes = &v
	return s
}

func (s *DescribeWatchItemsResponseBodyDataRecords) SetItemImageUrl(v string) *DescribeWatchItemsResponseBodyDataRecords {
	s.ItemImageUrl = &v
	return s
}

func (s *DescribeWatchItemsResponseBodyDataRecords) SetWatchItemId(v string) *DescribeWatchItemsResponseBodyDataRecords {
	s.WatchItemId = &v
	return s
}

func (s *DescribeWatchItemsResponseBodyDataRecords) SetWatchItemName(v string) *DescribeWatchItemsResponseBodyDataRecords {
	s.WatchItemName = &v
	return s
}

type DescribeWatchItemsResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeWatchItemsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeWatchItemsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWatchItemsResponse) GoString() string {
	return s.String()
}

func (s *DescribeWatchItemsResponse) SetHeaders(v map[string]*string) *DescribeWatchItemsResponse {
	s.Headers = v
	return s
}

func (s *DescribeWatchItemsResponse) SetBody(v *DescribeWatchItemsResponseBody) *DescribeWatchItemsResponse {
	s.Body = v
	return s
}

type DescribeWatchPoliciesRequest struct {
	PageNumber     *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	WatchPolicyIds *string `json:"WatchPolicyIds,omitempty" xml:"WatchPolicyIds,omitempty"`
}

func (s DescribeWatchPoliciesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeWatchPoliciesRequest) GoString() string {
	return s.String()
}

func (s *DescribeWatchPoliciesRequest) SetPageNumber(v int64) *DescribeWatchPoliciesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeWatchPoliciesRequest) SetPageSize(v int64) *DescribeWatchPoliciesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeWatchPoliciesRequest) SetWatchPolicyIds(v string) *DescribeWatchPoliciesRequest {
	s.WatchPolicyIds = &v
	return s
}

type DescribeWatchPoliciesResponseBody struct {
	Code    *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *DescribeWatchPoliciesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                                `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeWatchPoliciesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeWatchPoliciesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeWatchPoliciesResponseBody) SetCode(v string) *DescribeWatchPoliciesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeWatchPoliciesResponseBody) SetData(v *DescribeWatchPoliciesResponseBodyData) *DescribeWatchPoliciesResponseBody {
	s.Data = v
	return s
}

func (s *DescribeWatchPoliciesResponseBody) SetMessage(v string) *DescribeWatchPoliciesResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeWatchPoliciesResponseBody) SetRequestId(v string) *DescribeWatchPoliciesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeWatchPoliciesResponseBody) SetSuccess(v bool) *DescribeWatchPoliciesResponseBody {
	s.Success = &v
	return s
}

type DescribeWatchPoliciesResponseBodyData struct {
	PageNumber *int64                                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int64                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*DescribeWatchPoliciesResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int64                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeWatchPoliciesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeWatchPoliciesResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeWatchPoliciesResponseBodyData) SetPageNumber(v int64) *DescribeWatchPoliciesResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *DescribeWatchPoliciesResponseBodyData) SetPageSize(v int64) *DescribeWatchPoliciesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *DescribeWatchPoliciesResponseBodyData) SetRecords(v []*DescribeWatchPoliciesResponseBodyDataRecords) *DescribeWatchPoliciesResponseBodyData {
	s.Records = v
	return s
}

func (s *DescribeWatchPoliciesResponseBodyData) SetTotalCount(v int64) *DescribeWatchPoliciesResponseBodyData {
	s.TotalCount = &v
	return s
}

type DescribeWatchPoliciesResponseBodyDataRecords struct {
	ItemMatchType       *string  `json:"ItemMatchType,omitempty" xml:"ItemMatchType,omitempty"`
	SimilarityThreshold *float64 `json:"SimilarityThreshold,omitempty" xml:"SimilarityThreshold,omitempty"`
	TargetType          *string  `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
	WatchMode           *string  `json:"WatchMode,omitempty" xml:"WatchMode,omitempty"`
	WatchPolicyId       *string  `json:"WatchPolicyId,omitempty" xml:"WatchPolicyId,omitempty"`
	WatchPolicyName     *string  `json:"WatchPolicyName,omitempty" xml:"WatchPolicyName,omitempty"`
}

func (s DescribeWatchPoliciesResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s DescribeWatchPoliciesResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *DescribeWatchPoliciesResponseBodyDataRecords) SetItemMatchType(v string) *DescribeWatchPoliciesResponseBodyDataRecords {
	s.ItemMatchType = &v
	return s
}

func (s *DescribeWatchPoliciesResponseBodyDataRecords) SetSimilarityThreshold(v float64) *DescribeWatchPoliciesResponseBodyDataRecords {
	s.SimilarityThreshold = &v
	return s
}

func (s *DescribeWatchPoliciesResponseBodyDataRecords) SetTargetType(v string) *DescribeWatchPoliciesResponseBodyDataRecords {
	s.TargetType = &v
	return s
}

func (s *DescribeWatchPoliciesResponseBodyDataRecords) SetWatchMode(v string) *DescribeWatchPoliciesResponseBodyDataRecords {
	s.WatchMode = &v
	return s
}

func (s *DescribeWatchPoliciesResponseBodyDataRecords) SetWatchPolicyId(v string) *DescribeWatchPoliciesResponseBodyDataRecords {
	s.WatchPolicyId = &v
	return s
}

func (s *DescribeWatchPoliciesResponseBodyDataRecords) SetWatchPolicyName(v string) *DescribeWatchPoliciesResponseBodyDataRecords {
	s.WatchPolicyName = &v
	return s
}

type DescribeWatchPoliciesResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeWatchPoliciesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeWatchPoliciesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWatchPoliciesResponse) GoString() string {
	return s.String()
}

func (s *DescribeWatchPoliciesResponse) SetHeaders(v map[string]*string) *DescribeWatchPoliciesResponse {
	s.Headers = v
	return s
}

func (s *DescribeWatchPoliciesResponse) SetBody(v *DescribeWatchPoliciesResponseBody) *DescribeWatchPoliciesResponse {
	s.Body = v
	return s
}

type DescribeWatchTasksRequest struct {
	PageNumber   *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	WatchTaskIds *string `json:"WatchTaskIds,omitempty" xml:"WatchTaskIds,omitempty"`
}

func (s DescribeWatchTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeWatchTasksRequest) GoString() string {
	return s.String()
}

func (s *DescribeWatchTasksRequest) SetPageNumber(v int64) *DescribeWatchTasksRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeWatchTasksRequest) SetPageSize(v int64) *DescribeWatchTasksRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeWatchTasksRequest) SetWatchTaskIds(v string) *DescribeWatchTasksRequest {
	s.WatchTaskIds = &v
	return s
}

type DescribeWatchTasksResponseBody struct {
	Code    *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *DescribeWatchTasksResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeWatchTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeWatchTasksResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeWatchTasksResponseBody) SetCode(v string) *DescribeWatchTasksResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeWatchTasksResponseBody) SetData(v *DescribeWatchTasksResponseBodyData) *DescribeWatchTasksResponseBody {
	s.Data = v
	return s
}

func (s *DescribeWatchTasksResponseBody) SetMessage(v string) *DescribeWatchTasksResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeWatchTasksResponseBody) SetRequestId(v string) *DescribeWatchTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeWatchTasksResponseBody) SetSuccess(v bool) *DescribeWatchTasksResponseBody {
	s.Success = &v
	return s
}

type DescribeWatchTasksResponseBodyData struct {
	PageNumber *int64                                       `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int64                                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*DescribeWatchTasksResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int64                                       `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeWatchTasksResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeWatchTasksResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeWatchTasksResponseBodyData) SetPageNumber(v int64) *DescribeWatchTasksResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *DescribeWatchTasksResponseBodyData) SetPageSize(v int64) *DescribeWatchTasksResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *DescribeWatchTasksResponseBodyData) SetRecords(v []*DescribeWatchTasksResponseBodyDataRecords) *DescribeWatchTasksResponseBodyData {
	s.Records = v
	return s
}

func (s *DescribeWatchTasksResponseBodyData) SetTotalCount(v int64) *DescribeWatchTasksResponseBodyData {
	s.TotalCount = &v
	return s
}

type DescribeWatchTasksResponseBodyDataRecords struct {
	CorpId             *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	Description        *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DeviceList         *string `json:"DeviceList,omitempty" xml:"DeviceList,omitempty"`
	MessageReceiver    *string `json:"MessageReceiver,omitempty" xml:"MessageReceiver,omitempty"`
	ScheduleCycleDates *string `json:"ScheduleCycleDates,omitempty" xml:"ScheduleCycleDates,omitempty"`
	ScheduleTimes      *string `json:"ScheduleTimes,omitempty" xml:"ScheduleTimes,omitempty"`
	ScheduleType       *string `json:"ScheduleType,omitempty" xml:"ScheduleType,omitempty"`
	TaskName           *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	WatchPolicyIds     *string `json:"WatchPolicyIds,omitempty" xml:"WatchPolicyIds,omitempty"`
	WatchTaskId        *string `json:"WatchTaskId,omitempty" xml:"WatchTaskId,omitempty"`
}

func (s DescribeWatchTasksResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s DescribeWatchTasksResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *DescribeWatchTasksResponseBodyDataRecords) SetCorpId(v string) *DescribeWatchTasksResponseBodyDataRecords {
	s.CorpId = &v
	return s
}

func (s *DescribeWatchTasksResponseBodyDataRecords) SetDescription(v string) *DescribeWatchTasksResponseBodyDataRecords {
	s.Description = &v
	return s
}

func (s *DescribeWatchTasksResponseBodyDataRecords) SetDeviceList(v string) *DescribeWatchTasksResponseBodyDataRecords {
	s.DeviceList = &v
	return s
}

func (s *DescribeWatchTasksResponseBodyDataRecords) SetMessageReceiver(v string) *DescribeWatchTasksResponseBodyDataRecords {
	s.MessageReceiver = &v
	return s
}

func (s *DescribeWatchTasksResponseBodyDataRecords) SetScheduleCycleDates(v string) *DescribeWatchTasksResponseBodyDataRecords {
	s.ScheduleCycleDates = &v
	return s
}

func (s *DescribeWatchTasksResponseBodyDataRecords) SetScheduleTimes(v string) *DescribeWatchTasksResponseBodyDataRecords {
	s.ScheduleTimes = &v
	return s
}

func (s *DescribeWatchTasksResponseBodyDataRecords) SetScheduleType(v string) *DescribeWatchTasksResponseBodyDataRecords {
	s.ScheduleType = &v
	return s
}

func (s *DescribeWatchTasksResponseBodyDataRecords) SetTaskName(v string) *DescribeWatchTasksResponseBodyDataRecords {
	s.TaskName = &v
	return s
}

func (s *DescribeWatchTasksResponseBodyDataRecords) SetWatchPolicyIds(v string) *DescribeWatchTasksResponseBodyDataRecords {
	s.WatchPolicyIds = &v
	return s
}

func (s *DescribeWatchTasksResponseBodyDataRecords) SetWatchTaskId(v string) *DescribeWatchTasksResponseBodyDataRecords {
	s.WatchTaskId = &v
	return s
}

type DescribeWatchTasksResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeWatchTasksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeWatchTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWatchTasksResponse) GoString() string {
	return s.String()
}

func (s *DescribeWatchTasksResponse) SetHeaders(v map[string]*string) *DescribeWatchTasksResponse {
	s.Headers = v
	return s
}

func (s *DescribeWatchTasksResponse) SetBody(v *DescribeWatchTasksResponseBody) *DescribeWatchTasksResponse {
	s.Body = v
	return s
}

type DescribesDoubleVerificationGroupsRequest struct {
	DoubleVerificationGroupIds *string `json:"DoubleVerificationGroupIds,omitempty" xml:"DoubleVerificationGroupIds,omitempty"`
	Id                         *string `json:"Id,omitempty" xml:"Id,omitempty"`
	PageNum                    *int64  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize                   *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribesDoubleVerificationGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribesDoubleVerificationGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribesDoubleVerificationGroupsRequest) SetDoubleVerificationGroupIds(v string) *DescribesDoubleVerificationGroupsRequest {
	s.DoubleVerificationGroupIds = &v
	return s
}

func (s *DescribesDoubleVerificationGroupsRequest) SetId(v string) *DescribesDoubleVerificationGroupsRequest {
	s.Id = &v
	return s
}

func (s *DescribesDoubleVerificationGroupsRequest) SetPageNum(v int64) *DescribesDoubleVerificationGroupsRequest {
	s.PageNum = &v
	return s
}

func (s *DescribesDoubleVerificationGroupsRequest) SetPageSize(v int64) *DescribesDoubleVerificationGroupsRequest {
	s.PageSize = &v
	return s
}

type DescribesDoubleVerificationGroupsResponseBody struct {
	Code                     *string                                                                `json:"Code,omitempty" xml:"Code,omitempty"`
	DoubleVerificationGroups *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroups `json:"DoubleVerificationGroups,omitempty" xml:"DoubleVerificationGroups,omitempty" type:"Struct"`
	Message                  *string                                                                `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribesDoubleVerificationGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribesDoubleVerificationGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribesDoubleVerificationGroupsResponseBody) SetCode(v string) *DescribesDoubleVerificationGroupsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribesDoubleVerificationGroupsResponseBody) SetDoubleVerificationGroups(v *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroups) *DescribesDoubleVerificationGroupsResponseBody {
	s.DoubleVerificationGroups = v
	return s
}

func (s *DescribesDoubleVerificationGroupsResponseBody) SetMessage(v string) *DescribesDoubleVerificationGroupsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribesDoubleVerificationGroupsResponseBody) SetRequestId(v string) *DescribesDoubleVerificationGroupsResponseBody {
	s.RequestId = &v
	return s
}

type DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroups struct {
	DoubleVerificationGroupList []*DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupList `json:"DoubleVerificationGroupList,omitempty" xml:"DoubleVerificationGroupList,omitempty" type:"Repeated"`
	PageNum                     *int64                                                                                              `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize                    *int64                                                                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalNum                    *int64                                                                                              `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
}

func (s DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroups) GoString() string {
	return s.String()
}

func (s *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroups) SetDoubleVerificationGroupList(v []*DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupList) *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroups {
	s.DoubleVerificationGroupList = v
	return s
}

func (s *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroups) SetPageNum(v int64) *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroups {
	s.PageNum = &v
	return s
}

func (s *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroups) SetPageSize(v int64) *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroups {
	s.PageSize = &v
	return s
}

func (s *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroups) SetTotalNum(v int64) *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroups {
	s.TotalNum = &v
	return s
}

type DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupList struct {
	DeviceId     *string                                                                                                         `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	Enabled      *string                                                                                                         `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	GroupId      *string                                                                                                         `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Interval     *int64                                                                                                          `json:"Interval,omitempty" xml:"Interval,omitempty"`
	LastChange   *string                                                                                                         `json:"LastChange,omitempty" xml:"LastChange,omitempty"`
	MemberNumber *int64                                                                                                          `json:"MemberNumber,omitempty" xml:"MemberNumber,omitempty"`
	PersonIdList []*DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupListPersonIdList `json:"PersonIdList,omitempty" xml:"PersonIdList,omitempty" type:"Repeated"`
}

func (s DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupList) String() string {
	return tea.Prettify(s)
}

func (s DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupList) GoString() string {
	return s.String()
}

func (s *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupList) SetDeviceId(v string) *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupList {
	s.DeviceId = &v
	return s
}

func (s *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupList) SetEnabled(v string) *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupList {
	s.Enabled = &v
	return s
}

func (s *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupList) SetGroupId(v string) *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupList {
	s.GroupId = &v
	return s
}

func (s *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupList) SetInterval(v int64) *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupList {
	s.Interval = &v
	return s
}

func (s *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupList) SetLastChange(v string) *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupList {
	s.LastChange = &v
	return s
}

func (s *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupList) SetMemberNumber(v int64) *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupList {
	s.MemberNumber = &v
	return s
}

func (s *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupList) SetPersonIdList(v []*DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupListPersonIdList) *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupList {
	s.PersonIdList = v
	return s
}

type DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupListPersonIdList struct {
	PersonId      *string `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	PersonTableId *string `json:"PersonTableId,omitempty" xml:"PersonTableId,omitempty"`
}

func (s DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupListPersonIdList) String() string {
	return tea.Prettify(s)
}

func (s DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupListPersonIdList) GoString() string {
	return s.String()
}

func (s *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupListPersonIdList) SetPersonId(v string) *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupListPersonIdList {
	s.PersonId = &v
	return s
}

func (s *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupListPersonIdList) SetPersonTableId(v string) *DescribesDoubleVerificationGroupsResponseBodyDoubleVerificationGroupsDoubleVerificationGroupListPersonIdList {
	s.PersonTableId = &v
	return s
}

type DescribesDoubleVerificationGroupsResponse struct {
	Headers map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribesDoubleVerificationGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribesDoubleVerificationGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribesDoubleVerificationGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribesDoubleVerificationGroupsResponse) SetHeaders(v map[string]*string) *DescribesDoubleVerificationGroupsResponse {
	s.Headers = v
	return s
}

func (s *DescribesDoubleVerificationGroupsResponse) SetBody(v *DescribesDoubleVerificationGroupsResponseBody) *DescribesDoubleVerificationGroupsResponse {
	s.Body = v
	return s
}

type GetAiotStorageInfoResponseBody struct {
	AiotStorageInfo *GetAiotStorageInfoResponseBodyAiotStorageInfo `json:"AiotStorageInfo,omitempty" xml:"AiotStorageInfo,omitempty" type:"Struct"`
	Code            *string                                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Message         *string                                        `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetAiotStorageInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAiotStorageInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetAiotStorageInfoResponseBody) SetAiotStorageInfo(v *GetAiotStorageInfoResponseBodyAiotStorageInfo) *GetAiotStorageInfoResponseBody {
	s.AiotStorageInfo = v
	return s
}

func (s *GetAiotStorageInfoResponseBody) SetCode(v string) *GetAiotStorageInfoResponseBody {
	s.Code = &v
	return s
}

func (s *GetAiotStorageInfoResponseBody) SetMessage(v string) *GetAiotStorageInfoResponseBody {
	s.Message = &v
	return s
}

func (s *GetAiotStorageInfoResponseBody) SetRequestId(v string) *GetAiotStorageInfoResponseBody {
	s.RequestId = &v
	return s
}

type GetAiotStorageInfoResponseBodyAiotStorageInfo struct {
	EventAlarmMq             *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmMq             `json:"EventAlarmMq,omitempty" xml:"EventAlarmMq,omitempty" type:"Struct"`
	EventAlarmPictureStorage *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmPictureStorage `json:"EventAlarmPictureStorage,omitempty" xml:"EventAlarmPictureStorage,omitempty" type:"Struct"`
}

func (s GetAiotStorageInfoResponseBodyAiotStorageInfo) String() string {
	return tea.Prettify(s)
}

func (s GetAiotStorageInfoResponseBodyAiotStorageInfo) GoString() string {
	return s.String()
}

func (s *GetAiotStorageInfoResponseBodyAiotStorageInfo) SetEventAlarmMq(v *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmMq) *GetAiotStorageInfoResponseBodyAiotStorageInfo {
	s.EventAlarmMq = v
	return s
}

func (s *GetAiotStorageInfoResponseBodyAiotStorageInfo) SetEventAlarmPictureStorage(v *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmPictureStorage) *GetAiotStorageInfoResponseBodyAiotStorageInfo {
	s.EventAlarmPictureStorage = v
	return s
}

type GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmMq struct {
	AlarmTopic *string `json:"AlarmTopic,omitempty" xml:"AlarmTopic,omitempty"`
	EventTopic *string `json:"EventTopic,omitempty" xml:"EventTopic,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MqType     *string `json:"MqType,omitempty" xml:"MqType,omitempty"`
	RamArnRole *string `json:"RamArnRole,omitempty" xml:"RamArnRole,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmMq) String() string {
	return tea.Prettify(s)
}

func (s GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmMq) GoString() string {
	return s.String()
}

func (s *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmMq) SetAlarmTopic(v string) *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmMq {
	s.AlarmTopic = &v
	return s
}

func (s *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmMq) SetEventTopic(v string) *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmMq {
	s.EventTopic = &v
	return s
}

func (s *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmMq) SetInstanceId(v string) *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmMq {
	s.InstanceId = &v
	return s
}

func (s *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmMq) SetMqType(v string) *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmMq {
	s.MqType = &v
	return s
}

func (s *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmMq) SetRamArnRole(v string) *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmMq {
	s.RamArnRole = &v
	return s
}

func (s *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmMq) SetRegionId(v string) *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmMq {
	s.RegionId = &v
	return s
}

type GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmPictureStorage struct {
	Bucket      *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Endpoint    *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	Path        *string `json:"Path,omitempty" xml:"Path,omitempty"`
	Proxy       *string `json:"Proxy,omitempty" xml:"Proxy,omitempty"`
	RamArnRole  *string `json:"RamArnRole,omitempty" xml:"RamArnRole,omitempty"`
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmPictureStorage) String() string {
	return tea.Prettify(s)
}

func (s GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmPictureStorage) GoString() string {
	return s.String()
}

func (s *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmPictureStorage) SetBucket(v string) *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmPictureStorage {
	s.Bucket = &v
	return s
}

func (s *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmPictureStorage) SetEndpoint(v string) *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmPictureStorage {
	s.Endpoint = &v
	return s
}

func (s *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmPictureStorage) SetPath(v string) *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmPictureStorage {
	s.Path = &v
	return s
}

func (s *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmPictureStorage) SetProxy(v string) *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmPictureStorage {
	s.Proxy = &v
	return s
}

func (s *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmPictureStorage) SetRamArnRole(v string) *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmPictureStorage {
	s.RamArnRole = &v
	return s
}

func (s *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmPictureStorage) SetStorageType(v string) *GetAiotStorageInfoResponseBodyAiotStorageInfoEventAlarmPictureStorage {
	s.StorageType = &v
	return s
}

type GetAiotStorageInfoResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetAiotStorageInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetAiotStorageInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAiotStorageInfoResponse) GoString() string {
	return s.String()
}

func (s *GetAiotStorageInfoResponse) SetHeaders(v map[string]*string) *GetAiotStorageInfoResponse {
	s.Headers = v
	return s
}

func (s *GetAiotStorageInfoResponse) SetBody(v *GetAiotStorageInfoResponseBody) *GetAiotStorageInfoResponse {
	s.Body = v
	return s
}

type GetBodyOptionsRequest struct {
	CorpId *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
}

func (s GetBodyOptionsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBodyOptionsRequest) GoString() string {
	return s.String()
}

func (s *GetBodyOptionsRequest) SetCorpId(v string) *GetBodyOptionsRequest {
	s.CorpId = &v
	return s
}

type GetBodyOptionsResponseBody struct {
	Code      *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []*GetBodyOptionsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message   *string                           `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetBodyOptionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBodyOptionsResponseBody) GoString() string {
	return s.String()
}

func (s *GetBodyOptionsResponseBody) SetCode(v string) *GetBodyOptionsResponseBody {
	s.Code = &v
	return s
}

func (s *GetBodyOptionsResponseBody) SetData(v []*GetBodyOptionsResponseBodyData) *GetBodyOptionsResponseBody {
	s.Data = v
	return s
}

func (s *GetBodyOptionsResponseBody) SetMessage(v string) *GetBodyOptionsResponseBody {
	s.Message = &v
	return s
}

func (s *GetBodyOptionsResponseBody) SetRequestId(v string) *GetBodyOptionsResponseBody {
	s.RequestId = &v
	return s
}

type GetBodyOptionsResponseBodyData struct {
	Key        *string                                     `json:"Key,omitempty" xml:"Key,omitempty"`
	Name       *string                                     `json:"Name,omitempty" xml:"Name,omitempty"`
	OptionList []*GetBodyOptionsResponseBodyDataOptionList `json:"OptionList,omitempty" xml:"OptionList,omitempty" type:"Repeated"`
}

func (s GetBodyOptionsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetBodyOptionsResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetBodyOptionsResponseBodyData) SetKey(v string) *GetBodyOptionsResponseBodyData {
	s.Key = &v
	return s
}

func (s *GetBodyOptionsResponseBodyData) SetName(v string) *GetBodyOptionsResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetBodyOptionsResponseBodyData) SetOptionList(v []*GetBodyOptionsResponseBodyDataOptionList) *GetBodyOptionsResponseBodyData {
	s.OptionList = v
	return s
}

type GetBodyOptionsResponseBodyDataOptionList struct {
	Key  *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s GetBodyOptionsResponseBodyDataOptionList) String() string {
	return tea.Prettify(s)
}

func (s GetBodyOptionsResponseBodyDataOptionList) GoString() string {
	return s.String()
}

func (s *GetBodyOptionsResponseBodyDataOptionList) SetKey(v string) *GetBodyOptionsResponseBodyDataOptionList {
	s.Key = &v
	return s
}

func (s *GetBodyOptionsResponseBodyDataOptionList) SetName(v string) *GetBodyOptionsResponseBodyDataOptionList {
	s.Name = &v
	return s
}

type GetBodyOptionsResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetBodyOptionsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetBodyOptionsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBodyOptionsResponse) GoString() string {
	return s.String()
}

func (s *GetBodyOptionsResponse) SetHeaders(v map[string]*string) *GetBodyOptionsResponse {
	s.Headers = v
	return s
}

func (s *GetBodyOptionsResponse) SetBody(v *GetBodyOptionsResponseBody) *GetBodyOptionsResponse {
	s.Body = v
	return s
}

type GetCatalogListRequest struct {
	CorpId   *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	IsvSubId *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
}

func (s GetCatalogListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCatalogListRequest) GoString() string {
	return s.String()
}

func (s *GetCatalogListRequest) SetCorpId(v string) *GetCatalogListRequest {
	s.CorpId = &v
	return s
}

func (s *GetCatalogListRequest) SetIsvSubId(v string) *GetCatalogListRequest {
	s.IsvSubId = &v
	return s
}

type GetCatalogListResponseBody struct {
	Code      *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []*GetCatalogListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message   *string                           `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetCatalogListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCatalogListResponseBody) GoString() string {
	return s.String()
}

func (s *GetCatalogListResponseBody) SetCode(v string) *GetCatalogListResponseBody {
	s.Code = &v
	return s
}

func (s *GetCatalogListResponseBody) SetData(v []*GetCatalogListResponseBodyData) *GetCatalogListResponseBody {
	s.Data = v
	return s
}

func (s *GetCatalogListResponseBody) SetMessage(v string) *GetCatalogListResponseBody {
	s.Message = &v
	return s
}

func (s *GetCatalogListResponseBody) SetRequestId(v string) *GetCatalogListResponseBody {
	s.RequestId = &v
	return s
}

type GetCatalogListResponseBodyData struct {
	CatalogId       *int64  `json:"CatalogId,omitempty" xml:"CatalogId,omitempty"`
	CatalogName     *string `json:"CatalogName,omitempty" xml:"CatalogName,omitempty"`
	IsvSubId        *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	ParentCatalogId *int64  `json:"ParentCatalogId,omitempty" xml:"ParentCatalogId,omitempty"`
	ProfileCount    *int64  `json:"ProfileCount,omitempty" xml:"ProfileCount,omitempty"`
}

func (s GetCatalogListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetCatalogListResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetCatalogListResponseBodyData) SetCatalogId(v int64) *GetCatalogListResponseBodyData {
	s.CatalogId = &v
	return s
}

func (s *GetCatalogListResponseBodyData) SetCatalogName(v string) *GetCatalogListResponseBodyData {
	s.CatalogName = &v
	return s
}

func (s *GetCatalogListResponseBodyData) SetIsvSubId(v string) *GetCatalogListResponseBodyData {
	s.IsvSubId = &v
	return s
}

func (s *GetCatalogListResponseBodyData) SetParentCatalogId(v int64) *GetCatalogListResponseBodyData {
	s.ParentCatalogId = &v
	return s
}

func (s *GetCatalogListResponseBodyData) SetProfileCount(v int64) *GetCatalogListResponseBodyData {
	s.ProfileCount = &v
	return s
}

type GetCatalogListResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetCatalogListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetCatalogListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCatalogListResponse) GoString() string {
	return s.String()
}

func (s *GetCatalogListResponse) SetHeaders(v map[string]*string) *GetCatalogListResponse {
	s.Headers = v
	return s
}

func (s *GetCatalogListResponse) SetBody(v *GetCatalogListResponseBody) *GetCatalogListResponse {
	s.Body = v
	return s
}

type GetCityCodeResponseBody struct {
	Code      *string                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []*GetCityCodeResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message   *string                        `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetCityCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCityCodeResponseBody) GoString() string {
	return s.String()
}

func (s *GetCityCodeResponseBody) SetCode(v string) *GetCityCodeResponseBody {
	s.Code = &v
	return s
}

func (s *GetCityCodeResponseBody) SetData(v []*GetCityCodeResponseBodyData) *GetCityCodeResponseBody {
	s.Data = v
	return s
}

func (s *GetCityCodeResponseBody) SetMessage(v string) *GetCityCodeResponseBody {
	s.Message = &v
	return s
}

func (s *GetCityCodeResponseBody) SetRequestId(v string) *GetCityCodeResponseBody {
	s.RequestId = &v
	return s
}

type GetCityCodeResponseBodyData struct {
	CityAddress *string `json:"CityAddress,omitempty" xml:"CityAddress,omitempty"`
	CityCode    *string `json:"CityCode,omitempty" xml:"CityCode,omitempty"`
}

func (s GetCityCodeResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetCityCodeResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetCityCodeResponseBodyData) SetCityAddress(v string) *GetCityCodeResponseBodyData {
	s.CityAddress = &v
	return s
}

func (s *GetCityCodeResponseBodyData) SetCityCode(v string) *GetCityCodeResponseBodyData {
	s.CityCode = &v
	return s
}

type GetCityCodeResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetCityCodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetCityCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCityCodeResponse) GoString() string {
	return s.String()
}

func (s *GetCityCodeResponse) SetHeaders(v map[string]*string) *GetCityCodeResponse {
	s.Headers = v
	return s
}

func (s *GetCityCodeResponse) SetBody(v *GetCityCodeResponseBody) *GetCityCodeResponse {
	s.Body = v
	return s
}

type GetDataSourceStatsRequest struct {
	CorpIdList     *string `json:"CorpIdList,omitempty" xml:"CorpIdList,omitempty"`
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
}

func (s GetDataSourceStatsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDataSourceStatsRequest) GoString() string {
	return s.String()
}

func (s *GetDataSourceStatsRequest) SetCorpIdList(v string) *GetDataSourceStatsRequest {
	s.CorpIdList = &v
	return s
}

func (s *GetDataSourceStatsRequest) SetDataSourceType(v string) *GetDataSourceStatsRequest {
	s.DataSourceType = &v
	return s
}

type GetDataSourceStatsResponseBody struct {
	Code      *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []*GetDataSourceStatsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message   *string                               `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetDataSourceStatsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDataSourceStatsResponseBody) GoString() string {
	return s.String()
}

func (s *GetDataSourceStatsResponseBody) SetCode(v string) *GetDataSourceStatsResponseBody {
	s.Code = &v
	return s
}

func (s *GetDataSourceStatsResponseBody) SetData(v []*GetDataSourceStatsResponseBodyData) *GetDataSourceStatsResponseBody {
	s.Data = v
	return s
}

func (s *GetDataSourceStatsResponseBody) SetMessage(v string) *GetDataSourceStatsResponseBody {
	s.Message = &v
	return s
}

func (s *GetDataSourceStatsResponseBody) SetRequestId(v string) *GetDataSourceStatsResponseBody {
	s.RequestId = &v
	return s
}

type GetDataSourceStatsResponseBodyData struct {
	DataSourceType *string                `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	Items          map[string]interface{} `json:"Items,omitempty" xml:"Items,omitempty"`
	Total          *int64                 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetDataSourceStatsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDataSourceStatsResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDataSourceStatsResponseBodyData) SetDataSourceType(v string) *GetDataSourceStatsResponseBodyData {
	s.DataSourceType = &v
	return s
}

func (s *GetDataSourceStatsResponseBodyData) SetItems(v map[string]interface{}) *GetDataSourceStatsResponseBodyData {
	s.Items = v
	return s
}

func (s *GetDataSourceStatsResponseBodyData) SetTotal(v int64) *GetDataSourceStatsResponseBodyData {
	s.Total = &v
	return s
}

type GetDataSourceStatsResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetDataSourceStatsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDataSourceStatsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDataSourceStatsResponse) GoString() string {
	return s.String()
}

func (s *GetDataSourceStatsResponse) SetHeaders(v map[string]*string) *GetDataSourceStatsResponse {
	s.Headers = v
	return s
}

func (s *GetDataSourceStatsResponse) SetBody(v *GetDataSourceStatsResponseBody) *GetDataSourceStatsResponse {
	s.Body = v
	return s
}

type GetDeviceCaptureStrategyRequest struct {
	// 设备通道号
	DeviceCode *string `json:"DeviceCode,omitempty" xml:"DeviceCode,omitempty"`
	// 设备类型
	DeviceType *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
}

func (s GetDeviceCaptureStrategyRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceCaptureStrategyRequest) GoString() string {
	return s.String()
}

func (s *GetDeviceCaptureStrategyRequest) SetDeviceCode(v string) *GetDeviceCaptureStrategyRequest {
	s.DeviceCode = &v
	return s
}

func (s *GetDeviceCaptureStrategyRequest) SetDeviceType(v string) *GetDeviceCaptureStrategyRequest {
	s.DeviceType = &v
	return s
}

type GetDeviceCaptureStrategyResponseBody struct {
	// 错误码
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// 响应数据内容
	Data *GetDeviceCaptureStrategyResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// 错误信息
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// RequestId
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetDeviceCaptureStrategyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceCaptureStrategyResponseBody) GoString() string {
	return s.String()
}

func (s *GetDeviceCaptureStrategyResponseBody) SetCode(v string) *GetDeviceCaptureStrategyResponseBody {
	s.Code = &v
	return s
}

func (s *GetDeviceCaptureStrategyResponseBody) SetData(v *GetDeviceCaptureStrategyResponseBodyData) *GetDeviceCaptureStrategyResponseBody {
	s.Data = v
	return s
}

func (s *GetDeviceCaptureStrategyResponseBody) SetMessage(v string) *GetDeviceCaptureStrategyResponseBody {
	s.Message = &v
	return s
}

func (s *GetDeviceCaptureStrategyResponseBody) SetRequestId(v string) *GetDeviceCaptureStrategyResponseBody {
	s.RequestId = &v
	return s
}

type GetDeviceCaptureStrategyResponseBodyData struct {
	// 设备通道
	DeviceCode *string `json:"DeviceCode,omitempty" xml:"DeviceCode,omitempty"`
	// 设备类型
	DeviceType *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	// 星期五抓取策略
	FridayCaptureStrategy *string `json:"FridayCaptureStrategy,omitempty" xml:"FridayCaptureStrategy,omitempty"`
	// 星期一抓取策略
	MondayCaptureStrategy *string `json:"MondayCaptureStrategy,omitempty" xml:"MondayCaptureStrategy,omitempty"`
	// 星期六抓取策略
	SaturdayCaptureStrategy *string `json:"SaturdayCaptureStrategy,omitempty" xml:"SaturdayCaptureStrategy,omitempty"`
	// 星期日抓取策略
	SundayCaptureStrategy *string `json:"SundayCaptureStrategy,omitempty" xml:"SundayCaptureStrategy,omitempty"`
	// 星期四抓取策略
	ThursdayCaptureStrategy *string `json:"ThursdayCaptureStrategy,omitempty" xml:"ThursdayCaptureStrategy,omitempty"`
	// 星期二抓取策略
	TuesdayCaptureStrategy *string `json:"TuesdayCaptureStrategy,omitempty" xml:"TuesdayCaptureStrategy,omitempty"`
	// 星期三抓取策略
	WednesdayCaptureStrategy *string `json:"WednesdayCaptureStrategy,omitempty" xml:"WednesdayCaptureStrategy,omitempty"`
}

func (s GetDeviceCaptureStrategyResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceCaptureStrategyResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDeviceCaptureStrategyResponseBodyData) SetDeviceCode(v string) *GetDeviceCaptureStrategyResponseBodyData {
	s.DeviceCode = &v
	return s
}

func (s *GetDeviceCaptureStrategyResponseBodyData) SetDeviceType(v string) *GetDeviceCaptureStrategyResponseBodyData {
	s.DeviceType = &v
	return s
}

func (s *GetDeviceCaptureStrategyResponseBodyData) SetFridayCaptureStrategy(v string) *GetDeviceCaptureStrategyResponseBodyData {
	s.FridayCaptureStrategy = &v
	return s
}

func (s *GetDeviceCaptureStrategyResponseBodyData) SetMondayCaptureStrategy(v string) *GetDeviceCaptureStrategyResponseBodyData {
	s.MondayCaptureStrategy = &v
	return s
}

func (s *GetDeviceCaptureStrategyResponseBodyData) SetSaturdayCaptureStrategy(v string) *GetDeviceCaptureStrategyResponseBodyData {
	s.SaturdayCaptureStrategy = &v
	return s
}

func (s *GetDeviceCaptureStrategyResponseBodyData) SetSundayCaptureStrategy(v string) *GetDeviceCaptureStrategyResponseBodyData {
	s.SundayCaptureStrategy = &v
	return s
}

func (s *GetDeviceCaptureStrategyResponseBodyData) SetThursdayCaptureStrategy(v string) *GetDeviceCaptureStrategyResponseBodyData {
	s.ThursdayCaptureStrategy = &v
	return s
}

func (s *GetDeviceCaptureStrategyResponseBodyData) SetTuesdayCaptureStrategy(v string) *GetDeviceCaptureStrategyResponseBodyData {
	s.TuesdayCaptureStrategy = &v
	return s
}

func (s *GetDeviceCaptureStrategyResponseBodyData) SetWednesdayCaptureStrategy(v string) *GetDeviceCaptureStrategyResponseBodyData {
	s.WednesdayCaptureStrategy = &v
	return s
}

type GetDeviceCaptureStrategyResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetDeviceCaptureStrategyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDeviceCaptureStrategyResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceCaptureStrategyResponse) GoString() string {
	return s.String()
}

func (s *GetDeviceCaptureStrategyResponse) SetHeaders(v map[string]*string) *GetDeviceCaptureStrategyResponse {
	s.Headers = v
	return s
}

func (s *GetDeviceCaptureStrategyResponse) SetBody(v *GetDeviceCaptureStrategyResponseBody) *GetDeviceCaptureStrategyResponse {
	s.Body = v
	return s
}

type GetDeviceConfigRequest struct {
	DeviceSn        *string `json:"DeviceSn,omitempty" xml:"DeviceSn,omitempty"`
	DeviceTimeStamp *string `json:"DeviceTimeStamp,omitempty" xml:"DeviceTimeStamp,omitempty"`
}

func (s GetDeviceConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceConfigRequest) GoString() string {
	return s.String()
}

func (s *GetDeviceConfigRequest) SetDeviceSn(v string) *GetDeviceConfigRequest {
	s.DeviceSn = &v
	return s
}

func (s *GetDeviceConfigRequest) SetDeviceTimeStamp(v string) *GetDeviceConfigRequest {
	s.DeviceTimeStamp = &v
	return s
}

type GetDeviceConfigResponseBody struct {
	AudioEnable   *string                                   `json:"AudioEnable,omitempty" xml:"AudioEnable,omitempty"`
	AudioFormat   *string                                   `json:"AudioFormat,omitempty" xml:"AudioFormat,omitempty"`
	BitRate       *string                                   `json:"BitRate,omitempty" xml:"BitRate,omitempty"`
	ChannelList   []*GetDeviceConfigResponseBodyChannelList `json:"ChannelList,omitempty" xml:"ChannelList,omitempty" type:"Repeated"`
	Code          *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	DeviceAddress *string                                   `json:"DeviceAddress,omitempty" xml:"DeviceAddress,omitempty"`
	DeviceId      *string                                   `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	DeviceName    *string                                   `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	EncodeFormat  *string                                   `json:"EncodeFormat,omitempty" xml:"EncodeFormat,omitempty"`
	FrameRate     *string                                   `json:"FrameRate,omitempty" xml:"FrameRate,omitempty"`
	GovLength     *int64                                    `json:"GovLength,omitempty" xml:"GovLength,omitempty"`
	Latitude      *string                                   `json:"Latitude,omitempty" xml:"Latitude,omitempty"`
	Longitude     *string                                   `json:"Longitude,omitempty" xml:"Longitude,omitempty"`
	Message       *string                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	OSDList       []*GetDeviceConfigResponseBodyOSDList     `json:"OSDList,omitempty" xml:"OSDList,omitempty" type:"Repeated"`
	OSDTimeEnable *string                                   `json:"OSDTimeEnable,omitempty" xml:"OSDTimeEnable,omitempty"`
	OSDTimeType   *string                                   `json:"OSDTimeType,omitempty" xml:"OSDTimeType,omitempty"`
	OSDTimeX      *string                                   `json:"OSDTimeX,omitempty" xml:"OSDTimeX,omitempty"`
	OSDTimeY      *string                                   `json:"OSDTimeY,omitempty" xml:"OSDTimeY,omitempty"`
	PassWord      *string                                   `json:"PassWord,omitempty" xml:"PassWord,omitempty"`
	Protocol      *string                                   `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// Id of the request
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Resolution    *string `json:"Resolution,omitempty" xml:"Resolution,omitempty"`
	RetryInterval *string `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
	ServerId      *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	ServerIp      *string `json:"ServerIp,omitempty" xml:"ServerIp,omitempty"`
	ServerPort    *string `json:"ServerPort,omitempty" xml:"ServerPort,omitempty"`
	UserName      *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s GetDeviceConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceConfigResponseBody) GoString() string {
	return s.String()
}

func (s *GetDeviceConfigResponseBody) SetAudioEnable(v string) *GetDeviceConfigResponseBody {
	s.AudioEnable = &v
	return s
}

func (s *GetDeviceConfigResponseBody) SetAudioFormat(v string) *GetDeviceConfigResponseBody {
	s.AudioFormat = &v
	return s
}

func (s *GetDeviceConfigResponseBody) SetBitRate(v string) *GetDeviceConfigResponseBody {
	s.BitRate = &v
	return s
}

func (s *GetDeviceConfigResponseBody) SetChannelList(v []*GetDeviceConfigResponseBodyChannelList) *GetDeviceConfigResponseBody {
	s.ChannelList = v
	return s
}

func (s *GetDeviceConfigResponseBody) SetCode(v string) *GetDeviceConfigResponseBody {
	s.Code = &v
	return s
}

func (s *GetDeviceConfigResponseBody) SetDeviceAddress(v string) *GetDeviceConfigResponseBody {
	s.DeviceAddress = &v
	return s
}

func (s *GetDeviceConfigResponseBody) SetDeviceId(v string) *GetDeviceConfigResponseBody {
	s.DeviceId = &v
	return s
}

func (s *GetDeviceConfigResponseBody) SetDeviceName(v string) *GetDeviceConfigResponseBody {
	s.DeviceName = &v
	return s
}

func (s *GetDeviceConfigResponseBody) SetEncodeFormat(v string) *GetDeviceConfigResponseBody {
	s.EncodeFormat = &v
	return s
}

func (s *GetDeviceConfigResponseBody) SetFrameRate(v string) *GetDeviceConfigResponseBody {
	s.FrameRate = &v
	return s
}

func (s *GetDeviceConfigResponseBody) SetGovLength(v int64) *GetDeviceConfigResponseBody {
	s.GovLength = &v
	return s
}

func (s *GetDeviceConfigResponseBody) SetLatitude(v string) *GetDeviceConfigResponseBody {
	s.Latitude = &v
	return s
}

func (s *GetDeviceConfigResponseBody) SetLongitude(v string) *GetDeviceConfigResponseBody {
	s.Longitude = &v
	return s
}

func (s *GetDeviceConfigResponseBody) SetMessage(v string) *GetDeviceConfigResponseBody {
	s.Message = &v
	return s
}

func (s *GetDeviceConfigResponseBody) SetOSDList(v []*GetDeviceConfigResponseBodyOSDList) *GetDeviceConfigResponseBody {
	s.OSDList = v
	return s
}

func (s *GetDeviceConfigResponseBody) SetOSDTimeEnable(v string) *GetDeviceConfigResponseBody {
	s.OSDTimeEnable = &v
	return s
}

func (s *GetDeviceConfigResponseBody) SetOSDTimeType(v string) *GetDeviceConfigResponseBody {
	s.OSDTimeType = &v
	return s
}

func (s *GetDeviceConfigResponseBody) SetOSDTimeX(v string) *GetDeviceConfigResponseBody {
	s.OSDTimeX = &v
	return s
}

func (s *GetDeviceConfigResponseBody) SetOSDTimeY(v string) *GetDeviceConfigResponseBody {
	s.OSDTimeY = &v
	return s
}

func (s *GetDeviceConfigResponseBody) SetPassWord(v string) *GetDeviceConfigResponseBody {
	s.PassWord = &v
	return s
}

func (s *GetDeviceConfigResponseBody) SetProtocol(v string) *GetDeviceConfigResponseBody {
	s.Protocol = &v
	return s
}

func (s *GetDeviceConfigResponseBody) SetRequestId(v string) *GetDeviceConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDeviceConfigResponseBody) SetResolution(v string) *GetDeviceConfigResponseBody {
	s.Resolution = &v
	return s
}

func (s *GetDeviceConfigResponseBody) SetRetryInterval(v string) *GetDeviceConfigResponseBody {
	s.RetryInterval = &v
	return s
}

func (s *GetDeviceConfigResponseBody) SetServerId(v string) *GetDeviceConfigResponseBody {
	s.ServerId = &v
	return s
}

func (s *GetDeviceConfigResponseBody) SetServerIp(v string) *GetDeviceConfigResponseBody {
	s.ServerIp = &v
	return s
}

func (s *GetDeviceConfigResponseBody) SetServerPort(v string) *GetDeviceConfigResponseBody {
	s.ServerPort = &v
	return s
}

func (s *GetDeviceConfigResponseBody) SetUserName(v string) *GetDeviceConfigResponseBody {
	s.UserName = &v
	return s
}

type GetDeviceConfigResponseBodyChannelList struct {
	ChannelGbId              *string `json:"ChannelGbId,omitempty" xml:"ChannelGbId,omitempty"`
	FridayCaptureStrategy    *string `json:"FridayCaptureStrategy,omitempty" xml:"FridayCaptureStrategy,omitempty"`
	MondayCaptureStrategy    *string `json:"MondayCaptureStrategy,omitempty" xml:"MondayCaptureStrategy,omitempty"`
	SaturdayCaptureStrategy  *string `json:"SaturdayCaptureStrategy,omitempty" xml:"SaturdayCaptureStrategy,omitempty"`
	SundayCaptureStrategy    *string `json:"SundayCaptureStrategy,omitempty" xml:"SundayCaptureStrategy,omitempty"`
	ThursdayCaptureStrategy  *string `json:"ThursdayCaptureStrategy,omitempty" xml:"ThursdayCaptureStrategy,omitempty"`
	TuesdayCaptureStrategy   *string `json:"TuesdayCaptureStrategy,omitempty" xml:"TuesdayCaptureStrategy,omitempty"`
	WednesdayCaptureStrategy *string `json:"WednesdayCaptureStrategy,omitempty" xml:"WednesdayCaptureStrategy,omitempty"`
}

func (s GetDeviceConfigResponseBodyChannelList) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceConfigResponseBodyChannelList) GoString() string {
	return s.String()
}

func (s *GetDeviceConfigResponseBodyChannelList) SetChannelGbId(v string) *GetDeviceConfigResponseBodyChannelList {
	s.ChannelGbId = &v
	return s
}

func (s *GetDeviceConfigResponseBodyChannelList) SetFridayCaptureStrategy(v string) *GetDeviceConfigResponseBodyChannelList {
	s.FridayCaptureStrategy = &v
	return s
}

func (s *GetDeviceConfigResponseBodyChannelList) SetMondayCaptureStrategy(v string) *GetDeviceConfigResponseBodyChannelList {
	s.MondayCaptureStrategy = &v
	return s
}

func (s *GetDeviceConfigResponseBodyChannelList) SetSaturdayCaptureStrategy(v string) *GetDeviceConfigResponseBodyChannelList {
	s.SaturdayCaptureStrategy = &v
	return s
}

func (s *GetDeviceConfigResponseBodyChannelList) SetSundayCaptureStrategy(v string) *GetDeviceConfigResponseBodyChannelList {
	s.SundayCaptureStrategy = &v
	return s
}

func (s *GetDeviceConfigResponseBodyChannelList) SetThursdayCaptureStrategy(v string) *GetDeviceConfigResponseBodyChannelList {
	s.ThursdayCaptureStrategy = &v
	return s
}

func (s *GetDeviceConfigResponseBodyChannelList) SetTuesdayCaptureStrategy(v string) *GetDeviceConfigResponseBodyChannelList {
	s.TuesdayCaptureStrategy = &v
	return s
}

func (s *GetDeviceConfigResponseBodyChannelList) SetWednesdayCaptureStrategy(v string) *GetDeviceConfigResponseBodyChannelList {
	s.WednesdayCaptureStrategy = &v
	return s
}

type GetDeviceConfigResponseBodyOSDList struct {
	LeftTopX *string `json:"LeftTopX,omitempty" xml:"LeftTopX,omitempty"`
	LeftTopY *string `json:"LeftTopY,omitempty" xml:"LeftTopY,omitempty"`
	Text     *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s GetDeviceConfigResponseBodyOSDList) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceConfigResponseBodyOSDList) GoString() string {
	return s.String()
}

func (s *GetDeviceConfigResponseBodyOSDList) SetLeftTopX(v string) *GetDeviceConfigResponseBodyOSDList {
	s.LeftTopX = &v
	return s
}

func (s *GetDeviceConfigResponseBodyOSDList) SetLeftTopY(v string) *GetDeviceConfigResponseBodyOSDList {
	s.LeftTopY = &v
	return s
}

func (s *GetDeviceConfigResponseBodyOSDList) SetText(v string) *GetDeviceConfigResponseBodyOSDList {
	s.Text = &v
	return s
}

type GetDeviceConfigResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetDeviceConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDeviceConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceConfigResponse) GoString() string {
	return s.String()
}

func (s *GetDeviceConfigResponse) SetHeaders(v map[string]*string) *GetDeviceConfigResponse {
	s.Headers = v
	return s
}

func (s *GetDeviceConfigResponse) SetBody(v *GetDeviceConfigResponseBody) *GetDeviceConfigResponse {
	s.Body = v
	return s
}

type GetDeviceLiveUrlRequest struct {
	CorpId      *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DeviceId    *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	GbId        *string `json:"GbId,omitempty" xml:"GbId,omitempty"`
	OutProtocol *string `json:"OutProtocol,omitempty" xml:"OutProtocol,omitempty"`
	StreamType  *string `json:"StreamType,omitempty" xml:"StreamType,omitempty"`
}

func (s GetDeviceLiveUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceLiveUrlRequest) GoString() string {
	return s.String()
}

func (s *GetDeviceLiveUrlRequest) SetCorpId(v string) *GetDeviceLiveUrlRequest {
	s.CorpId = &v
	return s
}

func (s *GetDeviceLiveUrlRequest) SetDeviceId(v string) *GetDeviceLiveUrlRequest {
	s.DeviceId = &v
	return s
}

func (s *GetDeviceLiveUrlRequest) SetGbId(v string) *GetDeviceLiveUrlRequest {
	s.GbId = &v
	return s
}

func (s *GetDeviceLiveUrlRequest) SetOutProtocol(v string) *GetDeviceLiveUrlRequest {
	s.OutProtocol = &v
	return s
}

func (s *GetDeviceLiveUrlRequest) SetStreamType(v string) *GetDeviceLiveUrlRequest {
	s.StreamType = &v
	return s
}

type GetDeviceLiveUrlResponseBody struct {
	Code        *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message     *string `json:"Message,omitempty" xml:"Message,omitempty"`
	OutProtocol *string `json:"OutProtocol,omitempty" xml:"OutProtocol,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StreamType  *int64  `json:"StreamType,omitempty" xml:"StreamType,omitempty"`
	Url         *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetDeviceLiveUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceLiveUrlResponseBody) GoString() string {
	return s.String()
}

func (s *GetDeviceLiveUrlResponseBody) SetCode(v string) *GetDeviceLiveUrlResponseBody {
	s.Code = &v
	return s
}

func (s *GetDeviceLiveUrlResponseBody) SetMessage(v string) *GetDeviceLiveUrlResponseBody {
	s.Message = &v
	return s
}

func (s *GetDeviceLiveUrlResponseBody) SetOutProtocol(v string) *GetDeviceLiveUrlResponseBody {
	s.OutProtocol = &v
	return s
}

func (s *GetDeviceLiveUrlResponseBody) SetRequestId(v string) *GetDeviceLiveUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDeviceLiveUrlResponseBody) SetStreamType(v int64) *GetDeviceLiveUrlResponseBody {
	s.StreamType = &v
	return s
}

func (s *GetDeviceLiveUrlResponseBody) SetUrl(v string) *GetDeviceLiveUrlResponseBody {
	s.Url = &v
	return s
}

type GetDeviceLiveUrlResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetDeviceLiveUrlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDeviceLiveUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceLiveUrlResponse) GoString() string {
	return s.String()
}

func (s *GetDeviceLiveUrlResponse) SetHeaders(v map[string]*string) *GetDeviceLiveUrlResponse {
	s.Headers = v
	return s
}

func (s *GetDeviceLiveUrlResponse) SetBody(v *GetDeviceLiveUrlResponseBody) *GetDeviceLiveUrlResponse {
	s.Body = v
	return s
}

type GetDevicePictureRequest struct {
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
}

func (s GetDevicePictureRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDevicePictureRequest) GoString() string {
	return s.String()
}

func (s *GetDevicePictureRequest) SetDeviceId(v string) *GetDevicePictureRequest {
	s.DeviceId = &v
	return s
}

type GetDevicePictureResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetDevicePictureResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDevicePictureResponseBody) GoString() string {
	return s.String()
}

func (s *GetDevicePictureResponseBody) SetCode(v string) *GetDevicePictureResponseBody {
	s.Code = &v
	return s
}

func (s *GetDevicePictureResponseBody) SetData(v string) *GetDevicePictureResponseBody {
	s.Data = &v
	return s
}

func (s *GetDevicePictureResponseBody) SetMessage(v string) *GetDevicePictureResponseBody {
	s.Message = &v
	return s
}

func (s *GetDevicePictureResponseBody) SetRequestId(v string) *GetDevicePictureResponseBody {
	s.RequestId = &v
	return s
}

type GetDevicePictureResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetDevicePictureResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDevicePictureResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDevicePictureResponse) GoString() string {
	return s.String()
}

func (s *GetDevicePictureResponse) SetHeaders(v map[string]*string) *GetDevicePictureResponse {
	s.Headers = v
	return s
}

func (s *GetDevicePictureResponse) SetBody(v *GetDevicePictureResponseBody) *GetDevicePictureResponse {
	s.Body = v
	return s
}

type GetDeviceStatsRequest struct {
	CorpIdList   *string `json:"CorpIdList,omitempty" xml:"CorpIdList,omitempty"`
	DeviceStatus *string `json:"DeviceStatus,omitempty" xml:"DeviceStatus,omitempty"`
	DeviceType   *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
}

func (s GetDeviceStatsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceStatsRequest) GoString() string {
	return s.String()
}

func (s *GetDeviceStatsRequest) SetCorpIdList(v string) *GetDeviceStatsRequest {
	s.CorpIdList = &v
	return s
}

func (s *GetDeviceStatsRequest) SetDeviceStatus(v string) *GetDeviceStatsRequest {
	s.DeviceStatus = &v
	return s
}

func (s *GetDeviceStatsRequest) SetDeviceType(v string) *GetDeviceStatsRequest {
	s.DeviceType = &v
	return s
}

type GetDeviceStatsResponseBody struct {
	Code      *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []*GetDeviceStatsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message   *string                           `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetDeviceStatsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceStatsResponseBody) GoString() string {
	return s.String()
}

func (s *GetDeviceStatsResponseBody) SetCode(v string) *GetDeviceStatsResponseBody {
	s.Code = &v
	return s
}

func (s *GetDeviceStatsResponseBody) SetData(v []*GetDeviceStatsResponseBodyData) *GetDeviceStatsResponseBody {
	s.Data = v
	return s
}

func (s *GetDeviceStatsResponseBody) SetMessage(v string) *GetDeviceStatsResponseBody {
	s.Message = &v
	return s
}

func (s *GetDeviceStatsResponseBody) SetRequestId(v string) *GetDeviceStatsResponseBody {
	s.RequestId = &v
	return s
}

type GetDeviceStatsResponseBodyData struct {
	Count        *int64  `json:"Count,omitempty" xml:"Count,omitempty"`
	DeviceStatus *string `json:"DeviceStatus,omitempty" xml:"DeviceStatus,omitempty"`
	DeviceType   *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
}

func (s GetDeviceStatsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceStatsResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDeviceStatsResponseBodyData) SetCount(v int64) *GetDeviceStatsResponseBodyData {
	s.Count = &v
	return s
}

func (s *GetDeviceStatsResponseBodyData) SetDeviceStatus(v string) *GetDeviceStatsResponseBodyData {
	s.DeviceStatus = &v
	return s
}

func (s *GetDeviceStatsResponseBodyData) SetDeviceType(v string) *GetDeviceStatsResponseBodyData {
	s.DeviceType = &v
	return s
}

type GetDeviceStatsResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetDeviceStatsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDeviceStatsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceStatsResponse) GoString() string {
	return s.String()
}

func (s *GetDeviceStatsResponse) SetHeaders(v map[string]*string) *GetDeviceStatsResponse {
	s.Headers = v
	return s
}

func (s *GetDeviceStatsResponse) SetBody(v *GetDeviceStatsResponseBody) *GetDeviceStatsResponse {
	s.Body = v
	return s
}

type GetDeviceVideoUrlRequest struct {
	CorpId      *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DeviceId    *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	EndTime     *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	GbId        *string `json:"GbId,omitempty" xml:"GbId,omitempty"`
	OutProtocol *string `json:"OutProtocol,omitempty" xml:"OutProtocol,omitempty"`
	StartTime   *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s GetDeviceVideoUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceVideoUrlRequest) GoString() string {
	return s.String()
}

func (s *GetDeviceVideoUrlRequest) SetCorpId(v string) *GetDeviceVideoUrlRequest {
	s.CorpId = &v
	return s
}

func (s *GetDeviceVideoUrlRequest) SetDeviceId(v string) *GetDeviceVideoUrlRequest {
	s.DeviceId = &v
	return s
}

func (s *GetDeviceVideoUrlRequest) SetEndTime(v int64) *GetDeviceVideoUrlRequest {
	s.EndTime = &v
	return s
}

func (s *GetDeviceVideoUrlRequest) SetGbId(v string) *GetDeviceVideoUrlRequest {
	s.GbId = &v
	return s
}

func (s *GetDeviceVideoUrlRequest) SetOutProtocol(v string) *GetDeviceVideoUrlRequest {
	s.OutProtocol = &v
	return s
}

func (s *GetDeviceVideoUrlRequest) SetStartTime(v int64) *GetDeviceVideoUrlRequest {
	s.StartTime = &v
	return s
}

func (s *GetDeviceVideoUrlRequest) SetStorageType(v string) *GetDeviceVideoUrlRequest {
	s.StorageType = &v
	return s
}

type GetDeviceVideoUrlResponseBody struct {
	Code        *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message     *string `json:"Message,omitempty" xml:"Message,omitempty"`
	OutProtocol *string `json:"OutProtocol,omitempty" xml:"OutProtocol,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Url         *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetDeviceVideoUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceVideoUrlResponseBody) GoString() string {
	return s.String()
}

func (s *GetDeviceVideoUrlResponseBody) SetCode(v string) *GetDeviceVideoUrlResponseBody {
	s.Code = &v
	return s
}

func (s *GetDeviceVideoUrlResponseBody) SetMessage(v string) *GetDeviceVideoUrlResponseBody {
	s.Message = &v
	return s
}

func (s *GetDeviceVideoUrlResponseBody) SetOutProtocol(v string) *GetDeviceVideoUrlResponseBody {
	s.OutProtocol = &v
	return s
}

func (s *GetDeviceVideoUrlResponseBody) SetRequestId(v string) *GetDeviceVideoUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDeviceVideoUrlResponseBody) SetUrl(v string) *GetDeviceVideoUrlResponseBody {
	s.Url = &v
	return s
}

type GetDeviceVideoUrlResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetDeviceVideoUrlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDeviceVideoUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceVideoUrlResponse) GoString() string {
	return s.String()
}

func (s *GetDeviceVideoUrlResponse) SetHeaders(v map[string]*string) *GetDeviceVideoUrlResponse {
	s.Headers = v
	return s
}

func (s *GetDeviceVideoUrlResponse) SetBody(v *GetDeviceVideoUrlResponseBody) *GetDeviceVideoUrlResponse {
	s.Body = v
	return s
}

type GetFaceModelResultRequest struct {
	PictureContent *string `json:"PictureContent,omitempty" xml:"PictureContent,omitempty"`
	PictureId      *string `json:"PictureId,omitempty" xml:"PictureId,omitempty"`
	PictureUrl     *string `json:"PictureUrl,omitempty" xml:"PictureUrl,omitempty"`
}

func (s GetFaceModelResultRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFaceModelResultRequest) GoString() string {
	return s.String()
}

func (s *GetFaceModelResultRequest) SetPictureContent(v string) *GetFaceModelResultRequest {
	s.PictureContent = &v
	return s
}

func (s *GetFaceModelResultRequest) SetPictureId(v string) *GetFaceModelResultRequest {
	s.PictureId = &v
	return s
}

func (s *GetFaceModelResultRequest) SetPictureUrl(v string) *GetFaceModelResultRequest {
	s.PictureUrl = &v
	return s
}

type GetFaceModelResultResponseBody struct {
	Code      *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *GetFaceModelResultResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetFaceModelResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFaceModelResultResponseBody) GoString() string {
	return s.String()
}

func (s *GetFaceModelResultResponseBody) SetCode(v string) *GetFaceModelResultResponseBody {
	s.Code = &v
	return s
}

func (s *GetFaceModelResultResponseBody) SetData(v *GetFaceModelResultResponseBodyData) *GetFaceModelResultResponseBody {
	s.Data = v
	return s
}

func (s *GetFaceModelResultResponseBody) SetMessage(v string) *GetFaceModelResultResponseBody {
	s.Message = &v
	return s
}

func (s *GetFaceModelResultResponseBody) SetRequestId(v string) *GetFaceModelResultResponseBody {
	s.RequestId = &v
	return s
}

type GetFaceModelResultResponseBodyData struct {
	Records []*GetFaceModelResultResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
}

func (s GetFaceModelResultResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetFaceModelResultResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetFaceModelResultResponseBodyData) SetRecords(v []*GetFaceModelResultResponseBodyDataRecords) *GetFaceModelResultResponseBodyData {
	s.Records = v
	return s
}

type GetFaceModelResultResponseBodyDataRecords struct {
	AgeLowerLimit              *int32     `json:"AgeLowerLimit,omitempty" xml:"AgeLowerLimit,omitempty"`
	AgeLowerLimitReliability   *string    `json:"AgeLowerLimitReliability,omitempty" xml:"AgeLowerLimitReliability,omitempty"`
	AgeUpLimit                 *int32     `json:"AgeUpLimit,omitempty" xml:"AgeUpLimit,omitempty"`
	AgeUpLimitReliability      *string    `json:"AgeUpLimitReliability,omitempty" xml:"AgeUpLimitReliability,omitempty"`
	CapColor                   *int32     `json:"CapColor,omitempty" xml:"CapColor,omitempty"`
	CapColorReliability        *string    `json:"CapColorReliability,omitempty" xml:"CapColorReliability,omitempty"`
	CapStyle                   *int32     `json:"CapStyle,omitempty" xml:"CapStyle,omitempty"`
	CapStyleReliability        *string    `json:"CapStyleReliability,omitempty" xml:"CapStyleReliability,omitempty"`
	EthicCode                  *int32     `json:"EthicCode,omitempty" xml:"EthicCode,omitempty"`
	EthicCodeReliability       *string    `json:"EthicCodeReliability,omitempty" xml:"EthicCodeReliability,omitempty"`
	FaceStyle                  *string    `json:"FaceStyle,omitempty" xml:"FaceStyle,omitempty"`
	FaceStyleReliability       *string    `json:"FaceStyleReliability,omitempty" xml:"FaceStyleReliability,omitempty"`
	FeatureData                []*float32 `json:"FeatureData,omitempty" xml:"FeatureData,omitempty" type:"Repeated"`
	GenderCode                 *int32     `json:"GenderCode,omitempty" xml:"GenderCode,omitempty"`
	GenderCodeReliability      *string    `json:"GenderCodeReliability,omitempty" xml:"GenderCodeReliability,omitempty"`
	GlassColor                 *int32     `json:"GlassColor,omitempty" xml:"GlassColor,omitempty"`
	GlassColorReliability      *string    `json:"GlassColorReliability,omitempty" xml:"GlassColorReliability,omitempty"`
	GlassStyle                 *int32     `json:"GlassStyle,omitempty" xml:"GlassStyle,omitempty"`
	GlassStyleReliability      *string    `json:"GlassStyleReliability,omitempty" xml:"GlassStyleReliability,omitempty"`
	HairColor                  *int32     `json:"HairColor,omitempty" xml:"HairColor,omitempty"`
	HairColorReliability       *string    `json:"HairColorReliability,omitempty" xml:"HairColorReliability,omitempty"`
	HairStyle                  *int32     `json:"HairStyle,omitempty" xml:"HairStyle,omitempty"`
	HairStyleReliability       *string    `json:"HairStyleReliability,omitempty" xml:"HairStyleReliability,omitempty"`
	LeftTopX                   *float32   `json:"LeftTopX,omitempty" xml:"LeftTopX,omitempty"`
	LeftTopY                   *float32   `json:"LeftTopY,omitempty" xml:"LeftTopY,omitempty"`
	MustacheStyle              *string    `json:"MustacheStyle,omitempty" xml:"MustacheStyle,omitempty"`
	MustacheStyleReliability   *string    `json:"MustacheStyleReliability,omitempty" xml:"MustacheStyleReliability,omitempty"`
	RespiratorColor            *int32     `json:"RespiratorColor,omitempty" xml:"RespiratorColor,omitempty"`
	RespiratorColorReliability *string    `json:"RespiratorColorReliability,omitempty" xml:"RespiratorColorReliability,omitempty"`
	RightBottomX               *float32   `json:"RightBottomX,omitempty" xml:"RightBottomX,omitempty"`
	RightBottomY               *float32   `json:"RightBottomY,omitempty" xml:"RightBottomY,omitempty"`
	SkinColor                  *int32     `json:"SkinColor,omitempty" xml:"SkinColor,omitempty"`
	SkinColorReliability       *string    `json:"SkinColorReliability,omitempty" xml:"SkinColorReliability,omitempty"`
}

func (s GetFaceModelResultResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s GetFaceModelResultResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetAgeLowerLimit(v int32) *GetFaceModelResultResponseBodyDataRecords {
	s.AgeLowerLimit = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetAgeLowerLimitReliability(v string) *GetFaceModelResultResponseBodyDataRecords {
	s.AgeLowerLimitReliability = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetAgeUpLimit(v int32) *GetFaceModelResultResponseBodyDataRecords {
	s.AgeUpLimit = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetAgeUpLimitReliability(v string) *GetFaceModelResultResponseBodyDataRecords {
	s.AgeUpLimitReliability = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetCapColor(v int32) *GetFaceModelResultResponseBodyDataRecords {
	s.CapColor = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetCapColorReliability(v string) *GetFaceModelResultResponseBodyDataRecords {
	s.CapColorReliability = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetCapStyle(v int32) *GetFaceModelResultResponseBodyDataRecords {
	s.CapStyle = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetCapStyleReliability(v string) *GetFaceModelResultResponseBodyDataRecords {
	s.CapStyleReliability = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetEthicCode(v int32) *GetFaceModelResultResponseBodyDataRecords {
	s.EthicCode = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetEthicCodeReliability(v string) *GetFaceModelResultResponseBodyDataRecords {
	s.EthicCodeReliability = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetFaceStyle(v string) *GetFaceModelResultResponseBodyDataRecords {
	s.FaceStyle = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetFaceStyleReliability(v string) *GetFaceModelResultResponseBodyDataRecords {
	s.FaceStyleReliability = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetFeatureData(v []*float32) *GetFaceModelResultResponseBodyDataRecords {
	s.FeatureData = v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetGenderCode(v int32) *GetFaceModelResultResponseBodyDataRecords {
	s.GenderCode = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetGenderCodeReliability(v string) *GetFaceModelResultResponseBodyDataRecords {
	s.GenderCodeReliability = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetGlassColor(v int32) *GetFaceModelResultResponseBodyDataRecords {
	s.GlassColor = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetGlassColorReliability(v string) *GetFaceModelResultResponseBodyDataRecords {
	s.GlassColorReliability = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetGlassStyle(v int32) *GetFaceModelResultResponseBodyDataRecords {
	s.GlassStyle = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetGlassStyleReliability(v string) *GetFaceModelResultResponseBodyDataRecords {
	s.GlassStyleReliability = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetHairColor(v int32) *GetFaceModelResultResponseBodyDataRecords {
	s.HairColor = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetHairColorReliability(v string) *GetFaceModelResultResponseBodyDataRecords {
	s.HairColorReliability = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetHairStyle(v int32) *GetFaceModelResultResponseBodyDataRecords {
	s.HairStyle = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetHairStyleReliability(v string) *GetFaceModelResultResponseBodyDataRecords {
	s.HairStyleReliability = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetLeftTopX(v float32) *GetFaceModelResultResponseBodyDataRecords {
	s.LeftTopX = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetLeftTopY(v float32) *GetFaceModelResultResponseBodyDataRecords {
	s.LeftTopY = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetMustacheStyle(v string) *GetFaceModelResultResponseBodyDataRecords {
	s.MustacheStyle = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetMustacheStyleReliability(v string) *GetFaceModelResultResponseBodyDataRecords {
	s.MustacheStyleReliability = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetRespiratorColor(v int32) *GetFaceModelResultResponseBodyDataRecords {
	s.RespiratorColor = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetRespiratorColorReliability(v string) *GetFaceModelResultResponseBodyDataRecords {
	s.RespiratorColorReliability = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetRightBottomX(v float32) *GetFaceModelResultResponseBodyDataRecords {
	s.RightBottomX = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetRightBottomY(v float32) *GetFaceModelResultResponseBodyDataRecords {
	s.RightBottomY = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetSkinColor(v int32) *GetFaceModelResultResponseBodyDataRecords {
	s.SkinColor = &v
	return s
}

func (s *GetFaceModelResultResponseBodyDataRecords) SetSkinColorReliability(v string) *GetFaceModelResultResponseBodyDataRecords {
	s.SkinColorReliability = &v
	return s
}

type GetFaceModelResultResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetFaceModelResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetFaceModelResultResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFaceModelResultResponse) GoString() string {
	return s.String()
}

func (s *GetFaceModelResultResponse) SetHeaders(v map[string]*string) *GetFaceModelResultResponse {
	s.Headers = v
	return s
}

func (s *GetFaceModelResultResponse) SetBody(v *GetFaceModelResultResponseBody) *GetFaceModelResultResponse {
	s.Body = v
	return s
}

type GetFaceOptionsRequest struct {
	CorpId *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
}

func (s GetFaceOptionsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFaceOptionsRequest) GoString() string {
	return s.String()
}

func (s *GetFaceOptionsRequest) SetCorpId(v string) *GetFaceOptionsRequest {
	s.CorpId = &v
	return s
}

type GetFaceOptionsResponseBody struct {
	Code      *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []*GetFaceOptionsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message   *string                           `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetFaceOptionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFaceOptionsResponseBody) GoString() string {
	return s.String()
}

func (s *GetFaceOptionsResponseBody) SetCode(v string) *GetFaceOptionsResponseBody {
	s.Code = &v
	return s
}

func (s *GetFaceOptionsResponseBody) SetData(v []*GetFaceOptionsResponseBodyData) *GetFaceOptionsResponseBody {
	s.Data = v
	return s
}

func (s *GetFaceOptionsResponseBody) SetMessage(v string) *GetFaceOptionsResponseBody {
	s.Message = &v
	return s
}

func (s *GetFaceOptionsResponseBody) SetRequestId(v string) *GetFaceOptionsResponseBody {
	s.RequestId = &v
	return s
}

type GetFaceOptionsResponseBodyData struct {
	Key        *string                                     `json:"Key,omitempty" xml:"Key,omitempty"`
	Name       *string                                     `json:"Name,omitempty" xml:"Name,omitempty"`
	OptionList []*GetFaceOptionsResponseBodyDataOptionList `json:"OptionList,omitempty" xml:"OptionList,omitempty" type:"Repeated"`
}

func (s GetFaceOptionsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetFaceOptionsResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetFaceOptionsResponseBodyData) SetKey(v string) *GetFaceOptionsResponseBodyData {
	s.Key = &v
	return s
}

func (s *GetFaceOptionsResponseBodyData) SetName(v string) *GetFaceOptionsResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetFaceOptionsResponseBodyData) SetOptionList(v []*GetFaceOptionsResponseBodyDataOptionList) *GetFaceOptionsResponseBodyData {
	s.OptionList = v
	return s
}

type GetFaceOptionsResponseBodyDataOptionList struct {
	Key  *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s GetFaceOptionsResponseBodyDataOptionList) String() string {
	return tea.Prettify(s)
}

func (s GetFaceOptionsResponseBodyDataOptionList) GoString() string {
	return s.String()
}

func (s *GetFaceOptionsResponseBodyDataOptionList) SetKey(v string) *GetFaceOptionsResponseBodyDataOptionList {
	s.Key = &v
	return s
}

func (s *GetFaceOptionsResponseBodyDataOptionList) SetName(v string) *GetFaceOptionsResponseBodyDataOptionList {
	s.Name = &v
	return s
}

type GetFaceOptionsResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetFaceOptionsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetFaceOptionsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFaceOptionsResponse) GoString() string {
	return s.String()
}

func (s *GetFaceOptionsResponse) SetHeaders(v map[string]*string) *GetFaceOptionsResponse {
	s.Headers = v
	return s
}

func (s *GetFaceOptionsResponse) SetBody(v *GetFaceOptionsResponseBody) *GetFaceOptionsResponse {
	s.Body = v
	return s
}

type GetInventoryRequest struct {
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
}

func (s GetInventoryRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInventoryRequest) GoString() string {
	return s.String()
}

func (s *GetInventoryRequest) SetCommodityCode(v string) *GetInventoryRequest {
	s.CommodityCode = &v
	return s
}

type GetInventoryResponseBody struct {
	Data    *GetInventoryResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Success *bool                         `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetInventoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInventoryResponseBody) GoString() string {
	return s.String()
}

func (s *GetInventoryResponseBody) SetData(v *GetInventoryResponseBodyData) *GetInventoryResponseBody {
	s.Data = v
	return s
}

func (s *GetInventoryResponseBody) SetSuccess(v bool) *GetInventoryResponseBody {
	s.Success = &v
	return s
}

type GetInventoryResponseBodyData struct {
	ResultObject []*GetInventoryResponseBodyDataResultObject `json:"ResultObject,omitempty" xml:"ResultObject,omitempty" type:"Repeated"`
}

func (s GetInventoryResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetInventoryResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetInventoryResponseBodyData) SetResultObject(v []*GetInventoryResponseBodyDataResultObject) *GetInventoryResponseBodyData {
	s.ResultObject = v
	return s
}

type GetInventoryResponseBodyDataResultObject struct {
	BuyerId          *string `json:"BuyerId,omitempty" xml:"BuyerId,omitempty"`
	CommodityCode    *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	CurrentInventory *string `json:"CurrentInventory,omitempty" xml:"CurrentInventory,omitempty"`
	InstanceId       *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InventoryId      *string `json:"InventoryId,omitempty" xml:"InventoryId,omitempty"`
	ValidEndTime     *string `json:"ValidEndTime,omitempty" xml:"ValidEndTime,omitempty"`
	ValidStartTime   *string `json:"ValidStartTime,omitempty" xml:"ValidStartTime,omitempty"`
}

func (s GetInventoryResponseBodyDataResultObject) String() string {
	return tea.Prettify(s)
}

func (s GetInventoryResponseBodyDataResultObject) GoString() string {
	return s.String()
}

func (s *GetInventoryResponseBodyDataResultObject) SetBuyerId(v string) *GetInventoryResponseBodyDataResultObject {
	s.BuyerId = &v
	return s
}

func (s *GetInventoryResponseBodyDataResultObject) SetCommodityCode(v string) *GetInventoryResponseBodyDataResultObject {
	s.CommodityCode = &v
	return s
}

func (s *GetInventoryResponseBodyDataResultObject) SetCurrentInventory(v string) *GetInventoryResponseBodyDataResultObject {
	s.CurrentInventory = &v
	return s
}

func (s *GetInventoryResponseBodyDataResultObject) SetInstanceId(v string) *GetInventoryResponseBodyDataResultObject {
	s.InstanceId = &v
	return s
}

func (s *GetInventoryResponseBodyDataResultObject) SetInventoryId(v string) *GetInventoryResponseBodyDataResultObject {
	s.InventoryId = &v
	return s
}

func (s *GetInventoryResponseBodyDataResultObject) SetValidEndTime(v string) *GetInventoryResponseBodyDataResultObject {
	s.ValidEndTime = &v
	return s
}

func (s *GetInventoryResponseBodyDataResultObject) SetValidStartTime(v string) *GetInventoryResponseBodyDataResultObject {
	s.ValidStartTime = &v
	return s
}

type GetInventoryResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetInventoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetInventoryResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInventoryResponse) GoString() string {
	return s.String()
}

func (s *GetInventoryResponse) SetHeaders(v map[string]*string) *GetInventoryResponse {
	s.Headers = v
	return s
}

func (s *GetInventoryResponse) SetBody(v *GetInventoryResponseBody) *GetInventoryResponse {
	s.Body = v
	return s
}

type GetMonitorListRequest struct {
	CorpId     *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s GetMonitorListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMonitorListRequest) GoString() string {
	return s.String()
}

func (s *GetMonitorListRequest) SetCorpId(v string) *GetMonitorListRequest {
	s.CorpId = &v
	return s
}

func (s *GetMonitorListRequest) SetPageNumber(v int32) *GetMonitorListRequest {
	s.PageNumber = &v
	return s
}

func (s *GetMonitorListRequest) SetPageSize(v int32) *GetMonitorListRequest {
	s.PageSize = &v
	return s
}

type GetMonitorListResponseBody struct {
	Code      *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *GetMonitorListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetMonitorListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMonitorListResponseBody) GoString() string {
	return s.String()
}

func (s *GetMonitorListResponseBody) SetCode(v string) *GetMonitorListResponseBody {
	s.Code = &v
	return s
}

func (s *GetMonitorListResponseBody) SetData(v *GetMonitorListResponseBodyData) *GetMonitorListResponseBody {
	s.Data = v
	return s
}

func (s *GetMonitorListResponseBody) SetMessage(v string) *GetMonitorListResponseBody {
	s.Message = &v
	return s
}

func (s *GetMonitorListResponseBody) SetRequestId(v string) *GetMonitorListResponseBody {
	s.RequestId = &v
	return s
}

type GetMonitorListResponseBodyData struct {
	PageNumber *int32                                   `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*GetMonitorListResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int32                                   `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	TotalPage  *int32                                   `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s GetMonitorListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMonitorListResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMonitorListResponseBodyData) SetPageNumber(v int32) *GetMonitorListResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *GetMonitorListResponseBodyData) SetPageSize(v int32) *GetMonitorListResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetMonitorListResponseBodyData) SetRecords(v []*GetMonitorListResponseBodyDataRecords) *GetMonitorListResponseBodyData {
	s.Records = v
	return s
}

func (s *GetMonitorListResponseBodyData) SetTotalCount(v int32) *GetMonitorListResponseBodyData {
	s.TotalCount = &v
	return s
}

func (s *GetMonitorListResponseBodyData) SetTotalPage(v int32) *GetMonitorListResponseBodyData {
	s.TotalPage = &v
	return s
}

type GetMonitorListResponseBodyDataRecords struct {
	AlgorithmVendor      *string `json:"AlgorithmVendor,omitempty" xml:"AlgorithmVendor,omitempty"`
	Attributes           *string `json:"Attributes,omitempty" xml:"Attributes,omitempty"`
	CreateDate           *string `json:"CreateDate,omitempty" xml:"CreateDate,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DeviceList           *string `json:"DeviceList,omitempty" xml:"DeviceList,omitempty"`
	Expression           *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	ImageMatch           *string `json:"ImageMatch,omitempty" xml:"ImageMatch,omitempty"`
	ModifiedDate         *string `json:"ModifiedDate,omitempty" xml:"ModifiedDate,omitempty"`
	MonitorType          *string `json:"MonitorType,omitempty" xml:"MonitorType,omitempty"`
	NotifierExtendValues *string `json:"NotifierExtendValues,omitempty" xml:"NotifierExtendValues,omitempty"`
	NotifierType         *string `json:"NotifierType,omitempty" xml:"NotifierType,omitempty"`
	RuleExpression       *string `json:"RuleExpression,omitempty" xml:"RuleExpression,omitempty"`
	RuleName             *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	Status               *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId               *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s GetMonitorListResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s GetMonitorListResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *GetMonitorListResponseBodyDataRecords) SetAlgorithmVendor(v string) *GetMonitorListResponseBodyDataRecords {
	s.AlgorithmVendor = &v
	return s
}

func (s *GetMonitorListResponseBodyDataRecords) SetAttributes(v string) *GetMonitorListResponseBodyDataRecords {
	s.Attributes = &v
	return s
}

func (s *GetMonitorListResponseBodyDataRecords) SetCreateDate(v string) *GetMonitorListResponseBodyDataRecords {
	s.CreateDate = &v
	return s
}

func (s *GetMonitorListResponseBodyDataRecords) SetDescription(v string) *GetMonitorListResponseBodyDataRecords {
	s.Description = &v
	return s
}

func (s *GetMonitorListResponseBodyDataRecords) SetDeviceList(v string) *GetMonitorListResponseBodyDataRecords {
	s.DeviceList = &v
	return s
}

func (s *GetMonitorListResponseBodyDataRecords) SetExpression(v string) *GetMonitorListResponseBodyDataRecords {
	s.Expression = &v
	return s
}

func (s *GetMonitorListResponseBodyDataRecords) SetImageMatch(v string) *GetMonitorListResponseBodyDataRecords {
	s.ImageMatch = &v
	return s
}

func (s *GetMonitorListResponseBodyDataRecords) SetModifiedDate(v string) *GetMonitorListResponseBodyDataRecords {
	s.ModifiedDate = &v
	return s
}

func (s *GetMonitorListResponseBodyDataRecords) SetMonitorType(v string) *GetMonitorListResponseBodyDataRecords {
	s.MonitorType = &v
	return s
}

func (s *GetMonitorListResponseBodyDataRecords) SetNotifierExtendValues(v string) *GetMonitorListResponseBodyDataRecords {
	s.NotifierExtendValues = &v
	return s
}

func (s *GetMonitorListResponseBodyDataRecords) SetNotifierType(v string) *GetMonitorListResponseBodyDataRecords {
	s.NotifierType = &v
	return s
}

func (s *GetMonitorListResponseBodyDataRecords) SetRuleExpression(v string) *GetMonitorListResponseBodyDataRecords {
	s.RuleExpression = &v
	return s
}

func (s *GetMonitorListResponseBodyDataRecords) SetRuleName(v string) *GetMonitorListResponseBodyDataRecords {
	s.RuleName = &v
	return s
}

func (s *GetMonitorListResponseBodyDataRecords) SetStatus(v string) *GetMonitorListResponseBodyDataRecords {
	s.Status = &v
	return s
}

func (s *GetMonitorListResponseBodyDataRecords) SetTaskId(v string) *GetMonitorListResponseBodyDataRecords {
	s.TaskId = &v
	return s
}

type GetMonitorListResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetMonitorListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMonitorListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMonitorListResponse) GoString() string {
	return s.String()
}

func (s *GetMonitorListResponse) SetHeaders(v map[string]*string) *GetMonitorListResponse {
	s.Headers = v
	return s
}

func (s *GetMonitorListResponse) SetBody(v *GetMonitorListResponseBody) *GetMonitorListResponse {
	s.Body = v
	return s
}

type GetMonitorResultRequest struct {
	AlgorithmVendor *string `json:"AlgorithmVendor,omitempty" xml:"AlgorithmVendor,omitempty"`
	CorpId          *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	EndTime         *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	MinRecordId     *string `json:"MinRecordId,omitempty" xml:"MinRecordId,omitempty"`
	StartTime       *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TaskId          *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s GetMonitorResultRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMonitorResultRequest) GoString() string {
	return s.String()
}

func (s *GetMonitorResultRequest) SetAlgorithmVendor(v string) *GetMonitorResultRequest {
	s.AlgorithmVendor = &v
	return s
}

func (s *GetMonitorResultRequest) SetCorpId(v string) *GetMonitorResultRequest {
	s.CorpId = &v
	return s
}

func (s *GetMonitorResultRequest) SetEndTime(v int64) *GetMonitorResultRequest {
	s.EndTime = &v
	return s
}

func (s *GetMonitorResultRequest) SetMinRecordId(v string) *GetMonitorResultRequest {
	s.MinRecordId = &v
	return s
}

func (s *GetMonitorResultRequest) SetStartTime(v int64) *GetMonitorResultRequest {
	s.StartTime = &v
	return s
}

func (s *GetMonitorResultRequest) SetTaskId(v string) *GetMonitorResultRequest {
	s.TaskId = &v
	return s
}

type GetMonitorResultResponseBody struct {
	Code      *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *GetMonitorResultResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                           `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetMonitorResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMonitorResultResponseBody) GoString() string {
	return s.String()
}

func (s *GetMonitorResultResponseBody) SetCode(v string) *GetMonitorResultResponseBody {
	s.Code = &v
	return s
}

func (s *GetMonitorResultResponseBody) SetData(v *GetMonitorResultResponseBodyData) *GetMonitorResultResponseBody {
	s.Data = v
	return s
}

func (s *GetMonitorResultResponseBody) SetMessage(v string) *GetMonitorResultResponseBody {
	s.Message = &v
	return s
}

func (s *GetMonitorResultResponseBody) SetRequestId(v string) *GetMonitorResultResponseBody {
	s.RequestId = &v
	return s
}

type GetMonitorResultResponseBodyData struct {
	MaxId   *string                                    `json:"MaxId,omitempty" xml:"MaxId,omitempty"`
	Records []*GetMonitorResultResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
}

func (s GetMonitorResultResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMonitorResultResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMonitorResultResponseBodyData) SetMaxId(v string) *GetMonitorResultResponseBodyData {
	s.MaxId = &v
	return s
}

func (s *GetMonitorResultResponseBodyData) SetRecords(v []*GetMonitorResultResponseBodyDataRecords) *GetMonitorResultResponseBodyData {
	s.Records = v
	return s
}

type GetMonitorResultResponseBodyDataRecords struct {
	ExtendInfo    *GetMonitorResultResponseBodyDataRecordsExtendInfo `json:"ExtendInfo,omitempty" xml:"ExtendInfo,omitempty" type:"Struct"`
	GbId          *string                                            `json:"GbId,omitempty" xml:"GbId,omitempty"`
	LeftUpX       *string                                            `json:"LeftUpX,omitempty" xml:"LeftUpX,omitempty"`
	LeftUpY       *string                                            `json:"LeftUpY,omitempty" xml:"LeftUpY,omitempty"`
	MonitorPicUrl *string                                            `json:"MonitorPicUrl,omitempty" xml:"MonitorPicUrl,omitempty"`
	PicUrl        *string                                            `json:"PicUrl,omitempty" xml:"PicUrl,omitempty"`
	RightBottomX  *string                                            `json:"RightBottomX,omitempty" xml:"RightBottomX,omitempty"`
	RightBottomY  *string                                            `json:"RightBottomY,omitempty" xml:"RightBottomY,omitempty"`
	Score         *string                                            `json:"Score,omitempty" xml:"Score,omitempty"`
	ShotTime      *string                                            `json:"ShotTime,omitempty" xml:"ShotTime,omitempty"`
	TargetPicUrl  *string                                            `json:"TargetPicUrl,omitempty" xml:"TargetPicUrl,omitempty"`
	TaskId        *string                                            `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s GetMonitorResultResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s GetMonitorResultResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *GetMonitorResultResponseBodyDataRecords) SetExtendInfo(v *GetMonitorResultResponseBodyDataRecordsExtendInfo) *GetMonitorResultResponseBodyDataRecords {
	s.ExtendInfo = v
	return s
}

func (s *GetMonitorResultResponseBodyDataRecords) SetGbId(v string) *GetMonitorResultResponseBodyDataRecords {
	s.GbId = &v
	return s
}

func (s *GetMonitorResultResponseBodyDataRecords) SetLeftUpX(v string) *GetMonitorResultResponseBodyDataRecords {
	s.LeftUpX = &v
	return s
}

func (s *GetMonitorResultResponseBodyDataRecords) SetLeftUpY(v string) *GetMonitorResultResponseBodyDataRecords {
	s.LeftUpY = &v
	return s
}

func (s *GetMonitorResultResponseBodyDataRecords) SetMonitorPicUrl(v string) *GetMonitorResultResponseBodyDataRecords {
	s.MonitorPicUrl = &v
	return s
}

func (s *GetMonitorResultResponseBodyDataRecords) SetPicUrl(v string) *GetMonitorResultResponseBodyDataRecords {
	s.PicUrl = &v
	return s
}

func (s *GetMonitorResultResponseBodyDataRecords) SetRightBottomX(v string) *GetMonitorResultResponseBodyDataRecords {
	s.RightBottomX = &v
	return s
}

func (s *GetMonitorResultResponseBodyDataRecords) SetRightBottomY(v string) *GetMonitorResultResponseBodyDataRecords {
	s.RightBottomY = &v
	return s
}

func (s *GetMonitorResultResponseBodyDataRecords) SetScore(v string) *GetMonitorResultResponseBodyDataRecords {
	s.Score = &v
	return s
}

func (s *GetMonitorResultResponseBodyDataRecords) SetShotTime(v string) *GetMonitorResultResponseBodyDataRecords {
	s.ShotTime = &v
	return s
}

func (s *GetMonitorResultResponseBodyDataRecords) SetTargetPicUrl(v string) *GetMonitorResultResponseBodyDataRecords {
	s.TargetPicUrl = &v
	return s
}

func (s *GetMonitorResultResponseBodyDataRecords) SetTaskId(v string) *GetMonitorResultResponseBodyDataRecords {
	s.TaskId = &v
	return s
}

type GetMonitorResultResponseBodyDataRecordsExtendInfo struct {
	PlateNo *string `json:"PlateNo,omitempty" xml:"PlateNo,omitempty"`
}

func (s GetMonitorResultResponseBodyDataRecordsExtendInfo) String() string {
	return tea.Prettify(s)
}

func (s GetMonitorResultResponseBodyDataRecordsExtendInfo) GoString() string {
	return s.String()
}

func (s *GetMonitorResultResponseBodyDataRecordsExtendInfo) SetPlateNo(v string) *GetMonitorResultResponseBodyDataRecordsExtendInfo {
	s.PlateNo = &v
	return s
}

type GetMonitorResultResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetMonitorResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMonitorResultResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMonitorResultResponse) GoString() string {
	return s.String()
}

func (s *GetMonitorResultResponse) SetHeaders(v map[string]*string) *GetMonitorResultResponse {
	s.Headers = v
	return s
}

func (s *GetMonitorResultResponse) SetBody(v *GetMonitorResultResponseBody) *GetMonitorResultResponse {
	s.Body = v
	return s
}

type GetPersonDetailRequest struct {
	AlgorithmType *string `json:"AlgorithmType,omitempty" xml:"AlgorithmType,omitempty"`
	CorpId        *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	PersonID      *string `json:"PersonID,omitempty" xml:"PersonID,omitempty"`
}

func (s GetPersonDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPersonDetailRequest) GoString() string {
	return s.String()
}

func (s *GetPersonDetailRequest) SetAlgorithmType(v string) *GetPersonDetailRequest {
	s.AlgorithmType = &v
	return s
}

func (s *GetPersonDetailRequest) SetCorpId(v string) *GetPersonDetailRequest {
	s.CorpId = &v
	return s
}

func (s *GetPersonDetailRequest) SetPersonID(v string) *GetPersonDetailRequest {
	s.PersonID = &v
	return s
}

type GetPersonDetailResponseBody struct {
	Code      *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *GetPersonDetailResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                          `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetPersonDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPersonDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetPersonDetailResponseBody) SetCode(v string) *GetPersonDetailResponseBody {
	s.Code = &v
	return s
}

func (s *GetPersonDetailResponseBody) SetData(v *GetPersonDetailResponseBodyData) *GetPersonDetailResponseBody {
	s.Data = v
	return s
}

func (s *GetPersonDetailResponseBody) SetMessage(v string) *GetPersonDetailResponseBody {
	s.Message = &v
	return s
}

func (s *GetPersonDetailResponseBody) SetRequestId(v string) *GetPersonDetailResponseBody {
	s.RequestId = &v
	return s
}

type GetPersonDetailResponseBodyData struct {
	PersonId *string                                   `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	PicUrl   *string                                   `json:"PicUrl,omitempty" xml:"PicUrl,omitempty"`
	TagList  []*GetPersonDetailResponseBodyDataTagList `json:"TagList,omitempty" xml:"TagList,omitempty" type:"Repeated"`
}

func (s GetPersonDetailResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetPersonDetailResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetPersonDetailResponseBodyData) SetPersonId(v string) *GetPersonDetailResponseBodyData {
	s.PersonId = &v
	return s
}

func (s *GetPersonDetailResponseBodyData) SetPicUrl(v string) *GetPersonDetailResponseBodyData {
	s.PicUrl = &v
	return s
}

func (s *GetPersonDetailResponseBodyData) SetTagList(v []*GetPersonDetailResponseBodyDataTagList) *GetPersonDetailResponseBodyData {
	s.TagList = v
	return s
}

type GetPersonDetailResponseBodyDataTagList struct {
	TagCode    *string `json:"TagCode,omitempty" xml:"TagCode,omitempty"`
	TagName    *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
	TagValue   *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	TagValueId *string `json:"TagValueId,omitempty" xml:"TagValueId,omitempty"`
}

func (s GetPersonDetailResponseBodyDataTagList) String() string {
	return tea.Prettify(s)
}

func (s GetPersonDetailResponseBodyDataTagList) GoString() string {
	return s.String()
}

func (s *GetPersonDetailResponseBodyDataTagList) SetTagCode(v string) *GetPersonDetailResponseBodyDataTagList {
	s.TagCode = &v
	return s
}

func (s *GetPersonDetailResponseBodyDataTagList) SetTagName(v string) *GetPersonDetailResponseBodyDataTagList {
	s.TagName = &v
	return s
}

func (s *GetPersonDetailResponseBodyDataTagList) SetTagValue(v string) *GetPersonDetailResponseBodyDataTagList {
	s.TagValue = &v
	return s
}

func (s *GetPersonDetailResponseBodyDataTagList) SetTagValueId(v string) *GetPersonDetailResponseBodyDataTagList {
	s.TagValueId = &v
	return s
}

type GetPersonDetailResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetPersonDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetPersonDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPersonDetailResponse) GoString() string {
	return s.String()
}

func (s *GetPersonDetailResponse) SetHeaders(v map[string]*string) *GetPersonDetailResponse {
	s.Headers = v
	return s
}

func (s *GetPersonDetailResponse) SetBody(v *GetPersonDetailResponseBody) *GetPersonDetailResponse {
	s.Body = v
	return s
}

type GetPersonListRequest struct {
	CorpId                    *string                `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	CorpIdList                map[string]interface{} `json:"CorpIdList,omitempty" xml:"CorpIdList,omitempty"`
	FaceMatchingRateThreshold *string                `json:"FaceMatchingRateThreshold,omitempty" xml:"FaceMatchingRateThreshold,omitempty"`
	FaceUrl                   *string                `json:"FaceUrl,omitempty" xml:"FaceUrl,omitempty"`
	PageNumber                *int64                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                  *int64                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PersonIdList              map[string]interface{} `json:"PersonIdList,omitempty" xml:"PersonIdList,omitempty"`
}

func (s GetPersonListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPersonListRequest) GoString() string {
	return s.String()
}

func (s *GetPersonListRequest) SetCorpId(v string) *GetPersonListRequest {
	s.CorpId = &v
	return s
}

func (s *GetPersonListRequest) SetCorpIdList(v map[string]interface{}) *GetPersonListRequest {
	s.CorpIdList = v
	return s
}

func (s *GetPersonListRequest) SetFaceMatchingRateThreshold(v string) *GetPersonListRequest {
	s.FaceMatchingRateThreshold = &v
	return s
}

func (s *GetPersonListRequest) SetFaceUrl(v string) *GetPersonListRequest {
	s.FaceUrl = &v
	return s
}

func (s *GetPersonListRequest) SetPageNumber(v int64) *GetPersonListRequest {
	s.PageNumber = &v
	return s
}

func (s *GetPersonListRequest) SetPageSize(v int64) *GetPersonListRequest {
	s.PageSize = &v
	return s
}

func (s *GetPersonListRequest) SetPersonIdList(v map[string]interface{}) *GetPersonListRequest {
	s.PersonIdList = v
	return s
}

type GetPersonListShrinkRequest struct {
	CorpId                    *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	CorpIdListShrink          *string `json:"CorpIdList,omitempty" xml:"CorpIdList,omitempty"`
	FaceMatchingRateThreshold *string `json:"FaceMatchingRateThreshold,omitempty" xml:"FaceMatchingRateThreshold,omitempty"`
	FaceUrl                   *string `json:"FaceUrl,omitempty" xml:"FaceUrl,omitempty"`
	PageNumber                *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                  *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PersonIdListShrink        *string `json:"PersonIdList,omitempty" xml:"PersonIdList,omitempty"`
}

func (s GetPersonListShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPersonListShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetPersonListShrinkRequest) SetCorpId(v string) *GetPersonListShrinkRequest {
	s.CorpId = &v
	return s
}

func (s *GetPersonListShrinkRequest) SetCorpIdListShrink(v string) *GetPersonListShrinkRequest {
	s.CorpIdListShrink = &v
	return s
}

func (s *GetPersonListShrinkRequest) SetFaceMatchingRateThreshold(v string) *GetPersonListShrinkRequest {
	s.FaceMatchingRateThreshold = &v
	return s
}

func (s *GetPersonListShrinkRequest) SetFaceUrl(v string) *GetPersonListShrinkRequest {
	s.FaceUrl = &v
	return s
}

func (s *GetPersonListShrinkRequest) SetPageNumber(v int64) *GetPersonListShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *GetPersonListShrinkRequest) SetPageSize(v int64) *GetPersonListShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *GetPersonListShrinkRequest) SetPersonIdListShrink(v string) *GetPersonListShrinkRequest {
	s.PersonIdListShrink = &v
	return s
}

type GetPersonListResponseBody struct {
	Code      *string                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *GetPersonListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                        `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetPersonListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPersonListResponseBody) GoString() string {
	return s.String()
}

func (s *GetPersonListResponseBody) SetCode(v string) *GetPersonListResponseBody {
	s.Code = &v
	return s
}

func (s *GetPersonListResponseBody) SetData(v *GetPersonListResponseBodyData) *GetPersonListResponseBody {
	s.Data = v
	return s
}

func (s *GetPersonListResponseBody) SetMessage(v string) *GetPersonListResponseBody {
	s.Message = &v
	return s
}

func (s *GetPersonListResponseBody) SetRequestId(v string) *GetPersonListResponseBody {
	s.RequestId = &v
	return s
}

type GetPersonListResponseBodyData struct {
	PageNumber *int64                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int64                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*GetPersonListResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int64                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetPersonListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetPersonListResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetPersonListResponseBodyData) SetPageNumber(v int64) *GetPersonListResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *GetPersonListResponseBodyData) SetPageSize(v int64) *GetPersonListResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetPersonListResponseBodyData) SetRecords(v []*GetPersonListResponseBodyDataRecords) *GetPersonListResponseBodyData {
	s.Records = v
	return s
}

func (s *GetPersonListResponseBodyData) SetTotalCount(v int64) *GetPersonListResponseBodyData {
	s.TotalCount = &v
	return s
}

type GetPersonListResponseBodyDataRecords struct {
	FaceUrl            *string                                                `json:"FaceUrl,omitempty" xml:"FaceUrl,omitempty"`
	FirstShotTime      *int64                                                 `json:"FirstShotTime,omitempty" xml:"FirstShotTime,omitempty"`
	LastShotTime       *int64                                                 `json:"LastShotTime,omitempty" xml:"LastShotTime,omitempty"`
	PersonId           *string                                                `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	PropertyTagList    []*GetPersonListResponseBodyDataRecordsPropertyTagList `json:"PropertyTagList,omitempty" xml:"PropertyTagList,omitempty" type:"Repeated"`
	SearchMatchingRate *string                                                `json:"SearchMatchingRate,omitempty" xml:"SearchMatchingRate,omitempty"`
}

func (s GetPersonListResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s GetPersonListResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *GetPersonListResponseBodyDataRecords) SetFaceUrl(v string) *GetPersonListResponseBodyDataRecords {
	s.FaceUrl = &v
	return s
}

func (s *GetPersonListResponseBodyDataRecords) SetFirstShotTime(v int64) *GetPersonListResponseBodyDataRecords {
	s.FirstShotTime = &v
	return s
}

func (s *GetPersonListResponseBodyDataRecords) SetLastShotTime(v int64) *GetPersonListResponseBodyDataRecords {
	s.LastShotTime = &v
	return s
}

func (s *GetPersonListResponseBodyDataRecords) SetPersonId(v string) *GetPersonListResponseBodyDataRecords {
	s.PersonId = &v
	return s
}

func (s *GetPersonListResponseBodyDataRecords) SetPropertyTagList(v []*GetPersonListResponseBodyDataRecordsPropertyTagList) *GetPersonListResponseBodyDataRecords {
	s.PropertyTagList = v
	return s
}

func (s *GetPersonListResponseBodyDataRecords) SetSearchMatchingRate(v string) *GetPersonListResponseBodyDataRecords {
	s.SearchMatchingRate = &v
	return s
}

type GetPersonListResponseBodyDataRecordsPropertyTagList struct {
	Code        *string `json:"Code,omitempty" xml:"Code,omitempty"`
	TagCodeName *string `json:"TagCodeName,omitempty" xml:"TagCodeName,omitempty"`
	TagName     *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
	Value       *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetPersonListResponseBodyDataRecordsPropertyTagList) String() string {
	return tea.Prettify(s)
}

func (s GetPersonListResponseBodyDataRecordsPropertyTagList) GoString() string {
	return s.String()
}

func (s *GetPersonListResponseBodyDataRecordsPropertyTagList) SetCode(v string) *GetPersonListResponseBodyDataRecordsPropertyTagList {
	s.Code = &v
	return s
}

func (s *GetPersonListResponseBodyDataRecordsPropertyTagList) SetTagCodeName(v string) *GetPersonListResponseBodyDataRecordsPropertyTagList {
	s.TagCodeName = &v
	return s
}

func (s *GetPersonListResponseBodyDataRecordsPropertyTagList) SetTagName(v string) *GetPersonListResponseBodyDataRecordsPropertyTagList {
	s.TagName = &v
	return s
}

func (s *GetPersonListResponseBodyDataRecordsPropertyTagList) SetValue(v string) *GetPersonListResponseBodyDataRecordsPropertyTagList {
	s.Value = &v
	return s
}

type GetPersonListResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetPersonListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetPersonListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPersonListResponse) GoString() string {
	return s.String()
}

func (s *GetPersonListResponse) SetHeaders(v map[string]*string) *GetPersonListResponse {
	s.Headers = v
	return s
}

func (s *GetPersonListResponse) SetBody(v *GetPersonListResponseBody) *GetPersonListResponse {
	s.Body = v
	return s
}

type GetPictureUrlRequest struct {
	ExpireTime *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	OriginUrl  *string `json:"OriginUrl,omitempty" xml:"OriginUrl,omitempty"`
	Protocol   *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
}

func (s GetPictureUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPictureUrlRequest) GoString() string {
	return s.String()
}

func (s *GetPictureUrlRequest) SetExpireTime(v string) *GetPictureUrlRequest {
	s.ExpireTime = &v
	return s
}

func (s *GetPictureUrlRequest) SetOriginUrl(v string) *GetPictureUrlRequest {
	s.OriginUrl = &v
	return s
}

func (s *GetPictureUrlRequest) SetProtocol(v string) *GetPictureUrlRequest {
	s.Protocol = &v
	return s
}

type GetPictureUrlResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Url       *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetPictureUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPictureUrlResponseBody) GoString() string {
	return s.String()
}

func (s *GetPictureUrlResponseBody) SetCode(v string) *GetPictureUrlResponseBody {
	s.Code = &v
	return s
}

func (s *GetPictureUrlResponseBody) SetMessage(v string) *GetPictureUrlResponseBody {
	s.Message = &v
	return s
}

func (s *GetPictureUrlResponseBody) SetRequestId(v string) *GetPictureUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPictureUrlResponseBody) SetUrl(v string) *GetPictureUrlResponseBody {
	s.Url = &v
	return s
}

type GetPictureUrlResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetPictureUrlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetPictureUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPictureUrlResponse) GoString() string {
	return s.String()
}

func (s *GetPictureUrlResponse) SetHeaders(v map[string]*string) *GetPictureUrlResponse {
	s.Headers = v
	return s
}

func (s *GetPictureUrlResponse) SetBody(v *GetPictureUrlResponseBody) *GetPictureUrlResponse {
	s.Body = v
	return s
}

type GetProfileDetailRequest struct {
	CorpId    *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	IsvSubId  *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	ProfileId *int64  `json:"ProfileId,omitempty" xml:"ProfileId,omitempty"`
}

func (s GetProfileDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetProfileDetailRequest) GoString() string {
	return s.String()
}

func (s *GetProfileDetailRequest) SetCorpId(v string) *GetProfileDetailRequest {
	s.CorpId = &v
	return s
}

func (s *GetProfileDetailRequest) SetIsvSubId(v string) *GetProfileDetailRequest {
	s.IsvSubId = &v
	return s
}

func (s *GetProfileDetailRequest) SetProfileId(v int64) *GetProfileDetailRequest {
	s.ProfileId = &v
	return s
}

type GetProfileDetailResponseBody struct {
	Code      *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *GetProfileDetailResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                           `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetProfileDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetProfileDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetProfileDetailResponseBody) SetCode(v string) *GetProfileDetailResponseBody {
	s.Code = &v
	return s
}

func (s *GetProfileDetailResponseBody) SetData(v *GetProfileDetailResponseBodyData) *GetProfileDetailResponseBody {
	s.Data = v
	return s
}

func (s *GetProfileDetailResponseBody) SetMessage(v string) *GetProfileDetailResponseBody {
	s.Message = &v
	return s
}

func (s *GetProfileDetailResponseBody) SetRequestId(v string) *GetProfileDetailResponseBody {
	s.RequestId = &v
	return s
}

type GetProfileDetailResponseBodyData struct {
	BizId       *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	CatalogId   *int32  `json:"CatalogId,omitempty" xml:"CatalogId,omitempty"`
	FaceUrl     *string `json:"FaceUrl,omitempty" xml:"FaceUrl,omitempty"`
	Gender      *string `json:"Gender,omitempty" xml:"Gender,omitempty"`
	IdNumber    *string `json:"IdNumber,omitempty" xml:"IdNumber,omitempty"`
	IsvSubId    *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	LiveAddress *string `json:"LiveAddress,omitempty" xml:"LiveAddress,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PersonId    *string `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	PhoneNo     *string `json:"PhoneNo,omitempty" xml:"PhoneNo,omitempty"`
	PlateNo     *string `json:"PlateNo,omitempty" xml:"PlateNo,omitempty"`
	ProfileId   *int32  `json:"ProfileId,omitempty" xml:"ProfileId,omitempty"`
	SceneType   *string `json:"SceneType,omitempty" xml:"SceneType,omitempty"`
}

func (s GetProfileDetailResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetProfileDetailResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetProfileDetailResponseBodyData) SetBizId(v string) *GetProfileDetailResponseBodyData {
	s.BizId = &v
	return s
}

func (s *GetProfileDetailResponseBodyData) SetCatalogId(v int32) *GetProfileDetailResponseBodyData {
	s.CatalogId = &v
	return s
}

func (s *GetProfileDetailResponseBodyData) SetFaceUrl(v string) *GetProfileDetailResponseBodyData {
	s.FaceUrl = &v
	return s
}

func (s *GetProfileDetailResponseBodyData) SetGender(v string) *GetProfileDetailResponseBodyData {
	s.Gender = &v
	return s
}

func (s *GetProfileDetailResponseBodyData) SetIdNumber(v string) *GetProfileDetailResponseBodyData {
	s.IdNumber = &v
	return s
}

func (s *GetProfileDetailResponseBodyData) SetIsvSubId(v string) *GetProfileDetailResponseBodyData {
	s.IsvSubId = &v
	return s
}

func (s *GetProfileDetailResponseBodyData) SetLiveAddress(v string) *GetProfileDetailResponseBodyData {
	s.LiveAddress = &v
	return s
}

func (s *GetProfileDetailResponseBodyData) SetName(v string) *GetProfileDetailResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetProfileDetailResponseBodyData) SetPersonId(v string) *GetProfileDetailResponseBodyData {
	s.PersonId = &v
	return s
}

func (s *GetProfileDetailResponseBodyData) SetPhoneNo(v string) *GetProfileDetailResponseBodyData {
	s.PhoneNo = &v
	return s
}

func (s *GetProfileDetailResponseBodyData) SetPlateNo(v string) *GetProfileDetailResponseBodyData {
	s.PlateNo = &v
	return s
}

func (s *GetProfileDetailResponseBodyData) SetProfileId(v int32) *GetProfileDetailResponseBodyData {
	s.ProfileId = &v
	return s
}

func (s *GetProfileDetailResponseBodyData) SetSceneType(v string) *GetProfileDetailResponseBodyData {
	s.SceneType = &v
	return s
}

type GetProfileDetailResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetProfileDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetProfileDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetProfileDetailResponse) GoString() string {
	return s.String()
}

func (s *GetProfileDetailResponse) SetHeaders(v map[string]*string) *GetProfileDetailResponse {
	s.Headers = v
	return s
}

func (s *GetProfileDetailResponse) SetBody(v *GetProfileDetailResponseBody) *GetProfileDetailResponse {
	s.Body = v
	return s
}

type GetProfileListRequest struct {
	BizId                 *string                `json:"BizId,omitempty" xml:"BizId,omitempty"`
	CatalogId             *int64                 `json:"CatalogId,omitempty" xml:"CatalogId,omitempty"`
	CorpId                *string                `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	FaceImageId           *string                `json:"FaceImageId,omitempty" xml:"FaceImageId,omitempty"`
	FaceUrl               *string                `json:"FaceUrl,omitempty" xml:"FaceUrl,omitempty"`
	Gender                *int32                 `json:"Gender,omitempty" xml:"Gender,omitempty"`
	IdNumber              *string                `json:"IdNumber,omitempty" xml:"IdNumber,omitempty"`
	IsvSubId              *string                `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	LiveAddress           *string                `json:"LiveAddress,omitempty" xml:"LiveAddress,omitempty"`
	MatchingRateThreshold *string                `json:"MatchingRateThreshold,omitempty" xml:"MatchingRateThreshold,omitempty"`
	Name                  *string                `json:"Name,omitempty" xml:"Name,omitempty"`
	PageNumber            *int64                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize              *int64                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PersonIdList          map[string]interface{} `json:"PersonIdList,omitempty" xml:"PersonIdList,omitempty"`
	PhoneNo               *string                `json:"PhoneNo,omitempty" xml:"PhoneNo,omitempty"`
	PlateNo               *string                `json:"PlateNo,omitempty" xml:"PlateNo,omitempty"`
	ProfileIdList         map[string]interface{} `json:"ProfileIdList,omitempty" xml:"ProfileIdList,omitempty"`
	SceneType             *string                `json:"SceneType,omitempty" xml:"SceneType,omitempty"`
}

func (s GetProfileListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetProfileListRequest) GoString() string {
	return s.String()
}

func (s *GetProfileListRequest) SetBizId(v string) *GetProfileListRequest {
	s.BizId = &v
	return s
}

func (s *GetProfileListRequest) SetCatalogId(v int64) *GetProfileListRequest {
	s.CatalogId = &v
	return s
}

func (s *GetProfileListRequest) SetCorpId(v string) *GetProfileListRequest {
	s.CorpId = &v
	return s
}

func (s *GetProfileListRequest) SetFaceImageId(v string) *GetProfileListRequest {
	s.FaceImageId = &v
	return s
}

func (s *GetProfileListRequest) SetFaceUrl(v string) *GetProfileListRequest {
	s.FaceUrl = &v
	return s
}

func (s *GetProfileListRequest) SetGender(v int32) *GetProfileListRequest {
	s.Gender = &v
	return s
}

func (s *GetProfileListRequest) SetIdNumber(v string) *GetProfileListRequest {
	s.IdNumber = &v
	return s
}

func (s *GetProfileListRequest) SetIsvSubId(v string) *GetProfileListRequest {
	s.IsvSubId = &v
	return s
}

func (s *GetProfileListRequest) SetLiveAddress(v string) *GetProfileListRequest {
	s.LiveAddress = &v
	return s
}

func (s *GetProfileListRequest) SetMatchingRateThreshold(v string) *GetProfileListRequest {
	s.MatchingRateThreshold = &v
	return s
}

func (s *GetProfileListRequest) SetName(v string) *GetProfileListRequest {
	s.Name = &v
	return s
}

func (s *GetProfileListRequest) SetPageNumber(v int64) *GetProfileListRequest {
	s.PageNumber = &v
	return s
}

func (s *GetProfileListRequest) SetPageSize(v int64) *GetProfileListRequest {
	s.PageSize = &v
	return s
}

func (s *GetProfileListRequest) SetPersonIdList(v map[string]interface{}) *GetProfileListRequest {
	s.PersonIdList = v
	return s
}

func (s *GetProfileListRequest) SetPhoneNo(v string) *GetProfileListRequest {
	s.PhoneNo = &v
	return s
}

func (s *GetProfileListRequest) SetPlateNo(v string) *GetProfileListRequest {
	s.PlateNo = &v
	return s
}

func (s *GetProfileListRequest) SetProfileIdList(v map[string]interface{}) *GetProfileListRequest {
	s.ProfileIdList = v
	return s
}

func (s *GetProfileListRequest) SetSceneType(v string) *GetProfileListRequest {
	s.SceneType = &v
	return s
}

type GetProfileListShrinkRequest struct {
	BizId                 *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	CatalogId             *int64  `json:"CatalogId,omitempty" xml:"CatalogId,omitempty"`
	CorpId                *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	FaceImageId           *string `json:"FaceImageId,omitempty" xml:"FaceImageId,omitempty"`
	FaceUrl               *string `json:"FaceUrl,omitempty" xml:"FaceUrl,omitempty"`
	Gender                *int32  `json:"Gender,omitempty" xml:"Gender,omitempty"`
	IdNumber              *string `json:"IdNumber,omitempty" xml:"IdNumber,omitempty"`
	IsvSubId              *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	LiveAddress           *string `json:"LiveAddress,omitempty" xml:"LiveAddress,omitempty"`
	MatchingRateThreshold *string `json:"MatchingRateThreshold,omitempty" xml:"MatchingRateThreshold,omitempty"`
	Name                  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PageNumber            *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize              *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PersonIdListShrink    *string `json:"PersonIdList,omitempty" xml:"PersonIdList,omitempty"`
	PhoneNo               *string `json:"PhoneNo,omitempty" xml:"PhoneNo,omitempty"`
	PlateNo               *string `json:"PlateNo,omitempty" xml:"PlateNo,omitempty"`
	ProfileIdListShrink   *string `json:"ProfileIdList,omitempty" xml:"ProfileIdList,omitempty"`
	SceneType             *string `json:"SceneType,omitempty" xml:"SceneType,omitempty"`
}

func (s GetProfileListShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetProfileListShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetProfileListShrinkRequest) SetBizId(v string) *GetProfileListShrinkRequest {
	s.BizId = &v
	return s
}

func (s *GetProfileListShrinkRequest) SetCatalogId(v int64) *GetProfileListShrinkRequest {
	s.CatalogId = &v
	return s
}

func (s *GetProfileListShrinkRequest) SetCorpId(v string) *GetProfileListShrinkRequest {
	s.CorpId = &v
	return s
}

func (s *GetProfileListShrinkRequest) SetFaceImageId(v string) *GetProfileListShrinkRequest {
	s.FaceImageId = &v
	return s
}

func (s *GetProfileListShrinkRequest) SetFaceUrl(v string) *GetProfileListShrinkRequest {
	s.FaceUrl = &v
	return s
}

func (s *GetProfileListShrinkRequest) SetGender(v int32) *GetProfileListShrinkRequest {
	s.Gender = &v
	return s
}

func (s *GetProfileListShrinkRequest) SetIdNumber(v string) *GetProfileListShrinkRequest {
	s.IdNumber = &v
	return s
}

func (s *GetProfileListShrinkRequest) SetIsvSubId(v string) *GetProfileListShrinkRequest {
	s.IsvSubId = &v
	return s
}

func (s *GetProfileListShrinkRequest) SetLiveAddress(v string) *GetProfileListShrinkRequest {
	s.LiveAddress = &v
	return s
}

func (s *GetProfileListShrinkRequest) SetMatchingRateThreshold(v string) *GetProfileListShrinkRequest {
	s.MatchingRateThreshold = &v
	return s
}

func (s *GetProfileListShrinkRequest) SetName(v string) *GetProfileListShrinkRequest {
	s.Name = &v
	return s
}

func (s *GetProfileListShrinkRequest) SetPageNumber(v int64) *GetProfileListShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *GetProfileListShrinkRequest) SetPageSize(v int64) *GetProfileListShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *GetProfileListShrinkRequest) SetPersonIdListShrink(v string) *GetProfileListShrinkRequest {
	s.PersonIdListShrink = &v
	return s
}

func (s *GetProfileListShrinkRequest) SetPhoneNo(v string) *GetProfileListShrinkRequest {
	s.PhoneNo = &v
	return s
}

func (s *GetProfileListShrinkRequest) SetPlateNo(v string) *GetProfileListShrinkRequest {
	s.PlateNo = &v
	return s
}

func (s *GetProfileListShrinkRequest) SetProfileIdListShrink(v string) *GetProfileListShrinkRequest {
	s.ProfileIdListShrink = &v
	return s
}

func (s *GetProfileListShrinkRequest) SetSceneType(v string) *GetProfileListShrinkRequest {
	s.SceneType = &v
	return s
}

type GetProfileListResponseBody struct {
	Code      *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *GetProfileListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetProfileListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetProfileListResponseBody) GoString() string {
	return s.String()
}

func (s *GetProfileListResponseBody) SetCode(v string) *GetProfileListResponseBody {
	s.Code = &v
	return s
}

func (s *GetProfileListResponseBody) SetData(v *GetProfileListResponseBodyData) *GetProfileListResponseBody {
	s.Data = v
	return s
}

func (s *GetProfileListResponseBody) SetMessage(v string) *GetProfileListResponseBody {
	s.Message = &v
	return s
}

func (s *GetProfileListResponseBody) SetRequestId(v string) *GetProfileListResponseBody {
	s.RequestId = &v
	return s
}

type GetProfileListResponseBodyData struct {
	PageNumber *int64                                   `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int64                                   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*GetProfileListResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	Success    *bool                                    `json:"Success,omitempty" xml:"Success,omitempty"`
	Total      *int64                                   `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetProfileListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetProfileListResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetProfileListResponseBodyData) SetPageNumber(v int64) *GetProfileListResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *GetProfileListResponseBodyData) SetPageSize(v int64) *GetProfileListResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetProfileListResponseBodyData) SetRecords(v []*GetProfileListResponseBodyDataRecords) *GetProfileListResponseBodyData {
	s.Records = v
	return s
}

func (s *GetProfileListResponseBodyData) SetSuccess(v bool) *GetProfileListResponseBodyData {
	s.Success = &v
	return s
}

func (s *GetProfileListResponseBodyData) SetTotal(v int64) *GetProfileListResponseBodyData {
	s.Total = &v
	return s
}

type GetProfileListResponseBodyDataRecords struct {
	BizId              *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	CatalogId          *int32  `json:"CatalogId,omitempty" xml:"CatalogId,omitempty"`
	FaceUrl            *string `json:"FaceUrl,omitempty" xml:"FaceUrl,omitempty"`
	Gender             *string `json:"Gender,omitempty" xml:"Gender,omitempty"`
	IdNumber           *string `json:"IdNumber,omitempty" xml:"IdNumber,omitempty"`
	IsvSubId           *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PersonId           *string `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	ProfileId          *int32  `json:"ProfileId,omitempty" xml:"ProfileId,omitempty"`
	SceneType          *string `json:"SceneType,omitempty" xml:"SceneType,omitempty"`
	SearchMatchingRate *string `json:"SearchMatchingRate,omitempty" xml:"SearchMatchingRate,omitempty"`
}

func (s GetProfileListResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s GetProfileListResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *GetProfileListResponseBodyDataRecords) SetBizId(v string) *GetProfileListResponseBodyDataRecords {
	s.BizId = &v
	return s
}

func (s *GetProfileListResponseBodyDataRecords) SetCatalogId(v int32) *GetProfileListResponseBodyDataRecords {
	s.CatalogId = &v
	return s
}

func (s *GetProfileListResponseBodyDataRecords) SetFaceUrl(v string) *GetProfileListResponseBodyDataRecords {
	s.FaceUrl = &v
	return s
}

func (s *GetProfileListResponseBodyDataRecords) SetGender(v string) *GetProfileListResponseBodyDataRecords {
	s.Gender = &v
	return s
}

func (s *GetProfileListResponseBodyDataRecords) SetIdNumber(v string) *GetProfileListResponseBodyDataRecords {
	s.IdNumber = &v
	return s
}

func (s *GetProfileListResponseBodyDataRecords) SetIsvSubId(v string) *GetProfileListResponseBodyDataRecords {
	s.IsvSubId = &v
	return s
}

func (s *GetProfileListResponseBodyDataRecords) SetName(v string) *GetProfileListResponseBodyDataRecords {
	s.Name = &v
	return s
}

func (s *GetProfileListResponseBodyDataRecords) SetPersonId(v string) *GetProfileListResponseBodyDataRecords {
	s.PersonId = &v
	return s
}

func (s *GetProfileListResponseBodyDataRecords) SetProfileId(v int32) *GetProfileListResponseBodyDataRecords {
	s.ProfileId = &v
	return s
}

func (s *GetProfileListResponseBodyDataRecords) SetSceneType(v string) *GetProfileListResponseBodyDataRecords {
	s.SceneType = &v
	return s
}

func (s *GetProfileListResponseBodyDataRecords) SetSearchMatchingRate(v string) *GetProfileListResponseBodyDataRecords {
	s.SearchMatchingRate = &v
	return s
}

type GetProfileListResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetProfileListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetProfileListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetProfileListResponse) GoString() string {
	return s.String()
}

func (s *GetProfileListResponse) SetHeaders(v map[string]*string) *GetProfileListResponse {
	s.Headers = v
	return s
}

func (s *GetProfileListResponse) SetBody(v *GetProfileListResponseBody) *GetProfileListResponse {
	s.Body = v
	return s
}

type GetScanSubDevicesRequest struct {
	CorpId   *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
}

func (s GetScanSubDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetScanSubDevicesRequest) GoString() string {
	return s.String()
}

func (s *GetScanSubDevicesRequest) SetCorpId(v string) *GetScanSubDevicesRequest {
	s.CorpId = &v
	return s
}

func (s *GetScanSubDevicesRequest) SetDeviceId(v string) *GetScanSubDevicesRequest {
	s.DeviceId = &v
	return s
}

type GetScanSubDevicesResponseBody struct {
	Code    *string                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *GetScanSubDevicesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                            `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetScanSubDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetScanSubDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *GetScanSubDevicesResponseBody) SetCode(v string) *GetScanSubDevicesResponseBody {
	s.Code = &v
	return s
}

func (s *GetScanSubDevicesResponseBody) SetData(v *GetScanSubDevicesResponseBodyData) *GetScanSubDevicesResponseBody {
	s.Data = v
	return s
}

func (s *GetScanSubDevicesResponseBody) SetMessage(v string) *GetScanSubDevicesResponseBody {
	s.Message = &v
	return s
}

func (s *GetScanSubDevicesResponseBody) SetRequestId(v string) *GetScanSubDevicesResponseBody {
	s.RequestId = &v
	return s
}

type GetScanSubDevicesResponseBodyData struct {
	SubDeviceList []*GetScanSubDevicesResponseBodyDataSubDeviceList `json:"SubDeviceList,omitempty" xml:"SubDeviceList,omitempty" type:"Repeated"`
}

func (s GetScanSubDevicesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetScanSubDevicesResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetScanSubDevicesResponseBodyData) SetSubDeviceList(v []*GetScanSubDevicesResponseBodyDataSubDeviceList) *GetScanSubDevicesResponseBodyData {
	s.SubDeviceList = v
	return s
}

type GetScanSubDevicesResponseBodyDataSubDeviceList struct {
	AssociatedNvr   *string `json:"AssociatedNvr,omitempty" xml:"AssociatedNvr,omitempty"`
	DeviceMac       *string `json:"DeviceMac,omitempty" xml:"DeviceMac,omitempty"`
	DeviceModel     *string `json:"DeviceModel,omitempty" xml:"DeviceModel,omitempty"`
	DeviceSn        *string `json:"DeviceSn,omitempty" xml:"DeviceSn,omitempty"`
	FirmwareVersion *string `json:"FirmwareVersion,omitempty" xml:"FirmwareVersion,omitempty"`
	Manufacturer    *string `json:"Manufacturer,omitempty" xml:"Manufacturer,omitempty"`
	SubDeviceIp     *string `json:"SubDeviceIp,omitempty" xml:"SubDeviceIp,omitempty"`
	SubDevicePort   *string `json:"SubDevicePort,omitempty" xml:"SubDevicePort,omitempty"`
}

func (s GetScanSubDevicesResponseBodyDataSubDeviceList) String() string {
	return tea.Prettify(s)
}

func (s GetScanSubDevicesResponseBodyDataSubDeviceList) GoString() string {
	return s.String()
}

func (s *GetScanSubDevicesResponseBodyDataSubDeviceList) SetAssociatedNvr(v string) *GetScanSubDevicesResponseBodyDataSubDeviceList {
	s.AssociatedNvr = &v
	return s
}

func (s *GetScanSubDevicesResponseBodyDataSubDeviceList) SetDeviceMac(v string) *GetScanSubDevicesResponseBodyDataSubDeviceList {
	s.DeviceMac = &v
	return s
}

func (s *GetScanSubDevicesResponseBodyDataSubDeviceList) SetDeviceModel(v string) *GetScanSubDevicesResponseBodyDataSubDeviceList {
	s.DeviceModel = &v
	return s
}

func (s *GetScanSubDevicesResponseBodyDataSubDeviceList) SetDeviceSn(v string) *GetScanSubDevicesResponseBodyDataSubDeviceList {
	s.DeviceSn = &v
	return s
}

func (s *GetScanSubDevicesResponseBodyDataSubDeviceList) SetFirmwareVersion(v string) *GetScanSubDevicesResponseBodyDataSubDeviceList {
	s.FirmwareVersion = &v
	return s
}

func (s *GetScanSubDevicesResponseBodyDataSubDeviceList) SetManufacturer(v string) *GetScanSubDevicesResponseBodyDataSubDeviceList {
	s.Manufacturer = &v
	return s
}

func (s *GetScanSubDevicesResponseBodyDataSubDeviceList) SetSubDeviceIp(v string) *GetScanSubDevicesResponseBodyDataSubDeviceList {
	s.SubDeviceIp = &v
	return s
}

func (s *GetScanSubDevicesResponseBodyDataSubDeviceList) SetSubDevicePort(v string) *GetScanSubDevicesResponseBodyDataSubDeviceList {
	s.SubDevicePort = &v
	return s
}

type GetScanSubDevicesResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetScanSubDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetScanSubDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetScanSubDevicesResponse) GoString() string {
	return s.String()
}

func (s *GetScanSubDevicesResponse) SetHeaders(v map[string]*string) *GetScanSubDevicesResponse {
	s.Headers = v
	return s
}

func (s *GetScanSubDevicesResponse) SetBody(v *GetScanSubDevicesResponseBody) *GetScanSubDevicesResponse {
	s.Body = v
	return s
}

type GetUserDetailRequest struct {
	CorpId         *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	IsvSubId       *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	NeedFaceDetail *bool   `json:"NeedFaceDetail,omitempty" xml:"NeedFaceDetail,omitempty"`
	UserId         *int64  `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetUserDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUserDetailRequest) GoString() string {
	return s.String()
}

func (s *GetUserDetailRequest) SetCorpId(v string) *GetUserDetailRequest {
	s.CorpId = &v
	return s
}

func (s *GetUserDetailRequest) SetIsvSubId(v string) *GetUserDetailRequest {
	s.IsvSubId = &v
	return s
}

func (s *GetUserDetailRequest) SetNeedFaceDetail(v bool) *GetUserDetailRequest {
	s.NeedFaceDetail = &v
	return s
}

func (s *GetUserDetailRequest) SetUserId(v int64) *GetUserDetailRequest {
	s.UserId = &v
	return s
}

type GetUserDetailResponseBody struct {
	Code      *string                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *GetUserDetailResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                        `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetUserDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUserDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetUserDetailResponseBody) SetCode(v string) *GetUserDetailResponseBody {
	s.Code = &v
	return s
}

func (s *GetUserDetailResponseBody) SetData(v *GetUserDetailResponseBodyData) *GetUserDetailResponseBody {
	s.Data = v
	return s
}

func (s *GetUserDetailResponseBody) SetMessage(v string) *GetUserDetailResponseBody {
	s.Message = &v
	return s
}

func (s *GetUserDetailResponseBody) SetRequestId(v string) *GetUserDetailResponseBody {
	s.RequestId = &v
	return s
}

type GetUserDetailResponseBodyData struct {
	Address      *string `json:"Address,omitempty" xml:"Address,omitempty"`
	Age          *string `json:"Age,omitempty" xml:"Age,omitempty"`
	Attachment   *string `json:"Attachment,omitempty" xml:"Attachment,omitempty"`
	BizId        *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	FaceImageUrl *string `json:"FaceImageUrl,omitempty" xml:"FaceImageUrl,omitempty"`
	Gender       *string `json:"Gender,omitempty" xml:"Gender,omitempty"`
	IdNumber     *string `json:"IdNumber,omitempty" xml:"IdNumber,omitempty"`
	IsvSubId     *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	PhoneNo      *string `json:"PhoneNo,omitempty" xml:"PhoneNo,omitempty"`
	PlateNo      *string `json:"PlateNo,omitempty" xml:"PlateNo,omitempty"`
	UserGroupId  *int32  `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
	UserId       *int32  `json:"UserId,omitempty" xml:"UserId,omitempty"`
	UserName     *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s GetUserDetailResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetUserDetailResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetUserDetailResponseBodyData) SetAddress(v string) *GetUserDetailResponseBodyData {
	s.Address = &v
	return s
}

func (s *GetUserDetailResponseBodyData) SetAge(v string) *GetUserDetailResponseBodyData {
	s.Age = &v
	return s
}

func (s *GetUserDetailResponseBodyData) SetAttachment(v string) *GetUserDetailResponseBodyData {
	s.Attachment = &v
	return s
}

func (s *GetUserDetailResponseBodyData) SetBizId(v string) *GetUserDetailResponseBodyData {
	s.BizId = &v
	return s
}

func (s *GetUserDetailResponseBodyData) SetFaceImageUrl(v string) *GetUserDetailResponseBodyData {
	s.FaceImageUrl = &v
	return s
}

func (s *GetUserDetailResponseBodyData) SetGender(v string) *GetUserDetailResponseBodyData {
	s.Gender = &v
	return s
}

func (s *GetUserDetailResponseBodyData) SetIdNumber(v string) *GetUserDetailResponseBodyData {
	s.IdNumber = &v
	return s
}

func (s *GetUserDetailResponseBodyData) SetIsvSubId(v string) *GetUserDetailResponseBodyData {
	s.IsvSubId = &v
	return s
}

func (s *GetUserDetailResponseBodyData) SetPhoneNo(v string) *GetUserDetailResponseBodyData {
	s.PhoneNo = &v
	return s
}

func (s *GetUserDetailResponseBodyData) SetPlateNo(v string) *GetUserDetailResponseBodyData {
	s.PlateNo = &v
	return s
}

func (s *GetUserDetailResponseBodyData) SetUserGroupId(v int32) *GetUserDetailResponseBodyData {
	s.UserGroupId = &v
	return s
}

func (s *GetUserDetailResponseBodyData) SetUserId(v int32) *GetUserDetailResponseBodyData {
	s.UserId = &v
	return s
}

func (s *GetUserDetailResponseBodyData) SetUserName(v string) *GetUserDetailResponseBodyData {
	s.UserName = &v
	return s
}

type GetUserDetailResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetUserDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetUserDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUserDetailResponse) GoString() string {
	return s.String()
}

func (s *GetUserDetailResponse) SetHeaders(v map[string]*string) *GetUserDetailResponse {
	s.Headers = v
	return s
}

func (s *GetUserDetailResponse) SetBody(v *GetUserDetailResponseBody) *GetUserDetailResponse {
	s.Body = v
	return s
}

type GetVideoComposeResultRequest struct {
	CorpId        *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	TaskRequestId *string `json:"TaskRequestId,omitempty" xml:"TaskRequestId,omitempty"`
}

func (s GetVideoComposeResultRequest) String() string {
	return tea.Prettify(s)
}

func (s GetVideoComposeResultRequest) GoString() string {
	return s.String()
}

func (s *GetVideoComposeResultRequest) SetCorpId(v string) *GetVideoComposeResultRequest {
	s.CorpId = &v
	return s
}

func (s *GetVideoComposeResultRequest) SetTaskRequestId(v string) *GetVideoComposeResultRequest {
	s.TaskRequestId = &v
	return s
}

type GetVideoComposeResultResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
	VideoUrl  *string `json:"VideoUrl,omitempty" xml:"VideoUrl,omitempty"`
}

func (s GetVideoComposeResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetVideoComposeResultResponseBody) GoString() string {
	return s.String()
}

func (s *GetVideoComposeResultResponseBody) SetCode(v string) *GetVideoComposeResultResponseBody {
	s.Code = &v
	return s
}

func (s *GetVideoComposeResultResponseBody) SetMessage(v string) *GetVideoComposeResultResponseBody {
	s.Message = &v
	return s
}

func (s *GetVideoComposeResultResponseBody) SetRequestId(v string) *GetVideoComposeResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetVideoComposeResultResponseBody) SetStatus(v string) *GetVideoComposeResultResponseBody {
	s.Status = &v
	return s
}

func (s *GetVideoComposeResultResponseBody) SetVideoUrl(v string) *GetVideoComposeResultResponseBody {
	s.VideoUrl = &v
	return s
}

type GetVideoComposeResultResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetVideoComposeResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetVideoComposeResultResponse) String() string {
	return tea.Prettify(s)
}

func (s GetVideoComposeResultResponse) GoString() string {
	return s.String()
}

func (s *GetVideoComposeResultResponse) SetHeaders(v map[string]*string) *GetVideoComposeResultResponse {
	s.Headers = v
	return s
}

func (s *GetVideoComposeResultResponse) SetBody(v *GetVideoComposeResultResponseBody) *GetVideoComposeResultResponse {
	s.Body = v
	return s
}

type GetVideoSummaryTaskResultRequest struct {
	CorpId *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s GetVideoSummaryTaskResultRequest) String() string {
	return tea.Prettify(s)
}

func (s GetVideoSummaryTaskResultRequest) GoString() string {
	return s.String()
}

func (s *GetVideoSummaryTaskResultRequest) SetCorpId(v string) *GetVideoSummaryTaskResultRequest {
	s.CorpId = &v
	return s
}

func (s *GetVideoSummaryTaskResultRequest) SetTaskId(v string) *GetVideoSummaryTaskResultRequest {
	s.TaskId = &v
	return s
}

type GetVideoSummaryTaskResultResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetVideoSummaryTaskResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetVideoSummaryTaskResultResponseBody) GoString() string {
	return s.String()
}

func (s *GetVideoSummaryTaskResultResponseBody) SetCode(v string) *GetVideoSummaryTaskResultResponseBody {
	s.Code = &v
	return s
}

func (s *GetVideoSummaryTaskResultResponseBody) SetData(v string) *GetVideoSummaryTaskResultResponseBody {
	s.Data = &v
	return s
}

func (s *GetVideoSummaryTaskResultResponseBody) SetMessage(v string) *GetVideoSummaryTaskResultResponseBody {
	s.Message = &v
	return s
}

func (s *GetVideoSummaryTaskResultResponseBody) SetRequestId(v string) *GetVideoSummaryTaskResultResponseBody {
	s.RequestId = &v
	return s
}

type GetVideoSummaryTaskResultResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetVideoSummaryTaskResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetVideoSummaryTaskResultResponse) String() string {
	return tea.Prettify(s)
}

func (s GetVideoSummaryTaskResultResponse) GoString() string {
	return s.String()
}

func (s *GetVideoSummaryTaskResultResponse) SetHeaders(v map[string]*string) *GetVideoSummaryTaskResultResponse {
	s.Headers = v
	return s
}

func (s *GetVideoSummaryTaskResultResponse) SetBody(v *GetVideoSummaryTaskResultResponseBody) *GetVideoSummaryTaskResultResponse {
	s.Body = v
	return s
}

type InvokeMotorModelRequest struct {
	CorpId  *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	PicId   *string `json:"PicId,omitempty" xml:"PicId,omitempty"`
	PicPath *string `json:"PicPath,omitempty" xml:"PicPath,omitempty"`
	PicUrl  *string `json:"PicUrl,omitempty" xml:"PicUrl,omitempty"`
}

func (s InvokeMotorModelRequest) String() string {
	return tea.Prettify(s)
}

func (s InvokeMotorModelRequest) GoString() string {
	return s.String()
}

func (s *InvokeMotorModelRequest) SetCorpId(v string) *InvokeMotorModelRequest {
	s.CorpId = &v
	return s
}

func (s *InvokeMotorModelRequest) SetPicId(v string) *InvokeMotorModelRequest {
	s.PicId = &v
	return s
}

func (s *InvokeMotorModelRequest) SetPicPath(v string) *InvokeMotorModelRequest {
	s.PicPath = &v
	return s
}

func (s *InvokeMotorModelRequest) SetPicUrl(v string) *InvokeMotorModelRequest {
	s.PicUrl = &v
	return s
}

type InvokeMotorModelResponseBody struct {
	Code      *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *InvokeMotorModelResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                           `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s InvokeMotorModelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InvokeMotorModelResponseBody) GoString() string {
	return s.String()
}

func (s *InvokeMotorModelResponseBody) SetCode(v string) *InvokeMotorModelResponseBody {
	s.Code = &v
	return s
}

func (s *InvokeMotorModelResponseBody) SetData(v *InvokeMotorModelResponseBodyData) *InvokeMotorModelResponseBody {
	s.Data = v
	return s
}

func (s *InvokeMotorModelResponseBody) SetMessage(v string) *InvokeMotorModelResponseBody {
	s.Message = &v
	return s
}

func (s *InvokeMotorModelResponseBody) SetRequestId(v string) *InvokeMotorModelResponseBody {
	s.RequestId = &v
	return s
}

type InvokeMotorModelResponseBodyData struct {
	StructList *string `json:"StructList,omitempty" xml:"StructList,omitempty"`
}

func (s InvokeMotorModelResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s InvokeMotorModelResponseBodyData) GoString() string {
	return s.String()
}

func (s *InvokeMotorModelResponseBodyData) SetStructList(v string) *InvokeMotorModelResponseBodyData {
	s.StructList = &v
	return s
}

type InvokeMotorModelResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InvokeMotorModelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InvokeMotorModelResponse) String() string {
	return tea.Prettify(s)
}

func (s InvokeMotorModelResponse) GoString() string {
	return s.String()
}

func (s *InvokeMotorModelResponse) SetHeaders(v map[string]*string) *InvokeMotorModelResponse {
	s.Headers = v
	return s
}

func (s *InvokeMotorModelResponse) SetBody(v *InvokeMotorModelResponseBody) *InvokeMotorModelResponse {
	s.Body = v
	return s
}

type ListAccessNumberRequest struct {
	CorpIdList *string `json:"CorpIdList,omitempty" xml:"CorpIdList,omitempty"`
}

func (s ListAccessNumberRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAccessNumberRequest) GoString() string {
	return s.String()
}

func (s *ListAccessNumberRequest) SetCorpIdList(v string) *ListAccessNumberRequest {
	s.CorpIdList = &v
	return s
}

type ListAccessNumberResponseBody struct {
	Code    *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    []*ListAccessNumberResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListAccessNumberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAccessNumberResponseBody) GoString() string {
	return s.String()
}

func (s *ListAccessNumberResponseBody) SetCode(v string) *ListAccessNumberResponseBody {
	s.Code = &v
	return s
}

func (s *ListAccessNumberResponseBody) SetData(v []*ListAccessNumberResponseBodyData) *ListAccessNumberResponseBody {
	s.Data = v
	return s
}

func (s *ListAccessNumberResponseBody) SetMessage(v string) *ListAccessNumberResponseBody {
	s.Message = &v
	return s
}

func (s *ListAccessNumberResponseBody) SetRequestId(v string) *ListAccessNumberResponseBody {
	s.RequestId = &v
	return s
}

type ListAccessNumberResponseBodyData struct {
	Count   *string `json:"Count,omitempty" xml:"Count,omitempty"`
	Item    *string `json:"Item,omitempty" xml:"Item,omitempty"`
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
}

func (s ListAccessNumberResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListAccessNumberResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListAccessNumberResponseBodyData) SetCount(v string) *ListAccessNumberResponseBodyData {
	s.Count = &v
	return s
}

func (s *ListAccessNumberResponseBodyData) SetItem(v string) *ListAccessNumberResponseBodyData {
	s.Item = &v
	return s
}

func (s *ListAccessNumberResponseBodyData) SetPercent(v string) *ListAccessNumberResponseBodyData {
	s.Percent = &v
	return s
}

type ListAccessNumberResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListAccessNumberResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListAccessNumberResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAccessNumberResponse) GoString() string {
	return s.String()
}

func (s *ListAccessNumberResponse) SetHeaders(v map[string]*string) *ListAccessNumberResponse {
	s.Headers = v
	return s
}

func (s *ListAccessNumberResponse) SetBody(v *ListAccessNumberResponseBody) *ListAccessNumberResponse {
	s.Body = v
	return s
}

type ListAlgorithmNamesByDeviceIdsRequest struct {
	// 设备ID集合，多个的话以逗号分隔，最大支持200个
	GbIds *string `json:"GbIds,omitempty" xml:"GbIds,omitempty"`
}

func (s ListAlgorithmNamesByDeviceIdsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAlgorithmNamesByDeviceIdsRequest) GoString() string {
	return s.String()
}

func (s *ListAlgorithmNamesByDeviceIdsRequest) SetGbIds(v string) *ListAlgorithmNamesByDeviceIdsRequest {
	s.GbIds = &v
	return s
}

type ListAlgorithmNamesByDeviceIdsResponseBody struct {
	// 返回结果编码  200：获取成功  Failed：获取失败  Retry：按需拉流模式，正在建立取流连接，请稍后重试
	Code *string                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListAlgorithmNamesByDeviceIdsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// 返回结果消息
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListAlgorithmNamesByDeviceIdsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAlgorithmNamesByDeviceIdsResponseBody) GoString() string {
	return s.String()
}

func (s *ListAlgorithmNamesByDeviceIdsResponseBody) SetCode(v string) *ListAlgorithmNamesByDeviceIdsResponseBody {
	s.Code = &v
	return s
}

func (s *ListAlgorithmNamesByDeviceIdsResponseBody) SetData(v []*ListAlgorithmNamesByDeviceIdsResponseBodyData) *ListAlgorithmNamesByDeviceIdsResponseBody {
	s.Data = v
	return s
}

func (s *ListAlgorithmNamesByDeviceIdsResponseBody) SetMessage(v string) *ListAlgorithmNamesByDeviceIdsResponseBody {
	s.Message = &v
	return s
}

func (s *ListAlgorithmNamesByDeviceIdsResponseBody) SetRequestId(v string) *ListAlgorithmNamesByDeviceIdsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAlgorithmNamesByDeviceIdsResponseBody) SetSuccess(v bool) *ListAlgorithmNamesByDeviceIdsResponseBody {
	s.Success = &v
	return s
}

type ListAlgorithmNamesByDeviceIdsResponseBodyData struct {
	// 设备ID对应呗计算的算法名称集合
	AlgorithmNames []*string `json:"AlgorithmNames,omitempty" xml:"AlgorithmNames,omitempty" type:"Repeated"`
	// 设备ID
	GbId *string `json:"GbId,omitempty" xml:"GbId,omitempty"`
}

func (s ListAlgorithmNamesByDeviceIdsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListAlgorithmNamesByDeviceIdsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListAlgorithmNamesByDeviceIdsResponseBodyData) SetAlgorithmNames(v []*string) *ListAlgorithmNamesByDeviceIdsResponseBodyData {
	s.AlgorithmNames = v
	return s
}

func (s *ListAlgorithmNamesByDeviceIdsResponseBodyData) SetGbId(v string) *ListAlgorithmNamesByDeviceIdsResponseBodyData {
	s.GbId = &v
	return s
}

type ListAlgorithmNamesByDeviceIdsResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListAlgorithmNamesByDeviceIdsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListAlgorithmNamesByDeviceIdsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAlgorithmNamesByDeviceIdsResponse) GoString() string {
	return s.String()
}

func (s *ListAlgorithmNamesByDeviceIdsResponse) SetHeaders(v map[string]*string) *ListAlgorithmNamesByDeviceIdsResponse {
	s.Headers = v
	return s
}

func (s *ListAlgorithmNamesByDeviceIdsResponse) SetBody(v *ListAlgorithmNamesByDeviceIdsResponseBody) *ListAlgorithmNamesByDeviceIdsResponse {
	s.Body = v
	return s
}

type ListBodyAlgorithmResultsRequest struct {
	AlgorithmType *string `json:"AlgorithmType,omitempty" xml:"AlgorithmType,omitempty"`
	CapStyle      *string `json:"CapStyle,omitempty" xml:"CapStyle,omitempty"`
	CorpId        *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DataSourceId  *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageNumber    *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListBodyAlgorithmResultsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListBodyAlgorithmResultsRequest) GoString() string {
	return s.String()
}

func (s *ListBodyAlgorithmResultsRequest) SetAlgorithmType(v string) *ListBodyAlgorithmResultsRequest {
	s.AlgorithmType = &v
	return s
}

func (s *ListBodyAlgorithmResultsRequest) SetCapStyle(v string) *ListBodyAlgorithmResultsRequest {
	s.CapStyle = &v
	return s
}

func (s *ListBodyAlgorithmResultsRequest) SetCorpId(v string) *ListBodyAlgorithmResultsRequest {
	s.CorpId = &v
	return s
}

func (s *ListBodyAlgorithmResultsRequest) SetDataSourceId(v string) *ListBodyAlgorithmResultsRequest {
	s.DataSourceId = &v
	return s
}

func (s *ListBodyAlgorithmResultsRequest) SetEndTime(v string) *ListBodyAlgorithmResultsRequest {
	s.EndTime = &v
	return s
}

func (s *ListBodyAlgorithmResultsRequest) SetPageNumber(v string) *ListBodyAlgorithmResultsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListBodyAlgorithmResultsRequest) SetPageSize(v string) *ListBodyAlgorithmResultsRequest {
	s.PageSize = &v
	return s
}

func (s *ListBodyAlgorithmResultsRequest) SetStartTime(v string) *ListBodyAlgorithmResultsRequest {
	s.StartTime = &v
	return s
}

type ListBodyAlgorithmResultsResponseBody struct {
	Code      *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *ListBodyAlgorithmResultsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListBodyAlgorithmResultsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListBodyAlgorithmResultsResponseBody) GoString() string {
	return s.String()
}

func (s *ListBodyAlgorithmResultsResponseBody) SetCode(v string) *ListBodyAlgorithmResultsResponseBody {
	s.Code = &v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBody) SetData(v *ListBodyAlgorithmResultsResponseBodyData) *ListBodyAlgorithmResultsResponseBody {
	s.Data = v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBody) SetMessage(v string) *ListBodyAlgorithmResultsResponseBody {
	s.Message = &v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBody) SetRequestId(v string) *ListBodyAlgorithmResultsResponseBody {
	s.RequestId = &v
	return s
}

type ListBodyAlgorithmResultsResponseBodyData struct {
	PageNumber *int32                                             `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                             `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*ListBodyAlgorithmResultsResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int32                                             `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	TotalPage  *int32                                             `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s ListBodyAlgorithmResultsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListBodyAlgorithmResultsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListBodyAlgorithmResultsResponseBodyData) SetPageNumber(v int32) *ListBodyAlgorithmResultsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBodyData) SetPageSize(v int32) *ListBodyAlgorithmResultsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBodyData) SetRecords(v []*ListBodyAlgorithmResultsResponseBodyDataRecords) *ListBodyAlgorithmResultsResponseBodyData {
	s.Records = v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBodyData) SetTotalCount(v int32) *ListBodyAlgorithmResultsResponseBodyData {
	s.TotalCount = &v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBodyData) SetTotalPage(v int32) *ListBodyAlgorithmResultsResponseBodyData {
	s.TotalPage = &v
	return s
}

type ListBodyAlgorithmResultsResponseBodyDataRecords struct {
	CapStyle         *string  `json:"CapStyle,omitempty" xml:"CapStyle,omitempty"`
	CoatColor        *string  `json:"CoatColor,omitempty" xml:"CoatColor,omitempty"`
	CoatLength       *string  `json:"CoatLength,omitempty" xml:"CoatLength,omitempty"`
	CoatStyle        *string  `json:"CoatStyle,omitempty" xml:"CoatStyle,omitempty"`
	CorpId           *string  `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DataSourceId     *string  `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	GenderCode       *string  `json:"GenderCode,omitempty" xml:"GenderCode,omitempty"`
	HairStyle        *string  `json:"HairStyle,omitempty" xml:"HairStyle,omitempty"`
	LeftTopX         *float32 `json:"LeftTopX,omitempty" xml:"LeftTopX,omitempty"`
	LeftTopY         *float32 `json:"LeftTopY,omitempty" xml:"LeftTopY,omitempty"`
	MaxAge           *string  `json:"MaxAge,omitempty" xml:"MaxAge,omitempty"`
	MinAge           *string  `json:"MinAge,omitempty" xml:"MinAge,omitempty"`
	PersonId         *string  `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	PicUrlPath       *string  `json:"PicUrlPath,omitempty" xml:"PicUrlPath,omitempty"`
	RightBottomX     *float32 `json:"RightBottomX,omitempty" xml:"RightBottomX,omitempty"`
	RightBottomY     *float32 `json:"RightBottomY,omitempty" xml:"RightBottomY,omitempty"`
	ShotTime         *string  `json:"ShotTime,omitempty" xml:"ShotTime,omitempty"`
	SourceId         *string  `json:"SourceId,omitempty" xml:"SourceId,omitempty"`
	TargetPicUrlPath *string  `json:"TargetPicUrlPath,omitempty" xml:"TargetPicUrlPath,omitempty"`
	TrousersColor    *string  `json:"TrousersColor,omitempty" xml:"TrousersColor,omitempty"`
	TrousersLength   *string  `json:"TrousersLength,omitempty" xml:"TrousersLength,omitempty"`
	TrousersStyle    *string  `json:"TrousersStyle,omitempty" xml:"TrousersStyle,omitempty"`
}

func (s ListBodyAlgorithmResultsResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s ListBodyAlgorithmResultsResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *ListBodyAlgorithmResultsResponseBodyDataRecords) SetCapStyle(v string) *ListBodyAlgorithmResultsResponseBodyDataRecords {
	s.CapStyle = &v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBodyDataRecords) SetCoatColor(v string) *ListBodyAlgorithmResultsResponseBodyDataRecords {
	s.CoatColor = &v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBodyDataRecords) SetCoatLength(v string) *ListBodyAlgorithmResultsResponseBodyDataRecords {
	s.CoatLength = &v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBodyDataRecords) SetCoatStyle(v string) *ListBodyAlgorithmResultsResponseBodyDataRecords {
	s.CoatStyle = &v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBodyDataRecords) SetCorpId(v string) *ListBodyAlgorithmResultsResponseBodyDataRecords {
	s.CorpId = &v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBodyDataRecords) SetDataSourceId(v string) *ListBodyAlgorithmResultsResponseBodyDataRecords {
	s.DataSourceId = &v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBodyDataRecords) SetGenderCode(v string) *ListBodyAlgorithmResultsResponseBodyDataRecords {
	s.GenderCode = &v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBodyDataRecords) SetHairStyle(v string) *ListBodyAlgorithmResultsResponseBodyDataRecords {
	s.HairStyle = &v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBodyDataRecords) SetLeftTopX(v float32) *ListBodyAlgorithmResultsResponseBodyDataRecords {
	s.LeftTopX = &v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBodyDataRecords) SetLeftTopY(v float32) *ListBodyAlgorithmResultsResponseBodyDataRecords {
	s.LeftTopY = &v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBodyDataRecords) SetMaxAge(v string) *ListBodyAlgorithmResultsResponseBodyDataRecords {
	s.MaxAge = &v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBodyDataRecords) SetMinAge(v string) *ListBodyAlgorithmResultsResponseBodyDataRecords {
	s.MinAge = &v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBodyDataRecords) SetPersonId(v string) *ListBodyAlgorithmResultsResponseBodyDataRecords {
	s.PersonId = &v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBodyDataRecords) SetPicUrlPath(v string) *ListBodyAlgorithmResultsResponseBodyDataRecords {
	s.PicUrlPath = &v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBodyDataRecords) SetRightBottomX(v float32) *ListBodyAlgorithmResultsResponseBodyDataRecords {
	s.RightBottomX = &v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBodyDataRecords) SetRightBottomY(v float32) *ListBodyAlgorithmResultsResponseBodyDataRecords {
	s.RightBottomY = &v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBodyDataRecords) SetShotTime(v string) *ListBodyAlgorithmResultsResponseBodyDataRecords {
	s.ShotTime = &v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBodyDataRecords) SetSourceId(v string) *ListBodyAlgorithmResultsResponseBodyDataRecords {
	s.SourceId = &v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBodyDataRecords) SetTargetPicUrlPath(v string) *ListBodyAlgorithmResultsResponseBodyDataRecords {
	s.TargetPicUrlPath = &v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBodyDataRecords) SetTrousersColor(v string) *ListBodyAlgorithmResultsResponseBodyDataRecords {
	s.TrousersColor = &v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBodyDataRecords) SetTrousersLength(v string) *ListBodyAlgorithmResultsResponseBodyDataRecords {
	s.TrousersLength = &v
	return s
}

func (s *ListBodyAlgorithmResultsResponseBodyDataRecords) SetTrousersStyle(v string) *ListBodyAlgorithmResultsResponseBodyDataRecords {
	s.TrousersStyle = &v
	return s
}

type ListBodyAlgorithmResultsResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListBodyAlgorithmResultsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListBodyAlgorithmResultsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListBodyAlgorithmResultsResponse) GoString() string {
	return s.String()
}

func (s *ListBodyAlgorithmResultsResponse) SetHeaders(v map[string]*string) *ListBodyAlgorithmResultsResponse {
	s.Headers = v
	return s
}

func (s *ListBodyAlgorithmResultsResponse) SetBody(v *ListBodyAlgorithmResultsResponseBody) *ListBodyAlgorithmResultsResponse {
	s.Body = v
	return s
}

type ListCorpGroupMetricsRequest struct {
	CorpId      *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DeviceGroup *string `json:"DeviceGroup,omitempty" xml:"DeviceGroup,omitempty"`
	DeviceId    *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	EndTime     *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	GroupId     *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	PageNumber  *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTime   *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TagCode     *string `json:"TagCode,omitempty" xml:"TagCode,omitempty"`
	UserGroup   *string `json:"UserGroup,omitempty" xml:"UserGroup,omitempty"`
}

func (s ListCorpGroupMetricsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCorpGroupMetricsRequest) GoString() string {
	return s.String()
}

func (s *ListCorpGroupMetricsRequest) SetCorpId(v string) *ListCorpGroupMetricsRequest {
	s.CorpId = &v
	return s
}

func (s *ListCorpGroupMetricsRequest) SetDeviceGroup(v string) *ListCorpGroupMetricsRequest {
	s.DeviceGroup = &v
	return s
}

func (s *ListCorpGroupMetricsRequest) SetDeviceId(v string) *ListCorpGroupMetricsRequest {
	s.DeviceId = &v
	return s
}

func (s *ListCorpGroupMetricsRequest) SetEndTime(v string) *ListCorpGroupMetricsRequest {
	s.EndTime = &v
	return s
}

func (s *ListCorpGroupMetricsRequest) SetGroupId(v string) *ListCorpGroupMetricsRequest {
	s.GroupId = &v
	return s
}

func (s *ListCorpGroupMetricsRequest) SetPageNumber(v string) *ListCorpGroupMetricsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListCorpGroupMetricsRequest) SetPageSize(v string) *ListCorpGroupMetricsRequest {
	s.PageSize = &v
	return s
}

func (s *ListCorpGroupMetricsRequest) SetStartTime(v string) *ListCorpGroupMetricsRequest {
	s.StartTime = &v
	return s
}

func (s *ListCorpGroupMetricsRequest) SetTagCode(v string) *ListCorpGroupMetricsRequest {
	s.TagCode = &v
	return s
}

func (s *ListCorpGroupMetricsRequest) SetUserGroup(v string) *ListCorpGroupMetricsRequest {
	s.UserGroup = &v
	return s
}

type ListCorpGroupMetricsResponseBody struct {
	Code       *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data       []*ListCorpGroupMetricsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message    *string                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber *int32                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success    *string                                 `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount *int32                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListCorpGroupMetricsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCorpGroupMetricsResponseBody) GoString() string {
	return s.String()
}

func (s *ListCorpGroupMetricsResponseBody) SetCode(v string) *ListCorpGroupMetricsResponseBody {
	s.Code = &v
	return s
}

func (s *ListCorpGroupMetricsResponseBody) SetData(v []*ListCorpGroupMetricsResponseBodyData) *ListCorpGroupMetricsResponseBody {
	s.Data = v
	return s
}

func (s *ListCorpGroupMetricsResponseBody) SetMessage(v string) *ListCorpGroupMetricsResponseBody {
	s.Message = &v
	return s
}

func (s *ListCorpGroupMetricsResponseBody) SetPageNumber(v int32) *ListCorpGroupMetricsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListCorpGroupMetricsResponseBody) SetPageSize(v int32) *ListCorpGroupMetricsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListCorpGroupMetricsResponseBody) SetRequestId(v string) *ListCorpGroupMetricsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCorpGroupMetricsResponseBody) SetSuccess(v string) *ListCorpGroupMetricsResponseBody {
	s.Success = &v
	return s
}

func (s *ListCorpGroupMetricsResponseBody) SetTotalCount(v int32) *ListCorpGroupMetricsResponseBody {
	s.TotalCount = &v
	return s
}

type ListCorpGroupMetricsResponseBodyData struct {
	CorpGroupId   *string `json:"CorpGroupId,omitempty" xml:"CorpGroupId,omitempty"`
	CorpId        *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DateId        *string `json:"DateId,omitempty" xml:"DateId,omitempty"`
	DeviceGroupId *string `json:"DeviceGroupId,omitempty" xml:"DeviceGroupId,omitempty"`
	DeviceId      *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	PersonID      *string `json:"PersonID,omitempty" xml:"PersonID,omitempty"`
	TagCode       *string `json:"TagCode,omitempty" xml:"TagCode,omitempty"`
	TagMetrics    *string `json:"TagMetrics,omitempty" xml:"TagMetrics,omitempty"`
	TagValue      *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	UserGroupId   *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s ListCorpGroupMetricsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListCorpGroupMetricsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListCorpGroupMetricsResponseBodyData) SetCorpGroupId(v string) *ListCorpGroupMetricsResponseBodyData {
	s.CorpGroupId = &v
	return s
}

func (s *ListCorpGroupMetricsResponseBodyData) SetCorpId(v string) *ListCorpGroupMetricsResponseBodyData {
	s.CorpId = &v
	return s
}

func (s *ListCorpGroupMetricsResponseBodyData) SetDateId(v string) *ListCorpGroupMetricsResponseBodyData {
	s.DateId = &v
	return s
}

func (s *ListCorpGroupMetricsResponseBodyData) SetDeviceGroupId(v string) *ListCorpGroupMetricsResponseBodyData {
	s.DeviceGroupId = &v
	return s
}

func (s *ListCorpGroupMetricsResponseBodyData) SetDeviceId(v string) *ListCorpGroupMetricsResponseBodyData {
	s.DeviceId = &v
	return s
}

func (s *ListCorpGroupMetricsResponseBodyData) SetPersonID(v string) *ListCorpGroupMetricsResponseBodyData {
	s.PersonID = &v
	return s
}

func (s *ListCorpGroupMetricsResponseBodyData) SetTagCode(v string) *ListCorpGroupMetricsResponseBodyData {
	s.TagCode = &v
	return s
}

func (s *ListCorpGroupMetricsResponseBodyData) SetTagMetrics(v string) *ListCorpGroupMetricsResponseBodyData {
	s.TagMetrics = &v
	return s
}

func (s *ListCorpGroupMetricsResponseBodyData) SetTagValue(v string) *ListCorpGroupMetricsResponseBodyData {
	s.TagValue = &v
	return s
}

func (s *ListCorpGroupMetricsResponseBodyData) SetUserGroupId(v string) *ListCorpGroupMetricsResponseBodyData {
	s.UserGroupId = &v
	return s
}

type ListCorpGroupMetricsResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListCorpGroupMetricsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListCorpGroupMetricsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCorpGroupMetricsResponse) GoString() string {
	return s.String()
}

func (s *ListCorpGroupMetricsResponse) SetHeaders(v map[string]*string) *ListCorpGroupMetricsResponse {
	s.Headers = v
	return s
}

func (s *ListCorpGroupMetricsResponse) SetBody(v *ListCorpGroupMetricsResponseBody) *ListCorpGroupMetricsResponse {
	s.Body = v
	return s
}

type ListCorpGroupsRequest struct {
	CorpId     *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	PageNumber *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListCorpGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCorpGroupsRequest) GoString() string {
	return s.String()
}

func (s *ListCorpGroupsRequest) SetCorpId(v string) *ListCorpGroupsRequest {
	s.CorpId = &v
	return s
}

func (s *ListCorpGroupsRequest) SetPageNumber(v int64) *ListCorpGroupsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListCorpGroupsRequest) SetPageSize(v int64) *ListCorpGroupsRequest {
	s.PageSize = &v
	return s
}

type ListCorpGroupsResponseBody struct {
	Code      *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *ListCorpGroupsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListCorpGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCorpGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListCorpGroupsResponseBody) SetCode(v string) *ListCorpGroupsResponseBody {
	s.Code = &v
	return s
}

func (s *ListCorpGroupsResponseBody) SetData(v *ListCorpGroupsResponseBodyData) *ListCorpGroupsResponseBody {
	s.Data = v
	return s
}

func (s *ListCorpGroupsResponseBody) SetMessage(v string) *ListCorpGroupsResponseBody {
	s.Message = &v
	return s
}

func (s *ListCorpGroupsResponseBody) SetRequestId(v string) *ListCorpGroupsResponseBody {
	s.RequestId = &v
	return s
}

type ListCorpGroupsResponseBodyData struct {
	PageNumber *int64    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int64    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*string `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int64    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	TotalPage  *int64    `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s ListCorpGroupsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListCorpGroupsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListCorpGroupsResponseBodyData) SetPageNumber(v int64) *ListCorpGroupsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListCorpGroupsResponseBodyData) SetPageSize(v int64) *ListCorpGroupsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListCorpGroupsResponseBodyData) SetRecords(v []*string) *ListCorpGroupsResponseBodyData {
	s.Records = v
	return s
}

func (s *ListCorpGroupsResponseBodyData) SetTotalCount(v int64) *ListCorpGroupsResponseBodyData {
	s.TotalCount = &v
	return s
}

func (s *ListCorpGroupsResponseBodyData) SetTotalPage(v int64) *ListCorpGroupsResponseBodyData {
	s.TotalPage = &v
	return s
}

type ListCorpGroupsResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListCorpGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListCorpGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCorpGroupsResponse) GoString() string {
	return s.String()
}

func (s *ListCorpGroupsResponse) SetHeaders(v map[string]*string) *ListCorpGroupsResponse {
	s.Headers = v
	return s
}

func (s *ListCorpGroupsResponse) SetBody(v *ListCorpGroupsResponseBody) *ListCorpGroupsResponse {
	s.Body = v
	return s
}

type ListCorpMetricsRequest struct {
	CorpId          *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DeviceGroupList *string `json:"DeviceGroupList,omitempty" xml:"DeviceGroupList,omitempty"`
	DeviceIdList    *string `json:"DeviceIdList,omitempty" xml:"DeviceIdList,omitempty"`
	EndTime         *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageNumber      *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTime       *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TagCode         *string `json:"TagCode,omitempty" xml:"TagCode,omitempty"`
	UserGroupList   *string `json:"UserGroupList,omitempty" xml:"UserGroupList,omitempty"`
}

func (s ListCorpMetricsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCorpMetricsRequest) GoString() string {
	return s.String()
}

func (s *ListCorpMetricsRequest) SetCorpId(v string) *ListCorpMetricsRequest {
	s.CorpId = &v
	return s
}

func (s *ListCorpMetricsRequest) SetDeviceGroupList(v string) *ListCorpMetricsRequest {
	s.DeviceGroupList = &v
	return s
}

func (s *ListCorpMetricsRequest) SetDeviceIdList(v string) *ListCorpMetricsRequest {
	s.DeviceIdList = &v
	return s
}

func (s *ListCorpMetricsRequest) SetEndTime(v string) *ListCorpMetricsRequest {
	s.EndTime = &v
	return s
}

func (s *ListCorpMetricsRequest) SetPageNumber(v string) *ListCorpMetricsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListCorpMetricsRequest) SetPageSize(v string) *ListCorpMetricsRequest {
	s.PageSize = &v
	return s
}

func (s *ListCorpMetricsRequest) SetStartTime(v string) *ListCorpMetricsRequest {
	s.StartTime = &v
	return s
}

func (s *ListCorpMetricsRequest) SetTagCode(v string) *ListCorpMetricsRequest {
	s.TagCode = &v
	return s
}

func (s *ListCorpMetricsRequest) SetUserGroupList(v string) *ListCorpMetricsRequest {
	s.UserGroupList = &v
	return s
}

type ListCorpMetricsResponseBody struct {
	Code       *string                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data       []*ListCorpMetricsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message    *string                            `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber *int32                             `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                             `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success    *string                            `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount *int32                             `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListCorpMetricsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCorpMetricsResponseBody) GoString() string {
	return s.String()
}

func (s *ListCorpMetricsResponseBody) SetCode(v string) *ListCorpMetricsResponseBody {
	s.Code = &v
	return s
}

func (s *ListCorpMetricsResponseBody) SetData(v []*ListCorpMetricsResponseBodyData) *ListCorpMetricsResponseBody {
	s.Data = v
	return s
}

func (s *ListCorpMetricsResponseBody) SetMessage(v string) *ListCorpMetricsResponseBody {
	s.Message = &v
	return s
}

func (s *ListCorpMetricsResponseBody) SetPageNumber(v int32) *ListCorpMetricsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListCorpMetricsResponseBody) SetPageSize(v int32) *ListCorpMetricsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListCorpMetricsResponseBody) SetRequestId(v string) *ListCorpMetricsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCorpMetricsResponseBody) SetSuccess(v string) *ListCorpMetricsResponseBody {
	s.Success = &v
	return s
}

func (s *ListCorpMetricsResponseBody) SetTotalCount(v int32) *ListCorpMetricsResponseBody {
	s.TotalCount = &v
	return s
}

type ListCorpMetricsResponseBodyData struct {
	CorpId        *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DateId        *string `json:"DateId,omitempty" xml:"DateId,omitempty"`
	DeviceGroupId *string `json:"DeviceGroupId,omitempty" xml:"DeviceGroupId,omitempty"`
	DeviceId      *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	PersonId      *string `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	TagCode       *string `json:"TagCode,omitempty" xml:"TagCode,omitempty"`
	TagMetrics    *string `json:"TagMetrics,omitempty" xml:"TagMetrics,omitempty"`
	TagValue      *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	UserGroupId   *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s ListCorpMetricsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListCorpMetricsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListCorpMetricsResponseBodyData) SetCorpId(v string) *ListCorpMetricsResponseBodyData {
	s.CorpId = &v
	return s
}

func (s *ListCorpMetricsResponseBodyData) SetDateId(v string) *ListCorpMetricsResponseBodyData {
	s.DateId = &v
	return s
}

func (s *ListCorpMetricsResponseBodyData) SetDeviceGroupId(v string) *ListCorpMetricsResponseBodyData {
	s.DeviceGroupId = &v
	return s
}

func (s *ListCorpMetricsResponseBodyData) SetDeviceId(v string) *ListCorpMetricsResponseBodyData {
	s.DeviceId = &v
	return s
}

func (s *ListCorpMetricsResponseBodyData) SetPersonId(v string) *ListCorpMetricsResponseBodyData {
	s.PersonId = &v
	return s
}

func (s *ListCorpMetricsResponseBodyData) SetTagCode(v string) *ListCorpMetricsResponseBodyData {
	s.TagCode = &v
	return s
}

func (s *ListCorpMetricsResponseBodyData) SetTagMetrics(v string) *ListCorpMetricsResponseBodyData {
	s.TagMetrics = &v
	return s
}

func (s *ListCorpMetricsResponseBodyData) SetTagValue(v string) *ListCorpMetricsResponseBodyData {
	s.TagValue = &v
	return s
}

func (s *ListCorpMetricsResponseBodyData) SetUserGroupId(v string) *ListCorpMetricsResponseBodyData {
	s.UserGroupId = &v
	return s
}

type ListCorpMetricsResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListCorpMetricsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListCorpMetricsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCorpMetricsResponse) GoString() string {
	return s.String()
}

func (s *ListCorpMetricsResponse) SetHeaders(v map[string]*string) *ListCorpMetricsResponse {
	s.Headers = v
	return s
}

func (s *ListCorpMetricsResponse) SetBody(v *ListCorpMetricsResponseBody) *ListCorpMetricsResponse {
	s.Body = v
	return s
}

type ListCorpsRequest struct {
	CorpName *string `json:"CorpName,omitempty" xml:"CorpName,omitempty"`
	// 页码
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// 分页大小
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListCorpsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCorpsRequest) GoString() string {
	return s.String()
}

func (s *ListCorpsRequest) SetCorpName(v string) *ListCorpsRequest {
	s.CorpName = &v
	return s
}

func (s *ListCorpsRequest) SetPageNumber(v int32) *ListCorpsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListCorpsRequest) SetPageSize(v int32) *ListCorpsRequest {
	s.PageSize = &v
	return s
}

type ListCorpsResponseBody struct {
	Code      *string                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *ListCorpsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                    `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListCorpsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCorpsResponseBody) GoString() string {
	return s.String()
}

func (s *ListCorpsResponseBody) SetCode(v string) *ListCorpsResponseBody {
	s.Code = &v
	return s
}

func (s *ListCorpsResponseBody) SetData(v *ListCorpsResponseBodyData) *ListCorpsResponseBody {
	s.Data = v
	return s
}

func (s *ListCorpsResponseBody) SetMessage(v string) *ListCorpsResponseBody {
	s.Message = &v
	return s
}

func (s *ListCorpsResponseBody) SetRequestId(v string) *ListCorpsResponseBody {
	s.RequestId = &v
	return s
}

type ListCorpsResponseBodyData struct {
	PageNumber *int32                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*ListCorpsResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int32                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	TotalPage  *int32                              `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s ListCorpsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListCorpsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListCorpsResponseBodyData) SetPageNumber(v int32) *ListCorpsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListCorpsResponseBodyData) SetPageSize(v int32) *ListCorpsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListCorpsResponseBodyData) SetRecords(v []*ListCorpsResponseBodyDataRecords) *ListCorpsResponseBodyData {
	s.Records = v
	return s
}

func (s *ListCorpsResponseBodyData) SetTotalCount(v int32) *ListCorpsResponseBodyData {
	s.TotalCount = &v
	return s
}

func (s *ListCorpsResponseBodyData) SetTotalPage(v int32) *ListCorpsResponseBodyData {
	s.TotalPage = &v
	return s
}

type ListCorpsResponseBodyDataRecords struct {
	AcuUsed      *int32  `json:"AcuUsed,omitempty" xml:"AcuUsed,omitempty"`
	AppName      *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	CorpId       *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	CorpName     *string `json:"CorpName,omitempty" xml:"CorpName,omitempty"`
	CreateDate   *string `json:"CreateDate,omitempty" xml:"CreateDate,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DeviceCount  *int32  `json:"DeviceCount,omitempty" xml:"DeviceCount,omitempty"`
	IconPath     *string `json:"IconPath,omitempty" xml:"IconPath,omitempty"`
	IsvSubId     *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	ParentCorpId *string `json:"ParentCorpId,omitempty" xml:"ParentCorpId,omitempty"`
}

func (s ListCorpsResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s ListCorpsResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *ListCorpsResponseBodyDataRecords) SetAcuUsed(v int32) *ListCorpsResponseBodyDataRecords {
	s.AcuUsed = &v
	return s
}

func (s *ListCorpsResponseBodyDataRecords) SetAppName(v string) *ListCorpsResponseBodyDataRecords {
	s.AppName = &v
	return s
}

func (s *ListCorpsResponseBodyDataRecords) SetCorpId(v string) *ListCorpsResponseBodyDataRecords {
	s.CorpId = &v
	return s
}

func (s *ListCorpsResponseBodyDataRecords) SetCorpName(v string) *ListCorpsResponseBodyDataRecords {
	s.CorpName = &v
	return s
}

func (s *ListCorpsResponseBodyDataRecords) SetCreateDate(v string) *ListCorpsResponseBodyDataRecords {
	s.CreateDate = &v
	return s
}

func (s *ListCorpsResponseBodyDataRecords) SetDescription(v string) *ListCorpsResponseBodyDataRecords {
	s.Description = &v
	return s
}

func (s *ListCorpsResponseBodyDataRecords) SetDeviceCount(v int32) *ListCorpsResponseBodyDataRecords {
	s.DeviceCount = &v
	return s
}

func (s *ListCorpsResponseBodyDataRecords) SetIconPath(v string) *ListCorpsResponseBodyDataRecords {
	s.IconPath = &v
	return s
}

func (s *ListCorpsResponseBodyDataRecords) SetIsvSubId(v string) *ListCorpsResponseBodyDataRecords {
	s.IsvSubId = &v
	return s
}

func (s *ListCorpsResponseBodyDataRecords) SetParentCorpId(v string) *ListCorpsResponseBodyDataRecords {
	s.ParentCorpId = &v
	return s
}

type ListCorpsResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListCorpsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListCorpsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCorpsResponse) GoString() string {
	return s.String()
}

func (s *ListCorpsResponse) SetHeaders(v map[string]*string) *ListCorpsResponse {
	s.Headers = v
	return s
}

func (s *ListCorpsResponse) SetBody(v *ListCorpsResponseBody) *ListCorpsResponse {
	s.Body = v
	return s
}

type ListDeviceGroupsRequest struct {
	CorpIdList     *string `json:"CorpIdList,omitempty" xml:"CorpIdList,omitempty"`
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	DeviceCodeList *string `json:"DeviceCodeList,omitempty" xml:"DeviceCodeList,omitempty"`
	Group          *string `json:"Group,omitempty" xml:"Group,omitempty"`
	IsPage         *int32  `json:"IsPage,omitempty" xml:"IsPage,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PageNum        *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListDeviceGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDeviceGroupsRequest) GoString() string {
	return s.String()
}

func (s *ListDeviceGroupsRequest) SetCorpIdList(v string) *ListDeviceGroupsRequest {
	s.CorpIdList = &v
	return s
}

func (s *ListDeviceGroupsRequest) SetDataSourceType(v string) *ListDeviceGroupsRequest {
	s.DataSourceType = &v
	return s
}

func (s *ListDeviceGroupsRequest) SetDeviceCodeList(v string) *ListDeviceGroupsRequest {
	s.DeviceCodeList = &v
	return s
}

func (s *ListDeviceGroupsRequest) SetGroup(v string) *ListDeviceGroupsRequest {
	s.Group = &v
	return s
}

func (s *ListDeviceGroupsRequest) SetIsPage(v int32) *ListDeviceGroupsRequest {
	s.IsPage = &v
	return s
}

func (s *ListDeviceGroupsRequest) SetName(v string) *ListDeviceGroupsRequest {
	s.Name = &v
	return s
}

func (s *ListDeviceGroupsRequest) SetPageNum(v int32) *ListDeviceGroupsRequest {
	s.PageNum = &v
	return s
}

func (s *ListDeviceGroupsRequest) SetPageSize(v int32) *ListDeviceGroupsRequest {
	s.PageSize = &v
	return s
}

type ListDeviceGroupsResponseBody struct {
	Code      *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []*ListDeviceGroupsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message   *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDeviceGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDeviceGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDeviceGroupsResponseBody) SetCode(v string) *ListDeviceGroupsResponseBody {
	s.Code = &v
	return s
}

func (s *ListDeviceGroupsResponseBody) SetData(v []*ListDeviceGroupsResponseBodyData) *ListDeviceGroupsResponseBody {
	s.Data = v
	return s
}

func (s *ListDeviceGroupsResponseBody) SetMessage(v string) *ListDeviceGroupsResponseBody {
	s.Message = &v
	return s
}

func (s *ListDeviceGroupsResponseBody) SetRequestId(v string) *ListDeviceGroupsResponseBody {
	s.RequestId = &v
	return s
}

type ListDeviceGroupsResponseBodyData struct {
	List       []*ListDeviceGroupsResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	TotalCount *string                                 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDeviceGroupsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListDeviceGroupsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListDeviceGroupsResponseBodyData) SetList(v []*ListDeviceGroupsResponseBodyDataList) *ListDeviceGroupsResponseBodyData {
	s.List = v
	return s
}

func (s *ListDeviceGroupsResponseBodyData) SetTotalCount(v string) *ListDeviceGroupsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListDeviceGroupsResponseBodyDataList struct {
	BitRate             *string `json:"BitRate,omitempty" xml:"BitRate,omitempty"`
	CodingFormat        *string `json:"CodingFormat,omitempty" xml:"CodingFormat,omitempty"`
	DataSourceType      *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	DeviceCode          *string `json:"DeviceCode,omitempty" xml:"DeviceCode,omitempty"`
	DeviceComputeStatus *string `json:"DeviceComputeStatus,omitempty" xml:"DeviceComputeStatus,omitempty"`
	DeviceGroup         *string `json:"DeviceGroup,omitempty" xml:"DeviceGroup,omitempty"`
	DeviceName          *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DeviceSn            *string `json:"DeviceSn,omitempty" xml:"DeviceSn,omitempty"`
	DeviceStatus        *string `json:"DeviceStatus,omitempty" xml:"DeviceStatus,omitempty"`
	DeviceStreamStatus  *string `json:"DeviceStreamStatus,omitempty" xml:"DeviceStreamStatus,omitempty"`
	InstallAddress      *string `json:"InstallAddress,omitempty" xml:"InstallAddress,omitempty"`
	RegionId            *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RegionName          *string `json:"RegionName,omitempty" xml:"RegionName,omitempty"`
	ResolvingPower      *string `json:"ResolvingPower,omitempty" xml:"ResolvingPower,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDeviceGroupsResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListDeviceGroupsResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListDeviceGroupsResponseBodyDataList) SetBitRate(v string) *ListDeviceGroupsResponseBodyDataList {
	s.BitRate = &v
	return s
}

func (s *ListDeviceGroupsResponseBodyDataList) SetCodingFormat(v string) *ListDeviceGroupsResponseBodyDataList {
	s.CodingFormat = &v
	return s
}

func (s *ListDeviceGroupsResponseBodyDataList) SetDataSourceType(v string) *ListDeviceGroupsResponseBodyDataList {
	s.DataSourceType = &v
	return s
}

func (s *ListDeviceGroupsResponseBodyDataList) SetDeviceCode(v string) *ListDeviceGroupsResponseBodyDataList {
	s.DeviceCode = &v
	return s
}

func (s *ListDeviceGroupsResponseBodyDataList) SetDeviceComputeStatus(v string) *ListDeviceGroupsResponseBodyDataList {
	s.DeviceComputeStatus = &v
	return s
}

func (s *ListDeviceGroupsResponseBodyDataList) SetDeviceGroup(v string) *ListDeviceGroupsResponseBodyDataList {
	s.DeviceGroup = &v
	return s
}

func (s *ListDeviceGroupsResponseBodyDataList) SetDeviceName(v string) *ListDeviceGroupsResponseBodyDataList {
	s.DeviceName = &v
	return s
}

func (s *ListDeviceGroupsResponseBodyDataList) SetDeviceSn(v string) *ListDeviceGroupsResponseBodyDataList {
	s.DeviceSn = &v
	return s
}

func (s *ListDeviceGroupsResponseBodyDataList) SetDeviceStatus(v string) *ListDeviceGroupsResponseBodyDataList {
	s.DeviceStatus = &v
	return s
}

func (s *ListDeviceGroupsResponseBodyDataList) SetDeviceStreamStatus(v string) *ListDeviceGroupsResponseBodyDataList {
	s.DeviceStreamStatus = &v
	return s
}

func (s *ListDeviceGroupsResponseBodyDataList) SetInstallAddress(v string) *ListDeviceGroupsResponseBodyDataList {
	s.InstallAddress = &v
	return s
}

func (s *ListDeviceGroupsResponseBodyDataList) SetRegionId(v string) *ListDeviceGroupsResponseBodyDataList {
	s.RegionId = &v
	return s
}

func (s *ListDeviceGroupsResponseBodyDataList) SetRegionName(v string) *ListDeviceGroupsResponseBodyDataList {
	s.RegionName = &v
	return s
}

func (s *ListDeviceGroupsResponseBodyDataList) SetResolvingPower(v string) *ListDeviceGroupsResponseBodyDataList {
	s.ResolvingPower = &v
	return s
}

func (s *ListDeviceGroupsResponseBodyDataList) SetType(v string) *ListDeviceGroupsResponseBodyDataList {
	s.Type = &v
	return s
}

type ListDeviceGroupsResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListDeviceGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDeviceGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDeviceGroupsResponse) GoString() string {
	return s.String()
}

func (s *ListDeviceGroupsResponse) SetHeaders(v map[string]*string) *ListDeviceGroupsResponse {
	s.Headers = v
	return s
}

func (s *ListDeviceGroupsResponse) SetBody(v *ListDeviceGroupsResponseBody) *ListDeviceGroupsResponse {
	s.Body = v
	return s
}

type ListDevicesRequest struct {
	CorpId     *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DeviceName *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	GbId       *string `json:"GbId,omitempty" xml:"GbId,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDevicesRequest) GoString() string {
	return s.String()
}

func (s *ListDevicesRequest) SetCorpId(v string) *ListDevicesRequest {
	s.CorpId = &v
	return s
}

func (s *ListDevicesRequest) SetDeviceName(v string) *ListDevicesRequest {
	s.DeviceName = &v
	return s
}

func (s *ListDevicesRequest) SetGbId(v string) *ListDevicesRequest {
	s.GbId = &v
	return s
}

func (s *ListDevicesRequest) SetPageNumber(v int32) *ListDevicesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDevicesRequest) SetPageSize(v int32) *ListDevicesRequest {
	s.PageSize = &v
	return s
}

type ListDevicesResponseBody struct {
	Code      *string                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *ListDevicesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                      `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *ListDevicesResponseBody) SetCode(v string) *ListDevicesResponseBody {
	s.Code = &v
	return s
}

func (s *ListDevicesResponseBody) SetData(v *ListDevicesResponseBodyData) *ListDevicesResponseBody {
	s.Data = v
	return s
}

func (s *ListDevicesResponseBody) SetMessage(v string) *ListDevicesResponseBody {
	s.Message = &v
	return s
}

func (s *ListDevicesResponseBody) SetRequestId(v string) *ListDevicesResponseBody {
	s.RequestId = &v
	return s
}

type ListDevicesResponseBodyData struct {
	PageNumber *int32                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*ListDevicesResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int32                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	TotalPage  *int32                                `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s ListDevicesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListDevicesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListDevicesResponseBodyData) SetPageNumber(v int32) *ListDevicesResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListDevicesResponseBodyData) SetPageSize(v int32) *ListDevicesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListDevicesResponseBodyData) SetRecords(v []*ListDevicesResponseBodyDataRecords) *ListDevicesResponseBodyData {
	s.Records = v
	return s
}

func (s *ListDevicesResponseBodyData) SetTotalCount(v int32) *ListDevicesResponseBodyData {
	s.TotalCount = &v
	return s
}

func (s *ListDevicesResponseBodyData) SetTotalPage(v int32) *ListDevicesResponseBodyData {
	s.TotalPage = &v
	return s
}

type ListDevicesResponseBodyDataRecords struct {
	AccessProtocolType *string `json:"AccessProtocolType,omitempty" xml:"AccessProtocolType,omitempty"`
	BitRate            *string `json:"BitRate,omitempty" xml:"BitRate,omitempty"`
	CoverImageUrl      *string `json:"CoverImageUrl,omitempty" xml:"CoverImageUrl,omitempty"`
	CreateTime         *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DeviceAddress      *string `json:"DeviceAddress,omitempty" xml:"DeviceAddress,omitempty"`
	DeviceDirection    *string `json:"DeviceDirection,omitempty" xml:"DeviceDirection,omitempty"`
	DeviceName         *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DeviceSite         *string `json:"DeviceSite,omitempty" xml:"DeviceSite,omitempty"`
	DeviceType         *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	GbId               *string `json:"GbId,omitempty" xml:"GbId,omitempty"`
	Latitude           *string `json:"Latitude,omitempty" xml:"Latitude,omitempty"`
	Longitude          *string `json:"Longitude,omitempty" xml:"Longitude,omitempty"`
	Resolution         *string `json:"Resolution,omitempty" xml:"Resolution,omitempty"`
	SipGBId            *string `json:"SipGBId,omitempty" xml:"SipGBId,omitempty"`
	SipPassword        *string `json:"SipPassword,omitempty" xml:"SipPassword,omitempty"`
	SipServerIp        *string `json:"SipServerIp,omitempty" xml:"SipServerIp,omitempty"`
	SipServerPort      *string `json:"SipServerPort,omitempty" xml:"SipServerPort,omitempty"`
	Status             *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Vendor             *string `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s ListDevicesResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s ListDevicesResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *ListDevicesResponseBodyDataRecords) SetAccessProtocolType(v string) *ListDevicesResponseBodyDataRecords {
	s.AccessProtocolType = &v
	return s
}

func (s *ListDevicesResponseBodyDataRecords) SetBitRate(v string) *ListDevicesResponseBodyDataRecords {
	s.BitRate = &v
	return s
}

func (s *ListDevicesResponseBodyDataRecords) SetCoverImageUrl(v string) *ListDevicesResponseBodyDataRecords {
	s.CoverImageUrl = &v
	return s
}

func (s *ListDevicesResponseBodyDataRecords) SetCreateTime(v string) *ListDevicesResponseBodyDataRecords {
	s.CreateTime = &v
	return s
}

func (s *ListDevicesResponseBodyDataRecords) SetDeviceAddress(v string) *ListDevicesResponseBodyDataRecords {
	s.DeviceAddress = &v
	return s
}

func (s *ListDevicesResponseBodyDataRecords) SetDeviceDirection(v string) *ListDevicesResponseBodyDataRecords {
	s.DeviceDirection = &v
	return s
}

func (s *ListDevicesResponseBodyDataRecords) SetDeviceName(v string) *ListDevicesResponseBodyDataRecords {
	s.DeviceName = &v
	return s
}

func (s *ListDevicesResponseBodyDataRecords) SetDeviceSite(v string) *ListDevicesResponseBodyDataRecords {
	s.DeviceSite = &v
	return s
}

func (s *ListDevicesResponseBodyDataRecords) SetDeviceType(v string) *ListDevicesResponseBodyDataRecords {
	s.DeviceType = &v
	return s
}

func (s *ListDevicesResponseBodyDataRecords) SetGbId(v string) *ListDevicesResponseBodyDataRecords {
	s.GbId = &v
	return s
}

func (s *ListDevicesResponseBodyDataRecords) SetLatitude(v string) *ListDevicesResponseBodyDataRecords {
	s.Latitude = &v
	return s
}

func (s *ListDevicesResponseBodyDataRecords) SetLongitude(v string) *ListDevicesResponseBodyDataRecords {
	s.Longitude = &v
	return s
}

func (s *ListDevicesResponseBodyDataRecords) SetResolution(v string) *ListDevicesResponseBodyDataRecords {
	s.Resolution = &v
	return s
}

func (s *ListDevicesResponseBodyDataRecords) SetSipGBId(v string) *ListDevicesResponseBodyDataRecords {
	s.SipGBId = &v
	return s
}

func (s *ListDevicesResponseBodyDataRecords) SetSipPassword(v string) *ListDevicesResponseBodyDataRecords {
	s.SipPassword = &v
	return s
}

func (s *ListDevicesResponseBodyDataRecords) SetSipServerIp(v string) *ListDevicesResponseBodyDataRecords {
	s.SipServerIp = &v
	return s
}

func (s *ListDevicesResponseBodyDataRecords) SetSipServerPort(v string) *ListDevicesResponseBodyDataRecords {
	s.SipServerPort = &v
	return s
}

func (s *ListDevicesResponseBodyDataRecords) SetStatus(v int32) *ListDevicesResponseBodyDataRecords {
	s.Status = &v
	return s
}

func (s *ListDevicesResponseBodyDataRecords) SetVendor(v string) *ListDevicesResponseBodyDataRecords {
	s.Vendor = &v
	return s
}

type ListDevicesResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDevicesResponse) GoString() string {
	return s.String()
}

func (s *ListDevicesResponse) SetHeaders(v map[string]*string) *ListDevicesResponse {
	s.Headers = v
	return s
}

func (s *ListDevicesResponse) SetBody(v *ListDevicesResponseBody) *ListDevicesResponse {
	s.Body = v
	return s
}

type ListEventAlgorithmDetailsRequest struct {
	CorpId       *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	EventType    *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	EventValue   *string `json:"EventValue,omitempty" xml:"EventValue,omitempty"`
	ExtendValue  *string `json:"ExtendValue,omitempty" xml:"ExtendValue,omitempty"`
	PageNumber   *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RecordId     *string `json:"RecordId,omitempty" xml:"RecordId,omitempty"`
	SourceId     *string `json:"SourceId,omitempty" xml:"SourceId,omitempty"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListEventAlgorithmDetailsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEventAlgorithmDetailsRequest) GoString() string {
	return s.String()
}

func (s *ListEventAlgorithmDetailsRequest) SetCorpId(v string) *ListEventAlgorithmDetailsRequest {
	s.CorpId = &v
	return s
}

func (s *ListEventAlgorithmDetailsRequest) SetDataSourceId(v string) *ListEventAlgorithmDetailsRequest {
	s.DataSourceId = &v
	return s
}

func (s *ListEventAlgorithmDetailsRequest) SetEndTime(v string) *ListEventAlgorithmDetailsRequest {
	s.EndTime = &v
	return s
}

func (s *ListEventAlgorithmDetailsRequest) SetEventType(v string) *ListEventAlgorithmDetailsRequest {
	s.EventType = &v
	return s
}

func (s *ListEventAlgorithmDetailsRequest) SetEventValue(v string) *ListEventAlgorithmDetailsRequest {
	s.EventValue = &v
	return s
}

func (s *ListEventAlgorithmDetailsRequest) SetExtendValue(v string) *ListEventAlgorithmDetailsRequest {
	s.ExtendValue = &v
	return s
}

func (s *ListEventAlgorithmDetailsRequest) SetPageNumber(v int32) *ListEventAlgorithmDetailsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListEventAlgorithmDetailsRequest) SetPageSize(v int32) *ListEventAlgorithmDetailsRequest {
	s.PageSize = &v
	return s
}

func (s *ListEventAlgorithmDetailsRequest) SetRecordId(v string) *ListEventAlgorithmDetailsRequest {
	s.RecordId = &v
	return s
}

func (s *ListEventAlgorithmDetailsRequest) SetSourceId(v string) *ListEventAlgorithmDetailsRequest {
	s.SourceId = &v
	return s
}

func (s *ListEventAlgorithmDetailsRequest) SetStartTime(v string) *ListEventAlgorithmDetailsRequest {
	s.StartTime = &v
	return s
}

type ListEventAlgorithmDetailsResponseBody struct {
	Code       *string                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data       []*ListEventAlgorithmDetailsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message    *string                                      `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber *int32                                       `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success    *string                                      `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount *int32                                       `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListEventAlgorithmDetailsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListEventAlgorithmDetailsResponseBody) GoString() string {
	return s.String()
}

func (s *ListEventAlgorithmDetailsResponseBody) SetCode(v string) *ListEventAlgorithmDetailsResponseBody {
	s.Code = &v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBody) SetData(v []*ListEventAlgorithmDetailsResponseBodyData) *ListEventAlgorithmDetailsResponseBody {
	s.Data = v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBody) SetMessage(v string) *ListEventAlgorithmDetailsResponseBody {
	s.Message = &v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBody) SetPageNumber(v int32) *ListEventAlgorithmDetailsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBody) SetPageSize(v int32) *ListEventAlgorithmDetailsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBody) SetRequestId(v string) *ListEventAlgorithmDetailsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBody) SetSuccess(v string) *ListEventAlgorithmDetailsResponseBody {
	s.Success = &v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBody) SetTotalCount(v int32) *ListEventAlgorithmDetailsResponseBody {
	s.TotalCount = &v
	return s
}

type ListEventAlgorithmDetailsResponseBodyData struct {
	CorpId             *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DataSourceId       *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	EventType          *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	EventValue         *string `json:"EventValue,omitempty" xml:"EventValue,omitempty"`
	ExtendValue        *string `json:"ExtendValue,omitempty" xml:"ExtendValue,omitempty"`
	ExtraExtendValue   *string `json:"ExtraExtendValue,omitempty" xml:"ExtraExtendValue,omitempty"`
	FaceCount          *string `json:"FaceCount,omitempty" xml:"FaceCount,omitempty"`
	LeftTopX           *string `json:"LeftTopX,omitempty" xml:"LeftTopX,omitempty"`
	LeftTopY           *string `json:"LeftTopY,omitempty" xml:"LeftTopY,omitempty"`
	PicUrlPath         *string `json:"PicUrlPath,omitempty" xml:"PicUrlPath,omitempty"`
	PointX             *string `json:"PointX,omitempty" xml:"PointX,omitempty"`
	PointY             *string `json:"PointY,omitempty" xml:"PointY,omitempty"`
	RecordId           *string `json:"RecordId,omitempty" xml:"RecordId,omitempty"`
	RightBottomX       *string `json:"RightBottomX,omitempty" xml:"RightBottomX,omitempty"`
	RightBottomY       *string `json:"RightBottomY,omitempty" xml:"RightBottomY,omitempty"`
	ShotTime           *string `json:"ShotTime,omitempty" xml:"ShotTime,omitempty"`
	SourceId           *string `json:"SourceId,omitempty" xml:"SourceId,omitempty"`
	TagCode            *string `json:"TagCode,omitempty" xml:"TagCode,omitempty"`
	TagCodeReliability *string `json:"TagCodeReliability,omitempty" xml:"TagCodeReliability,omitempty"`
	TargetPicUrlPath   *string `json:"TargetPicUrlPath,omitempty" xml:"TargetPicUrlPath,omitempty"`
	UuidCode           *string `json:"UuidCode,omitempty" xml:"UuidCode,omitempty"`
}

func (s ListEventAlgorithmDetailsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListEventAlgorithmDetailsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListEventAlgorithmDetailsResponseBodyData) SetCorpId(v string) *ListEventAlgorithmDetailsResponseBodyData {
	s.CorpId = &v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBodyData) SetDataSourceId(v string) *ListEventAlgorithmDetailsResponseBodyData {
	s.DataSourceId = &v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBodyData) SetEventType(v string) *ListEventAlgorithmDetailsResponseBodyData {
	s.EventType = &v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBodyData) SetEventValue(v string) *ListEventAlgorithmDetailsResponseBodyData {
	s.EventValue = &v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBodyData) SetExtendValue(v string) *ListEventAlgorithmDetailsResponseBodyData {
	s.ExtendValue = &v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBodyData) SetExtraExtendValue(v string) *ListEventAlgorithmDetailsResponseBodyData {
	s.ExtraExtendValue = &v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBodyData) SetFaceCount(v string) *ListEventAlgorithmDetailsResponseBodyData {
	s.FaceCount = &v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBodyData) SetLeftTopX(v string) *ListEventAlgorithmDetailsResponseBodyData {
	s.LeftTopX = &v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBodyData) SetLeftTopY(v string) *ListEventAlgorithmDetailsResponseBodyData {
	s.LeftTopY = &v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBodyData) SetPicUrlPath(v string) *ListEventAlgorithmDetailsResponseBodyData {
	s.PicUrlPath = &v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBodyData) SetPointX(v string) *ListEventAlgorithmDetailsResponseBodyData {
	s.PointX = &v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBodyData) SetPointY(v string) *ListEventAlgorithmDetailsResponseBodyData {
	s.PointY = &v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBodyData) SetRecordId(v string) *ListEventAlgorithmDetailsResponseBodyData {
	s.RecordId = &v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBodyData) SetRightBottomX(v string) *ListEventAlgorithmDetailsResponseBodyData {
	s.RightBottomX = &v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBodyData) SetRightBottomY(v string) *ListEventAlgorithmDetailsResponseBodyData {
	s.RightBottomY = &v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBodyData) SetShotTime(v string) *ListEventAlgorithmDetailsResponseBodyData {
	s.ShotTime = &v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBodyData) SetSourceId(v string) *ListEventAlgorithmDetailsResponseBodyData {
	s.SourceId = &v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBodyData) SetTagCode(v string) *ListEventAlgorithmDetailsResponseBodyData {
	s.TagCode = &v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBodyData) SetTagCodeReliability(v string) *ListEventAlgorithmDetailsResponseBodyData {
	s.TagCodeReliability = &v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBodyData) SetTargetPicUrlPath(v string) *ListEventAlgorithmDetailsResponseBodyData {
	s.TargetPicUrlPath = &v
	return s
}

func (s *ListEventAlgorithmDetailsResponseBodyData) SetUuidCode(v string) *ListEventAlgorithmDetailsResponseBodyData {
	s.UuidCode = &v
	return s
}

type ListEventAlgorithmDetailsResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListEventAlgorithmDetailsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListEventAlgorithmDetailsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEventAlgorithmDetailsResponse) GoString() string {
	return s.String()
}

func (s *ListEventAlgorithmDetailsResponse) SetHeaders(v map[string]*string) *ListEventAlgorithmDetailsResponse {
	s.Headers = v
	return s
}

func (s *ListEventAlgorithmDetailsResponse) SetBody(v *ListEventAlgorithmDetailsResponseBody) *ListEventAlgorithmDetailsResponse {
	s.Body = v
	return s
}

type ListEventAlgorithmResultsRequest struct {
	CorpId       *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	EventType    *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	ExtendValue  *string `json:"ExtendValue,omitempty" xml:"ExtendValue,omitempty"`
	PageNumber   *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListEventAlgorithmResultsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEventAlgorithmResultsRequest) GoString() string {
	return s.String()
}

func (s *ListEventAlgorithmResultsRequest) SetCorpId(v string) *ListEventAlgorithmResultsRequest {
	s.CorpId = &v
	return s
}

func (s *ListEventAlgorithmResultsRequest) SetDataSourceId(v string) *ListEventAlgorithmResultsRequest {
	s.DataSourceId = &v
	return s
}

func (s *ListEventAlgorithmResultsRequest) SetEndTime(v string) *ListEventAlgorithmResultsRequest {
	s.EndTime = &v
	return s
}

func (s *ListEventAlgorithmResultsRequest) SetEventType(v string) *ListEventAlgorithmResultsRequest {
	s.EventType = &v
	return s
}

func (s *ListEventAlgorithmResultsRequest) SetExtendValue(v string) *ListEventAlgorithmResultsRequest {
	s.ExtendValue = &v
	return s
}

func (s *ListEventAlgorithmResultsRequest) SetPageNumber(v string) *ListEventAlgorithmResultsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListEventAlgorithmResultsRequest) SetPageSize(v string) *ListEventAlgorithmResultsRequest {
	s.PageSize = &v
	return s
}

func (s *ListEventAlgorithmResultsRequest) SetStartTime(v string) *ListEventAlgorithmResultsRequest {
	s.StartTime = &v
	return s
}

type ListEventAlgorithmResultsResponseBody struct {
	Code        *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data        *ListEventAlgorithmResultsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ExtendValue *string                                    `json:"ExtendValue,omitempty" xml:"ExtendValue,omitempty"`
	Message     *string                                    `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId   *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListEventAlgorithmResultsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListEventAlgorithmResultsResponseBody) GoString() string {
	return s.String()
}

func (s *ListEventAlgorithmResultsResponseBody) SetCode(v string) *ListEventAlgorithmResultsResponseBody {
	s.Code = &v
	return s
}

func (s *ListEventAlgorithmResultsResponseBody) SetData(v *ListEventAlgorithmResultsResponseBodyData) *ListEventAlgorithmResultsResponseBody {
	s.Data = v
	return s
}

func (s *ListEventAlgorithmResultsResponseBody) SetExtendValue(v string) *ListEventAlgorithmResultsResponseBody {
	s.ExtendValue = &v
	return s
}

func (s *ListEventAlgorithmResultsResponseBody) SetMessage(v string) *ListEventAlgorithmResultsResponseBody {
	s.Message = &v
	return s
}

func (s *ListEventAlgorithmResultsResponseBody) SetRequestId(v string) *ListEventAlgorithmResultsResponseBody {
	s.RequestId = &v
	return s
}

type ListEventAlgorithmResultsResponseBodyData struct {
	PageNumber *int32                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*ListEventAlgorithmResultsResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int32                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	TotalPage  *int32                                              `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s ListEventAlgorithmResultsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListEventAlgorithmResultsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListEventAlgorithmResultsResponseBodyData) SetPageNumber(v int32) *ListEventAlgorithmResultsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListEventAlgorithmResultsResponseBodyData) SetPageSize(v int32) *ListEventAlgorithmResultsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListEventAlgorithmResultsResponseBodyData) SetRecords(v []*ListEventAlgorithmResultsResponseBodyDataRecords) *ListEventAlgorithmResultsResponseBodyData {
	s.Records = v
	return s
}

func (s *ListEventAlgorithmResultsResponseBodyData) SetTotalCount(v int32) *ListEventAlgorithmResultsResponseBodyData {
	s.TotalCount = &v
	return s
}

func (s *ListEventAlgorithmResultsResponseBodyData) SetTotalPage(v int32) *ListEventAlgorithmResultsResponseBodyData {
	s.TotalPage = &v
	return s
}

type ListEventAlgorithmResultsResponseBodyDataRecords struct {
	CapStyle           *string `json:"CapStyle,omitempty" xml:"CapStyle,omitempty"`
	CorpId             *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DataSourceId       *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	EventType          *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	ExtendValue        *string `json:"ExtendValue,omitempty" xml:"ExtendValue,omitempty"`
	ExtendValueThree   *string `json:"ExtendValueThree,omitempty" xml:"ExtendValueThree,omitempty"`
	ExtendValueTwo     *string `json:"ExtendValueTwo,omitempty" xml:"ExtendValueTwo,omitempty"`
	FaceCount          *string `json:"FaceCount,omitempty" xml:"FaceCount,omitempty"`
	PicUrlPath         *string `json:"PicUrlPath,omitempty" xml:"PicUrlPath,omitempty"`
	RecordId           *string `json:"RecordId,omitempty" xml:"RecordId,omitempty"`
	ShotTime           *string `json:"ShotTime,omitempty" xml:"ShotTime,omitempty"`
	TagCode            *string `json:"TagCode,omitempty" xml:"TagCode,omitempty"`
	TagCodeReliability *string `json:"TagCodeReliability,omitempty" xml:"TagCodeReliability,omitempty"`
	TargetPicUrlPath   *string `json:"TargetPicUrlPath,omitempty" xml:"TargetPicUrlPath,omitempty"`
	UuidCode           *string `json:"UuidCode,omitempty" xml:"UuidCode,omitempty"`
}

func (s ListEventAlgorithmResultsResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s ListEventAlgorithmResultsResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *ListEventAlgorithmResultsResponseBodyDataRecords) SetCapStyle(v string) *ListEventAlgorithmResultsResponseBodyDataRecords {
	s.CapStyle = &v
	return s
}

func (s *ListEventAlgorithmResultsResponseBodyDataRecords) SetCorpId(v string) *ListEventAlgorithmResultsResponseBodyDataRecords {
	s.CorpId = &v
	return s
}

func (s *ListEventAlgorithmResultsResponseBodyDataRecords) SetDataSourceId(v string) *ListEventAlgorithmResultsResponseBodyDataRecords {
	s.DataSourceId = &v
	return s
}

func (s *ListEventAlgorithmResultsResponseBodyDataRecords) SetEventType(v string) *ListEventAlgorithmResultsResponseBodyDataRecords {
	s.EventType = &v
	return s
}

func (s *ListEventAlgorithmResultsResponseBodyDataRecords) SetExtendValue(v string) *ListEventAlgorithmResultsResponseBodyDataRecords {
	s.ExtendValue = &v
	return s
}

func (s *ListEventAlgorithmResultsResponseBodyDataRecords) SetExtendValueThree(v string) *ListEventAlgorithmResultsResponseBodyDataRecords {
	s.ExtendValueThree = &v
	return s
}

func (s *ListEventAlgorithmResultsResponseBodyDataRecords) SetExtendValueTwo(v string) *ListEventAlgorithmResultsResponseBodyDataRecords {
	s.ExtendValueTwo = &v
	return s
}

func (s *ListEventAlgorithmResultsResponseBodyDataRecords) SetFaceCount(v string) *ListEventAlgorithmResultsResponseBodyDataRecords {
	s.FaceCount = &v
	return s
}

func (s *ListEventAlgorithmResultsResponseBodyDataRecords) SetPicUrlPath(v string) *ListEventAlgorithmResultsResponseBodyDataRecords {
	s.PicUrlPath = &v
	return s
}

func (s *ListEventAlgorithmResultsResponseBodyDataRecords) SetRecordId(v string) *ListEventAlgorithmResultsResponseBodyDataRecords {
	s.RecordId = &v
	return s
}

func (s *ListEventAlgorithmResultsResponseBodyDataRecords) SetShotTime(v string) *ListEventAlgorithmResultsResponseBodyDataRecords {
	s.ShotTime = &v
	return s
}

func (s *ListEventAlgorithmResultsResponseBodyDataRecords) SetTagCode(v string) *ListEventAlgorithmResultsResponseBodyDataRecords {
	s.TagCode = &v
	return s
}

func (s *ListEventAlgorithmResultsResponseBodyDataRecords) SetTagCodeReliability(v string) *ListEventAlgorithmResultsResponseBodyDataRecords {
	s.TagCodeReliability = &v
	return s
}

func (s *ListEventAlgorithmResultsResponseBodyDataRecords) SetTargetPicUrlPath(v string) *ListEventAlgorithmResultsResponseBodyDataRecords {
	s.TargetPicUrlPath = &v
	return s
}

func (s *ListEventAlgorithmResultsResponseBodyDataRecords) SetUuidCode(v string) *ListEventAlgorithmResultsResponseBodyDataRecords {
	s.UuidCode = &v
	return s
}

type ListEventAlgorithmResultsResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListEventAlgorithmResultsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListEventAlgorithmResultsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEventAlgorithmResultsResponse) GoString() string {
	return s.String()
}

func (s *ListEventAlgorithmResultsResponse) SetHeaders(v map[string]*string) *ListEventAlgorithmResultsResponse {
	s.Headers = v
	return s
}

func (s *ListEventAlgorithmResultsResponse) SetBody(v *ListEventAlgorithmResultsResponseBody) *ListEventAlgorithmResultsResponse {
	s.Body = v
	return s
}

type ListFaceAlgorithmResultsRequest struct {
	AlgorithmType *string `json:"AlgorithmType,omitempty" xml:"AlgorithmType,omitempty"`
	CorpId        *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DataSourceId  *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageNumber    *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListFaceAlgorithmResultsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFaceAlgorithmResultsRequest) GoString() string {
	return s.String()
}

func (s *ListFaceAlgorithmResultsRequest) SetAlgorithmType(v string) *ListFaceAlgorithmResultsRequest {
	s.AlgorithmType = &v
	return s
}

func (s *ListFaceAlgorithmResultsRequest) SetCorpId(v string) *ListFaceAlgorithmResultsRequest {
	s.CorpId = &v
	return s
}

func (s *ListFaceAlgorithmResultsRequest) SetDataSourceId(v string) *ListFaceAlgorithmResultsRequest {
	s.DataSourceId = &v
	return s
}

func (s *ListFaceAlgorithmResultsRequest) SetEndTime(v string) *ListFaceAlgorithmResultsRequest {
	s.EndTime = &v
	return s
}

func (s *ListFaceAlgorithmResultsRequest) SetPageNumber(v string) *ListFaceAlgorithmResultsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFaceAlgorithmResultsRequest) SetPageSize(v string) *ListFaceAlgorithmResultsRequest {
	s.PageSize = &v
	return s
}

func (s *ListFaceAlgorithmResultsRequest) SetStartTime(v string) *ListFaceAlgorithmResultsRequest {
	s.StartTime = &v
	return s
}

type ListFaceAlgorithmResultsResponseBody struct {
	Code      *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *ListFaceAlgorithmResultsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListFaceAlgorithmResultsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFaceAlgorithmResultsResponseBody) GoString() string {
	return s.String()
}

func (s *ListFaceAlgorithmResultsResponseBody) SetCode(v string) *ListFaceAlgorithmResultsResponseBody {
	s.Code = &v
	return s
}

func (s *ListFaceAlgorithmResultsResponseBody) SetData(v *ListFaceAlgorithmResultsResponseBodyData) *ListFaceAlgorithmResultsResponseBody {
	s.Data = v
	return s
}

func (s *ListFaceAlgorithmResultsResponseBody) SetMessage(v string) *ListFaceAlgorithmResultsResponseBody {
	s.Message = &v
	return s
}

func (s *ListFaceAlgorithmResultsResponseBody) SetRequestId(v string) *ListFaceAlgorithmResultsResponseBody {
	s.RequestId = &v
	return s
}

type ListFaceAlgorithmResultsResponseBodyData struct {
	PageNumber *int32                                             `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                             `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*ListFaceAlgorithmResultsResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int32                                             `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	TotalPage  *int32                                             `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s ListFaceAlgorithmResultsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListFaceAlgorithmResultsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListFaceAlgorithmResultsResponseBodyData) SetPageNumber(v int32) *ListFaceAlgorithmResultsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListFaceAlgorithmResultsResponseBodyData) SetPageSize(v int32) *ListFaceAlgorithmResultsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListFaceAlgorithmResultsResponseBodyData) SetRecords(v []*ListFaceAlgorithmResultsResponseBodyDataRecords) *ListFaceAlgorithmResultsResponseBodyData {
	s.Records = v
	return s
}

func (s *ListFaceAlgorithmResultsResponseBodyData) SetTotalCount(v int32) *ListFaceAlgorithmResultsResponseBodyData {
	s.TotalCount = &v
	return s
}

func (s *ListFaceAlgorithmResultsResponseBodyData) SetTotalPage(v int32) *ListFaceAlgorithmResultsResponseBodyData {
	s.TotalPage = &v
	return s
}

type ListFaceAlgorithmResultsResponseBodyDataRecords struct {
	CapStyle         *string  `json:"CapStyle,omitempty" xml:"CapStyle,omitempty"`
	CorpId           *string  `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DataSourceId     *string  `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	FaceId           *string  `json:"FaceId,omitempty" xml:"FaceId,omitempty"`
	GenderCode       *string  `json:"GenderCode,omitempty" xml:"GenderCode,omitempty"`
	HairStyle        *string  `json:"HairStyle,omitempty" xml:"HairStyle,omitempty"`
	LeftTopX         *float32 `json:"LeftTopX,omitempty" xml:"LeftTopX,omitempty"`
	LeftTopY         *float32 `json:"LeftTopY,omitempty" xml:"LeftTopY,omitempty"`
	MaxAge           *string  `json:"MaxAge,omitempty" xml:"MaxAge,omitempty"`
	MinAge           *string  `json:"MinAge,omitempty" xml:"MinAge,omitempty"`
	PicUrlPath       *string  `json:"PicUrlPath,omitempty" xml:"PicUrlPath,omitempty"`
	RightBottomX     *float32 `json:"RightBottomX,omitempty" xml:"RightBottomX,omitempty"`
	RightBottomY     *float32 `json:"RightBottomY,omitempty" xml:"RightBottomY,omitempty"`
	ShotTime         *string  `json:"ShotTime,omitempty" xml:"ShotTime,omitempty"`
	SourceId         *string  `json:"SourceId,omitempty" xml:"SourceId,omitempty"`
	TargetPicUrlPath *string  `json:"TargetPicUrlPath,omitempty" xml:"TargetPicUrlPath,omitempty"`
}

func (s ListFaceAlgorithmResultsResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s ListFaceAlgorithmResultsResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *ListFaceAlgorithmResultsResponseBodyDataRecords) SetCapStyle(v string) *ListFaceAlgorithmResultsResponseBodyDataRecords {
	s.CapStyle = &v
	return s
}

func (s *ListFaceAlgorithmResultsResponseBodyDataRecords) SetCorpId(v string) *ListFaceAlgorithmResultsResponseBodyDataRecords {
	s.CorpId = &v
	return s
}

func (s *ListFaceAlgorithmResultsResponseBodyDataRecords) SetDataSourceId(v string) *ListFaceAlgorithmResultsResponseBodyDataRecords {
	s.DataSourceId = &v
	return s
}

func (s *ListFaceAlgorithmResultsResponseBodyDataRecords) SetFaceId(v string) *ListFaceAlgorithmResultsResponseBodyDataRecords {
	s.FaceId = &v
	return s
}

func (s *ListFaceAlgorithmResultsResponseBodyDataRecords) SetGenderCode(v string) *ListFaceAlgorithmResultsResponseBodyDataRecords {
	s.GenderCode = &v
	return s
}

func (s *ListFaceAlgorithmResultsResponseBodyDataRecords) SetHairStyle(v string) *ListFaceAlgorithmResultsResponseBodyDataRecords {
	s.HairStyle = &v
	return s
}

func (s *ListFaceAlgorithmResultsResponseBodyDataRecords) SetLeftTopX(v float32) *ListFaceAlgorithmResultsResponseBodyDataRecords {
	s.LeftTopX = &v
	return s
}

func (s *ListFaceAlgorithmResultsResponseBodyDataRecords) SetLeftTopY(v float32) *ListFaceAlgorithmResultsResponseBodyDataRecords {
	s.LeftTopY = &v
	return s
}

func (s *ListFaceAlgorithmResultsResponseBodyDataRecords) SetMaxAge(v string) *ListFaceAlgorithmResultsResponseBodyDataRecords {
	s.MaxAge = &v
	return s
}

func (s *ListFaceAlgorithmResultsResponseBodyDataRecords) SetMinAge(v string) *ListFaceAlgorithmResultsResponseBodyDataRecords {
	s.MinAge = &v
	return s
}

func (s *ListFaceAlgorithmResultsResponseBodyDataRecords) SetPicUrlPath(v string) *ListFaceAlgorithmResultsResponseBodyDataRecords {
	s.PicUrlPath = &v
	return s
}

func (s *ListFaceAlgorithmResultsResponseBodyDataRecords) SetRightBottomX(v float32) *ListFaceAlgorithmResultsResponseBodyDataRecords {
	s.RightBottomX = &v
	return s
}

func (s *ListFaceAlgorithmResultsResponseBodyDataRecords) SetRightBottomY(v float32) *ListFaceAlgorithmResultsResponseBodyDataRecords {
	s.RightBottomY = &v
	return s
}

func (s *ListFaceAlgorithmResultsResponseBodyDataRecords) SetShotTime(v string) *ListFaceAlgorithmResultsResponseBodyDataRecords {
	s.ShotTime = &v
	return s
}

func (s *ListFaceAlgorithmResultsResponseBodyDataRecords) SetSourceId(v string) *ListFaceAlgorithmResultsResponseBodyDataRecords {
	s.SourceId = &v
	return s
}

func (s *ListFaceAlgorithmResultsResponseBodyDataRecords) SetTargetPicUrlPath(v string) *ListFaceAlgorithmResultsResponseBodyDataRecords {
	s.TargetPicUrlPath = &v
	return s
}

type ListFaceAlgorithmResultsResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListFaceAlgorithmResultsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListFaceAlgorithmResultsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFaceAlgorithmResultsResponse) GoString() string {
	return s.String()
}

func (s *ListFaceAlgorithmResultsResponse) SetHeaders(v map[string]*string) *ListFaceAlgorithmResultsResponse {
	s.Headers = v
	return s
}

func (s *ListFaceAlgorithmResultsResponse) SetBody(v *ListFaceAlgorithmResultsResponseBody) *ListFaceAlgorithmResultsResponse {
	s.Body = v
	return s
}

type ListInstancesRequest struct {
	CurrentPage  *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId    *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s ListInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesRequest) GoString() string {
	return s.String()
}

func (s *ListInstancesRequest) SetCurrentPage(v int32) *ListInstancesRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListInstancesRequest) SetInstanceName(v string) *ListInstancesRequest {
	s.InstanceName = &v
	return s
}

func (s *ListInstancesRequest) SetPageSize(v int32) *ListInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *ListInstancesRequest) SetProjectId(v string) *ListInstancesRequest {
	s.ProjectId = &v
	return s
}

type ListInstancesResponseBody struct {
	Code      *string                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *ListInstancesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                        `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                          `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ListInstancesResponseBody) SetCode(v string) *ListInstancesResponseBody {
	s.Code = &v
	return s
}

func (s *ListInstancesResponseBody) SetData(v *ListInstancesResponseBodyData) *ListInstancesResponseBody {
	s.Data = v
	return s
}

func (s *ListInstancesResponseBody) SetMessage(v string) *ListInstancesResponseBody {
	s.Message = &v
	return s
}

func (s *ListInstancesResponseBody) SetRequestId(v string) *ListInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListInstancesResponseBody) SetSuccess(v bool) *ListInstancesResponseBody {
	s.Success = &v
	return s
}

type ListInstancesResponseBodyData struct {
	CurrentPage *int32                                `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	Items       []*ListInstancesResponseBodyDataItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	PageSize    *int32                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListInstancesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListInstancesResponseBodyData) SetCurrentPage(v int32) *ListInstancesResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *ListInstancesResponseBodyData) SetItems(v []*ListInstancesResponseBodyDataItems) *ListInstancesResponseBodyData {
	s.Items = v
	return s
}

func (s *ListInstancesResponseBodyData) SetPageSize(v int32) *ListInstancesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListInstancesResponseBodyData) SetTotalCount(v int32) *ListInstancesResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListInstancesResponseBodyDataItems struct {
	AcuUsed      *int32                                          `json:"AcuUsed,omitempty" xml:"AcuUsed,omitempty"`
	Algorithms   []*ListInstancesResponseBodyDataItemsAlgorithms `json:"Algorithms,omitempty" xml:"Algorithms,omitempty" type:"Repeated"`
	CreateTime   *int64                                          `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DeviceNumber *int32                                          `json:"DeviceNumber,omitempty" xml:"DeviceNumber,omitempty"`
	InstanceId   *string                                         `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName *string                                         `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	Status       *string                                         `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListInstancesResponseBodyDataItems) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesResponseBodyDataItems) GoString() string {
	return s.String()
}

func (s *ListInstancesResponseBodyDataItems) SetAcuUsed(v int32) *ListInstancesResponseBodyDataItems {
	s.AcuUsed = &v
	return s
}

func (s *ListInstancesResponseBodyDataItems) SetAlgorithms(v []*ListInstancesResponseBodyDataItemsAlgorithms) *ListInstancesResponseBodyDataItems {
	s.Algorithms = v
	return s
}

func (s *ListInstancesResponseBodyDataItems) SetCreateTime(v int64) *ListInstancesResponseBodyDataItems {
	s.CreateTime = &v
	return s
}

func (s *ListInstancesResponseBodyDataItems) SetDeviceNumber(v int32) *ListInstancesResponseBodyDataItems {
	s.DeviceNumber = &v
	return s
}

func (s *ListInstancesResponseBodyDataItems) SetInstanceId(v string) *ListInstancesResponseBodyDataItems {
	s.InstanceId = &v
	return s
}

func (s *ListInstancesResponseBodyDataItems) SetInstanceName(v string) *ListInstancesResponseBodyDataItems {
	s.InstanceName = &v
	return s
}

func (s *ListInstancesResponseBodyDataItems) SetStatus(v string) *ListInstancesResponseBodyDataItems {
	s.Status = &v
	return s
}

type ListInstancesResponseBodyDataItemsAlgorithms struct {
	AlgorithmId   *string `json:"AlgorithmId,omitempty" xml:"AlgorithmId,omitempty"`
	AlgorithmName *string `json:"AlgorithmName,omitempty" xml:"AlgorithmName,omitempty"`
}

func (s ListInstancesResponseBodyDataItemsAlgorithms) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesResponseBodyDataItemsAlgorithms) GoString() string {
	return s.String()
}

func (s *ListInstancesResponseBodyDataItemsAlgorithms) SetAlgorithmId(v string) *ListInstancesResponseBodyDataItemsAlgorithms {
	s.AlgorithmId = &v
	return s
}

func (s *ListInstancesResponseBodyDataItemsAlgorithms) SetAlgorithmName(v string) *ListInstancesResponseBodyDataItemsAlgorithms {
	s.AlgorithmName = &v
	return s
}

type ListInstancesResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesResponse) GoString() string {
	return s.String()
}

func (s *ListInstancesResponse) SetHeaders(v map[string]*string) *ListInstancesResponse {
	s.Headers = v
	return s
}

func (s *ListInstancesResponse) SetBody(v *ListInstancesResponseBody) *ListInstancesResponse {
	s.Body = v
	return s
}

type ListMetricsRequest struct {
	AggregateType *string `json:"AggregateType,omitempty" xml:"AggregateType,omitempty"`
	CorpId        *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageNumber    *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TagCode       *string `json:"TagCode,omitempty" xml:"TagCode,omitempty"`
}

func (s ListMetricsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMetricsRequest) GoString() string {
	return s.String()
}

func (s *ListMetricsRequest) SetAggregateType(v string) *ListMetricsRequest {
	s.AggregateType = &v
	return s
}

func (s *ListMetricsRequest) SetCorpId(v string) *ListMetricsRequest {
	s.CorpId = &v
	return s
}

func (s *ListMetricsRequest) SetEndTime(v string) *ListMetricsRequest {
	s.EndTime = &v
	return s
}

func (s *ListMetricsRequest) SetPageNumber(v string) *ListMetricsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListMetricsRequest) SetPageSize(v string) *ListMetricsRequest {
	s.PageSize = &v
	return s
}

func (s *ListMetricsRequest) SetStartTime(v string) *ListMetricsRequest {
	s.StartTime = &v
	return s
}

func (s *ListMetricsRequest) SetTagCode(v string) *ListMetricsRequest {
	s.TagCode = &v
	return s
}

type ListMetricsResponseBody struct {
	Code      *string                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *ListMetricsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                      `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListMetricsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMetricsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMetricsResponseBody) SetCode(v string) *ListMetricsResponseBody {
	s.Code = &v
	return s
}

func (s *ListMetricsResponseBody) SetData(v *ListMetricsResponseBodyData) *ListMetricsResponseBody {
	s.Data = v
	return s
}

func (s *ListMetricsResponseBody) SetMessage(v string) *ListMetricsResponseBody {
	s.Message = &v
	return s
}

func (s *ListMetricsResponseBody) SetRequestId(v string) *ListMetricsResponseBody {
	s.RequestId = &v
	return s
}

type ListMetricsResponseBodyData struct {
	PageNumber *int32                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*ListMetricsResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int32                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	TotalPage  *int32                                `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s ListMetricsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListMetricsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListMetricsResponseBodyData) SetPageNumber(v int32) *ListMetricsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListMetricsResponseBodyData) SetPageSize(v int32) *ListMetricsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListMetricsResponseBodyData) SetRecords(v []*ListMetricsResponseBodyDataRecords) *ListMetricsResponseBodyData {
	s.Records = v
	return s
}

func (s *ListMetricsResponseBodyData) SetTotalCount(v int32) *ListMetricsResponseBodyData {
	s.TotalCount = &v
	return s
}

func (s *ListMetricsResponseBodyData) SetTotalPage(v int32) *ListMetricsResponseBodyData {
	s.TotalPage = &v
	return s
}

type ListMetricsResponseBodyDataRecords struct {
	DateTime  *string `json:"DateTime,omitempty" xml:"DateTime,omitempty"`
	TagCode   *string `json:"TagCode,omitempty" xml:"TagCode,omitempty"`
	TagMetric *string `json:"TagMetric,omitempty" xml:"TagMetric,omitempty"`
	TagValue  *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s ListMetricsResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s ListMetricsResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *ListMetricsResponseBodyDataRecords) SetDateTime(v string) *ListMetricsResponseBodyDataRecords {
	s.DateTime = &v
	return s
}

func (s *ListMetricsResponseBodyDataRecords) SetTagCode(v string) *ListMetricsResponseBodyDataRecords {
	s.TagCode = &v
	return s
}

func (s *ListMetricsResponseBodyDataRecords) SetTagMetric(v string) *ListMetricsResponseBodyDataRecords {
	s.TagMetric = &v
	return s
}

func (s *ListMetricsResponseBodyDataRecords) SetTagValue(v string) *ListMetricsResponseBodyDataRecords {
	s.TagValue = &v
	return s
}

type ListMetricsResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListMetricsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMetricsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMetricsResponse) GoString() string {
	return s.String()
}

func (s *ListMetricsResponse) SetHeaders(v map[string]*string) *ListMetricsResponse {
	s.Headers = v
	return s
}

func (s *ListMetricsResponse) SetBody(v *ListMetricsResponseBody) *ListMetricsResponse {
	s.Body = v
	return s
}

type ListMotorAlgorithmResultsRequest struct {
	AlgorithmType *string `json:"AlgorithmType,omitempty" xml:"AlgorithmType,omitempty"`
	CorpId        *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DataSourceId  *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageNumber    *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PlateNumber   *string `json:"PlateNumber,omitempty" xml:"PlateNumber,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListMotorAlgorithmResultsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMotorAlgorithmResultsRequest) GoString() string {
	return s.String()
}

func (s *ListMotorAlgorithmResultsRequest) SetAlgorithmType(v string) *ListMotorAlgorithmResultsRequest {
	s.AlgorithmType = &v
	return s
}

func (s *ListMotorAlgorithmResultsRequest) SetCorpId(v string) *ListMotorAlgorithmResultsRequest {
	s.CorpId = &v
	return s
}

func (s *ListMotorAlgorithmResultsRequest) SetDataSourceId(v string) *ListMotorAlgorithmResultsRequest {
	s.DataSourceId = &v
	return s
}

func (s *ListMotorAlgorithmResultsRequest) SetEndTime(v string) *ListMotorAlgorithmResultsRequest {
	s.EndTime = &v
	return s
}

func (s *ListMotorAlgorithmResultsRequest) SetPageNumber(v string) *ListMotorAlgorithmResultsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListMotorAlgorithmResultsRequest) SetPageSize(v string) *ListMotorAlgorithmResultsRequest {
	s.PageSize = &v
	return s
}

func (s *ListMotorAlgorithmResultsRequest) SetPlateNumber(v string) *ListMotorAlgorithmResultsRequest {
	s.PlateNumber = &v
	return s
}

func (s *ListMotorAlgorithmResultsRequest) SetStartTime(v string) *ListMotorAlgorithmResultsRequest {
	s.StartTime = &v
	return s
}

type ListMotorAlgorithmResultsResponseBody struct {
	Code      *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *ListMotorAlgorithmResultsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                                    `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListMotorAlgorithmResultsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMotorAlgorithmResultsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMotorAlgorithmResultsResponseBody) SetCode(v string) *ListMotorAlgorithmResultsResponseBody {
	s.Code = &v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBody) SetData(v *ListMotorAlgorithmResultsResponseBodyData) *ListMotorAlgorithmResultsResponseBody {
	s.Data = v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBody) SetMessage(v string) *ListMotorAlgorithmResultsResponseBody {
	s.Message = &v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBody) SetRequestId(v string) *ListMotorAlgorithmResultsResponseBody {
	s.RequestId = &v
	return s
}

type ListMotorAlgorithmResultsResponseBodyData struct {
	PageNumber *int32                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*ListMotorAlgorithmResultsResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int32                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	TotalPage  *int32                                              `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s ListMotorAlgorithmResultsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListMotorAlgorithmResultsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListMotorAlgorithmResultsResponseBodyData) SetPageNumber(v int32) *ListMotorAlgorithmResultsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBodyData) SetPageSize(v int32) *ListMotorAlgorithmResultsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBodyData) SetRecords(v []*ListMotorAlgorithmResultsResponseBodyDataRecords) *ListMotorAlgorithmResultsResponseBodyData {
	s.Records = v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBodyData) SetTotalCount(v int32) *ListMotorAlgorithmResultsResponseBodyData {
	s.TotalCount = &v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBodyData) SetTotalPage(v int32) *ListMotorAlgorithmResultsResponseBodyData {
	s.TotalPage = &v
	return s
}

type ListMotorAlgorithmResultsResponseBodyDataRecords struct {
	Calling          *string  `json:"Calling,omitempty" xml:"Calling,omitempty"`
	CorpId           *string  `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DataSourceId     *string  `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	LeftTopX         *float32 `json:"LeftTopX,omitempty" xml:"LeftTopX,omitempty"`
	LeftTopY         *float32 `json:"LeftTopY,omitempty" xml:"LeftTopY,omitempty"`
	MotorBrand       *string  `json:"MotorBrand,omitempty" xml:"MotorBrand,omitempty"`
	MotorClass       *string  `json:"MotorClass,omitempty" xml:"MotorClass,omitempty"`
	MotorColor       *string  `json:"MotorColor,omitempty" xml:"MotorColor,omitempty"`
	MotorId          *string  `json:"MotorId,omitempty" xml:"MotorId,omitempty"`
	MotorModel       *string  `json:"MotorModel,omitempty" xml:"MotorModel,omitempty"`
	MotorStyle       *string  `json:"MotorStyle,omitempty" xml:"MotorStyle,omitempty"`
	PicUrlPath       *string  `json:"PicUrlPath,omitempty" xml:"PicUrlPath,omitempty"`
	PlateClass       *string  `json:"PlateClass,omitempty" xml:"PlateClass,omitempty"`
	PlateColor       *string  `json:"PlateColor,omitempty" xml:"PlateColor,omitempty"`
	PlateNumber      *string  `json:"PlateNumber,omitempty" xml:"PlateNumber,omitempty"`
	RightBottomX     *float32 `json:"RightBottomX,omitempty" xml:"RightBottomX,omitempty"`
	RightBottomY     *float32 `json:"RightBottomY,omitempty" xml:"RightBottomY,omitempty"`
	SafetyBelt       *string  `json:"SafetyBelt,omitempty" xml:"SafetyBelt,omitempty"`
	ShotTime         *string  `json:"ShotTime,omitempty" xml:"ShotTime,omitempty"`
	SourceId         *string  `json:"SourceId,omitempty" xml:"SourceId,omitempty"`
	TargetPicUrlPath *string  `json:"TargetPicUrlPath,omitempty" xml:"TargetPicUrlPath,omitempty"`
}

func (s ListMotorAlgorithmResultsResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s ListMotorAlgorithmResultsResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *ListMotorAlgorithmResultsResponseBodyDataRecords) SetCalling(v string) *ListMotorAlgorithmResultsResponseBodyDataRecords {
	s.Calling = &v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBodyDataRecords) SetCorpId(v string) *ListMotorAlgorithmResultsResponseBodyDataRecords {
	s.CorpId = &v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBodyDataRecords) SetDataSourceId(v string) *ListMotorAlgorithmResultsResponseBodyDataRecords {
	s.DataSourceId = &v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBodyDataRecords) SetLeftTopX(v float32) *ListMotorAlgorithmResultsResponseBodyDataRecords {
	s.LeftTopX = &v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBodyDataRecords) SetLeftTopY(v float32) *ListMotorAlgorithmResultsResponseBodyDataRecords {
	s.LeftTopY = &v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBodyDataRecords) SetMotorBrand(v string) *ListMotorAlgorithmResultsResponseBodyDataRecords {
	s.MotorBrand = &v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBodyDataRecords) SetMotorClass(v string) *ListMotorAlgorithmResultsResponseBodyDataRecords {
	s.MotorClass = &v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBodyDataRecords) SetMotorColor(v string) *ListMotorAlgorithmResultsResponseBodyDataRecords {
	s.MotorColor = &v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBodyDataRecords) SetMotorId(v string) *ListMotorAlgorithmResultsResponseBodyDataRecords {
	s.MotorId = &v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBodyDataRecords) SetMotorModel(v string) *ListMotorAlgorithmResultsResponseBodyDataRecords {
	s.MotorModel = &v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBodyDataRecords) SetMotorStyle(v string) *ListMotorAlgorithmResultsResponseBodyDataRecords {
	s.MotorStyle = &v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBodyDataRecords) SetPicUrlPath(v string) *ListMotorAlgorithmResultsResponseBodyDataRecords {
	s.PicUrlPath = &v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBodyDataRecords) SetPlateClass(v string) *ListMotorAlgorithmResultsResponseBodyDataRecords {
	s.PlateClass = &v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBodyDataRecords) SetPlateColor(v string) *ListMotorAlgorithmResultsResponseBodyDataRecords {
	s.PlateColor = &v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBodyDataRecords) SetPlateNumber(v string) *ListMotorAlgorithmResultsResponseBodyDataRecords {
	s.PlateNumber = &v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBodyDataRecords) SetRightBottomX(v float32) *ListMotorAlgorithmResultsResponseBodyDataRecords {
	s.RightBottomX = &v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBodyDataRecords) SetRightBottomY(v float32) *ListMotorAlgorithmResultsResponseBodyDataRecords {
	s.RightBottomY = &v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBodyDataRecords) SetSafetyBelt(v string) *ListMotorAlgorithmResultsResponseBodyDataRecords {
	s.SafetyBelt = &v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBodyDataRecords) SetShotTime(v string) *ListMotorAlgorithmResultsResponseBodyDataRecords {
	s.ShotTime = &v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBodyDataRecords) SetSourceId(v string) *ListMotorAlgorithmResultsResponseBodyDataRecords {
	s.SourceId = &v
	return s
}

func (s *ListMotorAlgorithmResultsResponseBodyDataRecords) SetTargetPicUrlPath(v string) *ListMotorAlgorithmResultsResponseBodyDataRecords {
	s.TargetPicUrlPath = &v
	return s
}

type ListMotorAlgorithmResultsResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListMotorAlgorithmResultsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMotorAlgorithmResultsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMotorAlgorithmResultsResponse) GoString() string {
	return s.String()
}

func (s *ListMotorAlgorithmResultsResponse) SetHeaders(v map[string]*string) *ListMotorAlgorithmResultsResponse {
	s.Headers = v
	return s
}

func (s *ListMotorAlgorithmResultsResponse) SetBody(v *ListMotorAlgorithmResultsResponseBody) *ListMotorAlgorithmResultsResponse {
	s.Body = v
	return s
}

type ListNVRChannelDeviceRequest struct {
	DeviceCode *string `json:"DeviceCode,omitempty" xml:"DeviceCode,omitempty"`
	IsPage     *string `json:"IsPage,omitempty" xml:"IsPage,omitempty"`
	PageNum    *string `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize   *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListNVRChannelDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListNVRChannelDeviceRequest) GoString() string {
	return s.String()
}

func (s *ListNVRChannelDeviceRequest) SetDeviceCode(v string) *ListNVRChannelDeviceRequest {
	s.DeviceCode = &v
	return s
}

func (s *ListNVRChannelDeviceRequest) SetIsPage(v string) *ListNVRChannelDeviceRequest {
	s.IsPage = &v
	return s
}

func (s *ListNVRChannelDeviceRequest) SetPageNum(v string) *ListNVRChannelDeviceRequest {
	s.PageNum = &v
	return s
}

func (s *ListNVRChannelDeviceRequest) SetPageSize(v string) *ListNVRChannelDeviceRequest {
	s.PageSize = &v
	return s
}

type ListNVRChannelDeviceResponseBody struct {
	Data    []*ListNVRChannelDeviceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message *string                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Total     *string `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListNVRChannelDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListNVRChannelDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *ListNVRChannelDeviceResponseBody) SetData(v []*ListNVRChannelDeviceResponseBodyData) *ListNVRChannelDeviceResponseBody {
	s.Data = v
	return s
}

func (s *ListNVRChannelDeviceResponseBody) SetMessage(v string) *ListNVRChannelDeviceResponseBody {
	s.Message = &v
	return s
}

func (s *ListNVRChannelDeviceResponseBody) SetRequestId(v string) *ListNVRChannelDeviceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListNVRChannelDeviceResponseBody) SetSuccess(v bool) *ListNVRChannelDeviceResponseBody {
	s.Success = &v
	return s
}

func (s *ListNVRChannelDeviceResponseBody) SetTotal(v string) *ListNVRChannelDeviceResponseBody {
	s.Total = &v
	return s
}

type ListNVRChannelDeviceResponseBodyData struct {
	ComptureStatus *string `json:"ComptureStatus,omitempty" xml:"ComptureStatus,omitempty"`
	CorpId         *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DatasourceType *string `json:"DatasourceType,omitempty" xml:"DatasourceType,omitempty"`
	DeviceCode     *string `json:"DeviceCode,omitempty" xml:"DeviceCode,omitempty"`
	DeviceName     *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DeviceSn       *string `json:"DeviceSn,omitempty" xml:"DeviceSn,omitempty"`
	DeviceStatus   *string `json:"DeviceStatus,omitempty" xml:"DeviceStatus,omitempty"`
	DeviceType     *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	ProjectName    *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	RegionName     *string `json:"RegionName,omitempty" xml:"RegionName,omitempty"`
	SampleName     *string `json:"SampleName,omitempty" xml:"SampleName,omitempty"`
	StreamStatus   *string `json:"StreamStatus,omitempty" xml:"StreamStatus,omitempty"`
	Vap            *string `json:"Vap,omitempty" xml:"Vap,omitempty"`
}

func (s ListNVRChannelDeviceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListNVRChannelDeviceResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListNVRChannelDeviceResponseBodyData) SetComptureStatus(v string) *ListNVRChannelDeviceResponseBodyData {
	s.ComptureStatus = &v
	return s
}

func (s *ListNVRChannelDeviceResponseBodyData) SetCorpId(v string) *ListNVRChannelDeviceResponseBodyData {
	s.CorpId = &v
	return s
}

func (s *ListNVRChannelDeviceResponseBodyData) SetDatasourceType(v string) *ListNVRChannelDeviceResponseBodyData {
	s.DatasourceType = &v
	return s
}

func (s *ListNVRChannelDeviceResponseBodyData) SetDeviceCode(v string) *ListNVRChannelDeviceResponseBodyData {
	s.DeviceCode = &v
	return s
}

func (s *ListNVRChannelDeviceResponseBodyData) SetDeviceName(v string) *ListNVRChannelDeviceResponseBodyData {
	s.DeviceName = &v
	return s
}

func (s *ListNVRChannelDeviceResponseBodyData) SetDeviceSn(v string) *ListNVRChannelDeviceResponseBodyData {
	s.DeviceSn = &v
	return s
}

func (s *ListNVRChannelDeviceResponseBodyData) SetDeviceStatus(v string) *ListNVRChannelDeviceResponseBodyData {
	s.DeviceStatus = &v
	return s
}

func (s *ListNVRChannelDeviceResponseBodyData) SetDeviceType(v string) *ListNVRChannelDeviceResponseBodyData {
	s.DeviceType = &v
	return s
}

func (s *ListNVRChannelDeviceResponseBodyData) SetProjectName(v string) *ListNVRChannelDeviceResponseBodyData {
	s.ProjectName = &v
	return s
}

func (s *ListNVRChannelDeviceResponseBodyData) SetRegionName(v string) *ListNVRChannelDeviceResponseBodyData {
	s.RegionName = &v
	return s
}

func (s *ListNVRChannelDeviceResponseBodyData) SetSampleName(v string) *ListNVRChannelDeviceResponseBodyData {
	s.SampleName = &v
	return s
}

func (s *ListNVRChannelDeviceResponseBodyData) SetStreamStatus(v string) *ListNVRChannelDeviceResponseBodyData {
	s.StreamStatus = &v
	return s
}

func (s *ListNVRChannelDeviceResponseBodyData) SetVap(v string) *ListNVRChannelDeviceResponseBodyData {
	s.Vap = &v
	return s
}

type ListNVRChannelDeviceResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListNVRChannelDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListNVRChannelDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListNVRChannelDeviceResponse) GoString() string {
	return s.String()
}

func (s *ListNVRChannelDeviceResponse) SetHeaders(v map[string]*string) *ListNVRChannelDeviceResponse {
	s.Headers = v
	return s
}

func (s *ListNVRChannelDeviceResponse) SetBody(v *ListNVRChannelDeviceResponseBody) *ListNVRChannelDeviceResponse {
	s.Body = v
	return s
}

type ListNVRDeviceRequest struct {
	CorpIdList *string `json:"CorpIdList,omitempty" xml:"CorpIdList,omitempty"`
	DeviceCode *string `json:"DeviceCode,omitempty" xml:"DeviceCode,omitempty"`
	IsPage     *int64  `json:"IsPage,omitempty" xml:"IsPage,omitempty"`
	PageNum    *int64  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize   *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListNVRDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListNVRDeviceRequest) GoString() string {
	return s.String()
}

func (s *ListNVRDeviceRequest) SetCorpIdList(v string) *ListNVRDeviceRequest {
	s.CorpIdList = &v
	return s
}

func (s *ListNVRDeviceRequest) SetDeviceCode(v string) *ListNVRDeviceRequest {
	s.DeviceCode = &v
	return s
}

func (s *ListNVRDeviceRequest) SetIsPage(v int64) *ListNVRDeviceRequest {
	s.IsPage = &v
	return s
}

func (s *ListNVRDeviceRequest) SetPageNum(v int64) *ListNVRDeviceRequest {
	s.PageNum = &v
	return s
}

func (s *ListNVRDeviceRequest) SetPageSize(v int64) *ListNVRDeviceRequest {
	s.PageSize = &v
	return s
}

type ListNVRDeviceResponseBody struct {
	Data []*ListNVRDeviceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Total     *string `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListNVRDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListNVRDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *ListNVRDeviceResponseBody) SetData(v []*ListNVRDeviceResponseBodyData) *ListNVRDeviceResponseBody {
	s.Data = v
	return s
}

func (s *ListNVRDeviceResponseBody) SetRequestId(v string) *ListNVRDeviceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListNVRDeviceResponseBody) SetSuccess(v bool) *ListNVRDeviceResponseBody {
	s.Success = &v
	return s
}

func (s *ListNVRDeviceResponseBody) SetTotal(v string) *ListNVRDeviceResponseBody {
	s.Total = &v
	return s
}

type ListNVRDeviceResponseBodyData struct {
	AccessQuota      *string `json:"AccessQuota,omitempty" xml:"AccessQuota,omitempty"`
	Channel          *string `json:"Channel,omitempty" xml:"Channel,omitempty"`
	ComptureStatus   *string `json:"ComptureStatus,omitempty" xml:"ComptureStatus,omitempty"`
	CorpId           *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DatasourceType   *string `json:"DatasourceType,omitempty" xml:"DatasourceType,omitempty"`
	DeviceCode       *string `json:"DeviceCode,omitempty" xml:"DeviceCode,omitempty"`
	DeviceName       *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DeviceSn         *string `json:"DeviceSn,omitempty" xml:"DeviceSn,omitempty"`
	DeviceStatus     *string `json:"DeviceStatus,omitempty" xml:"DeviceStatus,omitempty"`
	DeviceType       *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	ProjectName      *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	RegionName       *string `json:"RegionName,omitempty" xml:"RegionName,omitempty"`
	RegistrationTime *string `json:"RegistrationTime,omitempty" xml:"RegistrationTime,omitempty"`
	StreamStatus     *string `json:"StreamStatus,omitempty" xml:"StreamStatus,omitempty"`
	Type             *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListNVRDeviceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListNVRDeviceResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListNVRDeviceResponseBodyData) SetAccessQuota(v string) *ListNVRDeviceResponseBodyData {
	s.AccessQuota = &v
	return s
}

func (s *ListNVRDeviceResponseBodyData) SetChannel(v string) *ListNVRDeviceResponseBodyData {
	s.Channel = &v
	return s
}

func (s *ListNVRDeviceResponseBodyData) SetComptureStatus(v string) *ListNVRDeviceResponseBodyData {
	s.ComptureStatus = &v
	return s
}

func (s *ListNVRDeviceResponseBodyData) SetCorpId(v string) *ListNVRDeviceResponseBodyData {
	s.CorpId = &v
	return s
}

func (s *ListNVRDeviceResponseBodyData) SetDatasourceType(v string) *ListNVRDeviceResponseBodyData {
	s.DatasourceType = &v
	return s
}

func (s *ListNVRDeviceResponseBodyData) SetDeviceCode(v string) *ListNVRDeviceResponseBodyData {
	s.DeviceCode = &v
	return s
}

func (s *ListNVRDeviceResponseBodyData) SetDeviceName(v string) *ListNVRDeviceResponseBodyData {
	s.DeviceName = &v
	return s
}

func (s *ListNVRDeviceResponseBodyData) SetDeviceSn(v string) *ListNVRDeviceResponseBodyData {
	s.DeviceSn = &v
	return s
}

func (s *ListNVRDeviceResponseBodyData) SetDeviceStatus(v string) *ListNVRDeviceResponseBodyData {
	s.DeviceStatus = &v
	return s
}

func (s *ListNVRDeviceResponseBodyData) SetDeviceType(v string) *ListNVRDeviceResponseBodyData {
	s.DeviceType = &v
	return s
}

func (s *ListNVRDeviceResponseBodyData) SetProjectName(v string) *ListNVRDeviceResponseBodyData {
	s.ProjectName = &v
	return s
}

func (s *ListNVRDeviceResponseBodyData) SetRegionName(v string) *ListNVRDeviceResponseBodyData {
	s.RegionName = &v
	return s
}

func (s *ListNVRDeviceResponseBodyData) SetRegistrationTime(v string) *ListNVRDeviceResponseBodyData {
	s.RegistrationTime = &v
	return s
}

func (s *ListNVRDeviceResponseBodyData) SetStreamStatus(v string) *ListNVRDeviceResponseBodyData {
	s.StreamStatus = &v
	return s
}

func (s *ListNVRDeviceResponseBodyData) SetType(v string) *ListNVRDeviceResponseBodyData {
	s.Type = &v
	return s
}

type ListNVRDeviceResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListNVRDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListNVRDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListNVRDeviceResponse) GoString() string {
	return s.String()
}

func (s *ListNVRDeviceResponse) SetHeaders(v map[string]*string) *ListNVRDeviceResponse {
	s.Headers = v
	return s
}

func (s *ListNVRDeviceResponse) SetBody(v *ListNVRDeviceResponseBody) *ListNVRDeviceResponse {
	s.Body = v
	return s
}

type ListPersonTraceRequest struct {
	CorpId       *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	GroupId      *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	PageNumber   *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PersonId     *string `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListPersonTraceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPersonTraceRequest) GoString() string {
	return s.String()
}

func (s *ListPersonTraceRequest) SetCorpId(v string) *ListPersonTraceRequest {
	s.CorpId = &v
	return s
}

func (s *ListPersonTraceRequest) SetDataSourceId(v string) *ListPersonTraceRequest {
	s.DataSourceId = &v
	return s
}

func (s *ListPersonTraceRequest) SetEndTime(v string) *ListPersonTraceRequest {
	s.EndTime = &v
	return s
}

func (s *ListPersonTraceRequest) SetGroupId(v string) *ListPersonTraceRequest {
	s.GroupId = &v
	return s
}

func (s *ListPersonTraceRequest) SetPageNumber(v string) *ListPersonTraceRequest {
	s.PageNumber = &v
	return s
}

func (s *ListPersonTraceRequest) SetPageSize(v string) *ListPersonTraceRequest {
	s.PageSize = &v
	return s
}

func (s *ListPersonTraceRequest) SetPersonId(v string) *ListPersonTraceRequest {
	s.PersonId = &v
	return s
}

func (s *ListPersonTraceRequest) SetStartTime(v string) *ListPersonTraceRequest {
	s.StartTime = &v
	return s
}

type ListPersonTraceResponseBody struct {
	Code       *string                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data       []*ListPersonTraceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message    *string                            `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber *int32                             `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                             `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success    *string                            `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount *int32                             `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListPersonTraceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPersonTraceResponseBody) GoString() string {
	return s.String()
}

func (s *ListPersonTraceResponseBody) SetCode(v string) *ListPersonTraceResponseBody {
	s.Code = &v
	return s
}

func (s *ListPersonTraceResponseBody) SetData(v []*ListPersonTraceResponseBodyData) *ListPersonTraceResponseBody {
	s.Data = v
	return s
}

func (s *ListPersonTraceResponseBody) SetMessage(v string) *ListPersonTraceResponseBody {
	s.Message = &v
	return s
}

func (s *ListPersonTraceResponseBody) SetPageNumber(v int32) *ListPersonTraceResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListPersonTraceResponseBody) SetPageSize(v int32) *ListPersonTraceResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListPersonTraceResponseBody) SetRequestId(v string) *ListPersonTraceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPersonTraceResponseBody) SetSuccess(v string) *ListPersonTraceResponseBody {
	s.Success = &v
	return s
}

func (s *ListPersonTraceResponseBody) SetTotalCount(v int32) *ListPersonTraceResponseBody {
	s.TotalCount = &v
	return s
}

type ListPersonTraceResponseBodyData struct {
	CorpId           *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	Date             *string `json:"Date,omitempty" xml:"Date,omitempty"`
	DeviceId         *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	EndSourceImage   *string `json:"EndSourceImage,omitempty" xml:"EndSourceImage,omitempty"`
	EndTargetImage   *string `json:"EndTargetImage,omitempty" xml:"EndTargetImage,omitempty"`
	GroupId          *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	LastTime         *string `json:"LastTime,omitempty" xml:"LastTime,omitempty"`
	PersonId         *string `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	StartSourceImage *string `json:"StartSourceImage,omitempty" xml:"StartSourceImage,omitempty"`
	StartTargetImage *string `json:"StartTargetImage,omitempty" xml:"StartTargetImage,omitempty"`
	StartTime        *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListPersonTraceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListPersonTraceResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListPersonTraceResponseBodyData) SetCorpId(v string) *ListPersonTraceResponseBodyData {
	s.CorpId = &v
	return s
}

func (s *ListPersonTraceResponseBodyData) SetDate(v string) *ListPersonTraceResponseBodyData {
	s.Date = &v
	return s
}

func (s *ListPersonTraceResponseBodyData) SetDeviceId(v string) *ListPersonTraceResponseBodyData {
	s.DeviceId = &v
	return s
}

func (s *ListPersonTraceResponseBodyData) SetEndSourceImage(v string) *ListPersonTraceResponseBodyData {
	s.EndSourceImage = &v
	return s
}

func (s *ListPersonTraceResponseBodyData) SetEndTargetImage(v string) *ListPersonTraceResponseBodyData {
	s.EndTargetImage = &v
	return s
}

func (s *ListPersonTraceResponseBodyData) SetGroupId(v string) *ListPersonTraceResponseBodyData {
	s.GroupId = &v
	return s
}

func (s *ListPersonTraceResponseBodyData) SetLastTime(v string) *ListPersonTraceResponseBodyData {
	s.LastTime = &v
	return s
}

func (s *ListPersonTraceResponseBodyData) SetPersonId(v string) *ListPersonTraceResponseBodyData {
	s.PersonId = &v
	return s
}

func (s *ListPersonTraceResponseBodyData) SetStartSourceImage(v string) *ListPersonTraceResponseBodyData {
	s.StartSourceImage = &v
	return s
}

func (s *ListPersonTraceResponseBodyData) SetStartTargetImage(v string) *ListPersonTraceResponseBodyData {
	s.StartTargetImage = &v
	return s
}

func (s *ListPersonTraceResponseBodyData) SetStartTime(v string) *ListPersonTraceResponseBodyData {
	s.StartTime = &v
	return s
}

type ListPersonTraceResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListPersonTraceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListPersonTraceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPersonTraceResponse) GoString() string {
	return s.String()
}

func (s *ListPersonTraceResponse) SetHeaders(v map[string]*string) *ListPersonTraceResponse {
	s.Headers = v
	return s
}

func (s *ListPersonTraceResponse) SetBody(v *ListPersonTraceResponseBody) *ListPersonTraceResponse {
	s.Body = v
	return s
}

type ListPersonTraceDetailsRequest struct {
	CorpId       *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageNumber   *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PersonId     *string `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	SubId        *string `json:"SubId,omitempty" xml:"SubId,omitempty"`
}

func (s ListPersonTraceDetailsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPersonTraceDetailsRequest) GoString() string {
	return s.String()
}

func (s *ListPersonTraceDetailsRequest) SetCorpId(v string) *ListPersonTraceDetailsRequest {
	s.CorpId = &v
	return s
}

func (s *ListPersonTraceDetailsRequest) SetDataSourceId(v string) *ListPersonTraceDetailsRequest {
	s.DataSourceId = &v
	return s
}

func (s *ListPersonTraceDetailsRequest) SetEndTime(v string) *ListPersonTraceDetailsRequest {
	s.EndTime = &v
	return s
}

func (s *ListPersonTraceDetailsRequest) SetPageNumber(v int64) *ListPersonTraceDetailsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListPersonTraceDetailsRequest) SetPageSize(v int64) *ListPersonTraceDetailsRequest {
	s.PageSize = &v
	return s
}

func (s *ListPersonTraceDetailsRequest) SetPersonId(v string) *ListPersonTraceDetailsRequest {
	s.PersonId = &v
	return s
}

func (s *ListPersonTraceDetailsRequest) SetStartTime(v string) *ListPersonTraceDetailsRequest {
	s.StartTime = &v
	return s
}

func (s *ListPersonTraceDetailsRequest) SetSubId(v string) *ListPersonTraceDetailsRequest {
	s.SubId = &v
	return s
}

type ListPersonTraceDetailsResponseBody struct {
	Code       *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data       []*ListPersonTraceDetailsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message    *string                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber *int64                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int64                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int64                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListPersonTraceDetailsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPersonTraceDetailsResponseBody) GoString() string {
	return s.String()
}

func (s *ListPersonTraceDetailsResponseBody) SetCode(v string) *ListPersonTraceDetailsResponseBody {
	s.Code = &v
	return s
}

func (s *ListPersonTraceDetailsResponseBody) SetData(v []*ListPersonTraceDetailsResponseBodyData) *ListPersonTraceDetailsResponseBody {
	s.Data = v
	return s
}

func (s *ListPersonTraceDetailsResponseBody) SetMessage(v string) *ListPersonTraceDetailsResponseBody {
	s.Message = &v
	return s
}

func (s *ListPersonTraceDetailsResponseBody) SetPageNumber(v int64) *ListPersonTraceDetailsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListPersonTraceDetailsResponseBody) SetPageSize(v int64) *ListPersonTraceDetailsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListPersonTraceDetailsResponseBody) SetRequestId(v string) *ListPersonTraceDetailsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPersonTraceDetailsResponseBody) SetTotalCount(v int64) *ListPersonTraceDetailsResponseBody {
	s.TotalCount = &v
	return s
}

type ListPersonTraceDetailsResponseBodyData struct {
	CorpId           *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DataSourceId     *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	LeftTopX         *string `json:"LeftTopX,omitempty" xml:"LeftTopX,omitempty"`
	LeftTopY         *string `json:"LeftTopY,omitempty" xml:"LeftTopY,omitempty"`
	PersonId         *string `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	PicUrlPath       *string `json:"PicUrlPath,omitempty" xml:"PicUrlPath,omitempty"`
	RightBottomX     *string `json:"RightBottomX,omitempty" xml:"RightBottomX,omitempty"`
	RightBottomY     *string `json:"RightBottomY,omitempty" xml:"RightBottomY,omitempty"`
	ShotTime         *string `json:"ShotTime,omitempty" xml:"ShotTime,omitempty"`
	SubId            *string `json:"SubId,omitempty" xml:"SubId,omitempty"`
	TargetPicUrlPath *string `json:"TargetPicUrlPath,omitempty" xml:"TargetPicUrlPath,omitempty"`
}

func (s ListPersonTraceDetailsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListPersonTraceDetailsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListPersonTraceDetailsResponseBodyData) SetCorpId(v string) *ListPersonTraceDetailsResponseBodyData {
	s.CorpId = &v
	return s
}

func (s *ListPersonTraceDetailsResponseBodyData) SetDataSourceId(v string) *ListPersonTraceDetailsResponseBodyData {
	s.DataSourceId = &v
	return s
}

func (s *ListPersonTraceDetailsResponseBodyData) SetLeftTopX(v string) *ListPersonTraceDetailsResponseBodyData {
	s.LeftTopX = &v
	return s
}

func (s *ListPersonTraceDetailsResponseBodyData) SetLeftTopY(v string) *ListPersonTraceDetailsResponseBodyData {
	s.LeftTopY = &v
	return s
}

func (s *ListPersonTraceDetailsResponseBodyData) SetPersonId(v string) *ListPersonTraceDetailsResponseBodyData {
	s.PersonId = &v
	return s
}

func (s *ListPersonTraceDetailsResponseBodyData) SetPicUrlPath(v string) *ListPersonTraceDetailsResponseBodyData {
	s.PicUrlPath = &v
	return s
}

func (s *ListPersonTraceDetailsResponseBodyData) SetRightBottomX(v string) *ListPersonTraceDetailsResponseBodyData {
	s.RightBottomX = &v
	return s
}

func (s *ListPersonTraceDetailsResponseBodyData) SetRightBottomY(v string) *ListPersonTraceDetailsResponseBodyData {
	s.RightBottomY = &v
	return s
}

func (s *ListPersonTraceDetailsResponseBodyData) SetShotTime(v string) *ListPersonTraceDetailsResponseBodyData {
	s.ShotTime = &v
	return s
}

func (s *ListPersonTraceDetailsResponseBodyData) SetSubId(v string) *ListPersonTraceDetailsResponseBodyData {
	s.SubId = &v
	return s
}

func (s *ListPersonTraceDetailsResponseBodyData) SetTargetPicUrlPath(v string) *ListPersonTraceDetailsResponseBodyData {
	s.TargetPicUrlPath = &v
	return s
}

type ListPersonTraceDetailsResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListPersonTraceDetailsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListPersonTraceDetailsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPersonTraceDetailsResponse) GoString() string {
	return s.String()
}

func (s *ListPersonTraceDetailsResponse) SetHeaders(v map[string]*string) *ListPersonTraceDetailsResponse {
	s.Headers = v
	return s
}

func (s *ListPersonTraceDetailsResponse) SetBody(v *ListPersonTraceDetailsResponseBody) *ListPersonTraceDetailsResponse {
	s.Body = v
	return s
}

type ListPersonVisitCountRequest struct {
	AggregateType     *string `json:"AggregateType,omitempty" xml:"AggregateType,omitempty"`
	CorpId            *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	CountType         *string `json:"CountType,omitempty" xml:"CountType,omitempty"`
	EndTime           *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	MaxVal            *int32  `json:"MaxVal,omitempty" xml:"MaxVal,omitempty"`
	MinVal            *int32  `json:"MinVal,omitempty" xml:"MinVal,omitempty"`
	PageNumber        *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTime         *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TagCode           *string `json:"TagCode,omitempty" xml:"TagCode,omitempty"`
	TimeAggregateType *string `json:"TimeAggregateType,omitempty" xml:"TimeAggregateType,omitempty"`
}

func (s ListPersonVisitCountRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPersonVisitCountRequest) GoString() string {
	return s.String()
}

func (s *ListPersonVisitCountRequest) SetAggregateType(v string) *ListPersonVisitCountRequest {
	s.AggregateType = &v
	return s
}

func (s *ListPersonVisitCountRequest) SetCorpId(v string) *ListPersonVisitCountRequest {
	s.CorpId = &v
	return s
}

func (s *ListPersonVisitCountRequest) SetCountType(v string) *ListPersonVisitCountRequest {
	s.CountType = &v
	return s
}

func (s *ListPersonVisitCountRequest) SetEndTime(v string) *ListPersonVisitCountRequest {
	s.EndTime = &v
	return s
}

func (s *ListPersonVisitCountRequest) SetMaxVal(v int32) *ListPersonVisitCountRequest {
	s.MaxVal = &v
	return s
}

func (s *ListPersonVisitCountRequest) SetMinVal(v int32) *ListPersonVisitCountRequest {
	s.MinVal = &v
	return s
}

func (s *ListPersonVisitCountRequest) SetPageNumber(v int32) *ListPersonVisitCountRequest {
	s.PageNumber = &v
	return s
}

func (s *ListPersonVisitCountRequest) SetPageSize(v int32) *ListPersonVisitCountRequest {
	s.PageSize = &v
	return s
}

func (s *ListPersonVisitCountRequest) SetStartTime(v string) *ListPersonVisitCountRequest {
	s.StartTime = &v
	return s
}

func (s *ListPersonVisitCountRequest) SetTagCode(v string) *ListPersonVisitCountRequest {
	s.TagCode = &v
	return s
}

func (s *ListPersonVisitCountRequest) SetTimeAggregateType(v string) *ListPersonVisitCountRequest {
	s.TimeAggregateType = &v
	return s
}

type ListPersonVisitCountResponseBody struct {
	Code       *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data       []*ListPersonVisitCountResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message    *string                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNo     *string                                 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize   *string                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success    *string                                 `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount *string                                 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListPersonVisitCountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPersonVisitCountResponseBody) GoString() string {
	return s.String()
}

func (s *ListPersonVisitCountResponseBody) SetCode(v string) *ListPersonVisitCountResponseBody {
	s.Code = &v
	return s
}

func (s *ListPersonVisitCountResponseBody) SetData(v []*ListPersonVisitCountResponseBodyData) *ListPersonVisitCountResponseBody {
	s.Data = v
	return s
}

func (s *ListPersonVisitCountResponseBody) SetMessage(v string) *ListPersonVisitCountResponseBody {
	s.Message = &v
	return s
}

func (s *ListPersonVisitCountResponseBody) SetPageNo(v string) *ListPersonVisitCountResponseBody {
	s.PageNo = &v
	return s
}

func (s *ListPersonVisitCountResponseBody) SetPageSize(v string) *ListPersonVisitCountResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListPersonVisitCountResponseBody) SetRequestId(v string) *ListPersonVisitCountResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPersonVisitCountResponseBody) SetSuccess(v string) *ListPersonVisitCountResponseBody {
	s.Success = &v
	return s
}

func (s *ListPersonVisitCountResponseBody) SetTotalCount(v string) *ListPersonVisitCountResponseBody {
	s.TotalCount = &v
	return s
}

type ListPersonVisitCountResponseBodyData struct {
	CorpId     *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DayId      *string `json:"DayId,omitempty" xml:"DayId,omitempty"`
	DeviceId   *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	GroupId    *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	HourId     *string `json:"HourId,omitempty" xml:"HourId,omitempty"`
	PersonId   *string `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	TagCode    *string `json:"TagCode,omitempty" xml:"TagCode,omitempty"`
	TagMetrics *string `json:"TagMetrics,omitempty" xml:"TagMetrics,omitempty"`
}

func (s ListPersonVisitCountResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListPersonVisitCountResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListPersonVisitCountResponseBodyData) SetCorpId(v string) *ListPersonVisitCountResponseBodyData {
	s.CorpId = &v
	return s
}

func (s *ListPersonVisitCountResponseBodyData) SetDayId(v string) *ListPersonVisitCountResponseBodyData {
	s.DayId = &v
	return s
}

func (s *ListPersonVisitCountResponseBodyData) SetDeviceId(v string) *ListPersonVisitCountResponseBodyData {
	s.DeviceId = &v
	return s
}

func (s *ListPersonVisitCountResponseBodyData) SetGroupId(v string) *ListPersonVisitCountResponseBodyData {
	s.GroupId = &v
	return s
}

func (s *ListPersonVisitCountResponseBodyData) SetHourId(v string) *ListPersonVisitCountResponseBodyData {
	s.HourId = &v
	return s
}

func (s *ListPersonVisitCountResponseBodyData) SetPersonId(v string) *ListPersonVisitCountResponseBodyData {
	s.PersonId = &v
	return s
}

func (s *ListPersonVisitCountResponseBodyData) SetTagCode(v string) *ListPersonVisitCountResponseBodyData {
	s.TagCode = &v
	return s
}

func (s *ListPersonVisitCountResponseBodyData) SetTagMetrics(v string) *ListPersonVisitCountResponseBodyData {
	s.TagMetrics = &v
	return s
}

type ListPersonVisitCountResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListPersonVisitCountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListPersonVisitCountResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPersonVisitCountResponse) GoString() string {
	return s.String()
}

func (s *ListPersonVisitCountResponse) SetHeaders(v map[string]*string) *ListPersonVisitCountResponse {
	s.Headers = v
	return s
}

func (s *ListPersonVisitCountResponse) SetBody(v *ListPersonVisitCountResponseBody) *ListPersonVisitCountResponse {
	s.Body = v
	return s
}

type ListPersonsRequest struct {
	AlgorithmType *string `json:"AlgorithmType,omitempty" xml:"AlgorithmType,omitempty"`
	CorpId        *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageNo        *string `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize      *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListPersonsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPersonsRequest) GoString() string {
	return s.String()
}

func (s *ListPersonsRequest) SetAlgorithmType(v string) *ListPersonsRequest {
	s.AlgorithmType = &v
	return s
}

func (s *ListPersonsRequest) SetCorpId(v string) *ListPersonsRequest {
	s.CorpId = &v
	return s
}

func (s *ListPersonsRequest) SetEndTime(v string) *ListPersonsRequest {
	s.EndTime = &v
	return s
}

func (s *ListPersonsRequest) SetPageNo(v string) *ListPersonsRequest {
	s.PageNo = &v
	return s
}

func (s *ListPersonsRequest) SetPageSize(v string) *ListPersonsRequest {
	s.PageSize = &v
	return s
}

func (s *ListPersonsRequest) SetStartTime(v string) *ListPersonsRequest {
	s.StartTime = &v
	return s
}

type ListPersonsResponseBody struct {
	Code      *string                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *ListPersonsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                      `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListPersonsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPersonsResponseBody) GoString() string {
	return s.String()
}

func (s *ListPersonsResponseBody) SetCode(v string) *ListPersonsResponseBody {
	s.Code = &v
	return s
}

func (s *ListPersonsResponseBody) SetData(v *ListPersonsResponseBodyData) *ListPersonsResponseBody {
	s.Data = v
	return s
}

func (s *ListPersonsResponseBody) SetMessage(v string) *ListPersonsResponseBody {
	s.Message = &v
	return s
}

func (s *ListPersonsResponseBody) SetRequestId(v string) *ListPersonsResponseBody {
	s.RequestId = &v
	return s
}

type ListPersonsResponseBodyData struct {
	PageNo     *string                               `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize   *string                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*ListPersonsResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *string                               `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	TotalPage  *string                               `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s ListPersonsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListPersonsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListPersonsResponseBodyData) SetPageNo(v string) *ListPersonsResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *ListPersonsResponseBodyData) SetPageSize(v string) *ListPersonsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListPersonsResponseBodyData) SetRecords(v []*ListPersonsResponseBodyDataRecords) *ListPersonsResponseBodyData {
	s.Records = v
	return s
}

func (s *ListPersonsResponseBodyData) SetTotalCount(v string) *ListPersonsResponseBodyData {
	s.TotalCount = &v
	return s
}

func (s *ListPersonsResponseBodyData) SetTotalPage(v string) *ListPersonsResponseBodyData {
	s.TotalPage = &v
	return s
}

type ListPersonsResponseBodyDataRecords struct {
	FirstAppearTime *string                                      `json:"FirstAppearTime,omitempty" xml:"FirstAppearTime,omitempty"`
	PersonId        *string                                      `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	PicUrl          *string                                      `json:"PicUrl,omitempty" xml:"PicUrl,omitempty"`
	TagList         []*ListPersonsResponseBodyDataRecordsTagList `json:"TagList,omitempty" xml:"TagList,omitempty" type:"Repeated"`
}

func (s ListPersonsResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s ListPersonsResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *ListPersonsResponseBodyDataRecords) SetFirstAppearTime(v string) *ListPersonsResponseBodyDataRecords {
	s.FirstAppearTime = &v
	return s
}

func (s *ListPersonsResponseBodyDataRecords) SetPersonId(v string) *ListPersonsResponseBodyDataRecords {
	s.PersonId = &v
	return s
}

func (s *ListPersonsResponseBodyDataRecords) SetPicUrl(v string) *ListPersonsResponseBodyDataRecords {
	s.PicUrl = &v
	return s
}

func (s *ListPersonsResponseBodyDataRecords) SetTagList(v []*ListPersonsResponseBodyDataRecordsTagList) *ListPersonsResponseBodyDataRecords {
	s.TagList = v
	return s
}

type ListPersonsResponseBodyDataRecordsTagList struct {
	TagCode    *string `json:"TagCode,omitempty" xml:"TagCode,omitempty"`
	TagName    *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
	TagValue   *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	TagValueId *string `json:"TagValueId,omitempty" xml:"TagValueId,omitempty"`
}

func (s ListPersonsResponseBodyDataRecordsTagList) String() string {
	return tea.Prettify(s)
}

func (s ListPersonsResponseBodyDataRecordsTagList) GoString() string {
	return s.String()
}

func (s *ListPersonsResponseBodyDataRecordsTagList) SetTagCode(v string) *ListPersonsResponseBodyDataRecordsTagList {
	s.TagCode = &v
	return s
}

func (s *ListPersonsResponseBodyDataRecordsTagList) SetTagName(v string) *ListPersonsResponseBodyDataRecordsTagList {
	s.TagName = &v
	return s
}

func (s *ListPersonsResponseBodyDataRecordsTagList) SetTagValue(v string) *ListPersonsResponseBodyDataRecordsTagList {
	s.TagValue = &v
	return s
}

func (s *ListPersonsResponseBodyDataRecordsTagList) SetTagValueId(v string) *ListPersonsResponseBodyDataRecordsTagList {
	s.TagValueId = &v
	return s
}

type ListPersonsResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListPersonsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListPersonsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPersonsResponse) GoString() string {
	return s.String()
}

func (s *ListPersonsResponse) SetHeaders(v map[string]*string) *ListPersonsResponse {
	s.Headers = v
	return s
}

func (s *ListPersonsResponse) SetBody(v *ListPersonsResponseBody) *ListPersonsResponse {
	s.Body = v
	return s
}

type ListUserGroupsRequest struct {
	CorpId   *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	IsvSubId *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
}

func (s ListUserGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUserGroupsRequest) GoString() string {
	return s.String()
}

func (s *ListUserGroupsRequest) SetCorpId(v string) *ListUserGroupsRequest {
	s.CorpId = &v
	return s
}

func (s *ListUserGroupsRequest) SetIsvSubId(v string) *ListUserGroupsRequest {
	s.IsvSubId = &v
	return s
}

type ListUserGroupsResponseBody struct {
	Code      *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []*ListUserGroupsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message   *string                           `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListUserGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListUserGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListUserGroupsResponseBody) SetCode(v string) *ListUserGroupsResponseBody {
	s.Code = &v
	return s
}

func (s *ListUserGroupsResponseBody) SetData(v []*ListUserGroupsResponseBodyData) *ListUserGroupsResponseBody {
	s.Data = v
	return s
}

func (s *ListUserGroupsResponseBody) SetMessage(v string) *ListUserGroupsResponseBody {
	s.Message = &v
	return s
}

func (s *ListUserGroupsResponseBody) SetRequestId(v string) *ListUserGroupsResponseBody {
	s.RequestId = &v
	return s
}

type ListUserGroupsResponseBodyData struct {
	CreateTime        *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Creator           *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	IsvSubId          *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	ParentUserGroupId *int64  `json:"ParentUserGroupId,omitempty" xml:"ParentUserGroupId,omitempty"`
	UpdateTime        *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	UserCount         *int64  `json:"UserCount,omitempty" xml:"UserCount,omitempty"`
	UserGroupId       *int64  `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
	UserGroupName     *string `json:"UserGroupName,omitempty" xml:"UserGroupName,omitempty"`
}

func (s ListUserGroupsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListUserGroupsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListUserGroupsResponseBodyData) SetCreateTime(v string) *ListUserGroupsResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *ListUserGroupsResponseBodyData) SetCreator(v string) *ListUserGroupsResponseBodyData {
	s.Creator = &v
	return s
}

func (s *ListUserGroupsResponseBodyData) SetIsvSubId(v string) *ListUserGroupsResponseBodyData {
	s.IsvSubId = &v
	return s
}

func (s *ListUserGroupsResponseBodyData) SetParentUserGroupId(v int64) *ListUserGroupsResponseBodyData {
	s.ParentUserGroupId = &v
	return s
}

func (s *ListUserGroupsResponseBodyData) SetUpdateTime(v string) *ListUserGroupsResponseBodyData {
	s.UpdateTime = &v
	return s
}

func (s *ListUserGroupsResponseBodyData) SetUserCount(v int64) *ListUserGroupsResponseBodyData {
	s.UserCount = &v
	return s
}

func (s *ListUserGroupsResponseBodyData) SetUserGroupId(v int64) *ListUserGroupsResponseBodyData {
	s.UserGroupId = &v
	return s
}

func (s *ListUserGroupsResponseBodyData) SetUserGroupName(v string) *ListUserGroupsResponseBodyData {
	s.UserGroupName = &v
	return s
}

type ListUserGroupsResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListUserGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListUserGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUserGroupsResponse) GoString() string {
	return s.String()
}

func (s *ListUserGroupsResponse) SetHeaders(v map[string]*string) *ListUserGroupsResponse {
	s.Headers = v
	return s
}

func (s *ListUserGroupsResponse) SetBody(v *ListUserGroupsResponseBody) *ListUserGroupsResponse {
	s.Body = v
	return s
}

type ListUsersRequest struct {
	Address               *string                `json:"Address,omitempty" xml:"Address,omitempty"`
	Age                   *int32                 `json:"Age,omitempty" xml:"Age,omitempty"`
	Attachment            *string                `json:"Attachment,omitempty" xml:"Attachment,omitempty"`
	BizId                 *string                `json:"BizId,omitempty" xml:"BizId,omitempty"`
	CorpId                *string                `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	FaceImageUrl          *string                `json:"FaceImageUrl,omitempty" xml:"FaceImageUrl,omitempty"`
	Gender                *int32                 `json:"Gender,omitempty" xml:"Gender,omitempty"`
	IdNumber              *string                `json:"IdNumber,omitempty" xml:"IdNumber,omitempty"`
	IsvSubId              *string                `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	MatchingRateThreshold *string                `json:"MatchingRateThreshold,omitempty" xml:"MatchingRateThreshold,omitempty"`
	PageNumber            *int64                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize              *int64                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PersonList            map[string]interface{} `json:"PersonList,omitempty" xml:"PersonList,omitempty"`
	PhoneNo               *string                `json:"PhoneNo,omitempty" xml:"PhoneNo,omitempty"`
	PlateNo               *string                `json:"PlateNo,omitempty" xml:"PlateNo,omitempty"`
	UserGroupId           *int64                 `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
	UserList              map[string]interface{} `json:"UserList,omitempty" xml:"UserList,omitempty"`
	UserName              *string                `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s ListUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUsersRequest) GoString() string {
	return s.String()
}

func (s *ListUsersRequest) SetAddress(v string) *ListUsersRequest {
	s.Address = &v
	return s
}

func (s *ListUsersRequest) SetAge(v int32) *ListUsersRequest {
	s.Age = &v
	return s
}

func (s *ListUsersRequest) SetAttachment(v string) *ListUsersRequest {
	s.Attachment = &v
	return s
}

func (s *ListUsersRequest) SetBizId(v string) *ListUsersRequest {
	s.BizId = &v
	return s
}

func (s *ListUsersRequest) SetCorpId(v string) *ListUsersRequest {
	s.CorpId = &v
	return s
}

func (s *ListUsersRequest) SetFaceImageUrl(v string) *ListUsersRequest {
	s.FaceImageUrl = &v
	return s
}

func (s *ListUsersRequest) SetGender(v int32) *ListUsersRequest {
	s.Gender = &v
	return s
}

func (s *ListUsersRequest) SetIdNumber(v string) *ListUsersRequest {
	s.IdNumber = &v
	return s
}

func (s *ListUsersRequest) SetIsvSubId(v string) *ListUsersRequest {
	s.IsvSubId = &v
	return s
}

func (s *ListUsersRequest) SetMatchingRateThreshold(v string) *ListUsersRequest {
	s.MatchingRateThreshold = &v
	return s
}

func (s *ListUsersRequest) SetPageNumber(v int64) *ListUsersRequest {
	s.PageNumber = &v
	return s
}

func (s *ListUsersRequest) SetPageSize(v int64) *ListUsersRequest {
	s.PageSize = &v
	return s
}

func (s *ListUsersRequest) SetPersonList(v map[string]interface{}) *ListUsersRequest {
	s.PersonList = v
	return s
}

func (s *ListUsersRequest) SetPhoneNo(v string) *ListUsersRequest {
	s.PhoneNo = &v
	return s
}

func (s *ListUsersRequest) SetPlateNo(v string) *ListUsersRequest {
	s.PlateNo = &v
	return s
}

func (s *ListUsersRequest) SetUserGroupId(v int64) *ListUsersRequest {
	s.UserGroupId = &v
	return s
}

func (s *ListUsersRequest) SetUserList(v map[string]interface{}) *ListUsersRequest {
	s.UserList = v
	return s
}

func (s *ListUsersRequest) SetUserName(v string) *ListUsersRequest {
	s.UserName = &v
	return s
}

type ListUsersShrinkRequest struct {
	Address               *string `json:"Address,omitempty" xml:"Address,omitempty"`
	Age                   *int32  `json:"Age,omitempty" xml:"Age,omitempty"`
	Attachment            *string `json:"Attachment,omitempty" xml:"Attachment,omitempty"`
	BizId                 *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	CorpId                *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	FaceImageUrl          *string `json:"FaceImageUrl,omitempty" xml:"FaceImageUrl,omitempty"`
	Gender                *int32  `json:"Gender,omitempty" xml:"Gender,omitempty"`
	IdNumber              *string `json:"IdNumber,omitempty" xml:"IdNumber,omitempty"`
	IsvSubId              *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	MatchingRateThreshold *string `json:"MatchingRateThreshold,omitempty" xml:"MatchingRateThreshold,omitempty"`
	PageNumber            *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize              *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PersonListShrink      *string `json:"PersonList,omitempty" xml:"PersonList,omitempty"`
	PhoneNo               *string `json:"PhoneNo,omitempty" xml:"PhoneNo,omitempty"`
	PlateNo               *string `json:"PlateNo,omitempty" xml:"PlateNo,omitempty"`
	UserGroupId           *int64  `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
	UserListShrink        *string `json:"UserList,omitempty" xml:"UserList,omitempty"`
	UserName              *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s ListUsersShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUsersShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListUsersShrinkRequest) SetAddress(v string) *ListUsersShrinkRequest {
	s.Address = &v
	return s
}

func (s *ListUsersShrinkRequest) SetAge(v int32) *ListUsersShrinkRequest {
	s.Age = &v
	return s
}

func (s *ListUsersShrinkRequest) SetAttachment(v string) *ListUsersShrinkRequest {
	s.Attachment = &v
	return s
}

func (s *ListUsersShrinkRequest) SetBizId(v string) *ListUsersShrinkRequest {
	s.BizId = &v
	return s
}

func (s *ListUsersShrinkRequest) SetCorpId(v string) *ListUsersShrinkRequest {
	s.CorpId = &v
	return s
}

func (s *ListUsersShrinkRequest) SetFaceImageUrl(v string) *ListUsersShrinkRequest {
	s.FaceImageUrl = &v
	return s
}

func (s *ListUsersShrinkRequest) SetGender(v int32) *ListUsersShrinkRequest {
	s.Gender = &v
	return s
}

func (s *ListUsersShrinkRequest) SetIdNumber(v string) *ListUsersShrinkRequest {
	s.IdNumber = &v
	return s
}

func (s *ListUsersShrinkRequest) SetIsvSubId(v string) *ListUsersShrinkRequest {
	s.IsvSubId = &v
	return s
}

func (s *ListUsersShrinkRequest) SetMatchingRateThreshold(v string) *ListUsersShrinkRequest {
	s.MatchingRateThreshold = &v
	return s
}

func (s *ListUsersShrinkRequest) SetPageNumber(v int64) *ListUsersShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *ListUsersShrinkRequest) SetPageSize(v int64) *ListUsersShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *ListUsersShrinkRequest) SetPersonListShrink(v string) *ListUsersShrinkRequest {
	s.PersonListShrink = &v
	return s
}

func (s *ListUsersShrinkRequest) SetPhoneNo(v string) *ListUsersShrinkRequest {
	s.PhoneNo = &v
	return s
}

func (s *ListUsersShrinkRequest) SetPlateNo(v string) *ListUsersShrinkRequest {
	s.PlateNo = &v
	return s
}

func (s *ListUsersShrinkRequest) SetUserGroupId(v int64) *ListUsersShrinkRequest {
	s.UserGroupId = &v
	return s
}

func (s *ListUsersShrinkRequest) SetUserListShrink(v string) *ListUsersShrinkRequest {
	s.UserListShrink = &v
	return s
}

func (s *ListUsersShrinkRequest) SetUserName(v string) *ListUsersShrinkRequest {
	s.UserName = &v
	return s
}

type ListUsersResponseBody struct {
	Code      *string                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *ListUsersResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                    `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponseBody) GoString() string {
	return s.String()
}

func (s *ListUsersResponseBody) SetCode(v string) *ListUsersResponseBody {
	s.Code = &v
	return s
}

func (s *ListUsersResponseBody) SetData(v *ListUsersResponseBodyData) *ListUsersResponseBody {
	s.Data = v
	return s
}

func (s *ListUsersResponseBody) SetMessage(v string) *ListUsersResponseBody {
	s.Message = &v
	return s
}

func (s *ListUsersResponseBody) SetRequestId(v string) *ListUsersResponseBody {
	s.RequestId = &v
	return s
}

type ListUsersResponseBodyData struct {
	PageNumber *int64                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int64                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*ListUsersResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	Success    *int64                              `json:"Success,omitempty" xml:"Success,omitempty"`
	Total      *int64                              `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListUsersResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListUsersResponseBodyData) SetPageNumber(v int64) *ListUsersResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListUsersResponseBodyData) SetPageSize(v int64) *ListUsersResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListUsersResponseBodyData) SetRecords(v []*ListUsersResponseBodyDataRecords) *ListUsersResponseBodyData {
	s.Records = v
	return s
}

func (s *ListUsersResponseBodyData) SetSuccess(v int64) *ListUsersResponseBodyData {
	s.Success = &v
	return s
}

func (s *ListUsersResponseBodyData) SetTotal(v int64) *ListUsersResponseBodyData {
	s.Total = &v
	return s
}

type ListUsersResponseBodyDataRecords struct {
	Age          *string `json:"Age,omitempty" xml:"Age,omitempty"`
	Attachment   *string `json:"Attachment,omitempty" xml:"Attachment,omitempty"`
	BizId        *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	FaceImageUrl *string `json:"FaceImageUrl,omitempty" xml:"FaceImageUrl,omitempty"`
	Gender       *string `json:"Gender,omitempty" xml:"Gender,omitempty"`
	IdNumber     *string `json:"IdNumber,omitempty" xml:"IdNumber,omitempty"`
	IsvSubId     *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	MatchingRate *string `json:"MatchingRate,omitempty" xml:"MatchingRate,omitempty"`
	PersonId     *string `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	UserGroupId  *int32  `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
	UserId       *int32  `json:"UserId,omitempty" xml:"UserId,omitempty"`
	UserName     *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s ListUsersResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *ListUsersResponseBodyDataRecords) SetAge(v string) *ListUsersResponseBodyDataRecords {
	s.Age = &v
	return s
}

func (s *ListUsersResponseBodyDataRecords) SetAttachment(v string) *ListUsersResponseBodyDataRecords {
	s.Attachment = &v
	return s
}

func (s *ListUsersResponseBodyDataRecords) SetBizId(v string) *ListUsersResponseBodyDataRecords {
	s.BizId = &v
	return s
}

func (s *ListUsersResponseBodyDataRecords) SetFaceImageUrl(v string) *ListUsersResponseBodyDataRecords {
	s.FaceImageUrl = &v
	return s
}

func (s *ListUsersResponseBodyDataRecords) SetGender(v string) *ListUsersResponseBodyDataRecords {
	s.Gender = &v
	return s
}

func (s *ListUsersResponseBodyDataRecords) SetIdNumber(v string) *ListUsersResponseBodyDataRecords {
	s.IdNumber = &v
	return s
}

func (s *ListUsersResponseBodyDataRecords) SetIsvSubId(v string) *ListUsersResponseBodyDataRecords {
	s.IsvSubId = &v
	return s
}

func (s *ListUsersResponseBodyDataRecords) SetMatchingRate(v string) *ListUsersResponseBodyDataRecords {
	s.MatchingRate = &v
	return s
}

func (s *ListUsersResponseBodyDataRecords) SetPersonId(v string) *ListUsersResponseBodyDataRecords {
	s.PersonId = &v
	return s
}

func (s *ListUsersResponseBodyDataRecords) SetUserGroupId(v int32) *ListUsersResponseBodyDataRecords {
	s.UserGroupId = &v
	return s
}

func (s *ListUsersResponseBodyDataRecords) SetUserId(v int32) *ListUsersResponseBodyDataRecords {
	s.UserId = &v
	return s
}

func (s *ListUsersResponseBodyDataRecords) SetUserName(v string) *ListUsersResponseBodyDataRecords {
	s.UserName = &v
	return s
}

type ListUsersResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListUsersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponse) GoString() string {
	return s.String()
}

func (s *ListUsersResponse) SetHeaders(v map[string]*string) *ListUsersResponse {
	s.Headers = v
	return s
}

func (s *ListUsersResponse) SetBody(v *ListUsersResponseBody) *ListUsersResponse {
	s.Body = v
	return s
}

type ModifyDeviceRequest struct {
	AudioEnable *string `json:"AudioEnable,omitempty" xml:"AudioEnable,omitempty"`
	// 设备安装地址
	DeviceAddress   *string `json:"DeviceAddress,omitempty" xml:"DeviceAddress,omitempty"`
	DeviceDirection *string `json:"DeviceDirection,omitempty" xml:"DeviceDirection,omitempty"`
	// 设备国标编码
	DeviceId    *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	DeviceIp    *string `json:"DeviceIp,omitempty" xml:"DeviceIp,omitempty"`
	DeviceModel *string `json:"DeviceModel,omitempty" xml:"DeviceModel,omitempty"`
	// 设备名称
	DeviceName       *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DeviceRate       *string `json:"DeviceRate,omitempty" xml:"DeviceRate,omitempty"`
	DeviceResolution *string `json:"DeviceResolution,omitempty" xml:"DeviceResolution,omitempty"`
	DeviceSite       *string `json:"DeviceSite,omitempty" xml:"DeviceSite,omitempty"`
	DeviceSubType    *string `json:"DeviceSubType,omitempty" xml:"DeviceSubType,omitempty"`
	EncodeFormat     *string `json:"EncodeFormat,omitempty" xml:"EncodeFormat,omitempty"`
	FrameRate        *string `json:"FrameRate,omitempty" xml:"FrameRate,omitempty"`
	GovLength        *string `json:"GovLength,omitempty" xml:"GovLength,omitempty"`
	Latitude         *string `json:"Latitude,omitempty" xml:"Latitude,omitempty"`
	Longitude        *string `json:"Longitude,omitempty" xml:"Longitude,omitempty"`
	OSDTimeEnable    *string `json:"OSDTimeEnable,omitempty" xml:"OSDTimeEnable,omitempty"`
	OSDTimeType      *string `json:"OSDTimeType,omitempty" xml:"OSDTimeType,omitempty"`
	OSDTimeX         *string `json:"OSDTimeX,omitempty" xml:"OSDTimeX,omitempty"`
	OSDTimeY         *string `json:"OSDTimeY,omitempty" xml:"OSDTimeY,omitempty"`
	Password         *string `json:"Password,omitempty" xml:"Password,omitempty"`
	Vendor           *string `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s ModifyDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDeviceRequest) GoString() string {
	return s.String()
}

func (s *ModifyDeviceRequest) SetAudioEnable(v string) *ModifyDeviceRequest {
	s.AudioEnable = &v
	return s
}

func (s *ModifyDeviceRequest) SetDeviceAddress(v string) *ModifyDeviceRequest {
	s.DeviceAddress = &v
	return s
}

func (s *ModifyDeviceRequest) SetDeviceDirection(v string) *ModifyDeviceRequest {
	s.DeviceDirection = &v
	return s
}

func (s *ModifyDeviceRequest) SetDeviceId(v string) *ModifyDeviceRequest {
	s.DeviceId = &v
	return s
}

func (s *ModifyDeviceRequest) SetDeviceIp(v string) *ModifyDeviceRequest {
	s.DeviceIp = &v
	return s
}

func (s *ModifyDeviceRequest) SetDeviceModel(v string) *ModifyDeviceRequest {
	s.DeviceModel = &v
	return s
}

func (s *ModifyDeviceRequest) SetDeviceName(v string) *ModifyDeviceRequest {
	s.DeviceName = &v
	return s
}

func (s *ModifyDeviceRequest) SetDeviceRate(v string) *ModifyDeviceRequest {
	s.DeviceRate = &v
	return s
}

func (s *ModifyDeviceRequest) SetDeviceResolution(v string) *ModifyDeviceRequest {
	s.DeviceResolution = &v
	return s
}

func (s *ModifyDeviceRequest) SetDeviceSite(v string) *ModifyDeviceRequest {
	s.DeviceSite = &v
	return s
}

func (s *ModifyDeviceRequest) SetDeviceSubType(v string) *ModifyDeviceRequest {
	s.DeviceSubType = &v
	return s
}

func (s *ModifyDeviceRequest) SetEncodeFormat(v string) *ModifyDeviceRequest {
	s.EncodeFormat = &v
	return s
}

func (s *ModifyDeviceRequest) SetFrameRate(v string) *ModifyDeviceRequest {
	s.FrameRate = &v
	return s
}

func (s *ModifyDeviceRequest) SetGovLength(v string) *ModifyDeviceRequest {
	s.GovLength = &v
	return s
}

func (s *ModifyDeviceRequest) SetLatitude(v string) *ModifyDeviceRequest {
	s.Latitude = &v
	return s
}

func (s *ModifyDeviceRequest) SetLongitude(v string) *ModifyDeviceRequest {
	s.Longitude = &v
	return s
}

func (s *ModifyDeviceRequest) SetOSDTimeEnable(v string) *ModifyDeviceRequest {
	s.OSDTimeEnable = &v
	return s
}

func (s *ModifyDeviceRequest) SetOSDTimeType(v string) *ModifyDeviceRequest {
	s.OSDTimeType = &v
	return s
}

func (s *ModifyDeviceRequest) SetOSDTimeX(v string) *ModifyDeviceRequest {
	s.OSDTimeX = &v
	return s
}

func (s *ModifyDeviceRequest) SetOSDTimeY(v string) *ModifyDeviceRequest {
	s.OSDTimeY = &v
	return s
}

func (s *ModifyDeviceRequest) SetPassword(v string) *ModifyDeviceRequest {
	s.Password = &v
	return s
}

func (s *ModifyDeviceRequest) SetVendor(v string) *ModifyDeviceRequest {
	s.Vendor = &v
	return s
}

type ModifyDeviceResponseBody struct {
	// 错误码
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// 错误码描述
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDeviceResponseBody) SetCode(v string) *ModifyDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyDeviceResponseBody) SetMessage(v string) *ModifyDeviceResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyDeviceResponseBody) SetRequestId(v string) *ModifyDeviceResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDeviceResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDeviceResponse) GoString() string {
	return s.String()
}

func (s *ModifyDeviceResponse) SetHeaders(v map[string]*string) *ModifyDeviceResponse {
	s.Headers = v
	return s
}

func (s *ModifyDeviceResponse) SetBody(v *ModifyDeviceResponseBody) *ModifyDeviceResponse {
	s.Body = v
	return s
}

type PeekNvrRequest struct {
	CorpId   *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
}

func (s PeekNvrRequest) String() string {
	return tea.Prettify(s)
}

func (s PeekNvrRequest) GoString() string {
	return s.String()
}

func (s *PeekNvrRequest) SetCorpId(v string) *PeekNvrRequest {
	s.CorpId = &v
	return s
}

func (s *PeekNvrRequest) SetDeviceId(v string) *PeekNvrRequest {
	s.DeviceId = &v
	return s
}

type PeekNvrResponseBody struct {
	Code    *string                  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *PeekNvrResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                  `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s PeekNvrResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PeekNvrResponseBody) GoString() string {
	return s.String()
}

func (s *PeekNvrResponseBody) SetCode(v string) *PeekNvrResponseBody {
	s.Code = &v
	return s
}

func (s *PeekNvrResponseBody) SetData(v *PeekNvrResponseBodyData) *PeekNvrResponseBody {
	s.Data = v
	return s
}

func (s *PeekNvrResponseBody) SetMessage(v string) *PeekNvrResponseBody {
	s.Message = &v
	return s
}

func (s *PeekNvrResponseBody) SetRequestId(v string) *PeekNvrResponseBody {
	s.RequestId = &v
	return s
}

type PeekNvrResponseBodyData struct {
	IdleCount     *int64                                  `json:"IdleCount,omitempty" xml:"IdleCount,omitempty"`
	SubDeviceList []*PeekNvrResponseBodyDataSubDeviceList `json:"SubDeviceList,omitempty" xml:"SubDeviceList,omitempty" type:"Repeated"`
}

func (s PeekNvrResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s PeekNvrResponseBodyData) GoString() string {
	return s.String()
}

func (s *PeekNvrResponseBodyData) SetIdleCount(v int64) *PeekNvrResponseBodyData {
	s.IdleCount = &v
	return s
}

func (s *PeekNvrResponseBodyData) SetSubDeviceList(v []*PeekNvrResponseBodyDataSubDeviceList) *PeekNvrResponseBodyData {
	s.SubDeviceList = v
	return s
}

type PeekNvrResponseBodyDataSubDeviceList struct {
	AssociatedPlatform *string `json:"AssociatedPlatform,omitempty" xml:"AssociatedPlatform,omitempty"`
	SubDeviceId        *string `json:"SubDeviceId,omitempty" xml:"SubDeviceId,omitempty"`
	SubDeviceName      *string `json:"SubDeviceName,omitempty" xml:"SubDeviceName,omitempty"`
	SubDeviceNum       *string `json:"SubDeviceNum,omitempty" xml:"SubDeviceNum,omitempty"`
	SubDeviceStatus    *string `json:"SubDeviceStatus,omitempty" xml:"SubDeviceStatus,omitempty"`
}

func (s PeekNvrResponseBodyDataSubDeviceList) String() string {
	return tea.Prettify(s)
}

func (s PeekNvrResponseBodyDataSubDeviceList) GoString() string {
	return s.String()
}

func (s *PeekNvrResponseBodyDataSubDeviceList) SetAssociatedPlatform(v string) *PeekNvrResponseBodyDataSubDeviceList {
	s.AssociatedPlatform = &v
	return s
}

func (s *PeekNvrResponseBodyDataSubDeviceList) SetSubDeviceId(v string) *PeekNvrResponseBodyDataSubDeviceList {
	s.SubDeviceId = &v
	return s
}

func (s *PeekNvrResponseBodyDataSubDeviceList) SetSubDeviceName(v string) *PeekNvrResponseBodyDataSubDeviceList {
	s.SubDeviceName = &v
	return s
}

func (s *PeekNvrResponseBodyDataSubDeviceList) SetSubDeviceNum(v string) *PeekNvrResponseBodyDataSubDeviceList {
	s.SubDeviceNum = &v
	return s
}

func (s *PeekNvrResponseBodyDataSubDeviceList) SetSubDeviceStatus(v string) *PeekNvrResponseBodyDataSubDeviceList {
	s.SubDeviceStatus = &v
	return s
}

type PeekNvrResponse struct {
	Headers map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *PeekNvrResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PeekNvrResponse) String() string {
	return tea.Prettify(s)
}

func (s PeekNvrResponse) GoString() string {
	return s.String()
}

func (s *PeekNvrResponse) SetHeaders(v map[string]*string) *PeekNvrResponse {
	s.Headers = v
	return s
}

func (s *PeekNvrResponse) SetBody(v *PeekNvrResponseBody) *PeekNvrResponse {
	s.Body = v
	return s
}

type RaiseDevicesStorageRequest struct {
	Json *string `json:"Json,omitempty" xml:"Json,omitempty"`
}

func (s RaiseDevicesStorageRequest) String() string {
	return tea.Prettify(s)
}

func (s RaiseDevicesStorageRequest) GoString() string {
	return s.String()
}

func (s *RaiseDevicesStorageRequest) SetJson(v string) *RaiseDevicesStorageRequest {
	s.Json = &v
	return s
}

type RaiseDevicesStorageResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RaiseDevicesStorageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RaiseDevicesStorageResponseBody) GoString() string {
	return s.String()
}

func (s *RaiseDevicesStorageResponseBody) SetCode(v string) *RaiseDevicesStorageResponseBody {
	s.Code = &v
	return s
}

func (s *RaiseDevicesStorageResponseBody) SetData(v bool) *RaiseDevicesStorageResponseBody {
	s.Data = &v
	return s
}

func (s *RaiseDevicesStorageResponseBody) SetMessage(v string) *RaiseDevicesStorageResponseBody {
	s.Message = &v
	return s
}

func (s *RaiseDevicesStorageResponseBody) SetRequestId(v string) *RaiseDevicesStorageResponseBody {
	s.RequestId = &v
	return s
}

func (s *RaiseDevicesStorageResponseBody) SetSuccess(v bool) *RaiseDevicesStorageResponseBody {
	s.Success = &v
	return s
}

type RaiseDevicesStorageResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RaiseDevicesStorageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RaiseDevicesStorageResponse) String() string {
	return tea.Prettify(s)
}

func (s RaiseDevicesStorageResponse) GoString() string {
	return s.String()
}

func (s *RaiseDevicesStorageResponse) SetHeaders(v map[string]*string) *RaiseDevicesStorageResponse {
	s.Headers = v
	return s
}

func (s *RaiseDevicesStorageResponse) SetBody(v *RaiseDevicesStorageResponseBody) *RaiseDevicesStorageResponse {
	s.Body = v
	return s
}

type RecognizeFaceQualityRequest struct {
	CorpId     *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	PicContent *string `json:"PicContent,omitempty" xml:"PicContent,omitempty"`
	PicFormat  *string `json:"PicFormat,omitempty" xml:"PicFormat,omitempty"`
	PicUrl     *string `json:"PicUrl,omitempty" xml:"PicUrl,omitempty"`
}

func (s RecognizeFaceQualityRequest) String() string {
	return tea.Prettify(s)
}

func (s RecognizeFaceQualityRequest) GoString() string {
	return s.String()
}

func (s *RecognizeFaceQualityRequest) SetCorpId(v string) *RecognizeFaceQualityRequest {
	s.CorpId = &v
	return s
}

func (s *RecognizeFaceQualityRequest) SetPicContent(v string) *RecognizeFaceQualityRequest {
	s.PicContent = &v
	return s
}

func (s *RecognizeFaceQualityRequest) SetPicFormat(v string) *RecognizeFaceQualityRequest {
	s.PicFormat = &v
	return s
}

func (s *RecognizeFaceQualityRequest) SetPicUrl(v string) *RecognizeFaceQualityRequest {
	s.PicUrl = &v
	return s
}

type RecognizeFaceQualityResponseBody struct {
	Code      *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *RecognizeFaceQualityResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                               `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RecognizeFaceQualityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RecognizeFaceQualityResponseBody) GoString() string {
	return s.String()
}

func (s *RecognizeFaceQualityResponseBody) SetCode(v string) *RecognizeFaceQualityResponseBody {
	s.Code = &v
	return s
}

func (s *RecognizeFaceQualityResponseBody) SetData(v *RecognizeFaceQualityResponseBodyData) *RecognizeFaceQualityResponseBody {
	s.Data = v
	return s
}

func (s *RecognizeFaceQualityResponseBody) SetMessage(v string) *RecognizeFaceQualityResponseBody {
	s.Message = &v
	return s
}

func (s *RecognizeFaceQualityResponseBody) SetRequestId(v string) *RecognizeFaceQualityResponseBody {
	s.RequestId = &v
	return s
}

type RecognizeFaceQualityResponseBodyData struct {
	Attributes   *RecognizeFaceQualityResponseBodyDataAttributes `json:"Attributes,omitempty" xml:"Attributes,omitempty" type:"Struct"`
	Description  *string                                         `json:"Description,omitempty" xml:"Description,omitempty"`
	QualityScore *string                                         `json:"QualityScore,omitempty" xml:"QualityScore,omitempty"`
}

func (s RecognizeFaceQualityResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RecognizeFaceQualityResponseBodyData) GoString() string {
	return s.String()
}

func (s *RecognizeFaceQualityResponseBodyData) SetAttributes(v *RecognizeFaceQualityResponseBodyDataAttributes) *RecognizeFaceQualityResponseBodyData {
	s.Attributes = v
	return s
}

func (s *RecognizeFaceQualityResponseBodyData) SetDescription(v string) *RecognizeFaceQualityResponseBodyData {
	s.Description = &v
	return s
}

func (s *RecognizeFaceQualityResponseBodyData) SetQualityScore(v string) *RecognizeFaceQualityResponseBodyData {
	s.QualityScore = &v
	return s
}

type RecognizeFaceQualityResponseBodyDataAttributes struct {
	FaceQuality            *string `json:"FaceQuality,omitempty" xml:"FaceQuality,omitempty"`
	FaceScore              *string `json:"FaceScore,omitempty" xml:"FaceScore,omitempty"`
	FaceStyle              *string `json:"FaceStyle,omitempty" xml:"FaceStyle,omitempty"`
	LeftTopX               *int32  `json:"LeftTopX,omitempty" xml:"LeftTopX,omitempty"`
	LeftTopY               *int32  `json:"LeftTopY,omitempty" xml:"LeftTopY,omitempty"`
	RightBottomX           *int32  `json:"RightBottomX,omitempty" xml:"RightBottomX,omitempty"`
	RightBottomY           *int32  `json:"RightBottomY,omitempty" xml:"RightBottomY,omitempty"`
	TargetImageStoragePath *string `json:"TargetImageStoragePath,omitempty" xml:"TargetImageStoragePath,omitempty"`
}

func (s RecognizeFaceQualityResponseBodyDataAttributes) String() string {
	return tea.Prettify(s)
}

func (s RecognizeFaceQualityResponseBodyDataAttributes) GoString() string {
	return s.String()
}

func (s *RecognizeFaceQualityResponseBodyDataAttributes) SetFaceQuality(v string) *RecognizeFaceQualityResponseBodyDataAttributes {
	s.FaceQuality = &v
	return s
}

func (s *RecognizeFaceQualityResponseBodyDataAttributes) SetFaceScore(v string) *RecognizeFaceQualityResponseBodyDataAttributes {
	s.FaceScore = &v
	return s
}

func (s *RecognizeFaceQualityResponseBodyDataAttributes) SetFaceStyle(v string) *RecognizeFaceQualityResponseBodyDataAttributes {
	s.FaceStyle = &v
	return s
}

func (s *RecognizeFaceQualityResponseBodyDataAttributes) SetLeftTopX(v int32) *RecognizeFaceQualityResponseBodyDataAttributes {
	s.LeftTopX = &v
	return s
}

func (s *RecognizeFaceQualityResponseBodyDataAttributes) SetLeftTopY(v int32) *RecognizeFaceQualityResponseBodyDataAttributes {
	s.LeftTopY = &v
	return s
}

func (s *RecognizeFaceQualityResponseBodyDataAttributes) SetRightBottomX(v int32) *RecognizeFaceQualityResponseBodyDataAttributes {
	s.RightBottomX = &v
	return s
}

func (s *RecognizeFaceQualityResponseBodyDataAttributes) SetRightBottomY(v int32) *RecognizeFaceQualityResponseBodyDataAttributes {
	s.RightBottomY = &v
	return s
}

func (s *RecognizeFaceQualityResponseBodyDataAttributes) SetTargetImageStoragePath(v string) *RecognizeFaceQualityResponseBodyDataAttributes {
	s.TargetImageStoragePath = &v
	return s
}

type RecognizeFaceQualityResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RecognizeFaceQualityResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RecognizeFaceQualityResponse) String() string {
	return tea.Prettify(s)
}

func (s RecognizeFaceQualityResponse) GoString() string {
	return s.String()
}

func (s *RecognizeFaceQualityResponse) SetHeaders(v map[string]*string) *RecognizeFaceQualityResponse {
	s.Headers = v
	return s
}

func (s *RecognizeFaceQualityResponse) SetBody(v *RecognizeFaceQualityResponseBody) *RecognizeFaceQualityResponse {
	s.Body = v
	return s
}

type RecognizeImageRequest struct {
	CorpId     *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	PicContent *string `json:"PicContent,omitempty" xml:"PicContent,omitempty"`
	PicFormat  *string `json:"PicFormat,omitempty" xml:"PicFormat,omitempty"`
	PicUrl     *string `json:"PicUrl,omitempty" xml:"PicUrl,omitempty"`
}

func (s RecognizeImageRequest) String() string {
	return tea.Prettify(s)
}

func (s RecognizeImageRequest) GoString() string {
	return s.String()
}

func (s *RecognizeImageRequest) SetCorpId(v string) *RecognizeImageRequest {
	s.CorpId = &v
	return s
}

func (s *RecognizeImageRequest) SetPicContent(v string) *RecognizeImageRequest {
	s.PicContent = &v
	return s
}

func (s *RecognizeImageRequest) SetPicFormat(v string) *RecognizeImageRequest {
	s.PicFormat = &v
	return s
}

func (s *RecognizeImageRequest) SetPicUrl(v string) *RecognizeImageRequest {
	s.PicUrl = &v
	return s
}

type RecognizeImageResponseBody struct {
	Code      *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *RecognizeImageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RecognizeImageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RecognizeImageResponseBody) GoString() string {
	return s.String()
}

func (s *RecognizeImageResponseBody) SetCode(v string) *RecognizeImageResponseBody {
	s.Code = &v
	return s
}

func (s *RecognizeImageResponseBody) SetData(v *RecognizeImageResponseBodyData) *RecognizeImageResponseBody {
	s.Data = v
	return s
}

func (s *RecognizeImageResponseBody) SetMessage(v string) *RecognizeImageResponseBody {
	s.Message = &v
	return s
}

func (s *RecognizeImageResponseBody) SetRequestId(v string) *RecognizeImageResponseBody {
	s.RequestId = &v
	return s
}

type RecognizeImageResponseBodyData struct {
	BodyList []*RecognizeImageResponseBodyDataBodyList `json:"BodyList,omitempty" xml:"BodyList,omitempty" type:"Repeated"`
	FaceList []*RecognizeImageResponseBodyDataFaceList `json:"FaceList,omitempty" xml:"FaceList,omitempty" type:"Repeated"`
}

func (s RecognizeImageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RecognizeImageResponseBodyData) GoString() string {
	return s.String()
}

func (s *RecognizeImageResponseBodyData) SetBodyList(v []*RecognizeImageResponseBodyDataBodyList) *RecognizeImageResponseBodyData {
	s.BodyList = v
	return s
}

func (s *RecognizeImageResponseBodyData) SetFaceList(v []*RecognizeImageResponseBodyDataFaceList) *RecognizeImageResponseBodyData {
	s.FaceList = v
	return s
}

type RecognizeImageResponseBodyDataBodyList struct {
	Feature          *string `json:"Feature,omitempty" xml:"Feature,omitempty"`
	FileName         *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	ImageBaseSixFour *string `json:"ImageBaseSixFour,omitempty" xml:"ImageBaseSixFour,omitempty"`
	LeftTopX         *string `json:"LeftTopX,omitempty" xml:"LeftTopX,omitempty"`
	LeftTopY         *string `json:"LeftTopY,omitempty" xml:"LeftTopY,omitempty"`
	LocalFeature     *string `json:"LocalFeature,omitempty" xml:"LocalFeature,omitempty"`
	RespiratorColor  *string `json:"RespiratorColor,omitempty" xml:"RespiratorColor,omitempty"`
	RightBottomX     *string `json:"RightBottomX,omitempty" xml:"RightBottomX,omitempty"`
	RightBottomY     *string `json:"RightBottomY,omitempty" xml:"RightBottomY,omitempty"`
}

func (s RecognizeImageResponseBodyDataBodyList) String() string {
	return tea.Prettify(s)
}

func (s RecognizeImageResponseBodyDataBodyList) GoString() string {
	return s.String()
}

func (s *RecognizeImageResponseBodyDataBodyList) SetFeature(v string) *RecognizeImageResponseBodyDataBodyList {
	s.Feature = &v
	return s
}

func (s *RecognizeImageResponseBodyDataBodyList) SetFileName(v string) *RecognizeImageResponseBodyDataBodyList {
	s.FileName = &v
	return s
}

func (s *RecognizeImageResponseBodyDataBodyList) SetImageBaseSixFour(v string) *RecognizeImageResponseBodyDataBodyList {
	s.ImageBaseSixFour = &v
	return s
}

func (s *RecognizeImageResponseBodyDataBodyList) SetLeftTopX(v string) *RecognizeImageResponseBodyDataBodyList {
	s.LeftTopX = &v
	return s
}

func (s *RecognizeImageResponseBodyDataBodyList) SetLeftTopY(v string) *RecognizeImageResponseBodyDataBodyList {
	s.LeftTopY = &v
	return s
}

func (s *RecognizeImageResponseBodyDataBodyList) SetLocalFeature(v string) *RecognizeImageResponseBodyDataBodyList {
	s.LocalFeature = &v
	return s
}

func (s *RecognizeImageResponseBodyDataBodyList) SetRespiratorColor(v string) *RecognizeImageResponseBodyDataBodyList {
	s.RespiratorColor = &v
	return s
}

func (s *RecognizeImageResponseBodyDataBodyList) SetRightBottomX(v string) *RecognizeImageResponseBodyDataBodyList {
	s.RightBottomX = &v
	return s
}

func (s *RecognizeImageResponseBodyDataBodyList) SetRightBottomY(v string) *RecognizeImageResponseBodyDataBodyList {
	s.RightBottomY = &v
	return s
}

type RecognizeImageResponseBodyDataFaceList struct {
	Feature          *string  `json:"Feature,omitempty" xml:"Feature,omitempty"`
	FileName         *string  `json:"FileName,omitempty" xml:"FileName,omitempty"`
	ImageBaseSixFour *string  `json:"ImageBaseSixFour,omitempty" xml:"ImageBaseSixFour,omitempty"`
	KeyPointQuality  *float32 `json:"KeyPointQuality,omitempty" xml:"KeyPointQuality,omitempty"`
	LeftTopX         *string  `json:"LeftTopX,omitempty" xml:"LeftTopX,omitempty"`
	LeftTopY         *string  `json:"LeftTopY,omitempty" xml:"LeftTopY,omitempty"`
	LocalFeature     *string  `json:"LocalFeature,omitempty" xml:"LocalFeature,omitempty"`
	Quality          *float32 `json:"Quality,omitempty" xml:"Quality,omitempty"`
	RespiratorColor  *string  `json:"RespiratorColor,omitempty" xml:"RespiratorColor,omitempty"`
	RightBottomX     *string  `json:"RightBottomX,omitempty" xml:"RightBottomX,omitempty"`
	RightBottomY     *string  `json:"RightBottomY,omitempty" xml:"RightBottomY,omitempty"`
}

func (s RecognizeImageResponseBodyDataFaceList) String() string {
	return tea.Prettify(s)
}

func (s RecognizeImageResponseBodyDataFaceList) GoString() string {
	return s.String()
}

func (s *RecognizeImageResponseBodyDataFaceList) SetFeature(v string) *RecognizeImageResponseBodyDataFaceList {
	s.Feature = &v
	return s
}

func (s *RecognizeImageResponseBodyDataFaceList) SetFileName(v string) *RecognizeImageResponseBodyDataFaceList {
	s.FileName = &v
	return s
}

func (s *RecognizeImageResponseBodyDataFaceList) SetImageBaseSixFour(v string) *RecognizeImageResponseBodyDataFaceList {
	s.ImageBaseSixFour = &v
	return s
}

func (s *RecognizeImageResponseBodyDataFaceList) SetKeyPointQuality(v float32) *RecognizeImageResponseBodyDataFaceList {
	s.KeyPointQuality = &v
	return s
}

func (s *RecognizeImageResponseBodyDataFaceList) SetLeftTopX(v string) *RecognizeImageResponseBodyDataFaceList {
	s.LeftTopX = &v
	return s
}

func (s *RecognizeImageResponseBodyDataFaceList) SetLeftTopY(v string) *RecognizeImageResponseBodyDataFaceList {
	s.LeftTopY = &v
	return s
}

func (s *RecognizeImageResponseBodyDataFaceList) SetLocalFeature(v string) *RecognizeImageResponseBodyDataFaceList {
	s.LocalFeature = &v
	return s
}

func (s *RecognizeImageResponseBodyDataFaceList) SetQuality(v float32) *RecognizeImageResponseBodyDataFaceList {
	s.Quality = &v
	return s
}

func (s *RecognizeImageResponseBodyDataFaceList) SetRespiratorColor(v string) *RecognizeImageResponseBodyDataFaceList {
	s.RespiratorColor = &v
	return s
}

func (s *RecognizeImageResponseBodyDataFaceList) SetRightBottomX(v string) *RecognizeImageResponseBodyDataFaceList {
	s.RightBottomX = &v
	return s
}

func (s *RecognizeImageResponseBodyDataFaceList) SetRightBottomY(v string) *RecognizeImageResponseBodyDataFaceList {
	s.RightBottomY = &v
	return s
}

type RecognizeImageResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RecognizeImageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RecognizeImageResponse) String() string {
	return tea.Prettify(s)
}

func (s RecognizeImageResponse) GoString() string {
	return s.String()
}

func (s *RecognizeImageResponse) SetHeaders(v map[string]*string) *RecognizeImageResponse {
	s.Headers = v
	return s
}

func (s *RecognizeImageResponse) SetBody(v *RecognizeImageResponseBody) *RecognizeImageResponse {
	s.Body = v
	return s
}

type RegisterDeviceRequest struct {
	DeviceId        *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	DeviceSn        *string `json:"DeviceSn,omitempty" xml:"DeviceSn,omitempty"`
	DeviceTimeStamp *string `json:"DeviceTimeStamp,omitempty" xml:"DeviceTimeStamp,omitempty"`
	ServerId        *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
}

func (s RegisterDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s RegisterDeviceRequest) GoString() string {
	return s.String()
}

func (s *RegisterDeviceRequest) SetDeviceId(v string) *RegisterDeviceRequest {
	s.DeviceId = &v
	return s
}

func (s *RegisterDeviceRequest) SetDeviceSn(v string) *RegisterDeviceRequest {
	s.DeviceSn = &v
	return s
}

func (s *RegisterDeviceRequest) SetDeviceTimeStamp(v string) *RegisterDeviceRequest {
	s.DeviceTimeStamp = &v
	return s
}

func (s *RegisterDeviceRequest) SetServerId(v string) *RegisterDeviceRequest {
	s.ServerId = &v
	return s
}

type RegisterDeviceResponseBody struct {
	Code          *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RetryInterval *string `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
}

func (s RegisterDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RegisterDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *RegisterDeviceResponseBody) SetCode(v string) *RegisterDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *RegisterDeviceResponseBody) SetMessage(v string) *RegisterDeviceResponseBody {
	s.Message = &v
	return s
}

func (s *RegisterDeviceResponseBody) SetRequestId(v string) *RegisterDeviceResponseBody {
	s.RequestId = &v
	return s
}

func (s *RegisterDeviceResponseBody) SetRetryInterval(v string) *RegisterDeviceResponseBody {
	s.RetryInterval = &v
	return s
}

type RegisterDeviceResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RegisterDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RegisterDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s RegisterDeviceResponse) GoString() string {
	return s.String()
}

func (s *RegisterDeviceResponse) SetHeaders(v map[string]*string) *RegisterDeviceResponse {
	s.Headers = v
	return s
}

func (s *RegisterDeviceResponse) SetBody(v *RegisterDeviceResponseBody) *RegisterDeviceResponse {
	s.Body = v
	return s
}

type RemoveCameraForInstanceRequest struct {
	// 设备ID列表
	CameraIds []*string `json:"CameraIds,omitempty" xml:"CameraIds,omitempty" type:"Repeated"`
	// 实例id
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s RemoveCameraForInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveCameraForInstanceRequest) GoString() string {
	return s.String()
}

func (s *RemoveCameraForInstanceRequest) SetCameraIds(v []*string) *RemoveCameraForInstanceRequest {
	s.CameraIds = v
	return s
}

func (s *RemoveCameraForInstanceRequest) SetInstanceId(v string) *RemoveCameraForInstanceRequest {
	s.InstanceId = &v
	return s
}

type RemoveCameraForInstanceShrinkRequest struct {
	// 设备ID列表
	CameraIdsShrink *string `json:"CameraIds,omitempty" xml:"CameraIds,omitempty"`
	// 实例id
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s RemoveCameraForInstanceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveCameraForInstanceShrinkRequest) GoString() string {
	return s.String()
}

func (s *RemoveCameraForInstanceShrinkRequest) SetCameraIdsShrink(v string) *RemoveCameraForInstanceShrinkRequest {
	s.CameraIdsShrink = &v
	return s
}

func (s *RemoveCameraForInstanceShrinkRequest) SetInstanceId(v string) *RemoveCameraForInstanceShrinkRequest {
	s.InstanceId = &v
	return s
}

type RemoveCameraForInstanceResponseBody struct {
	// code码
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// 返回结果消息
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveCameraForInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveCameraForInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveCameraForInstanceResponseBody) SetCode(v string) *RemoveCameraForInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *RemoveCameraForInstanceResponseBody) SetMessage(v string) *RemoveCameraForInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *RemoveCameraForInstanceResponseBody) SetRequestId(v string) *RemoveCameraForInstanceResponseBody {
	s.RequestId = &v
	return s
}

type RemoveCameraForInstanceResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RemoveCameraForInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemoveCameraForInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveCameraForInstanceResponse) GoString() string {
	return s.String()
}

func (s *RemoveCameraForInstanceResponse) SetHeaders(v map[string]*string) *RemoveCameraForInstanceResponse {
	s.Headers = v
	return s
}

func (s *RemoveCameraForInstanceResponse) SetBody(v *RemoveCameraForInstanceResponseBody) *RemoveCameraForInstanceResponse {
	s.Body = v
	return s
}

type RemoveWatchItemsRequest struct {
	WatchItemIds  *string `json:"WatchItemIds,omitempty" xml:"WatchItemIds,omitempty"`
	WatchPolicyId *string `json:"WatchPolicyId,omitempty" xml:"WatchPolicyId,omitempty"`
}

func (s RemoveWatchItemsRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveWatchItemsRequest) GoString() string {
	return s.String()
}

func (s *RemoveWatchItemsRequest) SetWatchItemIds(v string) *RemoveWatchItemsRequest {
	s.WatchItemIds = &v
	return s
}

func (s *RemoveWatchItemsRequest) SetWatchPolicyId(v string) *RemoveWatchItemsRequest {
	s.WatchPolicyId = &v
	return s
}

type RemoveWatchItemsResponseBody struct {
	Code    *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *RemoveWatchItemsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                           `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RemoveWatchItemsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveWatchItemsResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveWatchItemsResponseBody) SetCode(v string) *RemoveWatchItemsResponseBody {
	s.Code = &v
	return s
}

func (s *RemoveWatchItemsResponseBody) SetData(v *RemoveWatchItemsResponseBodyData) *RemoveWatchItemsResponseBody {
	s.Data = v
	return s
}

func (s *RemoveWatchItemsResponseBody) SetMessage(v string) *RemoveWatchItemsResponseBody {
	s.Message = &v
	return s
}

func (s *RemoveWatchItemsResponseBody) SetRequestId(v string) *RemoveWatchItemsResponseBody {
	s.RequestId = &v
	return s
}

func (s *RemoveWatchItemsResponseBody) SetSuccess(v bool) *RemoveWatchItemsResponseBody {
	s.Success = &v
	return s
}

type RemoveWatchItemsResponseBodyData struct {
	DeletedItemIds *string `json:"DeletedItemIds,omitempty" xml:"DeletedItemIds,omitempty"`
	FailedItemIds  *string `json:"FailedItemIds,omitempty" xml:"FailedItemIds,omitempty"`
}

func (s RemoveWatchItemsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RemoveWatchItemsResponseBodyData) GoString() string {
	return s.String()
}

func (s *RemoveWatchItemsResponseBodyData) SetDeletedItemIds(v string) *RemoveWatchItemsResponseBodyData {
	s.DeletedItemIds = &v
	return s
}

func (s *RemoveWatchItemsResponseBodyData) SetFailedItemIds(v string) *RemoveWatchItemsResponseBodyData {
	s.FailedItemIds = &v
	return s
}

type RemoveWatchItemsResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RemoveWatchItemsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemoveWatchItemsResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveWatchItemsResponse) GoString() string {
	return s.String()
}

func (s *RemoveWatchItemsResponse) SetHeaders(v map[string]*string) *RemoveWatchItemsResponse {
	s.Headers = v
	return s
}

func (s *RemoveWatchItemsResponse) SetBody(v *RemoveWatchItemsResponseBody) *RemoveWatchItemsResponse {
	s.Body = v
	return s
}

type SaveVideoSummaryTaskVideoRequest struct {
	CorpId    *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	SaveVideo *bool   `json:"SaveVideo,omitempty" xml:"SaveVideo,omitempty"`
	TaskId    *int64  `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s SaveVideoSummaryTaskVideoRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveVideoSummaryTaskVideoRequest) GoString() string {
	return s.String()
}

func (s *SaveVideoSummaryTaskVideoRequest) SetCorpId(v string) *SaveVideoSummaryTaskVideoRequest {
	s.CorpId = &v
	return s
}

func (s *SaveVideoSummaryTaskVideoRequest) SetSaveVideo(v bool) *SaveVideoSummaryTaskVideoRequest {
	s.SaveVideo = &v
	return s
}

func (s *SaveVideoSummaryTaskVideoRequest) SetTaskId(v int64) *SaveVideoSummaryTaskVideoRequest {
	s.TaskId = &v
	return s
}

type SaveVideoSummaryTaskVideoResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SaveVideoSummaryTaskVideoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveVideoSummaryTaskVideoResponseBody) GoString() string {
	return s.String()
}

func (s *SaveVideoSummaryTaskVideoResponseBody) SetCode(v string) *SaveVideoSummaryTaskVideoResponseBody {
	s.Code = &v
	return s
}

func (s *SaveVideoSummaryTaskVideoResponseBody) SetData(v string) *SaveVideoSummaryTaskVideoResponseBody {
	s.Data = &v
	return s
}

func (s *SaveVideoSummaryTaskVideoResponseBody) SetMessage(v string) *SaveVideoSummaryTaskVideoResponseBody {
	s.Message = &v
	return s
}

func (s *SaveVideoSummaryTaskVideoResponseBody) SetRequestId(v string) *SaveVideoSummaryTaskVideoResponseBody {
	s.RequestId = &v
	return s
}

type SaveVideoSummaryTaskVideoResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SaveVideoSummaryTaskVideoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SaveVideoSummaryTaskVideoResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveVideoSummaryTaskVideoResponse) GoString() string {
	return s.String()
}

func (s *SaveVideoSummaryTaskVideoResponse) SetHeaders(v map[string]*string) *SaveVideoSummaryTaskVideoResponse {
	s.Headers = v
	return s
}

func (s *SaveVideoSummaryTaskVideoResponse) SetBody(v *SaveVideoSummaryTaskVideoResponseBody) *SaveVideoSummaryTaskVideoResponse {
	s.Body = v
	return s
}

type ScanSubDeviceRequest struct {
	CorpId   *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
}

func (s ScanSubDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s ScanSubDeviceRequest) GoString() string {
	return s.String()
}

func (s *ScanSubDeviceRequest) SetCorpId(v string) *ScanSubDeviceRequest {
	s.CorpId = &v
	return s
}

func (s *ScanSubDeviceRequest) SetDeviceId(v string) *ScanSubDeviceRequest {
	s.DeviceId = &v
	return s
}

type ScanSubDeviceResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ScanSubDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ScanSubDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *ScanSubDeviceResponseBody) SetCode(v string) *ScanSubDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *ScanSubDeviceResponseBody) SetMessage(v string) *ScanSubDeviceResponseBody {
	s.Message = &v
	return s
}

func (s *ScanSubDeviceResponseBody) SetRequestId(v string) *ScanSubDeviceResponseBody {
	s.RequestId = &v
	return s
}

type ScanSubDeviceResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ScanSubDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ScanSubDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s ScanSubDeviceResponse) GoString() string {
	return s.String()
}

func (s *ScanSubDeviceResponse) SetHeaders(v map[string]*string) *ScanSubDeviceResponse {
	s.Headers = v
	return s
}

func (s *ScanSubDeviceResponse) SetBody(v *ScanSubDeviceResponseBody) *ScanSubDeviceResponse {
	s.Body = v
	return s
}

type SearchBodyRequest struct {
	CorpId         *string                `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	EndTimeStamp   *int64                 `json:"EndTimeStamp,omitempty" xml:"EndTimeStamp,omitempty"`
	GbId           *string                `json:"GbId,omitempty" xml:"GbId,omitempty"`
	OptionList     map[string]interface{} `json:"OptionList,omitempty" xml:"OptionList,omitempty"`
	PageNo         *int32                 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize       *int32                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTimeStamp *int64                 `json:"StartTimeStamp,omitempty" xml:"StartTimeStamp,omitempty"`
}

func (s SearchBodyRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchBodyRequest) GoString() string {
	return s.String()
}

func (s *SearchBodyRequest) SetCorpId(v string) *SearchBodyRequest {
	s.CorpId = &v
	return s
}

func (s *SearchBodyRequest) SetEndTimeStamp(v int64) *SearchBodyRequest {
	s.EndTimeStamp = &v
	return s
}

func (s *SearchBodyRequest) SetGbId(v string) *SearchBodyRequest {
	s.GbId = &v
	return s
}

func (s *SearchBodyRequest) SetOptionList(v map[string]interface{}) *SearchBodyRequest {
	s.OptionList = v
	return s
}

func (s *SearchBodyRequest) SetPageNo(v int32) *SearchBodyRequest {
	s.PageNo = &v
	return s
}

func (s *SearchBodyRequest) SetPageSize(v int32) *SearchBodyRequest {
	s.PageSize = &v
	return s
}

func (s *SearchBodyRequest) SetStartTimeStamp(v int64) *SearchBodyRequest {
	s.StartTimeStamp = &v
	return s
}

type SearchBodyShrinkRequest struct {
	CorpId           *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	EndTimeStamp     *int64  `json:"EndTimeStamp,omitempty" xml:"EndTimeStamp,omitempty"`
	GbId             *string `json:"GbId,omitempty" xml:"GbId,omitempty"`
	OptionListShrink *string `json:"OptionList,omitempty" xml:"OptionList,omitempty"`
	PageNo           *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize         *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTimeStamp   *int64  `json:"StartTimeStamp,omitempty" xml:"StartTimeStamp,omitempty"`
}

func (s SearchBodyShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchBodyShrinkRequest) GoString() string {
	return s.String()
}

func (s *SearchBodyShrinkRequest) SetCorpId(v string) *SearchBodyShrinkRequest {
	s.CorpId = &v
	return s
}

func (s *SearchBodyShrinkRequest) SetEndTimeStamp(v int64) *SearchBodyShrinkRequest {
	s.EndTimeStamp = &v
	return s
}

func (s *SearchBodyShrinkRequest) SetGbId(v string) *SearchBodyShrinkRequest {
	s.GbId = &v
	return s
}

func (s *SearchBodyShrinkRequest) SetOptionListShrink(v string) *SearchBodyShrinkRequest {
	s.OptionListShrink = &v
	return s
}

func (s *SearchBodyShrinkRequest) SetPageNo(v int32) *SearchBodyShrinkRequest {
	s.PageNo = &v
	return s
}

func (s *SearchBodyShrinkRequest) SetPageSize(v int32) *SearchBodyShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *SearchBodyShrinkRequest) SetStartTimeStamp(v int64) *SearchBodyShrinkRequest {
	s.StartTimeStamp = &v
	return s
}

type SearchBodyResponseBody struct {
	Code      *string                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *SearchBodyResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                     `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SearchBodyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchBodyResponseBody) GoString() string {
	return s.String()
}

func (s *SearchBodyResponseBody) SetCode(v string) *SearchBodyResponseBody {
	s.Code = &v
	return s
}

func (s *SearchBodyResponseBody) SetData(v *SearchBodyResponseBodyData) *SearchBodyResponseBody {
	s.Data = v
	return s
}

func (s *SearchBodyResponseBody) SetMessage(v string) *SearchBodyResponseBody {
	s.Message = &v
	return s
}

func (s *SearchBodyResponseBody) SetRequestId(v string) *SearchBodyResponseBody {
	s.RequestId = &v
	return s
}

type SearchBodyResponseBodyData struct {
	PageNo     *int32                               `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize   *int32                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*SearchBodyResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int32                               `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	TotalPage  *int32                               `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s SearchBodyResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SearchBodyResponseBodyData) GoString() string {
	return s.String()
}

func (s *SearchBodyResponseBodyData) SetPageNo(v int32) *SearchBodyResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *SearchBodyResponseBodyData) SetPageSize(v int32) *SearchBodyResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *SearchBodyResponseBodyData) SetRecords(v []*SearchBodyResponseBodyDataRecords) *SearchBodyResponseBodyData {
	s.Records = v
	return s
}

func (s *SearchBodyResponseBodyData) SetTotalCount(v int32) *SearchBodyResponseBodyData {
	s.TotalCount = &v
	return s
}

func (s *SearchBodyResponseBodyData) SetTotalPage(v int32) *SearchBodyResponseBodyData {
	s.TotalPage = &v
	return s
}

type SearchBodyResponseBodyDataRecords struct {
	GbId           *string  `json:"GbId,omitempty" xml:"GbId,omitempty"`
	ImageUrl       *string  `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	LeftTopX       *float32 `json:"LeftTopX,omitempty" xml:"LeftTopX,omitempty"`
	LeftTopY       *float32 `json:"LeftTopY,omitempty" xml:"LeftTopY,omitempty"`
	RightBottomX   *float32 `json:"RightBottomX,omitempty" xml:"RightBottomX,omitempty"`
	RightBottomY   *float32 `json:"RightBottomY,omitempty" xml:"RightBottomY,omitempty"`
	Score          *float32 `json:"Score,omitempty" xml:"Score,omitempty"`
	TargetImageUrl *string  `json:"TargetImageUrl,omitempty" xml:"TargetImageUrl,omitempty"`
}

func (s SearchBodyResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s SearchBodyResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *SearchBodyResponseBodyDataRecords) SetGbId(v string) *SearchBodyResponseBodyDataRecords {
	s.GbId = &v
	return s
}

func (s *SearchBodyResponseBodyDataRecords) SetImageUrl(v string) *SearchBodyResponseBodyDataRecords {
	s.ImageUrl = &v
	return s
}

func (s *SearchBodyResponseBodyDataRecords) SetLeftTopX(v float32) *SearchBodyResponseBodyDataRecords {
	s.LeftTopX = &v
	return s
}

func (s *SearchBodyResponseBodyDataRecords) SetLeftTopY(v float32) *SearchBodyResponseBodyDataRecords {
	s.LeftTopY = &v
	return s
}

func (s *SearchBodyResponseBodyDataRecords) SetRightBottomX(v float32) *SearchBodyResponseBodyDataRecords {
	s.RightBottomX = &v
	return s
}

func (s *SearchBodyResponseBodyDataRecords) SetRightBottomY(v float32) *SearchBodyResponseBodyDataRecords {
	s.RightBottomY = &v
	return s
}

func (s *SearchBodyResponseBodyDataRecords) SetScore(v float32) *SearchBodyResponseBodyDataRecords {
	s.Score = &v
	return s
}

func (s *SearchBodyResponseBodyDataRecords) SetTargetImageUrl(v string) *SearchBodyResponseBodyDataRecords {
	s.TargetImageUrl = &v
	return s
}

type SearchBodyResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SearchBodyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SearchBodyResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchBodyResponse) GoString() string {
	return s.String()
}

func (s *SearchBodyResponse) SetHeaders(v map[string]*string) *SearchBodyResponse {
	s.Headers = v
	return s
}

func (s *SearchBodyResponse) SetBody(v *SearchBodyResponseBody) *SearchBodyResponse {
	s.Body = v
	return s
}

type SearchFaceRequest struct {
	CorpId         *string                `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	EndTimeStamp   *int64                 `json:"EndTimeStamp,omitempty" xml:"EndTimeStamp,omitempty"`
	GbId           *string                `json:"GbId,omitempty" xml:"GbId,omitempty"`
	OptionList     map[string]interface{} `json:"OptionList,omitempty" xml:"OptionList,omitempty"`
	PageNo         *int32                 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize       *int32                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTimeStamp *int64                 `json:"StartTimeStamp,omitempty" xml:"StartTimeStamp,omitempty"`
}

func (s SearchFaceRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchFaceRequest) GoString() string {
	return s.String()
}

func (s *SearchFaceRequest) SetCorpId(v string) *SearchFaceRequest {
	s.CorpId = &v
	return s
}

func (s *SearchFaceRequest) SetEndTimeStamp(v int64) *SearchFaceRequest {
	s.EndTimeStamp = &v
	return s
}

func (s *SearchFaceRequest) SetGbId(v string) *SearchFaceRequest {
	s.GbId = &v
	return s
}

func (s *SearchFaceRequest) SetOptionList(v map[string]interface{}) *SearchFaceRequest {
	s.OptionList = v
	return s
}

func (s *SearchFaceRequest) SetPageNo(v int32) *SearchFaceRequest {
	s.PageNo = &v
	return s
}

func (s *SearchFaceRequest) SetPageSize(v int32) *SearchFaceRequest {
	s.PageSize = &v
	return s
}

func (s *SearchFaceRequest) SetStartTimeStamp(v int64) *SearchFaceRequest {
	s.StartTimeStamp = &v
	return s
}

type SearchFaceShrinkRequest struct {
	CorpId           *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	EndTimeStamp     *int64  `json:"EndTimeStamp,omitempty" xml:"EndTimeStamp,omitempty"`
	GbId             *string `json:"GbId,omitempty" xml:"GbId,omitempty"`
	OptionListShrink *string `json:"OptionList,omitempty" xml:"OptionList,omitempty"`
	PageNo           *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize         *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTimeStamp   *int64  `json:"StartTimeStamp,omitempty" xml:"StartTimeStamp,omitempty"`
}

func (s SearchFaceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchFaceShrinkRequest) GoString() string {
	return s.String()
}

func (s *SearchFaceShrinkRequest) SetCorpId(v string) *SearchFaceShrinkRequest {
	s.CorpId = &v
	return s
}

func (s *SearchFaceShrinkRequest) SetEndTimeStamp(v int64) *SearchFaceShrinkRequest {
	s.EndTimeStamp = &v
	return s
}

func (s *SearchFaceShrinkRequest) SetGbId(v string) *SearchFaceShrinkRequest {
	s.GbId = &v
	return s
}

func (s *SearchFaceShrinkRequest) SetOptionListShrink(v string) *SearchFaceShrinkRequest {
	s.OptionListShrink = &v
	return s
}

func (s *SearchFaceShrinkRequest) SetPageNo(v int32) *SearchFaceShrinkRequest {
	s.PageNo = &v
	return s
}

func (s *SearchFaceShrinkRequest) SetPageSize(v int32) *SearchFaceShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *SearchFaceShrinkRequest) SetStartTimeStamp(v int64) *SearchFaceShrinkRequest {
	s.StartTimeStamp = &v
	return s
}

type SearchFaceResponseBody struct {
	Code      *string                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *SearchFaceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                     `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SearchFaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchFaceResponseBody) GoString() string {
	return s.String()
}

func (s *SearchFaceResponseBody) SetCode(v string) *SearchFaceResponseBody {
	s.Code = &v
	return s
}

func (s *SearchFaceResponseBody) SetData(v *SearchFaceResponseBodyData) *SearchFaceResponseBody {
	s.Data = v
	return s
}

func (s *SearchFaceResponseBody) SetMessage(v string) *SearchFaceResponseBody {
	s.Message = &v
	return s
}

func (s *SearchFaceResponseBody) SetRequestId(v string) *SearchFaceResponseBody {
	s.RequestId = &v
	return s
}

type SearchFaceResponseBodyData struct {
	PageNo     *int32                               `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize   *int32                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*SearchFaceResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int32                               `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	TotalPage  *int32                               `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s SearchFaceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SearchFaceResponseBodyData) GoString() string {
	return s.String()
}

func (s *SearchFaceResponseBodyData) SetPageNo(v int32) *SearchFaceResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *SearchFaceResponseBodyData) SetPageSize(v int32) *SearchFaceResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *SearchFaceResponseBodyData) SetRecords(v []*SearchFaceResponseBodyDataRecords) *SearchFaceResponseBodyData {
	s.Records = v
	return s
}

func (s *SearchFaceResponseBodyData) SetTotalCount(v int32) *SearchFaceResponseBodyData {
	s.TotalCount = &v
	return s
}

func (s *SearchFaceResponseBodyData) SetTotalPage(v int32) *SearchFaceResponseBodyData {
	s.TotalPage = &v
	return s
}

type SearchFaceResponseBodyDataRecords struct {
	GbId            *string  `json:"GbId,omitempty" xml:"GbId,omitempty"`
	ImageUrl        *string  `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	LeftTopX        *float32 `json:"LeftTopX,omitempty" xml:"LeftTopX,omitempty"`
	LeftTopY        *float32 `json:"LeftTopY,omitempty" xml:"LeftTopY,omitempty"`
	MatchSuggestion *string  `json:"MatchSuggestion,omitempty" xml:"MatchSuggestion,omitempty"`
	RightBottomX    *float32 `json:"RightBottomX,omitempty" xml:"RightBottomX,omitempty"`
	RightBottomY    *float32 `json:"RightBottomY,omitempty" xml:"RightBottomY,omitempty"`
	Score           *float32 `json:"Score,omitempty" xml:"Score,omitempty"`
	SourceId        *string  `json:"SourceId,omitempty" xml:"SourceId,omitempty"`
	TargetImageUrl  *string  `json:"TargetImageUrl,omitempty" xml:"TargetImageUrl,omitempty"`
}

func (s SearchFaceResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s SearchFaceResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *SearchFaceResponseBodyDataRecords) SetGbId(v string) *SearchFaceResponseBodyDataRecords {
	s.GbId = &v
	return s
}

func (s *SearchFaceResponseBodyDataRecords) SetImageUrl(v string) *SearchFaceResponseBodyDataRecords {
	s.ImageUrl = &v
	return s
}

func (s *SearchFaceResponseBodyDataRecords) SetLeftTopX(v float32) *SearchFaceResponseBodyDataRecords {
	s.LeftTopX = &v
	return s
}

func (s *SearchFaceResponseBodyDataRecords) SetLeftTopY(v float32) *SearchFaceResponseBodyDataRecords {
	s.LeftTopY = &v
	return s
}

func (s *SearchFaceResponseBodyDataRecords) SetMatchSuggestion(v string) *SearchFaceResponseBodyDataRecords {
	s.MatchSuggestion = &v
	return s
}

func (s *SearchFaceResponseBodyDataRecords) SetRightBottomX(v float32) *SearchFaceResponseBodyDataRecords {
	s.RightBottomX = &v
	return s
}

func (s *SearchFaceResponseBodyDataRecords) SetRightBottomY(v float32) *SearchFaceResponseBodyDataRecords {
	s.RightBottomY = &v
	return s
}

func (s *SearchFaceResponseBodyDataRecords) SetScore(v float32) *SearchFaceResponseBodyDataRecords {
	s.Score = &v
	return s
}

func (s *SearchFaceResponseBodyDataRecords) SetSourceId(v string) *SearchFaceResponseBodyDataRecords {
	s.SourceId = &v
	return s
}

func (s *SearchFaceResponseBodyDataRecords) SetTargetImageUrl(v string) *SearchFaceResponseBodyDataRecords {
	s.TargetImageUrl = &v
	return s
}

type SearchFaceResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SearchFaceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SearchFaceResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchFaceResponse) GoString() string {
	return s.String()
}

func (s *SearchFaceResponse) SetHeaders(v map[string]*string) *SearchFaceResponse {
	s.Headers = v
	return s
}

func (s *SearchFaceResponse) SetBody(v *SearchFaceResponseBody) *SearchFaceResponse {
	s.Body = v
	return s
}

type SearchObjectRequest struct {
	AlgorithmType *string                `json:"AlgorithmType,omitempty" xml:"AlgorithmType,omitempty"`
	Conditions    map[string]interface{} `json:"Conditions,omitempty" xml:"Conditions,omitempty"`
	CorpId        *string                `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DeviceList    map[string]interface{} `json:"DeviceList,omitempty" xml:"DeviceList,omitempty"`
	EndTime       *int64                 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	ImagePath     map[string]interface{} `json:"ImagePath,omitempty" xml:"ImagePath,omitempty"`
	ObjectType    *string                `json:"ObjectType,omitempty" xml:"ObjectType,omitempty"`
	PageNumber    *int32                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PicUrl        *string                `json:"PicUrl,omitempty" xml:"PicUrl,omitempty"`
	StartTime     *int64                 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s SearchObjectRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchObjectRequest) GoString() string {
	return s.String()
}

func (s *SearchObjectRequest) SetAlgorithmType(v string) *SearchObjectRequest {
	s.AlgorithmType = &v
	return s
}

func (s *SearchObjectRequest) SetConditions(v map[string]interface{}) *SearchObjectRequest {
	s.Conditions = v
	return s
}

func (s *SearchObjectRequest) SetCorpId(v string) *SearchObjectRequest {
	s.CorpId = &v
	return s
}

func (s *SearchObjectRequest) SetDeviceList(v map[string]interface{}) *SearchObjectRequest {
	s.DeviceList = v
	return s
}

func (s *SearchObjectRequest) SetEndTime(v int64) *SearchObjectRequest {
	s.EndTime = &v
	return s
}

func (s *SearchObjectRequest) SetImagePath(v map[string]interface{}) *SearchObjectRequest {
	s.ImagePath = v
	return s
}

func (s *SearchObjectRequest) SetObjectType(v string) *SearchObjectRequest {
	s.ObjectType = &v
	return s
}

func (s *SearchObjectRequest) SetPageNumber(v int32) *SearchObjectRequest {
	s.PageNumber = &v
	return s
}

func (s *SearchObjectRequest) SetPageSize(v int32) *SearchObjectRequest {
	s.PageSize = &v
	return s
}

func (s *SearchObjectRequest) SetPicUrl(v string) *SearchObjectRequest {
	s.PicUrl = &v
	return s
}

func (s *SearchObjectRequest) SetStartTime(v int64) *SearchObjectRequest {
	s.StartTime = &v
	return s
}

type SearchObjectShrinkRequest struct {
	AlgorithmType    *string `json:"AlgorithmType,omitempty" xml:"AlgorithmType,omitempty"`
	ConditionsShrink *string `json:"Conditions,omitempty" xml:"Conditions,omitempty"`
	CorpId           *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DeviceListShrink *string `json:"DeviceList,omitempty" xml:"DeviceList,omitempty"`
	EndTime          *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	ImagePathShrink  *string `json:"ImagePath,omitempty" xml:"ImagePath,omitempty"`
	ObjectType       *string `json:"ObjectType,omitempty" xml:"ObjectType,omitempty"`
	PageNumber       *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize         *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PicUrl           *string `json:"PicUrl,omitempty" xml:"PicUrl,omitempty"`
	StartTime        *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s SearchObjectShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchObjectShrinkRequest) GoString() string {
	return s.String()
}

func (s *SearchObjectShrinkRequest) SetAlgorithmType(v string) *SearchObjectShrinkRequest {
	s.AlgorithmType = &v
	return s
}

func (s *SearchObjectShrinkRequest) SetConditionsShrink(v string) *SearchObjectShrinkRequest {
	s.ConditionsShrink = &v
	return s
}

func (s *SearchObjectShrinkRequest) SetCorpId(v string) *SearchObjectShrinkRequest {
	s.CorpId = &v
	return s
}

func (s *SearchObjectShrinkRequest) SetDeviceListShrink(v string) *SearchObjectShrinkRequest {
	s.DeviceListShrink = &v
	return s
}

func (s *SearchObjectShrinkRequest) SetEndTime(v int64) *SearchObjectShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *SearchObjectShrinkRequest) SetImagePathShrink(v string) *SearchObjectShrinkRequest {
	s.ImagePathShrink = &v
	return s
}

func (s *SearchObjectShrinkRequest) SetObjectType(v string) *SearchObjectShrinkRequest {
	s.ObjectType = &v
	return s
}

func (s *SearchObjectShrinkRequest) SetPageNumber(v int32) *SearchObjectShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *SearchObjectShrinkRequest) SetPageSize(v int32) *SearchObjectShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *SearchObjectShrinkRequest) SetPicUrl(v string) *SearchObjectShrinkRequest {
	s.PicUrl = &v
	return s
}

func (s *SearchObjectShrinkRequest) SetStartTime(v int64) *SearchObjectShrinkRequest {
	s.StartTime = &v
	return s
}

type SearchObjectResponseBody struct {
	Code      *string                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *SearchObjectResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                       `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SearchObjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchObjectResponseBody) GoString() string {
	return s.String()
}

func (s *SearchObjectResponseBody) SetCode(v string) *SearchObjectResponseBody {
	s.Code = &v
	return s
}

func (s *SearchObjectResponseBody) SetData(v *SearchObjectResponseBodyData) *SearchObjectResponseBody {
	s.Data = v
	return s
}

func (s *SearchObjectResponseBody) SetMessage(v string) *SearchObjectResponseBody {
	s.Message = &v
	return s
}

func (s *SearchObjectResponseBody) SetRequestId(v string) *SearchObjectResponseBody {
	s.RequestId = &v
	return s
}

type SearchObjectResponseBodyData struct {
	PageNumber *int32                                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*SearchObjectResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int32                                 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	TotalPage  *int32                                 `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s SearchObjectResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SearchObjectResponseBodyData) GoString() string {
	return s.String()
}

func (s *SearchObjectResponseBodyData) SetPageNumber(v int32) *SearchObjectResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *SearchObjectResponseBodyData) SetPageSize(v int32) *SearchObjectResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *SearchObjectResponseBodyData) SetRecords(v []*SearchObjectResponseBodyDataRecords) *SearchObjectResponseBodyData {
	s.Records = v
	return s
}

func (s *SearchObjectResponseBodyData) SetTotalCount(v int32) *SearchObjectResponseBodyData {
	s.TotalCount = &v
	return s
}

func (s *SearchObjectResponseBodyData) SetTotalPage(v int32) *SearchObjectResponseBodyData {
	s.TotalPage = &v
	return s
}

type SearchObjectResponseBodyDataRecords struct {
	CompareResult   *string  `json:"CompareResult,omitempty" xml:"CompareResult,omitempty"`
	DeviceID        *string  `json:"DeviceID,omitempty" xml:"DeviceID,omitempty"`
	LeftTopX        *int32   `json:"LeftTopX,omitempty" xml:"LeftTopX,omitempty"`
	LeftTopY        *int32   `json:"LeftTopY,omitempty" xml:"LeftTopY,omitempty"`
	RightBtmX       *int32   `json:"RightBtmX,omitempty" xml:"RightBtmX,omitempty"`
	RightBtmY       *int32   `json:"RightBtmY,omitempty" xml:"RightBtmY,omitempty"`
	Score           *float32 `json:"Score,omitempty" xml:"Score,omitempty"`
	ShotTime        *int64   `json:"ShotTime,omitempty" xml:"ShotTime,omitempty"`
	SourceID        *string  `json:"SourceID,omitempty" xml:"SourceID,omitempty"`
	SourceImagePath *string  `json:"SourceImagePath,omitempty" xml:"SourceImagePath,omitempty"`
	SourceImageUrl  *string  `json:"SourceImageUrl,omitempty" xml:"SourceImageUrl,omitempty"`
	TargetImagePath *string  `json:"TargetImagePath,omitempty" xml:"TargetImagePath,omitempty"`
	TargetImageUrl  *string  `json:"TargetImageUrl,omitempty" xml:"TargetImageUrl,omitempty"`
}

func (s SearchObjectResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s SearchObjectResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *SearchObjectResponseBodyDataRecords) SetCompareResult(v string) *SearchObjectResponseBodyDataRecords {
	s.CompareResult = &v
	return s
}

func (s *SearchObjectResponseBodyDataRecords) SetDeviceID(v string) *SearchObjectResponseBodyDataRecords {
	s.DeviceID = &v
	return s
}

func (s *SearchObjectResponseBodyDataRecords) SetLeftTopX(v int32) *SearchObjectResponseBodyDataRecords {
	s.LeftTopX = &v
	return s
}

func (s *SearchObjectResponseBodyDataRecords) SetLeftTopY(v int32) *SearchObjectResponseBodyDataRecords {
	s.LeftTopY = &v
	return s
}

func (s *SearchObjectResponseBodyDataRecords) SetRightBtmX(v int32) *SearchObjectResponseBodyDataRecords {
	s.RightBtmX = &v
	return s
}

func (s *SearchObjectResponseBodyDataRecords) SetRightBtmY(v int32) *SearchObjectResponseBodyDataRecords {
	s.RightBtmY = &v
	return s
}

func (s *SearchObjectResponseBodyDataRecords) SetScore(v float32) *SearchObjectResponseBodyDataRecords {
	s.Score = &v
	return s
}

func (s *SearchObjectResponseBodyDataRecords) SetShotTime(v int64) *SearchObjectResponseBodyDataRecords {
	s.ShotTime = &v
	return s
}

func (s *SearchObjectResponseBodyDataRecords) SetSourceID(v string) *SearchObjectResponseBodyDataRecords {
	s.SourceID = &v
	return s
}

func (s *SearchObjectResponseBodyDataRecords) SetSourceImagePath(v string) *SearchObjectResponseBodyDataRecords {
	s.SourceImagePath = &v
	return s
}

func (s *SearchObjectResponseBodyDataRecords) SetSourceImageUrl(v string) *SearchObjectResponseBodyDataRecords {
	s.SourceImageUrl = &v
	return s
}

func (s *SearchObjectResponseBodyDataRecords) SetTargetImagePath(v string) *SearchObjectResponseBodyDataRecords {
	s.TargetImagePath = &v
	return s
}

func (s *SearchObjectResponseBodyDataRecords) SetTargetImageUrl(v string) *SearchObjectResponseBodyDataRecords {
	s.TargetImageUrl = &v
	return s
}

type SearchObjectResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SearchObjectResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SearchObjectResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchObjectResponse) GoString() string {
	return s.String()
}

func (s *SearchObjectResponse) SetHeaders(v map[string]*string) *SearchObjectResponse {
	s.Headers = v
	return s
}

func (s *SearchObjectResponse) SetBody(v *SearchObjectResponseBody) *SearchObjectResponse {
	s.Body = v
	return s
}

type SearchTargetRequest struct {
	BeginTime           *string  `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	CorpId              *string  `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DeviceList          *string  `json:"DeviceList,omitempty" xml:"DeviceList,omitempty"`
	EndTime             *string  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	ModelId             *string  `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	OrderBy             *string  `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	PageNumber          *int64   `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize            *int64   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SimilarityThreshold *float64 `json:"SimilarityThreshold,omitempty" xml:"SimilarityThreshold,omitempty"`
	TargetAttributes    *string  `json:"TargetAttributes,omitempty" xml:"TargetAttributes,omitempty"`
	TargetImageData     *string  `json:"TargetImageData,omitempty" xml:"TargetImageData,omitempty"`
	TargetImageUrl      *string  `json:"TargetImageUrl,omitempty" xml:"TargetImageUrl,omitempty"`
	TargetType          *string  `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
}

func (s SearchTargetRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchTargetRequest) GoString() string {
	return s.String()
}

func (s *SearchTargetRequest) SetBeginTime(v string) *SearchTargetRequest {
	s.BeginTime = &v
	return s
}

func (s *SearchTargetRequest) SetCorpId(v string) *SearchTargetRequest {
	s.CorpId = &v
	return s
}

func (s *SearchTargetRequest) SetDeviceList(v string) *SearchTargetRequest {
	s.DeviceList = &v
	return s
}

func (s *SearchTargetRequest) SetEndTime(v string) *SearchTargetRequest {
	s.EndTime = &v
	return s
}

func (s *SearchTargetRequest) SetModelId(v string) *SearchTargetRequest {
	s.ModelId = &v
	return s
}

func (s *SearchTargetRequest) SetOrderBy(v string) *SearchTargetRequest {
	s.OrderBy = &v
	return s
}

func (s *SearchTargetRequest) SetPageNumber(v int64) *SearchTargetRequest {
	s.PageNumber = &v
	return s
}

func (s *SearchTargetRequest) SetPageSize(v int64) *SearchTargetRequest {
	s.PageSize = &v
	return s
}

func (s *SearchTargetRequest) SetSimilarityThreshold(v float64) *SearchTargetRequest {
	s.SimilarityThreshold = &v
	return s
}

func (s *SearchTargetRequest) SetTargetAttributes(v string) *SearchTargetRequest {
	s.TargetAttributes = &v
	return s
}

func (s *SearchTargetRequest) SetTargetImageData(v string) *SearchTargetRequest {
	s.TargetImageData = &v
	return s
}

func (s *SearchTargetRequest) SetTargetImageUrl(v string) *SearchTargetRequest {
	s.TargetImageUrl = &v
	return s
}

func (s *SearchTargetRequest) SetTargetType(v string) *SearchTargetRequest {
	s.TargetType = &v
	return s
}

type SearchTargetResponseBody struct {
	Code    *string                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *SearchTargetResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                       `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SearchTargetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchTargetResponseBody) GoString() string {
	return s.String()
}

func (s *SearchTargetResponseBody) SetCode(v string) *SearchTargetResponseBody {
	s.Code = &v
	return s
}

func (s *SearchTargetResponseBody) SetData(v *SearchTargetResponseBodyData) *SearchTargetResponseBody {
	s.Data = v
	return s
}

func (s *SearchTargetResponseBody) SetMessage(v string) *SearchTargetResponseBody {
	s.Message = &v
	return s
}

func (s *SearchTargetResponseBody) SetRequestId(v string) *SearchTargetResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchTargetResponseBody) SetSuccess(v bool) *SearchTargetResponseBody {
	s.Success = &v
	return s
}

type SearchTargetResponseBodyData struct {
	PageNumber *int64                                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int64                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*SearchTargetResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int64                                 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s SearchTargetResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SearchTargetResponseBodyData) GoString() string {
	return s.String()
}

func (s *SearchTargetResponseBodyData) SetPageNumber(v int64) *SearchTargetResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *SearchTargetResponseBodyData) SetPageSize(v int64) *SearchTargetResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *SearchTargetResponseBodyData) SetRecords(v []*SearchTargetResponseBodyDataRecords) *SearchTargetResponseBodyData {
	s.Records = v
	return s
}

func (s *SearchTargetResponseBodyData) SetTotalCount(v int64) *SearchTargetResponseBodyData {
	s.TotalCount = &v
	return s
}

type SearchTargetResponseBodyDataRecords struct {
	DeviceId              *string  `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	LeftTopX              *int64   `json:"LeftTopX,omitempty" xml:"LeftTopX,omitempty"`
	LeftTopY              *int64   `json:"LeftTopY,omitempty" xml:"LeftTopY,omitempty"`
	RightBottomX          *int64   `json:"RightBottomX,omitempty" xml:"RightBottomX,omitempty"`
	RightBottomY          *int64   `json:"RightBottomY,omitempty" xml:"RightBottomY,omitempty"`
	SourceImageUrl        *string  `json:"SourceImageUrl,omitempty" xml:"SourceImageUrl,omitempty"`
	TargetAttributes      *string  `json:"TargetAttributes,omitempty" xml:"TargetAttributes,omitempty"`
	TargetImageSimilarity *float64 `json:"TargetImageSimilarity,omitempty" xml:"TargetImageSimilarity,omitempty"`
	TargetImageUrl        *string  `json:"TargetImageUrl,omitempty" xml:"TargetImageUrl,omitempty"`
	TargetType            *string  `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
	Timestamp             *string  `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s SearchTargetResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s SearchTargetResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *SearchTargetResponseBodyDataRecords) SetDeviceId(v string) *SearchTargetResponseBodyDataRecords {
	s.DeviceId = &v
	return s
}

func (s *SearchTargetResponseBodyDataRecords) SetLeftTopX(v int64) *SearchTargetResponseBodyDataRecords {
	s.LeftTopX = &v
	return s
}

func (s *SearchTargetResponseBodyDataRecords) SetLeftTopY(v int64) *SearchTargetResponseBodyDataRecords {
	s.LeftTopY = &v
	return s
}

func (s *SearchTargetResponseBodyDataRecords) SetRightBottomX(v int64) *SearchTargetResponseBodyDataRecords {
	s.RightBottomX = &v
	return s
}

func (s *SearchTargetResponseBodyDataRecords) SetRightBottomY(v int64) *SearchTargetResponseBodyDataRecords {
	s.RightBottomY = &v
	return s
}

func (s *SearchTargetResponseBodyDataRecords) SetSourceImageUrl(v string) *SearchTargetResponseBodyDataRecords {
	s.SourceImageUrl = &v
	return s
}

func (s *SearchTargetResponseBodyDataRecords) SetTargetAttributes(v string) *SearchTargetResponseBodyDataRecords {
	s.TargetAttributes = &v
	return s
}

func (s *SearchTargetResponseBodyDataRecords) SetTargetImageSimilarity(v float64) *SearchTargetResponseBodyDataRecords {
	s.TargetImageSimilarity = &v
	return s
}

func (s *SearchTargetResponseBodyDataRecords) SetTargetImageUrl(v string) *SearchTargetResponseBodyDataRecords {
	s.TargetImageUrl = &v
	return s
}

func (s *SearchTargetResponseBodyDataRecords) SetTargetType(v string) *SearchTargetResponseBodyDataRecords {
	s.TargetType = &v
	return s
}

func (s *SearchTargetResponseBodyDataRecords) SetTimestamp(v string) *SearchTargetResponseBodyDataRecords {
	s.Timestamp = &v
	return s
}

type SearchTargetResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SearchTargetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SearchTargetResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchTargetResponse) GoString() string {
	return s.String()
}

func (s *SearchTargetResponse) SetHeaders(v map[string]*string) *SearchTargetResponse {
	s.Headers = v
	return s
}

func (s *SearchTargetResponse) SetBody(v *SearchTargetResponseBody) *SearchTargetResponse {
	s.Body = v
	return s
}

type SetAiotStorageInfoRequest struct {
	EventAlarmMq             *SetAiotStorageInfoRequestEventAlarmMq             `json:"EventAlarmMq,omitempty" xml:"EventAlarmMq,omitempty" type:"Struct"`
	EventAlarmPictureStorage *SetAiotStorageInfoRequestEventAlarmPictureStorage `json:"EventAlarmPictureStorage,omitempty" xml:"EventAlarmPictureStorage,omitempty" type:"Struct"`
}

func (s SetAiotStorageInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s SetAiotStorageInfoRequest) GoString() string {
	return s.String()
}

func (s *SetAiotStorageInfoRequest) SetEventAlarmMq(v *SetAiotStorageInfoRequestEventAlarmMq) *SetAiotStorageInfoRequest {
	s.EventAlarmMq = v
	return s
}

func (s *SetAiotStorageInfoRequest) SetEventAlarmPictureStorage(v *SetAiotStorageInfoRequestEventAlarmPictureStorage) *SetAiotStorageInfoRequest {
	s.EventAlarmPictureStorage = v
	return s
}

type SetAiotStorageInfoRequestEventAlarmMq struct {
	AlarmTopic *string `json:"AlarmTopic,omitempty" xml:"AlarmTopic,omitempty"`
	EventTopic *string `json:"EventTopic,omitempty" xml:"EventTopic,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MqType     *string `json:"MqType,omitempty" xml:"MqType,omitempty"`
	RamArnRole *string `json:"RamArnRole,omitempty" xml:"RamArnRole,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SetAiotStorageInfoRequestEventAlarmMq) String() string {
	return tea.Prettify(s)
}

func (s SetAiotStorageInfoRequestEventAlarmMq) GoString() string {
	return s.String()
}

func (s *SetAiotStorageInfoRequestEventAlarmMq) SetAlarmTopic(v string) *SetAiotStorageInfoRequestEventAlarmMq {
	s.AlarmTopic = &v
	return s
}

func (s *SetAiotStorageInfoRequestEventAlarmMq) SetEventTopic(v string) *SetAiotStorageInfoRequestEventAlarmMq {
	s.EventTopic = &v
	return s
}

func (s *SetAiotStorageInfoRequestEventAlarmMq) SetInstanceId(v string) *SetAiotStorageInfoRequestEventAlarmMq {
	s.InstanceId = &v
	return s
}

func (s *SetAiotStorageInfoRequestEventAlarmMq) SetMqType(v string) *SetAiotStorageInfoRequestEventAlarmMq {
	s.MqType = &v
	return s
}

func (s *SetAiotStorageInfoRequestEventAlarmMq) SetRamArnRole(v string) *SetAiotStorageInfoRequestEventAlarmMq {
	s.RamArnRole = &v
	return s
}

func (s *SetAiotStorageInfoRequestEventAlarmMq) SetRegionId(v string) *SetAiotStorageInfoRequestEventAlarmMq {
	s.RegionId = &v
	return s
}

type SetAiotStorageInfoRequestEventAlarmPictureStorage struct {
	Bucket      *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Endpoint    *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	Path        *string `json:"Path,omitempty" xml:"Path,omitempty"`
	Proxy       *string `json:"Proxy,omitempty" xml:"Proxy,omitempty"`
	RamArnRole  *string `json:"RamArnRole,omitempty" xml:"RamArnRole,omitempty"`
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s SetAiotStorageInfoRequestEventAlarmPictureStorage) String() string {
	return tea.Prettify(s)
}

func (s SetAiotStorageInfoRequestEventAlarmPictureStorage) GoString() string {
	return s.String()
}

func (s *SetAiotStorageInfoRequestEventAlarmPictureStorage) SetBucket(v string) *SetAiotStorageInfoRequestEventAlarmPictureStorage {
	s.Bucket = &v
	return s
}

func (s *SetAiotStorageInfoRequestEventAlarmPictureStorage) SetEndpoint(v string) *SetAiotStorageInfoRequestEventAlarmPictureStorage {
	s.Endpoint = &v
	return s
}

func (s *SetAiotStorageInfoRequestEventAlarmPictureStorage) SetPath(v string) *SetAiotStorageInfoRequestEventAlarmPictureStorage {
	s.Path = &v
	return s
}

func (s *SetAiotStorageInfoRequestEventAlarmPictureStorage) SetProxy(v string) *SetAiotStorageInfoRequestEventAlarmPictureStorage {
	s.Proxy = &v
	return s
}

func (s *SetAiotStorageInfoRequestEventAlarmPictureStorage) SetRamArnRole(v string) *SetAiotStorageInfoRequestEventAlarmPictureStorage {
	s.RamArnRole = &v
	return s
}

func (s *SetAiotStorageInfoRequestEventAlarmPictureStorage) SetStorageType(v string) *SetAiotStorageInfoRequestEventAlarmPictureStorage {
	s.StorageType = &v
	return s
}

type SetAiotStorageInfoShrinkRequest struct {
	EventAlarmMqShrink             *string `json:"EventAlarmMq,omitempty" xml:"EventAlarmMq,omitempty"`
	EventAlarmPictureStorageShrink *string `json:"EventAlarmPictureStorage,omitempty" xml:"EventAlarmPictureStorage,omitempty"`
}

func (s SetAiotStorageInfoShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SetAiotStorageInfoShrinkRequest) GoString() string {
	return s.String()
}

func (s *SetAiotStorageInfoShrinkRequest) SetEventAlarmMqShrink(v string) *SetAiotStorageInfoShrinkRequest {
	s.EventAlarmMqShrink = &v
	return s
}

func (s *SetAiotStorageInfoShrinkRequest) SetEventAlarmPictureStorageShrink(v string) *SetAiotStorageInfoShrinkRequest {
	s.EventAlarmPictureStorageShrink = &v
	return s
}

type SetAiotStorageInfoResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetAiotStorageInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetAiotStorageInfoResponseBody) GoString() string {
	return s.String()
}

func (s *SetAiotStorageInfoResponseBody) SetCode(v string) *SetAiotStorageInfoResponseBody {
	s.Code = &v
	return s
}

func (s *SetAiotStorageInfoResponseBody) SetMessage(v string) *SetAiotStorageInfoResponseBody {
	s.Message = &v
	return s
}

func (s *SetAiotStorageInfoResponseBody) SetRequestId(v string) *SetAiotStorageInfoResponseBody {
	s.RequestId = &v
	return s
}

type SetAiotStorageInfoResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SetAiotStorageInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetAiotStorageInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s SetAiotStorageInfoResponse) GoString() string {
	return s.String()
}

func (s *SetAiotStorageInfoResponse) SetHeaders(v map[string]*string) *SetAiotStorageInfoResponse {
	s.Headers = v
	return s
}

func (s *SetAiotStorageInfoResponse) SetBody(v *SetAiotStorageInfoResponseBody) *SetAiotStorageInfoResponse {
	s.Body = v
	return s
}

type SetStreamModeRequest struct {
	DeviceIdList *string `json:"DeviceIdList,omitempty" xml:"DeviceIdList,omitempty"`
	StreamMode   *string `json:"StreamMode,omitempty" xml:"StreamMode,omitempty"`
}

func (s SetStreamModeRequest) String() string {
	return tea.Prettify(s)
}

func (s SetStreamModeRequest) GoString() string {
	return s.String()
}

func (s *SetStreamModeRequest) SetDeviceIdList(v string) *SetStreamModeRequest {
	s.DeviceIdList = &v
	return s
}

func (s *SetStreamModeRequest) SetStreamMode(v string) *SetStreamModeRequest {
	s.StreamMode = &v
	return s
}

type SetStreamModeResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetStreamModeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetStreamModeResponseBody) GoString() string {
	return s.String()
}

func (s *SetStreamModeResponseBody) SetCode(v string) *SetStreamModeResponseBody {
	s.Code = &v
	return s
}

func (s *SetStreamModeResponseBody) SetMessage(v string) *SetStreamModeResponseBody {
	s.Message = &v
	return s
}

func (s *SetStreamModeResponseBody) SetRequestId(v string) *SetStreamModeResponseBody {
	s.RequestId = &v
	return s
}

type SetStreamModeResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SetStreamModeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetStreamModeResponse) String() string {
	return tea.Prettify(s)
}

func (s SetStreamModeResponse) GoString() string {
	return s.String()
}

func (s *SetStreamModeResponse) SetHeaders(v map[string]*string) *SetStreamModeResponse {
	s.Headers = v
	return s
}

func (s *SetStreamModeResponse) SetBody(v *SetStreamModeResponseBody) *SetStreamModeResponse {
	s.Body = v
	return s
}

type StartModelServiceRequest struct {
	ModelServiceId *string `json:"ModelServiceId,omitempty" xml:"ModelServiceId,omitempty"`
}

func (s StartModelServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s StartModelServiceRequest) GoString() string {
	return s.String()
}

func (s *StartModelServiceRequest) SetModelServiceId(v string) *StartModelServiceRequest {
	s.ModelServiceId = &v
	return s
}

type StartModelServiceResponseBody struct {
	Code    *string                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *StartModelServiceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                            `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartModelServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartModelServiceResponseBody) GoString() string {
	return s.String()
}

func (s *StartModelServiceResponseBody) SetCode(v string) *StartModelServiceResponseBody {
	s.Code = &v
	return s
}

func (s *StartModelServiceResponseBody) SetData(v *StartModelServiceResponseBodyData) *StartModelServiceResponseBody {
	s.Data = v
	return s
}

func (s *StartModelServiceResponseBody) SetMessage(v string) *StartModelServiceResponseBody {
	s.Message = &v
	return s
}

func (s *StartModelServiceResponseBody) SetRequestId(v string) *StartModelServiceResponseBody {
	s.RequestId = &v
	return s
}

type StartModelServiceResponseBodyData struct {
	ModelServiceInstanceId   *string `json:"ModelServiceInstanceId,omitempty" xml:"ModelServiceInstanceId,omitempty"`
	ModelServiceInstanceName *int32  `json:"ModelServiceInstanceName,omitempty" xml:"ModelServiceInstanceName,omitempty"`
	ModelServiceStatus       *string `json:"ModelServiceStatus,omitempty" xml:"ModelServiceStatus,omitempty"`
}

func (s StartModelServiceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s StartModelServiceResponseBodyData) GoString() string {
	return s.String()
}

func (s *StartModelServiceResponseBodyData) SetModelServiceInstanceId(v string) *StartModelServiceResponseBodyData {
	s.ModelServiceInstanceId = &v
	return s
}

func (s *StartModelServiceResponseBodyData) SetModelServiceInstanceName(v int32) *StartModelServiceResponseBodyData {
	s.ModelServiceInstanceName = &v
	return s
}

func (s *StartModelServiceResponseBodyData) SetModelServiceStatus(v string) *StartModelServiceResponseBodyData {
	s.ModelServiceStatus = &v
	return s
}

type StartModelServiceResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StartModelServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartModelServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s StartModelServiceResponse) GoString() string {
	return s.String()
}

func (s *StartModelServiceResponse) SetHeaders(v map[string]*string) *StartModelServiceResponse {
	s.Headers = v
	return s
}

func (s *StartModelServiceResponse) SetBody(v *StartModelServiceResponseBody) *StartModelServiceResponse {
	s.Body = v
	return s
}

type StartStreamsRequest struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 全局编号,支持多个,英文逗号分隔
	DeviceIdList *string `json:"DeviceIdList,omitempty" xml:"DeviceIdList,omitempty"`
}

func (s StartStreamsRequest) String() string {
	return tea.Prettify(s)
}

func (s StartStreamsRequest) GoString() string {
	return s.String()
}

func (s *StartStreamsRequest) SetDescription(v string) *StartStreamsRequest {
	s.Description = &v
	return s
}

func (s *StartStreamsRequest) SetDeviceIdList(v string) *StartStreamsRequest {
	s.DeviceIdList = &v
	return s
}

type StartStreamsResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartStreamsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartStreamsResponseBody) GoString() string {
	return s.String()
}

func (s *StartStreamsResponseBody) SetCode(v string) *StartStreamsResponseBody {
	s.Code = &v
	return s
}

func (s *StartStreamsResponseBody) SetMessage(v string) *StartStreamsResponseBody {
	s.Message = &v
	return s
}

func (s *StartStreamsResponseBody) SetRequestId(v string) *StartStreamsResponseBody {
	s.RequestId = &v
	return s
}

type StartStreamsResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StartStreamsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartStreamsResponse) String() string {
	return tea.Prettify(s)
}

func (s StartStreamsResponse) GoString() string {
	return s.String()
}

func (s *StartStreamsResponse) SetHeaders(v map[string]*string) *StartStreamsResponse {
	s.Headers = v
	return s
}

func (s *StartStreamsResponse) SetBody(v *StartStreamsResponseBody) *StartStreamsResponse {
	s.Body = v
	return s
}

type StopModelServiceRequest struct {
	ModelServiceId *string `json:"ModelServiceId,omitempty" xml:"ModelServiceId,omitempty"`
}

func (s StopModelServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s StopModelServiceRequest) GoString() string {
	return s.String()
}

func (s *StopModelServiceRequest) SetModelServiceId(v string) *StopModelServiceRequest {
	s.ModelServiceId = &v
	return s
}

type StopModelServiceResponseBody struct {
	Code    *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *StopModelServiceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                           `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopModelServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopModelServiceResponseBody) GoString() string {
	return s.String()
}

func (s *StopModelServiceResponseBody) SetCode(v string) *StopModelServiceResponseBody {
	s.Code = &v
	return s
}

func (s *StopModelServiceResponseBody) SetData(v *StopModelServiceResponseBodyData) *StopModelServiceResponseBody {
	s.Data = v
	return s
}

func (s *StopModelServiceResponseBody) SetMessage(v string) *StopModelServiceResponseBody {
	s.Message = &v
	return s
}

func (s *StopModelServiceResponseBody) SetRequestId(v string) *StopModelServiceResponseBody {
	s.RequestId = &v
	return s
}

type StopModelServiceResponseBodyData struct {
	ModelServiceInstanceId   *string `json:"ModelServiceInstanceId,omitempty" xml:"ModelServiceInstanceId,omitempty"`
	ModelServiceInstanceName *int32  `json:"ModelServiceInstanceName,omitempty" xml:"ModelServiceInstanceName,omitempty"`
	ModelServiceStatus       *string `json:"ModelServiceStatus,omitempty" xml:"ModelServiceStatus,omitempty"`
}

func (s StopModelServiceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s StopModelServiceResponseBodyData) GoString() string {
	return s.String()
}

func (s *StopModelServiceResponseBodyData) SetModelServiceInstanceId(v string) *StopModelServiceResponseBodyData {
	s.ModelServiceInstanceId = &v
	return s
}

func (s *StopModelServiceResponseBodyData) SetModelServiceInstanceName(v int32) *StopModelServiceResponseBodyData {
	s.ModelServiceInstanceName = &v
	return s
}

func (s *StopModelServiceResponseBodyData) SetModelServiceStatus(v string) *StopModelServiceResponseBodyData {
	s.ModelServiceStatus = &v
	return s
}

type StopModelServiceResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StopModelServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopModelServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s StopModelServiceResponse) GoString() string {
	return s.String()
}

func (s *StopModelServiceResponse) SetHeaders(v map[string]*string) *StopModelServiceResponse {
	s.Headers = v
	return s
}

func (s *StopModelServiceResponse) SetBody(v *StopModelServiceResponseBody) *StopModelServiceResponse {
	s.Body = v
	return s
}

type StopMonitorRequest struct {
	AlgorithmVendor *string `json:"AlgorithmVendor,omitempty" xml:"AlgorithmVendor,omitempty"`
	TaskId          *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s StopMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s StopMonitorRequest) GoString() string {
	return s.String()
}

func (s *StopMonitorRequest) SetAlgorithmVendor(v string) *StopMonitorRequest {
	s.AlgorithmVendor = &v
	return s
}

func (s *StopMonitorRequest) SetTaskId(v string) *StopMonitorRequest {
	s.TaskId = &v
	return s
}

type StopMonitorResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *StopMonitorResponseBody) SetCode(v string) *StopMonitorResponseBody {
	s.Code = &v
	return s
}

func (s *StopMonitorResponseBody) SetData(v string) *StopMonitorResponseBody {
	s.Data = &v
	return s
}

func (s *StopMonitorResponseBody) SetMessage(v string) *StopMonitorResponseBody {
	s.Message = &v
	return s
}

func (s *StopMonitorResponseBody) SetRequestId(v string) *StopMonitorResponseBody {
	s.RequestId = &v
	return s
}

type StopMonitorResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StopMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s StopMonitorResponse) GoString() string {
	return s.String()
}

func (s *StopMonitorResponse) SetHeaders(v map[string]*string) *StopMonitorResponse {
	s.Headers = v
	return s
}

func (s *StopMonitorResponse) SetBody(v *StopMonitorResponseBody) *StopMonitorResponse {
	s.Body = v
	return s
}

type StopStreamsRequest struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 全局编号,支持多个,英文逗号分隔
	DeviceIdList *string `json:"DeviceIdList,omitempty" xml:"DeviceIdList,omitempty"`
}

func (s StopStreamsRequest) String() string {
	return tea.Prettify(s)
}

func (s StopStreamsRequest) GoString() string {
	return s.String()
}

func (s *StopStreamsRequest) SetDescription(v string) *StopStreamsRequest {
	s.Description = &v
	return s
}

func (s *StopStreamsRequest) SetDeviceIdList(v string) *StopStreamsRequest {
	s.DeviceIdList = &v
	return s
}

type StopStreamsResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopStreamsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopStreamsResponseBody) GoString() string {
	return s.String()
}

func (s *StopStreamsResponseBody) SetCode(v string) *StopStreamsResponseBody {
	s.Code = &v
	return s
}

func (s *StopStreamsResponseBody) SetMessage(v string) *StopStreamsResponseBody {
	s.Message = &v
	return s
}

func (s *StopStreamsResponseBody) SetRequestId(v string) *StopStreamsResponseBody {
	s.RequestId = &v
	return s
}

type StopStreamsResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StopStreamsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopStreamsResponse) String() string {
	return tea.Prettify(s)
}

func (s StopStreamsResponse) GoString() string {
	return s.String()
}

func (s *StopStreamsResponse) SetHeaders(v map[string]*string) *StopStreamsResponse {
	s.Headers = v
	return s
}

func (s *StopStreamsResponse) SetBody(v *StopStreamsResponseBody) *StopStreamsResponse {
	s.Body = v
	return s
}

type SyncDeviceTimeRequest struct {
	DeviceSn        *string `json:"DeviceSn,omitempty" xml:"DeviceSn,omitempty"`
	DeviceTimeStamp *string `json:"DeviceTimeStamp,omitempty" xml:"DeviceTimeStamp,omitempty"`
}

func (s SyncDeviceTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s SyncDeviceTimeRequest) GoString() string {
	return s.String()
}

func (s *SyncDeviceTimeRequest) SetDeviceSn(v string) *SyncDeviceTimeRequest {
	s.DeviceSn = &v
	return s
}

func (s *SyncDeviceTimeRequest) SetDeviceTimeStamp(v string) *SyncDeviceTimeRequest {
	s.DeviceTimeStamp = &v
	return s
}

type SyncDeviceTimeResponseBody struct {
	Code          *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	NTPServer     *string `json:"NTPServer,omitempty" xml:"NTPServer,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RetryInterval *string `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
	SyncInterval  *string `json:"SyncInterval,omitempty" xml:"SyncInterval,omitempty"`
	TimeStamp     *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s SyncDeviceTimeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SyncDeviceTimeResponseBody) GoString() string {
	return s.String()
}

func (s *SyncDeviceTimeResponseBody) SetCode(v string) *SyncDeviceTimeResponseBody {
	s.Code = &v
	return s
}

func (s *SyncDeviceTimeResponseBody) SetMessage(v string) *SyncDeviceTimeResponseBody {
	s.Message = &v
	return s
}

func (s *SyncDeviceTimeResponseBody) SetNTPServer(v string) *SyncDeviceTimeResponseBody {
	s.NTPServer = &v
	return s
}

func (s *SyncDeviceTimeResponseBody) SetRequestId(v string) *SyncDeviceTimeResponseBody {
	s.RequestId = &v
	return s
}

func (s *SyncDeviceTimeResponseBody) SetRetryInterval(v string) *SyncDeviceTimeResponseBody {
	s.RetryInterval = &v
	return s
}

func (s *SyncDeviceTimeResponseBody) SetSyncInterval(v string) *SyncDeviceTimeResponseBody {
	s.SyncInterval = &v
	return s
}

func (s *SyncDeviceTimeResponseBody) SetTimeStamp(v string) *SyncDeviceTimeResponseBody {
	s.TimeStamp = &v
	return s
}

type SyncDeviceTimeResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SyncDeviceTimeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SyncDeviceTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s SyncDeviceTimeResponse) GoString() string {
	return s.String()
}

func (s *SyncDeviceTimeResponse) SetHeaders(v map[string]*string) *SyncDeviceTimeResponse {
	s.Headers = v
	return s
}

func (s *SyncDeviceTimeResponse) SetBody(v *SyncDeviceTimeResponseBody) *SyncDeviceTimeResponse {
	s.Body = v
	return s
}

type UnbindCorpGroupRequest struct {
	CorpGroupId *string `json:"CorpGroupId,omitempty" xml:"CorpGroupId,omitempty"`
	CorpId      *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
}

func (s UnbindCorpGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindCorpGroupRequest) GoString() string {
	return s.String()
}

func (s *UnbindCorpGroupRequest) SetCorpGroupId(v string) *UnbindCorpGroupRequest {
	s.CorpGroupId = &v
	return s
}

func (s *UnbindCorpGroupRequest) SetCorpId(v string) *UnbindCorpGroupRequest {
	s.CorpId = &v
	return s
}

type UnbindCorpGroupResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UnbindCorpGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindCorpGroupResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindCorpGroupResponseBody) SetCode(v string) *UnbindCorpGroupResponseBody {
	s.Code = &v
	return s
}

func (s *UnbindCorpGroupResponseBody) SetMessage(v string) *UnbindCorpGroupResponseBody {
	s.Message = &v
	return s
}

func (s *UnbindCorpGroupResponseBody) SetRequestId(v string) *UnbindCorpGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *UnbindCorpGroupResponseBody) SetSuccess(v bool) *UnbindCorpGroupResponseBody {
	s.Success = &v
	return s
}

type UnbindCorpGroupResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UnbindCorpGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnbindCorpGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindCorpGroupResponse) GoString() string {
	return s.String()
}

func (s *UnbindCorpGroupResponse) SetHeaders(v map[string]*string) *UnbindCorpGroupResponse {
	s.Headers = v
	return s
}

func (s *UnbindCorpGroupResponse) SetBody(v *UnbindCorpGroupResponseBody) *UnbindCorpGroupResponse {
	s.Body = v
	return s
}

type UnbindDevicesRequest struct {
	CorpId          *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DeviceId        *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	SubDeviceIdList *string `json:"SubDeviceIdList,omitempty" xml:"SubDeviceIdList,omitempty"`
}

func (s UnbindDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindDevicesRequest) GoString() string {
	return s.String()
}

func (s *UnbindDevicesRequest) SetCorpId(v string) *UnbindDevicesRequest {
	s.CorpId = &v
	return s
}

func (s *UnbindDevicesRequest) SetDeviceId(v string) *UnbindDevicesRequest {
	s.DeviceId = &v
	return s
}

func (s *UnbindDevicesRequest) SetSubDeviceIdList(v string) *UnbindDevicesRequest {
	s.SubDeviceIdList = &v
	return s
}

type UnbindDevicesResponseBody struct {
	Code    *string                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *UnbindDevicesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                        `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnbindDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindDevicesResponseBody) SetCode(v string) *UnbindDevicesResponseBody {
	s.Code = &v
	return s
}

func (s *UnbindDevicesResponseBody) SetData(v *UnbindDevicesResponseBodyData) *UnbindDevicesResponseBody {
	s.Data = v
	return s
}

func (s *UnbindDevicesResponseBody) SetMessage(v string) *UnbindDevicesResponseBody {
	s.Message = &v
	return s
}

func (s *UnbindDevicesResponseBody) SetRequestId(v string) *UnbindDevicesResponseBody {
	s.RequestId = &v
	return s
}

type UnbindDevicesResponseBodyData struct {
	SubDeviceList []*UnbindDevicesResponseBodyDataSubDeviceList `json:"SubDeviceList,omitempty" xml:"SubDeviceList,omitempty" type:"Repeated"`
}

func (s UnbindDevicesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UnbindDevicesResponseBodyData) GoString() string {
	return s.String()
}

func (s *UnbindDevicesResponseBodyData) SetSubDeviceList(v []*UnbindDevicesResponseBodyDataSubDeviceList) *UnbindDevicesResponseBodyData {
	s.SubDeviceList = v
	return s
}

type UnbindDevicesResponseBodyDataSubDeviceList struct {
	Code        *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message     *string `json:"Message,omitempty" xml:"Message,omitempty"`
	SubDeviceId *string `json:"SubDeviceId,omitempty" xml:"SubDeviceId,omitempty"`
}

func (s UnbindDevicesResponseBodyDataSubDeviceList) String() string {
	return tea.Prettify(s)
}

func (s UnbindDevicesResponseBodyDataSubDeviceList) GoString() string {
	return s.String()
}

func (s *UnbindDevicesResponseBodyDataSubDeviceList) SetCode(v string) *UnbindDevicesResponseBodyDataSubDeviceList {
	s.Code = &v
	return s
}

func (s *UnbindDevicesResponseBodyDataSubDeviceList) SetMessage(v string) *UnbindDevicesResponseBodyDataSubDeviceList {
	s.Message = &v
	return s
}

func (s *UnbindDevicesResponseBodyDataSubDeviceList) SetSubDeviceId(v string) *UnbindDevicesResponseBodyDataSubDeviceList {
	s.SubDeviceId = &v
	return s
}

type UnbindDevicesResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UnbindDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnbindDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindDevicesResponse) GoString() string {
	return s.String()
}

func (s *UnbindDevicesResponse) SetHeaders(v map[string]*string) *UnbindDevicesResponse {
	s.Headers = v
	return s
}

func (s *UnbindDevicesResponse) SetBody(v *UnbindDevicesResponseBody) *UnbindDevicesResponse {
	s.Body = v
	return s
}

type UnbindPersonRequest struct {
	CorpId    *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	IsvSubId  *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	ProfileId *int64  `json:"ProfileId,omitempty" xml:"ProfileId,omitempty"`
}

func (s UnbindPersonRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindPersonRequest) GoString() string {
	return s.String()
}

func (s *UnbindPersonRequest) SetCorpId(v string) *UnbindPersonRequest {
	s.CorpId = &v
	return s
}

func (s *UnbindPersonRequest) SetIsvSubId(v string) *UnbindPersonRequest {
	s.IsvSubId = &v
	return s
}

func (s *UnbindPersonRequest) SetProfileId(v int64) *UnbindPersonRequest {
	s.ProfileId = &v
	return s
}

type UnbindPersonResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnbindPersonResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindPersonResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindPersonResponseBody) SetCode(v string) *UnbindPersonResponseBody {
	s.Code = &v
	return s
}

func (s *UnbindPersonResponseBody) SetData(v bool) *UnbindPersonResponseBody {
	s.Data = &v
	return s
}

func (s *UnbindPersonResponseBody) SetMessage(v string) *UnbindPersonResponseBody {
	s.Message = &v
	return s
}

func (s *UnbindPersonResponseBody) SetRequestId(v string) *UnbindPersonResponseBody {
	s.RequestId = &v
	return s
}

type UnbindPersonResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UnbindPersonResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnbindPersonResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindPersonResponse) GoString() string {
	return s.String()
}

func (s *UnbindPersonResponse) SetHeaders(v map[string]*string) *UnbindPersonResponse {
	s.Headers = v
	return s
}

func (s *UnbindPersonResponse) SetBody(v *UnbindPersonResponseBody) *UnbindPersonResponse {
	s.Body = v
	return s
}

type UnbindUserRequest struct {
	CorpId   *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	IsvSubId *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	UserId   *int64  `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s UnbindUserRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindUserRequest) GoString() string {
	return s.String()
}

func (s *UnbindUserRequest) SetCorpId(v string) *UnbindUserRequest {
	s.CorpId = &v
	return s
}

func (s *UnbindUserRequest) SetIsvSubId(v string) *UnbindUserRequest {
	s.IsvSubId = &v
	return s
}

func (s *UnbindUserRequest) SetUserId(v int64) *UnbindUserRequest {
	s.UserId = &v
	return s
}

type UnbindUserResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnbindUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindUserResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindUserResponseBody) SetCode(v string) *UnbindUserResponseBody {
	s.Code = &v
	return s
}

func (s *UnbindUserResponseBody) SetData(v bool) *UnbindUserResponseBody {
	s.Data = &v
	return s
}

func (s *UnbindUserResponseBody) SetMessage(v string) *UnbindUserResponseBody {
	s.Message = &v
	return s
}

func (s *UnbindUserResponseBody) SetRequestId(v string) *UnbindUserResponseBody {
	s.RequestId = &v
	return s
}

type UnbindUserResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UnbindUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnbindUserResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindUserResponse) GoString() string {
	return s.String()
}

func (s *UnbindUserResponse) SetHeaders(v map[string]*string) *UnbindUserResponse {
	s.Headers = v
	return s
}

func (s *UnbindUserResponse) SetBody(v *UnbindUserResponseBody) *UnbindUserResponse {
	s.Body = v
	return s
}

type UpdateAiotDeviceRequest struct {
	AiotDevice *UpdateAiotDeviceRequestAiotDevice `json:"AiotDevice,omitempty" xml:"AiotDevice,omitempty" type:"Struct"`
	Id         *string                            `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s UpdateAiotDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotDeviceRequest) GoString() string {
	return s.String()
}

func (s *UpdateAiotDeviceRequest) SetAiotDevice(v *UpdateAiotDeviceRequestAiotDevice) *UpdateAiotDeviceRequest {
	s.AiotDevice = v
	return s
}

func (s *UpdateAiotDeviceRequest) SetId(v string) *UpdateAiotDeviceRequest {
	s.Id = &v
	return s
}

type UpdateAiotDeviceRequestAiotDevice struct {
	IPAddr    *string  `json:"IPAddr,omitempty" xml:"IPAddr,omitempty"`
	Latitude  *float32 `json:"Latitude,omitempty" xml:"Latitude,omitempty"`
	Longitude *float32 `json:"Longitude,omitempty" xml:"Longitude,omitempty"`
	Name      *string  `json:"Name,omitempty" xml:"Name,omitempty"`
	Place     *string  `json:"Place,omitempty" xml:"Place,omitempty"`
	Port      *int64   `json:"Port,omitempty" xml:"Port,omitempty"`
}

func (s UpdateAiotDeviceRequestAiotDevice) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotDeviceRequestAiotDevice) GoString() string {
	return s.String()
}

func (s *UpdateAiotDeviceRequestAiotDevice) SetIPAddr(v string) *UpdateAiotDeviceRequestAiotDevice {
	s.IPAddr = &v
	return s
}

func (s *UpdateAiotDeviceRequestAiotDevice) SetLatitude(v float32) *UpdateAiotDeviceRequestAiotDevice {
	s.Latitude = &v
	return s
}

func (s *UpdateAiotDeviceRequestAiotDevice) SetLongitude(v float32) *UpdateAiotDeviceRequestAiotDevice {
	s.Longitude = &v
	return s
}

func (s *UpdateAiotDeviceRequestAiotDevice) SetName(v string) *UpdateAiotDeviceRequestAiotDevice {
	s.Name = &v
	return s
}

func (s *UpdateAiotDeviceRequestAiotDevice) SetPlace(v string) *UpdateAiotDeviceRequestAiotDevice {
	s.Place = &v
	return s
}

func (s *UpdateAiotDeviceRequestAiotDevice) SetPort(v int64) *UpdateAiotDeviceRequestAiotDevice {
	s.Port = &v
	return s
}

type UpdateAiotDeviceShrinkRequest struct {
	AiotDeviceShrink *string `json:"AiotDevice,omitempty" xml:"AiotDevice,omitempty"`
	Id               *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s UpdateAiotDeviceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotDeviceShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateAiotDeviceShrinkRequest) SetAiotDeviceShrink(v string) *UpdateAiotDeviceShrinkRequest {
	s.AiotDeviceShrink = &v
	return s
}

func (s *UpdateAiotDeviceShrinkRequest) SetId(v string) *UpdateAiotDeviceShrinkRequest {
	s.Id = &v
	return s
}

type UpdateAiotDeviceResponseBody struct {
	AiotDevice *UpdateAiotDeviceResponseBodyAiotDevice `json:"AiotDevice,omitempty" xml:"AiotDevice,omitempty" type:"Struct"`
	Code       *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Message    *string                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateAiotDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAiotDeviceResponseBody) SetAiotDevice(v *UpdateAiotDeviceResponseBodyAiotDevice) *UpdateAiotDeviceResponseBody {
	s.AiotDevice = v
	return s
}

func (s *UpdateAiotDeviceResponseBody) SetCode(v string) *UpdateAiotDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateAiotDeviceResponseBody) SetMessage(v string) *UpdateAiotDeviceResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateAiotDeviceResponseBody) SetRequestId(v string) *UpdateAiotDeviceResponseBody {
	s.RequestId = &v
	return s
}

type UpdateAiotDeviceResponseBodyAiotDevice struct {
	CapDirection     *string  `json:"CapDirection,omitempty" xml:"CapDirection,omitempty"`
	CorpId           *string  `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DeviceId         *string  `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	DeviceType       *string  `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	FirmwareVersion  *string  `json:"FirmwareVersion,omitempty" xml:"FirmwareVersion,omitempty"`
	IPAddr           *string  `json:"IPAddr,omitempty" xml:"IPAddr,omitempty"`
	IPV6Addr         *string  `json:"IPV6Addr,omitempty" xml:"IPV6Addr,omitempty"`
	IPv4Gateway      *string  `json:"IPv4Gateway,omitempty" xml:"IPv4Gateway,omitempty"`
	IPv4Netmask      *string  `json:"IPv4Netmask,omitempty" xml:"IPv4Netmask,omitempty"`
	IsOnline         *string  `json:"IsOnline,omitempty" xml:"IsOnline,omitempty"`
	Latitude         *float32 `json:"Latitude,omitempty" xml:"Latitude,omitempty"`
	Longitude        *float32 `json:"Longitude,omitempty" xml:"Longitude,omitempty"`
	MAC              *string  `json:"MAC,omitempty" xml:"MAC,omitempty"`
	Manufacturer     *string  `json:"Manufacturer,omitempty" xml:"Manufacturer,omitempty"`
	Model            *string  `json:"Model,omitempty" xml:"Model,omitempty"`
	MonitorAreaDesc  *string  `json:"MonitorAreaDesc,omitempty" xml:"MonitorAreaDesc,omitempty"`
	MonitorDirection *string  `json:"MonitorDirection,omitempty" xml:"MonitorDirection,omitempty"`
	Name             *string  `json:"Name,omitempty" xml:"Name,omitempty"`
	OrgCode          *string  `json:"OrgCode,omitempty" xml:"OrgCode,omitempty"`
	OwnerApsID       *string  `json:"OwnerApsID,omitempty" xml:"OwnerApsID,omitempty"`
	Password         *string  `json:"Password,omitempty" xml:"Password,omitempty"`
	Place            *string  `json:"Place,omitempty" xml:"Place,omitempty"`
	PlaceCode        *string  `json:"PlaceCode,omitempty" xml:"PlaceCode,omitempty"`
	Port             *int64   `json:"Port,omitempty" xml:"Port,omitempty"`
	SerialNumber     *string  `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	UserId           *string  `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s UpdateAiotDeviceResponseBodyAiotDevice) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotDeviceResponseBodyAiotDevice) GoString() string {
	return s.String()
}

func (s *UpdateAiotDeviceResponseBodyAiotDevice) SetCapDirection(v string) *UpdateAiotDeviceResponseBodyAiotDevice {
	s.CapDirection = &v
	return s
}

func (s *UpdateAiotDeviceResponseBodyAiotDevice) SetCorpId(v string) *UpdateAiotDeviceResponseBodyAiotDevice {
	s.CorpId = &v
	return s
}

func (s *UpdateAiotDeviceResponseBodyAiotDevice) SetDeviceId(v string) *UpdateAiotDeviceResponseBodyAiotDevice {
	s.DeviceId = &v
	return s
}

func (s *UpdateAiotDeviceResponseBodyAiotDevice) SetDeviceType(v string) *UpdateAiotDeviceResponseBodyAiotDevice {
	s.DeviceType = &v
	return s
}

func (s *UpdateAiotDeviceResponseBodyAiotDevice) SetFirmwareVersion(v string) *UpdateAiotDeviceResponseBodyAiotDevice {
	s.FirmwareVersion = &v
	return s
}

func (s *UpdateAiotDeviceResponseBodyAiotDevice) SetIPAddr(v string) *UpdateAiotDeviceResponseBodyAiotDevice {
	s.IPAddr = &v
	return s
}

func (s *UpdateAiotDeviceResponseBodyAiotDevice) SetIPV6Addr(v string) *UpdateAiotDeviceResponseBodyAiotDevice {
	s.IPV6Addr = &v
	return s
}

func (s *UpdateAiotDeviceResponseBodyAiotDevice) SetIPv4Gateway(v string) *UpdateAiotDeviceResponseBodyAiotDevice {
	s.IPv4Gateway = &v
	return s
}

func (s *UpdateAiotDeviceResponseBodyAiotDevice) SetIPv4Netmask(v string) *UpdateAiotDeviceResponseBodyAiotDevice {
	s.IPv4Netmask = &v
	return s
}

func (s *UpdateAiotDeviceResponseBodyAiotDevice) SetIsOnline(v string) *UpdateAiotDeviceResponseBodyAiotDevice {
	s.IsOnline = &v
	return s
}

func (s *UpdateAiotDeviceResponseBodyAiotDevice) SetLatitude(v float32) *UpdateAiotDeviceResponseBodyAiotDevice {
	s.Latitude = &v
	return s
}

func (s *UpdateAiotDeviceResponseBodyAiotDevice) SetLongitude(v float32) *UpdateAiotDeviceResponseBodyAiotDevice {
	s.Longitude = &v
	return s
}

func (s *UpdateAiotDeviceResponseBodyAiotDevice) SetMAC(v string) *UpdateAiotDeviceResponseBodyAiotDevice {
	s.MAC = &v
	return s
}

func (s *UpdateAiotDeviceResponseBodyAiotDevice) SetManufacturer(v string) *UpdateAiotDeviceResponseBodyAiotDevice {
	s.Manufacturer = &v
	return s
}

func (s *UpdateAiotDeviceResponseBodyAiotDevice) SetModel(v string) *UpdateAiotDeviceResponseBodyAiotDevice {
	s.Model = &v
	return s
}

func (s *UpdateAiotDeviceResponseBodyAiotDevice) SetMonitorAreaDesc(v string) *UpdateAiotDeviceResponseBodyAiotDevice {
	s.MonitorAreaDesc = &v
	return s
}

func (s *UpdateAiotDeviceResponseBodyAiotDevice) SetMonitorDirection(v string) *UpdateAiotDeviceResponseBodyAiotDevice {
	s.MonitorDirection = &v
	return s
}

func (s *UpdateAiotDeviceResponseBodyAiotDevice) SetName(v string) *UpdateAiotDeviceResponseBodyAiotDevice {
	s.Name = &v
	return s
}

func (s *UpdateAiotDeviceResponseBodyAiotDevice) SetOrgCode(v string) *UpdateAiotDeviceResponseBodyAiotDevice {
	s.OrgCode = &v
	return s
}

func (s *UpdateAiotDeviceResponseBodyAiotDevice) SetOwnerApsID(v string) *UpdateAiotDeviceResponseBodyAiotDevice {
	s.OwnerApsID = &v
	return s
}

func (s *UpdateAiotDeviceResponseBodyAiotDevice) SetPassword(v string) *UpdateAiotDeviceResponseBodyAiotDevice {
	s.Password = &v
	return s
}

func (s *UpdateAiotDeviceResponseBodyAiotDevice) SetPlace(v string) *UpdateAiotDeviceResponseBodyAiotDevice {
	s.Place = &v
	return s
}

func (s *UpdateAiotDeviceResponseBodyAiotDevice) SetPlaceCode(v string) *UpdateAiotDeviceResponseBodyAiotDevice {
	s.PlaceCode = &v
	return s
}

func (s *UpdateAiotDeviceResponseBodyAiotDevice) SetPort(v int64) *UpdateAiotDeviceResponseBodyAiotDevice {
	s.Port = &v
	return s
}

func (s *UpdateAiotDeviceResponseBodyAiotDevice) SetSerialNumber(v string) *UpdateAiotDeviceResponseBodyAiotDevice {
	s.SerialNumber = &v
	return s
}

func (s *UpdateAiotDeviceResponseBodyAiotDevice) SetUserId(v string) *UpdateAiotDeviceResponseBodyAiotDevice {
	s.UserId = &v
	return s
}

type UpdateAiotDeviceResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateAiotDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateAiotDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotDeviceResponse) GoString() string {
	return s.String()
}

func (s *UpdateAiotDeviceResponse) SetHeaders(v map[string]*string) *UpdateAiotDeviceResponse {
	s.Headers = v
	return s
}

func (s *UpdateAiotDeviceResponse) SetBody(v *UpdateAiotDeviceResponseBody) *UpdateAiotDeviceResponse {
	s.Body = v
	return s
}

type UpdateAiotPersonTableRequest struct {
	Id          *string                                  `json:"Id,omitempty" xml:"Id,omitempty"`
	PersonTable *UpdateAiotPersonTableRequestPersonTable `json:"PersonTable,omitempty" xml:"PersonTable,omitempty" type:"Struct"`
}

func (s UpdateAiotPersonTableRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotPersonTableRequest) GoString() string {
	return s.String()
}

func (s *UpdateAiotPersonTableRequest) SetId(v string) *UpdateAiotPersonTableRequest {
	s.Id = &v
	return s
}

func (s *UpdateAiotPersonTableRequest) SetPersonTable(v *UpdateAiotPersonTableRequestPersonTable) *UpdateAiotPersonTableRequest {
	s.PersonTable = v
	return s
}

type UpdateAiotPersonTableRequestPersonTable struct {
	Name                  *string  `json:"Name,omitempty" xml:"Name,omitempty"`
	PersonTableId         *string  `json:"PersonTableId,omitempty" xml:"PersonTableId,omitempty"`
	Type                  *int64   `json:"Type,omitempty" xml:"Type,omitempty"`
	VerificationModelList []*int64 `json:"VerificationModelList,omitempty" xml:"VerificationModelList,omitempty" type:"Repeated"`
}

func (s UpdateAiotPersonTableRequestPersonTable) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotPersonTableRequestPersonTable) GoString() string {
	return s.String()
}

func (s *UpdateAiotPersonTableRequestPersonTable) SetName(v string) *UpdateAiotPersonTableRequestPersonTable {
	s.Name = &v
	return s
}

func (s *UpdateAiotPersonTableRequestPersonTable) SetPersonTableId(v string) *UpdateAiotPersonTableRequestPersonTable {
	s.PersonTableId = &v
	return s
}

func (s *UpdateAiotPersonTableRequestPersonTable) SetType(v int64) *UpdateAiotPersonTableRequestPersonTable {
	s.Type = &v
	return s
}

func (s *UpdateAiotPersonTableRequestPersonTable) SetVerificationModelList(v []*int64) *UpdateAiotPersonTableRequestPersonTable {
	s.VerificationModelList = v
	return s
}

type UpdateAiotPersonTableResponseBody struct {
	Code        *string                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Message     *string                                       `json:"Message,omitempty" xml:"Message,omitempty"`
	PersonTable *UpdateAiotPersonTableResponseBodyPersonTable `json:"PersonTable,omitempty" xml:"PersonTable,omitempty" type:"Struct"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateAiotPersonTableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotPersonTableResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAiotPersonTableResponseBody) SetCode(v string) *UpdateAiotPersonTableResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateAiotPersonTableResponseBody) SetMessage(v string) *UpdateAiotPersonTableResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateAiotPersonTableResponseBody) SetPersonTable(v *UpdateAiotPersonTableResponseBodyPersonTable) *UpdateAiotPersonTableResponseBody {
	s.PersonTable = v
	return s
}

func (s *UpdateAiotPersonTableResponseBody) SetRequestId(v string) *UpdateAiotPersonTableResponseBody {
	s.RequestId = &v
	return s
}

type UpdateAiotPersonTableResponseBodyPersonTable struct {
	DeviceId              *string  `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	FaceNum               *int64   `json:"FaceNum,omitempty" xml:"FaceNum,omitempty"`
	LastChange            *string  `json:"LastChange,omitempty" xml:"LastChange,omitempty"`
	Name                  *string  `json:"Name,omitempty" xml:"Name,omitempty"`
	PersonNum             *int64   `json:"PersonNum,omitempty" xml:"PersonNum,omitempty"`
	PersonTableId         *string  `json:"PersonTableId,omitempty" xml:"PersonTableId,omitempty"`
	TotalPersonNum        *int64   `json:"TotalPersonNum,omitempty" xml:"TotalPersonNum,omitempty"`
	Type                  *int64   `json:"Type,omitempty" xml:"Type,omitempty"`
	VerificationModelList []*int64 `json:"VerificationModelList,omitempty" xml:"VerificationModelList,omitempty" type:"Repeated"`
}

func (s UpdateAiotPersonTableResponseBodyPersonTable) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotPersonTableResponseBodyPersonTable) GoString() string {
	return s.String()
}

func (s *UpdateAiotPersonTableResponseBodyPersonTable) SetDeviceId(v string) *UpdateAiotPersonTableResponseBodyPersonTable {
	s.DeviceId = &v
	return s
}

func (s *UpdateAiotPersonTableResponseBodyPersonTable) SetFaceNum(v int64) *UpdateAiotPersonTableResponseBodyPersonTable {
	s.FaceNum = &v
	return s
}

func (s *UpdateAiotPersonTableResponseBodyPersonTable) SetLastChange(v string) *UpdateAiotPersonTableResponseBodyPersonTable {
	s.LastChange = &v
	return s
}

func (s *UpdateAiotPersonTableResponseBodyPersonTable) SetName(v string) *UpdateAiotPersonTableResponseBodyPersonTable {
	s.Name = &v
	return s
}

func (s *UpdateAiotPersonTableResponseBodyPersonTable) SetPersonNum(v int64) *UpdateAiotPersonTableResponseBodyPersonTable {
	s.PersonNum = &v
	return s
}

func (s *UpdateAiotPersonTableResponseBodyPersonTable) SetPersonTableId(v string) *UpdateAiotPersonTableResponseBodyPersonTable {
	s.PersonTableId = &v
	return s
}

func (s *UpdateAiotPersonTableResponseBodyPersonTable) SetTotalPersonNum(v int64) *UpdateAiotPersonTableResponseBodyPersonTable {
	s.TotalPersonNum = &v
	return s
}

func (s *UpdateAiotPersonTableResponseBodyPersonTable) SetType(v int64) *UpdateAiotPersonTableResponseBodyPersonTable {
	s.Type = &v
	return s
}

func (s *UpdateAiotPersonTableResponseBodyPersonTable) SetVerificationModelList(v []*int64) *UpdateAiotPersonTableResponseBodyPersonTable {
	s.VerificationModelList = v
	return s
}

type UpdateAiotPersonTableResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateAiotPersonTableResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateAiotPersonTableResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotPersonTableResponse) GoString() string {
	return s.String()
}

func (s *UpdateAiotPersonTableResponse) SetHeaders(v map[string]*string) *UpdateAiotPersonTableResponse {
	s.Headers = v
	return s
}

func (s *UpdateAiotPersonTableResponse) SetBody(v *UpdateAiotPersonTableResponseBody) *UpdateAiotPersonTableResponse {
	s.Body = v
	return s
}

type UpdateAiotPersonTableItemRequest struct {
	Id              *string                                          `json:"Id,omitempty" xml:"Id,omitempty"`
	PersonTableId   *string                                          `json:"PersonTableId,omitempty" xml:"PersonTableId,omitempty"`
	PersonTableItem *UpdateAiotPersonTableItemRequestPersonTableItem `json:"PersonTableItem,omitempty" xml:"PersonTableItem,omitempty" type:"Struct"`
}

func (s UpdateAiotPersonTableItemRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotPersonTableItemRequest) GoString() string {
	return s.String()
}

func (s *UpdateAiotPersonTableItemRequest) SetId(v string) *UpdateAiotPersonTableItemRequest {
	s.Id = &v
	return s
}

func (s *UpdateAiotPersonTableItemRequest) SetPersonTableId(v string) *UpdateAiotPersonTableItemRequest {
	s.PersonTableId = &v
	return s
}

func (s *UpdateAiotPersonTableItemRequest) SetPersonTableItem(v *UpdateAiotPersonTableItemRequestPersonTableItem) *UpdateAiotPersonTableItemRequest {
	s.PersonTableItem = v
	return s
}

type UpdateAiotPersonTableItemRequestPersonTableItem struct {
	IdentificationList []*UpdateAiotPersonTableItemRequestPersonTableItemIdentificationList `json:"IdentificationList,omitempty" xml:"IdentificationList,omitempty" type:"Repeated"`
	IdentificationNum  *int64                                                               `json:"IdentificationNum,omitempty" xml:"IdentificationNum,omitempty"`
	ImageList          []*UpdateAiotPersonTableItemRequestPersonTableItemImageList          `json:"ImageList,omitempty" xml:"ImageList,omitempty" type:"Repeated"`
	ImageNum           *int64                                                               `json:"ImageNum,omitempty" xml:"ImageNum,omitempty"`
	PersonCode         *string                                                              `json:"PersonCode,omitempty" xml:"PersonCode,omitempty"`
	PersonId           *string                                                              `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	PersonName         *string                                                              `json:"PersonName,omitempty" xml:"PersonName,omitempty"`
	Remarks            *string                                                              `json:"Remarks,omitempty" xml:"Remarks,omitempty"`
}

func (s UpdateAiotPersonTableItemRequestPersonTableItem) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotPersonTableItemRequestPersonTableItem) GoString() string {
	return s.String()
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItem) SetIdentificationList(v []*UpdateAiotPersonTableItemRequestPersonTableItemIdentificationList) *UpdateAiotPersonTableItemRequestPersonTableItem {
	s.IdentificationList = v
	return s
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItem) SetIdentificationNum(v int64) *UpdateAiotPersonTableItemRequestPersonTableItem {
	s.IdentificationNum = &v
	return s
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItem) SetImageList(v []*UpdateAiotPersonTableItemRequestPersonTableItemImageList) *UpdateAiotPersonTableItemRequestPersonTableItem {
	s.ImageList = v
	return s
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItem) SetImageNum(v int64) *UpdateAiotPersonTableItemRequestPersonTableItem {
	s.ImageNum = &v
	return s
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItem) SetPersonCode(v string) *UpdateAiotPersonTableItemRequestPersonTableItem {
	s.PersonCode = &v
	return s
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItem) SetPersonId(v string) *UpdateAiotPersonTableItemRequestPersonTableItem {
	s.PersonId = &v
	return s
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItem) SetPersonName(v string) *UpdateAiotPersonTableItemRequestPersonTableItem {
	s.PersonName = &v
	return s
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItem) SetRemarks(v string) *UpdateAiotPersonTableItemRequestPersonTableItem {
	s.Remarks = &v
	return s
}

type UpdateAiotPersonTableItemRequestPersonTableItemIdentificationList struct {
	Number *string `json:"Number,omitempty" xml:"Number,omitempty"`
	Type   *int64  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateAiotPersonTableItemRequestPersonTableItemIdentificationList) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotPersonTableItemRequestPersonTableItemIdentificationList) GoString() string {
	return s.String()
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItemIdentificationList) SetNumber(v string) *UpdateAiotPersonTableItemRequestPersonTableItemIdentificationList {
	s.Number = &v
	return s
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItemIdentificationList) SetType(v int64) *UpdateAiotPersonTableItemRequestPersonTableItemIdentificationList {
	s.Type = &v
	return s
}

type UpdateAiotPersonTableItemRequestPersonTableItemImageList struct {
	Data        *string                                                              `json:"Data,omitempty" xml:"Data,omitempty"`
	DeviceId    *string                                                              `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	EventSort   *string                                                              `json:"EventSort,omitempty" xml:"EventSort,omitempty"`
	FeatureInfo *UpdateAiotPersonTableItemRequestPersonTableItemImageListFeatureInfo `json:"FeatureInfo,omitempty" xml:"FeatureInfo,omitempty" type:"Struct"`
	FileFormat  *string                                                              `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	Height      *int64                                                               `json:"Height,omitempty" xml:"Height,omitempty"`
	ImageId     *string                                                              `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ShotTime    *string                                                              `json:"ShotTime,omitempty" xml:"ShotTime,omitempty"`
	Size        *int64                                                               `json:"Size,omitempty" xml:"Size,omitempty"`
	StoragePath *string                                                              `json:"StoragePath,omitempty" xml:"StoragePath,omitempty"`
	Type        *string                                                              `json:"Type,omitempty" xml:"Type,omitempty"`
	Width       *int64                                                               `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s UpdateAiotPersonTableItemRequestPersonTableItemImageList) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotPersonTableItemRequestPersonTableItemImageList) GoString() string {
	return s.String()
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItemImageList) SetData(v string) *UpdateAiotPersonTableItemRequestPersonTableItemImageList {
	s.Data = &v
	return s
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItemImageList) SetDeviceId(v string) *UpdateAiotPersonTableItemRequestPersonTableItemImageList {
	s.DeviceId = &v
	return s
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItemImageList) SetEventSort(v string) *UpdateAiotPersonTableItemRequestPersonTableItemImageList {
	s.EventSort = &v
	return s
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItemImageList) SetFeatureInfo(v *UpdateAiotPersonTableItemRequestPersonTableItemImageListFeatureInfo) *UpdateAiotPersonTableItemRequestPersonTableItemImageList {
	s.FeatureInfo = v
	return s
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItemImageList) SetFileFormat(v string) *UpdateAiotPersonTableItemRequestPersonTableItemImageList {
	s.FileFormat = &v
	return s
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItemImageList) SetHeight(v int64) *UpdateAiotPersonTableItemRequestPersonTableItemImageList {
	s.Height = &v
	return s
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItemImageList) SetImageId(v string) *UpdateAiotPersonTableItemRequestPersonTableItemImageList {
	s.ImageId = &v
	return s
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItemImageList) SetShotTime(v string) *UpdateAiotPersonTableItemRequestPersonTableItemImageList {
	s.ShotTime = &v
	return s
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItemImageList) SetSize(v int64) *UpdateAiotPersonTableItemRequestPersonTableItemImageList {
	s.Size = &v
	return s
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItemImageList) SetStoragePath(v string) *UpdateAiotPersonTableItemRequestPersonTableItemImageList {
	s.StoragePath = &v
	return s
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItemImageList) SetType(v string) *UpdateAiotPersonTableItemRequestPersonTableItemImageList {
	s.Type = &v
	return s
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItemImageList) SetWidth(v int64) *UpdateAiotPersonTableItemRequestPersonTableItemImageList {
	s.Width = &v
	return s
}

type UpdateAiotPersonTableItemRequestPersonTableItemImageListFeatureInfo struct {
	AlgorithmType    *string `json:"AlgorithmType,omitempty" xml:"AlgorithmType,omitempty"`
	AlgorithmVersion *string `json:"AlgorithmVersion,omitempty" xml:"AlgorithmVersion,omitempty"`
	FeatureData      *string `json:"FeatureData,omitempty" xml:"FeatureData,omitempty"`
	ImageId          *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ObjectId         *string `json:"ObjectId,omitempty" xml:"ObjectId,omitempty"`
	TabIeId          *string `json:"TabIeId,omitempty" xml:"TabIeId,omitempty"`
	Vendor           *string `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s UpdateAiotPersonTableItemRequestPersonTableItemImageListFeatureInfo) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotPersonTableItemRequestPersonTableItemImageListFeatureInfo) GoString() string {
	return s.String()
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItemImageListFeatureInfo) SetAlgorithmType(v string) *UpdateAiotPersonTableItemRequestPersonTableItemImageListFeatureInfo {
	s.AlgorithmType = &v
	return s
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItemImageListFeatureInfo) SetAlgorithmVersion(v string) *UpdateAiotPersonTableItemRequestPersonTableItemImageListFeatureInfo {
	s.AlgorithmVersion = &v
	return s
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItemImageListFeatureInfo) SetFeatureData(v string) *UpdateAiotPersonTableItemRequestPersonTableItemImageListFeatureInfo {
	s.FeatureData = &v
	return s
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItemImageListFeatureInfo) SetImageId(v string) *UpdateAiotPersonTableItemRequestPersonTableItemImageListFeatureInfo {
	s.ImageId = &v
	return s
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItemImageListFeatureInfo) SetObjectId(v string) *UpdateAiotPersonTableItemRequestPersonTableItemImageListFeatureInfo {
	s.ObjectId = &v
	return s
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItemImageListFeatureInfo) SetTabIeId(v string) *UpdateAiotPersonTableItemRequestPersonTableItemImageListFeatureInfo {
	s.TabIeId = &v
	return s
}

func (s *UpdateAiotPersonTableItemRequestPersonTableItemImageListFeatureInfo) SetVendor(v string) *UpdateAiotPersonTableItemRequestPersonTableItemImageListFeatureInfo {
	s.Vendor = &v
	return s
}

type UpdateAiotPersonTableItemResponseBody struct {
	Code            *string                                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Message         *string                                               `json:"Message,omitempty" xml:"Message,omitempty"`
	PersonTableItem *UpdateAiotPersonTableItemResponseBodyPersonTableItem `json:"PersonTableItem,omitempty" xml:"PersonTableItem,omitempty" type:"Struct"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateAiotPersonTableItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotPersonTableItemResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAiotPersonTableItemResponseBody) SetCode(v string) *UpdateAiotPersonTableItemResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBody) SetMessage(v string) *UpdateAiotPersonTableItemResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBody) SetPersonTableItem(v *UpdateAiotPersonTableItemResponseBodyPersonTableItem) *UpdateAiotPersonTableItemResponseBody {
	s.PersonTableItem = v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBody) SetRequestId(v string) *UpdateAiotPersonTableItemResponseBody {
	s.RequestId = &v
	return s
}

type UpdateAiotPersonTableItemResponseBodyPersonTableItem struct {
	IdentificationList []*UpdateAiotPersonTableItemResponseBodyPersonTableItemIdentificationList `json:"IdentificationList,omitempty" xml:"IdentificationList,omitempty" type:"Repeated"`
	IdentificationNum  *int64                                                                    `json:"IdentificationNum,omitempty" xml:"IdentificationNum,omitempty"`
	ImageList          []*UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList          `json:"ImageList,omitempty" xml:"ImageList,omitempty" type:"Repeated"`
	ImageNum           *int64                                                                    `json:"ImageNum,omitempty" xml:"ImageNum,omitempty"`
	LastChange         *string                                                                   `json:"LastChange,omitempty" xml:"LastChange,omitempty"`
	PersonCode         *string                                                                   `json:"PersonCode,omitempty" xml:"PersonCode,omitempty"`
	PersonId           *string                                                                   `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	PersonName         *string                                                                   `json:"PersonName,omitempty" xml:"PersonName,omitempty"`
	PersonTableId      *string                                                                   `json:"PersonTableId,omitempty" xml:"PersonTableId,omitempty"`
	Remarks            *string                                                                   `json:"Remarks,omitempty" xml:"Remarks,omitempty"`
}

func (s UpdateAiotPersonTableItemResponseBodyPersonTableItem) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotPersonTableItemResponseBodyPersonTableItem) GoString() string {
	return s.String()
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItem) SetIdentificationList(v []*UpdateAiotPersonTableItemResponseBodyPersonTableItemIdentificationList) *UpdateAiotPersonTableItemResponseBodyPersonTableItem {
	s.IdentificationList = v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItem) SetIdentificationNum(v int64) *UpdateAiotPersonTableItemResponseBodyPersonTableItem {
	s.IdentificationNum = &v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItem) SetImageList(v []*UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList) *UpdateAiotPersonTableItemResponseBodyPersonTableItem {
	s.ImageList = v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItem) SetImageNum(v int64) *UpdateAiotPersonTableItemResponseBodyPersonTableItem {
	s.ImageNum = &v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItem) SetLastChange(v string) *UpdateAiotPersonTableItemResponseBodyPersonTableItem {
	s.LastChange = &v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItem) SetPersonCode(v string) *UpdateAiotPersonTableItemResponseBodyPersonTableItem {
	s.PersonCode = &v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItem) SetPersonId(v string) *UpdateAiotPersonTableItemResponseBodyPersonTableItem {
	s.PersonId = &v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItem) SetPersonName(v string) *UpdateAiotPersonTableItemResponseBodyPersonTableItem {
	s.PersonName = &v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItem) SetPersonTableId(v string) *UpdateAiotPersonTableItemResponseBodyPersonTableItem {
	s.PersonTableId = &v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItem) SetRemarks(v string) *UpdateAiotPersonTableItemResponseBodyPersonTableItem {
	s.Remarks = &v
	return s
}

type UpdateAiotPersonTableItemResponseBodyPersonTableItemIdentificationList struct {
	Number *string `json:"Number,omitempty" xml:"Number,omitempty"`
	Type   *int64  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateAiotPersonTableItemResponseBodyPersonTableItemIdentificationList) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotPersonTableItemResponseBodyPersonTableItemIdentificationList) GoString() string {
	return s.String()
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItemIdentificationList) SetNumber(v string) *UpdateAiotPersonTableItemResponseBodyPersonTableItemIdentificationList {
	s.Number = &v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItemIdentificationList) SetType(v int64) *UpdateAiotPersonTableItemResponseBodyPersonTableItemIdentificationList {
	s.Type = &v
	return s
}

type UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList struct {
	Data        *string                                                                   `json:"Data,omitempty" xml:"Data,omitempty"`
	DeviceId    *string                                                                   `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	EventSort   *string                                                                   `json:"EventSort,omitempty" xml:"EventSort,omitempty"`
	FeatureInfo *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageListFeatureInfo `json:"FeatureInfo,omitempty" xml:"FeatureInfo,omitempty" type:"Struct"`
	FileFormat  *string                                                                   `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	Height      *int64                                                                    `json:"Height,omitempty" xml:"Height,omitempty"`
	ImageId     *string                                                                   `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ShotTime    *string                                                                   `json:"ShotTime,omitempty" xml:"ShotTime,omitempty"`
	Size        *int64                                                                    `json:"Size,omitempty" xml:"Size,omitempty"`
	StoragePath *string                                                                   `json:"StoragePath,omitempty" xml:"StoragePath,omitempty"`
	Type        *string                                                                   `json:"Type,omitempty" xml:"Type,omitempty"`
	Width       *int64                                                                    `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList) GoString() string {
	return s.String()
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList) SetData(v string) *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList {
	s.Data = &v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList) SetDeviceId(v string) *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList {
	s.DeviceId = &v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList) SetEventSort(v string) *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList {
	s.EventSort = &v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList) SetFeatureInfo(v *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageListFeatureInfo) *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList {
	s.FeatureInfo = v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList) SetFileFormat(v string) *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList {
	s.FileFormat = &v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList) SetHeight(v int64) *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList {
	s.Height = &v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList) SetImageId(v string) *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList {
	s.ImageId = &v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList) SetShotTime(v string) *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList {
	s.ShotTime = &v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList) SetSize(v int64) *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList {
	s.Size = &v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList) SetStoragePath(v string) *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList {
	s.StoragePath = &v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList) SetType(v string) *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList {
	s.Type = &v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList) SetWidth(v int64) *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageList {
	s.Width = &v
	return s
}

type UpdateAiotPersonTableItemResponseBodyPersonTableItemImageListFeatureInfo struct {
	AlgorithmType    *string `json:"AlgorithmType,omitempty" xml:"AlgorithmType,omitempty"`
	AlgorithmVersion *string `json:"AlgorithmVersion,omitempty" xml:"AlgorithmVersion,omitempty"`
	FeatureData      *string `json:"FeatureData,omitempty" xml:"FeatureData,omitempty"`
	ImageId          *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ObjectId         *string `json:"ObjectId,omitempty" xml:"ObjectId,omitempty"`
	TabIed           *string `json:"TabIed,omitempty" xml:"TabIed,omitempty"`
	Vendor           *string `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s UpdateAiotPersonTableItemResponseBodyPersonTableItemImageListFeatureInfo) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotPersonTableItemResponseBodyPersonTableItemImageListFeatureInfo) GoString() string {
	return s.String()
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageListFeatureInfo) SetAlgorithmType(v string) *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageListFeatureInfo {
	s.AlgorithmType = &v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageListFeatureInfo) SetAlgorithmVersion(v string) *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageListFeatureInfo {
	s.AlgorithmVersion = &v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageListFeatureInfo) SetFeatureData(v string) *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageListFeatureInfo {
	s.FeatureData = &v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageListFeatureInfo) SetImageId(v string) *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageListFeatureInfo {
	s.ImageId = &v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageListFeatureInfo) SetObjectId(v string) *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageListFeatureInfo {
	s.ObjectId = &v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageListFeatureInfo) SetTabIed(v string) *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageListFeatureInfo {
	s.TabIed = &v
	return s
}

func (s *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageListFeatureInfo) SetVendor(v string) *UpdateAiotPersonTableItemResponseBodyPersonTableItemImageListFeatureInfo {
	s.Vendor = &v
	return s
}

type UpdateAiotPersonTableItemResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateAiotPersonTableItemResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateAiotPersonTableItemResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotPersonTableItemResponse) GoString() string {
	return s.String()
}

func (s *UpdateAiotPersonTableItemResponse) SetHeaders(v map[string]*string) *UpdateAiotPersonTableItemResponse {
	s.Headers = v
	return s
}

func (s *UpdateAiotPersonTableItemResponse) SetBody(v *UpdateAiotPersonTableItemResponseBody) *UpdateAiotPersonTableItemResponse {
	s.Body = v
	return s
}

type UpdateAiotVehicleTableItemRequest struct {
	Id               *string                                            `json:"Id,omitempty" xml:"Id,omitempty"`
	VehicleTableId   *string                                            `json:"VehicleTableId,omitempty" xml:"VehicleTableId,omitempty"`
	VehicleTableItem *UpdateAiotVehicleTableItemRequestVehicleTableItem `json:"VehicleTableItem,omitempty" xml:"VehicleTableItem,omitempty" type:"Struct"`
}

func (s UpdateAiotVehicleTableItemRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotVehicleTableItemRequest) GoString() string {
	return s.String()
}

func (s *UpdateAiotVehicleTableItemRequest) SetId(v string) *UpdateAiotVehicleTableItemRequest {
	s.Id = &v
	return s
}

func (s *UpdateAiotVehicleTableItemRequest) SetVehicleTableId(v string) *UpdateAiotVehicleTableItemRequest {
	s.VehicleTableId = &v
	return s
}

func (s *UpdateAiotVehicleTableItemRequest) SetVehicleTableItem(v *UpdateAiotVehicleTableItemRequestVehicleTableItem) *UpdateAiotVehicleTableItemRequest {
	s.VehicleTableItem = v
	return s
}

type UpdateAiotVehicleTableItemRequestVehicleTableItem struct {
	BeginTime          *string `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	EndTime            *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerName          *string `json:"OwnerName,omitempty" xml:"OwnerName,omitempty"`
	PhoneNo            *string `json:"PhoneNo,omitempty" xml:"PhoneNo,omitempty"`
	PlateNo            *string `json:"PlateNo,omitempty" xml:"PlateNo,omitempty"`
	Remarks            *string `json:"Remarks,omitempty" xml:"Remarks,omitempty"`
	VehicleTableItemId *string `json:"VehicleTableItemId,omitempty" xml:"VehicleTableItemId,omitempty"`
}

func (s UpdateAiotVehicleTableItemRequestVehicleTableItem) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotVehicleTableItemRequestVehicleTableItem) GoString() string {
	return s.String()
}

func (s *UpdateAiotVehicleTableItemRequestVehicleTableItem) SetBeginTime(v string) *UpdateAiotVehicleTableItemRequestVehicleTableItem {
	s.BeginTime = &v
	return s
}

func (s *UpdateAiotVehicleTableItemRequestVehicleTableItem) SetEndTime(v string) *UpdateAiotVehicleTableItemRequestVehicleTableItem {
	s.EndTime = &v
	return s
}

func (s *UpdateAiotVehicleTableItemRequestVehicleTableItem) SetOwnerName(v string) *UpdateAiotVehicleTableItemRequestVehicleTableItem {
	s.OwnerName = &v
	return s
}

func (s *UpdateAiotVehicleTableItemRequestVehicleTableItem) SetPhoneNo(v string) *UpdateAiotVehicleTableItemRequestVehicleTableItem {
	s.PhoneNo = &v
	return s
}

func (s *UpdateAiotVehicleTableItemRequestVehicleTableItem) SetPlateNo(v string) *UpdateAiotVehicleTableItemRequestVehicleTableItem {
	s.PlateNo = &v
	return s
}

func (s *UpdateAiotVehicleTableItemRequestVehicleTableItem) SetRemarks(v string) *UpdateAiotVehicleTableItemRequestVehicleTableItem {
	s.Remarks = &v
	return s
}

func (s *UpdateAiotVehicleTableItemRequestVehicleTableItem) SetVehicleTableItemId(v string) *UpdateAiotVehicleTableItemRequestVehicleTableItem {
	s.VehicleTableItemId = &v
	return s
}

type UpdateAiotVehicleTableItemShrinkRequest struct {
	Id                     *string `json:"Id,omitempty" xml:"Id,omitempty"`
	VehicleTableId         *string `json:"VehicleTableId,omitempty" xml:"VehicleTableId,omitempty"`
	VehicleTableItemShrink *string `json:"VehicleTableItem,omitempty" xml:"VehicleTableItem,omitempty"`
}

func (s UpdateAiotVehicleTableItemShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotVehicleTableItemShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateAiotVehicleTableItemShrinkRequest) SetId(v string) *UpdateAiotVehicleTableItemShrinkRequest {
	s.Id = &v
	return s
}

func (s *UpdateAiotVehicleTableItemShrinkRequest) SetVehicleTableId(v string) *UpdateAiotVehicleTableItemShrinkRequest {
	s.VehicleTableId = &v
	return s
}

func (s *UpdateAiotVehicleTableItemShrinkRequest) SetVehicleTableItemShrink(v string) *UpdateAiotVehicleTableItemShrinkRequest {
	s.VehicleTableItemShrink = &v
	return s
}

type UpdateAiotVehicleTableItemResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId        *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	VehicleTableItem *UpdateAiotVehicleTableItemResponseBodyVehicleTableItem `json:"VehicleTableItem,omitempty" xml:"VehicleTableItem,omitempty" type:"Struct"`
}

func (s UpdateAiotVehicleTableItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotVehicleTableItemResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAiotVehicleTableItemResponseBody) SetCode(v string) *UpdateAiotVehicleTableItemResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateAiotVehicleTableItemResponseBody) SetMessage(v string) *UpdateAiotVehicleTableItemResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateAiotVehicleTableItemResponseBody) SetRequestId(v string) *UpdateAiotVehicleTableItemResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateAiotVehicleTableItemResponseBody) SetVehicleTableItem(v *UpdateAiotVehicleTableItemResponseBodyVehicleTableItem) *UpdateAiotVehicleTableItemResponseBody {
	s.VehicleTableItem = v
	return s
}

type UpdateAiotVehicleTableItemResponseBodyVehicleTableItem struct {
	BeginTime          *string `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	EndTime            *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerName          *string `json:"OwnerName,omitempty" xml:"OwnerName,omitempty"`
	PhoneNo            *string `json:"PhoneNo,omitempty" xml:"PhoneNo,omitempty"`
	PlateNo            *string `json:"PlateNo,omitempty" xml:"PlateNo,omitempty"`
	Remarks            *string `json:"Remarks,omitempty" xml:"Remarks,omitempty"`
	VehicleTableId     *string `json:"VehicleTableId,omitempty" xml:"VehicleTableId,omitempty"`
	VehicleTableItemId *string `json:"VehicleTableItemId,omitempty" xml:"VehicleTableItemId,omitempty"`
}

func (s UpdateAiotVehicleTableItemResponseBodyVehicleTableItem) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotVehicleTableItemResponseBodyVehicleTableItem) GoString() string {
	return s.String()
}

func (s *UpdateAiotVehicleTableItemResponseBodyVehicleTableItem) SetBeginTime(v string) *UpdateAiotVehicleTableItemResponseBodyVehicleTableItem {
	s.BeginTime = &v
	return s
}

func (s *UpdateAiotVehicleTableItemResponseBodyVehicleTableItem) SetEndTime(v string) *UpdateAiotVehicleTableItemResponseBodyVehicleTableItem {
	s.EndTime = &v
	return s
}

func (s *UpdateAiotVehicleTableItemResponseBodyVehicleTableItem) SetOwnerName(v string) *UpdateAiotVehicleTableItemResponseBodyVehicleTableItem {
	s.OwnerName = &v
	return s
}

func (s *UpdateAiotVehicleTableItemResponseBodyVehicleTableItem) SetPhoneNo(v string) *UpdateAiotVehicleTableItemResponseBodyVehicleTableItem {
	s.PhoneNo = &v
	return s
}

func (s *UpdateAiotVehicleTableItemResponseBodyVehicleTableItem) SetPlateNo(v string) *UpdateAiotVehicleTableItemResponseBodyVehicleTableItem {
	s.PlateNo = &v
	return s
}

func (s *UpdateAiotVehicleTableItemResponseBodyVehicleTableItem) SetRemarks(v string) *UpdateAiotVehicleTableItemResponseBodyVehicleTableItem {
	s.Remarks = &v
	return s
}

func (s *UpdateAiotVehicleTableItemResponseBodyVehicleTableItem) SetVehicleTableId(v string) *UpdateAiotVehicleTableItemResponseBodyVehicleTableItem {
	s.VehicleTableId = &v
	return s
}

func (s *UpdateAiotVehicleTableItemResponseBodyVehicleTableItem) SetVehicleTableItemId(v string) *UpdateAiotVehicleTableItemResponseBodyVehicleTableItem {
	s.VehicleTableItemId = &v
	return s
}

type UpdateAiotVehicleTableItemResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateAiotVehicleTableItemResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateAiotVehicleTableItemResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAiotVehicleTableItemResponse) GoString() string {
	return s.String()
}

func (s *UpdateAiotVehicleTableItemResponse) SetHeaders(v map[string]*string) *UpdateAiotVehicleTableItemResponse {
	s.Headers = v
	return s
}

func (s *UpdateAiotVehicleTableItemResponse) SetBody(v *UpdateAiotVehicleTableItemResponseBody) *UpdateAiotVehicleTableItemResponse {
	s.Body = v
	return s
}

type UpdateCorpRequest struct {
	AppName      *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	CorpId       *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	CorpName     *string `json:"CorpName,omitempty" xml:"CorpName,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	IconPath     *string `json:"IconPath,omitempty" xml:"IconPath,omitempty"`
	IsvSubId     *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	ParentCorpId *string `json:"ParentCorpId,omitempty" xml:"ParentCorpId,omitempty"`
}

func (s UpdateCorpRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCorpRequest) GoString() string {
	return s.String()
}

func (s *UpdateCorpRequest) SetAppName(v string) *UpdateCorpRequest {
	s.AppName = &v
	return s
}

func (s *UpdateCorpRequest) SetCorpId(v string) *UpdateCorpRequest {
	s.CorpId = &v
	return s
}

func (s *UpdateCorpRequest) SetCorpName(v string) *UpdateCorpRequest {
	s.CorpName = &v
	return s
}

func (s *UpdateCorpRequest) SetDescription(v string) *UpdateCorpRequest {
	s.Description = &v
	return s
}

func (s *UpdateCorpRequest) SetIconPath(v string) *UpdateCorpRequest {
	s.IconPath = &v
	return s
}

func (s *UpdateCorpRequest) SetIsvSubId(v string) *UpdateCorpRequest {
	s.IsvSubId = &v
	return s
}

func (s *UpdateCorpRequest) SetParentCorpId(v string) *UpdateCorpRequest {
	s.ParentCorpId = &v
	return s
}

type UpdateCorpResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateCorpResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateCorpResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateCorpResponseBody) SetCode(v string) *UpdateCorpResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateCorpResponseBody) SetData(v string) *UpdateCorpResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateCorpResponseBody) SetMessage(v string) *UpdateCorpResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateCorpResponseBody) SetRequestId(v string) *UpdateCorpResponseBody {
	s.RequestId = &v
	return s
}

type UpdateCorpResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateCorpResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateCorpResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCorpResponse) GoString() string {
	return s.String()
}

func (s *UpdateCorpResponse) SetHeaders(v map[string]*string) *UpdateCorpResponse {
	s.Headers = v
	return s
}

func (s *UpdateCorpResponse) SetBody(v *UpdateCorpResponseBody) *UpdateCorpResponse {
	s.Body = v
	return s
}

type UpdateDataSourceRequest struct {
	DataSourceId   *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Url            *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s UpdateDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataSourceRequest) GoString() string {
	return s.String()
}

func (s *UpdateDataSourceRequest) SetDataSourceId(v string) *UpdateDataSourceRequest {
	s.DataSourceId = &v
	return s
}

func (s *UpdateDataSourceRequest) SetDataSourceName(v string) *UpdateDataSourceRequest {
	s.DataSourceName = &v
	return s
}

func (s *UpdateDataSourceRequest) SetDescription(v string) *UpdateDataSourceRequest {
	s.Description = &v
	return s
}

func (s *UpdateDataSourceRequest) SetUrl(v string) *UpdateDataSourceRequest {
	s.Url = &v
	return s
}

type UpdateDataSourceResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDataSourceResponseBody) SetCode(v string) *UpdateDataSourceResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateDataSourceResponseBody) SetMessage(v string) *UpdateDataSourceResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateDataSourceResponseBody) SetRequestId(v string) *UpdateDataSourceResponseBody {
	s.RequestId = &v
	return s
}

type UpdateDataSourceResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataSourceResponse) GoString() string {
	return s.String()
}

func (s *UpdateDataSourceResponse) SetHeaders(v map[string]*string) *UpdateDataSourceResponse {
	s.Headers = v
	return s
}

func (s *UpdateDataSourceResponse) SetBody(v *UpdateDataSourceResponseBody) *UpdateDataSourceResponse {
	s.Body = v
	return s
}

type UpdateDeviceRequest struct {
	BitRate          *string `json:"BitRate,omitempty" xml:"BitRate,omitempty"`
	CorpId           *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DeviceAddress    *string `json:"DeviceAddress,omitempty" xml:"DeviceAddress,omitempty"`
	DeviceDirection  *string `json:"DeviceDirection,omitempty" xml:"DeviceDirection,omitempty"`
	DeviceName       *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DeviceResolution *string `json:"DeviceResolution,omitempty" xml:"DeviceResolution,omitempty"`
	DeviceSite       *string `json:"DeviceSite,omitempty" xml:"DeviceSite,omitempty"`
	DeviceType       *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	GbId             *string `json:"GbId,omitempty" xml:"GbId,omitempty"`
	Vendor           *string `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s UpdateDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDeviceRequest) GoString() string {
	return s.String()
}

func (s *UpdateDeviceRequest) SetBitRate(v string) *UpdateDeviceRequest {
	s.BitRate = &v
	return s
}

func (s *UpdateDeviceRequest) SetCorpId(v string) *UpdateDeviceRequest {
	s.CorpId = &v
	return s
}

func (s *UpdateDeviceRequest) SetDeviceAddress(v string) *UpdateDeviceRequest {
	s.DeviceAddress = &v
	return s
}

func (s *UpdateDeviceRequest) SetDeviceDirection(v string) *UpdateDeviceRequest {
	s.DeviceDirection = &v
	return s
}

func (s *UpdateDeviceRequest) SetDeviceName(v string) *UpdateDeviceRequest {
	s.DeviceName = &v
	return s
}

func (s *UpdateDeviceRequest) SetDeviceResolution(v string) *UpdateDeviceRequest {
	s.DeviceResolution = &v
	return s
}

func (s *UpdateDeviceRequest) SetDeviceSite(v string) *UpdateDeviceRequest {
	s.DeviceSite = &v
	return s
}

func (s *UpdateDeviceRequest) SetDeviceType(v string) *UpdateDeviceRequest {
	s.DeviceType = &v
	return s
}

func (s *UpdateDeviceRequest) SetGbId(v string) *UpdateDeviceRequest {
	s.GbId = &v
	return s
}

func (s *UpdateDeviceRequest) SetVendor(v string) *UpdateDeviceRequest {
	s.Vendor = &v
	return s
}

type UpdateDeviceResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDeviceResponseBody) SetCode(v string) *UpdateDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateDeviceResponseBody) SetData(v string) *UpdateDeviceResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateDeviceResponseBody) SetMessage(v string) *UpdateDeviceResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateDeviceResponseBody) SetRequestId(v string) *UpdateDeviceResponseBody {
	s.RequestId = &v
	return s
}

type UpdateDeviceResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDeviceResponse) GoString() string {
	return s.String()
}

func (s *UpdateDeviceResponse) SetHeaders(v map[string]*string) *UpdateDeviceResponse {
	s.Headers = v
	return s
}

func (s *UpdateDeviceResponse) SetBody(v *UpdateDeviceResponseBody) *UpdateDeviceResponse {
	s.Body = v
	return s
}

type UpdateDeviceCaptureStrategyRequest struct {
	// 设备通道
	DeviceCode *string `json:"DeviceCode,omitempty" xml:"DeviceCode,omitempty"`
	// 设备类型
	DeviceType *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	// 周一图片抓去模式
	MondayCaptureStrategy *string `json:"MondayCaptureStrategy,omitempty" xml:"MondayCaptureStrategy,omitempty"`
}

func (s UpdateDeviceCaptureStrategyRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDeviceCaptureStrategyRequest) GoString() string {
	return s.String()
}

func (s *UpdateDeviceCaptureStrategyRequest) SetDeviceCode(v string) *UpdateDeviceCaptureStrategyRequest {
	s.DeviceCode = &v
	return s
}

func (s *UpdateDeviceCaptureStrategyRequest) SetDeviceType(v string) *UpdateDeviceCaptureStrategyRequest {
	s.DeviceType = &v
	return s
}

func (s *UpdateDeviceCaptureStrategyRequest) SetMondayCaptureStrategy(v string) *UpdateDeviceCaptureStrategyRequest {
	s.MondayCaptureStrategy = &v
	return s
}

type UpdateDeviceCaptureStrategyResponseBody struct {
	// 响应码
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// 响应信息
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// RequestId
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateDeviceCaptureStrategyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateDeviceCaptureStrategyResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDeviceCaptureStrategyResponseBody) SetCode(v string) *UpdateDeviceCaptureStrategyResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateDeviceCaptureStrategyResponseBody) SetMessage(v string) *UpdateDeviceCaptureStrategyResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateDeviceCaptureStrategyResponseBody) SetRequestId(v string) *UpdateDeviceCaptureStrategyResponseBody {
	s.RequestId = &v
	return s
}

type UpdateDeviceCaptureStrategyResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateDeviceCaptureStrategyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateDeviceCaptureStrategyResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDeviceCaptureStrategyResponse) GoString() string {
	return s.String()
}

func (s *UpdateDeviceCaptureStrategyResponse) SetHeaders(v map[string]*string) *UpdateDeviceCaptureStrategyResponse {
	s.Headers = v
	return s
}

func (s *UpdateDeviceCaptureStrategyResponse) SetBody(v *UpdateDeviceCaptureStrategyResponseBody) *UpdateDeviceCaptureStrategyResponse {
	s.Body = v
	return s
}

type UpdateDevicesStorageRequest struct {
	UpdateStorageRequests []*UpdateDevicesStorageRequestUpdateStorageRequests `json:"UpdateStorageRequests,omitempty" xml:"UpdateStorageRequests,omitempty" type:"Repeated"`
}

func (s UpdateDevicesStorageRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDevicesStorageRequest) GoString() string {
	return s.String()
}

func (s *UpdateDevicesStorageRequest) SetUpdateStorageRequests(v []*UpdateDevicesStorageRequestUpdateStorageRequests) *UpdateDevicesStorageRequest {
	s.UpdateStorageRequests = v
	return s
}

type UpdateDevicesStorageRequestUpdateStorageRequests struct {
	DeviceIds   *string                                                        `json:"DeviceIds,omitempty" xml:"DeviceIds,omitempty"`
	StorageDays []*UpdateDevicesStorageRequestUpdateStorageRequestsStorageDays `json:"StorageDays,omitempty" xml:"StorageDays,omitempty" type:"Repeated"`
}

func (s UpdateDevicesStorageRequestUpdateStorageRequests) String() string {
	return tea.Prettify(s)
}

func (s UpdateDevicesStorageRequestUpdateStorageRequests) GoString() string {
	return s.String()
}

func (s *UpdateDevicesStorageRequestUpdateStorageRequests) SetDeviceIds(v string) *UpdateDevicesStorageRequestUpdateStorageRequests {
	s.DeviceIds = &v
	return s
}

func (s *UpdateDevicesStorageRequestUpdateStorageRequests) SetStorageDays(v []*UpdateDevicesStorageRequestUpdateStorageRequestsStorageDays) *UpdateDevicesStorageRequestUpdateStorageRequests {
	s.StorageDays = v
	return s
}

type UpdateDevicesStorageRequestUpdateStorageRequestsStorageDays struct {
	StorageDays *int64  `json:"StorageDays,omitempty" xml:"StorageDays,omitempty"`
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s UpdateDevicesStorageRequestUpdateStorageRequestsStorageDays) String() string {
	return tea.Prettify(s)
}

func (s UpdateDevicesStorageRequestUpdateStorageRequestsStorageDays) GoString() string {
	return s.String()
}

func (s *UpdateDevicesStorageRequestUpdateStorageRequestsStorageDays) SetStorageDays(v int64) *UpdateDevicesStorageRequestUpdateStorageRequestsStorageDays {
	s.StorageDays = &v
	return s
}

func (s *UpdateDevicesStorageRequestUpdateStorageRequestsStorageDays) SetStorageType(v string) *UpdateDevicesStorageRequestUpdateStorageRequestsStorageDays {
	s.StorageType = &v
	return s
}

type UpdateDevicesStorageShrinkRequest struct {
	UpdateStorageRequestsShrink *string `json:"UpdateStorageRequests,omitempty" xml:"UpdateStorageRequests,omitempty"`
}

func (s UpdateDevicesStorageShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDevicesStorageShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateDevicesStorageShrinkRequest) SetUpdateStorageRequestsShrink(v string) *UpdateDevicesStorageShrinkRequest {
	s.UpdateStorageRequestsShrink = &v
	return s
}

type UpdateDevicesStorageResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateDevicesStorageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateDevicesStorageResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDevicesStorageResponseBody) SetCode(v string) *UpdateDevicesStorageResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateDevicesStorageResponseBody) SetData(v bool) *UpdateDevicesStorageResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateDevicesStorageResponseBody) SetMessage(v string) *UpdateDevicesStorageResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateDevicesStorageResponseBody) SetRequestId(v string) *UpdateDevicesStorageResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateDevicesStorageResponseBody) SetSuccess(v bool) *UpdateDevicesStorageResponseBody {
	s.Success = &v
	return s
}

type UpdateDevicesStorageResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateDevicesStorageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateDevicesStorageResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDevicesStorageResponse) GoString() string {
	return s.String()
}

func (s *UpdateDevicesStorageResponse) SetHeaders(v map[string]*string) *UpdateDevicesStorageResponse {
	s.Headers = v
	return s
}

func (s *UpdateDevicesStorageResponse) SetBody(v *UpdateDevicesStorageResponseBody) *UpdateDevicesStorageResponse {
	s.Body = v
	return s
}

type UpdateDoubleVerificationGroupRequest struct {
	DoubleVerificationGroup *UpdateDoubleVerificationGroupRequestDoubleVerificationGroup `json:"DoubleVerificationGroup,omitempty" xml:"DoubleVerificationGroup,omitempty" type:"Struct"`
	Id                      *string                                                      `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s UpdateDoubleVerificationGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDoubleVerificationGroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateDoubleVerificationGroupRequest) SetDoubleVerificationGroup(v *UpdateDoubleVerificationGroupRequestDoubleVerificationGroup) *UpdateDoubleVerificationGroupRequest {
	s.DoubleVerificationGroup = v
	return s
}

func (s *UpdateDoubleVerificationGroupRequest) SetId(v string) *UpdateDoubleVerificationGroupRequest {
	s.Id = &v
	return s
}

type UpdateDoubleVerificationGroupRequestDoubleVerificationGroup struct {
	GroupId      *string                                                                    `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Interval     *int64                                                                     `json:"Interval,omitempty" xml:"Interval,omitempty"`
	MemberNumber *int64                                                                     `json:"MemberNumber,omitempty" xml:"MemberNumber,omitempty"`
	PersonIdList []*UpdateDoubleVerificationGroupRequestDoubleVerificationGroupPersonIdList `json:"PersonIdList,omitempty" xml:"PersonIdList,omitempty" type:"Repeated"`
}

func (s UpdateDoubleVerificationGroupRequestDoubleVerificationGroup) String() string {
	return tea.Prettify(s)
}

func (s UpdateDoubleVerificationGroupRequestDoubleVerificationGroup) GoString() string {
	return s.String()
}

func (s *UpdateDoubleVerificationGroupRequestDoubleVerificationGroup) SetGroupId(v string) *UpdateDoubleVerificationGroupRequestDoubleVerificationGroup {
	s.GroupId = &v
	return s
}

func (s *UpdateDoubleVerificationGroupRequestDoubleVerificationGroup) SetInterval(v int64) *UpdateDoubleVerificationGroupRequestDoubleVerificationGroup {
	s.Interval = &v
	return s
}

func (s *UpdateDoubleVerificationGroupRequestDoubleVerificationGroup) SetMemberNumber(v int64) *UpdateDoubleVerificationGroupRequestDoubleVerificationGroup {
	s.MemberNumber = &v
	return s
}

func (s *UpdateDoubleVerificationGroupRequestDoubleVerificationGroup) SetPersonIdList(v []*UpdateDoubleVerificationGroupRequestDoubleVerificationGroupPersonIdList) *UpdateDoubleVerificationGroupRequestDoubleVerificationGroup {
	s.PersonIdList = v
	return s
}

type UpdateDoubleVerificationGroupRequestDoubleVerificationGroupPersonIdList struct {
	PersonId      *string `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	PersonTableId *string `json:"PersonTableId,omitempty" xml:"PersonTableId,omitempty"`
}

func (s UpdateDoubleVerificationGroupRequestDoubleVerificationGroupPersonIdList) String() string {
	return tea.Prettify(s)
}

func (s UpdateDoubleVerificationGroupRequestDoubleVerificationGroupPersonIdList) GoString() string {
	return s.String()
}

func (s *UpdateDoubleVerificationGroupRequestDoubleVerificationGroupPersonIdList) SetPersonId(v string) *UpdateDoubleVerificationGroupRequestDoubleVerificationGroupPersonIdList {
	s.PersonId = &v
	return s
}

func (s *UpdateDoubleVerificationGroupRequestDoubleVerificationGroupPersonIdList) SetPersonTableId(v string) *UpdateDoubleVerificationGroupRequestDoubleVerificationGroupPersonIdList {
	s.PersonTableId = &v
	return s
}

type UpdateDoubleVerificationGroupResponseBody struct {
	Code                    *string                                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	DoubleVerificationGroup *UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroup `json:"DoubleVerificationGroup,omitempty" xml:"DoubleVerificationGroup,omitempty" type:"Struct"`
	Message                 *string                                                           `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateDoubleVerificationGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateDoubleVerificationGroupResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDoubleVerificationGroupResponseBody) SetCode(v string) *UpdateDoubleVerificationGroupResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateDoubleVerificationGroupResponseBody) SetDoubleVerificationGroup(v *UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroup) *UpdateDoubleVerificationGroupResponseBody {
	s.DoubleVerificationGroup = v
	return s
}

func (s *UpdateDoubleVerificationGroupResponseBody) SetMessage(v string) *UpdateDoubleVerificationGroupResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateDoubleVerificationGroupResponseBody) SetRequestId(v string) *UpdateDoubleVerificationGroupResponseBody {
	s.RequestId = &v
	return s
}

type UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroup struct {
	DeviceId     *string                                                                         `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	Enabled      *string                                                                         `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	GroupId      *string                                                                         `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Interval     *int64                                                                          `json:"Interval,omitempty" xml:"Interval,omitempty"`
	LastChange   *string                                                                         `json:"LastChange,omitempty" xml:"LastChange,omitempty"`
	MemberNumber *int64                                                                          `json:"MemberNumber,omitempty" xml:"MemberNumber,omitempty"`
	PersonIdList []*UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroupPersonIdList `json:"PersonIdList,omitempty" xml:"PersonIdList,omitempty" type:"Repeated"`
}

func (s UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroup) String() string {
	return tea.Prettify(s)
}

func (s UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroup) GoString() string {
	return s.String()
}

func (s *UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroup) SetDeviceId(v string) *UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroup {
	s.DeviceId = &v
	return s
}

func (s *UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroup) SetEnabled(v string) *UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroup {
	s.Enabled = &v
	return s
}

func (s *UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroup) SetGroupId(v string) *UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroup {
	s.GroupId = &v
	return s
}

func (s *UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroup) SetInterval(v int64) *UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroup {
	s.Interval = &v
	return s
}

func (s *UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroup) SetLastChange(v string) *UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroup {
	s.LastChange = &v
	return s
}

func (s *UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroup) SetMemberNumber(v int64) *UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroup {
	s.MemberNumber = &v
	return s
}

func (s *UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroup) SetPersonIdList(v []*UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroupPersonIdList) *UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroup {
	s.PersonIdList = v
	return s
}

type UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroupPersonIdList struct {
	PersonId      *string `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	PersonTableId *string `json:"PersonTableId,omitempty" xml:"PersonTableId,omitempty"`
}

func (s UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroupPersonIdList) String() string {
	return tea.Prettify(s)
}

func (s UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroupPersonIdList) GoString() string {
	return s.String()
}

func (s *UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroupPersonIdList) SetPersonId(v string) *UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroupPersonIdList {
	s.PersonId = &v
	return s
}

func (s *UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroupPersonIdList) SetPersonTableId(v string) *UpdateDoubleVerificationGroupResponseBodyDoubleVerificationGroupPersonIdList {
	s.PersonTableId = &v
	return s
}

type UpdateDoubleVerificationGroupResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateDoubleVerificationGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateDoubleVerificationGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDoubleVerificationGroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateDoubleVerificationGroupResponse) SetHeaders(v map[string]*string) *UpdateDoubleVerificationGroupResponse {
	s.Headers = v
	return s
}

func (s *UpdateDoubleVerificationGroupResponse) SetBody(v *UpdateDoubleVerificationGroupResponseBody) *UpdateDoubleVerificationGroupResponse {
	s.Body = v
	return s
}

type UpdateModelServiceRequest struct {
	ClientToken      *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ModelServiceId   *string `json:"ModelServiceId,omitempty" xml:"ModelServiceId,omitempty"`
	ModelServiceName *string `json:"ModelServiceName,omitempty" xml:"ModelServiceName,omitempty"`
	QpsRequired      *int32  `json:"QpsRequired,omitempty" xml:"QpsRequired,omitempty"`
}

func (s UpdateModelServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateModelServiceRequest) GoString() string {
	return s.String()
}

func (s *UpdateModelServiceRequest) SetClientToken(v string) *UpdateModelServiceRequest {
	s.ClientToken = &v
	return s
}

func (s *UpdateModelServiceRequest) SetModelServiceId(v string) *UpdateModelServiceRequest {
	s.ModelServiceId = &v
	return s
}

func (s *UpdateModelServiceRequest) SetModelServiceName(v string) *UpdateModelServiceRequest {
	s.ModelServiceName = &v
	return s
}

func (s *UpdateModelServiceRequest) SetQpsRequired(v int32) *UpdateModelServiceRequest {
	s.QpsRequired = &v
	return s
}

type UpdateModelServiceResponseBody struct {
	Code    *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *UpdateModelServiceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateModelServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateModelServiceResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateModelServiceResponseBody) SetCode(v string) *UpdateModelServiceResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateModelServiceResponseBody) SetData(v *UpdateModelServiceResponseBodyData) *UpdateModelServiceResponseBody {
	s.Data = v
	return s
}

func (s *UpdateModelServiceResponseBody) SetMessage(v string) *UpdateModelServiceResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateModelServiceResponseBody) SetRequestId(v string) *UpdateModelServiceResponseBody {
	s.RequestId = &v
	return s
}

type UpdateModelServiceResponseBodyData struct {
	AlgorithmCode            *string `json:"AlgorithmCode,omitempty" xml:"AlgorithmCode,omitempty"`
	ModelServiceInstanceId   *string `json:"ModelServiceInstanceId,omitempty" xml:"ModelServiceInstanceId,omitempty"`
	ModelServiceInstanceName *string `json:"ModelServiceInstanceName,omitempty" xml:"ModelServiceInstanceName,omitempty"`
	ModelServiceStatus       *string `json:"ModelServiceStatus,omitempty" xml:"ModelServiceStatus,omitempty"`
	QpsRequired              *int32  `json:"QpsRequired,omitempty" xml:"QpsRequired,omitempty"`
}

func (s UpdateModelServiceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateModelServiceResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateModelServiceResponseBodyData) SetAlgorithmCode(v string) *UpdateModelServiceResponseBodyData {
	s.AlgorithmCode = &v
	return s
}

func (s *UpdateModelServiceResponseBodyData) SetModelServiceInstanceId(v string) *UpdateModelServiceResponseBodyData {
	s.ModelServiceInstanceId = &v
	return s
}

func (s *UpdateModelServiceResponseBodyData) SetModelServiceInstanceName(v string) *UpdateModelServiceResponseBodyData {
	s.ModelServiceInstanceName = &v
	return s
}

func (s *UpdateModelServiceResponseBodyData) SetModelServiceStatus(v string) *UpdateModelServiceResponseBodyData {
	s.ModelServiceStatus = &v
	return s
}

func (s *UpdateModelServiceResponseBodyData) SetQpsRequired(v int32) *UpdateModelServiceResponseBodyData {
	s.QpsRequired = &v
	return s
}

type UpdateModelServiceResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateModelServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateModelServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateModelServiceResponse) GoString() string {
	return s.String()
}

func (s *UpdateModelServiceResponse) SetHeaders(v map[string]*string) *UpdateModelServiceResponse {
	s.Headers = v
	return s
}

func (s *UpdateModelServiceResponse) SetBody(v *UpdateModelServiceResponseBody) *UpdateModelServiceResponse {
	s.Body = v
	return s
}

type UpdateMonitorRequest struct {
	AlgorithmVendor      *string `json:"AlgorithmVendor,omitempty" xml:"AlgorithmVendor,omitempty"`
	AttributeName        *string `json:"AttributeName,omitempty" xml:"AttributeName,omitempty"`
	AttributeOperateType *string `json:"AttributeOperateType,omitempty" xml:"AttributeOperateType,omitempty"`
	AttributeValueList   *string `json:"AttributeValueList,omitempty" xml:"AttributeValueList,omitempty"`
	CorpId               *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DeviceList           *string `json:"DeviceList,omitempty" xml:"DeviceList,omitempty"`
	DeviceOperateType    *string `json:"DeviceOperateType,omitempty" xml:"DeviceOperateType,omitempty"`
	NotifierAppSecret    *string `json:"NotifierAppSecret,omitempty" xml:"NotifierAppSecret,omitempty"`
	NotifierExtendValues *string `json:"NotifierExtendValues,omitempty" xml:"NotifierExtendValues,omitempty"`
	NotifierTimeOut      *int32  `json:"NotifierTimeOut,omitempty" xml:"NotifierTimeOut,omitempty"`
	NotifierType         *string `json:"NotifierType,omitempty" xml:"NotifierType,omitempty"`
	NotifierUrl          *string `json:"NotifierUrl,omitempty" xml:"NotifierUrl,omitempty"`
	PicList              *string `json:"PicList,omitempty" xml:"PicList,omitempty"`
	PicOperateType       *string `json:"PicOperateType,omitempty" xml:"PicOperateType,omitempty"`
	RuleExpression       *string `json:"RuleExpression,omitempty" xml:"RuleExpression,omitempty"`
	RuleName             *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	TaskId               *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s UpdateMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMonitorRequest) GoString() string {
	return s.String()
}

func (s *UpdateMonitorRequest) SetAlgorithmVendor(v string) *UpdateMonitorRequest {
	s.AlgorithmVendor = &v
	return s
}

func (s *UpdateMonitorRequest) SetAttributeName(v string) *UpdateMonitorRequest {
	s.AttributeName = &v
	return s
}

func (s *UpdateMonitorRequest) SetAttributeOperateType(v string) *UpdateMonitorRequest {
	s.AttributeOperateType = &v
	return s
}

func (s *UpdateMonitorRequest) SetAttributeValueList(v string) *UpdateMonitorRequest {
	s.AttributeValueList = &v
	return s
}

func (s *UpdateMonitorRequest) SetCorpId(v string) *UpdateMonitorRequest {
	s.CorpId = &v
	return s
}

func (s *UpdateMonitorRequest) SetDescription(v string) *UpdateMonitorRequest {
	s.Description = &v
	return s
}

func (s *UpdateMonitorRequest) SetDeviceList(v string) *UpdateMonitorRequest {
	s.DeviceList = &v
	return s
}

func (s *UpdateMonitorRequest) SetDeviceOperateType(v string) *UpdateMonitorRequest {
	s.DeviceOperateType = &v
	return s
}

func (s *UpdateMonitorRequest) SetNotifierAppSecret(v string) *UpdateMonitorRequest {
	s.NotifierAppSecret = &v
	return s
}

func (s *UpdateMonitorRequest) SetNotifierExtendValues(v string) *UpdateMonitorRequest {
	s.NotifierExtendValues = &v
	return s
}

func (s *UpdateMonitorRequest) SetNotifierTimeOut(v int32) *UpdateMonitorRequest {
	s.NotifierTimeOut = &v
	return s
}

func (s *UpdateMonitorRequest) SetNotifierType(v string) *UpdateMonitorRequest {
	s.NotifierType = &v
	return s
}

func (s *UpdateMonitorRequest) SetNotifierUrl(v string) *UpdateMonitorRequest {
	s.NotifierUrl = &v
	return s
}

func (s *UpdateMonitorRequest) SetPicList(v string) *UpdateMonitorRequest {
	s.PicList = &v
	return s
}

func (s *UpdateMonitorRequest) SetPicOperateType(v string) *UpdateMonitorRequest {
	s.PicOperateType = &v
	return s
}

func (s *UpdateMonitorRequest) SetRuleExpression(v string) *UpdateMonitorRequest {
	s.RuleExpression = &v
	return s
}

func (s *UpdateMonitorRequest) SetRuleName(v string) *UpdateMonitorRequest {
	s.RuleName = &v
	return s
}

func (s *UpdateMonitorRequest) SetTaskId(v string) *UpdateMonitorRequest {
	s.TaskId = &v
	return s
}

type UpdateMonitorResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMonitorResponseBody) SetCode(v string) *UpdateMonitorResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateMonitorResponseBody) SetData(v string) *UpdateMonitorResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateMonitorResponseBody) SetMessage(v string) *UpdateMonitorResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateMonitorResponseBody) SetRequestId(v string) *UpdateMonitorResponseBody {
	s.RequestId = &v
	return s
}

type UpdateMonitorResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMonitorResponse) GoString() string {
	return s.String()
}

func (s *UpdateMonitorResponse) SetHeaders(v map[string]*string) *UpdateMonitorResponse {
	s.Headers = v
	return s
}

func (s *UpdateMonitorResponse) SetBody(v *UpdateMonitorResponseBody) *UpdateMonitorResponse {
	s.Body = v
	return s
}

type UpdateProfileRequest struct {
	BizId       *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	CatalogId   *int64  `json:"CatalogId,omitempty" xml:"CatalogId,omitempty"`
	CorpId      *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	FaceUrl     *string `json:"FaceUrl,omitempty" xml:"FaceUrl,omitempty"`
	Gender      *int32  `json:"Gender,omitempty" xml:"Gender,omitempty"`
	IdNumber    *string `json:"IdNumber,omitempty" xml:"IdNumber,omitempty"`
	IsvSubId    *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	LiveAddress *string `json:"LiveAddress,omitempty" xml:"LiveAddress,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PhoneNo     *string `json:"PhoneNo,omitempty" xml:"PhoneNo,omitempty"`
	PlateNo     *string `json:"PlateNo,omitempty" xml:"PlateNo,omitempty"`
	ProfileId   *int64  `json:"ProfileId,omitempty" xml:"ProfileId,omitempty"`
	SceneType   *string `json:"SceneType,omitempty" xml:"SceneType,omitempty"`
}

func (s UpdateProfileRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateProfileRequest) GoString() string {
	return s.String()
}

func (s *UpdateProfileRequest) SetBizId(v string) *UpdateProfileRequest {
	s.BizId = &v
	return s
}

func (s *UpdateProfileRequest) SetCatalogId(v int64) *UpdateProfileRequest {
	s.CatalogId = &v
	return s
}

func (s *UpdateProfileRequest) SetCorpId(v string) *UpdateProfileRequest {
	s.CorpId = &v
	return s
}

func (s *UpdateProfileRequest) SetFaceUrl(v string) *UpdateProfileRequest {
	s.FaceUrl = &v
	return s
}

func (s *UpdateProfileRequest) SetGender(v int32) *UpdateProfileRequest {
	s.Gender = &v
	return s
}

func (s *UpdateProfileRequest) SetIdNumber(v string) *UpdateProfileRequest {
	s.IdNumber = &v
	return s
}

func (s *UpdateProfileRequest) SetIsvSubId(v string) *UpdateProfileRequest {
	s.IsvSubId = &v
	return s
}

func (s *UpdateProfileRequest) SetLiveAddress(v string) *UpdateProfileRequest {
	s.LiveAddress = &v
	return s
}

func (s *UpdateProfileRequest) SetName(v string) *UpdateProfileRequest {
	s.Name = &v
	return s
}

func (s *UpdateProfileRequest) SetPhoneNo(v string) *UpdateProfileRequest {
	s.PhoneNo = &v
	return s
}

func (s *UpdateProfileRequest) SetPlateNo(v string) *UpdateProfileRequest {
	s.PlateNo = &v
	return s
}

func (s *UpdateProfileRequest) SetProfileId(v int64) *UpdateProfileRequest {
	s.ProfileId = &v
	return s
}

func (s *UpdateProfileRequest) SetSceneType(v string) *UpdateProfileRequest {
	s.SceneType = &v
	return s
}

type UpdateProfileResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateProfileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateProfileResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateProfileResponseBody) SetCode(v string) *UpdateProfileResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateProfileResponseBody) SetData(v string) *UpdateProfileResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateProfileResponseBody) SetMessage(v string) *UpdateProfileResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateProfileResponseBody) SetRequestId(v string) *UpdateProfileResponseBody {
	s.RequestId = &v
	return s
}

type UpdateProfileResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateProfileResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateProfileResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateProfileResponse) GoString() string {
	return s.String()
}

func (s *UpdateProfileResponse) SetHeaders(v map[string]*string) *UpdateProfileResponse {
	s.Headers = v
	return s
}

func (s *UpdateProfileResponse) SetBody(v *UpdateProfileResponseBody) *UpdateProfileResponse {
	s.Body = v
	return s
}

type UpdateProfileCatalogRequest struct {
	CatalogId   *int64  `json:"CatalogId,omitempty" xml:"CatalogId,omitempty"`
	CatalogName *string `json:"CatalogName,omitempty" xml:"CatalogName,omitempty"`
	CorpId      *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	IsvSubId    *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
}

func (s UpdateProfileCatalogRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateProfileCatalogRequest) GoString() string {
	return s.String()
}

func (s *UpdateProfileCatalogRequest) SetCatalogId(v int64) *UpdateProfileCatalogRequest {
	s.CatalogId = &v
	return s
}

func (s *UpdateProfileCatalogRequest) SetCatalogName(v string) *UpdateProfileCatalogRequest {
	s.CatalogName = &v
	return s
}

func (s *UpdateProfileCatalogRequest) SetCorpId(v string) *UpdateProfileCatalogRequest {
	s.CorpId = &v
	return s
}

func (s *UpdateProfileCatalogRequest) SetIsvSubId(v string) *UpdateProfileCatalogRequest {
	s.IsvSubId = &v
	return s
}

type UpdateProfileCatalogResponseBody struct {
	Code      *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *UpdateProfileCatalogResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                               `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateProfileCatalogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateProfileCatalogResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateProfileCatalogResponseBody) SetCode(v string) *UpdateProfileCatalogResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateProfileCatalogResponseBody) SetData(v *UpdateProfileCatalogResponseBodyData) *UpdateProfileCatalogResponseBody {
	s.Data = v
	return s
}

func (s *UpdateProfileCatalogResponseBody) SetMessage(v string) *UpdateProfileCatalogResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateProfileCatalogResponseBody) SetRequestId(v string) *UpdateProfileCatalogResponseBody {
	s.RequestId = &v
	return s
}

type UpdateProfileCatalogResponseBodyData struct {
	CatalogId       *int64  `json:"CatalogId,omitempty" xml:"CatalogId,omitempty"`
	CatalogName     *string `json:"CatalogName,omitempty" xml:"CatalogName,omitempty"`
	IsvSubId        *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	ParentCatalogId *string `json:"ParentCatalogId,omitempty" xml:"ParentCatalogId,omitempty"`
	ProfileCount    *int64  `json:"ProfileCount,omitempty" xml:"ProfileCount,omitempty"`
}

func (s UpdateProfileCatalogResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateProfileCatalogResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateProfileCatalogResponseBodyData) SetCatalogId(v int64) *UpdateProfileCatalogResponseBodyData {
	s.CatalogId = &v
	return s
}

func (s *UpdateProfileCatalogResponseBodyData) SetCatalogName(v string) *UpdateProfileCatalogResponseBodyData {
	s.CatalogName = &v
	return s
}

func (s *UpdateProfileCatalogResponseBodyData) SetIsvSubId(v string) *UpdateProfileCatalogResponseBodyData {
	s.IsvSubId = &v
	return s
}

func (s *UpdateProfileCatalogResponseBodyData) SetParentCatalogId(v string) *UpdateProfileCatalogResponseBodyData {
	s.ParentCatalogId = &v
	return s
}

func (s *UpdateProfileCatalogResponseBodyData) SetProfileCount(v int64) *UpdateProfileCatalogResponseBodyData {
	s.ProfileCount = &v
	return s
}

type UpdateProfileCatalogResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateProfileCatalogResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateProfileCatalogResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateProfileCatalogResponse) GoString() string {
	return s.String()
}

func (s *UpdateProfileCatalogResponse) SetHeaders(v map[string]*string) *UpdateProfileCatalogResponse {
	s.Headers = v
	return s
}

func (s *UpdateProfileCatalogResponse) SetBody(v *UpdateProfileCatalogResponseBody) *UpdateProfileCatalogResponse {
	s.Body = v
	return s
}

type UpdateUserRequest struct {
	Address          *string `json:"Address,omitempty" xml:"Address,omitempty"`
	Age              *int32  `json:"Age,omitempty" xml:"Age,omitempty"`
	Attachment       *string `json:"Attachment,omitempty" xml:"Attachment,omitempty"`
	BizId            *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	CorpId           *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	FaceImageContent *string `json:"FaceImageContent,omitempty" xml:"FaceImageContent,omitempty"`
	FaceImageUrl     *string `json:"FaceImageUrl,omitempty" xml:"FaceImageUrl,omitempty"`
	Gender           *int32  `json:"Gender,omitempty" xml:"Gender,omitempty"`
	IdNumber         *string `json:"IdNumber,omitempty" xml:"IdNumber,omitempty"`
	IsvSubId         *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	PhoneNo          *string `json:"PhoneNo,omitempty" xml:"PhoneNo,omitempty"`
	PlateNo          *string `json:"PlateNo,omitempty" xml:"PlateNo,omitempty"`
	UserGroupId      *int64  `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
	UserId           *int64  `json:"UserId,omitempty" xml:"UserId,omitempty"`
	UserName         *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s UpdateUserRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateUserRequest) GoString() string {
	return s.String()
}

func (s *UpdateUserRequest) SetAddress(v string) *UpdateUserRequest {
	s.Address = &v
	return s
}

func (s *UpdateUserRequest) SetAge(v int32) *UpdateUserRequest {
	s.Age = &v
	return s
}

func (s *UpdateUserRequest) SetAttachment(v string) *UpdateUserRequest {
	s.Attachment = &v
	return s
}

func (s *UpdateUserRequest) SetBizId(v string) *UpdateUserRequest {
	s.BizId = &v
	return s
}

func (s *UpdateUserRequest) SetCorpId(v string) *UpdateUserRequest {
	s.CorpId = &v
	return s
}

func (s *UpdateUserRequest) SetFaceImageContent(v string) *UpdateUserRequest {
	s.FaceImageContent = &v
	return s
}

func (s *UpdateUserRequest) SetFaceImageUrl(v string) *UpdateUserRequest {
	s.FaceImageUrl = &v
	return s
}

func (s *UpdateUserRequest) SetGender(v int32) *UpdateUserRequest {
	s.Gender = &v
	return s
}

func (s *UpdateUserRequest) SetIdNumber(v string) *UpdateUserRequest {
	s.IdNumber = &v
	return s
}

func (s *UpdateUserRequest) SetIsvSubId(v string) *UpdateUserRequest {
	s.IsvSubId = &v
	return s
}

func (s *UpdateUserRequest) SetPhoneNo(v string) *UpdateUserRequest {
	s.PhoneNo = &v
	return s
}

func (s *UpdateUserRequest) SetPlateNo(v string) *UpdateUserRequest {
	s.PlateNo = &v
	return s
}

func (s *UpdateUserRequest) SetUserGroupId(v int64) *UpdateUserRequest {
	s.UserGroupId = &v
	return s
}

func (s *UpdateUserRequest) SetUserId(v int64) *UpdateUserRequest {
	s.UserId = &v
	return s
}

func (s *UpdateUserRequest) SetUserName(v string) *UpdateUserRequest {
	s.UserName = &v
	return s
}

type UpdateUserResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateUserResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateUserResponseBody) SetCode(v string) *UpdateUserResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateUserResponseBody) SetData(v string) *UpdateUserResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateUserResponseBody) SetMessage(v string) *UpdateUserResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateUserResponseBody) SetRequestId(v string) *UpdateUserResponseBody {
	s.RequestId = &v
	return s
}

type UpdateUserResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateUserResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateUserResponse) GoString() string {
	return s.String()
}

func (s *UpdateUserResponse) SetHeaders(v map[string]*string) *UpdateUserResponse {
	s.Headers = v
	return s
}

func (s *UpdateUserResponse) SetBody(v *UpdateUserResponseBody) *UpdateUserResponse {
	s.Body = v
	return s
}

type UpdateUserGroupRequest struct {
	CorpId        *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	IsvSubId      *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	UserGroupId   *int64  `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
	UserGroupName *string `json:"UserGroupName,omitempty" xml:"UserGroupName,omitempty"`
}

func (s UpdateUserGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateUserGroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateUserGroupRequest) SetCorpId(v string) *UpdateUserGroupRequest {
	s.CorpId = &v
	return s
}

func (s *UpdateUserGroupRequest) SetIsvSubId(v string) *UpdateUserGroupRequest {
	s.IsvSubId = &v
	return s
}

func (s *UpdateUserGroupRequest) SetUserGroupId(v int64) *UpdateUserGroupRequest {
	s.UserGroupId = &v
	return s
}

func (s *UpdateUserGroupRequest) SetUserGroupName(v string) *UpdateUserGroupRequest {
	s.UserGroupName = &v
	return s
}

type UpdateUserGroupResponseBody struct {
	Code      *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *UpdateUserGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                          `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateUserGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateUserGroupResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateUserGroupResponseBody) SetCode(v string) *UpdateUserGroupResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateUserGroupResponseBody) SetData(v *UpdateUserGroupResponseBodyData) *UpdateUserGroupResponseBody {
	s.Data = v
	return s
}

func (s *UpdateUserGroupResponseBody) SetMessage(v string) *UpdateUserGroupResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateUserGroupResponseBody) SetRequestId(v string) *UpdateUserGroupResponseBody {
	s.RequestId = &v
	return s
}

type UpdateUserGroupResponseBodyData struct {
	IsvSubId          *string `json:"IsvSubId,omitempty" xml:"IsvSubId,omitempty"`
	ParentUserGroupId *string `json:"ParentUserGroupId,omitempty" xml:"ParentUserGroupId,omitempty"`
	UserCount         *int64  `json:"UserCount,omitempty" xml:"UserCount,omitempty"`
	UserGroupId       *int64  `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
	UserGroupName     *string `json:"UserGroupName,omitempty" xml:"UserGroupName,omitempty"`
}

func (s UpdateUserGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateUserGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateUserGroupResponseBodyData) SetIsvSubId(v string) *UpdateUserGroupResponseBodyData {
	s.IsvSubId = &v
	return s
}

func (s *UpdateUserGroupResponseBodyData) SetParentUserGroupId(v string) *UpdateUserGroupResponseBodyData {
	s.ParentUserGroupId = &v
	return s
}

func (s *UpdateUserGroupResponseBodyData) SetUserCount(v int64) *UpdateUserGroupResponseBodyData {
	s.UserCount = &v
	return s
}

func (s *UpdateUserGroupResponseBodyData) SetUserGroupId(v int64) *UpdateUserGroupResponseBodyData {
	s.UserGroupId = &v
	return s
}

func (s *UpdateUserGroupResponseBodyData) SetUserGroupName(v string) *UpdateUserGroupResponseBodyData {
	s.UserGroupName = &v
	return s
}

type UpdateUserGroupResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateUserGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateUserGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateUserGroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateUserGroupResponse) SetHeaders(v map[string]*string) *UpdateUserGroupResponse {
	s.Headers = v
	return s
}

func (s *UpdateUserGroupResponse) SetBody(v *UpdateUserGroupResponseBody) *UpdateUserGroupResponse {
	s.Body = v
	return s
}

type UpdateWatchPolicyRequest struct {
	ItemMatchType       *string  `json:"ItemMatchType,omitempty" xml:"ItemMatchType,omitempty"`
	SimilarityThreshold *float64 `json:"SimilarityThreshold,omitempty" xml:"SimilarityThreshold,omitempty"`
	TargetType          *string  `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
	WatchMode           *string  `json:"WatchMode,omitempty" xml:"WatchMode,omitempty"`
	WatchPolicyId       *string  `json:"WatchPolicyId,omitempty" xml:"WatchPolicyId,omitempty"`
	WatchPolicyName     *string  `json:"WatchPolicyName,omitempty" xml:"WatchPolicyName,omitempty"`
}

func (s UpdateWatchPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateWatchPolicyRequest) GoString() string {
	return s.String()
}

func (s *UpdateWatchPolicyRequest) SetItemMatchType(v string) *UpdateWatchPolicyRequest {
	s.ItemMatchType = &v
	return s
}

func (s *UpdateWatchPolicyRequest) SetSimilarityThreshold(v float64) *UpdateWatchPolicyRequest {
	s.SimilarityThreshold = &v
	return s
}

func (s *UpdateWatchPolicyRequest) SetTargetType(v string) *UpdateWatchPolicyRequest {
	s.TargetType = &v
	return s
}

func (s *UpdateWatchPolicyRequest) SetWatchMode(v string) *UpdateWatchPolicyRequest {
	s.WatchMode = &v
	return s
}

func (s *UpdateWatchPolicyRequest) SetWatchPolicyId(v string) *UpdateWatchPolicyRequest {
	s.WatchPolicyId = &v
	return s
}

func (s *UpdateWatchPolicyRequest) SetWatchPolicyName(v string) *UpdateWatchPolicyRequest {
	s.WatchPolicyName = &v
	return s
}

type UpdateWatchPolicyResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateWatchPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateWatchPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateWatchPolicyResponseBody) SetCode(v string) *UpdateWatchPolicyResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateWatchPolicyResponseBody) SetMessage(v string) *UpdateWatchPolicyResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateWatchPolicyResponseBody) SetRequestId(v string) *UpdateWatchPolicyResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateWatchPolicyResponseBody) SetSuccess(v bool) *UpdateWatchPolicyResponseBody {
	s.Success = &v
	return s
}

type UpdateWatchPolicyResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateWatchPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateWatchPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateWatchPolicyResponse) GoString() string {
	return s.String()
}

func (s *UpdateWatchPolicyResponse) SetHeaders(v map[string]*string) *UpdateWatchPolicyResponse {
	s.Headers = v
	return s
}

func (s *UpdateWatchPolicyResponse) SetBody(v *UpdateWatchPolicyResponseBody) *UpdateWatchPolicyResponse {
	s.Body = v
	return s
}

type UpdateWatchTaskRequest struct {
	Description        *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DeviceList         *string `json:"DeviceList,omitempty" xml:"DeviceList,omitempty"`
	MessageReceiver    *string `json:"MessageReceiver,omitempty" xml:"MessageReceiver,omitempty"`
	ScheduleCycleDates *string `json:"ScheduleCycleDates,omitempty" xml:"ScheduleCycleDates,omitempty"`
	ScheduleTimes      *string `json:"ScheduleTimes,omitempty" xml:"ScheduleTimes,omitempty"`
	ScheduleType       *string `json:"ScheduleType,omitempty" xml:"ScheduleType,omitempty"`
	TaskName           *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	WatchPolicyIds     *string `json:"WatchPolicyIds,omitempty" xml:"WatchPolicyIds,omitempty"`
	WatchTaskId        *string `json:"WatchTaskId,omitempty" xml:"WatchTaskId,omitempty"`
}

func (s UpdateWatchTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateWatchTaskRequest) GoString() string {
	return s.String()
}

func (s *UpdateWatchTaskRequest) SetDescription(v string) *UpdateWatchTaskRequest {
	s.Description = &v
	return s
}

func (s *UpdateWatchTaskRequest) SetDeviceList(v string) *UpdateWatchTaskRequest {
	s.DeviceList = &v
	return s
}

func (s *UpdateWatchTaskRequest) SetMessageReceiver(v string) *UpdateWatchTaskRequest {
	s.MessageReceiver = &v
	return s
}

func (s *UpdateWatchTaskRequest) SetScheduleCycleDates(v string) *UpdateWatchTaskRequest {
	s.ScheduleCycleDates = &v
	return s
}

func (s *UpdateWatchTaskRequest) SetScheduleTimes(v string) *UpdateWatchTaskRequest {
	s.ScheduleTimes = &v
	return s
}

func (s *UpdateWatchTaskRequest) SetScheduleType(v string) *UpdateWatchTaskRequest {
	s.ScheduleType = &v
	return s
}

func (s *UpdateWatchTaskRequest) SetTaskName(v string) *UpdateWatchTaskRequest {
	s.TaskName = &v
	return s
}

func (s *UpdateWatchTaskRequest) SetWatchPolicyIds(v string) *UpdateWatchTaskRequest {
	s.WatchPolicyIds = &v
	return s
}

func (s *UpdateWatchTaskRequest) SetWatchTaskId(v string) *UpdateWatchTaskRequest {
	s.WatchTaskId = &v
	return s
}

type UpdateWatchTaskResponseBody struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateWatchTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateWatchTaskResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateWatchTaskResponseBody) SetCode(v string) *UpdateWatchTaskResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateWatchTaskResponseBody) SetMessage(v string) *UpdateWatchTaskResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateWatchTaskResponseBody) SetRequestId(v string) *UpdateWatchTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateWatchTaskResponseBody) SetSuccess(v bool) *UpdateWatchTaskResponseBody {
	s.Success = &v
	return s
}

type UpdateWatchTaskResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateWatchTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateWatchTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateWatchTaskResponse) GoString() string {
	return s.String()
}

func (s *UpdateWatchTaskResponse) SetHeaders(v map[string]*string) *UpdateWatchTaskResponse {
	s.Headers = v
	return s
}

func (s *UpdateWatchTaskResponse) SetBody(v *UpdateWatchTaskResponseBody) *UpdateWatchTaskResponse {
	s.Body = v
	return s
}

type UploadFileRequest struct {
	CorpId        *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	DataSourceId  *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	FileAliasName *string `json:"FileAliasName,omitempty" xml:"FileAliasName,omitempty"`
	FileContent   *string `json:"FileContent,omitempty" xml:"FileContent,omitempty"`
	FileName      *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	FilePath      *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	FileType      *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	MD5           *string `json:"MD5,omitempty" xml:"MD5,omitempty"`
}

func (s UploadFileRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadFileRequest) GoString() string {
	return s.String()
}

func (s *UploadFileRequest) SetCorpId(v string) *UploadFileRequest {
	s.CorpId = &v
	return s
}

func (s *UploadFileRequest) SetDataSourceId(v string) *UploadFileRequest {
	s.DataSourceId = &v
	return s
}

func (s *UploadFileRequest) SetFileAliasName(v string) *UploadFileRequest {
	s.FileAliasName = &v
	return s
}

func (s *UploadFileRequest) SetFileContent(v string) *UploadFileRequest {
	s.FileContent = &v
	return s
}

func (s *UploadFileRequest) SetFileName(v string) *UploadFileRequest {
	s.FileName = &v
	return s
}

func (s *UploadFileRequest) SetFilePath(v string) *UploadFileRequest {
	s.FilePath = &v
	return s
}

func (s *UploadFileRequest) SetFileType(v string) *UploadFileRequest {
	s.FileType = &v
	return s
}

func (s *UploadFileRequest) SetMD5(v string) *UploadFileRequest {
	s.MD5 = &v
	return s
}

type UploadFileResponseBody struct {
	Code      *string                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *UploadFileResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                     `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UploadFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadFileResponseBody) GoString() string {
	return s.String()
}

func (s *UploadFileResponseBody) SetCode(v string) *UploadFileResponseBody {
	s.Code = &v
	return s
}

func (s *UploadFileResponseBody) SetData(v *UploadFileResponseBodyData) *UploadFileResponseBody {
	s.Data = v
	return s
}

func (s *UploadFileResponseBody) SetMessage(v string) *UploadFileResponseBody {
	s.Message = &v
	return s
}

func (s *UploadFileResponseBody) SetRequestId(v string) *UploadFileResponseBody {
	s.RequestId = &v
	return s
}

type UploadFileResponseBodyData struct {
	Records []*UploadFileResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
}

func (s UploadFileResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UploadFileResponseBodyData) GoString() string {
	return s.String()
}

func (s *UploadFileResponseBodyData) SetRecords(v []*UploadFileResponseBodyDataRecords) *UploadFileResponseBodyData {
	s.Records = v
	return s
}

type UploadFileResponseBodyDataRecords struct {
	OssPath  *string `json:"OssPath,omitempty" xml:"OssPath,omitempty"`
	SourceId *string `json:"SourceId,omitempty" xml:"SourceId,omitempty"`
}

func (s UploadFileResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s UploadFileResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *UploadFileResponseBodyDataRecords) SetOssPath(v string) *UploadFileResponseBodyDataRecords {
	s.OssPath = &v
	return s
}

func (s *UploadFileResponseBodyDataRecords) SetSourceId(v string) *UploadFileResponseBodyDataRecords {
	s.SourceId = &v
	return s
}

type UploadFileResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UploadFileResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UploadFileResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadFileResponse) GoString() string {
	return s.String()
}

func (s *UploadFileResponse) SetHeaders(v map[string]*string) *UploadFileResponse {
	s.Headers = v
	return s
}

func (s *UploadFileResponse) SetBody(v *UploadFileResponseBody) *UploadFileResponse {
	s.Body = v
	return s
}

type UploadImageRequest struct {
	ImageUrl *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
}

func (s UploadImageRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadImageRequest) GoString() string {
	return s.String()
}

func (s *UploadImageRequest) SetImageUrl(v string) *UploadImageRequest {
	s.ImageUrl = &v
	return s
}

type UploadImageResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UploadImageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadImageResponseBody) GoString() string {
	return s.String()
}

func (s *UploadImageResponseBody) SetCode(v string) *UploadImageResponseBody {
	s.Code = &v
	return s
}

func (s *UploadImageResponseBody) SetData(v string) *UploadImageResponseBody {
	s.Data = &v
	return s
}

func (s *UploadImageResponseBody) SetMessage(v string) *UploadImageResponseBody {
	s.Message = &v
	return s
}

func (s *UploadImageResponseBody) SetRequestId(v string) *UploadImageResponseBody {
	s.RequestId = &v
	return s
}

type UploadImageResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UploadImageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UploadImageResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadImageResponse) GoString() string {
	return s.String()
}

func (s *UploadImageResponse) SetHeaders(v map[string]*string) *UploadImageResponse {
	s.Headers = v
	return s
}

func (s *UploadImageResponse) SetBody(v *UploadImageResponseBody) *UploadImageResponse {
	s.Body = v
	return s
}

type VerifyDeviceRequest struct {
	// 设备安装地址
	DeviceAddress *string `json:"DeviceAddress,omitempty" xml:"DeviceAddress,omitempty"`
	// OSS路径
	FilePath   *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	NvrExisted *int64  `json:"NvrExisted,omitempty" xml:"NvrExisted,omitempty"`
}

func (s VerifyDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s VerifyDeviceRequest) GoString() string {
	return s.String()
}

func (s *VerifyDeviceRequest) SetDeviceAddress(v string) *VerifyDeviceRequest {
	s.DeviceAddress = &v
	return s
}

func (s *VerifyDeviceRequest) SetFilePath(v string) *VerifyDeviceRequest {
	s.FilePath = &v
	return s
}

func (s *VerifyDeviceRequest) SetNvrExisted(v int64) *VerifyDeviceRequest {
	s.NvrExisted = &v
	return s
}

type VerifyDeviceResponseBody struct {
	// 响应码
	Code *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*VerifyDeviceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// 响应码描述
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s VerifyDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s VerifyDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *VerifyDeviceResponseBody) SetCode(v string) *VerifyDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *VerifyDeviceResponseBody) SetData(v []*VerifyDeviceResponseBodyData) *VerifyDeviceResponseBody {
	s.Data = v
	return s
}

func (s *VerifyDeviceResponseBody) SetMessage(v string) *VerifyDeviceResponseBody {
	s.Message = &v
	return s
}

func (s *VerifyDeviceResponseBody) SetRequestId(v string) *VerifyDeviceResponseBody {
	s.RequestId = &v
	return s
}

type VerifyDeviceResponseBodyData struct {
	// 格式错误或国标冲突的错误码，0为成功，-1为失败
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// Excel中的序号列的值
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// 格式错误或国标冲突提示
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// 原始国标编码
	OriginalGbId *string `json:"OriginalGbId,omitempty" xml:"OriginalGbId,omitempty"`
	// 记录所在行号
	RowNumber *int64 `json:"RowNumber,omitempty" xml:"RowNumber,omitempty"`
	// 建议的国标编码
	SuggestGbId *string `json:"SuggestGbId,omitempty" xml:"SuggestGbId,omitempty"`
}

func (s VerifyDeviceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s VerifyDeviceResponseBodyData) GoString() string {
	return s.String()
}

func (s *VerifyDeviceResponseBodyData) SetCode(v string) *VerifyDeviceResponseBodyData {
	s.Code = &v
	return s
}

func (s *VerifyDeviceResponseBodyData) SetId(v string) *VerifyDeviceResponseBodyData {
	s.Id = &v
	return s
}

func (s *VerifyDeviceResponseBodyData) SetMessage(v string) *VerifyDeviceResponseBodyData {
	s.Message = &v
	return s
}

func (s *VerifyDeviceResponseBodyData) SetOriginalGbId(v string) *VerifyDeviceResponseBodyData {
	s.OriginalGbId = &v
	return s
}

func (s *VerifyDeviceResponseBodyData) SetRowNumber(v int64) *VerifyDeviceResponseBodyData {
	s.RowNumber = &v
	return s
}

func (s *VerifyDeviceResponseBodyData) SetSuggestGbId(v string) *VerifyDeviceResponseBodyData {
	s.SuggestGbId = &v
	return s
}

type VerifyDeviceResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *VerifyDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s VerifyDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s VerifyDeviceResponse) GoString() string {
	return s.String()
}

func (s *VerifyDeviceResponse) SetHeaders(v map[string]*string) *VerifyDeviceResponse {
	s.Headers = v
	return s
}

func (s *VerifyDeviceResponse) SetBody(v *VerifyDeviceResponseBody) *VerifyDeviceResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("vcs"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddAiotDevicesWithOptions(tmpReq *AddAiotDevicesRequest, runtime *util.RuntimeOptions) (_result *AddAiotDevicesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &AddAiotDevicesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.AiotDeviceList)) {
		request.AiotDeviceListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AiotDeviceList, tea.String("AiotDeviceList"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AiotDeviceListShrink)) {
		body["AiotDeviceList"] = request.AiotDeviceListShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddAiotDevices"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddAiotDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddAiotDevices(request *AddAiotDevicesRequest) (_result *AddAiotDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddAiotDevicesResponse{}
	_body, _err := client.AddAiotDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddAiotPersonTableWithOptions(request *AddAiotPersonTableRequest, runtime *util.RuntimeOptions) (_result *AddAiotPersonTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	bodyFlat := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.PersonTable))) {
		bodyFlat["PersonTable"] = request.PersonTable
	}

	body = tea.ToMap(body,
		openapiutil.Query(bodyFlat))
	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddAiotPersonTable"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddAiotPersonTableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddAiotPersonTable(request *AddAiotPersonTableRequest) (_result *AddAiotPersonTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddAiotPersonTableResponse{}
	_body, _err := client.AddAiotPersonTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddAiotPersonTableItemsWithOptions(request *AddAiotPersonTableItemsRequest, runtime *util.RuntimeOptions) (_result *AddAiotPersonTableItemsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.PersonTableId)) {
		body["PersonTableId"] = request.PersonTableId
	}

	bodyFlat := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PersonTableItemList)) {
		bodyFlat["PersonTableItemList"] = request.PersonTableItemList
	}

	body = tea.ToMap(body,
		openapiutil.Query(bodyFlat))
	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddAiotPersonTableItems"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddAiotPersonTableItemsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddAiotPersonTableItems(request *AddAiotPersonTableItemsRequest) (_result *AddAiotPersonTableItemsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddAiotPersonTableItemsResponse{}
	_body, _err := client.AddAiotPersonTableItemsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddAiotPersonTableItemsForTablesWithOptions(request *AddAiotPersonTableItemsForTablesRequest, runtime *util.RuntimeOptions) (_result *AddAiotPersonTableItemsForTablesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	bodyFlat := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PersonTableItemList)) {
		bodyFlat["PersonTableItemList"] = request.PersonTableItemList
	}

	if !tea.BoolValue(util.IsUnset(request.PersonTableList)) {
		bodyFlat["PersonTableList"] = request.PersonTableList
	}

	body = tea.ToMap(body,
		openapiutil.Query(bodyFlat))
	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddAiotPersonTableItemsForTables"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddAiotPersonTableItemsForTablesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddAiotPersonTableItemsForTables(request *AddAiotPersonTableItemsForTablesRequest) (_result *AddAiotPersonTableItemsForTablesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddAiotPersonTableItemsForTablesResponse{}
	_body, _err := client.AddAiotPersonTableItemsForTablesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddAiotVehicleTableItemsWithOptions(tmpReq *AddAiotVehicleTableItemsRequest, runtime *util.RuntimeOptions) (_result *AddAiotVehicleTableItemsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &AddAiotVehicleTableItemsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.VehicleTableItem))) {
		request.VehicleTableItemShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.VehicleTableItem), tea.String("VehicleTableItem"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.VehicleTableId)) {
		body["VehicleTableId"] = request.VehicleTableId
	}

	if !tea.BoolValue(util.IsUnset(request.VehicleTableItemShrink)) {
		body["VehicleTableItem"] = request.VehicleTableItemShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddAiotVehicleTableItems"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddAiotVehicleTableItemsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddAiotVehicleTableItems(request *AddAiotVehicleTableItemsRequest) (_result *AddAiotVehicleTableItemsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddAiotVehicleTableItemsResponse{}
	_body, _err := client.AddAiotVehicleTableItemsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddCameraForInstanceWithOptions(tmpReq *AddCameraForInstanceRequest, runtime *util.RuntimeOptions) (_result *AddCameraForInstanceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &AddCameraForInstanceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.CameraIds)) {
		request.CameraIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CameraIds, tea.String("CameraIds"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CameraIdsShrink)) {
		body["CameraIds"] = request.CameraIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddCameraForInstance"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddCameraForInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddCameraForInstance(request *AddCameraForInstanceRequest) (_result *AddCameraForInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCameraForInstanceResponse{}
	_body, _err := client.AddCameraForInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddChannelWithOptions(request *AddChannelRequest, runtime *util.RuntimeOptions) (_result *AddChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ParentDeviceGbId)) {
		body["ParentDeviceGbId"] = request.ParentDeviceGbId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddChannel"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddChannel(request *AddChannelRequest) (_result *AddChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddChannelResponse{}
	_body, _err := client.AddChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddDataSourceWithOptions(request *AddDataSourceRequest, runtime *util.RuntimeOptions) (_result *AddDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceName)) {
		body["DataSourceName"] = request.DataSourceName
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		body["DataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Url)) {
		body["Url"] = request.Url
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddDataSource"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddDataSourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddDataSource(request *AddDataSourceRequest) (_result *AddDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddDataSourceResponse{}
	_body, _err := client.AddDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddDeviceWithOptions(request *AddDeviceRequest, runtime *util.RuntimeOptions) (_result *AddDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BitRate)) {
		body["BitRate"] = request.BitRate
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceAddress)) {
		body["DeviceAddress"] = request.DeviceAddress
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceDirection)) {
		body["DeviceDirection"] = request.DeviceDirection
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceName)) {
		body["DeviceName"] = request.DeviceName
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceResolution)) {
		body["DeviceResolution"] = request.DeviceResolution
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceSite)) {
		body["DeviceSite"] = request.DeviceSite
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceType)) {
		body["DeviceType"] = request.DeviceType
	}

	if !tea.BoolValue(util.IsUnset(request.GbId)) {
		body["GbId"] = request.GbId
	}

	if !tea.BoolValue(util.IsUnset(request.Vendor)) {
		body["Vendor"] = request.Vendor
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddDevice"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddDevice(request *AddDeviceRequest) (_result *AddDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddDeviceResponse{}
	_body, _err := client.AddDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddDoubleVerificationGroupsWithOptions(request *AddDoubleVerificationGroupsRequest, runtime *util.RuntimeOptions) (_result *AddDoubleVerificationGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	bodyFlat := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DoubleVerificationGroupList)) {
		bodyFlat["DoubleVerificationGroupList"] = request.DoubleVerificationGroupList
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	body = tea.ToMap(body,
		openapiutil.Query(bodyFlat))
	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddDoubleVerificationGroups"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddDoubleVerificationGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddDoubleVerificationGroups(request *AddDoubleVerificationGroupsRequest) (_result *AddDoubleVerificationGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddDoubleVerificationGroupsResponse{}
	_body, _err := client.AddDoubleVerificationGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddMonitorWithOptions(request *AddMonitorRequest, runtime *util.RuntimeOptions) (_result *AddMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlgorithmVendor)) {
		body["AlgorithmVendor"] = request.AlgorithmVendor
	}

	if !tea.BoolValue(util.IsUnset(request.BatchIndicator)) {
		body["BatchIndicator"] = request.BatchIndicator
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.MonitorType)) {
		body["MonitorType"] = request.MonitorType
	}

	if !tea.BoolValue(util.IsUnset(request.NotifierAppSecret)) {
		body["NotifierAppSecret"] = request.NotifierAppSecret
	}

	if !tea.BoolValue(util.IsUnset(request.NotifierExtendValues)) {
		body["NotifierExtendValues"] = request.NotifierExtendValues
	}

	if !tea.BoolValue(util.IsUnset(request.NotifierTimeOut)) {
		body["NotifierTimeOut"] = request.NotifierTimeOut
	}

	if !tea.BoolValue(util.IsUnset(request.NotifierType)) {
		body["NotifierType"] = request.NotifierType
	}

	if !tea.BoolValue(util.IsUnset(request.NotifierUrl)) {
		body["NotifierUrl"] = request.NotifierUrl
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddMonitor"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddMonitor(request *AddMonitorRequest) (_result *AddMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddMonitorResponse{}
	_body, _err := client.AddMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddProfileWithOptions(request *AddProfileRequest, runtime *util.RuntimeOptions) (_result *AddProfileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		body["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.CatalogId)) {
		body["CatalogId"] = request.CatalogId
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.FaceUrl)) {
		body["FaceUrl"] = request.FaceUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Gender)) {
		body["Gender"] = request.Gender
	}

	if !tea.BoolValue(util.IsUnset(request.IdNumber)) {
		body["IdNumber"] = request.IdNumber
	}

	if !tea.BoolValue(util.IsUnset(request.IsvSubId)) {
		body["IsvSubId"] = request.IsvSubId
	}

	if !tea.BoolValue(util.IsUnset(request.LiveAddress)) {
		body["LiveAddress"] = request.LiveAddress
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNo)) {
		body["PhoneNo"] = request.PhoneNo
	}

	if !tea.BoolValue(util.IsUnset(request.PlateNo)) {
		body["PlateNo"] = request.PlateNo
	}

	if !tea.BoolValue(util.IsUnset(request.SceneType)) {
		body["SceneType"] = request.SceneType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddProfile"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddProfileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddProfile(request *AddProfileRequest) (_result *AddProfileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddProfileResponse{}
	_body, _err := client.AddProfileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddProfileCatalogWithOptions(request *AddProfileCatalogRequest, runtime *util.RuntimeOptions) (_result *AddProfileCatalogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CatalogName)) {
		body["CatalogName"] = request.CatalogName
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.IsvSubId)) {
		body["IsvSubId"] = request.IsvSubId
	}

	if !tea.BoolValue(util.IsUnset(request.ParentCatalogId)) {
		body["ParentCatalogId"] = request.ParentCatalogId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddProfileCatalog"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddProfileCatalogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddProfileCatalog(request *AddProfileCatalogRequest) (_result *AddProfileCatalogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddProfileCatalogResponse{}
	_body, _err := client.AddProfileCatalogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddWatchItemsWithOptions(request *AddWatchItemsRequest, runtime *util.RuntimeOptions) (_result *AddWatchItemsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	bodyFlat := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.WatchItemList)) {
		bodyFlat["WatchItemList"] = request.WatchItemList
	}

	if !tea.BoolValue(util.IsUnset(request.WatchPolicyId)) {
		body["WatchPolicyId"] = request.WatchPolicyId
	}

	body = tea.ToMap(body,
		openapiutil.Query(bodyFlat))
	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddWatchItems"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddWatchItemsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddWatchItems(request *AddWatchItemsRequest) (_result *AddWatchItemsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddWatchItemsResponse{}
	_body, _err := client.AddWatchItemsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchDeleteInstanceWithOptions(tmpReq *BatchDeleteInstanceRequest, runtime *util.RuntimeOptions) (_result *BatchDeleteInstanceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &BatchDeleteInstanceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InstanceIds)) {
		request.InstanceIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceIds, tea.String("InstanceIds"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceIdsShrink)) {
		body["InstanceIds"] = request.InstanceIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchDeleteInstance"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchDeleteInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchDeleteInstance(request *BatchDeleteInstanceRequest) (_result *BatchDeleteInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchDeleteInstanceResponse{}
	_body, _err := client.BatchDeleteInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindCorpGroupWithOptions(request *BindCorpGroupRequest, runtime *util.RuntimeOptions) (_result *BindCorpGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpGroupId)) {
		body["CorpGroupId"] = request.CorpGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("BindCorpGroup"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BindCorpGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindCorpGroup(request *BindCorpGroupRequest) (_result *BindCorpGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindCorpGroupResponse{}
	_body, _err := client.BindCorpGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindDevicesWithOptions(tmpReq *BindDevicesRequest, runtime *util.RuntimeOptions) (_result *BindDevicesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &BindDevicesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.SubDeviceList)) {
		request.SubDeviceListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SubDeviceList, tea.String("SubDeviceList"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		body["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.SubDeviceListShrink)) {
		body["SubDeviceList"] = request.SubDeviceListShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("BindDevices"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BindDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindDevices(request *BindDevicesRequest) (_result *BindDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindDevicesResponse{}
	_body, _err := client.BindDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindPersonWithOptions(request *BindPersonRequest, runtime *util.RuntimeOptions) (_result *BindPersonResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.IsvSubId)) {
		body["IsvSubId"] = request.IsvSubId
	}

	if !tea.BoolValue(util.IsUnset(request.PersonId)) {
		body["PersonId"] = request.PersonId
	}

	if !tea.BoolValue(util.IsUnset(request.PersonMatchingRate)) {
		body["PersonMatchingRate"] = request.PersonMatchingRate
	}

	if !tea.BoolValue(util.IsUnset(request.ProfileId)) {
		body["ProfileId"] = request.ProfileId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("BindPerson"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BindPersonResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindPerson(request *BindPersonRequest) (_result *BindPersonResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindPersonResponse{}
	_body, _err := client.BindPersonWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindUserWithOptions(request *BindUserRequest, runtime *util.RuntimeOptions) (_result *BindUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.IsvSubId)) {
		body["IsvSubId"] = request.IsvSubId
	}

	if !tea.BoolValue(util.IsUnset(request.MatchingRate)) {
		body["MatchingRate"] = request.MatchingRate
	}

	if !tea.BoolValue(util.IsUnset(request.PersonId)) {
		body["PersonId"] = request.PersonId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("BindUser"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BindUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindUser(request *BindUserRequest) (_result *BindUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindUserResponse{}
	_body, _err := client.BindUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ControlAiotDeviceWithOptions(request *ControlAiotDeviceRequest, runtime *util.RuntimeOptions) (_result *ControlAiotDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AssociatedDeviceId)) {
		body["AssociatedDeviceId"] = request.AssociatedDeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.AssociatedIPAddr)) {
		body["AssociatedIPAddr"] = request.AssociatedIPAddr
	}

	if !tea.BoolValue(util.IsUnset(request.AssociatedPort)) {
		body["AssociatedPort"] = request.AssociatedPort
	}

	if !tea.BoolValue(util.IsUnset(request.AssociatedVerificationEnable)) {
		body["AssociatedVerificationEnable"] = request.AssociatedVerificationEnable
	}

	if !tea.BoolValue(util.IsUnset(request.BarrierCommand)) {
		body["BarrierCommand"] = request.BarrierCommand
	}

	if !tea.BoolValue(util.IsUnset(request.CheckEnabled)) {
		body["CheckEnabled"] = request.CheckEnabled
	}

	if !tea.BoolValue(util.IsUnset(request.CommandType)) {
		body["CommandType"] = request.CommandType
	}

	if !tea.BoolValue(util.IsUnset(request.DoubleVerificationGroupEnabled)) {
		body["DoubleVerificationGroupEnabled"] = request.DoubleVerificationGroupEnabled
	}

	if !tea.BoolValue(util.IsUnset(request.GateCtlStatus)) {
		body["GateCtlStatus"] = request.GateCtlStatus
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.IdentityNumber)) {
		body["IdentityNumber"] = request.IdentityNumber
	}

	bodyFlat := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.MiFareCard))) {
		bodyFlat["MiFareCard"] = request.MiFareCard
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RebootDevice)) {
		body["RebootDevice"] = request.RebootDevice
	}

	if !tea.BoolValue(util.IsUnset(request.SingleInterval)) {
		body["SingleInterval"] = request.SingleInterval
	}

	if !tea.BoolValue(util.IsUnset(request.SuperPassword)) {
		body["SuperPassword"] = request.SuperPassword
	}

	if !tea.BoolValue(util.IsUnset(request.UpgradeFileURL)) {
		body["UpgradeFileURL"] = request.UpgradeFileURL
	}

	body = tea.ToMap(body,
		openapiutil.Query(bodyFlat))
	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ControlAiotDevice"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ControlAiotDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ControlAiotDevice(request *ControlAiotDeviceRequest) (_result *ControlAiotDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ControlAiotDeviceResponse{}
	_body, _err := client.ControlAiotDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateAIInstanceWithOptions(tmpReq *CreateAIInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateAIInstanceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateAIInstanceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ScheduleCycleDates)) {
		request.ScheduleCycleDatesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScheduleCycleDates, tea.String("ScheduleCycleDates"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ScheduleTimes)) {
		request.ScheduleTimesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScheduleTimes, tea.String("ScheduleTimes"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlgorithmId)) {
		body["AlgorithmId"] = request.AlgorithmId
	}

	if !tea.BoolValue(util.IsUnset(request.AlgorithmName)) {
		body["AlgorithmName"] = request.AlgorithmName
	}

	if !tea.BoolValue(util.IsUnset(request.ComputeType)) {
		body["ComputeType"] = request.ComputeType
	}

	if !tea.BoolValue(util.IsUnset(request.DataSource)) {
		body["DataSource"] = request.DataSource
	}

	if !tea.BoolValue(util.IsUnset(request.DataType)) {
		body["DataType"] = request.DataType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		body["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleCycleDatesShrink)) {
		body["ScheduleCycleDates"] = request.ScheduleCycleDatesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleTimesShrink)) {
		body["ScheduleTimes"] = request.ScheduleTimesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleType)) {
		body["ScheduleType"] = request.ScheduleType
	}

	if !tea.BoolValue(util.IsUnset(request.Spf)) {
		body["Spf"] = request.Spf
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAIInstance"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAIInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateAIInstance(request *CreateAIInstanceRequest) (_result *CreateAIInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAIInstanceResponse{}
	_body, _err := client.CreateAIInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateComputeInstanceWithOptions(tmpReq *CreateComputeInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateComputeInstanceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateComputeInstanceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Algorithms)) {
		request.AlgorithmsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Algorithms, tea.String("Algorithms"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Devices)) {
		request.DevicesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Devices, tea.String("Devices"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AcuUsed)) {
		body["AcuUsed"] = request.AcuUsed
	}

	if !tea.BoolValue(util.IsUnset(request.AlgorithmType)) {
		body["AlgorithmType"] = request.AlgorithmType
	}

	if !tea.BoolValue(util.IsUnset(request.AlgorithmsShrink)) {
		body["Algorithms"] = request.AlgorithmsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ComputePictureType)) {
		body["ComputePictureType"] = request.ComputePictureType
	}

	if !tea.BoolValue(util.IsUnset(request.ComputePictureValue)) {
		body["ComputePictureValue"] = request.ComputePictureValue
	}

	if !tea.BoolValue(util.IsUnset(request.DatasourceType)) {
		body["DatasourceType"] = request.DatasourceType
	}

	if !tea.BoolValue(util.IsUnset(request.DevicesShrink)) {
		body["Devices"] = request.DevicesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		body["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.IsFrameExtraction)) {
		body["IsFrameExtraction"] = request.IsFrameExtraction
	}

	if !tea.BoolValue(util.IsUnset(request.IsPolling)) {
		body["IsPolling"] = request.IsPolling
	}

	if !tea.BoolValue(util.IsUnset(request.OverallExecutionTime)) {
		body["OverallExecutionTime"] = request.OverallExecutionTime
	}

	if !tea.BoolValue(util.IsUnset(request.PicTopic)) {
		body["PicTopic"] = request.PicTopic
	}

	if !tea.BoolValue(util.IsUnset(request.PicType)) {
		body["PicType"] = request.PicType
	}

	if !tea.BoolValue(util.IsUnset(request.PollingConfigs)) {
		body["PollingConfigs"] = request.PollingConfigs
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleCycleDate)) {
		body["ScheduleCycleDate"] = request.ScheduleCycleDate
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleDay)) {
		body["ScheduleDay"] = request.ScheduleDay
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleDaySize)) {
		body["ScheduleDaySize"] = request.ScheduleDaySize
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleTimes)) {
		body["ScheduleTimes"] = request.ScheduleTimes
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleType)) {
		body["ScheduleType"] = request.ScheduleType
	}

	if !tea.BoolValue(util.IsUnset(request.SliceExecutionTime)) {
		body["SliceExecutionTime"] = request.SliceExecutionTime
	}

	if !tea.BoolValue(util.IsUnset(request.StorageUsed)) {
		body["StorageUsed"] = request.StorageUsed
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateComputeInstance"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateComputeInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateComputeInstance(request *CreateComputeInstanceRequest) (_result *CreateComputeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateComputeInstanceResponse{}
	_body, _err := client.CreateComputeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateCorpWithOptions(request *CreateCorpRequest, runtime *util.RuntimeOptions) (_result *CreateCorpResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlgorithmType)) {
		body["AlgorithmType"] = request.AlgorithmType
	}

	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		body["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.CorpName)) {
		body["CorpName"] = request.CorpName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.IconPath)) {
		body["IconPath"] = request.IconPath
	}

	if !tea.BoolValue(util.IsUnset(request.IsvSubId)) {
		body["IsvSubId"] = request.IsvSubId
	}

	if !tea.BoolValue(util.IsUnset(request.ParentCorpId)) {
		body["ParentCorpId"] = request.ParentCorpId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCorp"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCorpResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateCorp(request *CreateCorpRequest) (_result *CreateCorpResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCorpResponse{}
	_body, _err := client.CreateCorpWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateCorpGroupWithOptions(request *CreateCorpGroupRequest, runtime *util.RuntimeOptions) (_result *CreateCorpGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		body["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCorpGroup"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCorpGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateCorpGroup(request *CreateCorpGroupRequest) (_result *CreateCorpGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCorpGroupResponse{}
	_body, _err := client.CreateCorpGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDeviceWithOptions(request *CreateDeviceRequest, runtime *util.RuntimeOptions) (_result *CreateDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ActivateCode)) {
		body["ActivateCode"] = request.ActivateCode
	}

	if !tea.BoolValue(util.IsUnset(request.AudioEnable)) {
		body["AudioEnable"] = request.AudioEnable
	}

	if !tea.BoolValue(util.IsUnset(request.CityCode)) {
		body["CityCode"] = request.CityCode
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		body["DataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceAddress)) {
		body["DeviceAddress"] = request.DeviceAddress
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceDirection)) {
		body["DeviceDirection"] = request.DeviceDirection
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		body["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceModel)) {
		body["DeviceModel"] = request.DeviceModel
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceName)) {
		body["DeviceName"] = request.DeviceName
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceRate)) {
		body["DeviceRate"] = request.DeviceRate
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceResolution)) {
		body["DeviceResolution"] = request.DeviceResolution
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceSite)) {
		body["DeviceSite"] = request.DeviceSite
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceSn)) {
		body["DeviceSn"] = request.DeviceSn
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceType)) {
		body["DeviceType"] = request.DeviceType
	}

	if !tea.BoolValue(util.IsUnset(request.EncodeFormat)) {
		body["EncodeFormat"] = request.EncodeFormat
	}

	if !tea.BoolValue(util.IsUnset(request.FrameRate)) {
		body["FrameRate"] = request.FrameRate
	}

	if !tea.BoolValue(util.IsUnset(request.GovLength)) {
		body["GovLength"] = request.GovLength
	}

	if !tea.BoolValue(util.IsUnset(request.InProtocol)) {
		body["InProtocol"] = request.InProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.Latitude)) {
		body["Latitude"] = request.Latitude
	}

	if !tea.BoolValue(util.IsUnset(request.Longitude)) {
		body["Longitude"] = request.Longitude
	}

	if !tea.BoolValue(util.IsUnset(request.OSDTimeEnable)) {
		body["OSDTimeEnable"] = request.OSDTimeEnable
	}

	if !tea.BoolValue(util.IsUnset(request.OSDTimeType)) {
		body["OSDTimeType"] = request.OSDTimeType
	}

	if !tea.BoolValue(util.IsUnset(request.OSDTimeX)) {
		body["OSDTimeX"] = request.OSDTimeX
	}

	if !tea.BoolValue(util.IsUnset(request.OSDTimeY)) {
		body["OSDTimeY"] = request.OSDTimeY
	}

	if !tea.BoolValue(util.IsUnset(request.ParentDeviceId)) {
		body["ParentDeviceId"] = request.ParentDeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.SubDeviceCount)) {
		body["SubDeviceCount"] = request.SubDeviceCount
	}

	if !tea.BoolValue(util.IsUnset(request.SubDeviceIdList)) {
		body["SubDeviceIdList"] = request.SubDeviceIdList
	}

	if !tea.BoolValue(util.IsUnset(request.Vendor)) {
		body["Vendor"] = request.Vendor
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDevice"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDevice(request *CreateDeviceRequest) (_result *CreateDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDeviceResponse{}
	_body, _err := client.CreateDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateModelServiceWithOptions(request *CreateModelServiceRequest, runtime *util.RuntimeOptions) (_result *CreateModelServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlgorithmCode)) {
		body["AlgorithmCode"] = request.AlgorithmCode
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		body["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		body["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.QPSRequired)) {
		body["QPSRequired"] = request.QPSRequired
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateModelService"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateModelServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateModelService(request *CreateModelServiceRequest) (_result *CreateModelServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateModelServiceResponse{}
	_body, _err := client.CreateModelServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateNewDeviceWithOptions(request *CreateNewDeviceRequest, runtime *util.RuntimeOptions) (_result *CreateNewDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CityCode)) {
		body["CityCode"] = request.CityCode
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		body["DataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceAddress)) {
		body["DeviceAddress"] = request.DeviceAddress
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		body["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceModel)) {
		body["DeviceModel"] = request.DeviceModel
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceName)) {
		body["DeviceName"] = request.DeviceName
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceType)) {
		body["DeviceType"] = request.DeviceType
	}

	if !tea.BoolValue(util.IsUnset(request.FilePath)) {
		body["FilePath"] = request.FilePath
	}

	if !tea.BoolValue(util.IsUnset(request.InProtocol)) {
		body["InProtocol"] = request.InProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.Latitude)) {
		body["Latitude"] = request.Latitude
	}

	if !tea.BoolValue(util.IsUnset(request.Longitude)) {
		body["Longitude"] = request.Longitude
	}

	if !tea.BoolValue(util.IsUnset(request.SubDeviceCount)) {
		body["SubDeviceCount"] = request.SubDeviceCount
	}

	if !tea.BoolValue(util.IsUnset(request.Vendor)) {
		body["Vendor"] = request.Vendor
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateNewDevice"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateNewDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateNewDevice(request *CreateNewDeviceRequest) (_result *CreateNewDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNewDeviceResponse{}
	_body, _err := client.CreateNewDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateScanDeviceWithOptions(request *CreateScanDeviceRequest, runtime *util.RuntimeOptions) (_result *CreateScanDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AudioEnable)) {
		body["AudioEnable"] = request.AudioEnable
	}

	if !tea.BoolValue(util.IsUnset(request.CityCode)) {
		body["CityCode"] = request.CityCode
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		body["DataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceAddress)) {
		body["DeviceAddress"] = request.DeviceAddress
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceDirection)) {
		body["DeviceDirection"] = request.DeviceDirection
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		body["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceModel)) {
		body["DeviceModel"] = request.DeviceModel
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceName)) {
		body["DeviceName"] = request.DeviceName
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceRate)) {
		body["DeviceRate"] = request.DeviceRate
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceResolution)) {
		body["DeviceResolution"] = request.DeviceResolution
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceSite)) {
		body["DeviceSite"] = request.DeviceSite
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceSn)) {
		body["DeviceSn"] = request.DeviceSn
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceType)) {
		body["DeviceType"] = request.DeviceType
	}

	if !tea.BoolValue(util.IsUnset(request.EncodeFormat)) {
		body["EncodeFormat"] = request.EncodeFormat
	}

	if !tea.BoolValue(util.IsUnset(request.FrameRate)) {
		body["FrameRate"] = request.FrameRate
	}

	if !tea.BoolValue(util.IsUnset(request.GovLength)) {
		body["GovLength"] = request.GovLength
	}

	if !tea.BoolValue(util.IsUnset(request.InProtocol)) {
		body["InProtocol"] = request.InProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.Latitude)) {
		body["Latitude"] = request.Latitude
	}

	if !tea.BoolValue(util.IsUnset(request.Longitude)) {
		body["Longitude"] = request.Longitude
	}

	if !tea.BoolValue(util.IsUnset(request.OSDTimeEnable)) {
		body["OSDTimeEnable"] = request.OSDTimeEnable
	}

	if !tea.BoolValue(util.IsUnset(request.OSDTimeType)) {
		body["OSDTimeType"] = request.OSDTimeType
	}

	if !tea.BoolValue(util.IsUnset(request.OSDTimeX)) {
		body["OSDTimeX"] = request.OSDTimeX
	}

	if !tea.BoolValue(util.IsUnset(request.OSDTimeY)) {
		body["OSDTimeY"] = request.OSDTimeY
	}

	if !tea.BoolValue(util.IsUnset(request.SubDeviceCount)) {
		body["SubDeviceCount"] = request.SubDeviceCount
	}

	if !tea.BoolValue(util.IsUnset(request.Vendor)) {
		body["Vendor"] = request.Vendor
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateScanDevice"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateScanDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateScanDevice(request *CreateScanDeviceRequest) (_result *CreateScanDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateScanDeviceResponse{}
	_body, _err := client.CreateScanDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateUserWithOptions(request *CreateUserRequest, runtime *util.RuntimeOptions) (_result *CreateUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Address)) {
		body["Address"] = request.Address
	}

	if !tea.BoolValue(util.IsUnset(request.Age)) {
		body["Age"] = request.Age
	}

	if !tea.BoolValue(util.IsUnset(request.Attachment)) {
		body["Attachment"] = request.Attachment
	}

	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		body["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.FaceImageUrl)) {
		body["FaceImageUrl"] = request.FaceImageUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Gender)) {
		body["Gender"] = request.Gender
	}

	if !tea.BoolValue(util.IsUnset(request.IdNumber)) {
		body["IdNumber"] = request.IdNumber
	}

	if !tea.BoolValue(util.IsUnset(request.IsvSubId)) {
		body["IsvSubId"] = request.IsvSubId
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNo)) {
		body["PhoneNo"] = request.PhoneNo
	}

	if !tea.BoolValue(util.IsUnset(request.PlateNo)) {
		body["PlateNo"] = request.PlateNo
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		body["UserGroupId"] = request.UserGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		body["UserName"] = request.UserName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateUser"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateUser(request *CreateUserRequest) (_result *CreateUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateUserResponse{}
	_body, _err := client.CreateUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateUserGroupWithOptions(request *CreateUserGroupRequest, runtime *util.RuntimeOptions) (_result *CreateUserGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.IsvSubId)) {
		body["IsvSubId"] = request.IsvSubId
	}

	if !tea.BoolValue(util.IsUnset(request.ParentUserGroupId)) {
		body["ParentUserGroupId"] = request.ParentUserGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupName)) {
		body["UserGroupName"] = request.UserGroupName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateUserGroup"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateUserGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateUserGroup(request *CreateUserGroupRequest) (_result *CreateUserGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateUserGroupResponse{}
	_body, _err := client.CreateUserGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateVideoComposeTaskWithOptions(request *CreateVideoComposeTaskRequest, runtime *util.RuntimeOptions) (_result *CreateVideoComposeTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AudioFileName)) {
		body["AudioFileName"] = request.AudioFileName
	}

	if !tea.BoolValue(util.IsUnset(request.BucketName)) {
		body["BucketName"] = request.BucketName
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		body["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.ImageFileNames)) {
		body["ImageFileNames"] = request.ImageFileNames
	}

	if !tea.BoolValue(util.IsUnset(request.ImageParameters)) {
		body["ImageParameters"] = request.ImageParameters
	}

	if !tea.BoolValue(util.IsUnset(request.VideoFormat)) {
		body["VideoFormat"] = request.VideoFormat
	}

	if !tea.BoolValue(util.IsUnset(request.VideoFrameRate)) {
		body["VideoFrameRate"] = request.VideoFrameRate
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateVideoComposeTask"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateVideoComposeTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateVideoComposeTask(request *CreateVideoComposeTaskRequest) (_result *CreateVideoComposeTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateVideoComposeTaskResponse{}
	_body, _err := client.CreateVideoComposeTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateVideoSummaryTaskWithOptions(request *CreateVideoSummaryTaskRequest, runtime *util.RuntimeOptions) (_result *CreateVideoSummaryTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		body["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTimeStamp)) {
		body["EndTimeStamp"] = request.EndTimeStamp
	}

	if !tea.BoolValue(util.IsUnset(request.LiveVideoSummary)) {
		body["LiveVideoSummary"] = request.LiveVideoSummary
	}

	if !tea.BoolValue(util.IsUnset(request.OptionList)) {
		body["OptionList"] = request.OptionList
	}

	if !tea.BoolValue(util.IsUnset(request.StartTimeStamp)) {
		body["StartTimeStamp"] = request.StartTimeStamp
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateVideoSummaryTask"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateVideoSummaryTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateVideoSummaryTask(request *CreateVideoSummaryTaskRequest) (_result *CreateVideoSummaryTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateVideoSummaryTaskResponse{}
	_body, _err := client.CreateVideoSummaryTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateWatchPolicyWithOptions(request *CreateWatchPolicyRequest, runtime *util.RuntimeOptions) (_result *CreateWatchPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ItemMatchType)) {
		body["ItemMatchType"] = request.ItemMatchType
	}

	if !tea.BoolValue(util.IsUnset(request.SimilarityThreshold)) {
		body["SimilarityThreshold"] = request.SimilarityThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.TargetType)) {
		body["TargetType"] = request.TargetType
	}

	if !tea.BoolValue(util.IsUnset(request.WatchMode)) {
		body["WatchMode"] = request.WatchMode
	}

	if !tea.BoolValue(util.IsUnset(request.WatchPolicyName)) {
		body["WatchPolicyName"] = request.WatchPolicyName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateWatchPolicy"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateWatchPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateWatchPolicy(request *CreateWatchPolicyRequest) (_result *CreateWatchPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateWatchPolicyResponse{}
	_body, _err := client.CreateWatchPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateWatchTaskWithOptions(request *CreateWatchTaskRequest, runtime *util.RuntimeOptions) (_result *CreateWatchTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceList)) {
		body["DeviceList"] = request.DeviceList
	}

	if !tea.BoolValue(util.IsUnset(request.MessageReceiver)) {
		body["MessageReceiver"] = request.MessageReceiver
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleCycleDates)) {
		body["ScheduleCycleDates"] = request.ScheduleCycleDates
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleTimes)) {
		body["ScheduleTimes"] = request.ScheduleTimes
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleType)) {
		body["ScheduleType"] = request.ScheduleType
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		body["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.WatchPolicyIds)) {
		body["WatchPolicyIds"] = request.WatchPolicyIds
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateWatchTask"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateWatchTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateWatchTask(request *CreateWatchTaskRequest) (_result *CreateWatchTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateWatchTaskResponse{}
	_body, _err := client.CreateWatchTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteAIInstanceWithOptions(tmpReq *DeleteAIInstanceRequest, runtime *util.RuntimeOptions) (_result *DeleteAIInstanceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeleteAIInstanceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InstanceIds)) {
		request.InstanceIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceIds, tea.String("InstanceIds"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceIdsShrink)) {
		body["InstanceIds"] = request.InstanceIdsShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAIInstance"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAIInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteAIInstance(request *DeleteAIInstanceRequest) (_result *DeleteAIInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAIInstanceResponse{}
	_body, _err := client.DeleteAIInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteAiotDeviceWithOptions(request *DeleteAiotDeviceRequest, runtime *util.RuntimeOptions) (_result *DeleteAiotDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAiotDevice"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAiotDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteAiotDevice(request *DeleteAiotDeviceRequest) (_result *DeleteAiotDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAiotDeviceResponse{}
	_body, _err := client.DeleteAiotDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteAiotPersonTableWithOptions(request *DeleteAiotPersonTableRequest, runtime *util.RuntimeOptions) (_result *DeleteAiotPersonTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.PersonTableId)) {
		body["PersonTableId"] = request.PersonTableId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAiotPersonTable"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAiotPersonTableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteAiotPersonTable(request *DeleteAiotPersonTableRequest) (_result *DeleteAiotPersonTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAiotPersonTableResponse{}
	_body, _err := client.DeleteAiotPersonTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteAiotPersonTableItemWithOptions(request *DeleteAiotPersonTableItemRequest, runtime *util.RuntimeOptions) (_result *DeleteAiotPersonTableItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.PersonTableId)) {
		body["PersonTableId"] = request.PersonTableId
	}

	if !tea.BoolValue(util.IsUnset(request.PersonTableItemId)) {
		body["PersonTableItemId"] = request.PersonTableItemId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAiotPersonTableItem"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAiotPersonTableItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteAiotPersonTableItem(request *DeleteAiotPersonTableItemRequest) (_result *DeleteAiotPersonTableItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAiotPersonTableItemResponse{}
	_body, _err := client.DeleteAiotPersonTableItemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteAiotVehicleTableItemWithOptions(request *DeleteAiotVehicleTableItemRequest, runtime *util.RuntimeOptions) (_result *DeleteAiotVehicleTableItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.VehicleTableId)) {
		body["VehicleTableId"] = request.VehicleTableId
	}

	if !tea.BoolValue(util.IsUnset(request.VehicleTableItemId)) {
		body["VehicleTableItemId"] = request.VehicleTableItemId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAiotVehicleTableItem"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAiotVehicleTableItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteAiotVehicleTableItem(request *DeleteAiotVehicleTableItemRequest) (_result *DeleteAiotVehicleTableItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAiotVehicleTableItemResponse{}
	_body, _err := client.DeleteAiotVehicleTableItemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteChannelWithOptions(request *DeleteChannelRequest, runtime *util.RuntimeOptions) (_result *DeleteChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceCodes)) {
		body["DeviceCodes"] = request.DeviceCodes
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteChannel"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteChannel(request *DeleteChannelRequest) (_result *DeleteChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteChannelResponse{}
	_body, _err := client.DeleteChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCorpGroupWithOptions(request *DeleteCorpGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteCorpGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCorpGroup"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCorpGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCorpGroup(request *DeleteCorpGroupRequest) (_result *DeleteCorpGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCorpGroupResponse{}
	_body, _err := client.DeleteCorpGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDataSourceWithOptions(request *DeleteDataSourceRequest, runtime *util.RuntimeOptions) (_result *DeleteDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		body["DataSourceId"] = request.DataSourceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDataSource"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDataSourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDataSource(request *DeleteDataSourceRequest) (_result *DeleteDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDataSourceResponse{}
	_body, _err := client.DeleteDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDataSourcesWithOptions(request *DeleteDataSourcesRequest, runtime *util.RuntimeOptions) (_result *DeleteDataSourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataSourceIdList)) {
		body["DataSourceIdList"] = request.DataSourceIdList
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDataSources"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDataSourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDataSources(request *DeleteDataSourcesRequest) (_result *DeleteDataSourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDataSourcesResponse{}
	_body, _err := client.DeleteDataSourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDeviceWithOptions(request *DeleteDeviceRequest, runtime *util.RuntimeOptions) (_result *DeleteDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.GbId)) {
		body["GbId"] = request.GbId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDevice"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDevice(request *DeleteDeviceRequest) (_result *DeleteDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDeviceResponse{}
	_body, _err := client.DeleteDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDeviceForInstanceWithOptions(tmpReq *DeleteDeviceForInstanceRequest, runtime *util.RuntimeOptions) (_result *DeleteDeviceForInstanceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeleteDeviceForInstanceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Devices)) {
		request.DevicesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Devices, tea.String("Devices"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlgorithmId)) {
		body["AlgorithmId"] = request.AlgorithmId
	}

	if !tea.BoolValue(util.IsUnset(request.DeleteInstanceFlag)) {
		body["DeleteInstanceFlag"] = request.DeleteInstanceFlag
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceCount)) {
		body["DeviceCount"] = request.DeviceCount
	}

	if !tea.BoolValue(util.IsUnset(request.DevicesShrink)) {
		body["Devices"] = request.DevicesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDeviceForInstance"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDeviceForInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDeviceForInstance(request *DeleteDeviceForInstanceRequest) (_result *DeleteDeviceForInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDeviceForInstanceResponse{}
	_body, _err := client.DeleteDeviceForInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDevicesWithOptions(request *DeleteDevicesRequest, runtime *util.RuntimeOptions) (_result *DeleteDevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceIdList)) {
		body["DeviceIdList"] = request.DeviceIdList
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDevices"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDevices(request *DeleteDevicesRequest) (_result *DeleteDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDevicesResponse{}
	_body, _err := client.DeleteDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDoubleVerificationGroupWithOptions(request *DeleteDoubleVerificationGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteDoubleVerificationGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DoubleVerificationGroupId)) {
		body["DoubleVerificationGroupId"] = request.DoubleVerificationGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDoubleVerificationGroup"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDoubleVerificationGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDoubleVerificationGroup(request *DeleteDoubleVerificationGroupRequest) (_result *DeleteDoubleVerificationGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDoubleVerificationGroupResponse{}
	_body, _err := client.DeleteDoubleVerificationGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteIPCDeviceWithOptions(request *DeleteIPCDeviceRequest, runtime *util.RuntimeOptions) (_result *DeleteIPCDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceCodes)) {
		body["DeviceCodes"] = request.DeviceCodes
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteIPCDevice"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteIPCDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteIPCDevice(request *DeleteIPCDeviceRequest) (_result *DeleteIPCDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteIPCDeviceResponse{}
	_body, _err := client.DeleteIPCDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteModelServiceWithOptions(request *DeleteModelServiceRequest, runtime *util.RuntimeOptions) (_result *DeleteModelServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ModelServiceId)) {
		body["ModelServiceId"] = request.ModelServiceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteModelService"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteModelServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteModelService(request *DeleteModelServiceRequest) (_result *DeleteModelServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteModelServiceResponse{}
	_body, _err := client.DeleteModelServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteNVRDeviceWithOptions(request *DeleteNVRDeviceRequest, runtime *util.RuntimeOptions) (_result *DeleteNVRDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceCodes)) {
		body["DeviceCodes"] = request.DeviceCodes
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteNVRDevice"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteNVRDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteNVRDevice(request *DeleteNVRDeviceRequest) (_result *DeleteNVRDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNVRDeviceResponse{}
	_body, _err := client.DeleteNVRDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteProfileWithOptions(request *DeleteProfileRequest, runtime *util.RuntimeOptions) (_result *DeleteProfileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.IsvSubId)) {
		body["IsvSubId"] = request.IsvSubId
	}

	if !tea.BoolValue(util.IsUnset(request.ProfileId)) {
		body["ProfileId"] = request.ProfileId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteProfile"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteProfileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteProfile(request *DeleteProfileRequest) (_result *DeleteProfileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteProfileResponse{}
	_body, _err := client.DeleteProfileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteProfileCatalogWithOptions(request *DeleteProfileCatalogRequest, runtime *util.RuntimeOptions) (_result *DeleteProfileCatalogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CatalogId)) {
		body["CatalogId"] = request.CatalogId
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.IsvSubId)) {
		body["IsvSubId"] = request.IsvSubId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteProfileCatalog"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteProfileCatalogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteProfileCatalog(request *DeleteProfileCatalogRequest) (_result *DeleteProfileCatalogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteProfileCatalogResponse{}
	_body, _err := client.DeleteProfileCatalogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteProjectWithOptions(request *DeleteProjectRequest, runtime *util.RuntimeOptions) (_result *DeleteProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectIds)) {
		query["ProjectIds"] = request.ProjectIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteProject"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteProject(request *DeleteProjectRequest) (_result *DeleteProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteProjectResponse{}
	_body, _err := client.DeleteProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteRecordsWithOptions(request *DeleteRecordsRequest, runtime *util.RuntimeOptions) (_result *DeleteRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlgorithmType)) {
		body["AlgorithmType"] = request.AlgorithmType
	}

	if !tea.BoolValue(util.IsUnset(request.AttributeName)) {
		body["AttributeName"] = request.AttributeName
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.OperatorType)) {
		body["OperatorType"] = request.OperatorType
	}

	if !tea.BoolValue(util.IsUnset(request.Value)) {
		body["Value"] = request.Value
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteRecords"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteRecordsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteRecords(request *DeleteRecordsRequest) (_result *DeleteRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRecordsResponse{}
	_body, _err := client.DeleteRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteUserWithOptions(request *DeleteUserRequest, runtime *util.RuntimeOptions) (_result *DeleteUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.IsvSubId)) {
		body["IsvSubId"] = request.IsvSubId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteUser"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteUser(request *DeleteUserRequest) (_result *DeleteUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteUserResponse{}
	_body, _err := client.DeleteUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteUserGroupWithOptions(request *DeleteUserGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteUserGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.IsvSubId)) {
		body["IsvSubId"] = request.IsvSubId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		body["UserGroupId"] = request.UserGroupId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteUserGroup"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteUserGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteUserGroup(request *DeleteUserGroupRequest) (_result *DeleteUserGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteUserGroupResponse{}
	_body, _err := client.DeleteUserGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteVideoSummaryTaskWithOptions(request *DeleteVideoSummaryTaskRequest, runtime *util.RuntimeOptions) (_result *DeleteVideoSummaryTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteVideoSummaryTask"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteVideoSummaryTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteVideoSummaryTask(request *DeleteVideoSummaryTaskRequest) (_result *DeleteVideoSummaryTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteVideoSummaryTaskResponse{}
	_body, _err := client.DeleteVideoSummaryTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteWatchPoliciesWithOptions(request *DeleteWatchPoliciesRequest, runtime *util.RuntimeOptions) (_result *DeleteWatchPoliciesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.WatchPolicyIds)) {
		body["WatchPolicyIds"] = request.WatchPolicyIds
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteWatchPolicies"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteWatchPoliciesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteWatchPolicies(request *DeleteWatchPoliciesRequest) (_result *DeleteWatchPoliciesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteWatchPoliciesResponse{}
	_body, _err := client.DeleteWatchPoliciesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteWatchTasksWithOptions(request *DeleteWatchTasksRequest, runtime *util.RuntimeOptions) (_result *DeleteWatchTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.WatchTaskIds)) {
		body["WatchTaskIds"] = request.WatchTaskIds
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteWatchTasks"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteWatchTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteWatchTasks(request *DeleteWatchTasksRequest) (_result *DeleteWatchTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteWatchTasksResponse{}
	_body, _err := client.DeleteWatchTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAIInstanceWithOptions(request *DescribeAIInstanceRequest, runtime *util.RuntimeOptions) (_result *DescribeAIInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		body["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAIInstance"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAIInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAIInstance(request *DescribeAIInstanceRequest) (_result *DescribeAIInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAIInstanceResponse{}
	_body, _err := client.DescribeAIInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAiotDevicesWithOptions(request *DescribeAiotDevicesRequest, runtime *util.RuntimeOptions) (_result *DescribeAiotDevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpIdList)) {
		body["CorpIdList"] = request.CorpIdList
	}

	if !tea.BoolValue(util.IsUnset(request.IdList)) {
		body["IdList"] = request.IdList
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		body["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAiotDevices"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAiotDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAiotDevices(request *DescribeAiotDevicesRequest) (_result *DescribeAiotDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAiotDevicesResponse{}
	_body, _err := client.DescribeAiotDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAiotPersonTableItemsWithOptions(request *DescribeAiotPersonTableItemsRequest, runtime *util.RuntimeOptions) (_result *DescribeAiotPersonTableItemsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		body["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PersonTableId)) {
		body["PersonTableId"] = request.PersonTableId
	}

	if !tea.BoolValue(util.IsUnset(request.PersonTableItemId)) {
		body["PersonTableItemId"] = request.PersonTableItemId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAiotPersonTableItems"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAiotPersonTableItemsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAiotPersonTableItems(request *DescribeAiotPersonTableItemsRequest) (_result *DescribeAiotPersonTableItemsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAiotPersonTableItemsResponse{}
	_body, _err := client.DescribeAiotPersonTableItemsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAiotPersonTablesWithOptions(request *DescribeAiotPersonTablesRequest, runtime *util.RuntimeOptions) (_result *DescribeAiotPersonTablesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.PersonTableIdList)) {
		body["PersonTableIdList"] = request.PersonTableIdList
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAiotPersonTables"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAiotPersonTablesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAiotPersonTables(request *DescribeAiotPersonTablesRequest) (_result *DescribeAiotPersonTablesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAiotPersonTablesResponse{}
	_body, _err := client.DescribeAiotPersonTablesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAiotVehicleTableItemsWithOptions(request *DescribeAiotVehicleTableItemsRequest, runtime *util.RuntimeOptions) (_result *DescribeAiotVehicleTableItemsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		body["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.VehicleTableId)) {
		body["VehicleTableId"] = request.VehicleTableId
	}

	if !tea.BoolValue(util.IsUnset(request.VehicleTableItemId)) {
		body["VehicleTableItemId"] = request.VehicleTableItemId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAiotVehicleTableItems"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAiotVehicleTableItemsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAiotVehicleTableItems(request *DescribeAiotVehicleTableItemsRequest) (_result *DescribeAiotVehicleTableItemsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAiotVehicleTableItemsResponse{}
	_body, _err := client.DescribeAiotVehicleTableItemsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAiotVehicleTablesWithOptions(request *DescribeAiotVehicleTablesRequest, runtime *util.RuntimeOptions) (_result *DescribeAiotVehicleTablesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.VehicleTableIdList)) {
		body["VehicleTableIdList"] = request.VehicleTableIdList
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAiotVehicleTables"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAiotVehicleTablesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAiotVehicleTables(request *DescribeAiotVehicleTablesRequest) (_result *DescribeAiotVehicleTablesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAiotVehicleTablesResponse{}
	_body, _err := client.DescribeAiotVehicleTablesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCameraForInstanceWithOptions(request *DescribeCameraForInstanceRequest, runtime *util.RuntimeOptions) (_result *DescribeCameraForInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCameraForInstance"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCameraForInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCameraForInstance(request *DescribeCameraForInstanceRequest) (_result *DescribeCameraForInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCameraForInstanceResponse{}
	_body, _err := client.DescribeCameraForInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeChannelsWithOptions(request *DescribeChannelsRequest, runtime *util.RuntimeOptions) (_result *DescribeChannelsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceFilter)) {
		body["DeviceFilter"] = request.DeviceFilter
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceStatus)) {
		body["DeviceStatus"] = request.DeviceStatus
	}

	if !tea.BoolValue(util.IsUnset(request.NvrId)) {
		body["NvrId"] = request.NvrId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		body["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ShowUnConfig)) {
		body["ShowUnConfig"] = request.ShowUnConfig
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeChannels"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeChannelsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeChannels(request *DescribeChannelsRequest) (_result *DescribeChannelsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeChannelsResponse{}
	_body, _err := client.DescribeChannelsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDataSourcesWithOptions(request *DescribeDataSourcesRequest, runtime *util.RuntimeOptions) (_result *DescribeDataSourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpIdList)) {
		body["CorpIdList"] = request.CorpIdList
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceCategory)) {
		body["DataSourceCategory"] = request.DataSourceCategory
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceFilter)) {
		body["DataSourceFilter"] = request.DataSourceFilter
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceIdList)) {
		body["DataSourceIdList"] = request.DataSourceIdList
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		body["DataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		body["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StreamStatus)) {
		body["StreamStatus"] = request.StreamStatus
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDataSources"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDataSourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDataSources(request *DescribeDataSourcesRequest) (_result *DescribeDataSourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDataSourcesResponse{}
	_body, _err := client.DescribeDataSourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDevicesWithOptions(request *DescribeDevicesRequest, runtime *util.RuntimeOptions) (_result *DescribeDevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpIdList)) {
		body["CorpIdList"] = request.CorpIdList
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceIdList)) {
		body["DeviceIdList"] = request.DeviceIdList
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		body["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDevices"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDevices(request *DescribeDevicesRequest) (_result *DescribeDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDevicesResponse{}
	_body, _err := client.DescribeDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeIpcsWithOptions(request *DescribeIpcsRequest, runtime *util.RuntimeOptions) (_result *DescribeIpcsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpIdList)) {
		body["CorpIdList"] = request.CorpIdList
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceFilter)) {
		body["DeviceFilter"] = request.DeviceFilter
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceIdList)) {
		body["DeviceIdList"] = request.DeviceIdList
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceStatus)) {
		body["DeviceStatus"] = request.DeviceStatus
	}

	if !tea.BoolValue(util.IsUnset(request.NvrIdList)) {
		body["NvrIdList"] = request.NvrIdList
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		body["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ParentDeviceType)) {
		body["ParentDeviceType"] = request.ParentDeviceType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeIpcs"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeIpcsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeIpcs(request *DescribeIpcsRequest) (_result *DescribeIpcsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeIpcsResponse{}
	_body, _err := client.DescribeIpcsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeModelServiceWithOptions(request *DescribeModelServiceRequest, runtime *util.RuntimeOptions) (_result *DescribeModelServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ModelServiceId)) {
		body["ModelServiceId"] = request.ModelServiceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeModelService"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeModelServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeModelService(request *DescribeModelServiceRequest) (_result *DescribeModelServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeModelServiceResponse{}
	_body, _err := client.DescribeModelServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeModelServiceListWithOptions(request *DescribeModelServiceListRequest, runtime *util.RuntimeOptions) (_result *DescribeModelServiceListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlgorithmCode)) {
		body["AlgorithmCode"] = request.AlgorithmCode
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeDeleted)) {
		body["IncludeDeleted"] = request.IncludeDeleted
	}

	if !tea.BoolValue(util.IsUnset(request.ModelServiceName)) {
		body["ModelServiceName"] = request.ModelServiceName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		body["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeModelServiceList"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeModelServiceListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeModelServiceList(request *DescribeModelServiceListRequest) (_result *DescribeModelServiceListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeModelServiceListResponse{}
	_body, _err := client.DescribeModelServiceListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNvrDevicesWithOptions(request *DescribeNvrDevicesRequest, runtime *util.RuntimeOptions) (_result *DescribeNvrDevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpIdList)) {
		body["CorpIdList"] = request.CorpIdList
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceFilter)) {
		body["DeviceFilter"] = request.DeviceFilter
	}

	if !tea.BoolValue(util.IsUnset(request.NvrDeviceIdList)) {
		body["NvrDeviceIdList"] = request.NvrDeviceIdList
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		body["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNvrDevices"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNvrDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNvrDevices(request *DescribeNvrDevicesRequest) (_result *DescribeNvrDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNvrDevicesResponse{}
	_body, _err := client.DescribeNvrDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNvrsWithOptions(request *DescribeNvrsRequest, runtime *util.RuntimeOptions) (_result *DescribeNvrsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpIdList)) {
		body["CorpIdList"] = request.CorpIdList
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceFilter)) {
		body["DeviceFilter"] = request.DeviceFilter
	}

	if !tea.BoolValue(util.IsUnset(request.NvrDeviceIdList)) {
		body["NvrDeviceIdList"] = request.NvrDeviceIdList
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		body["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNvrs"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNvrsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNvrs(request *DescribeNvrsRequest) (_result *DescribeNvrsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNvrsResponse{}
	_body, _err := client.DescribeNvrsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeWatchItemsWithOptions(request *DescribeWatchItemsRequest, runtime *util.RuntimeOptions) (_result *DescribeWatchItemsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.WatchItemIds)) {
		body["WatchItemIds"] = request.WatchItemIds
	}

	if !tea.BoolValue(util.IsUnset(request.WatchPolicyId)) {
		body["WatchPolicyId"] = request.WatchPolicyId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeWatchItems"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWatchItemsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeWatchItems(request *DescribeWatchItemsRequest) (_result *DescribeWatchItemsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeWatchItemsResponse{}
	_body, _err := client.DescribeWatchItemsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeWatchPoliciesWithOptions(request *DescribeWatchPoliciesRequest, runtime *util.RuntimeOptions) (_result *DescribeWatchPoliciesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.WatchPolicyIds)) {
		body["WatchPolicyIds"] = request.WatchPolicyIds
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeWatchPolicies"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWatchPoliciesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeWatchPolicies(request *DescribeWatchPoliciesRequest) (_result *DescribeWatchPoliciesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeWatchPoliciesResponse{}
	_body, _err := client.DescribeWatchPoliciesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeWatchTasksWithOptions(request *DescribeWatchTasksRequest, runtime *util.RuntimeOptions) (_result *DescribeWatchTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.WatchTaskIds)) {
		body["WatchTaskIds"] = request.WatchTaskIds
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeWatchTasks"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWatchTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeWatchTasks(request *DescribeWatchTasksRequest) (_result *DescribeWatchTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeWatchTasksResponse{}
	_body, _err := client.DescribeWatchTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribesDoubleVerificationGroupsWithOptions(request *DescribesDoubleVerificationGroupsRequest, runtime *util.RuntimeOptions) (_result *DescribesDoubleVerificationGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DoubleVerificationGroupIds)) {
		body["DoubleVerificationGroupIds"] = request.DoubleVerificationGroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		body["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribesDoubleVerificationGroups"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribesDoubleVerificationGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribesDoubleVerificationGroups(request *DescribesDoubleVerificationGroupsRequest) (_result *DescribesDoubleVerificationGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribesDoubleVerificationGroupsResponse{}
	_body, _err := client.DescribesDoubleVerificationGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAiotStorageInfoWithOptions(runtime *util.RuntimeOptions) (_result *GetAiotStorageInfoResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetAiotStorageInfo"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAiotStorageInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAiotStorageInfo() (_result *GetAiotStorageInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAiotStorageInfoResponse{}
	_body, _err := client.GetAiotStorageInfoWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetBodyOptionsWithOptions(request *GetBodyOptionsRequest, runtime *util.RuntimeOptions) (_result *GetBodyOptionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBodyOptions"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBodyOptionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetBodyOptions(request *GetBodyOptionsRequest) (_result *GetBodyOptionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBodyOptionsResponse{}
	_body, _err := client.GetBodyOptionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetCatalogListWithOptions(request *GetCatalogListRequest, runtime *util.RuntimeOptions) (_result *GetCatalogListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		query["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.IsvSubId)) {
		query["IsvSubId"] = request.IsvSubId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCatalogList"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCatalogListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetCatalogList(request *GetCatalogListRequest) (_result *GetCatalogListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCatalogListResponse{}
	_body, _err := client.GetCatalogListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetCityCodeWithOptions(runtime *util.RuntimeOptions) (_result *GetCityCodeResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetCityCode"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCityCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetCityCode() (_result *GetCityCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCityCodeResponse{}
	_body, _err := client.GetCityCodeWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDataSourceStatsWithOptions(request *GetDataSourceStatsRequest, runtime *util.RuntimeOptions) (_result *GetDataSourceStatsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpIdList)) {
		body["CorpIdList"] = request.CorpIdList
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		body["DataSourceType"] = request.DataSourceType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDataSourceStats"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDataSourceStatsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDataSourceStats(request *GetDataSourceStatsRequest) (_result *GetDataSourceStatsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDataSourceStatsResponse{}
	_body, _err := client.GetDataSourceStatsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDeviceCaptureStrategyWithOptions(request *GetDeviceCaptureStrategyRequest, runtime *util.RuntimeOptions) (_result *GetDeviceCaptureStrategyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceCode)) {
		body["DeviceCode"] = request.DeviceCode
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceType)) {
		body["DeviceType"] = request.DeviceType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDeviceCaptureStrategy"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDeviceCaptureStrategyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDeviceCaptureStrategy(request *GetDeviceCaptureStrategyRequest) (_result *GetDeviceCaptureStrategyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDeviceCaptureStrategyResponse{}
	_body, _err := client.GetDeviceCaptureStrategyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDeviceConfigWithOptions(request *GetDeviceConfigRequest, runtime *util.RuntimeOptions) (_result *GetDeviceConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceSn)) {
		body["DeviceSn"] = request.DeviceSn
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceTimeStamp)) {
		body["DeviceTimeStamp"] = request.DeviceTimeStamp
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDeviceConfig"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDeviceConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDeviceConfig(request *GetDeviceConfigRequest) (_result *GetDeviceConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDeviceConfigResponse{}
	_body, _err := client.GetDeviceConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDeviceLiveUrlWithOptions(request *GetDeviceLiveUrlRequest, runtime *util.RuntimeOptions) (_result *GetDeviceLiveUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		body["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.GbId)) {
		body["GbId"] = request.GbId
	}

	if !tea.BoolValue(util.IsUnset(request.OutProtocol)) {
		body["OutProtocol"] = request.OutProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.StreamType)) {
		body["StreamType"] = request.StreamType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDeviceLiveUrl"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDeviceLiveUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDeviceLiveUrl(request *GetDeviceLiveUrlRequest) (_result *GetDeviceLiveUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDeviceLiveUrlResponse{}
	_body, _err := client.GetDeviceLiveUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDevicePictureWithOptions(request *GetDevicePictureRequest, runtime *util.RuntimeOptions) (_result *GetDevicePictureResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		body["DeviceId"] = request.DeviceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDevicePicture"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDevicePictureResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDevicePicture(request *GetDevicePictureRequest) (_result *GetDevicePictureResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDevicePictureResponse{}
	_body, _err := client.GetDevicePictureWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDeviceStatsWithOptions(request *GetDeviceStatsRequest, runtime *util.RuntimeOptions) (_result *GetDeviceStatsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpIdList)) {
		body["CorpIdList"] = request.CorpIdList
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceStatus)) {
		body["DeviceStatus"] = request.DeviceStatus
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceType)) {
		body["DeviceType"] = request.DeviceType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDeviceStats"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDeviceStatsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDeviceStats(request *GetDeviceStatsRequest) (_result *GetDeviceStatsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDeviceStatsResponse{}
	_body, _err := client.GetDeviceStatsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDeviceVideoUrlWithOptions(request *GetDeviceVideoUrlRequest, runtime *util.RuntimeOptions) (_result *GetDeviceVideoUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		body["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.GbId)) {
		body["GbId"] = request.GbId
	}

	if !tea.BoolValue(util.IsUnset(request.OutProtocol)) {
		body["OutProtocol"] = request.OutProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StorageType)) {
		body["StorageType"] = request.StorageType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDeviceVideoUrl"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDeviceVideoUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDeviceVideoUrl(request *GetDeviceVideoUrlRequest) (_result *GetDeviceVideoUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDeviceVideoUrlResponse{}
	_body, _err := client.GetDeviceVideoUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetFaceModelResultWithOptions(request *GetFaceModelResultRequest, runtime *util.RuntimeOptions) (_result *GetFaceModelResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PictureContent)) {
		body["PictureContent"] = request.PictureContent
	}

	if !tea.BoolValue(util.IsUnset(request.PictureId)) {
		body["PictureId"] = request.PictureId
	}

	if !tea.BoolValue(util.IsUnset(request.PictureUrl)) {
		body["PictureUrl"] = request.PictureUrl
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFaceModelResult"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetFaceModelResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetFaceModelResult(request *GetFaceModelResultRequest) (_result *GetFaceModelResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetFaceModelResultResponse{}
	_body, _err := client.GetFaceModelResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetFaceOptionsWithOptions(request *GetFaceOptionsRequest, runtime *util.RuntimeOptions) (_result *GetFaceOptionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFaceOptions"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetFaceOptionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetFaceOptions(request *GetFaceOptionsRequest) (_result *GetFaceOptionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetFaceOptionsResponse{}
	_body, _err := client.GetFaceOptionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetInventoryWithOptions(request *GetInventoryRequest, runtime *util.RuntimeOptions) (_result *GetInventoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommodityCode)) {
		body["CommodityCode"] = request.CommodityCode
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInventory"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInventoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetInventory(request *GetInventoryRequest) (_result *GetInventoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInventoryResponse{}
	_body, _err := client.GetInventoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMonitorListWithOptions(request *GetMonitorListRequest, runtime *util.RuntimeOptions) (_result *GetMonitorListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMonitorList"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMonitorListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMonitorList(request *GetMonitorListRequest) (_result *GetMonitorListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMonitorListResponse{}
	_body, _err := client.GetMonitorListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMonitorResultWithOptions(request *GetMonitorResultRequest, runtime *util.RuntimeOptions) (_result *GetMonitorResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlgorithmVendor)) {
		body["AlgorithmVendor"] = request.AlgorithmVendor
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MinRecordId)) {
		body["MinRecordId"] = request.MinRecordId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMonitorResult"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMonitorResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMonitorResult(request *GetMonitorResultRequest) (_result *GetMonitorResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMonitorResultResponse{}
	_body, _err := client.GetMonitorResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetPersonDetailWithOptions(request *GetPersonDetailRequest, runtime *util.RuntimeOptions) (_result *GetPersonDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlgorithmType)) {
		body["AlgorithmType"] = request.AlgorithmType
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.PersonID)) {
		body["PersonID"] = request.PersonID
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPersonDetail"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPersonDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetPersonDetail(request *GetPersonDetailRequest) (_result *GetPersonDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPersonDetailResponse{}
	_body, _err := client.GetPersonDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetPersonListWithOptions(tmpReq *GetPersonListRequest, runtime *util.RuntimeOptions) (_result *GetPersonListResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetPersonListShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.CorpIdList)) {
		request.CorpIdListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CorpIdList, tea.String("CorpIdList"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.PersonIdList)) {
		request.PersonIdListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.PersonIdList, tea.String("PersonIdList"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.CorpIdListShrink)) {
		body["CorpIdList"] = request.CorpIdListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.FaceMatchingRateThreshold)) {
		body["FaceMatchingRateThreshold"] = request.FaceMatchingRateThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.FaceUrl)) {
		body["FaceUrl"] = request.FaceUrl
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PersonIdListShrink)) {
		body["PersonIdList"] = request.PersonIdListShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPersonList"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPersonListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetPersonList(request *GetPersonListRequest) (_result *GetPersonListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPersonListResponse{}
	_body, _err := client.GetPersonListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetPictureUrlWithOptions(request *GetPictureUrlRequest, runtime *util.RuntimeOptions) (_result *GetPictureUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ExpireTime)) {
		body["ExpireTime"] = request.ExpireTime
	}

	if !tea.BoolValue(util.IsUnset(request.OriginUrl)) {
		body["OriginUrl"] = request.OriginUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Protocol)) {
		body["Protocol"] = request.Protocol
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPictureUrl"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPictureUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetPictureUrl(request *GetPictureUrlRequest) (_result *GetPictureUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPictureUrlResponse{}
	_body, _err := client.GetPictureUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetProfileDetailWithOptions(request *GetProfileDetailRequest, runtime *util.RuntimeOptions) (_result *GetProfileDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.IsvSubId)) {
		body["IsvSubId"] = request.IsvSubId
	}

	if !tea.BoolValue(util.IsUnset(request.ProfileId)) {
		body["ProfileId"] = request.ProfileId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetProfileDetail"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetProfileDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetProfileDetail(request *GetProfileDetailRequest) (_result *GetProfileDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetProfileDetailResponse{}
	_body, _err := client.GetProfileDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetProfileListWithOptions(tmpReq *GetProfileListRequest, runtime *util.RuntimeOptions) (_result *GetProfileListResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetProfileListShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.PersonIdList)) {
		request.PersonIdListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.PersonIdList, tea.String("PersonIdList"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ProfileIdList)) {
		request.ProfileIdListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ProfileIdList, tea.String("ProfileIdList"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		body["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.CatalogId)) {
		body["CatalogId"] = request.CatalogId
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.FaceImageId)) {
		body["FaceImageId"] = request.FaceImageId
	}

	if !tea.BoolValue(util.IsUnset(request.FaceUrl)) {
		body["FaceUrl"] = request.FaceUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Gender)) {
		body["Gender"] = request.Gender
	}

	if !tea.BoolValue(util.IsUnset(request.IdNumber)) {
		body["IdNumber"] = request.IdNumber
	}

	if !tea.BoolValue(util.IsUnset(request.IsvSubId)) {
		body["IsvSubId"] = request.IsvSubId
	}

	if !tea.BoolValue(util.IsUnset(request.LiveAddress)) {
		body["LiveAddress"] = request.LiveAddress
	}

	if !tea.BoolValue(util.IsUnset(request.MatchingRateThreshold)) {
		body["MatchingRateThreshold"] = request.MatchingRateThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PersonIdListShrink)) {
		body["PersonIdList"] = request.PersonIdListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNo)) {
		body["PhoneNo"] = request.PhoneNo
	}

	if !tea.BoolValue(util.IsUnset(request.PlateNo)) {
		body["PlateNo"] = request.PlateNo
	}

	if !tea.BoolValue(util.IsUnset(request.ProfileIdListShrink)) {
		body["ProfileIdList"] = request.ProfileIdListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SceneType)) {
		body["SceneType"] = request.SceneType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetProfileList"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetProfileListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetProfileList(request *GetProfileListRequest) (_result *GetProfileListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetProfileListResponse{}
	_body, _err := client.GetProfileListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetScanSubDevicesWithOptions(request *GetScanSubDevicesRequest, runtime *util.RuntimeOptions) (_result *GetScanSubDevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		body["DeviceId"] = request.DeviceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetScanSubDevices"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetScanSubDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetScanSubDevices(request *GetScanSubDevicesRequest) (_result *GetScanSubDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetScanSubDevicesResponse{}
	_body, _err := client.GetScanSubDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetUserDetailWithOptions(request *GetUserDetailRequest, runtime *util.RuntimeOptions) (_result *GetUserDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.IsvSubId)) {
		body["IsvSubId"] = request.IsvSubId
	}

	if !tea.BoolValue(util.IsUnset(request.NeedFaceDetail)) {
		body["NeedFaceDetail"] = request.NeedFaceDetail
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetUserDetail"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetUserDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetUserDetail(request *GetUserDetailRequest) (_result *GetUserDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetUserDetailResponse{}
	_body, _err := client.GetUserDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetVideoComposeResultWithOptions(request *GetVideoComposeResultRequest, runtime *util.RuntimeOptions) (_result *GetVideoComposeResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskRequestId)) {
		body["TaskRequestId"] = request.TaskRequestId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetVideoComposeResult"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetVideoComposeResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetVideoComposeResult(request *GetVideoComposeResultRequest) (_result *GetVideoComposeResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetVideoComposeResultResponse{}
	_body, _err := client.GetVideoComposeResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetVideoSummaryTaskResultWithOptions(request *GetVideoSummaryTaskResultRequest, runtime *util.RuntimeOptions) (_result *GetVideoSummaryTaskResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetVideoSummaryTaskResult"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetVideoSummaryTaskResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetVideoSummaryTaskResult(request *GetVideoSummaryTaskResultRequest) (_result *GetVideoSummaryTaskResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetVideoSummaryTaskResultResponse{}
	_body, _err := client.GetVideoSummaryTaskResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InvokeMotorModelWithOptions(request *InvokeMotorModelRequest, runtime *util.RuntimeOptions) (_result *InvokeMotorModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.PicId)) {
		body["PicId"] = request.PicId
	}

	if !tea.BoolValue(util.IsUnset(request.PicPath)) {
		body["PicPath"] = request.PicPath
	}

	if !tea.BoolValue(util.IsUnset(request.PicUrl)) {
		body["PicUrl"] = request.PicUrl
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("InvokeMotorModel"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InvokeMotorModelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InvokeMotorModel(request *InvokeMotorModelRequest) (_result *InvokeMotorModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InvokeMotorModelResponse{}
	_body, _err := client.InvokeMotorModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAccessNumberWithOptions(request *ListAccessNumberRequest, runtime *util.RuntimeOptions) (_result *ListAccessNumberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpIdList)) {
		body["CorpIdList"] = request.CorpIdList
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAccessNumber"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAccessNumberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAccessNumber(request *ListAccessNumberRequest) (_result *ListAccessNumberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAccessNumberResponse{}
	_body, _err := client.ListAccessNumberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAlgorithmNamesByDeviceIdsWithOptions(request *ListAlgorithmNamesByDeviceIdsRequest, runtime *util.RuntimeOptions) (_result *ListAlgorithmNamesByDeviceIdsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAlgorithmNamesByDeviceIds"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAlgorithmNamesByDeviceIdsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAlgorithmNamesByDeviceIds(request *ListAlgorithmNamesByDeviceIdsRequest) (_result *ListAlgorithmNamesByDeviceIdsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAlgorithmNamesByDeviceIdsResponse{}
	_body, _err := client.ListAlgorithmNamesByDeviceIdsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListBodyAlgorithmResultsWithOptions(request *ListBodyAlgorithmResultsRequest, runtime *util.RuntimeOptions) (_result *ListBodyAlgorithmResultsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlgorithmType)) {
		body["AlgorithmType"] = request.AlgorithmType
	}

	if !tea.BoolValue(util.IsUnset(request.CapStyle)) {
		body["CapStyle"] = request.CapStyle
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		body["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListBodyAlgorithmResults"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListBodyAlgorithmResultsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListBodyAlgorithmResults(request *ListBodyAlgorithmResultsRequest) (_result *ListBodyAlgorithmResultsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListBodyAlgorithmResultsResponse{}
	_body, _err := client.ListBodyAlgorithmResultsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListCorpGroupMetricsWithOptions(request *ListCorpGroupMetricsRequest, runtime *util.RuntimeOptions) (_result *ListCorpGroupMetricsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceGroup)) {
		body["DeviceGroup"] = request.DeviceGroup
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		body["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TagCode)) {
		body["TagCode"] = request.TagCode
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroup)) {
		body["UserGroup"] = request.UserGroup
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCorpGroupMetrics"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCorpGroupMetricsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListCorpGroupMetrics(request *ListCorpGroupMetricsRequest) (_result *ListCorpGroupMetricsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCorpGroupMetricsResponse{}
	_body, _err := client.ListCorpGroupMetricsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListCorpGroupsWithOptions(request *ListCorpGroupsRequest, runtime *util.RuntimeOptions) (_result *ListCorpGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCorpGroups"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCorpGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListCorpGroups(request *ListCorpGroupsRequest) (_result *ListCorpGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCorpGroupsResponse{}
	_body, _err := client.ListCorpGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListCorpMetricsWithOptions(request *ListCorpMetricsRequest, runtime *util.RuntimeOptions) (_result *ListCorpMetricsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceGroupList)) {
		body["DeviceGroupList"] = request.DeviceGroupList
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceIdList)) {
		body["DeviceIdList"] = request.DeviceIdList
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TagCode)) {
		body["TagCode"] = request.TagCode
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupList)) {
		body["UserGroupList"] = request.UserGroupList
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCorpMetrics"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCorpMetricsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListCorpMetrics(request *ListCorpMetricsRequest) (_result *ListCorpMetricsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCorpMetricsResponse{}
	_body, _err := client.ListCorpMetricsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListCorpsWithOptions(request *ListCorpsRequest, runtime *util.RuntimeOptions) (_result *ListCorpsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpName)) {
		body["CorpName"] = request.CorpName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCorps"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCorpsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListCorps(request *ListCorpsRequest) (_result *ListCorpsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCorpsResponse{}
	_body, _err := client.ListCorpsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDeviceGroupsWithOptions(request *ListDeviceGroupsRequest, runtime *util.RuntimeOptions) (_result *ListDeviceGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpIdList)) {
		body["CorpIdList"] = request.CorpIdList
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		body["DataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceCodeList)) {
		body["DeviceCodeList"] = request.DeviceCodeList
	}

	if !tea.BoolValue(util.IsUnset(request.Group)) {
		body["Group"] = request.Group
	}

	if !tea.BoolValue(util.IsUnset(request.IsPage)) {
		body["IsPage"] = request.IsPage
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		body["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDeviceGroups"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDeviceGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDeviceGroups(request *ListDeviceGroupsRequest) (_result *ListDeviceGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDeviceGroupsResponse{}
	_body, _err := client.ListDeviceGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDevicesWithOptions(request *ListDevicesRequest, runtime *util.RuntimeOptions) (_result *ListDevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceName)) {
		body["DeviceName"] = request.DeviceName
	}

	if !tea.BoolValue(util.IsUnset(request.GbId)) {
		body["GbId"] = request.GbId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDevices"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDevices(request *ListDevicesRequest) (_result *ListDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDevicesResponse{}
	_body, _err := client.ListDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListEventAlgorithmDetailsWithOptions(request *ListEventAlgorithmDetailsRequest, runtime *util.RuntimeOptions) (_result *ListEventAlgorithmDetailsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		body["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventType)) {
		body["EventType"] = request.EventType
	}

	if !tea.BoolValue(util.IsUnset(request.EventValue)) {
		body["EventValue"] = request.EventValue
	}

	if !tea.BoolValue(util.IsUnset(request.ExtendValue)) {
		body["ExtendValue"] = request.ExtendValue
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RecordId)) {
		body["RecordId"] = request.RecordId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceId)) {
		body["SourceId"] = request.SourceId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListEventAlgorithmDetails"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListEventAlgorithmDetailsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListEventAlgorithmDetails(request *ListEventAlgorithmDetailsRequest) (_result *ListEventAlgorithmDetailsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListEventAlgorithmDetailsResponse{}
	_body, _err := client.ListEventAlgorithmDetailsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListEventAlgorithmResultsWithOptions(request *ListEventAlgorithmResultsRequest, runtime *util.RuntimeOptions) (_result *ListEventAlgorithmResultsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		body["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventType)) {
		body["EventType"] = request.EventType
	}

	if !tea.BoolValue(util.IsUnset(request.ExtendValue)) {
		body["ExtendValue"] = request.ExtendValue
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListEventAlgorithmResults"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListEventAlgorithmResultsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListEventAlgorithmResults(request *ListEventAlgorithmResultsRequest) (_result *ListEventAlgorithmResultsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListEventAlgorithmResultsResponse{}
	_body, _err := client.ListEventAlgorithmResultsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFaceAlgorithmResultsWithOptions(request *ListFaceAlgorithmResultsRequest, runtime *util.RuntimeOptions) (_result *ListFaceAlgorithmResultsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlgorithmType)) {
		body["AlgorithmType"] = request.AlgorithmType
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		body["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFaceAlgorithmResults"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFaceAlgorithmResultsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFaceAlgorithmResults(request *ListFaceAlgorithmResultsRequest) (_result *ListFaceAlgorithmResultsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFaceAlgorithmResultsResponse{}
	_body, _err := client.ListFaceAlgorithmResultsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListInstancesWithOptions(request *ListInstancesRequest, runtime *util.RuntimeOptions) (_result *ListInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		query["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListInstances"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListInstances(request *ListInstancesRequest) (_result *ListInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListInstancesResponse{}
	_body, _err := client.ListInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMetricsWithOptions(request *ListMetricsRequest, runtime *util.RuntimeOptions) (_result *ListMetricsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AggregateType)) {
		body["AggregateType"] = request.AggregateType
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TagCode)) {
		body["TagCode"] = request.TagCode
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMetrics"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMetricsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMetrics(request *ListMetricsRequest) (_result *ListMetricsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMetricsResponse{}
	_body, _err := client.ListMetricsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMotorAlgorithmResultsWithOptions(request *ListMotorAlgorithmResultsRequest, runtime *util.RuntimeOptions) (_result *ListMotorAlgorithmResultsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlgorithmType)) {
		body["AlgorithmType"] = request.AlgorithmType
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		body["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PlateNumber)) {
		body["PlateNumber"] = request.PlateNumber
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMotorAlgorithmResults"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMotorAlgorithmResultsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMotorAlgorithmResults(request *ListMotorAlgorithmResultsRequest) (_result *ListMotorAlgorithmResultsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMotorAlgorithmResultsResponse{}
	_body, _err := client.ListMotorAlgorithmResultsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListNVRChannelDeviceWithOptions(request *ListNVRChannelDeviceRequest, runtime *util.RuntimeOptions) (_result *ListNVRChannelDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceCode)) {
		body["DeviceCode"] = request.DeviceCode
	}

	if !tea.BoolValue(util.IsUnset(request.IsPage)) {
		body["IsPage"] = request.IsPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		body["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListNVRChannelDevice"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListNVRChannelDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListNVRChannelDevice(request *ListNVRChannelDeviceRequest) (_result *ListNVRChannelDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListNVRChannelDeviceResponse{}
	_body, _err := client.ListNVRChannelDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListNVRDeviceWithOptions(request *ListNVRDeviceRequest, runtime *util.RuntimeOptions) (_result *ListNVRDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpIdList)) {
		body["CorpIdList"] = request.CorpIdList
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceCode)) {
		body["DeviceCode"] = request.DeviceCode
	}

	if !tea.BoolValue(util.IsUnset(request.IsPage)) {
		body["IsPage"] = request.IsPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		body["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListNVRDevice"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListNVRDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListNVRDevice(request *ListNVRDeviceRequest) (_result *ListNVRDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListNVRDeviceResponse{}
	_body, _err := client.ListNVRDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListPersonTraceWithOptions(request *ListPersonTraceRequest, runtime *util.RuntimeOptions) (_result *ListPersonTraceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		body["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PersonId)) {
		body["PersonId"] = request.PersonId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPersonTrace"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPersonTraceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListPersonTrace(request *ListPersonTraceRequest) (_result *ListPersonTraceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPersonTraceResponse{}
	_body, _err := client.ListPersonTraceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListPersonTraceDetailsWithOptions(request *ListPersonTraceDetailsRequest, runtime *util.RuntimeOptions) (_result *ListPersonTraceDetailsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		body["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PersonId)) {
		body["PersonId"] = request.PersonId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.SubId)) {
		body["SubId"] = request.SubId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPersonTraceDetails"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPersonTraceDetailsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListPersonTraceDetails(request *ListPersonTraceDetailsRequest) (_result *ListPersonTraceDetailsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPersonTraceDetailsResponse{}
	_body, _err := client.ListPersonTraceDetailsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListPersonVisitCountWithOptions(request *ListPersonVisitCountRequest, runtime *util.RuntimeOptions) (_result *ListPersonVisitCountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AggregateType)) {
		body["AggregateType"] = request.AggregateType
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.CountType)) {
		body["CountType"] = request.CountType
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MaxVal)) {
		body["MaxVal"] = request.MaxVal
	}

	if !tea.BoolValue(util.IsUnset(request.MinVal)) {
		body["MinVal"] = request.MinVal
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TagCode)) {
		body["TagCode"] = request.TagCode
	}

	if !tea.BoolValue(util.IsUnset(request.TimeAggregateType)) {
		body["TimeAggregateType"] = request.TimeAggregateType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPersonVisitCount"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPersonVisitCountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListPersonVisitCount(request *ListPersonVisitCountRequest) (_result *ListPersonVisitCountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPersonVisitCountResponse{}
	_body, _err := client.ListPersonVisitCountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListPersonsWithOptions(request *ListPersonsRequest, runtime *util.RuntimeOptions) (_result *ListPersonsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlgorithmType)) {
		body["AlgorithmType"] = request.AlgorithmType
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		body["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPersons"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPersonsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListPersons(request *ListPersonsRequest) (_result *ListPersonsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPersonsResponse{}
	_body, _err := client.ListPersonsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListUserGroupsWithOptions(request *ListUserGroupsRequest, runtime *util.RuntimeOptions) (_result *ListUserGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		query["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.IsvSubId)) {
		query["IsvSubId"] = request.IsvSubId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListUserGroups"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListUserGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListUserGroups(request *ListUserGroupsRequest) (_result *ListUserGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListUserGroupsResponse{}
	_body, _err := client.ListUserGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListUsersWithOptions(tmpReq *ListUsersRequest, runtime *util.RuntimeOptions) (_result *ListUsersResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListUsersShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.PersonList)) {
		request.PersonListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.PersonList, tea.String("PersonList"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.UserList)) {
		request.UserListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.UserList, tea.String("UserList"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Address)) {
		body["Address"] = request.Address
	}

	if !tea.BoolValue(util.IsUnset(request.Age)) {
		body["Age"] = request.Age
	}

	if !tea.BoolValue(util.IsUnset(request.Attachment)) {
		body["Attachment"] = request.Attachment
	}

	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		body["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.FaceImageUrl)) {
		body["FaceImageUrl"] = request.FaceImageUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Gender)) {
		body["Gender"] = request.Gender
	}

	if !tea.BoolValue(util.IsUnset(request.IdNumber)) {
		body["IdNumber"] = request.IdNumber
	}

	if !tea.BoolValue(util.IsUnset(request.IsvSubId)) {
		body["IsvSubId"] = request.IsvSubId
	}

	if !tea.BoolValue(util.IsUnset(request.MatchingRateThreshold)) {
		body["MatchingRateThreshold"] = request.MatchingRateThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PersonListShrink)) {
		body["PersonList"] = request.PersonListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNo)) {
		body["PhoneNo"] = request.PhoneNo
	}

	if !tea.BoolValue(util.IsUnset(request.PlateNo)) {
		body["PlateNo"] = request.PlateNo
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		body["UserGroupId"] = request.UserGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.UserListShrink)) {
		body["UserList"] = request.UserListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		body["UserName"] = request.UserName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListUsers"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListUsers(request *ListUsersRequest) (_result *ListUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListUsersResponse{}
	_body, _err := client.ListUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDeviceWithOptions(request *ModifyDeviceRequest, runtime *util.RuntimeOptions) (_result *ModifyDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AudioEnable)) {
		body["AudioEnable"] = request.AudioEnable
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceAddress)) {
		body["DeviceAddress"] = request.DeviceAddress
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceDirection)) {
		body["DeviceDirection"] = request.DeviceDirection
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		body["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceIp)) {
		body["DeviceIp"] = request.DeviceIp
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceModel)) {
		body["DeviceModel"] = request.DeviceModel
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceName)) {
		body["DeviceName"] = request.DeviceName
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceRate)) {
		body["DeviceRate"] = request.DeviceRate
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceResolution)) {
		body["DeviceResolution"] = request.DeviceResolution
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceSite)) {
		body["DeviceSite"] = request.DeviceSite
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceSubType)) {
		body["DeviceSubType"] = request.DeviceSubType
	}

	if !tea.BoolValue(util.IsUnset(request.EncodeFormat)) {
		body["EncodeFormat"] = request.EncodeFormat
	}

	if !tea.BoolValue(util.IsUnset(request.FrameRate)) {
		body["FrameRate"] = request.FrameRate
	}

	if !tea.BoolValue(util.IsUnset(request.GovLength)) {
		body["GovLength"] = request.GovLength
	}

	if !tea.BoolValue(util.IsUnset(request.Latitude)) {
		body["Latitude"] = request.Latitude
	}

	if !tea.BoolValue(util.IsUnset(request.Longitude)) {
		body["Longitude"] = request.Longitude
	}

	if !tea.BoolValue(util.IsUnset(request.OSDTimeEnable)) {
		body["OSDTimeEnable"] = request.OSDTimeEnable
	}

	if !tea.BoolValue(util.IsUnset(request.OSDTimeType)) {
		body["OSDTimeType"] = request.OSDTimeType
	}

	if !tea.BoolValue(util.IsUnset(request.OSDTimeX)) {
		body["OSDTimeX"] = request.OSDTimeX
	}

	if !tea.BoolValue(util.IsUnset(request.OSDTimeY)) {
		body["OSDTimeY"] = request.OSDTimeY
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		body["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.Vendor)) {
		body["Vendor"] = request.Vendor
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDevice"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDevice(request *ModifyDeviceRequest) (_result *ModifyDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDeviceResponse{}
	_body, _err := client.ModifyDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PeekNvrWithOptions(request *PeekNvrRequest, runtime *util.RuntimeOptions) (_result *PeekNvrResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		body["DeviceId"] = request.DeviceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("PeekNvr"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PeekNvrResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PeekNvr(request *PeekNvrRequest) (_result *PeekNvrResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PeekNvrResponse{}
	_body, _err := client.PeekNvrWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RaiseDevicesStorageWithOptions(request *RaiseDevicesStorageRequest, runtime *util.RuntimeOptions) (_result *RaiseDevicesStorageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Json)) {
		body["Json"] = request.Json
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RaiseDevicesStorage"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RaiseDevicesStorageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RaiseDevicesStorage(request *RaiseDevicesStorageRequest) (_result *RaiseDevicesStorageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RaiseDevicesStorageResponse{}
	_body, _err := client.RaiseDevicesStorageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RecognizeFaceQualityWithOptions(request *RecognizeFaceQualityRequest, runtime *util.RuntimeOptions) (_result *RecognizeFaceQualityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.PicContent)) {
		body["PicContent"] = request.PicContent
	}

	if !tea.BoolValue(util.IsUnset(request.PicFormat)) {
		body["PicFormat"] = request.PicFormat
	}

	if !tea.BoolValue(util.IsUnset(request.PicUrl)) {
		body["PicUrl"] = request.PicUrl
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RecognizeFaceQuality"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RecognizeFaceQualityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RecognizeFaceQuality(request *RecognizeFaceQualityRequest) (_result *RecognizeFaceQualityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RecognizeFaceQualityResponse{}
	_body, _err := client.RecognizeFaceQualityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RecognizeImageWithOptions(request *RecognizeImageRequest, runtime *util.RuntimeOptions) (_result *RecognizeImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.PicContent)) {
		body["PicContent"] = request.PicContent
	}

	if !tea.BoolValue(util.IsUnset(request.PicFormat)) {
		body["PicFormat"] = request.PicFormat
	}

	if !tea.BoolValue(util.IsUnset(request.PicUrl)) {
		body["PicUrl"] = request.PicUrl
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RecognizeImage"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RecognizeImageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RecognizeImage(request *RecognizeImageRequest) (_result *RecognizeImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RecognizeImageResponse{}
	_body, _err := client.RecognizeImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RegisterDeviceWithOptions(request *RegisterDeviceRequest, runtime *util.RuntimeOptions) (_result *RegisterDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		body["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceSn)) {
		body["DeviceSn"] = request.DeviceSn
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceTimeStamp)) {
		body["DeviceTimeStamp"] = request.DeviceTimeStamp
	}

	if !tea.BoolValue(util.IsUnset(request.ServerId)) {
		body["ServerId"] = request.ServerId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RegisterDevice"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RegisterDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RegisterDevice(request *RegisterDeviceRequest) (_result *RegisterDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RegisterDeviceResponse{}
	_body, _err := client.RegisterDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveCameraForInstanceWithOptions(tmpReq *RemoveCameraForInstanceRequest, runtime *util.RuntimeOptions) (_result *RemoveCameraForInstanceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RemoveCameraForInstanceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.CameraIds)) {
		request.CameraIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CameraIds, tea.String("CameraIds"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CameraIdsShrink)) {
		body["CameraIds"] = request.CameraIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveCameraForInstance"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveCameraForInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveCameraForInstance(request *RemoveCameraForInstanceRequest) (_result *RemoveCameraForInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveCameraForInstanceResponse{}
	_body, _err := client.RemoveCameraForInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveWatchItemsWithOptions(request *RemoveWatchItemsRequest, runtime *util.RuntimeOptions) (_result *RemoveWatchItemsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.WatchItemIds)) {
		body["WatchItemIds"] = request.WatchItemIds
	}

	if !tea.BoolValue(util.IsUnset(request.WatchPolicyId)) {
		body["WatchPolicyId"] = request.WatchPolicyId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveWatchItems"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveWatchItemsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveWatchItems(request *RemoveWatchItemsRequest) (_result *RemoveWatchItemsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveWatchItemsResponse{}
	_body, _err := client.RemoveWatchItemsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SaveVideoSummaryTaskVideoWithOptions(request *SaveVideoSummaryTaskVideoRequest, runtime *util.RuntimeOptions) (_result *SaveVideoSummaryTaskVideoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.SaveVideo)) {
		body["SaveVideo"] = request.SaveVideo
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveVideoSummaryTaskVideo"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveVideoSummaryTaskVideoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SaveVideoSummaryTaskVideo(request *SaveVideoSummaryTaskVideoRequest) (_result *SaveVideoSummaryTaskVideoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveVideoSummaryTaskVideoResponse{}
	_body, _err := client.SaveVideoSummaryTaskVideoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ScanSubDeviceWithOptions(request *ScanSubDeviceRequest, runtime *util.RuntimeOptions) (_result *ScanSubDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		body["DeviceId"] = request.DeviceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ScanSubDevice"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ScanSubDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ScanSubDevice(request *ScanSubDeviceRequest) (_result *ScanSubDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ScanSubDeviceResponse{}
	_body, _err := client.ScanSubDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SearchBodyWithOptions(tmpReq *SearchBodyRequest, runtime *util.RuntimeOptions) (_result *SearchBodyResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SearchBodyShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.OptionList)) {
		request.OptionListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.OptionList, tea.String("OptionList"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTimeStamp)) {
		body["EndTimeStamp"] = request.EndTimeStamp
	}

	if !tea.BoolValue(util.IsUnset(request.GbId)) {
		body["GbId"] = request.GbId
	}

	if !tea.BoolValue(util.IsUnset(request.OptionListShrink)) {
		body["OptionList"] = request.OptionListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		body["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTimeStamp)) {
		body["StartTimeStamp"] = request.StartTimeStamp
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchBody"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchBodyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SearchBody(request *SearchBodyRequest) (_result *SearchBodyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchBodyResponse{}
	_body, _err := client.SearchBodyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SearchFaceWithOptions(tmpReq *SearchFaceRequest, runtime *util.RuntimeOptions) (_result *SearchFaceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SearchFaceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.OptionList)) {
		request.OptionListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.OptionList, tea.String("OptionList"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTimeStamp)) {
		body["EndTimeStamp"] = request.EndTimeStamp
	}

	if !tea.BoolValue(util.IsUnset(request.GbId)) {
		body["GbId"] = request.GbId
	}

	if !tea.BoolValue(util.IsUnset(request.OptionListShrink)) {
		body["OptionList"] = request.OptionListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		body["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTimeStamp)) {
		body["StartTimeStamp"] = request.StartTimeStamp
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchFace"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchFaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SearchFace(request *SearchFaceRequest) (_result *SearchFaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchFaceResponse{}
	_body, _err := client.SearchFaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SearchObjectWithOptions(tmpReq *SearchObjectRequest, runtime *util.RuntimeOptions) (_result *SearchObjectResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SearchObjectShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Conditions)) {
		request.ConditionsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Conditions, tea.String("Conditions"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.DeviceList)) {
		request.DeviceListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DeviceList, tea.String("DeviceList"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ImagePath)) {
		request.ImagePathShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ImagePath, tea.String("ImagePath"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlgorithmType)) {
		body["AlgorithmType"] = request.AlgorithmType
	}

	if !tea.BoolValue(util.IsUnset(request.ConditionsShrink)) {
		body["Conditions"] = request.ConditionsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceListShrink)) {
		body["DeviceList"] = request.DeviceListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.ImagePathShrink)) {
		body["ImagePath"] = request.ImagePathShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ObjectType)) {
		body["ObjectType"] = request.ObjectType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PicUrl)) {
		body["PicUrl"] = request.PicUrl
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchObject"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchObjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SearchObject(request *SearchObjectRequest) (_result *SearchObjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchObjectResponse{}
	_body, _err := client.SearchObjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SearchTargetWithOptions(request *SearchTargetRequest, runtime *util.RuntimeOptions) (_result *SearchTargetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		body["BeginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceList)) {
		body["DeviceList"] = request.DeviceList
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.ModelId)) {
		body["ModelId"] = request.ModelId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		body["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SimilarityThreshold)) {
		body["SimilarityThreshold"] = request.SimilarityThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.TargetAttributes)) {
		body["TargetAttributes"] = request.TargetAttributes
	}

	if !tea.BoolValue(util.IsUnset(request.TargetImageData)) {
		body["TargetImageData"] = request.TargetImageData
	}

	if !tea.BoolValue(util.IsUnset(request.TargetImageUrl)) {
		body["TargetImageUrl"] = request.TargetImageUrl
	}

	if !tea.BoolValue(util.IsUnset(request.TargetType)) {
		body["TargetType"] = request.TargetType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchTarget"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchTargetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SearchTarget(request *SearchTargetRequest) (_result *SearchTargetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchTargetResponse{}
	_body, _err := client.SearchTargetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetAiotStorageInfoWithOptions(tmpReq *SetAiotStorageInfoRequest, runtime *util.RuntimeOptions) (_result *SetAiotStorageInfoResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SetAiotStorageInfoShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.EventAlarmMq))) {
		request.EventAlarmMqShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.EventAlarmMq), tea.String("EventAlarmMq"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.EventAlarmPictureStorage))) {
		request.EventAlarmPictureStorageShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.EventAlarmPictureStorage), tea.String("EventAlarmPictureStorage"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventAlarmMqShrink)) {
		body["EventAlarmMq"] = request.EventAlarmMqShrink
	}

	if !tea.BoolValue(util.IsUnset(request.EventAlarmPictureStorageShrink)) {
		body["EventAlarmPictureStorage"] = request.EventAlarmPictureStorageShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SetAiotStorageInfo"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetAiotStorageInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetAiotStorageInfo(request *SetAiotStorageInfoRequest) (_result *SetAiotStorageInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetAiotStorageInfoResponse{}
	_body, _err := client.SetAiotStorageInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetStreamModeWithOptions(request *SetStreamModeRequest, runtime *util.RuntimeOptions) (_result *SetStreamModeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceIdList)) {
		body["DeviceIdList"] = request.DeviceIdList
	}

	if !tea.BoolValue(util.IsUnset(request.StreamMode)) {
		body["StreamMode"] = request.StreamMode
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SetStreamMode"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetStreamModeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetStreamMode(request *SetStreamModeRequest) (_result *SetStreamModeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetStreamModeResponse{}
	_body, _err := client.SetStreamModeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartModelServiceWithOptions(request *StartModelServiceRequest, runtime *util.RuntimeOptions) (_result *StartModelServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ModelServiceId)) {
		body["ModelServiceId"] = request.ModelServiceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StartModelService"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartModelServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartModelService(request *StartModelServiceRequest) (_result *StartModelServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartModelServiceResponse{}
	_body, _err := client.StartModelServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartStreamsWithOptions(request *StartStreamsRequest, runtime *util.RuntimeOptions) (_result *StartStreamsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceIdList)) {
		body["DeviceIdList"] = request.DeviceIdList
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StartStreams"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartStreamsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartStreams(request *StartStreamsRequest) (_result *StartStreamsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartStreamsResponse{}
	_body, _err := client.StartStreamsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopModelServiceWithOptions(request *StopModelServiceRequest, runtime *util.RuntimeOptions) (_result *StopModelServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ModelServiceId)) {
		body["ModelServiceId"] = request.ModelServiceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StopModelService"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopModelServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopModelService(request *StopModelServiceRequest) (_result *StopModelServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopModelServiceResponse{}
	_body, _err := client.StopModelServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopMonitorWithOptions(request *StopMonitorRequest, runtime *util.RuntimeOptions) (_result *StopMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlgorithmVendor)) {
		body["AlgorithmVendor"] = request.AlgorithmVendor
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StopMonitor"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopMonitor(request *StopMonitorRequest) (_result *StopMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopMonitorResponse{}
	_body, _err := client.StopMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopStreamsWithOptions(request *StopStreamsRequest, runtime *util.RuntimeOptions) (_result *StopStreamsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceIdList)) {
		body["DeviceIdList"] = request.DeviceIdList
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StopStreams"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopStreamsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopStreams(request *StopStreamsRequest) (_result *StopStreamsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopStreamsResponse{}
	_body, _err := client.StopStreamsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SyncDeviceTimeWithOptions(request *SyncDeviceTimeRequest, runtime *util.RuntimeOptions) (_result *SyncDeviceTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceSn)) {
		body["DeviceSn"] = request.DeviceSn
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceTimeStamp)) {
		body["DeviceTimeStamp"] = request.DeviceTimeStamp
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SyncDeviceTime"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SyncDeviceTimeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SyncDeviceTime(request *SyncDeviceTimeRequest) (_result *SyncDeviceTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SyncDeviceTimeResponse{}
	_body, _err := client.SyncDeviceTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnbindCorpGroupWithOptions(request *UnbindCorpGroupRequest, runtime *util.RuntimeOptions) (_result *UnbindCorpGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpGroupId)) {
		body["CorpGroupId"] = request.CorpGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UnbindCorpGroup"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnbindCorpGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnbindCorpGroup(request *UnbindCorpGroupRequest) (_result *UnbindCorpGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindCorpGroupResponse{}
	_body, _err := client.UnbindCorpGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnbindDevicesWithOptions(request *UnbindDevicesRequest, runtime *util.RuntimeOptions) (_result *UnbindDevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		body["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.SubDeviceIdList)) {
		body["SubDeviceIdList"] = request.SubDeviceIdList
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UnbindDevices"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnbindDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnbindDevices(request *UnbindDevicesRequest) (_result *UnbindDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindDevicesResponse{}
	_body, _err := client.UnbindDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnbindPersonWithOptions(request *UnbindPersonRequest, runtime *util.RuntimeOptions) (_result *UnbindPersonResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.IsvSubId)) {
		body["IsvSubId"] = request.IsvSubId
	}

	if !tea.BoolValue(util.IsUnset(request.ProfileId)) {
		body["ProfileId"] = request.ProfileId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UnbindPerson"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnbindPersonResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnbindPerson(request *UnbindPersonRequest) (_result *UnbindPersonResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindPersonResponse{}
	_body, _err := client.UnbindPersonWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnbindUserWithOptions(request *UnbindUserRequest, runtime *util.RuntimeOptions) (_result *UnbindUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.IsvSubId)) {
		body["IsvSubId"] = request.IsvSubId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UnbindUser"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnbindUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnbindUser(request *UnbindUserRequest) (_result *UnbindUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindUserResponse{}
	_body, _err := client.UnbindUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateAiotDeviceWithOptions(tmpReq *UpdateAiotDeviceRequest, runtime *util.RuntimeOptions) (_result *UpdateAiotDeviceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateAiotDeviceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.AiotDevice))) {
		request.AiotDeviceShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.AiotDevice), tea.String("AiotDevice"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AiotDeviceShrink)) {
		body["AiotDevice"] = request.AiotDeviceShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAiotDevice"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAiotDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateAiotDevice(request *UpdateAiotDeviceRequest) (_result *UpdateAiotDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAiotDeviceResponse{}
	_body, _err := client.UpdateAiotDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateAiotPersonTableWithOptions(request *UpdateAiotPersonTableRequest, runtime *util.RuntimeOptions) (_result *UpdateAiotPersonTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	bodyFlat := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.PersonTable))) {
		bodyFlat["PersonTable"] = request.PersonTable
	}

	body = tea.ToMap(body,
		openapiutil.Query(bodyFlat))
	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAiotPersonTable"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAiotPersonTableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateAiotPersonTable(request *UpdateAiotPersonTableRequest) (_result *UpdateAiotPersonTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAiotPersonTableResponse{}
	_body, _err := client.UpdateAiotPersonTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateAiotPersonTableItemWithOptions(request *UpdateAiotPersonTableItemRequest, runtime *util.RuntimeOptions) (_result *UpdateAiotPersonTableItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.PersonTableId)) {
		body["PersonTableId"] = request.PersonTableId
	}

	bodyFlat := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.PersonTableItem))) {
		bodyFlat["PersonTableItem"] = request.PersonTableItem
	}

	body = tea.ToMap(body,
		openapiutil.Query(bodyFlat))
	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAiotPersonTableItem"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAiotPersonTableItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateAiotPersonTableItem(request *UpdateAiotPersonTableItemRequest) (_result *UpdateAiotPersonTableItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAiotPersonTableItemResponse{}
	_body, _err := client.UpdateAiotPersonTableItemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateAiotVehicleTableItemWithOptions(tmpReq *UpdateAiotVehicleTableItemRequest, runtime *util.RuntimeOptions) (_result *UpdateAiotVehicleTableItemResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateAiotVehicleTableItemShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.VehicleTableItem))) {
		request.VehicleTableItemShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.VehicleTableItem), tea.String("VehicleTableItem"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.VehicleTableId)) {
		body["VehicleTableId"] = request.VehicleTableId
	}

	if !tea.BoolValue(util.IsUnset(request.VehicleTableItemShrink)) {
		body["VehicleTableItem"] = request.VehicleTableItemShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAiotVehicleTableItem"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAiotVehicleTableItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateAiotVehicleTableItem(request *UpdateAiotVehicleTableItemRequest) (_result *UpdateAiotVehicleTableItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAiotVehicleTableItemResponse{}
	_body, _err := client.UpdateAiotVehicleTableItemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateCorpWithOptions(request *UpdateCorpRequest, runtime *util.RuntimeOptions) (_result *UpdateCorpResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		body["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.CorpName)) {
		body["CorpName"] = request.CorpName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.IconPath)) {
		body["IconPath"] = request.IconPath
	}

	if !tea.BoolValue(util.IsUnset(request.IsvSubId)) {
		body["IsvSubId"] = request.IsvSubId
	}

	if !tea.BoolValue(util.IsUnset(request.ParentCorpId)) {
		body["ParentCorpId"] = request.ParentCorpId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateCorp"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateCorpResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateCorp(request *UpdateCorpRequest) (_result *UpdateCorpResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateCorpResponse{}
	_body, _err := client.UpdateCorpWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateDataSourceWithOptions(request *UpdateDataSourceRequest, runtime *util.RuntimeOptions) (_result *UpdateDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		body["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceName)) {
		body["DataSourceName"] = request.DataSourceName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Url)) {
		body["Url"] = request.Url
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateDataSource"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateDataSourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateDataSource(request *UpdateDataSourceRequest) (_result *UpdateDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDataSourceResponse{}
	_body, _err := client.UpdateDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateDeviceWithOptions(request *UpdateDeviceRequest, runtime *util.RuntimeOptions) (_result *UpdateDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BitRate)) {
		body["BitRate"] = request.BitRate
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceAddress)) {
		body["DeviceAddress"] = request.DeviceAddress
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceDirection)) {
		body["DeviceDirection"] = request.DeviceDirection
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceName)) {
		body["DeviceName"] = request.DeviceName
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceResolution)) {
		body["DeviceResolution"] = request.DeviceResolution
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceSite)) {
		body["DeviceSite"] = request.DeviceSite
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceType)) {
		body["DeviceType"] = request.DeviceType
	}

	if !tea.BoolValue(util.IsUnset(request.GbId)) {
		body["GbId"] = request.GbId
	}

	if !tea.BoolValue(util.IsUnset(request.Vendor)) {
		body["Vendor"] = request.Vendor
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateDevice"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateDevice(request *UpdateDeviceRequest) (_result *UpdateDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDeviceResponse{}
	_body, _err := client.UpdateDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateDeviceCaptureStrategyWithOptions(request *UpdateDeviceCaptureStrategyRequest, runtime *util.RuntimeOptions) (_result *UpdateDeviceCaptureStrategyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceCode)) {
		body["DeviceCode"] = request.DeviceCode
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceType)) {
		body["DeviceType"] = request.DeviceType
	}

	if !tea.BoolValue(util.IsUnset(request.MondayCaptureStrategy)) {
		body["MondayCaptureStrategy"] = request.MondayCaptureStrategy
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateDeviceCaptureStrategy"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateDeviceCaptureStrategyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateDeviceCaptureStrategy(request *UpdateDeviceCaptureStrategyRequest) (_result *UpdateDeviceCaptureStrategyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDeviceCaptureStrategyResponse{}
	_body, _err := client.UpdateDeviceCaptureStrategyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateDevicesStorageWithOptions(tmpReq *UpdateDevicesStorageRequest, runtime *util.RuntimeOptions) (_result *UpdateDevicesStorageResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateDevicesStorageShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.UpdateStorageRequests)) {
		request.UpdateStorageRequestsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.UpdateStorageRequests, tea.String("UpdateStorageRequests"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.UpdateStorageRequestsShrink)) {
		body["UpdateStorageRequests"] = request.UpdateStorageRequestsShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateDevicesStorage"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateDevicesStorageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateDevicesStorage(request *UpdateDevicesStorageRequest) (_result *UpdateDevicesStorageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDevicesStorageResponse{}
	_body, _err := client.UpdateDevicesStorageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateDoubleVerificationGroupWithOptions(request *UpdateDoubleVerificationGroupRequest, runtime *util.RuntimeOptions) (_result *UpdateDoubleVerificationGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	bodyFlat := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.DoubleVerificationGroup))) {
		bodyFlat["DoubleVerificationGroup"] = request.DoubleVerificationGroup
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	body = tea.ToMap(body,
		openapiutil.Query(bodyFlat))
	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateDoubleVerificationGroup"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateDoubleVerificationGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateDoubleVerificationGroup(request *UpdateDoubleVerificationGroupRequest) (_result *UpdateDoubleVerificationGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDoubleVerificationGroupResponse{}
	_body, _err := client.UpdateDoubleVerificationGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateModelServiceWithOptions(request *UpdateModelServiceRequest, runtime *util.RuntimeOptions) (_result *UpdateModelServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		body["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.ModelServiceId)) {
		body["ModelServiceId"] = request.ModelServiceId
	}

	if !tea.BoolValue(util.IsUnset(request.ModelServiceName)) {
		body["ModelServiceName"] = request.ModelServiceName
	}

	if !tea.BoolValue(util.IsUnset(request.QpsRequired)) {
		body["QpsRequired"] = request.QpsRequired
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateModelService"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateModelServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateModelService(request *UpdateModelServiceRequest) (_result *UpdateModelServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateModelServiceResponse{}
	_body, _err := client.UpdateModelServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateMonitorWithOptions(request *UpdateMonitorRequest, runtime *util.RuntimeOptions) (_result *UpdateMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlgorithmVendor)) {
		body["AlgorithmVendor"] = request.AlgorithmVendor
	}

	if !tea.BoolValue(util.IsUnset(request.AttributeName)) {
		body["AttributeName"] = request.AttributeName
	}

	if !tea.BoolValue(util.IsUnset(request.AttributeOperateType)) {
		body["AttributeOperateType"] = request.AttributeOperateType
	}

	if !tea.BoolValue(util.IsUnset(request.AttributeValueList)) {
		body["AttributeValueList"] = request.AttributeValueList
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceList)) {
		body["DeviceList"] = request.DeviceList
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceOperateType)) {
		body["DeviceOperateType"] = request.DeviceOperateType
	}

	if !tea.BoolValue(util.IsUnset(request.NotifierAppSecret)) {
		body["NotifierAppSecret"] = request.NotifierAppSecret
	}

	if !tea.BoolValue(util.IsUnset(request.NotifierExtendValues)) {
		body["NotifierExtendValues"] = request.NotifierExtendValues
	}

	if !tea.BoolValue(util.IsUnset(request.NotifierTimeOut)) {
		body["NotifierTimeOut"] = request.NotifierTimeOut
	}

	if !tea.BoolValue(util.IsUnset(request.NotifierType)) {
		body["NotifierType"] = request.NotifierType
	}

	if !tea.BoolValue(util.IsUnset(request.NotifierUrl)) {
		body["NotifierUrl"] = request.NotifierUrl
	}

	if !tea.BoolValue(util.IsUnset(request.PicList)) {
		body["PicList"] = request.PicList
	}

	if !tea.BoolValue(util.IsUnset(request.PicOperateType)) {
		body["PicOperateType"] = request.PicOperateType
	}

	if !tea.BoolValue(util.IsUnset(request.RuleExpression)) {
		body["RuleExpression"] = request.RuleExpression
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		body["RuleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMonitor"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateMonitor(request *UpdateMonitorRequest) (_result *UpdateMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMonitorResponse{}
	_body, _err := client.UpdateMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateProfileWithOptions(request *UpdateProfileRequest, runtime *util.RuntimeOptions) (_result *UpdateProfileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		body["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.CatalogId)) {
		body["CatalogId"] = request.CatalogId
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.FaceUrl)) {
		body["FaceUrl"] = request.FaceUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Gender)) {
		body["Gender"] = request.Gender
	}

	if !tea.BoolValue(util.IsUnset(request.IdNumber)) {
		body["IdNumber"] = request.IdNumber
	}

	if !tea.BoolValue(util.IsUnset(request.IsvSubId)) {
		body["IsvSubId"] = request.IsvSubId
	}

	if !tea.BoolValue(util.IsUnset(request.LiveAddress)) {
		body["LiveAddress"] = request.LiveAddress
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNo)) {
		body["PhoneNo"] = request.PhoneNo
	}

	if !tea.BoolValue(util.IsUnset(request.PlateNo)) {
		body["PlateNo"] = request.PlateNo
	}

	if !tea.BoolValue(util.IsUnset(request.ProfileId)) {
		body["ProfileId"] = request.ProfileId
	}

	if !tea.BoolValue(util.IsUnset(request.SceneType)) {
		body["SceneType"] = request.SceneType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateProfile"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateProfileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateProfile(request *UpdateProfileRequest) (_result *UpdateProfileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateProfileResponse{}
	_body, _err := client.UpdateProfileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateProfileCatalogWithOptions(request *UpdateProfileCatalogRequest, runtime *util.RuntimeOptions) (_result *UpdateProfileCatalogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CatalogId)) {
		body["CatalogId"] = request.CatalogId
	}

	if !tea.BoolValue(util.IsUnset(request.CatalogName)) {
		body["CatalogName"] = request.CatalogName
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.IsvSubId)) {
		body["IsvSubId"] = request.IsvSubId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateProfileCatalog"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateProfileCatalogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateProfileCatalog(request *UpdateProfileCatalogRequest) (_result *UpdateProfileCatalogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateProfileCatalogResponse{}
	_body, _err := client.UpdateProfileCatalogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateUserWithOptions(request *UpdateUserRequest, runtime *util.RuntimeOptions) (_result *UpdateUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Address)) {
		body["Address"] = request.Address
	}

	if !tea.BoolValue(util.IsUnset(request.Age)) {
		body["Age"] = request.Age
	}

	if !tea.BoolValue(util.IsUnset(request.Attachment)) {
		body["Attachment"] = request.Attachment
	}

	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		body["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.FaceImageContent)) {
		body["FaceImageContent"] = request.FaceImageContent
	}

	if !tea.BoolValue(util.IsUnset(request.FaceImageUrl)) {
		body["FaceImageUrl"] = request.FaceImageUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Gender)) {
		body["Gender"] = request.Gender
	}

	if !tea.BoolValue(util.IsUnset(request.IdNumber)) {
		body["IdNumber"] = request.IdNumber
	}

	if !tea.BoolValue(util.IsUnset(request.IsvSubId)) {
		body["IsvSubId"] = request.IsvSubId
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNo)) {
		body["PhoneNo"] = request.PhoneNo
	}

	if !tea.BoolValue(util.IsUnset(request.PlateNo)) {
		body["PlateNo"] = request.PlateNo
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		body["UserGroupId"] = request.UserGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["UserId"] = request.UserId
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		body["UserName"] = request.UserName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateUser"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateUser(request *UpdateUserRequest) (_result *UpdateUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateUserResponse{}
	_body, _err := client.UpdateUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateUserGroupWithOptions(request *UpdateUserGroupRequest, runtime *util.RuntimeOptions) (_result *UpdateUserGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.IsvSubId)) {
		body["IsvSubId"] = request.IsvSubId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		body["UserGroupId"] = request.UserGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupName)) {
		body["UserGroupName"] = request.UserGroupName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateUserGroup"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateUserGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateUserGroup(request *UpdateUserGroupRequest) (_result *UpdateUserGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateUserGroupResponse{}
	_body, _err := client.UpdateUserGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateWatchPolicyWithOptions(request *UpdateWatchPolicyRequest, runtime *util.RuntimeOptions) (_result *UpdateWatchPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ItemMatchType)) {
		body["ItemMatchType"] = request.ItemMatchType
	}

	if !tea.BoolValue(util.IsUnset(request.SimilarityThreshold)) {
		body["SimilarityThreshold"] = request.SimilarityThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.TargetType)) {
		body["TargetType"] = request.TargetType
	}

	if !tea.BoolValue(util.IsUnset(request.WatchMode)) {
		body["WatchMode"] = request.WatchMode
	}

	if !tea.BoolValue(util.IsUnset(request.WatchPolicyId)) {
		body["WatchPolicyId"] = request.WatchPolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.WatchPolicyName)) {
		body["WatchPolicyName"] = request.WatchPolicyName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateWatchPolicy"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateWatchPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateWatchPolicy(request *UpdateWatchPolicyRequest) (_result *UpdateWatchPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateWatchPolicyResponse{}
	_body, _err := client.UpdateWatchPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateWatchTaskWithOptions(request *UpdateWatchTaskRequest, runtime *util.RuntimeOptions) (_result *UpdateWatchTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceList)) {
		body["DeviceList"] = request.DeviceList
	}

	if !tea.BoolValue(util.IsUnset(request.MessageReceiver)) {
		body["MessageReceiver"] = request.MessageReceiver
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleCycleDates)) {
		body["ScheduleCycleDates"] = request.ScheduleCycleDates
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleTimes)) {
		body["ScheduleTimes"] = request.ScheduleTimes
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleType)) {
		body["ScheduleType"] = request.ScheduleType
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		body["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.WatchPolicyIds)) {
		body["WatchPolicyIds"] = request.WatchPolicyIds
	}

	if !tea.BoolValue(util.IsUnset(request.WatchTaskId)) {
		body["WatchTaskId"] = request.WatchTaskId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateWatchTask"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateWatchTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateWatchTask(request *UpdateWatchTaskRequest) (_result *UpdateWatchTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateWatchTaskResponse{}
	_body, _err := client.UpdateWatchTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UploadFileWithOptions(request *UploadFileRequest, runtime *util.RuntimeOptions) (_result *UploadFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		body["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.FileAliasName)) {
		body["FileAliasName"] = request.FileAliasName
	}

	if !tea.BoolValue(util.IsUnset(request.FileContent)) {
		body["FileContent"] = request.FileContent
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		body["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.FilePath)) {
		body["FilePath"] = request.FilePath
	}

	if !tea.BoolValue(util.IsUnset(request.FileType)) {
		body["FileType"] = request.FileType
	}

	if !tea.BoolValue(util.IsUnset(request.MD5)) {
		body["MD5"] = request.MD5
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UploadFile"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UploadFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UploadFile(request *UploadFileRequest) (_result *UploadFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UploadFileResponse{}
	_body, _err := client.UploadFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UploadImageWithOptions(request *UploadImageRequest, runtime *util.RuntimeOptions) (_result *UploadImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ImageUrl)) {
		body["ImageUrl"] = request.ImageUrl
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UploadImage"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UploadImageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UploadImage(request *UploadImageRequest) (_result *UploadImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UploadImageResponse{}
	_body, _err := client.UploadImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) VerifyDeviceWithOptions(request *VerifyDeviceRequest, runtime *util.RuntimeOptions) (_result *VerifyDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceAddress)) {
		body["DeviceAddress"] = request.DeviceAddress
	}

	if !tea.BoolValue(util.IsUnset(request.FilePath)) {
		body["FilePath"] = request.FilePath
	}

	if !tea.BoolValue(util.IsUnset(request.NvrExisted)) {
		body["NvrExisted"] = request.NvrExisted
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("VerifyDevice"),
		Version:     tea.String("2020-05-15"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &VerifyDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) VerifyDevice(request *VerifyDeviceRequest) (_result *VerifyDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &VerifyDeviceResponse{}
	_body, _err := client.VerifyDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
