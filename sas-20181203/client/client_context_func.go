// This file is auto-generated, don't edit it. Thanks.
package client

import (
	"context"
	openapiutil "github.com/alibabacloud-go/darabonba-openapi/v2/utils"
	"github.com/alibabacloud-go/tea/dara"
)

// Summary:
//
// Select an operation for assets.
//
// @param request - AddAssetSelectionCriteriaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddAssetSelectionCriteriaResponse
func (client *Client) AddAssetSelectionCriteriaWithContext(ctx context.Context, request *AddAssetSelectionCriteriaRequest, runtime *dara.RuntimeOptions) (_result *AddAssetSelectionCriteriaResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Criteria) {
		query["Criteria"] = request.Criteria
	}

	if !dara.IsNil(request.CriteriaOperation) {
		query["CriteriaOperation"] = request.CriteriaOperation
	}

	if !dara.IsNil(request.SelectionKey) {
		query["SelectionKey"] = request.SelectionKey
	}

	if !dara.IsNil(request.TargetOperationList) {
		query["TargetOperationList"] = request.TargetOperationList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddAssetSelectionCriteria"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddAssetSelectionCriteriaResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a whitelist rule for a baseline check item.
//
// @param request - AddBaselineCheckWhiteRecordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddBaselineCheckWhiteRecordResponse
func (client *Client) AddBaselineCheckWhiteRecordWithContext(ctx context.Context, request *AddBaselineCheckWhiteRecordRequest, runtime *dara.RuntimeOptions) (_result *AddBaselineCheckWhiteRecordResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckId) {
		query["CheckId"] = request.CheckId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Reason) {
		query["Reason"] = request.Reason
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddBaselineCheckWhiteRecord"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddBaselineCheckWhiteRecordResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds instances on which risks are detected based on check items of the configuration assessment feature to a whitelist.
//
// @param request - AddCheckInstanceResultWhiteListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddCheckInstanceResultWhiteListResponse
func (client *Client) AddCheckInstanceResultWhiteListWithContext(ctx context.Context, request *AddCheckInstanceResultWhiteListRequest, runtime *dara.RuntimeOptions) (_result *AddCheckInstanceResultWhiteListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckGroupId) {
		query["CheckGroupId"] = request.CheckGroupId
	}

	if !dara.IsNil(request.CheckId) {
		query["CheckId"] = request.CheckId
	}

	if !dara.IsNil(request.InstanceIds) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !dara.IsNil(request.InstanceList) {
		query["InstanceList"] = request.InstanceList
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.RuleType) {
		query["RuleType"] = request.RuleType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddCheckInstanceResultWhiteList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddCheckInstanceResultWhiteListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds the check items of the configuration assessment feature to the whitelist.
//
// @param request - AddCheckResultWhiteListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddCheckResultWhiteListResponse
func (client *Client) AddCheckResultWhiteListWithContext(ctx context.Context, request *AddCheckResultWhiteListRequest, runtime *dara.RuntimeOptions) (_result *AddCheckResultWhiteListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckIds) {
		query["CheckIds"] = request.CheckIds
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.RuleType) {
		query["RuleType"] = request.RuleType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddCheckResultWhiteList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddCheckResultWhiteListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a custom defense rule.
//
// @param request - AddClientUserDefineRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddClientUserDefineRuleResponse
func (client *Client) AddClientUserDefineRuleWithContext(ctx context.Context, request *AddClientUserDefineRuleRequest, runtime *dara.RuntimeOptions) (_result *AddClientUserDefineRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ActionType) {
		query["ActionType"] = request.ActionType
	}

	if !dara.IsNil(request.Cmdline) {
		query["Cmdline"] = request.Cmdline
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.FilePath) {
		query["FilePath"] = request.FilePath
	}

	if !dara.IsNil(request.IP) {
		query["IP"] = request.IP
	}

	if !dara.IsNil(request.Md5List) {
		query["Md5List"] = request.Md5List
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.NewFilePath) {
		query["NewFilePath"] = request.NewFilePath
	}

	if !dara.IsNil(request.ParentCmdline) {
		query["ParentCmdline"] = request.ParentCmdline
	}

	if !dara.IsNil(request.ParentProcPath) {
		query["ParentProcPath"] = request.ParentProcPath
	}

	if !dara.IsNil(request.Platform) {
		query["Platform"] = request.Platform
	}

	if !dara.IsNil(request.Port) {
		query["Port"] = request.Port
	}

	if !dara.IsNil(request.PortStr) {
		query["PortStr"] = request.PortStr
	}

	if !dara.IsNil(request.ProcPath) {
		query["ProcPath"] = request.ProcPath
	}

	if !dara.IsNil(request.RegistryContent) {
		query["RegistryContent"] = request.RegistryContent
	}

	if !dara.IsNil(request.RegistryKey) {
		query["RegistryKey"] = request.RegistryKey
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddClientUserDefineRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddClientUserDefineRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds the configuration information of multi-cloud assets.
//
// @param request - AddCloudVendorAccountAKRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddCloudVendorAccountAKResponse
func (client *Client) AddCloudVendorAccountAKWithContext(ctx context.Context, request *AddCloudVendorAccountAKRequest, runtime *dara.RuntimeOptions) (_result *AddCloudVendorAccountAKResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AkType) {
		query["AkType"] = request.AkType
	}

	if !dara.IsNil(request.AuthModules) {
		query["AuthModules"] = request.AuthModules
	}

	if !dara.IsNil(request.CtdrCloudUserId) {
		query["CtdrCloudUserId"] = request.CtdrCloudUserId
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.ExtendInfo) {
		query["ExtendInfo"] = request.ExtendInfo
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Regions) {
		query["Regions"] = request.Regions
	}

	if !dara.IsNil(request.SecretId) {
		query["SecretId"] = request.SecretId
	}

	if !dara.IsNil(request.SecretKey) {
		query["SecretKey"] = request.SecretKey
	}

	if !dara.IsNil(request.SubscriptionIds) {
		query["SubscriptionIds"] = request.SubscriptionIds
	}

	if !dara.IsNil(request.TenantId) {
		query["TenantId"] = request.TenantId
	}

	if !dara.IsNil(request.Vendor) {
		query["Vendor"] = request.Vendor
	}

	if !dara.IsNil(request.VendorAuthAlias) {
		query["VendorAuthAlias"] = request.VendorAuthAlias
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddCloudVendorAccountAK"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddCloudVendorAccountAKResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds configurations of connecting the audit logs of a third-party cloud asset.
//
// @param request - AddCloudVendorTrialConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddCloudVendorTrialConfigResponse
func (client *Client) AddCloudVendorTrialConfigWithContext(ctx context.Context, request *AddCloudVendorTrialConfigRequest, runtime *dara.RuntimeOptions) (_result *AddCloudVendorTrialConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AuthId) {
		query["AuthId"] = request.AuthId
	}

	if !dara.IsNil(request.AuthInfo) {
		query["AuthInfo"] = request.AuthInfo
	}

	if !dara.IsNil(request.Vendor) {
		query["Vendor"] = request.Vendor
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddCloudVendorTrialConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddCloudVendorTrialConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a rule for non-image program defense.
//
// @param tmpReq - AddContainerDefenseRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddContainerDefenseRuleResponse
func (client *Client) AddContainerDefenseRuleWithContext(ctx context.Context, tmpReq *AddContainerDefenseRuleRequest, runtime *dara.RuntimeOptions) (_result *AddContainerDefenseRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &AddContainerDefenseRuleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.Whitelist) {
		request.WhitelistShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Whitelist, dara.String("Whitelist"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.Description) {
		query["Description"] = request.Description
	}

	if !dara.IsNil(request.RuleAction) {
		query["RuleAction"] = request.RuleAction
	}

	if !dara.IsNil(request.RuleId) {
		query["RuleId"] = request.RuleId
	}

	if !dara.IsNil(request.RuleName) {
		query["RuleName"] = request.RuleName
	}

	if !dara.IsNil(request.RuleSwitch) {
		query["RuleSwitch"] = request.RuleSwitch
	}

	if !dara.IsNil(request.RuleType) {
		query["RuleType"] = request.RuleType
	}

	if !dara.IsNil(request.Scope) {
		query["Scope"] = request.Scope
	}

	if !dara.IsNil(request.WhitelistShrink) {
		query["Whitelist"] = request.WhitelistShrink
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddContainerDefenseRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddContainerDefenseRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a defense rule against container escapes.
//
// @param request - AddContainerPluginRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddContainerPluginRuleResponse
func (client *Client) AddContainerPluginRuleWithContext(ctx context.Context, request *AddContainerPluginRuleRequest, runtime *dara.RuntimeOptions) (_result *AddContainerPluginRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Mode) {
		query["Mode"] = request.Mode
	}

	if !dara.IsNil(request.RuleName) {
		query["RuleName"] = request.RuleName
	}

	if !dara.IsNil(request.RuleTemplateId) {
		query["RuleTemplateId"] = request.RuleTemplateId
	}

	if !dara.IsNil(request.RuleType) {
		query["RuleType"] = request.RuleType
	}

	if !dara.IsNil(request.SelectedPolicy) {
		query["SelectedPolicy"] = request.SelectedPolicy
	}

	if !dara.IsNil(request.WhiteImages) {
		query["WhiteImages"] = request.WhiteImages
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddContainerPluginRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddContainerPluginRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an IDC probe to add assets in a data center to Security Center and manage the assets by using the Security Center console.
//
// Description:
//
// Security Center allows you to create an IDC probe only on servers on which the Security Center agent is installed.
//
// @param request - AddIdcProbeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddIdcProbeResponse
func (client *Client) AddIdcProbeWithContext(ctx context.Context, request *AddIdcProbeRequest, runtime *dara.RuntimeOptions) (_result *AddIdcProbeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.IdcName) {
		query["IdcName"] = request.IdcName
	}

	if !dara.IsNil(request.IdcRegion) {
		query["IdcRegion"] = request.IdcRegion
	}

	if !dara.IsNil(request.IntervalPeriod) {
		query["IntervalPeriod"] = request.IntervalPeriod
	}

	if !dara.IsNil(request.IpSegments) {
		query["IpSegments"] = request.IpSegments
	}

	if !dara.IsNil(request.LinuxPort) {
		query["LinuxPort"] = request.LinuxPort
	}

	if !dara.IsNil(request.PeriodUnit) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	if !dara.IsNil(request.WinPort) {
		query["WinPort"] = request.WinPort
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddIdcProbe"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddIdcProbeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an alert handling rule.
//
// @param request - AddImageEventOperationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddImageEventOperationResponse
func (client *Client) AddImageEventOperationWithContext(ctx context.Context, request *AddImageEventOperationRequest, runtime *dara.RuntimeOptions) (_result *AddImageEventOperationResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Conditions) {
		query["Conditions"] = request.Conditions
	}

	if !dara.IsNil(request.EventKey) {
		query["EventKey"] = request.EventKey
	}

	if !dara.IsNil(request.EventName) {
		query["EventName"] = request.EventName
	}

	if !dara.IsNil(request.EventType) {
		query["EventType"] = request.EventType
	}

	if !dara.IsNil(request.Note) {
		query["Note"] = request.Note
	}

	if !dara.IsNil(request.OperationCode) {
		query["OperationCode"] = request.OperationCode
	}

	if !dara.IsNil(request.Scenarios) {
		query["Scenarios"] = request.Scenarios
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddImageEventOperation"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddImageEventOperationResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds image vulnerabilities to the whitelist.
//
// @param request - AddImageVulWhiteListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddImageVulWhiteListResponse
func (client *Client) AddImageVulWhiteListWithContext(ctx context.Context, request *AddImageVulWhiteListRequest, runtime *dara.RuntimeOptions) (_result *AddImageVulWhiteListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Reason) {
		query["Reason"] = request.Reason
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	if !dara.IsNil(request.Target) {
		query["Target"] = request.Target
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	if !dara.IsNil(request.Whitelist) {
		query["Whitelist"] = request.Whitelist
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddImageVulWhiteList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddImageVulWhiteListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a command that is used to install the Security Center agent.
//
// @param request - AddInstallCodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddInstallCodeResponse
func (client *Client) AddInstallCodeWithContext(ctx context.Context, request *AddInstallCodeRequest, runtime *dara.RuntimeOptions) (_result *AddInstallCodeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ExpiredDate) {
		query["ExpiredDate"] = request.ExpiredDate
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.OnlyImage) {
		query["OnlyImage"] = request.OnlyImage
	}

	if !dara.IsNil(request.Os) {
		query["Os"] = request.Os
	}

	if !dara.IsNil(request.PrivateLinkId) {
		query["PrivateLinkId"] = request.PrivateLinkId
	}

	if !dara.IsNil(request.ProxyCluster) {
		query["ProxyCluster"] = request.ProxyCluster
	}

	if !dara.IsNil(request.VendorName) {
		query["VendorName"] = request.VendorName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddInstallCode"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddInstallCodeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a self-managed image repository.
//
// @param request - AddPrivateRegistryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddPrivateRegistryResponse
func (client *Client) AddPrivateRegistryWithContext(ctx context.Context, request *AddPrivateRegistryRequest, runtime *dara.RuntimeOptions) (_result *AddPrivateRegistryResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.ExtraParam) {
		query["ExtraParam"] = request.ExtraParam
	}

	if !dara.IsNil(request.NetType) {
		query["NetType"] = request.NetType
	}

	if !dara.IsNil(request.Password) {
		query["Password"] = request.Password
	}

	if !dara.IsNil(request.Port) {
		query["Port"] = request.Port
	}

	if !dara.IsNil(request.ProtocolType) {
		query["ProtocolType"] = request.ProtocolType
	}

	if !dara.IsNil(request.RegistryHostIp) {
		query["RegistryHostIp"] = request.RegistryHostIp
	}

	if !dara.IsNil(request.RegistryRegionId) {
		query["RegistryRegionId"] = request.RegistryRegionId
	}

	if !dara.IsNil(request.RegistryType) {
		query["RegistryType"] = request.RegistryType
	}

	if !dara.IsNil(request.RegistryVersion) {
		query["RegistryVersion"] = request.RegistryVersion
	}

	if !dara.IsNil(request.TransPerHour) {
		query["TransPerHour"] = request.TransPerHour
	}

	if !dara.IsNil(request.UserName) {
		query["UserName"] = request.UserName
	}

	if !dara.IsNil(request.VpcId) {
		query["VpcId"] = request.VpcId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddPrivateRegistry"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddPrivateRegistryResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Add or update the whitelist for VPC purchases
//
// @param request - AddProtectVpcListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddProtectVpcListResponse
func (client *Client) AddProtectVpcListWithContext(ctx context.Context, request *AddProtectVpcListRequest, runtime *dara.RuntimeOptions) (_result *AddProtectVpcListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AddVpcInstanceIdList) {
		query["AddVpcInstanceIdList"] = request.AddVpcInstanceIdList
	}

	if !dara.IsNil(request.DelVpcInstanceIdList) {
		query["DelVpcInstanceIdList"] = request.DelVpcInstanceIdList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddProtectVpcList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddProtectVpcListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Upgrades the Security Center agent in batches.
//
// @param request - AddPublishBatchRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddPublishBatchResponse
func (client *Client) AddPublishBatchWithContext(ctx context.Context, request *AddPublishBatchRequest, runtime *dara.RuntimeOptions) (_result *AddPublishBatchResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BatchName) {
		query["BatchName"] = request.BatchName
	}

	if !dara.IsNil(request.Interval) {
		query["Interval"] = request.Interval
	}

	if !dara.IsNil(request.OperationBase) {
		query["OperationBase"] = request.OperationBase
	}

	if !dara.IsNil(request.UpgradeVersion) {
		query["UpgradeVersion"] = request.UpgradeVersion
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddPublishBatch"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddPublishBatchResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a rule for container tamper-proofing.
//
// @param request - AddSasContainerWebDefenseRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddSasContainerWebDefenseRuleResponse
func (client *Client) AddSasContainerWebDefenseRuleWithContext(ctx context.Context, request *AddSasContainerWebDefenseRuleRequest, runtime *dara.RuntimeOptions) (_result *AddSasContainerWebDefenseRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.PathConfDTOList) {
		query["PathConfDTOList"] = request.PathConfDTOList
	}

	if !dara.IsNil(request.RuleName) {
		query["RuleName"] = request.RuleName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddSasContainerWebDefenseRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddSasContainerWebDefenseRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables the trial use of Security Center value-added features, including vulnerability fixing and threat analysis and response.
//
// @param request - AddSasModuleTrialRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddSasModuleTrialResponse
func (client *Client) AddSasModuleTrialWithContext(ctx context.Context, request *AddSasModuleTrialRequest, runtime *dara.RuntimeOptions) (_result *AddSasModuleTrialResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.ModuleCode) {
		query["ModuleCode"] = request.ModuleCode
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddSasModuleTrial"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddSasModuleTrialResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a tag to assets.
//
// Description:
//
// Security Center provides asset importance tags and custom tags. You can call the AddTagWithUuid operation to add only a custom tag to assets.
//
// @param request - AddTagWithUuidRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddTagWithUuidResponse
func (client *Client) AddTagWithUuidWithContext(ctx context.Context, request *AddTagWithUuidRequest, runtime *dara.RuntimeOptions) (_result *AddTagWithUuidResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.TagName) {
		query["TagName"] = request.TagName
	}

	if !dara.IsNil(request.UuidList) {
		query["UuidList"] = request.UuidList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddTagWithUuid"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddTagWithUuidResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds servers from which you want to uninstall the Security Center agent.
//
// @param request - AddUninstallClientsByUuidsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddUninstallClientsByUuidsResponse
func (client *Client) AddUninstallClientsByUuidsWithContext(ctx context.Context, request *AddUninstallClientsByUuidsRequest, runtime *dara.RuntimeOptions) (_result *AddUninstallClientsByUuidsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CallMethod) {
		query["CallMethod"] = request.CallMethod
	}

	if !dara.IsNil(request.Feedback) {
		query["Feedback"] = request.Feedback
	}

	if !dara.IsNil(request.Region) {
		query["Region"] = request.Region
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddUninstallClientsByUuids"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddUninstallClientsByUuidsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a honeypot.
//
// @param request - AddVpcHoneyPotRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddVpcHoneyPotResponse
func (client *Client) AddVpcHoneyPotWithContext(ctx context.Context, request *AddVpcHoneyPotRequest, runtime *dara.RuntimeOptions) (_result *AddVpcHoneyPotResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.VpcId) {
		query["VpcId"] = request.VpcId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddVpcHoneyPot"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddVpcHoneyPotResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configurations of an advanced whitelist rule.
//
// @param request - AdvanceSecurityEventOperationsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AdvanceSecurityEventOperationsResponse
func (client *Client) AdvanceSecurityEventOperationsWithContext(ctx context.Context, request *AdvanceSecurityEventOperationsRequest, runtime *dara.RuntimeOptions) (_result *AdvanceSecurityEventOperationsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.EventName) {
		query["EventName"] = request.EventName
	}

	if !dara.IsNil(request.EventType) {
		query["EventType"] = request.EventType
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.RuleId) {
		query["RuleId"] = request.RuleId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AdvanceSecurityEventOperations"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AdvanceSecurityEventOperationsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds alert description in batches.
//
// @param request - BatchCreateMaliciousNoteRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchCreateMaliciousNoteResponse
func (client *Client) BatchCreateMaliciousNoteWithContext(ctx context.Context, request *BatchCreateMaliciousNoteRequest, runtime *dara.RuntimeOptions) (_result *BatchCreateMaliciousNoteResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ImageMaliciousFileList) {
		query["ImageMaliciousFileList"] = request.ImageMaliciousFileList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("BatchCreateMaliciousNote"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &BatchCreateMaliciousNoteResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes whitelist rules for alerts generated for sensitive files that are detected by using the agentless detection feature in batches.
//
// @param request - BatchDeleteMaliciousFileWhitelistConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchDeleteMaliciousFileWhitelistConfigResponse
func (client *Client) BatchDeleteMaliciousFileWhitelistConfigWithContext(ctx context.Context, request *BatchDeleteMaliciousFileWhitelistConfigRequest, runtime *dara.RuntimeOptions) (_result *BatchDeleteMaliciousFileWhitelistConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ConfigIdList) {
		query["ConfigIdList"] = request.ConfigIdList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("BatchDeleteMaliciousFileWhitelistConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &BatchDeleteMaliciousFileWhitelistConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables or disables multiple features in proactive defense at a time.
//
// @param request - BatchOperateCommonOverallConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchOperateCommonOverallConfigResponse
func (client *Client) BatchOperateCommonOverallConfigWithContext(ctx context.Context, request *BatchOperateCommonOverallConfigRequest, runtime *dara.RuntimeOptions) (_result *BatchOperateCommonOverallConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Config) {
		query["Config"] = request.Config
	}

	if !dara.IsNil(request.TypeList) {
		query["TypeList"] = request.TypeList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("BatchOperateCommonOverallConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &BatchOperateCommonOverallConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies multiple alert whitelist rules of sensitive files that are detected by using the agentless detection feature at a time.
//
// @param request - BatchUpdateMaliciousFileWhitelistConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchUpdateMaliciousFileWhitelistConfigResponse
func (client *Client) BatchUpdateMaliciousFileWhitelistConfigWithContext(ctx context.Context, request *BatchUpdateMaliciousFileWhitelistConfigRequest, runtime *dara.RuntimeOptions) (_result *BatchUpdateMaliciousFileWhitelistConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ConfigList) {
		query["ConfigList"] = request.ConfigList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("BatchUpdateMaliciousFileWhitelistConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &BatchUpdateMaliciousFileWhitelistConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Binds servers to Security Center or unbinds servers from Security Center.
//
// @param request - BindAuthToMachineRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BindAuthToMachineResponse
func (client *Client) BindAuthToMachineWithContext(ctx context.Context, request *BindAuthToMachineRequest, runtime *dara.RuntimeOptions) (_result *BindAuthToMachineResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AuthVersion) {
		query["AuthVersion"] = request.AuthVersion
	}

	if !dara.IsNil(request.AutoBind) {
		query["AutoBind"] = request.AutoBind
	}

	if !dara.IsNil(request.Bind) {
		query["Bind"] = request.Bind
	}

	if !dara.IsNil(request.BindAll) {
		query["BindAll"] = request.BindAll
	}

	if !dara.IsNil(request.Criteria) {
		query["Criteria"] = request.Criteria
	}

	if !dara.IsNil(request.IsPreBind) {
		query["IsPreBind"] = request.IsPreBind
	}

	if !dara.IsNil(request.LogicalExp) {
		query["LogicalExp"] = request.LogicalExp
	}

	if !dara.IsNil(request.NtmVersion) {
		query["NtmVersion"] = request.NtmVersion
	}

	if !dara.IsNil(request.PreBindOrderId) {
		query["PreBindOrderId"] = request.PreBindOrderId
	}

	if !dara.IsNil(request.UnBind) {
		query["UnBind"] = request.UnBind
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("BindAuthToMachine"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &BindAuthToMachineResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds servers to Security Center over a proxy server. After you create a proxy cluster and deploy a proxy server, you can connect a server to the proxy cluster as a client. This way, the server is added to Security Center over the proxy server and is protected.
//
// @param request - BindHybridProxyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BindHybridProxyResponse
func (client *Client) BindHybridProxyWithContext(ctx context.Context, request *BindHybridProxyRequest, runtime *dara.RuntimeOptions) (_result *BindHybridProxyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterName) {
		query["ClusterName"] = request.ClusterName
	}

	if !dara.IsNil(request.YundunUuids) {
		query["YundunUuids"] = request.YundunUuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("BindHybridProxy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &BindHybridProxyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Cancels the main task.
//
// @param request - CancelOnceTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CancelOnceTaskResponse
func (client *Client) CancelOnceTaskWithContext(ctx context.Context, request *CancelOnceTaskRequest, runtime *dara.RuntimeOptions) (_result *CancelOnceTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CancelOnceTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CancelOnceTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the interval of asset synchronization configurations.
//
// @param request - ChangeAssetRefreshTaskConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ChangeAssetRefreshTaskConfigResponse
func (client *Client) ChangeAssetRefreshTaskConfigWithContext(ctx context.Context, request *ChangeAssetRefreshTaskConfigRequest, runtime *dara.RuntimeOptions) (_result *ChangeAssetRefreshTaskConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AssetRefreshConfigs) {
		query["AssetRefreshConfigs"] = request.AssetRefreshConfigs
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ChangeAssetRefreshTaskConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ChangeAssetRefreshTaskConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the configuration items of the configuration assessment feature.
//
// @param tmpReq - ChangeCheckConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ChangeCheckConfigResponse
func (client *Client) ChangeCheckConfigWithContext(ctx context.Context, tmpReq *ChangeCheckConfigRequest, runtime *dara.RuntimeOptions) (_result *ChangeCheckConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &ChangeCheckConfigShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.ConfigRequirementIds) {
		request.ConfigRequirementIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ConfigRequirementIds, dara.String("ConfigRequirementIds"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.ConfigStandardIds) {
		request.ConfigStandardIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ConfigStandardIds, dara.String("ConfigStandardIds"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.AddedCheck) {
		query["AddedCheck"] = request.AddedCheck
	}

	if !dara.IsNil(request.ConfigRequirementIdsShrink) {
		query["ConfigRequirementIds"] = request.ConfigRequirementIdsShrink
	}

	if !dara.IsNil(request.ConfigStandardIdsShrink) {
		query["ConfigStandardIds"] = request.ConfigStandardIdsShrink
	}

	if !dara.IsNil(request.Configure) {
		query["Configure"] = request.Configure
	}

	if !dara.IsNil(request.CycleDays) {
		query["CycleDays"] = request.CycleDays
	}

	if !dara.IsNil(request.EnableAddCheck) {
		query["EnableAddCheck"] = request.EnableAddCheck
	}

	if !dara.IsNil(request.EnableAutoCheck) {
		query["EnableAutoCheck"] = request.EnableAutoCheck
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.RemovedCheck) {
		query["RemovedCheck"] = request.RemovedCheck
	}

	if !dara.IsNil(request.StandardIds) {
		query["StandardIds"] = request.StandardIds
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.SystemConfig) {
		query["SystemConfig"] = request.SystemConfig
	}

	if !dara.IsNil(request.Vendors) {
		query["Vendors"] = request.Vendors
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ChangeCheckConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ChangeCheckConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the custom configuration items of a check item.
//
// @param request - ChangeCheckCustomConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ChangeCheckCustomConfigResponse
func (client *Client) ChangeCheckCustomConfigWithContext(ctx context.Context, request *ChangeCheckCustomConfigRequest, runtime *dara.RuntimeOptions) (_result *ChangeCheckCustomConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckId) {
		query["CheckId"] = request.CheckId
	}

	if !dara.IsNil(request.CustomConfigs) {
		query["CustomConfigs"] = request.CustomConfigs
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.RepairConfigs) {
		query["RepairConfigs"] = request.RepairConfigs
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ChangeCheckCustomConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ChangeCheckCustomConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the details of the deduction modules of the security score feature, including custom settings.
//
// @param request - ChangeSecurityScoreRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ChangeSecurityScoreRuleResponse
func (client *Client) ChangeSecurityScoreRuleWithContext(ctx context.Context, request *ChangeSecurityScoreRuleRequest, runtime *dara.RuntimeOptions) (_result *ChangeSecurityScoreRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CalType) {
		query["CalType"] = request.CalType
	}

	if !dara.IsNil(request.ResetSecurityScoreRule) {
		query["ResetSecurityScoreRule"] = request.ResetSecurityScoreRule
	}

	if !dara.IsNil(request.SecurityScoreCategoryList) {
		query["SecurityScoreCategoryList"] = request.SecurityScoreCategoryList
	}

	if !dara.IsNil(request.SecurityScoreRuleList) {
		query["SecurityScoreRuleList"] = request.SecurityScoreRuleList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ChangeSecurityScoreRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ChangeSecurityScoreRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the language settings of log analysis. The modification on the language settings takes effect within 12 hours and affects only the language of the descriptions for security events in security logs.
//
// @param request - ChangeUserLangRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ChangeUserLangResponse
func (client *Client) ChangeUserLangWithContext(ctx context.Context, request *ChangeUserLangRequest, runtime *dara.RuntimeOptions) (_result *ChangeUserLangResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.UserLang) {
		query["UserLang"] = request.UserLang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ChangeUserLang"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ChangeUserLangResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Checks whether one or more alert events are generated on a specified server based on the IDs of the alert events.
//
// @param request - CheckSecurityEventIdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CheckSecurityEventIdResponse
func (client *Client) CheckSecurityEventIdWithContext(ctx context.Context, request *CheckSecurityEventIdRequest, runtime *dara.RuntimeOptions) (_result *CheckSecurityEventIdResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SecurityEventIds) {
		query["SecurityEventIds"] = request.SecurityEventIds
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CheckSecurityEventId"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CheckSecurityEventIdResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Checks whether the remaining quota of the vulnerability fixing feature is sufficient for a free trial user of Security Center and queries the quota usage required for the current fix operation.
//
// Description:
//
// You can call this operation to check whether the remaining quota of the vulnerability fixing feature is sufficient in free trial scenarios. This operation does not trigger vulnerability fixing.
//
// @param request - CheckTrialFixCountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CheckTrialFixCountResponse
func (client *Client) CheckTrialFixCountWithContext(ctx context.Context, request *CheckTrialFixCountRequest, runtime *dara.RuntimeOptions) (_result *CheckTrialFixCountResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Info) {
		query["Info"] = request.Info
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	if !dara.IsNil(request.VulNames) {
		query["VulNames"] = request.VulNames
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CheckTrialFixCount"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CheckTrialFixCountResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Checks whether Elastic Compute Service (ECS) instances exist.
//
// @param request - CheckUserHasEcsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CheckUserHasEcsResponse
func (client *Client) CheckUserHasEcsWithContext(ctx context.Context, request *CheckUserHasEcsRequest, runtime *dara.RuntimeOptions) (_result *CheckUserHasEcsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CheckUserHasEcs"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CheckUserHasEcsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Confirms the alert events that you want to handle.
//
// @param request - ConfirmVirusEventsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ConfirmVirusEventsResponse
func (client *Client) ConfirmVirusEventsWithContext(ctx context.Context, request *ConfirmVirusEventsRequest, runtime *dara.RuntimeOptions) (_result *ConfirmVirusEventsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OperationAll) {
		query["OperationAll"] = request.OperationAll
	}

	if !dara.IsNil(request.OperationCode) {
		query["OperationCode"] = request.OperationCode
	}

	if !dara.IsNil(request.OperationRange) {
		query["OperationRange"] = request.OperationRange
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ConfirmVirusEvents"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ConfirmVirusEventsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Clones an existing security report. The new security report has the same configuration as the existing security report.
//
// @param request - CopyCustomizeReportConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CopyCustomizeReportConfigResponse
func (client *Client) CopyCustomizeReportConfigWithContext(ctx context.Context, request *CopyCustomizeReportConfigRequest, runtime *dara.RuntimeOptions) (_result *CopyCustomizeReportConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.ReportId) {
		query["ReportId"] = request.ReportId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CopyCustomizeReportConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CopyCustomizeReportConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an agentless detection task.
//
// @param request - CreateAgentlessScanTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAgentlessScanTaskResponse
func (client *Client) CreateAgentlessScanTaskWithContext(ctx context.Context, request *CreateAgentlessScanTaskRequest, runtime *dara.RuntimeOptions) (_result *CreateAgentlessScanTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AssetSelectionType) {
		query["AssetSelectionType"] = request.AssetSelectionType
	}

	if !dara.IsNil(request.AutoDeleteDays) {
		query["AutoDeleteDays"] = request.AutoDeleteDays
	}

	if !dara.IsNil(request.ReleaseAfterScan) {
		query["ReleaseAfterScan"] = request.ReleaseAfterScan
	}

	if !dara.IsNil(request.ScanDataDisk) {
		query["ScanDataDisk"] = request.ScanDataDisk
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	if !dara.IsNil(request.UuidList) {
		query["UuidList"] = request.UuidList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateAgentlessScanTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateAgentlessScanTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a defense rule against brute-force attacks.
//
// @param tmpReq - CreateAntiBruteForceRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAntiBruteForceRuleResponse
func (client *Client) CreateAntiBruteForceRuleWithContext(ctx context.Context, tmpReq *CreateAntiBruteForceRuleRequest, runtime *dara.RuntimeOptions) (_result *CreateAntiBruteForceRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &CreateAntiBruteForceRuleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.ProtocolType) {
		request.ProtocolTypeShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ProtocolType, dara.String("ProtocolType"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.DefaultRule) {
		query["DefaultRule"] = request.DefaultRule
	}

	if !dara.IsNil(request.FailCount) {
		query["FailCount"] = request.FailCount
	}

	if !dara.IsNil(request.ForbiddenTime) {
		query["ForbiddenTime"] = request.ForbiddenTime
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.ProtocolTypeShrink) {
		query["ProtocolType"] = request.ProtocolTypeShrink
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Span) {
		query["Span"] = request.Span
	}

	if !dara.IsNil(request.UuidList) {
		query["UuidList"] = request.UuidList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateAntiBruteForceRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateAntiBruteForceRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Create asset selection configurations.
//
// @param request - CreateAssetSelectionConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAssetSelectionConfigResponse
func (client *Client) CreateAssetSelectionConfigWithContext(ctx context.Context, request *CreateAssetSelectionConfigRequest, runtime *dara.RuntimeOptions) (_result *CreateAssetSelectionConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BusinessType) {
		query["BusinessType"] = request.BusinessType
	}

	if !dara.IsNil(request.Platform) {
		query["Platform"] = request.Platform
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateAssetSelectionConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateAssetSelectionConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Create attack path sensitive asset configuration.
//
// @param request - CreateAttackPathSensitiveAssetConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAttackPathSensitiveAssetConfigResponse
func (client *Client) CreateAttackPathSensitiveAssetConfigWithContext(ctx context.Context, request *CreateAttackPathSensitiveAssetConfigRequest, runtime *dara.RuntimeOptions) (_result *CreateAttackPathSensitiveAssetConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AttackPathAssetList) {
		query["AttackPathAssetList"] = request.AttackPathAssetList
	}

	if !dara.IsNil(request.ConfigType) {
		query["ConfigType"] = request.ConfigType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateAttackPathSensitiveAssetConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateAttackPathSensitiveAssetConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Create Attack Path Whitelist.
//
// @param request - CreateAttackPathWhitelistRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAttackPathWhitelistResponse
func (client *Client) CreateAttackPathWhitelistWithContext(ctx context.Context, request *CreateAttackPathWhitelistRequest, runtime *dara.RuntimeOptions) (_result *CreateAttackPathWhitelistResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AttackPathAssetList) {
		query["AttackPathAssetList"] = request.AttackPathAssetList
	}

	if !dara.IsNil(request.PathName) {
		query["PathName"] = request.PathName
	}

	if !dara.IsNil(request.PathType) {
		query["PathType"] = request.PathType
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.WhitelistName) {
		query["WhitelistName"] = request.WhitelistName
	}

	if !dara.IsNil(request.WhitelistType) {
		query["WhitelistType"] = request.WhitelistType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateAttackPathWhitelist"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateAttackPathWhitelistResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a witness.
//
// @param request - CreateAttestorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAttestorResponse
func (client *Client) CreateAttestorWithContext(ctx context.Context, request *CreateAttestorRequest, runtime *dara.RuntimeOptions) (_result *CreateAttestorResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.KeyId) {
		query["KeyId"] = request.KeyId
	}

	if !dara.IsNil(request.KeyRegionId) {
		query["KeyRegionId"] = request.KeyRegionId
	}

	if !dara.IsNil(request.KeyVersionId) {
		query["KeyVersionId"] = request.KeyVersionId
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateAttestor"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateAttestorResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an anti-ransomware policy for servers.
//
// @param tmpReq - CreateBackupPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateBackupPolicyResponse
func (client *Client) CreateBackupPolicyWithContext(ctx context.Context, tmpReq *CreateBackupPolicyRequest, runtime *dara.RuntimeOptions) (_result *CreateBackupPolicyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &CreateBackupPolicyShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.Policy) {
		request.PolicyShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Policy, dara.String("Policy"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.PolicyShrink) {
		query["Policy"] = request.PolicyShrink
	}

	if !dara.IsNil(request.PolicyRegionId) {
		query["PolicyRegionId"] = request.PolicyRegionId
	}

	if !dara.IsNil(request.PolicyVersion) {
		query["PolicyVersion"] = request.PolicyVersion
	}

	if !dara.IsNil(request.UuidList) {
		query["UuidList"] = request.UuidList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateBackupPolicy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateBackupPolicyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the parameters that are required to upload a file for detection.
//
// @param request - CreateBatchUploadUrlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateBatchUploadUrlResponse
func (client *Client) CreateBatchUploadUrlWithContext(ctx context.Context, request *CreateBatchUploadUrlRequest, runtime *dara.RuntimeOptions) (_result *CreateBatchUploadUrlResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Md5List) {
		query["Md5List"] = request.Md5List
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateBatchUploadUrl"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateBatchUploadUrlResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a binary security policy.
//
// @param request - CreateBinarySecurityPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateBinarySecurityPolicyResponse
func (client *Client) CreateBinarySecurityPolicyWithContext(ctx context.Context, request *CreateBinarySecurityPolicyRequest, runtime *dara.RuntimeOptions) (_result *CreateBinarySecurityPolicyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Clusters) {
		query["Clusters"] = request.Clusters
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.Policy) {
		query["Policy"] = request.Policy
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateBinarySecurityPolicy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateBinarySecurityPolicyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a container scan task.
//
// @param request - CreateContainerScanTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateContainerScanTaskResponse
func (client *Client) CreateContainerScanTaskWithContext(ctx context.Context, request *CreateContainerScanTaskRequest, runtime *dara.RuntimeOptions) (_result *CreateContainerScanTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.ContainerIds) {
		query["ContainerIds"] = request.ContainerIds
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateContainerScanTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateContainerScanTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a scan task for a running container application based on the application name.
//
// @param request - CreateContainerScanTaskByAppNameRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateContainerScanTaskByAppNameResponse
func (client *Client) CreateContainerScanTaskByAppNameWithContext(ctx context.Context, request *CreateContainerScanTaskByAppNameRequest, runtime *dara.RuntimeOptions) (_result *CreateContainerScanTaskByAppNameResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppNames) {
		query["AppNames"] = request.AppNames
	}

	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateContainerScanTaskByAppName"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateContainerScanTaskByAppNameResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an IP address blocking policy for one or more servers.
//
// @param request - CreateCustomBlockRecordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCustomBlockRecordResponse
func (client *Client) CreateCustomBlockRecordWithContext(ctx context.Context, request *CreateCustomBlockRecordRequest, runtime *dara.RuntimeOptions) (_result *CreateCustomBlockRecordResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BlockIp) {
		query["BlockIp"] = request.BlockIp
	}

	if !dara.IsNil(request.Bound) {
		query["Bound"] = request.Bound
	}

	if !dara.IsNil(request.ExpireTime) {
		query["ExpireTime"] = request.ExpireTime
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateCustomBlockRecord"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateCustomBlockRecordResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates custom weak password rules.
//
// @param request - CreateCustomizedDictRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCustomizedDictResponse
func (client *Client) CreateCustomizedDictWithContext(ctx context.Context, request *CreateCustomizedDictRequest, runtime *dara.RuntimeOptions) (_result *CreateCustomizedDictResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Override) {
		query["Override"] = request.Override
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateCustomizedDict"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateCustomizedDictResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a periodic scan task. The task can be an image scan task, urgent vulnerability scan task, or virus scan task.
//
// @param request - CreateCycleTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCycleTaskResponse
func (client *Client) CreateCycleTaskWithContext(ctx context.Context, request *CreateCycleTaskRequest, runtime *dara.RuntimeOptions) (_result *CreateCycleTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Enable) {
		query["Enable"] = request.Enable
	}

	if !dara.IsNil(request.FirstDateStr) {
		query["FirstDateStr"] = request.FirstDateStr
	}

	if !dara.IsNil(request.IntervalPeriod) {
		query["IntervalPeriod"] = request.IntervalPeriod
	}

	if !dara.IsNil(request.Param) {
		query["Param"] = request.Param
	}

	if !dara.IsNil(request.PeriodUnit) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	if !dara.IsNil(request.TargetEndTime) {
		query["TargetEndTime"] = request.TargetEndTime
	}

	if !dara.IsNil(request.TargetStartTime) {
		query["TargetStartTime"] = request.TargetStartTime
	}

	if !dara.IsNil(request.TaskName) {
		query["TaskName"] = request.TaskName
	}

	if !dara.IsNil(request.TaskType) {
		query["TaskType"] = request.TaskType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateCycleTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateCycleTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI CreateDynamicDict is deprecated, please use Sas::2018-12-03::CreateCustomizedDict instead.
//
// Summary:
//
// Creates a dynamic dictionary of weak passwords.
//
// @param request - CreateDynamicDictRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDynamicDictResponse
func (client *Client) CreateDynamicDictWithContext(ctx context.Context, request *CreateDynamicDictRequest, runtime *dara.RuntimeOptions) (_result *CreateDynamicDictResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Override) {
		query["Override"] = request.Override
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateDynamicDict"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateDynamicDictResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Pushes a file to the cloud for detection.
//
// Description:
//
// You can call this operation to push a file to the cloud for detection. Before you call this operation, make sure that the file is uploaded. You can call the CreateFileDetectUploadUrl operation to upload the file.
//
// The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
//
// @param request - CreateFileDetectRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateFileDetectResponse
func (client *Client) CreateFileDetectWithContext(ctx context.Context, request *CreateFileDetectRequest, runtime *dara.RuntimeOptions) (_result *CreateFileDetectResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Decompress) {
		query["Decompress"] = request.Decompress
	}

	if !dara.IsNil(request.DecompressMaxFileCount) {
		query["DecompressMaxFileCount"] = request.DecompressMaxFileCount
	}

	if !dara.IsNil(request.DecompressMaxLayer) {
		query["DecompressMaxLayer"] = request.DecompressMaxLayer
	}

	if !dara.IsNil(request.DownloadUrl) {
		query["DownloadUrl"] = request.DownloadUrl
	}

	if !dara.IsNil(request.HashKey) {
		query["HashKey"] = request.HashKey
	}

	if !dara.IsNil(request.OssKey) {
		query["OssKey"] = request.OssKey
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateFileDetect"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateFileDetectResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the parameters that are required to upload a file for detection.
//
// Description:
//
// You can call this operation to query the parameters that are required to upload a file for detection. If the value of the response parameter FileExist is true, the file that you want to upload for detection already exists in the cloud. In this case, you can directly push the file for detection. If the value of the response parameter FileExist is false, you must use the form upload method to upload the file to the specified Object Storage Service (OSS) bucket based on the response parameters of this operation.
//
// The form upload method is provided by OSS. For more information, see [Form upload](https://help.aliyun.com/document_detail/84788.html).
//
// The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
//
// @param request - CreateFileDetectUploadUrlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateFileDetectUploadUrlResponse
func (client *Client) CreateFileDetectUploadUrlWithContext(ctx context.Context, request *CreateFileDetectUploadUrlRequest, runtime *dara.RuntimeOptions) (_result *CreateFileDetectUploadUrlResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.HashKeyContextList) {
		query["HashKeyContextList"] = request.HashKeyContextList
	}

	if !dara.IsNil(request.HashKeyList) {
		query["HashKeyList"] = request.HashKeyList
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateFileDetectUploadUrl"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateFileDetectUploadUrlResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a core file monitoring rule.
//
// @param request - CreateFileProtectRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateFileProtectRuleResponse
func (client *Client) CreateFileProtectRuleWithContext(ctx context.Context, request *CreateFileProtectRuleRequest, runtime *dara.RuntimeOptions) (_result *CreateFileProtectRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AlertLevel) {
		query["AlertLevel"] = request.AlertLevel
	}

	if !dara.IsNil(request.FileOps) {
		query["FileOps"] = request.FileOps
	}

	if !dara.IsNil(request.FilePaths) {
		query["FilePaths"] = request.FilePaths
	}

	if !dara.IsNil(request.Platform) {
		query["Platform"] = request.Platform
	}

	if !dara.IsNil(request.ProcPaths) {
		query["ProcPaths"] = request.ProcPaths
	}

	if !dara.IsNil(request.RuleAction) {
		query["RuleAction"] = request.RuleAction
	}

	if !dara.IsNil(request.RuleName) {
		query["RuleName"] = request.RuleName
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	if !dara.IsNil(request.SwitchId) {
		query["SwitchId"] = request.SwitchId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateFileProtectRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateFileProtectRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Specifies the queries per second (QPS) limit on the files uploaded from the client.
//
// @param request - CreateFileUploadLimitRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateFileUploadLimitResponse
func (client *Client) CreateFileUploadLimitWithContext(ctx context.Context, request *CreateFileUploadLimitRequest, runtime *dara.RuntimeOptions) (_result *CreateFileUploadLimitResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Limit) {
		query["Limit"] = request.Limit
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateFileUploadLimit"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateFileUploadLimitResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a honeypot.
//
// @param request - CreateHoneypotRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateHoneypotResponse
func (client *Client) CreateHoneypotWithContext(ctx context.Context, request *CreateHoneypotRequest, runtime *dara.RuntimeOptions) (_result *CreateHoneypotResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.HoneypotImageId) {
		query["HoneypotImageId"] = request.HoneypotImageId
	}

	if !dara.IsNil(request.HoneypotImageName) {
		query["HoneypotImageName"] = request.HoneypotImageName
	}

	if !dara.IsNil(request.HoneypotName) {
		query["HoneypotName"] = request.HoneypotName
	}

	if !dara.IsNil(request.Meta) {
		query["Meta"] = request.Meta
	}

	if !dara.IsNil(request.NodeId) {
		query["NodeId"] = request.NodeId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateHoneypot"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateHoneypotResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a management node.
//
// @param request - CreateHoneypotNodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateHoneypotNodeResponse
func (client *Client) CreateHoneypotNodeWithContext(ctx context.Context, request *CreateHoneypotNodeRequest, runtime *dara.RuntimeOptions) (_result *CreateHoneypotNodeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AllowHoneypotAccessInternet) {
		query["AllowHoneypotAccessInternet"] = request.AllowHoneypotAccessInternet
	}

	if !dara.IsNil(request.AvailableProbeNum) {
		query["AvailableProbeNum"] = request.AvailableProbeNum
	}

	if !dara.IsNil(request.NodeName) {
		query["NodeName"] = request.NodeName
	}

	if !dara.IsNil(request.SecurityGroupProbeIpList) {
		query["SecurityGroupProbeIpList"] = request.SecurityGroupProbeIpList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateHoneypotNode"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateHoneypotNodeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a honeypot template.
//
// @param request - CreateHoneypotPresetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateHoneypotPresetResponse
func (client *Client) CreateHoneypotPresetWithContext(ctx context.Context, request *CreateHoneypotPresetRequest, runtime *dara.RuntimeOptions) (_result *CreateHoneypotPresetResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.HoneypotImageName) {
		query["HoneypotImageName"] = request.HoneypotImageName
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Meta) {
		query["Meta"] = request.Meta
	}

	if !dara.IsNil(request.NodeId) {
		query["NodeId"] = request.NodeId
	}

	if !dara.IsNil(request.PresetName) {
		query["PresetName"] = request.PresetName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateHoneypotPreset"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateHoneypotPresetResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a probe.
//
// @param request - CreateHoneypotProbeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateHoneypotProbeResponse
func (client *Client) CreateHoneypotProbeWithContext(ctx context.Context, request *CreateHoneypotProbeRequest, runtime *dara.RuntimeOptions) (_result *CreateHoneypotProbeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Arp) {
		query["Arp"] = request.Arp
	}

	if !dara.IsNil(request.BusinessGroupId) {
		query["BusinessGroupId"] = request.BusinessGroupId
	}

	if !dara.IsNil(request.ControlNodeId) {
		query["ControlNodeId"] = request.ControlNodeId
	}

	if !dara.IsNil(request.DisplayName) {
		query["DisplayName"] = request.DisplayName
	}

	if !dara.IsNil(request.HoneypotBindList) {
		query["HoneypotBindList"] = request.HoneypotBindList
	}

	if !dara.IsNil(request.Ping) {
		query["Ping"] = request.Ping
	}

	if !dara.IsNil(request.ProbeType) {
		query["ProbeType"] = request.ProbeType
	}

	if !dara.IsNil(request.ProbeVersion) {
		query["ProbeVersion"] = request.ProbeVersion
	}

	if !dara.IsNil(request.ProxyIp) {
		query["ProxyIp"] = request.ProxyIp
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	if !dara.IsNil(request.VpcId) {
		query["VpcId"] = request.VpcId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateHoneypotProbe"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateHoneypotProbeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a monitoring or forwarding service for a probe.
//
// @param request - CreateHoneypotProbeBindRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateHoneypotProbeBindResponse
func (client *Client) CreateHoneypotProbeBindWithContext(ctx context.Context, request *CreateHoneypotProbeBindRequest, runtime *dara.RuntimeOptions) (_result *CreateHoneypotProbeBindResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BindPortList) {
		query["BindPortList"] = request.BindPortList
	}

	if !dara.IsNil(request.HoneypotId) {
		query["HoneypotId"] = request.HoneypotId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.ProbeId) {
		query["ProbeId"] = request.ProbeId
	}

	if !dara.IsNil(request.ServiceIpList) {
		query["ServiceIpList"] = request.ServiceIpList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateHoneypotProbeBind"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateHoneypotProbeBindResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a hybrid-cloud proxy cluster.
//
// @param request - CreateHybridProxyClusterRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateHybridProxyClusterResponse
func (client *Client) CreateHybridProxyClusterWithContext(ctx context.Context, request *CreateHybridProxyClusterRequest, runtime *dara.RuntimeOptions) (_result *CreateHybridProxyClusterResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterName) {
		query["ClusterName"] = request.ClusterName
	}

	if !dara.IsNil(request.Ip) {
		query["Ip"] = request.Ip
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateHybridProxyCluster"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateHybridProxyClusterResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a defense rule in the container firewall module.
//
// @param tmpReq - CreateInterceptionRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateInterceptionRuleResponse
func (client *Client) CreateInterceptionRuleWithContext(ctx context.Context, tmpReq *CreateInterceptionRuleRequest, runtime *dara.RuntimeOptions) (_result *CreateInterceptionRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &CreateInterceptionRuleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.DstTargetList) {
		request.DstTargetListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DstTargetList, dara.String("DstTargetList"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.SrcTarget) {
		request.SrcTargetShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SrcTarget, dara.String("SrcTarget"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.ClusterName) {
		query["ClusterName"] = request.ClusterName
	}

	if !dara.IsNil(request.DstTargetListShrink) {
		query["DstTargetList"] = request.DstTargetListShrink
	}

	if !dara.IsNil(request.InterceptType) {
		query["InterceptType"] = request.InterceptType
	}

	if !dara.IsNil(request.OrderIndex) {
		query["OrderIndex"] = request.OrderIndex
	}

	if !dara.IsNil(request.RuleName) {
		query["RuleName"] = request.RuleName
	}

	if !dara.IsNil(request.RuleSwitch) {
		query["RuleSwitch"] = request.RuleSwitch
	}

	if !dara.IsNil(request.RuleType) {
		query["RuleType"] = request.RuleType
	}

	if !dara.IsNil(request.SrcTargetShrink) {
		query["SrcTarget"] = request.SrcTargetShrink
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateInterceptionRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateInterceptionRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a defense object.
//
// @param request - CreateInterceptionTargetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateInterceptionTargetResponse
func (client *Client) CreateInterceptionTargetWithContext(ctx context.Context, request *CreateInterceptionTargetRequest, runtime *dara.RuntimeOptions) (_result *CreateInterceptionTargetResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.ClusterName) {
		query["ClusterName"] = request.ClusterName
	}

	if !dara.IsNil(request.ImageList) {
		query["ImageList"] = request.ImageList
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.TagList) {
		query["TagList"] = request.TagList
	}

	if !dara.IsNil(request.TargetName) {
		query["TargetName"] = request.TargetName
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateInterceptionTarget"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateInterceptionTargetResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a Jenkins image repository.
//
// @param request - CreateJenkinsImageRegistryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateJenkinsImageRegistryResponse
func (client *Client) CreateJenkinsImageRegistryWithContext(ctx context.Context, request *CreateJenkinsImageRegistryRequest, runtime *dara.RuntimeOptions) (_result *CreateJenkinsImageRegistryResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		body["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.ExtraParam) {
		body["ExtraParam"] = request.ExtraParam
	}

	if !dara.IsNil(request.NetType) {
		body["NetType"] = request.NetType
	}

	if !dara.IsNil(request.Password) {
		body["Password"] = request.Password
	}

	if !dara.IsNil(request.PersistenceDay) {
		body["PersistenceDay"] = request.PersistenceDay
	}

	if !dara.IsNil(request.ProtocolType) {
		body["ProtocolType"] = request.ProtocolType
	}

	if !dara.IsNil(request.RegionId) {
		body["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.RegistryHostIp) {
		body["RegistryHostIp"] = request.RegistryHostIp
	}

	if !dara.IsNil(request.RegistryName) {
		body["RegistryName"] = request.RegistryName
	}

	if !dara.IsNil(request.RegistryType) {
		body["RegistryType"] = request.RegistryType
	}

	if !dara.IsNil(request.RegistryVersion) {
		body["RegistryVersion"] = request.RegistryVersion
	}

	if !dara.IsNil(request.TransPerHour) {
		body["TransPerHour"] = request.TransPerHour
	}

	if !dara.IsNil(request.UserName) {
		body["UserName"] = request.UserName
	}

	if !dara.IsNil(request.VpcId) {
		body["VpcId"] = request.VpcId
	}

	if !dara.IsNil(request.WhiteList) {
		body["WhiteList"] = request.WhiteList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateJenkinsImageRegistry"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateJenkinsImageRegistryResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a Jenkins scan task.
//
// @param request - CreateJenkinsImageScanTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateJenkinsImageScanTaskResponse
func (client *Client) CreateJenkinsImageScanTaskWithContext(ctx context.Context, request *CreateJenkinsImageScanTaskRequest, runtime *dara.RuntimeOptions) (_result *CreateJenkinsImageScanTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.JenkinsEnv) {
		query["JenkinsEnv"] = request.JenkinsEnv
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.Digest) {
		body["Digest"] = request.Digest
	}

	if !dara.IsNil(request.ImageCreate) {
		body["ImageCreate"] = request.ImageCreate
	}

	if !dara.IsNil(request.ImageId) {
		body["ImageId"] = request.ImageId
	}

	if !dara.IsNil(request.ImageSize) {
		body["ImageSize"] = request.ImageSize
	}

	if !dara.IsNil(request.ImageUpdate) {
		body["ImageUpdate"] = request.ImageUpdate
	}

	if !dara.IsNil(request.Namespace) {
		body["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.RepoName) {
		body["RepoName"] = request.RepoName
	}

	if !dara.IsNil(request.Tag) {
		body["Tag"] = request.Tag
	}

	if !dara.IsNil(request.Token) {
		body["Token"] = request.Token
	}

	if !dara.IsNil(request.Uuid) {
		body["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateJenkinsImageScanTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateJenkinsImageScanTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
//
// @param request - CreateMaliciousFileWhitelistConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMaliciousFileWhitelistConfigResponse
func (client *Client) CreateMaliciousFileWhitelistConfigWithContext(ctx context.Context, request *CreateMaliciousFileWhitelistConfigRequest, runtime *dara.RuntimeOptions) (_result *CreateMaliciousFileWhitelistConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.EventName) {
		query["EventName"] = request.EventName
	}

	if !dara.IsNil(request.Field) {
		query["Field"] = request.Field
	}

	if !dara.IsNil(request.FieldValue) {
		query["FieldValue"] = request.FieldValue
	}

	if !dara.IsNil(request.Operator) {
		query["Operator"] = request.Operator
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	if !dara.IsNil(request.TargetValue) {
		query["TargetValue"] = request.TargetValue
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateMaliciousFileWhitelistConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateMaliciousFileWhitelistConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds remarks to alert events for agentless detection.
//
// @param request - CreateMaliciousNoteRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMaliciousNoteResponse
func (client *Client) CreateMaliciousNoteWithContext(ctx context.Context, request *CreateMaliciousNoteRequest, runtime *dara.RuntimeOptions) (_result *CreateMaliciousNoteResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.EventId) {
		query["EventId"] = request.EventId
	}

	if !dara.IsNil(request.Note) {
		query["Note"] = request.Note
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateMaliciousNote"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateMaliciousNoteResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a list of members of the account monitored by Security Center type by using the multi-account management feature.
//
// Description:
//
// You can call this operation only by using the management account of a resource directory or a delegated administrator account of Security Center.
//
// @param request - CreateMonitorAccountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMonitorAccountResponse
func (client *Client) CreateMonitorAccountWithContext(ctx context.Context, request *CreateMonitorAccountRequest, runtime *dara.RuntimeOptions) (_result *CreateMonitorAccountResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AccountIds) {
		query["AccountIds"] = request.AccountIds
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateMonitorAccount"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateMonitorAccountResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Installs the components that are required by at-risk image blocking. The components are policy-template-controller, gatekeeper, and logtail-ds.
//
// @param request - CreateOpaClusterPluginRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateOpaClusterPluginResponse
func (client *Client) CreateOpaClusterPluginWithContext(ctx context.Context, request *CreateOpaClusterPluginRequest, runtime *dara.RuntimeOptions) (_result *CreateOpaClusterPluginResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterIds) {
		query["ClusterIds"] = request.ClusterIds
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateOpaClusterPlugin"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateOpaClusterPluginResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a rule to block at-risk images.
//
// @param tmpReq - CreateOpaStrategyNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateOpaStrategyNewResponse
func (client *Client) CreateOpaStrategyNewWithContext(ctx context.Context, tmpReq *CreateOpaStrategyNewRequest, runtime *dara.RuntimeOptions) (_result *CreateOpaStrategyNewResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &CreateOpaStrategyNewShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.AlarmDetail) {
		request.AlarmDetailShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AlarmDetail, dara.String("AlarmDetail"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.AlarmDetailShrink) {
		query["AlarmDetail"] = request.AlarmDetailShrink
	}

	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.ClusterName) {
		query["ClusterName"] = request.ClusterName
	}

	if !dara.IsNil(request.Description) {
		query["Description"] = request.Description
	}

	if !dara.IsNil(request.ImageName) {
		query["ImageName"] = request.ImageName
	}

	if !dara.IsNil(request.Label) {
		query["Label"] = request.Label
	}

	if !dara.IsNil(request.MaliciousImage) {
		query["MaliciousImage"] = request.MaliciousImage
	}

	if !dara.IsNil(request.RuleAction) {
		query["RuleAction"] = request.RuleAction
	}

	if !dara.IsNil(request.Scopes) {
		query["Scopes"] = request.Scopes
	}

	if !dara.IsNil(request.StrategyId) {
		query["StrategyId"] = request.StrategyId
	}

	if !dara.IsNil(request.StrategyName) {
		query["StrategyName"] = request.StrategyName
	}

	if !dara.IsNil(request.StrategyTemplateId) {
		query["StrategyTemplateId"] = request.StrategyTemplateId
	}

	if !dara.IsNil(request.UnScanedImage) {
		query["UnScanedImage"] = request.UnScanedImage
	}

	if !dara.IsNil(request.WhiteList) {
		query["WhiteList"] = request.WhiteList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateOpaStrategyNew"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateOpaStrategyNewResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the mapping between an asset and an asset group. For example, you can call this operation to modify the server group to which the asset belongs or the asset list of the asset group.
//
// Description:
//
// A server can belong only to one server group. If you call the CreateOrUpdateAssetGroup operation and the server specified in request parameters belongs to Server Group A, the server is removed from Server Group A and then added to the newly created or specified server group after the call is complete.
//
// @param request - CreateOrUpdateAssetGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateOrUpdateAssetGroupResponse
func (client *Client) CreateOrUpdateAssetGroupWithContext(ctx context.Context, request *CreateOrUpdateAssetGroupRequest, runtime *dara.RuntimeOptions) (_result *CreateOrUpdateAssetGroupResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.GroupName) {
		query["GroupName"] = request.GroupName
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateOrUpdateAssetGroup"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateOrUpdateAssetGroupResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an asset auto-tagging rule or modifies an asset auto-tagging rule that is created on the Asset Management Rule tab.
//
// @param request - CreateOrUpdateAutoTagRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateOrUpdateAutoTagRuleResponse
func (client *Client) CreateOrUpdateAutoTagRuleWithContext(ctx context.Context, request *CreateOrUpdateAutoTagRuleRequest, runtime *dara.RuntimeOptions) (_result *CreateOrUpdateAutoTagRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckAll) {
		query["CheckAll"] = request.CheckAll
	}

	if !dara.IsNil(request.Expression) {
		query["Expression"] = request.Expression
	}

	if !dara.IsNil(request.RuleDesc) {
		query["RuleDesc"] = request.RuleDesc
	}

	if !dara.IsNil(request.RuleId) {
		query["RuleId"] = request.RuleId
	}

	if !dara.IsNil(request.RuleName) {
		query["RuleName"] = request.RuleName
	}

	if !dara.IsNil(request.TagContext) {
		query["TagContext"] = request.TagContext
	}

	if !dara.IsNil(request.TagType) {
		query["TagType"] = request.TagType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateOrUpdateAutoTagRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateOrUpdateAutoTagRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates or modifies a DingTalk chatbot that sends notifications.
//
// @param request - CreateOrUpdateDingTalkRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateOrUpdateDingTalkResponse
func (client *Client) CreateOrUpdateDingTalkWithContext(ctx context.Context, request *CreateOrUpdateDingTalkRequest, runtime *dara.RuntimeOptions) (_result *CreateOrUpdateDingTalkResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ConfigList) {
		query["ConfigList"] = request.ConfigList
	}

	if !dara.IsNil(request.DingTalkLang) {
		query["DingTalkLang"] = request.DingTalkLang
	}

	if !dara.IsNil(request.GroupIdList) {
		query["GroupIdList"] = request.GroupIdList
	}

	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.IntervalTime) {
		query["IntervalTime"] = request.IntervalTime
	}

	if !dara.IsNil(request.RuleActionName) {
		query["RuleActionName"] = request.RuleActionName
	}

	if !dara.IsNil(request.SendUrl) {
		query["SendUrl"] = request.SendUrl
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateOrUpdateDingTalk"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateOrUpdateDingTalkResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a bucket check task.
//
// @param request - CreateOssBucketScanTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateOssBucketScanTaskResponse
func (client *Client) CreateOssBucketScanTaskWithContext(ctx context.Context, request *CreateOssBucketScanTaskRequest, runtime *dara.RuntimeOptions) (_result *CreateOssBucketScanTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AllKeyPrefix) {
		query["AllKeyPrefix"] = request.AllKeyPrefix
	}

	if !dara.IsNil(request.BucketNameList) {
		query["BucketNameList"] = request.BucketNameList
	}

	if !dara.IsNil(request.DecompressMaxFileCount) {
		query["DecompressMaxFileCount"] = request.DecompressMaxFileCount
	}

	if !dara.IsNil(request.DecompressMaxLayer) {
		query["DecompressMaxLayer"] = request.DecompressMaxLayer
	}

	if !dara.IsNil(request.DecryptionList) {
		query["DecryptionList"] = request.DecryptionList
	}

	if !dara.IsNil(request.ExcludeKeySuffixList) {
		query["ExcludeKeySuffixList"] = request.ExcludeKeySuffixList
	}

	if !dara.IsNil(request.KeyPrefixList) {
		query["KeyPrefixList"] = request.KeyPrefixList
	}

	if !dara.IsNil(request.KeySuffixList) {
		query["KeySuffixList"] = request.KeySuffixList
	}

	if !dara.IsNil(request.LastModifiedStartTime) {
		query["LastModifiedStartTime"] = request.LastModifiedStartTime
	}

	if !dara.IsNil(request.ScanMode) {
		query["ScanMode"] = request.ScanMode
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateOssBucketScanTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateOssBucketScanTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a policy for detecting malicious Object Storage Service (OSS) objects by using the SDK for malicious file detection feature.
//
// @param request - CreateOssScanConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateOssScanConfigResponse
func (client *Client) CreateOssScanConfigWithContext(ctx context.Context, request *CreateOssScanConfigRequest, runtime *dara.RuntimeOptions) (_result *CreateOssScanConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AllKeyPrefix) {
		query["AllKeyPrefix"] = request.AllKeyPrefix
	}

	if !dara.IsNil(request.BucketNameList) {
		query["BucketNameList"] = request.BucketNameList
	}

	if !dara.IsNil(request.DecompressMaxFileCount) {
		query["DecompressMaxFileCount"] = request.DecompressMaxFileCount
	}

	if !dara.IsNil(request.DecompressMaxLayer) {
		query["DecompressMaxLayer"] = request.DecompressMaxLayer
	}

	if !dara.IsNil(request.DecryptionList) {
		query["DecryptionList"] = request.DecryptionList
	}

	if !dara.IsNil(request.Enable) {
		query["Enable"] = request.Enable
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.KeyPrefixList) {
		query["KeyPrefixList"] = request.KeyPrefixList
	}

	if !dara.IsNil(request.KeySuffixList) {
		query["KeySuffixList"] = request.KeySuffixList
	}

	if !dara.IsNil(request.LastModifiedStartTime) {
		query["LastModifiedStartTime"] = request.LastModifiedStartTime
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.RealTimeIncr) {
		query["RealTimeIncr"] = request.RealTimeIncr
	}

	if !dara.IsNil(request.ScanDayList) {
		query["ScanDayList"] = request.ScanDayList
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateOssScanConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateOssScanConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an automatic account management policy for members of the account monitored by Security Center type by using the multi-account management feature. After the policy is created, the members that are newly added to the specified resource directory are automatically added to the list of members of the account monitored by Security Center type.
//
// Description:
//
// You can call this operation only by using the management account of a resource directory or a delegated administrator account of Security Center.
//
// @param request - CreateRdDefaultSyncListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateRdDefaultSyncListResponse
func (client *Client) CreateRdDefaultSyncListWithContext(ctx context.Context, request *CreateRdDefaultSyncListRequest, runtime *dara.RuntimeOptions) (_result *CreateRdDefaultSyncListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.FolderIds) {
		query["FolderIds"] = request.FolderIds
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateRdDefaultSyncList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateRdDefaultSyncListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a restoration task.
//
// @param request - CreateRestoreJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateRestoreJobResponse
func (client *Client) CreateRestoreJobWithContext(ctx context.Context, request *CreateRestoreJobRequest, runtime *dara.RuntimeOptions) (_result *CreateRestoreJobResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Includes) {
		query["Includes"] = request.Includes
	}

	if !dara.IsNil(request.SnapshotHash) {
		query["SnapshotHash"] = request.SnapshotHash
	}

	if !dara.IsNil(request.SnapshotId) {
		query["SnapshotId"] = request.SnapshotId
	}

	if !dara.IsNil(request.SnapshotVersion) {
		query["SnapshotVersion"] = request.SnapshotVersion
	}

	if !dara.IsNil(request.SourceType) {
		query["SourceType"] = request.SourceType
	}

	if !dara.IsNil(request.Target) {
		query["Target"] = request.Target
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	if !dara.IsNil(request.VaultId) {
		query["VaultId"] = request.VaultId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateRestoreJob"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateRestoreJobResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Applies for a trial of Security Center.
//
// @param tmpReq - CreateSasTrialRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSasTrialResponse
func (client *Client) CreateSasTrialWithContext(ctx context.Context, tmpReq *CreateSasTrialRequest, runtime *dara.RuntimeOptions) (_result *CreateSasTrialResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &CreateSasTrialShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.RequestForm) {
		request.RequestFormShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RequestForm, dara.String("RequestForm"), dara.String("json"))
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.FromEcs) {
		body["FromEcs"] = request.FromEcs
	}

	if !dara.IsNil(request.Lang) {
		body["Lang"] = request.Lang
	}

	if !dara.IsNil(request.RequestFormShrink) {
		body["RequestForm"] = request.RequestFormShrink
	}

	if !dara.IsNil(request.TryType) {
		body["TryType"] = request.TryType
	}

	if !dara.IsNil(request.TryVersion) {
		body["TryVersion"] = request.TryVersion
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateSasTrial"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateSasTrialResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a service-linked role and authorizes Security Center to access cloud resources.
//
// Description:
//
// For more information about service-linked roles, see [Service-linked roles](https://help.aliyun.com/document_detail/160674.html).
//
// @param request - CreateServiceLinkedRoleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateServiceLinkedRoleResponse
func (client *Client) CreateServiceLinkedRoleWithContext(ctx context.Context, request *CreateServiceLinkedRoleRequest, runtime *dara.RuntimeOptions) (_result *CreateServiceLinkedRoleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ServiceLinkedRole) {
		query["ServiceLinkedRole"] = request.ServiceLinkedRole
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateServiceLinkedRole"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateServiceLinkedRoleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Create a service trail.
//
// @param request - CreateServiceTrailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateServiceTrailResponse
func (client *Client) CreateServiceTrailWithContext(ctx context.Context, request *CreateServiceTrailRequest, runtime *dara.RuntimeOptions) (_result *CreateServiceTrailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateServiceTrail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateServiceTrailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a task to query alert events that are triggered by the same rule or of the same alert type.
//
// @param request - CreateSimilarSecurityEventsQueryTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSimilarSecurityEventsQueryTaskResponse
func (client *Client) CreateSimilarSecurityEventsQueryTaskWithContext(ctx context.Context, request *CreateSimilarSecurityEventsQueryTaskRequest, runtime *dara.RuntimeOptions) (_result *CreateSimilarSecurityEventsQueryTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SecurityEventId) {
		query["SecurityEventId"] = request.SecurityEventId
	}

	if !dara.IsNil(request.SimilarEventScenarioCode) {
		query["SimilarEventScenarioCode"] = request.SimilarEventScenarioCode
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateSimilarSecurityEventsQueryTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateSimilarSecurityEventsQueryTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a task on the My Policies tab of the Playbook page.
//
// Description:
//
// Only the Enterprise and Ultimate editions of Security Center support this API operation.
//
// @param request - CreateSoarStrategyTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSoarStrategyTaskResponse
func (client *Client) CreateSoarStrategyTaskWithContext(ctx context.Context, request *CreateSoarStrategyTaskRequest, runtime *dara.RuntimeOptions) (_result *CreateSoarStrategyTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.StrategyId) {
		query["StrategyId"] = request.StrategyId
	}

	if !dara.IsNil(request.StrategyName) {
		query["StrategyName"] = request.StrategyName
	}

	if !dara.IsNil(request.StrategyTaskName) {
		query["StrategyTaskName"] = request.StrategyTaskName
	}

	if !dara.IsNil(request.StrategyTaskParams) {
		query["StrategyTaskParams"] = request.StrategyTaskParams
	}

	if !dara.IsNil(request.StrategyTaskPlanExeTime) {
		query["StrategyTaskPlanExeTime"] = request.StrategyTaskPlanExeTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateSoarStrategyTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateSoarStrategyTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds remarks to an alert event.
//
// @param request - CreateSuspEventNoteRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSuspEventNoteResponse
func (client *Client) CreateSuspEventNoteWithContext(ctx context.Context, request *CreateSuspEventNoteRequest, runtime *dara.RuntimeOptions) (_result *CreateSuspEventNoteResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.EventId) {
		query["EventId"] = request.EventId
	}

	if !dara.IsNil(request.Note) {
		query["Note"] = request.Note
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateSuspEventNote"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateSuspEventNoteResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an anti-ransomware policy for a database.
//
// @param tmpReq - CreateUniBackupPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateUniBackupPolicyResponse
func (client *Client) CreateUniBackupPolicyWithContext(ctx context.Context, tmpReq *CreateUniBackupPolicyRequest, runtime *dara.RuntimeOptions) (_result *CreateUniBackupPolicyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &CreateUniBackupPolicyShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.FullPlan) {
		request.FullPlanShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.FullPlan, dara.String("FullPlan"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.IncPlan) {
		request.IncPlanShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.IncPlan, dara.String("IncPlan"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.AccountName) {
		query["AccountName"] = request.AccountName
	}

	if !dara.IsNil(request.AccountPassword) {
		query["AccountPassword"] = request.AccountPassword
	}

	if !dara.IsNil(request.DatabaseAddByUser) {
		query["DatabaseAddByUser"] = request.DatabaseAddByUser
	}

	if !dara.IsNil(request.DatabaseType) {
		query["DatabaseType"] = request.DatabaseType
	}

	if !dara.IsNil(request.FullPlanShrink) {
		query["FullPlan"] = request.FullPlanShrink
	}

	if !dara.IsNil(request.IncPlanShrink) {
		query["IncPlan"] = request.IncPlanShrink
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.PolicyName) {
		query["PolicyName"] = request.PolicyName
	}

	if !dara.IsNil(request.Retention) {
		query["Retention"] = request.Retention
	}

	if !dara.IsNil(request.SpeedLimiter) {
		query["SpeedLimiter"] = request.SpeedLimiter
	}

	if !dara.IsNil(request.UniRegionId) {
		query["UniRegionId"] = request.UniRegionId
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateUniBackupPolicy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateUniBackupPolicyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a restoration task for a database.
//
// @param request - CreateUniRestorePlanRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateUniRestorePlanResponse
func (client *Client) CreateUniRestorePlanWithContext(ctx context.Context, request *CreateUniRestorePlanRequest, runtime *dara.RuntimeOptions) (_result *CreateUniRestorePlanResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Database) {
		query["Database"] = request.Database
	}

	if !dara.IsNil(request.InstanceUuid) {
		query["InstanceUuid"] = request.InstanceUuid
	}

	if !dara.IsNil(request.PolicyId) {
		query["PolicyId"] = request.PolicyId
	}

	if !dara.IsNil(request.ResetScn) {
		query["ResetScn"] = request.ResetScn
	}

	if !dara.IsNil(request.ResetTime) {
		query["ResetTime"] = request.ResetTime
	}

	if !dara.IsNil(request.RestoreInfo) {
		query["RestoreInfo"] = request.RestoreInfo
	}

	if !dara.IsNil(request.TimePoint) {
		query["TimePoint"] = request.TimePoint
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateUniRestorePlan"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateUniRestorePlanResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates the risk level settings for baseline check items.
//
// @param request - CreateUserSettingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateUserSettingResponse
func (client *Client) CreateUserSettingWithContext(ctx context.Context, request *CreateUserSettingRequest, runtime *dara.RuntimeOptions) (_result *CreateUserSettingResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AlertLevels) {
		query["AlertLevels"] = request.AlertLevels
	}

	if !dara.IsNil(request.InvalidWarningKeepDays) {
		query["InvalidWarningKeepDays"] = request.InvalidWarningKeepDays
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateUserSetting"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateUserSettingResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a one-time virus scan task that is immediately executed.
//
// @param request - CreateVirusScanOnceTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateVirusScanOnceTaskResponse
func (client *Client) CreateVirusScanOnceTaskWithContext(ctx context.Context, request *CreateVirusScanOnceTaskRequest, runtime *dara.RuntimeOptions) (_result *CreateVirusScanOnceTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Param) {
		query["Param"] = request.Param
	}

	if !dara.IsNil(request.ScanPath) {
		query["ScanPath"] = request.ScanPath
	}

	if !dara.IsNil(request.ScanType) {
		query["ScanType"] = request.ScanType
	}

	if !dara.IsNil(request.SelectionKey) {
		query["SelectionKey"] = request.SelectionKey
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateVirusScanOnceTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateVirusScanOnceTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a list of vulnerabilities that can be automatically fixed. After the list is created, you can select the list when you create a vulnerability fixing task on the Playbook page.
//
// @param request - CreateVulAutoRepairConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateVulAutoRepairConfigResponse
func (client *Client) CreateVulAutoRepairConfigWithContext(ctx context.Context, request *CreateVulAutoRepairConfigRequest, runtime *dara.RuntimeOptions) (_result *CreateVulAutoRepairConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Reason) {
		query["Reason"] = request.Reason
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	if !dara.IsNil(request.VulAutoRepairConfigList) {
		query["VulAutoRepairConfigList"] = request.VulAutoRepairConfigList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateVulAutoRepairConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateVulAutoRepairConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the specified defense rules against brute-force attacks.
//
// @param request - DeleteAntiBruteForceRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAntiBruteForceRuleResponse
func (client *Client) DeleteAntiBruteForceRuleWithContext(ctx context.Context, request *DeleteAntiBruteForceRuleRequest, runtime *dara.RuntimeOptions) (_result *DeleteAntiBruteForceRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Ids) {
		query["Ids"] = request.Ids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteAntiBruteForceRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteAntiBruteForceRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Delete attack path sensitive asset.
//
// @param request - DeleteAttackPathSensitiveAssetConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAttackPathSensitiveAssetConfigResponse
func (client *Client) DeleteAttackPathSensitiveAssetConfigWithContext(ctx context.Context, request *DeleteAttackPathSensitiveAssetConfigRequest, runtime *dara.RuntimeOptions) (_result *DeleteAttackPathSensitiveAssetConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AttackPathSensitiveAssetConfigId) {
		query["AttackPathSensitiveAssetConfigId"] = request.AttackPathSensitiveAssetConfigId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteAttackPathSensitiveAssetConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteAttackPathSensitiveAssetConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Delete Attack Path Whitelist.
//
// @param request - DeleteAttackPathWhitelistRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAttackPathWhitelistResponse
func (client *Client) DeleteAttackPathWhitelistWithContext(ctx context.Context, request *DeleteAttackPathWhitelistRequest, runtime *dara.RuntimeOptions) (_result *DeleteAttackPathWhitelistResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AttackPathWhitelistId) {
		query["AttackPathWhitelistId"] = request.AttackPathWhitelistId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteAttackPathWhitelist"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteAttackPathWhitelistResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a witness.
//
// @param request - DeleteAttestorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAttestorResponse
func (client *Client) DeleteAttestorWithContext(ctx context.Context, request *DeleteAttestorRequest, runtime *dara.RuntimeOptions) (_result *DeleteAttestorResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteAttestor"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteAttestorResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes asset auto-tagging rules that are created by using the feature of asset management rules. You can create rules on the System Configuration > Feature Settings > Multi-cloud Configuration Management > Asset Management Rule page in the Security Center console.
//
// @param request - DeleteAutoTagRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAutoTagRulesResponse
func (client *Client) DeleteAutoTagRulesWithContext(ctx context.Context, request *DeleteAutoTagRulesRequest, runtime *dara.RuntimeOptions) (_result *DeleteAutoTagRulesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.RuleIdList) {
		query["RuleIdList"] = request.RuleIdList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteAutoTagRules"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteAutoTagRulesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an anti-ransomware policy.
//
// @param request - DeleteBackupPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteBackupPolicyResponse
func (client *Client) DeleteBackupPolicyWithContext(ctx context.Context, request *DeleteBackupPolicyRequest, runtime *dara.RuntimeOptions) (_result *DeleteBackupPolicyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.PolicyVersion) {
		query["PolicyVersion"] = request.PolicyVersion
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteBackupPolicy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteBackupPolicyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Disables a specified anti-ransomware policy that is applied to specified servers and uninstalls the anti-ransomware agent from the servers. If the backup vaults of the servers contain only backup data of the servers, the backup vaults are deleted.
//
// @param request - DeleteBackupPolicyMachineRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteBackupPolicyMachineResponse
func (client *Client) DeleteBackupPolicyMachineWithContext(ctx context.Context, request *DeleteBackupPolicyMachineRequest, runtime *dara.RuntimeOptions) (_result *DeleteBackupPolicyMachineResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.PolicyId) {
		query["PolicyId"] = request.PolicyId
	}

	if !dara.IsNil(request.PolicyVersion) {
		query["PolicyVersion"] = request.PolicyVersion
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	if !dara.IsNil(request.UuidList) {
		query["UuidList"] = request.UuidList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteBackupPolicyMachine"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteBackupPolicyMachineResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a backup snapshot that is created for anti-ransomware.
//
// @param request - DeleteBackupSnapshotRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteBackupSnapshotResponse
func (client *Client) DeleteBackupSnapshotWithContext(ctx context.Context, request *DeleteBackupSnapshotRequest, runtime *dara.RuntimeOptions) (_result *DeleteBackupSnapshotResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BackupRegionIdList) {
		query["BackupRegionIdList"] = request.BackupRegionIdList
	}

	if !dara.IsNil(request.BackupSnapshotList) {
		query["BackupSnapshotList"] = request.BackupSnapshotList
	}

	if !dara.IsNil(request.RetainLatestSnapshot) {
		query["RetainLatestSnapshot"] = request.RetainLatestSnapshot
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteBackupSnapshot"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteBackupSnapshotResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the whitelist record for a baseline check item.
//
// @param request - DeleteBaselineCheckWhiteRecordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteBaselineCheckWhiteRecordResponse
func (client *Client) DeleteBaselineCheckWhiteRecordWithContext(ctx context.Context, request *DeleteBaselineCheckWhiteRecordRequest, runtime *dara.RuntimeOptions) (_result *DeleteBaselineCheckWhiteRecordResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckIds) {
		query["CheckIds"] = request.CheckIds
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.RecordIds) {
		query["RecordIds"] = request.RecordIds
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteBaselineCheckWhiteRecord"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteBaselineCheckWhiteRecordResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a binary security policy from the container signature feature.
//
// @param request - DeleteBinarySecurityPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteBinarySecurityPolicyResponse
func (client *Client) DeleteBinarySecurityPolicyWithContext(ctx context.Context, request *DeleteBinarySecurityPolicyRequest, runtime *dara.RuntimeOptions) (_result *DeleteBinarySecurityPolicyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteBinarySecurityPolicy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteBinarySecurityPolicyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除自定义策略
//
// @param request - DeleteCheckPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCheckPolicyResponse
func (client *Client) DeleteCheckPolicyWithContext(ctx context.Context, request *DeleteCheckPolicyRequest, runtime *dara.RuntimeOptions) (_result *DeleteCheckPolicyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.PolicyIds) {
		query["PolicyIds"] = request.PolicyIds
	}

	if !dara.IsNil(request.PolicyType) {
		query["PolicyType"] = request.PolicyType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteCheckPolicy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteCheckPolicyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes specified custom defense rules.
//
// @param request - DeleteClientUserDefineRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteClientUserDefineRuleResponse
func (client *Client) DeleteClientUserDefineRuleWithContext(ctx context.Context, request *DeleteClientUserDefineRuleRequest, runtime *dara.RuntimeOptions) (_result *DeleteClientUserDefineRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.IdList) {
		query["IdList"] = request.IdList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteClientUserDefineRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteClientUserDefineRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Delete multi-cloud asset synchronization configuration.
//
// @param request - DeleteCloudVendorAccountAKRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCloudVendorAccountAKResponse
func (client *Client) DeleteCloudVendorAccountAKWithContext(ctx context.Context, request *DeleteCloudVendorAccountAKRequest, runtime *dara.RuntimeOptions) (_result *DeleteCloudVendorAccountAKResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AuthId) {
		query["AuthId"] = request.AuthId
	}

	if !dara.IsNil(request.AuthModules) {
		query["AuthModules"] = request.AuthModules
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteCloudVendorAccountAK"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteCloudVendorAccountAKResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a rule for non-image program defense.
//
// @param request - DeleteContainerDefenseRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteContainerDefenseRuleResponse
func (client *Client) DeleteContainerDefenseRuleWithContext(ctx context.Context, request *DeleteContainerDefenseRuleRequest, runtime *dara.RuntimeOptions) (_result *DeleteContainerDefenseRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.RuleIds) {
		query["RuleIds"] = request.RuleIds
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteContainerDefenseRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteContainerDefenseRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a defense rule against container escapes.
//
// @param request - DeleteContainerPluginRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteContainerPluginRuleResponse
func (client *Client) DeleteContainerPluginRuleWithContext(ctx context.Context, request *DeleteContainerPluginRuleRequest, runtime *dara.RuntimeOptions) (_result *DeleteContainerPluginRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.RuleId) {
		query["RuleId"] = request.RuleId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteContainerPluginRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteContainerPluginRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a specified IP address blocking policy from one or more servers.
//
// @param request - DeleteCustomBlockRecordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCustomBlockRecordResponse
func (client *Client) DeleteCustomBlockRecordWithContext(ctx context.Context, request *DeleteCustomBlockRecordRequest, runtime *dara.RuntimeOptions) (_result *DeleteCustomBlockRecordResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteCustomBlockRecord"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteCustomBlockRecordResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a custom security report.
//
// @param request - DeleteCustomizeReportRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCustomizeReportResponse
func (client *Client) DeleteCustomizeReportWithContext(ctx context.Context, request *DeleteCustomizeReportRequest, runtime *dara.RuntimeOptions) (_result *DeleteCustomizeReportResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ReportId) {
		query["ReportId"] = request.ReportId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteCustomizeReport"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteCustomizeReportResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the file that is uploaded to create custom weak password rules.
//
// @param request - DeleteCustomizedDictRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCustomizedDictResponse
func (client *Client) DeleteCustomizedDictWithContext(ctx context.Context, request *DeleteCustomizedDictRequest, runtime *dara.RuntimeOptions) (_result *DeleteCustomizedDictResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteCustomizedDict"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteCustomizedDictResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a periodic scan task. The task can be an image scan task, urgent vulnerability scan task, or virus scan task.
//
// @param request - DeleteCycleTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCycleTaskResponse
func (client *Client) DeleteCycleTaskWithContext(ctx context.Context, request *DeleteCycleTaskRequest, runtime *dara.RuntimeOptions) (_result *DeleteCycleTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ConfigId) {
		query["ConfigId"] = request.ConfigId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteCycleTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteCycleTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a DingTalk chatbot on the DingTalk Chatbot tab of the Notification Settings page.
//
// @param request - DeleteDingTalkRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDingTalkResponse
func (client *Client) DeleteDingTalkWithContext(ctx context.Context, request *DeleteDingTalkRequest, runtime *dara.RuntimeOptions) (_result *DeleteDingTalkResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Ids) {
		query["Ids"] = request.Ids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteDingTalk"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteDingTalkResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes core file monitoring rules.
//
// @param request - DeleteFileProtectRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteFileProtectRuleResponse
func (client *Client) DeleteFileProtectRuleWithContext(ctx context.Context, request *DeleteFileProtectRuleRequest, runtime *dara.RuntimeOptions) (_result *DeleteFileProtectRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteFileProtectRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteFileProtectRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a server group.
//
// Description:
//
// The **Default*	- server group that is provided by Security Center cannot be deleted. After you delete a group, the assets in this group are moved to the **Default*	- group.
//
// @param request - DeleteGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteGroupResponse
func (client *Client) DeleteGroupWithContext(ctx context.Context, request *DeleteGroupRequest, runtime *dara.RuntimeOptions) (_result *DeleteGroupResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteGroup"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteGroupResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a specified honeypot.
//
// @param request - DeleteHoneypotRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteHoneypotResponse
func (client *Client) DeleteHoneypotWithContext(ctx context.Context, request *DeleteHoneypotRequest, runtime *dara.RuntimeOptions) (_result *DeleteHoneypotResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.HoneypotId) {
		query["HoneypotId"] = request.HoneypotId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteHoneypot"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteHoneypotResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a specified management node.
//
// @param request - DeleteHoneypotNodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteHoneypotNodeResponse
func (client *Client) DeleteHoneypotNodeWithContext(ctx context.Context, request *DeleteHoneypotNodeRequest, runtime *dara.RuntimeOptions) (_result *DeleteHoneypotNodeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.NodeId) {
		query["NodeId"] = request.NodeId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteHoneypotNode"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteHoneypotNodeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a specified honeypot template.
//
// @param request - DeleteHoneypotPresetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteHoneypotPresetResponse
func (client *Client) DeleteHoneypotPresetWithContext(ctx context.Context, request *DeleteHoneypotPresetRequest, runtime *dara.RuntimeOptions) (_result *DeleteHoneypotPresetResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.HoneypotPresetId) {
		query["HoneypotPresetId"] = request.HoneypotPresetId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteHoneypotPreset"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteHoneypotPresetResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a specified probe.
//
// @param request - DeleteHoneypotProbeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteHoneypotProbeResponse
func (client *Client) DeleteHoneypotProbeWithContext(ctx context.Context, request *DeleteHoneypotProbeRequest, runtime *dara.RuntimeOptions) (_result *DeleteHoneypotProbeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.ProbeId) {
		query["ProbeId"] = request.ProbeId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteHoneypotProbe"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteHoneypotProbeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Delete the probe service.
//
// @param request - DeleteHoneypotProbeBindRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteHoneypotProbeBindResponse
func (client *Client) DeleteHoneypotProbeBindWithContext(ctx context.Context, request *DeleteHoneypotProbeBindRequest, runtime *dara.RuntimeOptions) (_result *DeleteHoneypotProbeBindResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BindId) {
		query["BindId"] = request.BindId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.ProbeId) {
		query["ProbeId"] = request.ProbeId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteHoneypotProbeBind"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteHoneypotProbeBindResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes a proxy node from a specified proxy cluster.
//
// @param request - DeleteHybridProxyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteHybridProxyResponse
func (client *Client) DeleteHybridProxyWithContext(ctx context.Context, request *DeleteHybridProxyRequest, runtime *dara.RuntimeOptions) (_result *DeleteHybridProxyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterName) {
		query["ClusterName"] = request.ClusterName
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteHybridProxy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteHybridProxyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a proxy cluster based on the name of the proxy cluster.
//
// @param request - DeleteHybridProxyClusterRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteHybridProxyClusterResponse
func (client *Client) DeleteHybridProxyClusterWithContext(ctx context.Context, request *DeleteHybridProxyClusterRequest, runtime *dara.RuntimeOptions) (_result *DeleteHybridProxyClusterResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterName) {
		query["ClusterName"] = request.ClusterName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteHybridProxyCluster"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteHybridProxyClusterResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an IDC probe that is created in Security Center.
//
// @param request - DeleteIdcProbeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteIdcProbeResponse
func (client *Client) DeleteIdcProbeWithContext(ctx context.Context, request *DeleteIdcProbeRequest, runtime *dara.RuntimeOptions) (_result *DeleteIdcProbeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteIdcProbe"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteIdcProbeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an alert handling rule.
//
// @param request - DeleteImageEventOperationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteImageEventOperationResponse
func (client *Client) DeleteImageEventOperationWithContext(ctx context.Context, request *DeleteImageEventOperationRequest, runtime *dara.RuntimeOptions) (_result *DeleteImageEventOperationResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteImageEventOperation"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteImageEventOperationResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an image vulnerability whitelist.
//
// @param request - DeleteImageVulWhitelistRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteImageVulWhitelistResponse
func (client *Client) DeleteImageVulWhitelistWithContext(ctx context.Context, request *DeleteImageVulWhitelistRequest, runtime *dara.RuntimeOptions) (_result *DeleteImageVulWhitelistResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Ids) {
		query["Ids"] = request.Ids
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteImageVulWhitelist"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteImageVulWhitelistResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the command that is used to install the Security Center agent.
//
// @param request - DeleteInstallCodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteInstallCodeResponse
func (client *Client) DeleteInstallCodeWithContext(ctx context.Context, request *DeleteInstallCodeRequest, runtime *dara.RuntimeOptions) (_result *DeleteInstallCodeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CaptchaCode) {
		query["CaptchaCode"] = request.CaptchaCode
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteInstallCode"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteInstallCodeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a defense rule in the container firewall module.
//
// @param request - DeleteInterceptionRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteInterceptionRuleResponse
func (client *Client) DeleteInterceptionRuleWithContext(ctx context.Context, request *DeleteInterceptionRuleRequest, runtime *dara.RuntimeOptions) (_result *DeleteInterceptionRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.RuleIds) {
		query["RuleIds"] = request.RuleIds
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteInterceptionRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteInterceptionRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes the network objects that are in effect in the container firewall.
//
// @param request - DeleteInterceptionTargetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteInterceptionTargetResponse
func (client *Client) DeleteInterceptionTargetWithContext(ctx context.Context, request *DeleteInterceptionTargetRequest, runtime *dara.RuntimeOptions) (_result *DeleteInterceptionTargetResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.TargetIds) {
		query["TargetIds"] = request.TargetIds
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteInterceptionTarget"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteInterceptionTargetResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the Kubernetes access information.
//
// @param request - DeleteK8sAccessInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteK8sAccessInfoResponse
func (client *Client) DeleteK8sAccessInfoWithContext(ctx context.Context, request *DeleteK8sAccessInfoRequest, runtime *dara.RuntimeOptions) (_result *DeleteK8sAccessInfoResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AliyunYundunGatewayApiName) {
		query["AliyunYundunGatewayApiName"] = request.AliyunYundunGatewayApiName
	}

	if !dara.IsNil(request.AliyunYundunGatewayPopName) {
		query["AliyunYundunGatewayPopName"] = request.AliyunYundunGatewayPopName
	}

	if !dara.IsNil(request.AliyunYundunGatewayProjectName) {
		query["AliyunYundunGatewayProjectName"] = request.AliyunYundunGatewayProjectName
	}

	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteK8sAccessInfo"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteK8sAccessInfoResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the basic configuration information from the logon security configurations for a specific asset.
//
// @param request - DeleteLoginBaseConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLoginBaseConfigResponse
func (client *Client) DeleteLoginBaseConfigWithContext(ctx context.Context, request *DeleteLoginBaseConfigRequest, runtime *dara.RuntimeOptions) (_result *DeleteLoginBaseConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Config) {
		query["Config"] = request.Config
	}

	if !dara.IsNil(request.Target) {
		query["Target"] = request.Target
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLoginBaseConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLoginBaseConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a whitelist rule for alerts generated for sensitive files that are detected by using the agentless detection feature.
//
// @param request - DeleteMaliciousFileWhitelistConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMaliciousFileWhitelistConfigResponse
func (client *Client) DeleteMaliciousFileWhitelistConfigWithContext(ctx context.Context, request *DeleteMaliciousFileWhitelistConfigRequest, runtime *dara.RuntimeOptions) (_result *DeleteMaliciousFileWhitelistConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ConfigId) {
		query["ConfigId"] = request.ConfigId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteMaliciousFileWhitelistConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteMaliciousFileWhitelistConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes the remarks added to alert events that are generated by the agentless detection feature.
//
// @param request - DeleteMaliciousNoteRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMaliciousNoteResponse
func (client *Client) DeleteMaliciousNoteWithContext(ctx context.Context, request *DeleteMaliciousNoteRequest, runtime *dara.RuntimeOptions) (_result *DeleteMaliciousNoteResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.NoteId) {
		query["NoteId"] = request.NoteId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteMaliciousNote"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteMaliciousNoteResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a member of the account managed by Security Center type of the multi-account management feature.
//
// Description:
//
// You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.
//
// @param request - DeleteMonitorAccountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMonitorAccountResponse
func (client *Client) DeleteMonitorAccountWithContext(ctx context.Context, request *DeleteMonitorAccountRequest, runtime *dara.RuntimeOptions) (_result *DeleteMonitorAccountResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AccountId) {
		query["AccountId"] = request.AccountId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteMonitorAccount"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteMonitorAccountResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes rules of the at-risk image blocking type.
//
// @param request - DeleteOpaStrategyNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteOpaStrategyNewResponse
func (client *Client) DeleteOpaStrategyNewWithContext(ctx context.Context, request *DeleteOpaStrategyNewRequest, runtime *dara.RuntimeOptions) (_result *DeleteOpaStrategyNewResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.StrategyIds) {
		query["StrategyIds"] = request.StrategyIds
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteOpaStrategyNew"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteOpaStrategyNewResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the configuration of an Object Storage Service (OSS) file detection policy.
//
// @param request - DeleteOssScanConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteOssScanConfigResponse
func (client *Client) DeleteOssScanConfigWithContext(ctx context.Context, request *DeleteOssScanConfigRequest, runtime *dara.RuntimeOptions) (_result *DeleteOssScanConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteOssScanConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteOssScanConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a private image repository by using the ID of the image repository.
//
// @param request - DeletePrivateRegistryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeletePrivateRegistryResponse
func (client *Client) DeletePrivateRegistryWithContext(ctx context.Context, request *DeletePrivateRegistryRequest, runtime *dara.RuntimeOptions) (_result *DeletePrivateRegistryResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.RegistryId) {
		query["RegistryId"] = request.RegistryId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeletePrivateRegistry"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeletePrivateRegistryResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a rule for container tamper-proofing.
//
// @param request - DeleteSasContainerWebDefenseRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSasContainerWebDefenseRuleResponse
func (client *Client) DeleteSasContainerWebDefenseRuleWithContext(ctx context.Context, request *DeleteSasContainerWebDefenseRuleRequest, runtime *dara.RuntimeOptions) (_result *DeleteSasContainerWebDefenseRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.RuleId) {
		query["RuleId"] = request.RuleId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteSasContainerWebDefenseRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteSasContainerWebDefenseRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a frequently used search condition by using the asset management feature of the Assets module in the Security Center console.
//
// @param request - DeleteSearchConditionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSearchConditionResponse
func (client *Client) DeleteSearchConditionWithContext(ctx context.Context, request *DeleteSearchConditionRequest, runtime *dara.RuntimeOptions) (_result *DeleteSearchConditionResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteSearchCondition"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteSearchConditionResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI DeleteSecurityEventMarkMissList is deprecated, please use Sas::2018-12-03::ModifySecurityEventMarkMissIndividually instead.
//
// Summary:
//
// Deletes multiple custom defense rules at a time. The custom defense rules are used to add false positive alerts to the whitelist.
//
// @param request - DeleteSecurityEventMarkMissListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSecurityEventMarkMissListResponse
func (client *Client) DeleteSecurityEventMarkMissListWithContext(ctx context.Context, request *DeleteSecurityEventMarkMissListRequest, runtime *dara.RuntimeOptions) (_result *DeleteSecurityEventMarkMissListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Ids) {
		query["Ids"] = request.Ids
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteSecurityEventMarkMissList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteSecurityEventMarkMissListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a service trail.
//
// @param request - DeleteServiceTrailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteServiceTrailResponse
func (client *Client) DeleteServiceTrailWithContext(ctx context.Context, request *DeleteServiceTrailRequest, runtime *dara.RuntimeOptions) (_result *DeleteServiceTrailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteServiceTrail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteServiceTrailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a policy task that is in the waiting state on the Playbook page.
//
// Description:
//
// Only the Enterprise and Ultimate editions of Security Center support this API operation.
//
// @param request - DeleteSoarStrategyTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSoarStrategyTaskResponse
func (client *Client) DeleteSoarStrategyTaskWithContext(ctx context.Context, request *DeleteSoarStrategyTaskRequest, runtime *dara.RuntimeOptions) (_result *DeleteSoarStrategyTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.StrategyTaskId) {
		query["StrategyTaskId"] = request.StrategyTaskId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteSoarStrategyTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteSoarStrategyTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a baseline check policy.
//
// @param request - DeleteStrategyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteStrategyResponse
func (client *Client) DeleteStrategyWithContext(ctx context.Context, request *DeleteStrategyRequest, runtime *dara.RuntimeOptions) (_result *DeleteStrategyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteStrategy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteStrategyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the description of an alert.
//
// @param request - DeleteSuspEventNodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSuspEventNodeResponse
func (client *Client) DeleteSuspEventNodeWithContext(ctx context.Context, request *DeleteSuspEventNodeRequest, runtime *dara.RuntimeOptions) (_result *DeleteSuspEventNodeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.NoteId) {
		query["NoteId"] = request.NoteId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteSuspEventNode"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteSuspEventNodeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes custom tags from assets.
//
// Description:
//
// Security Center provides asset importance tags and custom tags. You can call this operation to remove only the custom tag that is added to an asset.
//
// @param request - DeleteTagWithUuidRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteTagWithUuidResponse
func (client *Client) DeleteTagWithUuidWithContext(ctx context.Context, request *DeleteTagWithUuidRequest, runtime *dara.RuntimeOptions) (_result *DeleteTagWithUuidResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.TagName) {
		query["TagName"] = request.TagName
	}

	if !dara.IsNil(request.UuidList) {
		query["UuidList"] = request.UuidList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteTagWithUuid"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteTagWithUuidResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes anti-ransomware policies that are created for databases.
//
// @param request - DeleteUniBackupPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteUniBackupPolicyResponse
func (client *Client) DeleteUniBackupPolicyWithContext(ctx context.Context, request *DeleteUniBackupPolicyRequest, runtime *dara.RuntimeOptions) (_result *DeleteUniBackupPolicyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.PolicyId) {
		query["PolicyId"] = request.PolicyId
	}

	if !dara.IsNil(request.PolicyIds) {
		query["PolicyIds"] = request.PolicyIds
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteUniBackupPolicy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteUniBackupPolicyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a honeypot.
//
// @param request - DeleteVpcHoneyPotRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteVpcHoneyPotResponse
func (client *Client) DeleteVpcHoneyPotWithContext(ctx context.Context, request *DeleteVpcHoneyPotRequest, runtime *dara.RuntimeOptions) (_result *DeleteVpcHoneyPotResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.VpcId) {
		query["VpcId"] = request.VpcId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteVpcHoneyPot"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteVpcHoneyPotResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes configurations of of an automatic vulnerability fixing task at a time on the Playbook page.
//
// @param request - DeleteVulAutoRepairConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteVulAutoRepairConfigResponse
func (client *Client) DeleteVulAutoRepairConfigWithContext(ctx context.Context, request *DeleteVulAutoRepairConfigRequest, runtime *dara.RuntimeOptions) (_result *DeleteVulAutoRepairConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AliasName) {
		query["AliasName"] = request.AliasName
	}

	if !dara.IsNil(request.ConfigIdList) {
		query["ConfigIdList"] = request.ConfigIdList
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteVulAutoRepairConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteVulAutoRepairConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a specified vulnerability whitelist.
//
// @param request - DeleteVulWhitelistRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteVulWhitelistResponse
func (client *Client) DeleteVulWhitelistWithContext(ctx context.Context, request *DeleteVulWhitelistRequest, runtime *dara.RuntimeOptions) (_result *DeleteVulWhitelistResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.Whitelist) {
		query["Whitelist"] = request.Whitelist
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteVulWhitelist"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteVulWhitelistResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of AccessKey pair leaks.
//
// @param request - DescribeAccessKeyLeakDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAccessKeyLeakDetailResponse
func (client *Client) DescribeAccessKeyLeakDetailWithContext(ctx context.Context, request *DescribeAccessKeyLeakDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribeAccessKeyLeakDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeAccessKeyLeakDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeAccessKeyLeakDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the AccessKey pair leaks that are detected on your assets.
//
// @param request - DescribeAccesskeyLeakListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAccesskeyLeakListResponse
func (client *Client) DescribeAccesskeyLeakListWithContext(ctx context.Context, request *DescribeAccesskeyLeakListRequest, runtime *dara.RuntimeOptions) (_result *DescribeAccesskeyLeakListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Query) {
		query["Query"] = request.Query
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.StartTs) {
		query["StartTs"] = request.StartTs
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeAccesskeyLeakList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeAccesskeyLeakListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the affected servers in the result of a virus scan task.
//
// @param request - DescribeAffectedAssetsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAffectedAssetsResponse
func (client *Client) DescribeAffectedAssetsWithContext(ctx context.Context, request *DescribeAffectedAssetsRequest, runtime *dara.RuntimeOptions) (_result *DescribeAffectedAssetsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Current) {
		query["Current"] = request.Current
	}

	if !dara.IsNil(request.Levels) {
		query["Levels"] = request.Levels
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeAffectedAssets"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeAffectedAssetsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of malicious image samples.
//
// @param request - DescribeAffectedMaliciousFileImagesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAffectedMaliciousFileImagesResponse
func (client *Client) DescribeAffectedMaliciousFileImagesWithContext(ctx context.Context, request *DescribeAffectedMaliciousFileImagesRequest, runtime *dara.RuntimeOptions) (_result *DescribeAffectedMaliciousFileImagesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.ClusterName) {
		query["ClusterName"] = request.ClusterName
	}

	if !dara.IsNil(request.ContainerId) {
		query["ContainerId"] = request.ContainerId
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Image) {
		query["Image"] = request.Image
	}

	if !dara.IsNil(request.ImageDigest) {
		query["ImageDigest"] = request.ImageDigest
	}

	if !dara.IsNil(request.ImageLayer) {
		query["ImageLayer"] = request.ImageLayer
	}

	if !dara.IsNil(request.ImageTag) {
		query["ImageTag"] = request.ImageTag
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Levels) {
		query["Levels"] = request.Levels
	}

	if !dara.IsNil(request.MaliciousMd5) {
		query["MaliciousMd5"] = request.MaliciousMd5
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Pod) {
		query["Pod"] = request.Pod
	}

	if !dara.IsNil(request.RepoId) {
		query["RepoId"] = request.RepoId
	}

	if !dara.IsNil(request.RepoInstanceId) {
		query["RepoInstanceId"] = request.RepoInstanceId
	}

	if !dara.IsNil(request.RepoName) {
		query["RepoName"] = request.RepoName
	}

	if !dara.IsNil(request.RepoNamespace) {
		query["RepoNamespace"] = request.RepoNamespace
	}

	if !dara.IsNil(request.RepoRegionId) {
		query["RepoRegionId"] = request.RepoRegionId
	}

	if !dara.IsNil(request.ScanRange) {
		query["ScanRange"] = request.ScanRange
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeAffectedMaliciousFileImages"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeAffectedMaliciousFileImagesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the installation status of the Security Center agent after you run an installation command by using Cloud Assistant. You can call this operation to query the installation status only if the installation request is initiated within 2 minutes.
//
// @param request - DescribeAgentInstallStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAgentInstallStatusResponse
func (client *Client) DescribeAgentInstallStatusWithContext(ctx context.Context, request *DescribeAgentInstallStatusRequest, runtime *dara.RuntimeOptions) (_result *DescribeAgentInstallStatusResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeAgentInstallStatus"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeAgentInstallStatusResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the list of assets on which a specific type of sensitive files are detected by using the agentless detection feature.
//
// Description:
//
// You can call this operation only when the agentless detection feature is purchased by using the pay-as-you-go billing method within your Alibaba Cloud account.
//
// @param tmpReq - DescribeAgentlessSensitiveFileByKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAgentlessSensitiveFileByKeyResponse
func (client *Client) DescribeAgentlessSensitiveFileByKeyWithContext(ctx context.Context, tmpReq *DescribeAgentlessSensitiveFileByKeyRequest, runtime *dara.RuntimeOptions) (_result *DescribeAgentlessSensitiveFileByKeyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &DescribeAgentlessSensitiveFileByKeyShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.ScanRange) {
		request.ScanRangeShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScanRange, dara.String("ScanRange"), dara.String("json"))
	}

	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeAgentlessSensitiveFileByKey"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeAgentlessSensitiveFileByKeyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of an alert event. An alert event consists of alerts and exceptions. Each alert event is associated with multiple exceptions.
//
// @param request - DescribeAlarmEventDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAlarmEventDetailResponse
func (client *Client) DescribeAlarmEventDetailWithContext(ctx context.Context, request *DescribeAlarmEventDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribeAlarmEventDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AlarmUniqueInfo) {
		query["AlarmUniqueInfo"] = request.AlarmUniqueInfo
	}

	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeAlarmEventDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeAlarmEventDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI DescribeAlarmEventStackInfo is deprecated
//
// Summary:
//
// Queries the stack information about an alert event.
//
// @param request - DescribeAlarmEventStackInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAlarmEventStackInfoResponse
func (client *Client) DescribeAlarmEventStackInfoWithContext(ctx context.Context, request *DescribeAlarmEventStackInfoRequest, runtime *dara.RuntimeOptions) (_result *DescribeAlarmEventStackInfoResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.EventName) {
		query["EventName"] = request.EventName
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.UniqueInfo) {
		query["UniqueInfo"] = request.UniqueInfo
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeAlarmEventStackInfo"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeAlarmEventStackInfoResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about all server groups.
//
// @param request - DescribeAllGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAllGroupsResponse
func (client *Client) DescribeAllGroupsWithContext(ctx context.Context, request *DescribeAllGroupsRequest, runtime *dara.RuntimeOptions) (_result *DescribeAllGroupsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeAllGroups"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeAllGroupsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries baselines that are used in image baseline checks.
//
// @param request - DescribeAllImageBaselineRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAllImageBaselineResponse
func (client *Client) DescribeAllImageBaselineWithContext(ctx context.Context, request *DescribeAllImageBaselineRequest, runtime *dara.RuntimeOptions) (_result *DescribeAllImageBaselineResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeAllImageBaseline"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeAllImageBaselineResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics on global security events, including the numbers of unfixed vulnerabilities, baseline risks, and alerts.
//
// @param request - DescribeAllRegionsStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAllRegionsStatisticsResponse
func (client *Client) DescribeAllRegionsStatisticsWithContext(ctx context.Context, request *DescribeAllRegionsStatisticsRequest, runtime *dara.RuntimeOptions) (_result *DescribeAllRegionsStatisticsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeAllRegionsStatistics"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeAllRegionsStatisticsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries created defense rules against brute-force attacks.
//
// @param request - DescribeAntiBruteForceRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntiBruteForceRulesResponse
func (client *Client) DescribeAntiBruteForceRulesWithContext(ctx context.Context, request *DescribeAntiBruteForceRulesRequest, runtime *dara.RuntimeOptions) (_result *DescribeAntiBruteForceRulesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeAntiBruteForceRules"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeAntiBruteForceRulesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI DescribeAssetDetailByUuid is deprecated, please use Sas::2018-12-03::GetAssetDetailByUuid instead.
//
// Summary:
//
// Queries the details of a server and the extended information about the server by using the UUID of the server.
//
// Description:
//
// This operation will be discontinued soon. You must call the [GetAssetDetailByUuid](~~GetAssetDetailByUuid~~) operation to query the details of the server.
//
// @param request - DescribeAssetDetailByUuidRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAssetDetailByUuidResponse
func (client *Client) DescribeAssetDetailByUuidWithContext(ctx context.Context, request *DescribeAssetDetailByUuidRequest, runtime *dara.RuntimeOptions) (_result *DescribeAssetDetailByUuidResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeAssetDetailByUuid"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeAssetDetailByUuidResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of Elastic Compute Service (ECS) instances.
//
// @param request - DescribeAssetDetailByUuidsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAssetDetailByUuidsResponse
func (client *Client) DescribeAssetDetailByUuidsWithContext(ctx context.Context, request *DescribeAssetDetailByUuidsRequest, runtime *dara.RuntimeOptions) (_result *DescribeAssetDetailByUuidsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeAssetDetailByUuids"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeAssetDetailByUuidsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of Java processes in an asset by using the asset fingerprints feature of Security Center.
//
// @param request - DescribeAssetsScaProcessNumRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAssetsScaProcessNumResponse
func (client *Client) DescribeAssetsScaProcessNumWithContext(ctx context.Context, request *DescribeAssetsScaProcessNumRequest, runtime *dara.RuntimeOptions) (_result *DescribeAssetsScaProcessNumResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BizType) {
		query["BizType"] = request.BizType
	}

	if !dara.IsNil(request.UuidList) {
		query["UuidList"] = request.UuidList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeAssetsScaProcessNum"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeAssetsScaProcessNumResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the risk information about containers.
//
// @param request - DescribeAssetsSecurityEventSummaryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAssetsSecurityEventSummaryResponse
func (client *Client) DescribeAssetsSecurityEventSummaryWithContext(ctx context.Context, request *DescribeAssetsSecurityEventSummaryRequest, runtime *dara.RuntimeOptions) (_result *DescribeAssetsSecurityEventSummaryResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.ContainerFieldName) {
		query["ContainerFieldName"] = request.ContainerFieldName
	}

	if !dara.IsNil(request.ContainerFieldValue) {
		query["ContainerFieldValue"] = request.ContainerFieldValue
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeAssetsSecurityEventSummary"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeAssetsSecurityEventSummaryResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics of attack analysis.
//
// @param request - DescribeAttackAnalysisDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAttackAnalysisDataResponse
func (client *Client) DescribeAttackAnalysisDataWithContext(ctx context.Context, request *DescribeAttackAnalysisDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeAttackAnalysisDataResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Base64) {
		query["Base64"] = request.Base64
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Data) {
		query["Data"] = request.Data
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeAttackAnalysisData"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeAttackAnalysisDataResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of witnesses.
//
// @param request - DescribeAttestorsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAttestorsResponse
func (client *Client) DescribeAttestorsWithContext(ctx context.Context, request *DescribeAttestorsRequest, runtime *dara.RuntimeOptions) (_result *DescribeAttestorsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeAttestors"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeAttestorsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a file to which archived alert events are exported.
//
// @param request - DescribeBackUpExportInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBackUpExportInfoResponse
func (client *Client) DescribeBackUpExportInfoWithContext(ctx context.Context, request *DescribeBackUpExportInfoRequest, runtime *dara.RuntimeOptions) (_result *DescribeBackUpExportInfoResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.ExportType) {
		query["ExportType"] = request.ExportType
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeBackUpExportInfo"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeBackUpExportInfoResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the servers on which the anti-ransomware agent is installed in a specified region.
//
// Description:
//
// You can call the DescribeBackupClients operation to query the servers on which the anti-ransomware agent is installed in a specified region.
//
// @param request - DescribeBackupClientsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBackupClientsResponse
func (client *Client) DescribeBackupClientsWithContext(ctx context.Context, request *DescribeBackupClientsRequest, runtime *dara.RuntimeOptions) (_result *DescribeBackupClientsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SupportRegionId) {
		query["SupportRegionId"] = request.SupportRegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeBackupClients"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeBackupClientsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries backup files.
//
// @param request - DescribeBackupFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBackupFilesResponse
func (client *Client) DescribeBackupFilesWithContext(ctx context.Context, request *DescribeBackupFilesRequest, runtime *dara.RuntimeOptions) (_result *DescribeBackupFilesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Path) {
		query["Path"] = request.Path
	}

	if !dara.IsNil(request.SnapshotHash) {
		query["SnapshotHash"] = request.SnapshotHash
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeBackupFiles"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeBackupFilesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the backup status of a sever to which an anti-ransomware policy is applied.
//
// @param request - DescribeBackupMachineStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBackupMachineStatusResponse
func (client *Client) DescribeBackupMachineStatusWithContext(ctx context.Context, request *DescribeBackupMachineStatusRequest, runtime *dara.RuntimeOptions) (_result *DescribeBackupMachineStatusResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.PolicyId) {
		query["PolicyId"] = request.PolicyId
	}

	if !dara.IsNil(request.PolicyVersion) {
		query["PolicyVersion"] = request.PolicyVersion
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeBackupMachineStatus"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeBackupMachineStatusResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries anti-ransomware policies.
//
// @param request - DescribeBackupPoliciesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBackupPoliciesResponse
func (client *Client) DescribeBackupPoliciesWithContext(ctx context.Context, request *DescribeBackupPoliciesRequest, runtime *dara.RuntimeOptions) (_result *DescribeBackupPoliciesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.MachineRemark) {
		query["MachineRemark"] = request.MachineRemark
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeBackupPolicies"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeBackupPoliciesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of an anti-ransomware policy for servers.
//
// @param request - DescribeBackupPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBackupPolicyResponse
func (client *Client) DescribeBackupPolicyWithContext(ctx context.Context, request *DescribeBackupPolicyRequest, runtime *dara.RuntimeOptions) (_result *DescribeBackupPolicyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeBackupPolicy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeBackupPolicyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries binary security policies.
//
// @param request - DescribeBinarySecurityPoliciesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBinarySecurityPoliciesResponse
func (client *Client) DescribeBinarySecurityPoliciesWithContext(ctx context.Context, request *DescribeBinarySecurityPoliciesRequest, runtime *dara.RuntimeOptions) (_result *DescribeBinarySecurityPoliciesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeBinarySecurityPolicies"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeBinarySecurityPoliciesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the IP addresses that are blocked by a defense rule against brute-force attacks.
//
// @param request - DescribeBruteForceRecordsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBruteForceRecordsResponse
func (client *Client) DescribeBruteForceRecordsWithContext(ctx context.Context, request *DescribeBruteForceRecordsRequest, runtime *dara.RuntimeOptions) (_result *DescribeBruteForceRecordsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BlockIp) {
		query["BlockIp"] = request.BlockIp
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeBruteForceRecords"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeBruteForceRecordsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// The source IP address of the request.
//
// @param request - DescribeBruteForceSummaryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBruteForceSummaryResponse
func (client *Client) DescribeBruteForceSummaryWithContext(ctx context.Context, request *DescribeBruteForceSummaryRequest, runtime *dara.RuntimeOptions) (_result *DescribeBruteForceSummaryResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeBruteForceSummary"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeBruteForceSummaryResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the list of fixable vulnerabilities.
//
// @param request - DescribeCanFixVulListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCanFixVulListResponse
func (client *Client) DescribeCanFixVulListWithContext(ctx context.Context, request *DescribeCanFixVulListRequest, runtime *dara.RuntimeOptions) (_result *DescribeCanFixVulListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AliasName) {
		query["AliasName"] = request.AliasName
	}

	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.ClusterName) {
		query["ClusterName"] = request.ClusterName
	}

	if !dara.IsNil(request.ContainerId) {
		query["ContainerId"] = request.ContainerId
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Dealed) {
		query["Dealed"] = request.Dealed
	}

	if !dara.IsNil(request.Digest) {
		query["Digest"] = request.Digest
	}

	if !dara.IsNil(request.Image) {
		query["Image"] = request.Image
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.Necessity) {
		query["Necessity"] = request.Necessity
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Pod) {
		query["Pod"] = request.Pod
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.RepoId) {
		query["RepoId"] = request.RepoId
	}

	if !dara.IsNil(request.RepoId) {
		query["RepoId"] = request.RepoId
	}

	if !dara.IsNil(request.RepoInstanceId) {
		query["RepoInstanceId"] = request.RepoInstanceId
	}

	if !dara.IsNil(request.RepoName) {
		query["RepoName"] = request.RepoName
	}

	if !dara.IsNil(request.RepoName) {
		query["RepoName"] = request.RepoName
	}

	if !dara.IsNil(request.RepoNamespace) {
		query["RepoNamespace"] = request.RepoNamespace
	}

	if !dara.IsNil(request.RepoRegionId) {
		query["RepoRegionId"] = request.RepoRegionId
	}

	if !dara.IsNil(request.ScanRange) {
		query["ScanRange"] = request.ScanRange
	}

	if !dara.IsNil(request.StatusList) {
		query["StatusList"] = request.StatusList
	}

	if !dara.IsNil(request.Tag) {
		query["Tag"] = request.Tag
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCanFixVulList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCanFixVulListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the chart data of a security report.
//
// @param request - DescribeChartDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeChartDataResponse
func (client *Client) DescribeChartDataWithContext(ctx context.Context, request *DescribeChartDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeChartDataResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CharId) {
		query["CharId"] = request.CharId
	}

	if !dara.IsNil(request.ChartId) {
		query["ChartId"] = request.ChartId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.ReportId) {
		query["ReportId"] = request.ReportId
	}

	if !dara.IsNil(request.TimeEnd) {
		query["TimeEnd"] = request.TimeEnd
	}

	if !dara.IsNil(request.TimeStart) {
		query["TimeStart"] = request.TimeStart
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeChartData"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeChartDataResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the charts that are supported by using the security report feature of Security Center.
//
// @param request - DescribeChartListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeChartListResponse
func (client *Client) DescribeChartListWithContext(ctx context.Context, request *DescribeChartListRequest, runtime *dara.RuntimeOptions) (_result *DescribeChartListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.ProjectCode) {
		query["ProjectCode"] = request.ProjectCode
	}

	if !dara.IsNil(request.ReportId) {
		query["ReportId"] = request.ReportId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeChartList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeChartListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of weak passwords that can cause high risks to your assets.
//
// @param request - DescribeCheckEcsWarningsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCheckEcsWarningsResponse
func (client *Client) DescribeCheckEcsWarningsWithContext(ctx context.Context, request *DescribeCheckEcsWarningsRequest, runtime *dara.RuntimeOptions) (_result *DescribeCheckEcsWarningsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCheckEcsWarnings"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCheckEcsWarningsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the parameters that you can configure to fix specified risk items.
//
// @param request - DescribeCheckFixDetailsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCheckFixDetailsResponse
func (client *Client) DescribeCheckFixDetailsWithContext(ctx context.Context, request *DescribeCheckFixDetailsRequest, runtime *dara.RuntimeOptions) (_result *DescribeCheckFixDetailsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckIds) {
		query["CheckIds"] = request.CheckIds
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.RiskId) {
		query["RiskId"] = request.RiskId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCheckFixDetails"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCheckFixDetailsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of alerts that are triggered by a check item.
//
// @param request - DescribeCheckWarningCountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCheckWarningCountResponse
func (client *Client) DescribeCheckWarningCountWithContext(ctx context.Context, request *DescribeCheckWarningCountRequest, runtime *dara.RuntimeOptions) (_result *DescribeCheckWarningCountResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AliUid) {
		query["AliUid"] = request.AliUid
	}

	if !dara.IsNil(request.CheckId) {
		query["CheckId"] = request.CheckId
	}

	if !dara.IsNil(request.RiskId) {
		query["RiskId"] = request.RiskId
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCheckWarningCount"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCheckWarningCountResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details about a specified check item.
//
// @param request - DescribeCheckWarningDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCheckWarningDetailResponse
func (client *Client) DescribeCheckWarningDetailWithContext(ctx context.Context, request *DescribeCheckWarningDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribeCheckWarningDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckId) {
		query["CheckId"] = request.CheckId
	}

	if !dara.IsNil(request.CheckWarningId) {
		query["CheckWarningId"] = request.CheckWarningId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCheckWarningDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCheckWarningDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the servers on which the same risk item is detected by specifying a baseline and a check item.
//
// @param request - DescribeCheckWarningMachinesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCheckWarningMachinesResponse
func (client *Client) DescribeCheckWarningMachinesWithContext(ctx context.Context, request *DescribeCheckWarningMachinesRequest, runtime *dara.RuntimeOptions) (_result *DescribeCheckWarningMachinesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckId) {
		query["CheckId"] = request.CheckId
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.FilterUuid) {
		query["FilterUuid"] = request.FilterUuid
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.RiskId) {
		query["RiskId"] = request.RiskId
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCheckWarningMachines"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCheckWarningMachinesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistical information about baseline check results. The information includes the number of servers on which a baseline check is performed, the number of baseline check items, and the pass rate of check items in the last baseline check.
//
// @param request - DescribeCheckWarningSummaryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCheckWarningSummaryResponse
func (client *Client) DescribeCheckWarningSummaryWithContext(ctx context.Context, request *DescribeCheckWarningSummaryRequest, runtime *dara.RuntimeOptions) (_result *DescribeCheckWarningSummaryResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.ContainerFieldName) {
		query["ContainerFieldName"] = request.ContainerFieldName
	}

	if !dara.IsNil(request.ContainerFieldValue) {
		query["ContainerFieldValue"] = request.ContainerFieldValue
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RiskName) {
		query["RiskName"] = request.RiskName
	}

	if !dara.IsNil(request.RiskStatus) {
		query["RiskStatus"] = request.RiskStatus
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	if !dara.IsNil(request.StrategyId) {
		query["StrategyId"] = request.StrategyId
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	if !dara.IsNil(request.TypeName) {
		query["TypeName"] = request.TypeName
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCheckWarningSummary"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCheckWarningSummaryResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries information about specified risk items and the check items of a specified server.
//
// @param request - DescribeCheckWarningsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCheckWarningsResponse
func (client *Client) DescribeCheckWarningsWithContext(ctx context.Context, request *DescribeCheckWarningsRequest, runtime *dara.RuntimeOptions) (_result *DescribeCheckWarningsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckId) {
		query["CheckId"] = request.CheckId
	}

	if !dara.IsNil(request.CheckType) {
		query["CheckType"] = request.CheckType
	}

	if !dara.IsNil(request.ContainerName) {
		query["ContainerName"] = request.ContainerName
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.RiskId) {
		query["RiskId"] = request.RiskId
	}

	if !dara.IsNil(request.RiskStatus) {
		query["RiskStatus"] = request.RiskStatus
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCheckWarnings"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCheckWarningsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configurations of the Security Center agent.
//
// @param request - DescribeClientConfSetupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeClientConfSetupResponse
func (client *Client) DescribeClientConfSetupWithContext(ctx context.Context, request *DescribeClientConfSetupRequest, runtime *dara.RuntimeOptions) (_result *DescribeClientConfSetupResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.StrategyTag) {
		query["StrategyTag"] = request.StrategyTag
	}

	if !dara.IsNil(request.StrategyTagValue) {
		query["StrategyTagValue"] = request.StrategyTagValue
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeClientConfSetup"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeClientConfSetupResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configurations of servers to which different tags are added.
//
// @param request - DescribeClientConfStrategyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeClientConfStrategyResponse
func (client *Client) DescribeClientConfStrategyWithContext(ctx context.Context, request *DescribeClientConfStrategyRequest, runtime *dara.RuntimeOptions) (_result *DescribeClientConfStrategyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Tag) {
		query["Tag"] = request.Tag
	}

	if !dara.IsNil(request.TagValue) {
		query["TagValue"] = request.TagValue
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeClientConfStrategy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeClientConfStrategyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of agent issue types.
//
// @param request - DescribeClientProblemTypeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeClientProblemTypeResponse
func (client *Client) DescribeClientProblemTypeWithContext(ctx context.Context, request *DescribeClientProblemTypeRequest, runtime *dara.RuntimeOptions) (_result *DescribeClientProblemTypeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeClientProblemType"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeClientProblemTypeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about assets that meet specific search conditions. For example, you can search for assets by the instance name or region of the asset.
//
// Description:
//
// You can search for an asset by using search conditions, such as the instance ID, instance name, virtual private cloud (VPC) ID, region, and public IP address. You can also configure a logical relationship between multiple search conditions to search for the assets that meet the search conditions.
//
// @param request - DescribeCloudCenterInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCloudCenterInstancesResponse
func (client *Client) DescribeCloudCenterInstancesWithContext(ctx context.Context, request *DescribeCloudCenterInstancesRequest, runtime *dara.RuntimeOptions) (_result *DescribeCloudCenterInstancesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Criteria) {
		query["Criteria"] = request.Criteria
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Flags) {
		query["Flags"] = request.Flags
	}

	if !dara.IsNil(request.Importance) {
		query["Importance"] = request.Importance
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.LogicalExp) {
		query["LogicalExp"] = request.LogicalExp
	}

	if !dara.IsNil(request.MachineTypes) {
		query["MachineTypes"] = request.MachineTypes
	}

	if !dara.IsNil(request.NextToken) {
		query["NextToken"] = request.NextToken
	}

	if !dara.IsNil(request.NoGroupTrace) {
		query["NoGroupTrace"] = request.NoGroupTrace
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.UseNextToken) {
		query["UseNextToken"] = request.UseNextToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCloudCenterInstances"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCloudCenterInstancesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the multi-cloud assets added to Security Center.
//
// @param request - DescribeCloudVendorAccountAKListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCloudVendorAccountAKListResponse
func (client *Client) DescribeCloudVendorAccountAKListWithContext(ctx context.Context, request *DescribeCloudVendorAccountAKListRequest, runtime *dara.RuntimeOptions) (_result *DescribeCloudVendorAccountAKListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AuthIds) {
		query["AuthIds"] = request.AuthIds
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	if !dara.IsNil(request.SubAccountName) {
		query["SubAccountName"] = request.SubAccountName
	}

	if !dara.IsNil(request.VendorAuthAlias) {
		query["VendorAuthAlias"] = request.VendorAuthAlias
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCloudVendorAccountAKList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCloudVendorAccountAKListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Query the trail configuration attributes of the corresponding AK configuration
//
// @param request - DescribeCloudVendorTrialConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCloudVendorTrialConfigResponse
func (client *Client) DescribeCloudVendorTrialConfigWithContext(ctx context.Context, request *DescribeCloudVendorTrialConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeCloudVendorTrialConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCloudVendorTrialConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCloudVendorTrialConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about an cluster based on the cluster ID.
//
// @param request - DescribeClusterBasicInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeClusterBasicInfoResponse
func (client *Client) DescribeClusterBasicInfoWithContext(ctx context.Context, request *DescribeClusterBasicInfoRequest, runtime *dara.RuntimeOptions) (_result *DescribeClusterBasicInfoResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeClusterBasicInfo"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeClusterBasicInfoResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistical information about host security.
//
// @param request - DescribeClusterHostSecuritySummaryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeClusterHostSecuritySummaryResponse
func (client *Client) DescribeClusterHostSecuritySummaryWithContext(ctx context.Context, request *DescribeClusterHostSecuritySummaryRequest, runtime *dara.RuntimeOptions) (_result *DescribeClusterHostSecuritySummaryResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.ContainerFieldName) {
		query["ContainerFieldName"] = request.ContainerFieldName
	}

	if !dara.IsNil(request.ContainerFieldValue) {
		query["ContainerFieldValue"] = request.ContainerFieldValue
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeClusterHostSecuritySummary"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeClusterHostSecuritySummaryResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistical information about image security.
//
// @param request - DescribeClusterImageSecuritySummaryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeClusterImageSecuritySummaryResponse
func (client *Client) DescribeClusterImageSecuritySummaryWithContext(ctx context.Context, request *DescribeClusterImageSecuritySummaryRequest, runtime *dara.RuntimeOptions) (_result *DescribeClusterImageSecuritySummaryResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.ContainerFieldName) {
		query["ContainerFieldName"] = request.ContainerFieldName
	}

	if !dara.IsNil(request.ContainerFieldValue) {
		query["ContainerFieldValue"] = request.ContainerFieldValue
	}

	if !dara.IsNil(request.ImageDigest) {
		query["ImageDigest"] = request.ImageDigest
	}

	if !dara.IsNil(request.ImageRepoName) {
		query["ImageRepoName"] = request.ImageRepoName
	}

	if !dara.IsNil(request.ImageRepoNamespace) {
		query["ImageRepoNamespace"] = request.ImageRepoNamespace
	}

	if !dara.IsNil(request.ImageTag) {
		query["ImageTag"] = request.ImageTag
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeClusterImageSecuritySummary"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeClusterImageSecuritySummaryResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a cluster.
//
// @param request - DescribeClusterInfoListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeClusterInfoListResponse
func (client *Client) DescribeClusterInfoListWithContext(ctx context.Context, request *DescribeClusterInfoListRequest, runtime *dara.RuntimeOptions) (_result *DescribeClusterInfoListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Target) {
		query["Target"] = request.Target
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeClusterInfoList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeClusterInfoListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries information about the network topology edge by cluster.
//
// @param request - DescribeClusterNetworkRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeClusterNetworkResponse
func (client *Client) DescribeClusterNetworkWithContext(ctx context.Context, request *DescribeClusterNetworkRequest, runtime *dara.RuntimeOptions) (_result *DescribeClusterNetworkResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeClusterNetwork"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeClusterNetworkResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics of vulnerabilities that are detected on a cluster.
//
// @param request - DescribeClusterVulStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeClusterVulStatisticsResponse
func (client *Client) DescribeClusterVulStatisticsWithContext(ctx context.Context, request *DescribeClusterVulStatisticsRequest, runtime *dara.RuntimeOptions) (_result *DescribeClusterVulStatisticsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.Types) {
		query["Types"] = request.Types
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeClusterVulStatistics"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeClusterVulStatisticsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a specified feature.
//
// @param request - DescribeCommonOverallConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCommonOverallConfigResponse
func (client *Client) DescribeCommonOverallConfigWithContext(ctx context.Context, request *DescribeCommonOverallConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeCommonOverallConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCommonOverallConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCommonOverallConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configurations of features in proactive defense.
//
// @param request - DescribeCommonOverallConfigListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCommonOverallConfigListResponse
func (client *Client) DescribeCommonOverallConfigListWithContext(ctx context.Context, request *DescribeCommonOverallConfigListRequest, runtime *dara.RuntimeOptions) (_result *DescribeCommonOverallConfigListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.TypeList) {
		query["TypeList"] = request.TypeList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCommonOverallConfigList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCommonOverallConfigListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configurations of the proactive defense feature.
//
// @param request - DescribeCommonTargetConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCommonTargetConfigResponse
func (client *Client) DescribeCommonTargetConfigWithContext(ctx context.Context, request *DescribeCommonTargetConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeCommonTargetConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCommonTargetConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCommonTargetConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about the servers based on the specified configuration item.
//
// @param request - DescribeCommonTargetResultListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCommonTargetResultListResponse
func (client *Client) DescribeCommonTargetResultListWithContext(ctx context.Context, request *DescribeCommonTargetResultListRequest, runtime *dara.RuntimeOptions) (_result *DescribeCommonTargetResultListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCommonTargetResultList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCommonTargetResultListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the priorities to fix vulnerabilities.
//
// @param request - DescribeConcernNecessityRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeConcernNecessityResponse
func (client *Client) DescribeConcernNecessityWithContext(ctx context.Context, request *DescribeConcernNecessityRequest, runtime *dara.RuntimeOptions) (_result *DescribeConcernNecessityResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeConcernNecessity"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeConcernNecessityResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a containerized application.
//
// @param request - DescribeContainerAppsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeContainerAppsResponse
func (client *Client) DescribeContainerAppsWithContext(ctx context.Context, request *DescribeContainerAppsRequest, runtime *dara.RuntimeOptions) (_result *DescribeContainerAppsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.FieldValue) {
		query["FieldValue"] = request.FieldValue
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeContainerApps"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeContainerAppsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains the filter conditions that you can use to filter the containers.
//
// @param request - DescribeContainerCriteriaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeContainerCriteriaResponse
func (client *Client) DescribeContainerCriteriaWithContext(ctx context.Context, request *DescribeContainerCriteriaRequest, runtime *dara.RuntimeOptions) (_result *DescribeContainerCriteriaResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.GroupField) {
		query["GroupField"] = request.GroupField
	}

	if !dara.IsNil(request.Value) {
		query["Value"] = request.Value
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeContainerCriteria"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeContainerCriteriaResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the attribute details of containers.
//
// @param request - DescribeContainerGroupedFieldDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeContainerGroupedFieldDetailResponse
func (client *Client) DescribeContainerGroupedFieldDetailWithContext(ctx context.Context, request *DescribeContainerGroupedFieldDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribeContainerGroupedFieldDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Criteria) {
		query["Criteria"] = request.Criteria
	}

	if !dara.IsNil(request.GroupField) {
		query["GroupField"] = request.GroupField
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeContainerGroupedFieldDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeContainerGroupedFieldDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about containers.
//
// @param request - DescribeContainerInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeContainerInstancesResponse
func (client *Client) DescribeContainerInstancesWithContext(ctx context.Context, request *DescribeContainerInstancesRequest, runtime *dara.RuntimeOptions) (_result *DescribeContainerInstancesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Criteria) {
		query["Criteria"] = request.Criteria
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.LogicalExp) {
		query["LogicalExp"] = request.LogicalExp
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeContainerInstances"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeContainerInstancesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configurations of the vulnerability scan of one or more running container applications.
//
// @param request - DescribeContainerScanConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeContainerScanConfigResponse
func (client *Client) DescribeContainerScanConfigWithContext(ctx context.Context, request *DescribeContainerScanConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeContainerScanConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeContainerScanConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeContainerScanConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the Kritis status of a Container Service for Kubernetes (ACK) cluster.
//
// @param request - DescribeContainerServiceK8sClusterKritisStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeContainerServiceK8sClusterKritisStatusResponse
func (client *Client) DescribeContainerServiceK8sClusterKritisStatusWithContext(ctx context.Context, request *DescribeContainerServiceK8sClusterKritisStatusRequest, runtime *dara.RuntimeOptions) (_result *DescribeContainerServiceK8sClusterKritisStatusResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeContainerServiceK8sClusterKritisStatus"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeContainerServiceK8sClusterKritisStatusResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the namespace of a Container Service for Kubernetes (ACK) cluster.
//
// @param request - DescribeContainerServiceK8sClusterNamespacesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeContainerServiceK8sClusterNamespacesResponse
func (client *Client) DescribeContainerServiceK8sClusterNamespacesWithContext(ctx context.Context, request *DescribeContainerServiceK8sClusterNamespacesRequest, runtime *dara.RuntimeOptions) (_result *DescribeContainerServiceK8sClusterNamespacesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeContainerServiceK8sClusterNamespaces"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeContainerServiceK8sClusterNamespacesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of Container Service for Kubernetes (ACK) clusters.
//
// @param request - DescribeContainerServiceK8sClustersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeContainerServiceK8sClustersResponse
func (client *Client) DescribeContainerServiceK8sClustersWithContext(ctx context.Context, request *DescribeContainerServiceK8sClustersRequest, runtime *dara.RuntimeOptions) (_result *DescribeContainerServiceK8sClustersResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeContainerServiceK8sClusters"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeContainerServiceK8sClustersResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the alert statistics on container assets.
//
// Description:
//
// Only users who created a Container Registry Enterprise Edition instance can call this operation.
//
// @param request - DescribeContainerStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeContainerStatisticsResponse
func (client *Client) DescribeContainerStatisticsWithContext(ctx context.Context, request *DescribeContainerStatisticsRequest, runtime *dara.RuntimeOptions) (_result *DescribeContainerStatisticsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeContainerStatistics"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeContainerStatisticsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of container assets by using an attribute.
//
// @param request - DescribeContainerTagsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeContainerTagsResponse
func (client *Client) DescribeContainerTagsWithContext(ctx context.Context, request *DescribeContainerTagsRequest, runtime *dara.RuntimeOptions) (_result *DescribeContainerTagsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.FieldName) {
		query["FieldName"] = request.FieldName
	}

	if !dara.IsNil(request.FieldValue) {
		query["FieldValue"] = request.FieldValue
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeContainerTags"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeContainerTagsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the filter conditions that are used to search for assets in fuzzy match mode.
//
// @param request - DescribeCriteriaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCriteriaResponse
func (client *Client) DescribeCriteriaWithContext(ctx context.Context, request *DescribeCriteriaRequest, runtime *dara.RuntimeOptions) (_result *DescribeCriteriaResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.MachineTypes) {
		query["MachineTypes"] = request.MachineTypes
	}

	if !dara.IsNil(request.SupportAutoTag) {
		query["SupportAutoTag"] = request.SupportAutoTag
	}

	if !dara.IsNil(request.Value) {
		query["Value"] = request.Value
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCriteria"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCriteriaResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the list of servers on which the custom defense rule against brute-force attacks takes effect.
//
// @param request - DescribeCustomBlockInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCustomBlockInstancesResponse
func (client *Client) DescribeCustomBlockInstancesWithContext(ctx context.Context, request *DescribeCustomBlockInstancesRequest, runtime *dara.RuntimeOptions) (_result *DescribeCustomBlockInstancesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BlockIp) {
		query["BlockIp"] = request.BlockIp
	}

	if !dara.IsNil(request.Bound) {
		query["Bound"] = request.Bound
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCustomBlockInstances"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCustomBlockInstancesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the defense rules against brute-force attacks that are applied to one or more servers.
//
// @param request - DescribeCustomBlockRecordsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCustomBlockRecordsResponse
func (client *Client) DescribeCustomBlockRecordsWithContext(ctx context.Context, request *DescribeCustomBlockRecordsRequest, runtime *dara.RuntimeOptions) (_result *DescribeCustomBlockRecordsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BlockIp) {
		query["BlockIp"] = request.BlockIp
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCustomBlockRecords"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCustomBlockRecordsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains the configurations of a security report.
//
// @param request - DescribeCustomizeReportConfigDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCustomizeReportConfigDetailResponse
func (client *Client) DescribeCustomizeReportConfigDetailWithContext(ctx context.Context, request *DescribeCustomizeReportConfigDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribeCustomizeReportConfigDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.ReportId) {
		query["ReportId"] = request.ReportId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCustomizeReportConfigDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCustomizeReportConfigDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries security reports.
//
// @param request - DescribeCustomizeReportListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCustomizeReportListResponse
func (client *Client) DescribeCustomizeReportListWithContext(ctx context.Context, request *DescribeCustomizeReportListRequest, runtime *dara.RuntimeOptions) (_result *DescribeCustomizeReportListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Pinned) {
		query["Pinned"] = request.Pinned
	}

	if !dara.IsNil(request.ReportStatus) {
		query["ReportStatus"] = request.ReportStatus
	}

	if !dara.IsNil(request.ReportType) {
		query["ReportType"] = request.ReportType
	}

	if !dara.IsNil(request.ReportVersion) {
		query["ReportVersion"] = request.ReportVersion
	}

	if !dara.IsNil(request.Title) {
		query["Title"] = request.Title
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCustomizeReportList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCustomizeReportListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the Object Storage Service (OSS) information of the file that is uploaded to create custom weak password rules.
//
// @param request - DescribeCustomizedDictUploadInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCustomizedDictUploadInfoResponse
func (client *Client) DescribeCustomizedDictUploadInfoWithContext(ctx context.Context, request *DescribeCustomizedDictUploadInfoRequest, runtime *dara.RuntimeOptions) (_result *DescribeCustomizedDictUploadInfoResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCustomizedDictUploadInfo"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCustomizedDictUploadInfoResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the servers to which custom policies are applied.
//
// @param request - DescribeCustomizedStrategyTargetsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCustomizedStrategyTargetsResponse
func (client *Client) DescribeCustomizedStrategyTargetsWithContext(ctx context.Context, request *DescribeCustomizedStrategyTargetsRequest, runtime *dara.RuntimeOptions) (_result *DescribeCustomizedStrategyTargetsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCustomizedStrategyTargets"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCustomizedStrategyTargetsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries periodic scan tasks. The tasks include image scan tasks, urgent vulnerability scan tasks, and virus scan tasks.
//
// @param request - DescribeCycleTaskListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCycleTaskListResponse
func (client *Client) DescribeCycleTaskListWithContext(ctx context.Context, request *DescribeCycleTaskListRequest, runtime *dara.RuntimeOptions) (_result *DescribeCycleTaskListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ConfigId) {
		query["ConfigId"] = request.ConfigId
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.TaskName) {
		query["TaskName"] = request.TaskName
	}

	if !dara.IsNil(request.TaskType) {
		query["TaskType"] = request.TaskType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCycleTaskList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCycleTaskListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries data sources for DingTalk notifications. You can configure the types of alerts for which you want to use a DingTalk chatbot to send notifications based on the data sources.
//
// @param request - DescribeDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDataSourceResponse
func (client *Client) DescribeDataSourceWithContext(ctx context.Context, request *DescribeDataSourceRequest, runtime *dara.RuntimeOptions) (_result *DescribeDataSourceResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ConfigType) {
		query["ConfigType"] = request.ConfigType
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDataSource"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeDataSourceResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the keywords of a custom dictionary that is generated by using weak passwords.
//
// @param request - DescribeDefaultKeyInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDefaultKeyInfoResponse
func (client *Client) DescribeDefaultKeyInfoWithContext(ctx context.Context, request *DescribeDefaultKeyInfoRequest, runtime *dara.RuntimeOptions) (_result *DescribeDefaultKeyInfoResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDefaultKeyInfo"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeDefaultKeyInfoResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains DingTalk notifications.
//
// @param request - DescribeDingTalkRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDingTalkResponse
func (client *Client) DescribeDingTalkWithContext(ctx context.Context, request *DescribeDingTalkRequest, runtime *dara.RuntimeOptions) (_result *DescribeDingTalkResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RuleActionName) {
		query["RuleActionName"] = request.RuleActionName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDingTalk"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeDingTalkResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of domain assets within your Alibaba Cloud account.
//
// @param request - DescribeDomainCountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDomainCountResponse
func (client *Client) DescribeDomainCountWithContext(ctx context.Context, request *DescribeDomainCountRequest, runtime *dara.RuntimeOptions) (_result *DescribeDomainCountResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDomainCount"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeDomainCountResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of domain assets within your Alibaba Cloud account.
//
// @param request - DescribeDomainDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDomainDetailResponse
func (client *Client) DescribeDomainDetailWithContext(ctx context.Context, request *DescribeDomainDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribeDomainDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDomainDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeDomainDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about the domain assets within your Alibaba Cloud account.
//
// @param request - DescribeDomainListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDomainListResponse
func (client *Client) DescribeDomainListWithContext(ctx context.Context, request *DescribeDomainListRequest, runtime *dara.RuntimeOptions) (_result *DescribeDomainListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.DomainType) {
		query["DomainType"] = request.DomainType
	}

	if !dara.IsNil(request.FuzzyDomain) {
		query["FuzzyDomain"] = request.FuzzyDomain
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDomainList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeDomainListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the security alert data of a website security report.
//
// @param request - DescribeDomainSecureAlarmListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDomainSecureAlarmListResponse
func (client *Client) DescribeDomainSecureAlarmListWithContext(ctx context.Context, request *DescribeDomainSecureAlarmListRequest, runtime *dara.RuntimeOptions) (_result *DescribeDomainSecureAlarmListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDomainSecureAlarmList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeDomainSecureAlarmListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of risky websites in your website security report and the security information about the websites, including the number of vulnerabilities and the number of alerts.
//
// @param request - DescribeDomainSecureRiskListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDomainSecureRiskListResponse
func (client *Client) DescribeDomainSecureRiskListWithContext(ctx context.Context, request *DescribeDomainSecureRiskListRequest, runtime *dara.RuntimeOptions) (_result *DescribeDomainSecureRiskListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDomainSecureRiskList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeDomainSecureRiskListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the security score in your website security report. The full score is 100.
//
// @param request - DescribeDomainSecureScoreRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDomainSecureScoreResponse
func (client *Client) DescribeDomainSecureScoreWithContext(ctx context.Context, request *DescribeDomainSecureScoreRequest, runtime *dara.RuntimeOptions) (_result *DescribeDomainSecureScoreResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDomainSecureScore"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeDomainSecureScoreResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics in your website security report, including the number of websites and the number of security events.
//
// @param request - DescribeDomainSecureStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDomainSecureStatisticsResponse
func (client *Client) DescribeDomainSecureStatisticsWithContext(ctx context.Context, request *DescribeDomainSecureStatisticsRequest, runtime *dara.RuntimeOptions) (_result *DescribeDomainSecureStatisticsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDomainSecureStatistics"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeDomainSecureStatisticsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Query Network Security Report - Security Suggestions
//
// @param request - DescribeDomainSecureSuggestsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDomainSecureSuggestsResponse
func (client *Client) DescribeDomainSecureSuggestsWithContext(ctx context.Context, request *DescribeDomainSecureSuggestsRequest, runtime *dara.RuntimeOptions) (_result *DescribeDomainSecureSuggestsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDomainSecureSuggests"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeDomainSecureSuggestsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of vulnerabilities in your website security report.
//
// @param request - DescribeDomainSecureVulListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDomainSecureVulListResponse
func (client *Client) DescribeDomainSecureVulListWithContext(ctx context.Context, request *DescribeDomainSecureVulListRequest, runtime *dara.RuntimeOptions) (_result *DescribeDomainSecureVulListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDomainSecureVulList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeDomainSecureVulListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI DescribeDynamicDict is deprecated, please use Sas::2018-12-03::DescribeCustomizedDict instead.
//
// Summary:
//
// Queries custom weak password rules for the baseline check feature.
//
// @param request - DescribeDynamicDictRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDynamicDictResponse
func (client *Client) DescribeDynamicDictWithContext(ctx context.Context, request *DescribeDynamicDictRequest, runtime *dara.RuntimeOptions) (_result *DescribeDynamicDictResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDynamicDict"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeDynamicDictResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI DescribeDynamicDictUploadInfo is deprecated, please use Sas::2018-12-03::DescribeCustomizedDictUploadInfo instead.
//
// Summary:
//
// Queries the information about an uploaded Object Storage Service (OSS) object that contains custom weak passwords and is used for baseline checks.
//
// @param request - DescribeDynamicDictUploadInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDynamicDictUploadInfoResponse
func (client *Client) DescribeDynamicDictUploadInfoWithContext(ctx context.Context, request *DescribeDynamicDictUploadInfoRequest, runtime *dara.RuntimeOptions) (_result *DescribeDynamicDictUploadInfoResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDynamicDictUploadInfo"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeDynamicDictUploadInfoResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of urgent vulnerabilities.
//
// @param request - DescribeEmgVulItemRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEmgVulItemResponse
func (client *Client) DescribeEmgVulItemWithContext(ctx context.Context, request *DescribeEmgVulItemRequest, runtime *dara.RuntimeOptions) (_result *DescribeEmgVulItemResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckType) {
		query["CheckType"] = request.CheckType
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RiskStatus) {
		query["RiskStatus"] = request.RiskStatus
	}

	if !dara.IsNil(request.ScanType) {
		query["ScanType"] = request.ScanType
	}

	if !dara.IsNil(request.VulName) {
		query["VulName"] = request.VulName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeEmgVulItem"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeEmgVulItemResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics of alert events by risk level.
//
// @param request - DescribeEventLevelCountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEventLevelCountResponse
func (client *Client) DescribeEventLevelCountWithContext(ctx context.Context, request *DescribeEventLevelCountRequest, runtime *dara.RuntimeOptions) (_result *DescribeEventLevelCountResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.ContainerFieldName) {
		query["ContainerFieldName"] = request.ContainerFieldName
	}

	if !dara.IsNil(request.ContainerFieldValue) {
		query["ContainerFieldValue"] = request.ContainerFieldValue
	}

	if !dara.IsNil(request.ContainerIds) {
		query["ContainerIds"] = request.ContainerIds
	}

	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.MultiAccountActionType) {
		query["MultiAccountActionType"] = request.MultiAccountActionType
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeEventLevelCount"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeEventLevelCountResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the platforms that are supported by the feature of container threat detection.
//
// @param request - DescribeEventOnStageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEventOnStageResponse
func (client *Client) DescribeEventOnStageWithContext(ctx context.Context, request *DescribeEventOnStageRequest, runtime *dara.RuntimeOptions) (_result *DescribeEventOnStageResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeEventOnStage"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeEventOnStageResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the directories that are excluded from anti-ransomware.
//
// @param request - DescribeExcludeSystemPathRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeExcludeSystemPathResponse
func (client *Client) DescribeExcludeSystemPathWithContext(ctx context.Context, request *DescribeExcludeSystemPathRequest, runtime *dara.RuntimeOptions) (_result *DescribeExcludeSystemPathResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeExcludeSystemPath"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeExcludeSystemPathResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the progress of a task that exports your assets to an Excel file.
//
// @param request - DescribeExportInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeExportInfoResponse
func (client *Client) DescribeExportInfoWithContext(ctx context.Context, request *DescribeExportInfoRequest, runtime *dara.RuntimeOptions) (_result *DescribeExportInfoResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ExportId) {
		query["ExportId"] = request.ExportId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeExportInfo"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeExportInfoResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the weak password-related risks of a specified server that is exposed on the Internet.
//
// @param request - DescribeExposedCheckWarningRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeExposedCheckWarningResponse
func (client *Client) DescribeExposedCheckWarningWithContext(ctx context.Context, request *DescribeExposedCheckWarningRequest, runtime *dara.RuntimeOptions) (_result *DescribeExposedCheckWarningResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.TypeName) {
		query["TypeName"] = request.TypeName
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeExposedCheckWarning"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeExposedCheckWarningResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the search conditions that are used to search for exposed assets.
//
// @param request - DescribeExposedInstanceCriteriaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeExposedInstanceCriteriaResponse
func (client *Client) DescribeExposedInstanceCriteriaWithContext(ctx context.Context, request *DescribeExposedInstanceCriteriaRequest, runtime *dara.RuntimeOptions) (_result *DescribeExposedInstanceCriteriaResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.Value) {
		query["Value"] = request.Value
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeExposedInstanceCriteria"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeExposedInstanceCriteriaResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a specified server that is exposed on the Internet.
//
// @param request - DescribeExposedInstanceDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeExposedInstanceDetailResponse
func (client *Client) DescribeExposedInstanceDetailWithContext(ctx context.Context, request *DescribeExposedInstanceDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribeExposedInstanceDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeExposedInstanceDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeExposedInstanceDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about the assets that are exposed on the Internet.
//
// @param request - DescribeExposedInstanceListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeExposedInstanceListResponse
func (client *Client) DescribeExposedInstanceListWithContext(ctx context.Context, request *DescribeExposedInstanceListRequest, runtime *dara.RuntimeOptions) (_result *DescribeExposedInstanceListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AssetType) {
		query["AssetType"] = request.AssetType
	}

	if !dara.IsNil(request.CspmStatus) {
		query["CspmStatus"] = request.CspmStatus
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.ExposureComponent) {
		query["ExposureComponent"] = request.ExposureComponent
	}

	if !dara.IsNil(request.ExposureComponentBizType) {
		query["ExposureComponentBizType"] = request.ExposureComponentBizType
	}

	if !dara.IsNil(request.ExposureIp) {
		query["ExposureIp"] = request.ExposureIp
	}

	if !dara.IsNil(request.ExposurePort) {
		query["ExposurePort"] = request.ExposurePort
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.HealthStatus) {
		query["HealthStatus"] = request.HealthStatus
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.InstanceName) {
		query["InstanceName"] = request.InstanceName
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.VulStatus) {
		query["VulStatus"] = request.VulStatus
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeExposedInstanceList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeExposedInstanceListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the gateway assets, ports, system components, or public IP addresses that are exposed on the Internet.
//
// @param request - DescribeExposedStatisticsDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeExposedStatisticsDetailResponse
func (client *Client) DescribeExposedStatisticsDetailWithContext(ctx context.Context, request *DescribeExposedStatisticsDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribeExposedStatisticsDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.StatisticsType) {
		query["StatisticsType"] = request.StatisticsType
	}

	if !dara.IsNil(request.StatisticsTypeGatewayType) {
		query["StatisticsTypeGatewayType"] = request.StatisticsTypeGatewayType
	}

	if !dara.IsNil(request.StatisticsTypeInstanceValue) {
		query["StatisticsTypeInstanceValue"] = request.StatisticsTypeInstanceValue
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeExposedStatisticsDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeExposedStatisticsDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics of servers.
//
// @param request - DescribeFieldStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeFieldStatisticsResponse
func (client *Client) DescribeFieldStatisticsWithContext(ctx context.Context, request *DescribeFieldStatisticsRequest, runtime *dara.RuntimeOptions) (_result *DescribeFieldStatisticsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.MachineTypes) {
		query["MachineTypes"] = request.MachineTypes
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeFieldStatistics"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeFieldStatisticsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the pre-patches that are required to fix a specified Windows system vulnerability.
//
// @param request - DescribeFrontVulPatchListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeFrontVulPatchListResponse
func (client *Client) DescribeFrontVulPatchListWithContext(ctx context.Context, request *DescribeFrontVulPatchListRequest, runtime *dara.RuntimeOptions) (_result *DescribeFrontVulPatchListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Info) {
		query["Info"] = request.Info
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.OperateType) {
		query["OperateType"] = request.OperateType
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeFrontVulPatchList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeFrontVulPatchListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Alert Event Investigation
//
// @param request - DescribeGraph4InvestigationOnlineRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeGraph4InvestigationOnlineResponse
func (client *Client) DescribeGraph4InvestigationOnlineWithContext(ctx context.Context, request *DescribeGraph4InvestigationOnlineRequest, runtime *dara.RuntimeOptions) (_result *DescribeGraph4InvestigationOnlineResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AnomalyId) {
		query["AnomalyId"] = request.AnomalyId
	}

	if !dara.IsNil(request.AnomalyUuid) {
		query["AnomalyUuid"] = request.AnomalyUuid
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.VertexId) {
		query["VertexId"] = request.VertexId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeGraph4InvestigationOnline"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeGraph4InvestigationOnlineResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the structure of a group.
//
// @param request - DescribeGroupStructRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeGroupStructResponse
func (client *Client) DescribeGroupStructWithContext(ctx context.Context, request *DescribeGroupStructRequest, runtime *dara.RuntimeOptions) (_result *DescribeGroupStructResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeGroupStruct"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeGroupStructResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries containers by group type.
//
// @param request - DescribeGroupedContainerInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeGroupedContainerInstancesResponse
func (client *Client) DescribeGroupedContainerInstancesWithContext(ctx context.Context, request *DescribeGroupedContainerInstancesRequest, runtime *dara.RuntimeOptions) (_result *DescribeGroupedContainerInstancesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Criteria) {
		query["Criteria"] = request.Criteria
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.FieldValue) {
		query["FieldValue"] = request.FieldValue
	}

	if !dara.IsNil(request.GroupField) {
		query["GroupField"] = request.GroupField
	}

	if !dara.IsNil(request.LogicalExp) {
		query["LogicalExp"] = request.LogicalExp
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeGroupedContainerInstances"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeGroupedContainerInstancesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistical information about assets based on a specified filter condition.
//
// @param request - DescribeGroupedInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeGroupedInstancesResponse
func (client *Client) DescribeGroupedInstancesWithContext(ctx context.Context, request *DescribeGroupedInstancesRequest, runtime *dara.RuntimeOptions) (_result *DescribeGroupedInstancesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.FieldValue) {
		query["FieldValue"] = request.FieldValue
	}

	if !dara.IsNil(request.GroupField) {
		query["GroupField"] = request.GroupField
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.MachineTypes) {
		query["MachineTypes"] = request.MachineTypes
	}

	if !dara.IsNil(request.NoPage) {
		query["NoPage"] = request.NoPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.SaleVersionCheckCode) {
		query["SaleVersionCheckCode"] = request.SaleVersionCheckCode
	}

	if !dara.IsNil(request.Vendor) {
		query["Vendor"] = request.Vendor
	}

	if !dara.IsNil(request.Vendors) {
		query["Vendors"] = request.Vendors
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeGroupedInstances"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeGroupedInstancesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of malicious image samples.
//
// @param request - DescribeGroupedMaliciousFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeGroupedMaliciousFilesResponse
func (client *Client) DescribeGroupedMaliciousFilesWithContext(ctx context.Context, request *DescribeGroupedMaliciousFilesRequest, runtime *dara.RuntimeOptions) (_result *DescribeGroupedMaliciousFilesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.FuzzyMaliciousName) {
		query["FuzzyMaliciousName"] = request.FuzzyMaliciousName
	}

	if !dara.IsNil(request.ImageDigest) {
		query["ImageDigest"] = request.ImageDigest
	}

	if !dara.IsNil(request.ImageLayer) {
		query["ImageLayer"] = request.ImageLayer
	}

	if !dara.IsNil(request.ImageTag) {
		query["ImageTag"] = request.ImageTag
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Levels) {
		query["Levels"] = request.Levels
	}

	if !dara.IsNil(request.MaliciousMd5) {
		query["MaliciousMd5"] = request.MaliciousMd5
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RepoId) {
		query["RepoId"] = request.RepoId
	}

	if !dara.IsNil(request.RepoInstanceId) {
		query["RepoInstanceId"] = request.RepoInstanceId
	}

	if !dara.IsNil(request.RepoName) {
		query["RepoName"] = request.RepoName
	}

	if !dara.IsNil(request.RepoNamespace) {
		query["RepoNamespace"] = request.RepoNamespace
	}

	if !dara.IsNil(request.RepoRegionId) {
		query["RepoRegionId"] = request.RepoRegionId
	}

	if !dara.IsNil(request.ScanRange) {
		query["ScanRange"] = request.ScanRange
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeGroupedMaliciousFiles"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeGroupedMaliciousFilesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics of asset tags.
//
// @param request - DescribeGroupedTagsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeGroupedTagsResponse
func (client *Client) DescribeGroupedTagsWithContext(ctx context.Context, request *DescribeGroupedTagsRequest, runtime *dara.RuntimeOptions) (_result *DescribeGroupedTagsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.MachineTypes) {
		query["MachineTypes"] = request.MachineTypes
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeGroupedTags"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeGroupedTagsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries vulnerabilities by group.
//
// @param request - DescribeGroupedVulRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeGroupedVulResponse
func (client *Client) DescribeGroupedVulWithContext(ctx context.Context, request *DescribeGroupedVulRequest, runtime *dara.RuntimeOptions) (_result *DescribeGroupedVulResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AliasName) {
		query["AliasName"] = request.AliasName
	}

	if !dara.IsNil(request.AssetType) {
		query["AssetType"] = request.AssetType
	}

	if !dara.IsNil(request.AttachTypes) {
		query["AttachTypes"] = request.AttachTypes
	}

	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.ContainerFieldName) {
		query["ContainerFieldName"] = request.ContainerFieldName
	}

	if !dara.IsNil(request.ContainerFieldValue) {
		query["ContainerFieldValue"] = request.ContainerFieldValue
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.CveId) {
		query["CveId"] = request.CveId
	}

	if !dara.IsNil(request.Dealed) {
		query["Dealed"] = request.Dealed
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Necessity) {
		query["Necessity"] = request.Necessity
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RaspDefend) {
		query["RaspDefend"] = request.RaspDefend
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.SearchTags) {
		query["SearchTags"] = request.SearchTags
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeGroupedVul"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeGroupedVulResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about baseline export, including the name of the file to which baselines are exported and the download URL for the file.
//
// @param request - DescribeHcExportInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHcExportInfoResponse
func (client *Client) DescribeHcExportInfoWithContext(ctx context.Context, request *DescribeHcExportInfoRequest, runtime *dara.RuntimeOptions) (_result *DescribeHcExportInfoResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ExportId) {
		query["ExportId"] = request.ExportId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeHcExportInfo"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeHcExportInfoResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries statistics on the quota of honeypots.
//
// @param request - DescribeHoneyPotAuthRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHoneyPotAuthResponse
func (client *Client) DescribeHoneyPotAuthWithContext(ctx context.Context, request *DescribeHoneyPotAuthRequest, runtime *dara.RuntimeOptions) (_result *DescribeHoneyPotAuthResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeHoneyPotAuth"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeHoneyPotAuthResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the top five virtual private clouds (VPCs) or assets for which alerts are most frequently generated.
//
// @param request - DescribeHoneyPotSuspStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHoneyPotSuspStatisticsResponse
func (client *Client) DescribeHoneyPotSuspStatisticsWithContext(ctx context.Context, request *DescribeHoneyPotSuspStatisticsRequest, runtime *dara.RuntimeOptions) (_result *DescribeHoneyPotSuspStatisticsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.StatisticsDays) {
		query["StatisticsDays"] = request.StatisticsDays
	}

	if !dara.IsNil(request.StatisticsKeyType) {
		query["StatisticsKeyType"] = request.StatisticsKeyType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeHoneyPotSuspStatistics"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeHoneyPotSuspStatisticsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries proxy clusters by page.
//
// @param request - DescribeHybridProxyClusterListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHybridProxyClusterListResponse
func (client *Client) DescribeHybridProxyClusterListWithContext(ctx context.Context, request *DescribeHybridProxyClusterListRequest, runtime *dara.RuntimeOptions) (_result *DescribeHybridProxyClusterListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterName) {
		query["ClusterName"] = request.ClusterName
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeHybridProxyClusterList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeHybridProxyClusterListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the servers that are connected to a proxy in a hybrid cloud by page.
//
// @param request - DescribeHybridProxyLinkedClientListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHybridProxyLinkedClientListResponse
func (client *Client) DescribeHybridProxyLinkedClientListWithContext(ctx context.Context, request *DescribeHybridProxyLinkedClientListRequest, runtime *dara.RuntimeOptions) (_result *DescribeHybridProxyLinkedClientListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterName) {
		query["ClusterName"] = request.ClusterName
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.ProxyUuid) {
		query["ProxyUuid"] = request.ProxyUuid
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeHybridProxyLinkedClientList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeHybridProxyLinkedClientListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the proxy nodes that are deployed in a proxy cluster by page.
//
// @param request - DescribeHybridProxyListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHybridProxyListResponse
func (client *Client) DescribeHybridProxyListWithContext(ctx context.Context, request *DescribeHybridProxyListRequest, runtime *dara.RuntimeOptions) (_result *DescribeHybridProxyListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterName) {
		query["ClusterName"] = request.ClusterName
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeHybridProxyList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeHybridProxyListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the data collection configurations of a proxy cluster.
//
// @param request - DescribeHybridProxyPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHybridProxyPolicyResponse
func (client *Client) DescribeHybridProxyPolicyWithContext(ctx context.Context, request *DescribeHybridProxyPolicyRequest, runtime *dara.RuntimeOptions) (_result *DescribeHybridProxyPolicyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterName) {
		query["ClusterName"] = request.ClusterName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeHybridProxyPolicy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeHybridProxyPolicyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the search conditions that can be used to query data center assets found after scanning in fuzzy match mode.
//
// @param request - DescribeIdcAssetCriteriaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeIdcAssetCriteriaResponse
func (client *Client) DescribeIdcAssetCriteriaWithContext(ctx context.Context, request *DescribeIdcAssetCriteriaRequest, runtime *dara.RuntimeOptions) (_result *DescribeIdcAssetCriteriaResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	if !dara.IsNil(request.Value) {
		query["Value"] = request.Value
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeIdcAssetCriteria"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeIdcAssetCriteriaResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Query IDC probe list
//
// @param request - DescribeIdcProbeListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeIdcProbeListResponse
func (client *Client) DescribeIdcProbeListWithContext(ctx context.Context, request *DescribeIdcProbeListRequest, runtime *dara.RuntimeOptions) (_result *DescribeIdcProbeListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.IdcName) {
		query["IdcName"] = request.IdcName
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeIdcProbeList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeIdcProbeListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries assets that are identified by Internet Data Center (IDC) probes.
//
// @param request - DescribeIdcProbeScanResultListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeIdcProbeScanResultListResponse
func (client *Client) DescribeIdcProbeScanResultListWithContext(ctx context.Context, request *DescribeIdcProbeScanResultListRequest, runtime *dara.RuntimeOptions) (_result *DescribeIdcProbeScanResultListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Criteria) {
		query["Criteria"] = request.Criteria
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.FoundEndTime) {
		query["FoundEndTime"] = request.FoundEndTime
	}

	if !dara.IsNil(request.FoundStartTime) {
		query["FoundStartTime"] = request.FoundStartTime
	}

	if !dara.IsNil(request.LogicalExp) {
		query["LogicalExp"] = request.LogicalExp
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeIdcProbeScanResultList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeIdcProbeScanResultListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries an image digest.
//
// @param request - DescribeImageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageResponse
func (client *Client) DescribeImageWithContext(ctx context.Context, request *DescribeImageRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ImageInstanceId) {
		query["ImageInstanceId"] = request.ImageInstanceId
	}

	if !dara.IsNil(request.ImageRegionId) {
		query["ImageRegionId"] = request.ImageRegionId
	}

	if !dara.IsNil(request.ImageRepoId) {
		query["ImageRepoId"] = request.ImageRepoId
	}

	if !dara.IsNil(request.ImageTag) {
		query["ImageTag"] = request.ImageTag
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImage"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the security scan results of images.
//
// @param request - DescribeImageBaselineCheckResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageBaselineCheckResultResponse
func (client *Client) DescribeImageBaselineCheckResultWithContext(ctx context.Context, request *DescribeImageBaselineCheckResultRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageBaselineCheckResultResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Criteria) {
		query["Criteria"] = request.Criteria
	}

	if !dara.IsNil(request.CriteriaType) {
		query["CriteriaType"] = request.CriteriaType
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.ImageUuid) {
		query["ImageUuid"] = request.ImageUuid
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RiskLevel) {
		query["RiskLevel"] = request.RiskLevel
	}

	if !dara.IsNil(request.ScanRange) {
		query["ScanRange"] = request.ScanRange
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImageBaselineCheckResult"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageBaselineCheckResultResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the check results of image baselines that are included in an image scan task.
//
// @param request - DescribeImageBaselineCheckSummaryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageBaselineCheckSummaryResponse
func (client *Client) DescribeImageBaselineCheckSummaryWithContext(ctx context.Context, request *DescribeImageBaselineCheckSummaryRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageBaselineCheckSummaryResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.Criteria) {
		query["Criteria"] = request.Criteria
	}

	if !dara.IsNil(request.CriteriaType) {
		query["CriteriaType"] = request.CriteriaType
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RiskLevel) {
		query["RiskLevel"] = request.RiskLevel
	}

	if !dara.IsNil(request.ScanRange) {
		query["ScanRange"] = request.ScanRange
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImageBaselineCheckSummary"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageBaselineCheckSummaryResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details about the baseline check result for an image.
//
// @param request - DescribeImageBaselineDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageBaselineDetailResponse
func (client *Client) DescribeImageBaselineDetailWithContext(ctx context.Context, request *DescribeImageBaselineDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageBaselineDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BaselineItemKey) {
		query["BaselineItemKey"] = request.BaselineItemKey
	}

	if !dara.IsNil(request.ImageUuid) {
		query["ImageUuid"] = request.ImageUuid
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImageBaselineDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageBaselineDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries baseline check results based on images.
//
// @param request - DescribeImageBaselineItemListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageBaselineItemListResponse
func (client *Client) DescribeImageBaselineItemListWithContext(ctx context.Context, request *DescribeImageBaselineItemListRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageBaselineItemListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BaselineClassKey) {
		query["BaselineClassKey"] = request.BaselineClassKey
	}

	if !dara.IsNil(request.BaselineNameKey) {
		query["BaselineNameKey"] = request.BaselineNameKey
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.ImageUuid) {
		query["ImageUuid"] = request.ImageUuid
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.ScanRange) {
		query["ScanRange"] = request.ScanRange
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImageBaselineItemList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageBaselineItemListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a baseline check policy for images.
//
// @param request - DescribeImageBaselineStrategyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageBaselineStrategyResponse
func (client *Client) DescribeImageBaselineStrategyWithContext(ctx context.Context, request *DescribeImageBaselineStrategyRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageBaselineStrategyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	if !dara.IsNil(request.StrategyId) {
		query["StrategyId"] = request.StrategyId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImageBaselineStrategy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageBaselineStrategyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries image build command risks by page.
//
// @param request - DescribeImageBuildRiskByKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageBuildRiskByKeyResponse
func (client *Client) DescribeImageBuildRiskByKeyWithContext(ctx context.Context, request *DescribeImageBuildRiskByKeyRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageBuildRiskByKeyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.ImageUuid) {
		query["ImageUuid"] = request.ImageUuid
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RiskKey) {
		query["RiskKey"] = request.RiskKey
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImageBuildRiskByKey"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageBuildRiskByKeyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of image build command risks by page.
//
// @param request - DescribeImageBuildRiskListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageBuildRiskListResponse
func (client *Client) DescribeImageBuildRiskListWithContext(ctx context.Context, request *DescribeImageBuildRiskListRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageBuildRiskListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Criteria) {
		query["Criteria"] = request.Criteria
	}

	if !dara.IsNil(request.CriteriaType) {
		query["CriteriaType"] = request.CriteriaType
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RiskLevel) {
		query["RiskLevel"] = request.RiskLevel
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImageBuildRiskList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageBuildRiskListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the search conditions that are used to query images.
//
// @param request - DescribeImageCriteriaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageCriteriaResponse
func (client *Client) DescribeImageCriteriaWithContext(ctx context.Context, request *DescribeImageCriteriaRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageCriteriaResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Value) {
		query["Value"] = request.Value
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImageCriteria"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageCriteriaResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the conditions for handling alert events in an image.
//
// @param request - DescribeImageEventOperationConditionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageEventOperationConditionResponse
func (client *Client) DescribeImageEventOperationConditionWithContext(ctx context.Context, request *DescribeImageEventOperationConditionRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageEventOperationConditionResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.EventType) {
		query["EventType"] = request.EventType
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImageEventOperationCondition"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageEventOperationConditionResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries alert handling rules by page.
//
// @param request - DescribeImageEventOperationPageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageEventOperationPageResponse
func (client *Client) DescribeImageEventOperationPageWithContext(ctx context.Context, request *DescribeImageEventOperationPageRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageEventOperationPageResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.EventKey) {
		query["EventKey"] = request.EventKey
	}

	if !dara.IsNil(request.EventName) {
		query["EventName"] = request.EventName
	}

	if !dara.IsNil(request.EventType) {
		query["EventType"] = request.EventType
	}

	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImageEventOperationPage"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageEventOperationPageResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the tasks that you create to fix image risks.
//
// @param request - DescribeImageFixTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageFixTaskResponse
func (client *Client) DescribeImageFixTaskWithContext(ctx context.Context, request *DescribeImageFixTaskRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageFixTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImageFixTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageFixTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries image vulnerabilities.
//
// @param request - DescribeImageGroupedVulListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageGroupedVulListResponse
func (client *Client) DescribeImageGroupedVulListWithContext(ctx context.Context, request *DescribeImageGroupedVulListRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageGroupedVulListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AliasName) {
		query["AliasName"] = request.AliasName
	}

	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.CveId) {
		query["CveId"] = request.CveId
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.ImageDigest) {
		query["ImageDigest"] = request.ImageDigest
	}

	if !dara.IsNil(request.ImageLayer) {
		query["ImageLayer"] = request.ImageLayer
	}

	if !dara.IsNil(request.ImageTag) {
		query["ImageTag"] = request.ImageTag
	}

	if !dara.IsNil(request.IsLatest) {
		query["IsLatest"] = request.IsLatest
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.Necessity) {
		query["Necessity"] = request.Necessity
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.PatchId) {
		query["PatchId"] = request.PatchId
	}

	if !dara.IsNil(request.RepoId) {
		query["RepoId"] = request.RepoId
	}

	if !dara.IsNil(request.RepoInstanceId) {
		query["RepoInstanceId"] = request.RepoInstanceId
	}

	if !dara.IsNil(request.RepoName) {
		query["RepoName"] = request.RepoName
	}

	if !dara.IsNil(request.RepoNamespace) {
		query["RepoNamespace"] = request.RepoNamespace
	}

	if !dara.IsNil(request.RepoRegionId) {
		query["RepoRegionId"] = request.RepoRegionId
	}

	if !dara.IsNil(request.RuleTag) {
		query["RuleTag"] = request.RuleTag
	}

	if !dara.IsNil(request.ScanRange) {
		query["ScanRange"] = request.ScanRange
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImageGroupedVulList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageGroupedVulListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries images.
//
// @param request - DescribeImageInfoListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageInfoListResponse
func (client *Client) DescribeImageInfoListWithContext(ctx context.Context, request *DescribeImageInfoListRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageInfoListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImageInfoList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageInfoListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries information about images.
//
// @param request - DescribeImageInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageInstancesResponse
func (client *Client) DescribeImageInstancesWithContext(ctx context.Context, request *DescribeImageInstancesRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageInstancesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Criteria) {
		query["Criteria"] = request.Criteria
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.LogicalExp) {
		query["LogicalExp"] = request.LogicalExp
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Scanned) {
		query["Scanned"] = request.Scanned
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImageInstances"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageInstancesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the most recent scan task that is created for an image.
//
// @param request - DescribeImageLatestScanTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageLatestScanTaskResponse
func (client *Client) DescribeImageLatestScanTaskWithContext(ctx context.Context, request *DescribeImageLatestScanTaskRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageLatestScanTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Digest) {
		query["Digest"] = request.Digest
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImageLatestScanTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageLatestScanTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of images that are affected by image build command risks by page.
//
// @param request - DescribeImageListByBuildRiskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageListByBuildRiskResponse
func (client *Client) DescribeImageListByBuildRiskWithContext(ctx context.Context, request *DescribeImageListByBuildRiskRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageListByBuildRiskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RiskKey) {
		query["RiskKey"] = request.RiskKey
	}

	if !dara.IsNil(request.RiskLevel) {
		query["RiskLevel"] = request.RiskLevel
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImageListByBuildRisk"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageListByBuildRiskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries information about images that are affected by sensitive files.
//
// @param tmpReq - DescribeImageListBySensitiveFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageListBySensitiveFileResponse
func (client *Client) DescribeImageListBySensitiveFileWithContext(ctx context.Context, tmpReq *DescribeImageListBySensitiveFileRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageListBySensitiveFileResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &DescribeImageListBySensitiveFileShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.ScanRange) {
		request.ScanRangeShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScanRange, dara.String("ScanRange"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.ImageDigest) {
		query["ImageDigest"] = request.ImageDigest
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RepoInstanceId) {
		query["RepoInstanceId"] = request.RepoInstanceId
	}

	if !dara.IsNil(request.RepoName) {
		query["RepoName"] = request.RepoName
	}

	if !dara.IsNil(request.RepoNamespace) {
		query["RepoNamespace"] = request.RepoNamespace
	}

	if !dara.IsNil(request.RiskLevel) {
		query["RiskLevel"] = request.RiskLevel
	}

	if !dara.IsNil(request.ScanRangeShrink) {
		query["ScanRange"] = request.ScanRangeShrink
	}

	if !dara.IsNil(request.SensitiveFileKey) {
		query["SensitiveFileKey"] = request.SensitiveFileKey
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImageListBySensitiveFile"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageListBySensitiveFileResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details about images in the results of image baseline checks.
//
// @param request - DescribeImageListWithBaselineNameRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageListWithBaselineNameResponse
func (client *Client) DescribeImageListWithBaselineNameWithContext(ctx context.Context, request *DescribeImageListWithBaselineNameRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageListWithBaselineNameResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BaselineNameKey) {
		query["BaselineNameKey"] = request.BaselineNameKey
	}

	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.ClusterName) {
		query["ClusterName"] = request.ClusterName
	}

	if !dara.IsNil(request.ContainerId) {
		query["ContainerId"] = request.ContainerId
	}

	if !dara.IsNil(request.Criteria) {
		query["Criteria"] = request.Criteria
	}

	if !dara.IsNil(request.CriteriaType) {
		query["CriteriaType"] = request.CriteriaType
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Image) {
		query["Image"] = request.Image
	}

	if !dara.IsNil(request.ImageDigest) {
		query["ImageDigest"] = request.ImageDigest
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Pod) {
		query["Pod"] = request.Pod
	}

	if !dara.IsNil(request.RepoInstanceId) {
		query["RepoInstanceId"] = request.RepoInstanceId
	}

	if !dara.IsNil(request.RepoName) {
		query["RepoName"] = request.RepoName
	}

	if !dara.IsNil(request.RepoNamespace) {
		query["RepoNamespace"] = request.RepoNamespace
	}

	if !dara.IsNil(request.ScanRange) {
		query["ScanRange"] = request.ScanRange
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImageListWithBaselineName"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageListWithBaselineNameResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains the filter conditions that are supported by the image repository.
//
// @param request - DescribeImageRepoCriteriaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageRepoCriteriaResponse
func (client *Client) DescribeImageRepoCriteriaWithContext(ctx context.Context, request *DescribeImageRepoCriteriaRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageRepoCriteriaResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Value) {
		query["Value"] = request.Value
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImageRepoCriteria"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageRepoCriteriaResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about image repositories.
//
// @param request - DescribeImageRepoDetailListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageRepoDetailListResponse
func (client *Client) DescribeImageRepoDetailListWithContext(ctx context.Context, request *DescribeImageRepoDetailListRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageRepoDetailListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Criteria) {
		query["Criteria"] = request.Criteria
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.LogicalExp) {
		query["LogicalExp"] = request.LogicalExp
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImageRepoDetailList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageRepoDetailListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics and configurations of the feature that protects images.
//
// @param request - DescribeImageRepoListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageRepoListResponse
func (client *Client) DescribeImageRepoListWithContext(ctx context.Context, request *DescribeImageRepoListRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageRepoListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.FieldName) {
		query["FieldName"] = request.FieldName
	}

	if !dara.IsNil(request.FieldValue) {
		query["FieldValue"] = request.FieldValue
	}

	if !dara.IsNil(request.OperateType) {
		query["OperateType"] = request.OperateType
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RepoName) {
		query["RepoName"] = request.RepoName
	}

	if !dara.IsNil(request.RepoNamespace) {
		query["RepoNamespace"] = request.RepoNamespace
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImageRepoList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageRepoListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of security events detected on an image.
//
// @param request - DescribeImageSecurityScanCountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageSecurityScanCountResponse
func (client *Client) DescribeImageSecurityScanCountWithContext(ctx context.Context, request *DescribeImageSecurityScanCountRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageSecurityScanCountResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.Dealed) {
		query["Dealed"] = request.Dealed
	}

	if !dara.IsNil(request.ImageDigest) {
		query["ImageDigest"] = request.ImageDigest
	}

	if !dara.IsNil(request.ImageTag) {
		query["ImageTag"] = request.ImageTag
	}

	if !dara.IsNil(request.ImageUuid) {
		query["ImageUuid"] = request.ImageUuid
	}

	if !dara.IsNil(request.RepoId) {
		query["RepoId"] = request.RepoId
	}

	if !dara.IsNil(request.RepoInstanceId) {
		query["RepoInstanceId"] = request.RepoInstanceId
	}

	if !dara.IsNil(request.RepoRegionId) {
		query["RepoRegionId"] = request.RepoRegionId
	}

	if !dara.IsNil(request.ScanRange) {
		query["ScanRange"] = request.ScanRange
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImageSecurityScanCount"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageSecurityScanCountResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the sensitive files in an image.
//
// @param tmpReq - DescribeImageSensitiveFileByKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageSensitiveFileByKeyResponse
func (client *Client) DescribeImageSensitiveFileByKeyWithContext(ctx context.Context, tmpReq *DescribeImageSensitiveFileByKeyRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageSensitiveFileByKeyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &DescribeImageSensitiveFileByKeyShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.ScanRange) {
		request.ScanRangeShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScanRange, dara.String("ScanRange"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.ImageUuid) {
		query["ImageUuid"] = request.ImageUuid
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.ScanRangeShrink) {
		query["ScanRange"] = request.ScanRangeShrink
	}

	if !dara.IsNil(request.SensitiveFileKey) {
		query["SensitiveFileKey"] = request.SensitiveFileKey
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImageSensitiveFileByKey"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageSensitiveFileByKeyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries information about sensitive files.
//
// @param tmpReq - DescribeImageSensitiveFileListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageSensitiveFileListResponse
func (client *Client) DescribeImageSensitiveFileListWithContext(ctx context.Context, tmpReq *DescribeImageSensitiveFileListRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageSensitiveFileListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &DescribeImageSensitiveFileListShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.ScanRange) {
		request.ScanRangeShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScanRange, dara.String("ScanRange"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.Criteria) {
		query["Criteria"] = request.Criteria
	}

	if !dara.IsNil(request.CriteriaType) {
		query["CriteriaType"] = request.CriteriaType
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.ImageUuid) {
		query["ImageUuid"] = request.ImageUuid
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RiskLevel) {
		query["RiskLevel"] = request.RiskLevel
	}

	if !dara.IsNil(request.ScanRangeShrink) {
		query["ScanRange"] = request.ScanRangeShrink
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImageSensitiveFileList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageSensitiveFileListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of vulnerabilities that are detected by using container image scan and the affected images.
//
// Description:
//
// To query the information about the recently detected image vulnerabilities, call the [PublicCreateImageScanTask](https://help.aliyun.com/document_detail/411723.html) operation. Wait 1 to 5 minutes until the call is successful and call the DescribeImageVulList operation.
//
// @param request - DescribeImageVulListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageVulListResponse
func (client *Client) DescribeImageVulListWithContext(ctx context.Context, request *DescribeImageVulListRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageVulListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AliasName) {
		query["AliasName"] = request.AliasName
	}

	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.ClusterName) {
		query["ClusterName"] = request.ClusterName
	}

	if !dara.IsNil(request.ContainerId) {
		query["ContainerId"] = request.ContainerId
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Dealed) {
		query["Dealed"] = request.Dealed
	}

	if !dara.IsNil(request.Digest) {
		query["Digest"] = request.Digest
	}

	if !dara.IsNil(request.Image) {
		query["Image"] = request.Image
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.Necessity) {
		query["Necessity"] = request.Necessity
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Pod) {
		query["Pod"] = request.Pod
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.RepoId) {
		query["RepoId"] = request.RepoId
	}

	if !dara.IsNil(request.RepoId) {
		query["RepoId"] = request.RepoId
	}

	if !dara.IsNil(request.RepoInstanceId) {
		query["RepoInstanceId"] = request.RepoInstanceId
	}

	if !dara.IsNil(request.RepoName) {
		query["RepoName"] = request.RepoName
	}

	if !dara.IsNil(request.RepoName) {
		query["RepoName"] = request.RepoName
	}

	if !dara.IsNil(request.RepoNamespace) {
		query["RepoNamespace"] = request.RepoNamespace
	}

	if !dara.IsNil(request.RepoRegionId) {
		query["RepoRegionId"] = request.RepoRegionId
	}

	if !dara.IsNil(request.RuleTag) {
		query["RuleTag"] = request.RuleTag
	}

	if !dara.IsNil(request.ScanRange) {
		query["ScanRange"] = request.ScanRange
	}

	if !dara.IsNil(request.StatusList) {
		query["StatusList"] = request.StatusList
	}

	if !dara.IsNil(request.Tag) {
		query["Tag"] = request.Tag
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImageVulList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageVulListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the whitelist of image vulnerabilities.
//
// @param request - DescribeImageVulWhiteListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageVulWhiteListResponse
func (client *Client) DescribeImageVulWhiteListWithContext(ctx context.Context, request *DescribeImageVulWhiteListRequest, runtime *dara.RuntimeOptions) (_result *DescribeImageVulWhiteListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AliasName) {
		query["AliasName"] = request.AliasName
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeImageVulWhiteList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeImageVulWhiteListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the verification codes that are used to manually install the Security Center agent.
//
// @param request - DescribeInstallCaptchaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstallCaptchaResponse
func (client *Client) DescribeInstallCaptchaWithContext(ctx context.Context, request *DescribeInstallCaptchaRequest, runtime *dara.RuntimeOptions) (_result *DescribeInstallCaptchaResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Deadline) {
		query["Deadline"] = request.Deadline
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeInstallCaptcha"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeInstallCaptchaResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about servers to which a defense rule against brute-force attacks is applied.
//
// @param request - DescribeInstanceAntiBruteForceRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstanceAntiBruteForceRulesResponse
func (client *Client) DescribeInstanceAntiBruteForceRulesWithContext(ctx context.Context, request *DescribeInstanceAntiBruteForceRulesRequest, runtime *dara.RuntimeOptions) (_result *DescribeInstanceAntiBruteForceRulesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.UuidList) {
		query["UuidList"] = request.UuidList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeInstanceAntiBruteForceRules"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeInstanceAntiBruteForceRulesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the status of the instance that you restart.
//
// @param request - DescribeInstanceRebootStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstanceRebootStatusResponse
func (client *Client) DescribeInstanceRebootStatusWithContext(ctx context.Context, request *DescribeInstanceRebootStatusRequest, runtime *dara.RuntimeOptions) (_result *DescribeInstanceRebootStatusResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeInstanceRebootStatus"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeInstanceRebootStatusResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics of assets that are protected by Security Center.
//
// @param request - DescribeInstanceStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstanceStatisticsResponse
func (client *Client) DescribeInstanceStatisticsWithContext(ctx context.Context, request *DescribeInstanceStatisticsRequest, runtime *dara.RuntimeOptions) (_result *DescribeInstanceStatisticsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeInstanceStatistics"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeInstanceStatisticsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics of vulnerabilities that are detected on a cluster.
//
// @param request - DescribeInstanceVulStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstanceVulStatisticsResponse
func (client *Client) DescribeInstanceVulStatisticsWithContext(ctx context.Context, request *DescribeInstanceVulStatisticsRequest, runtime *dara.RuntimeOptions) (_result *DescribeInstanceVulStatisticsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Types) {
		query["Types"] = request.Types
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeInstanceVulStatistics"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeInstanceVulStatisticsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configurations of the log analysis feature provided by Security Center.
//
// @param request - DescribeLogMetaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLogMetaResponse
func (client *Client) DescribeLogMetaWithContext(ctx context.Context, request *DescribeLogMetaRequest, runtime *dara.RuntimeOptions) (_result *DescribeLogMetaResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLogMeta"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLogMetaResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the status information about the log analysis feature.
//
// @param request - DescribeLogShipperStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLogShipperStatusResponse
func (client *Client) DescribeLogShipperStatusWithContext(ctx context.Context, request *DescribeLogShipperStatusRequest, runtime *dara.RuntimeOptions) (_result *DescribeLogShipperStatusResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLogShipperStatus"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLogShipperStatusResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about the configurations that are used to detect unusual logons to your servers.
//
// @param request - DescribeLoginBaseConfigsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLoginBaseConfigsResponse
func (client *Client) DescribeLoginBaseConfigsWithContext(ctx context.Context, request *DescribeLoginBaseConfigsRequest, runtime *dara.RuntimeOptions) (_result *DescribeLoginBaseConfigsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Target) {
		query["Target"] = request.Target
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLoginBaseConfigs"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLoginBaseConfigsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the purchased log storage capacity.
//
// @param request - DescribeLogstoreStorageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLogstoreStorageResponse
func (client *Client) DescribeLogstoreStorageWithContext(ctx context.Context, request *DescribeLogstoreStorageRequest, runtime *dara.RuntimeOptions) (_result *DescribeLogstoreStorageResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLogstoreStorage"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLogstoreStorageResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries whether a server can be restarted after the vulnerabilities on the server are fixed. The fixes take effect only after the server is restarted.
//
// @param request - DescribeMachineCanRebootRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMachineCanRebootResponse
func (client *Client) DescribeMachineCanRebootWithContext(ctx context.Context, request *DescribeMachineCanRebootRequest, runtime *dara.RuntimeOptions) (_result *DescribeMachineCanRebootResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeMachineCanReboot"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeMachineCanRebootResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of malicious image sample types.
//
// @param request - DescribeMatchedMaliciousNamesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMatchedMaliciousNamesResponse
func (client *Client) DescribeMatchedMaliciousNamesWithContext(ctx context.Context, request *DescribeMatchedMaliciousNamesRequest, runtime *dara.RuntimeOptions) (_result *DescribeMatchedMaliciousNamesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Levels) {
		query["Levels"] = request.Levels
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeMatchedMaliciousNames"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeMatchedMaliciousNamesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries whether slow queries need to be optimized.
//
// @param request - DescribeNeedAsyncQueryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeNeedAsyncQueryResponse
func (client *Client) DescribeNeedAsyncQueryWithContext(ctx context.Context, request *DescribeNeedAsyncQueryRequest, runtime *dara.RuntimeOptions) (_result *DescribeNeedAsyncQueryResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeNeedAsyncQuery"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeNeedAsyncQueryResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries notification settings.
//
// @param request - DescribeNoticeConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeNoticeConfigResponse
func (client *Client) DescribeNoticeConfigWithContext(ctx context.Context, request *DescribeNoticeConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeNoticeConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeNoticeConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeNoticeConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about an alert type.
//
// @param request - DescribeNsasSuspEventTypeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeNsasSuspEventTypeResponse
func (client *Client) DescribeNsasSuspEventTypeWithContext(ctx context.Context, request *DescribeNsasSuspEventTypeRequest, runtime *dara.RuntimeOptions) (_result *DescribeNsasSuspEventTypeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ContainerFieldName) {
		query["ContainerFieldName"] = request.ContainerFieldName
	}

	if !dara.IsNil(request.ContainerFieldValue) {
		query["ContainerFieldValue"] = request.ContainerFieldValue
	}

	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.MultiAccountActionType) {
		query["MultiAccountActionType"] = request.MultiAccountActionType
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.SupportOperateCodeList) {
		query["SupportOperateCodeList"] = request.SupportOperateCodeList
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeNsasSuspEventType"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeNsasSuspEventTypeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about the servers whose Security Center agent status is Offline.
//
// @param request - DescribeOfflineMachinesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeOfflineMachinesResponse
func (client *Client) DescribeOfflineMachinesWithContext(ctx context.Context, request *DescribeOfflineMachinesRequest, runtime *dara.RuntimeOptions) (_result *DescribeOfflineMachinesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Os) {
		query["Os"] = request.Os
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionIdStr) {
		query["RegionIdStr"] = request.RegionIdStr
	}

	if !dara.IsNil(request.RegionNo) {
		query["RegionNo"] = request.RegionNo
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Vendor) {
		query["Vendor"] = request.Vendor
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeOfflineMachines"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeOfflineMachinesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries agent tasks.
//
// @param request - DescribeOnceTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeOnceTaskResponse
func (client *Client) DescribeOnceTaskWithContext(ctx context.Context, request *DescribeOnceTaskRequest, runtime *dara.RuntimeOptions) (_result *DescribeOnceTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.EndTimeQuery) {
		query["EndTimeQuery"] = request.EndTimeQuery
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RootTaskId) {
		query["RootTaskId"] = request.RootTaskId
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	if !dara.IsNil(request.StartTimeQuery) {
		query["StartTimeQuery"] = request.StartTimeQuery
	}

	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	if !dara.IsNil(request.TaskType) {
		query["TaskType"] = request.TaskType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeOnceTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeOnceTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the sub-task information of one-time scan task. A sub-task can be an image scan task or an image asset synchronization task.
//
// @param request - DescribeOnceTaskLeafRecordPageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeOnceTaskLeafRecordPageResponse
func (client *Client) DescribeOnceTaskLeafRecordPageWithContext(ctx context.Context, request *DescribeOnceTaskLeafRecordPageRequest, runtime *dara.RuntimeOptions) (_result *DescribeOnceTaskLeafRecordPageResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RelateInfo) {
		query["RelateInfo"] = request.RelateInfo
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.StatusList) {
		query["StatusList"] = request.StatusList
	}

	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	if !dara.IsNil(request.TaskType) {
		query["TaskType"] = request.TaskType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeOnceTaskLeafRecordPage"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeOnceTaskLeafRecordPageResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries statistics on the client plug-in installation status.
//
// @param request - DescribePluginSummaryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePluginSummaryResponse
func (client *Client) DescribePluginSummaryWithContext(ctx context.Context, request *DescribePluginSummaryRequest, runtime *dara.RuntimeOptions) (_result *DescribePluginSummaryResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PluginName) {
		query["PluginName"] = request.PluginName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribePluginSummary"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribePluginSummaryResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics of asset fingerprints. The assets include processes, ports, software, accounts, middleware, websites, web services, scheduled tasks, startup items, and databases.
//
// @param request - DescribePropertyCountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePropertyCountResponse
func (client *Client) DescribePropertyCountWithContext(ctx context.Context, request *DescribePropertyCountRequest, runtime *dara.RuntimeOptions) (_result *DescribePropertyCountResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	if !dara.IsNil(request.UuidList) {
		query["UuidList"] = request.UuidList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribePropertyCount"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribePropertyCountResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of scheduled tasks on the Host page.
//
// @param request - DescribePropertyCronDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePropertyCronDetailResponse
func (client *Client) DescribePropertyCronDetailWithContext(ctx context.Context, request *DescribePropertyCronDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribePropertyCronDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Extend) {
		query["Extend"] = request.Extend
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	if !dara.IsNil(request.User) {
		query["User"] = request.User
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribePropertyCronDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribePropertyCronDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the scheduled tasks of your assets.
//
// @param request - DescribePropertyCronItemRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePropertyCronItemResponse
func (client *Client) DescribePropertyCronItemWithContext(ctx context.Context, request *DescribePropertyCronItemRequest, runtime *dara.RuntimeOptions) (_result *DescribePropertyCronItemResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.ForceFlush) {
		query["ForceFlush"] = request.ForceFlush
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribePropertyCronItem"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribePropertyCronItemResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the fingerprints of ports on a specified server.
//
// @param request - DescribePropertyPortDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePropertyPortDetailResponse
func (client *Client) DescribePropertyPortDetailWithContext(ctx context.Context, request *DescribePropertyPortDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribePropertyPortDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BindIp) {
		query["BindIp"] = request.BindIp
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Extend) {
		query["Extend"] = request.Extend
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Port) {
		query["Port"] = request.Port
	}

	if !dara.IsNil(request.ProcName) {
		query["ProcName"] = request.ProcName
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribePropertyPortDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribePropertyPortDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries information about all ports.
//
// @param request - DescribePropertyPortItemRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePropertyPortItemResponse
func (client *Client) DescribePropertyPortItemWithContext(ctx context.Context, request *DescribePropertyPortItemRequest, runtime *dara.RuntimeOptions) (_result *DescribePropertyPortItemResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.ForceFlush) {
		query["ForceFlush"] = request.ForceFlush
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Port) {
		query["Port"] = request.Port
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribePropertyPortItem"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribePropertyPortItemResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the fingerprints of processes on a specified server.
//
// @param request - DescribePropertyProcDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePropertyProcDetailResponse
func (client *Client) DescribePropertyProcDetailWithContext(ctx context.Context, request *DescribePropertyProcDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribePropertyProcDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Cmdline) {
		query["Cmdline"] = request.Cmdline
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Extend) {
		query["Extend"] = request.Extend
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.ProcTimeEnd) {
		query["ProcTimeEnd"] = request.ProcTimeEnd
	}

	if !dara.IsNil(request.ProcTimeStart) {
		query["ProcTimeStart"] = request.ProcTimeStart
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.User) {
		query["User"] = request.User
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribePropertyProcDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribePropertyProcDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries information about all processes.
//
// @param request - DescribePropertyProcItemRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePropertyProcItemResponse
func (client *Client) DescribePropertyProcItemWithContext(ctx context.Context, request *DescribePropertyProcItemRequest, runtime *dara.RuntimeOptions) (_result *DescribePropertyProcItemResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.ForceFlush) {
		query["ForceFlush"] = request.ForceFlush
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribePropertyProcItem"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribePropertyProcItemResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries middleware fingerprints.
//
// @param request - DescribePropertyScaDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePropertyScaDetailResponse
func (client *Client) DescribePropertyScaDetailWithContext(ctx context.Context, request *DescribePropertyScaDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribePropertyScaDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Biz) {
		query["Biz"] = request.Biz
	}

	if !dara.IsNil(request.BizType) {
		query["BizType"] = request.BizType
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Pid) {
		query["Pid"] = request.Pid
	}

	if !dara.IsNil(request.Port) {
		query["Port"] = request.Port
	}

	if !dara.IsNil(request.ProcessStartedEnd) {
		query["ProcessStartedEnd"] = request.ProcessStartedEnd
	}

	if !dara.IsNil(request.ProcessStartedStart) {
		query["ProcessStartedStart"] = request.ProcessStartedStart
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.ScaName) {
		query["ScaName"] = request.ScaName
	}

	if !dara.IsNil(request.ScaNamePattern) {
		query["ScaNamePattern"] = request.ScaNamePattern
	}

	if !dara.IsNil(request.ScaVersion) {
		query["ScaVersion"] = request.ScaVersion
	}

	if !dara.IsNil(request.SearchInfo) {
		query["SearchInfo"] = request.SearchInfo
	}

	if !dara.IsNil(request.SearchInfoSub) {
		query["SearchInfoSub"] = request.SearchInfoSub
	}

	if !dara.IsNil(request.SearchItem) {
		query["SearchItem"] = request.SearchItem
	}

	if !dara.IsNil(request.SearchItemSub) {
		query["SearchItemSub"] = request.SearchItemSub
	}

	if !dara.IsNil(request.User) {
		query["User"] = request.User
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribePropertyScaDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribePropertyScaDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries middleware fingerprints.
//
// @param request - DescribePropertyScaItemRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePropertyScaItemResponse
func (client *Client) DescribePropertyScaItemWithContext(ctx context.Context, request *DescribePropertyScaItemRequest, runtime *dara.RuntimeOptions) (_result *DescribePropertyScaItemResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Biz) {
		query["Biz"] = request.Biz
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.ForceFlush) {
		query["ForceFlush"] = request.ForceFlush
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.SearchInfo) {
		query["SearchInfo"] = request.SearchInfo
	}

	if !dara.IsNil(request.SearchItem) {
		query["SearchItem"] = request.SearchItem
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribePropertyScaItem"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribePropertyScaItemResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the Java processes that are collected by the asset fingerprints feature of Security Center in your assets.
//
// @param request - DescribePropertyScaProcessDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePropertyScaProcessDetailResponse
func (client *Client) DescribePropertyScaProcessDetailWithContext(ctx context.Context, request *DescribePropertyScaProcessDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribePropertyScaProcessDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BizType) {
		query["BizType"] = request.BizType
	}

	if !dara.IsNil(request.Cmdline) {
		query["Cmdline"] = request.Cmdline
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Pid) {
		query["Pid"] = request.Pid
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribePropertyScaProcessDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribePropertyScaProcessDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configurations of scheduled tasks of asset fingerprint collection.
//
// @param request - DescribePropertyScheduleConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePropertyScheduleConfigResponse
func (client *Client) DescribePropertyScheduleConfigWithContext(ctx context.Context, request *DescribePropertyScheduleConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribePropertyScheduleConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribePropertyScheduleConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribePropertyScheduleConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a software asset.
//
// @param request - DescribePropertySoftwareDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePropertySoftwareDetailResponse
func (client *Client) DescribePropertySoftwareDetailWithContext(ctx context.Context, request *DescribePropertySoftwareDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribePropertySoftwareDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Extend) {
		query["Extend"] = request.Extend
	}

	if !dara.IsNil(request.InstallTimeEnd) {
		query["InstallTimeEnd"] = request.InstallTimeEnd
	}

	if !dara.IsNil(request.InstallTimeStart) {
		query["InstallTimeStart"] = request.InstallTimeStart
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Path) {
		query["Path"] = request.Path
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.SoftwareVersion) {
		query["SoftwareVersion"] = request.SoftwareVersion
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribePropertySoftwareDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribePropertySoftwareDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries information about all software assets.
//
// @param request - DescribePropertySoftwareItemRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePropertySoftwareItemResponse
func (client *Client) DescribePropertySoftwareItemWithContext(ctx context.Context, request *DescribePropertySoftwareItemRequest, runtime *dara.RuntimeOptions) (_result *DescribePropertySoftwareItemResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.ForceFlush) {
		query["ForceFlush"] = request.ForceFlush
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribePropertySoftwareItem"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribePropertySoftwareItemResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries middleware types.
//
// @param request - DescribePropertyTypeScaItemRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePropertyTypeScaItemResponse
func (client *Client) DescribePropertyTypeScaItemWithContext(ctx context.Context, request *DescribePropertyTypeScaItemRequest, runtime *dara.RuntimeOptions) (_result *DescribePropertyTypeScaItemResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribePropertyTypeScaItem"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribePropertyTypeScaItemResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Uses the asset fingerprints feature to obtain the statistics on top five most frequently detected ports, processes, software, accounts, or middleware.
//
// Description:
//
// Only users who purchase the Enterprise or Ultimate edition of Security Center can call this operation.
//
// @param request - DescribePropertyUsageTopRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePropertyUsageTopResponse
func (client *Client) DescribePropertyUsageTopWithContext(ctx context.Context, request *DescribePropertyUsageTopRequest, runtime *dara.RuntimeOptions) (_result *DescribePropertyUsageTopResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribePropertyUsageTop"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribePropertyUsageTopResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the asset fingerprints for an account to which a server belongs.
//
// @param request - DescribePropertyUserDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePropertyUserDetailResponse
func (client *Client) DescribePropertyUserDetailWithContext(ctx context.Context, request *DescribePropertyUserDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribePropertyUserDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Extend) {
		query["Extend"] = request.Extend
	}

	if !dara.IsNil(request.IsRoot) {
		query["IsRoot"] = request.IsRoot
	}

	if !dara.IsNil(request.LastLoginTimeEnd) {
		query["LastLoginTimeEnd"] = request.LastLoginTimeEnd
	}

	if !dara.IsNil(request.LastLoginTimeStart) {
		query["LastLoginTimeStart"] = request.LastLoginTimeStart
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.User) {
		query["User"] = request.User
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribePropertyUserDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribePropertyUserDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries information about an account.
//
// @param request - DescribePropertyUserItemRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePropertyUserItemResponse
func (client *Client) DescribePropertyUserItemWithContext(ctx context.Context, request *DescribePropertyUserItemRequest, runtime *dara.RuntimeOptions) (_result *DescribePropertyUserItemResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.ForceFlush) {
		query["ForceFlush"] = request.ForceFlush
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.User) {
		query["User"] = request.User
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribePropertyUserItem"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribePropertyUserItemResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the download information about a quarantined file.
//
// @param request - DescribeQuaraFileDownloadInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeQuaraFileDownloadInfoResponse
func (client *Client) DescribeQuaraFileDownloadInfoWithContext(ctx context.Context, request *DescribeQuaraFileDownloadInfoRequest, runtime *dara.RuntimeOptions) (_result *DescribeQuaraFileDownloadInfoResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.QuaraFileId) {
		query["QuaraFileId"] = request.QuaraFileId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeQuaraFileDownloadInfo"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeQuaraFileDownloadInfoResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a report export task.
//
// @param request - DescribeReportExportRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeReportExportResponse
func (client *Client) DescribeReportExportWithContext(ctx context.Context, request *DescribeReportExportRequest, runtime *dara.RuntimeOptions) (_result *DescribeReportExportResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ExportId) {
		query["ExportId"] = request.ExportId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeReportExport"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeReportExportResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the status of a report recipient by using the security report feature of the System Configuration module in the Security Center console.
//
// @param request - DescribeReportRecipientStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeReportRecipientStatusResponse
func (client *Client) DescribeReportRecipientStatusWithContext(ctx context.Context, request *DescribeReportRecipientStatusRequest, runtime *dara.RuntimeOptions) (_result *DescribeReportRecipientStatusResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Recipients) {
		query["Recipients"] = request.Recipients
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeReportRecipientStatus"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeReportRecipientStatusResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details about restoration tasks.
//
// Description:
//
// If the data on your servers is encrypted by ransomware, you can create a restoration task to restore the data on your servers by using backup data in Security Center.
//
// >  After you enable an anti-ransomware policy, the data on your servers is backed up based on the policy. For more information about anti-ransomware policies, see [Manage protection policies](https://help.aliyun.com/document_detail/164781.html).
//
// @param request - DescribeRestoreJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRestoreJobsResponse
func (client *Client) DescribeRestoreJobsWithContext(ctx context.Context, request *DescribeRestoreJobsRequest, runtime *dara.RuntimeOptions) (_result *DescribeRestoreJobsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.MachineRemark) {
		query["MachineRemark"] = request.MachineRemark
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeRestoreJobs"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeRestoreJobsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries restoration tasks.
//
// @param request - DescribeRestorePlansRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRestorePlansResponse
func (client *Client) DescribeRestorePlansWithContext(ctx context.Context, request *DescribeRestorePlansRequest, runtime *dara.RuntimeOptions) (_result *DescribeRestorePlansResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.InstanceName) {
		query["InstanceName"] = request.InstanceName
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeRestorePlans"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeRestorePlansResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI DescribeRiskCheckItemResult is deprecated
//
// Summary:
//
// Queries the assets that are affected by the risk item detected in configuration assessment based on a specified check item.
//
// Description:
//
// This operation is phased out. You can use the ListCheckInstanceResult operation.
//
// @param request - DescribeRiskCheckItemResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRiskCheckItemResultResponse
func (client *Client) DescribeRiskCheckItemResultWithContext(ctx context.Context, request *DescribeRiskCheckItemResultRequest, runtime *dara.RuntimeOptions) (_result *DescribeRiskCheckItemResultResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.ItemId) {
		query["ItemId"] = request.ItemId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeRiskCheckItemResult"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeRiskCheckItemResultResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI DescribeRiskCheckResult is deprecated
//
// Summary:
//
// Queries the check results of cloud service configurations by check item type or name.
//
// Description:
//
// This operation is phased out. You can use the [ListCheckResult](~~ListCheckResult~~) operation.
//
// @param request - DescribeRiskCheckResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRiskCheckResultResponse
func (client *Client) DescribeRiskCheckResultWithContext(ctx context.Context, request *DescribeRiskCheckResultRequest, runtime *dara.RuntimeOptions) (_result *DescribeRiskCheckResultResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AssetType) {
		query["AssetType"] = request.AssetType
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.ItemIds) {
		query["ItemIds"] = request.ItemIds
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.QueryFlag) {
		query["QueryFlag"] = request.QueryFlag
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.RiskLevel) {
		query["RiskLevel"] = request.RiskLevel
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeRiskCheckResult"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeRiskCheckResultResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI DescribeRiskCheckSummary is deprecated
//
// Summary:
//
// Queries the summary information about the check results of cloud service configurations. The information includes the number of risk items, the risk rate, the number of affected assets, the check time, and the statistics for each type of check item.
//
// Description:
//
// This operation is phased out. You can use the GetCheckSummary operation.
//
// @param request - DescribeRiskCheckSummaryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRiskCheckSummaryResponse
func (client *Client) DescribeRiskCheckSummaryWithContext(ctx context.Context, request *DescribeRiskCheckSummaryRequest, runtime *dara.RuntimeOptions) (_result *DescribeRiskCheckSummaryResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeRiskCheckSummary"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeRiskCheckSummaryResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI DescribeRiskItemType is deprecated
//
// Summary:
//
// Queries the types of check items in configuration assessment.
//
// Description:
//
// This operation is phased out. You can use the ListCheckStandard operation instead.
//
// @param request - DescribeRiskItemTypeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRiskItemTypeResponse
func (client *Client) DescribeRiskItemTypeWithContext(ctx context.Context, request *DescribeRiskItemTypeRequest, runtime *dara.RuntimeOptions) (_result *DescribeRiskItemTypeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeRiskItemType"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeRiskItemTypeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI DescribeRiskListCheckResult is deprecated
//
// Summary:
//
// Queries the number of risk items detected in the configuration assessment of one or more cloud services by using the instance IDs of the cloud services.
//
// Description:
//
// This operation is phased out. You can use the ListCheckResult operation. When you call the ListCheckResult operation, set the Statuses parameter to NOT_PASS.
//
// @param request - DescribeRiskListCheckResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRiskListCheckResultResponse
func (client *Client) DescribeRiskListCheckResultWithContext(ctx context.Context, request *DescribeRiskListCheckResultRequest, runtime *dara.RuntimeOptions) (_result *DescribeRiskListCheckResultResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.InstanceIds) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeRiskListCheckResult"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeRiskListCheckResultResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries baseline types.
//
// @param request - DescribeRiskTypeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRiskTypeResponse
func (client *Client) DescribeRiskTypeWithContext(ctx context.Context, request *DescribeRiskTypeRequest, runtime *dara.RuntimeOptions) (_result *DescribeRiskTypeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeRiskType"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeRiskTypeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about baselines based on baseline IDs or names.
//
// @param request - DescribeRisksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRisksResponse
func (client *Client) DescribeRisksWithContext(ctx context.Context, request *DescribeRisksRequest, runtime *dara.RuntimeOptions) (_result *DescribeRisksResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Limit) {
		query["Limit"] = request.Limit
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.RiskId) {
		query["RiskId"] = request.RiskId
	}

	if !dara.IsNil(request.RiskName) {
		query["RiskName"] = request.RiskName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeRisks"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeRisksResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the servers on which you want to install Cloud Assistant or the CloudMonitor agent.
//
// @param request - DescribeSasPmAgentListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSasPmAgentListResponse
func (client *Client) DescribeSasPmAgentListWithContext(ctx context.Context, request *DescribeSasPmAgentListRequest, runtime *dara.RuntimeOptions) (_result *DescribeSasPmAgentListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSasPmAgentList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSasPmAgentListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the progress of a virus scan task.
//
// @param request - DescribeScanTaskProgressRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeScanTaskProgressResponse
func (client *Client) DescribeScanTaskProgressWithContext(ctx context.Context, request *DescribeScanTaskProgressRequest, runtime *dara.RuntimeOptions) (_result *DescribeScanTaskProgressResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeScanTaskProgress"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeScanTaskProgressResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics of virus detection tasks.
//
// @param request - DescribeScanTaskStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeScanTaskStatisticsResponse
func (client *Client) DescribeScanTaskStatisticsWithContext(ctx context.Context, request *DescribeScanTaskStatisticsRequest, runtime *dara.RuntimeOptions) (_result *DescribeScanTaskStatisticsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Levels) {
		query["Levels"] = request.Levels
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeScanTaskStatistics"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeScanTaskStatisticsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the trends of the scores on the security dashboard.
//
// @param request - DescribeScreenScoreThreadRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeScreenScoreThreadResponse
func (client *Client) DescribeScreenScoreThreadWithContext(ctx context.Context, request *DescribeScreenScoreThreadRequest, runtime *dara.RuntimeOptions) (_result *DescribeScreenScoreThreadResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeScreenScoreThread"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeScreenScoreThreadResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the filter conditions that are used to search for assets.
//
// @param request - DescribeSearchConditionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSearchConditionResponse
func (client *Client) DescribeSearchConditionWithContext(ctx context.Context, request *DescribeSearchConditionRequest, runtime *dara.RuntimeOptions) (_result *DescribeSearchConditionResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSearchCondition"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSearchConditionResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries suggestions on how to handle the risks that affect the security score.
//
// @param request - DescribeSecureSuggestionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSecureSuggestionResponse
func (client *Client) DescribeSecureSuggestionWithContext(ctx context.Context, request *DescribeSecureSuggestionRequest, runtime *dara.RuntimeOptions) (_result *DescribeSecureSuggestionResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CalType) {
		query["CalType"] = request.CalType
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSecureSuggestion"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSecureSuggestionResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI DescribeSecurityCheckScheduleConfig is deprecated
//
// Summary:
//
// Queries the day of a week when custom check tasks are performed and the time range during which the custom check tasks are performed.
//
// Description:
//
// This operation is phased out. You can use the GetCheckConfig operation.
//
// @param request - DescribeSecurityCheckScheduleConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSecurityCheckScheduleConfigResponse
func (client *Client) DescribeSecurityCheckScheduleConfigWithContext(ctx context.Context, request *DescribeSecurityCheckScheduleConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeSecurityCheckScheduleConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSecurityCheckScheduleConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSecurityCheckScheduleConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the list of whitelist rules.
//
// @param request - DescribeSecurityEventMarkMissListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSecurityEventMarkMissListResponse
func (client *Client) DescribeSecurityEventMarkMissListWithContext(ctx context.Context, request *DescribeSecurityEventMarkMissListRequest, runtime *dara.RuntimeOptions) (_result *DescribeSecurityEventMarkMissListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.EventName) {
		query["EventName"] = request.EventName
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSecurityEventMarkMissList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSecurityEventMarkMissListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the alert events that are triggered by the same IP address rule or of the same alert type as a specific alert event if you want to handle the specific alert event in batch operation mode.
//
// @param request - DescribeSecurityEventOperationStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSecurityEventOperationStatusResponse
func (client *Client) DescribeSecurityEventOperationStatusWithContext(ctx context.Context, request *DescribeSecurityEventOperationStatusRequest, runtime *dara.RuntimeOptions) (_result *DescribeSecurityEventOperationStatusResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SecurityEventIds) {
		query["SecurityEventIds"] = request.SecurityEventIds
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSecurityEventOperationStatus"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSecurityEventOperationStatusResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the operations that you can perform to handle an alert.
//
// @param request - DescribeSecurityEventOperationsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSecurityEventOperationsResponse
func (client *Client) DescribeSecurityEventOperationsWithContext(ctx context.Context, request *DescribeSecurityEventOperationsRequest, runtime *dara.RuntimeOptions) (_result *DescribeSecurityEventOperationsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SecurityEventId) {
		query["SecurityEventId"] = request.SecurityEventId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSecurityEventOperations"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSecurityEventOperationsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics of each security check item and the daily statistics in the trend chart based on each security check item.
//
// @param request - DescribeSecurityStatInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSecurityStatInfoResponse
func (client *Client) DescribeSecurityStatInfoWithContext(ctx context.Context, request *DescribeSecurityStatInfoRequest, runtime *dara.RuntimeOptions) (_result *DescribeSecurityStatInfoResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSecurityStatInfo"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSecurityStatInfoResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Checks whether a service-linked role is created for Security Center.
//
// @param request - DescribeServiceLinkedRoleStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeServiceLinkedRoleStatusResponse
func (client *Client) DescribeServiceLinkedRoleStatusWithContext(ctx context.Context, request *DescribeServiceLinkedRoleStatusRequest, runtime *dara.RuntimeOptions) (_result *DescribeServiceLinkedRoleStatusResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ServiceLinkedRole) {
		query["ServiceLinkedRole"] = request.ServiceLinkedRole
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeServiceLinkedRoleStatus"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeServiceLinkedRoleStatusResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the scenarios in which alerts triggered by the same rule or rules of the same type are handled.
//
// @param request - DescribeSimilarEventScenariosRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSimilarEventScenariosResponse
func (client *Client) DescribeSimilarEventScenariosWithContext(ctx context.Context, request *DescribeSimilarEventScenariosRequest, runtime *dara.RuntimeOptions) (_result *DescribeSimilarEventScenariosResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SecurityEventId) {
		query["SecurityEventId"] = request.SecurityEventId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSimilarEventScenarios"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSimilarEventScenariosResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries alert events that are triggered by the same rule or of the same alert type.
//
// @param request - DescribeSimilarSecurityEventsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSimilarSecurityEventsResponse
func (client *Client) DescribeSimilarSecurityEventsWithContext(ctx context.Context, request *DescribeSimilarSecurityEventsRequest, runtime *dara.RuntimeOptions) (_result *DescribeSimilarSecurityEventsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSimilarSecurityEvents"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSimilarSecurityEventsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the backup snapshots that are created for anti-ransomware.
//
// @param request - DescribeSnapshotsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSnapshotsResponse
func (client *Client) DescribeSnapshotsWithContext(ctx context.Context, request *DescribeSnapshotsRequest, runtime *dara.RuntimeOptions) (_result *DescribeSnapshotsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ApiVersion) {
		query["ApiVersion"] = request.ApiVersion
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.IsAliYunEcs) {
		query["IsAliYunEcs"] = request.IsAliYunEcs
	}

	if !dara.IsNil(request.MachineRegion) {
		query["MachineRegion"] = request.MachineRegion
	}

	if !dara.IsNil(request.MachineRemark) {
		query["MachineRemark"] = request.MachineRemark
	}

	if !dara.IsNil(request.NextToken) {
		query["NextToken"] = request.NextToken
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.StatusList) {
		query["StatusList"] = request.StatusList
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSnapshots"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSnapshotsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Query the execution details of a remediation task playbook
//
// Description:
//
// This API is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.
//
// @param request - DescribeSoarPlaybookTaskDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSoarPlaybookTaskDetailResponse
func (client *Client) DescribeSoarPlaybookTaskDetailWithContext(ctx context.Context, request *DescribeSoarPlaybookTaskDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribeSoarPlaybookTaskDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.PlaybookId) {
		query["PlaybookId"] = request.PlaybookId
	}

	if !dara.IsNil(request.RecordId) {
		query["RecordId"] = request.RecordId
	}

	if !dara.IsNil(request.RequestUuid) {
		query["RequestUuid"] = request.RequestUuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSoarPlaybookTaskDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSoarPlaybookTaskDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the policy templates on the Playbook page.
//
// Description:
//
// Only the Enterprise and Ultimate editions of Security Center support this API operation.
//
// @param request - DescribeSoarStrategiesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSoarStrategiesResponse
func (client *Client) DescribeSoarStrategiesWithContext(ctx context.Context, request *DescribeSoarStrategiesRequest, runtime *dara.RuntimeOptions) (_result *DescribeSoarStrategiesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSoarStrategies"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSoarStrategiesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the parameters of a policy on the Playbook page.
//
// Description:
//
// Only the Enterprise and Ultimate editions of Security Center support this API operation.
//
// @param request - DescribeSoarStrategyParamRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSoarStrategyParamResponse
func (client *Client) DescribeSoarStrategyParamWithContext(ctx context.Context, request *DescribeSoarStrategyParamRequest, runtime *dara.RuntimeOptions) (_result *DescribeSoarStrategyParamResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.StrategyId) {
		query["StrategyId"] = request.StrategyId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSoarStrategyParam"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSoarStrategyParamResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a policy task on the Playbook page, including the execution status of the task and the process information of the task.
//
// Description:
//
// Only the Enterprise and Ultimate editions of Security Center support this API operation.
//
// @param request - DescribeSoarStrategyTaskDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSoarStrategyTaskDetailResponse
func (client *Client) DescribeSoarStrategyTaskDetailWithContext(ctx context.Context, request *DescribeSoarStrategyTaskDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribeSoarStrategyTaskDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.StrategyTaskId) {
		query["StrategyTaskId"] = request.StrategyTaskId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSoarStrategyTaskDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSoarStrategyTaskDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Get the input parameters for a specific task
//
// Description:
//
// Only the Enterprise and Flagship editions of Cloud Security Center support this API call, other versions do not support it.
//
// @param request - DescribeSoarStrategyTaskParamsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSoarStrategyTaskParamsResponse
func (client *Client) DescribeSoarStrategyTaskParamsWithContext(ctx context.Context, request *DescribeSoarStrategyTaskParamsRequest, runtime *dara.RuntimeOptions) (_result *DescribeSoarStrategyTaskParamsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSoarStrategyTaskParams"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSoarStrategyTaskParamsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Get the list of task execution results
//
// Description:
//
// This API is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.
//
// @param request - DescribeSoarStrategyTaskResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSoarStrategyTaskResultResponse
func (client *Client) DescribeSoarStrategyTaskResultWithContext(ctx context.Context, request *DescribeSoarStrategyTaskResultRequest, runtime *dara.RuntimeOptions) (_result *DescribeSoarStrategyTaskResultResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSoarStrategyTaskResult"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSoarStrategyTaskResultResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of policy tasks on the Playbook page.
//
// Description:
//
// Only the Enterprise and Ultimate editions of Security Center support this API operation.
//
// @param request - DescribeSoarStrategyTasksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSoarStrategyTasksResponse
func (client *Client) DescribeSoarStrategyTasksWithContext(ctx context.Context, request *DescribeSoarStrategyTasksRequest, runtime *dara.RuntimeOptions) (_result *DescribeSoarStrategyTasksResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSoarStrategyTasks"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSoarStrategyTasksResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of policies created on the Playbook page of Security Center.
//
// Description:
//
// Only the Enterprise and Ultimate editions of Security Center support this API operation.
//
// @param request - DescribeSoarSubscribedStrategyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSoarSubscribedStrategyResponse
func (client *Client) DescribeSoarSubscribedStrategyWithContext(ctx context.Context, request *DescribeSoarSubscribedStrategyRequest, runtime *dara.RuntimeOptions) (_result *DescribeSoarSubscribedStrategyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSoarSubscribedStrategy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSoarSubscribedStrategyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details about baseline check policies.
//
// @param request - DescribeStrategyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeStrategyResponse
func (client *Client) DescribeStrategyWithContext(ctx context.Context, request *DescribeStrategyRequest, runtime *dara.RuntimeOptions) (_result *DescribeStrategyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CustomType) {
		query["CustomType"] = request.CustomType
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.StrategyIds) {
		query["StrategyIds"] = request.StrategyIds
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeStrategy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeStrategyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a baseline check policy.
//
// @param request - DescribeStrategyDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeStrategyDetailResponse
func (client *Client) DescribeStrategyDetailWithContext(ctx context.Context, request *DescribeStrategyDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribeStrategyDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeStrategyDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeStrategyDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the results of the last baseline check by using a specified baseline check policy.
//
// @param request - DescribeStrategyExecDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeStrategyExecDetailResponse
func (client *Client) DescribeStrategyExecDetailWithContext(ctx context.Context, request *DescribeStrategyExecDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribeStrategyExecDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.StrategyId) {
		query["StrategyId"] = request.StrategyId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeStrategyExecDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeStrategyExecDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about the assets to which a baseline check policy is applied.
//
// @param request - DescribeStrategyTargetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeStrategyTargetResponse
func (client *Client) DescribeStrategyTargetWithContext(ctx context.Context, request *DescribeStrategyTargetRequest, runtime *dara.RuntimeOptions) (_result *DescribeStrategyTargetResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Config) {
		query["Config"] = request.Config
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeStrategyTarget"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeStrategyTargetResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Strict mode supports alarm queries
//
// @param request - DescribeStrictEventNameRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeStrictEventNameResponse
func (client *Client) DescribeStrictEventNameWithContext(ctx context.Context, request *DescribeStrictEventNameRequest, runtime *dara.RuntimeOptions) (_result *DescribeStrictEventNameResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeStrictEventName"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeStrictEventNameResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the security information about your assets. The information includes the security score and the numbers of protected and unprotected assets.
//
// @param request - DescribeSummaryInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSummaryInfoResponse
func (client *Client) DescribeSummaryInfoWithContext(ctx context.Context, request *DescribeSummaryInfoRequest, runtime *dara.RuntimeOptions) (_result *DescribeSummaryInfoResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSummaryInfo"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSummaryInfoResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of an exception. An alert event consists of an alert and exceptions. Each alert event is associated with multiple exceptions.
//
// @param request - DescribeSuspEventDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSuspEventDetailResponse
func (client *Client) DescribeSuspEventDetailWithContext(ctx context.Context, request *DescribeSuspEventDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribeSuspEventDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.SuspiciousEventId) {
		query["SuspiciousEventId"] = request.SuspiciousEventId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSuspEventDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSuspEventDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about an export task of exceptions.
//
// @param request - DescribeSuspEventExportInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSuspEventExportInfoResponse
func (client *Client) DescribeSuspEventExportInfoWithContext(ctx context.Context, request *DescribeSuspEventExportInfoRequest, runtime *dara.RuntimeOptions) (_result *DescribeSuspEventExportInfoResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ExportId) {
		query["ExportId"] = request.ExportId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSuspEventExportInfo"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSuspEventExportInfoResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries quarantined files by page.
//
// @param request - DescribeSuspEventQuaraFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSuspEventQuaraFilesResponse
func (client *Client) DescribeSuspEventQuaraFilesWithContext(ctx context.Context, request *DescribeSuspEventQuaraFilesRequest, runtime *dara.RuntimeOptions) (_result *DescribeSuspEventQuaraFilesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.GroupingId) {
		query["GroupingId"] = request.GroupingId
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.QuaraTag) {
		query["QuaraTag"] = request.QuaraTag
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSuspEventQuaraFiles"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSuspEventQuaraFilesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the user settings for exceptions.
//
// @param request - DescribeSuspEventUserSettingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSuspEventUserSettingResponse
func (client *Client) DescribeSuspEventUserSettingWithContext(ctx context.Context, request *DescribeSuspEventUserSettingRequest, runtime *dara.RuntimeOptions) (_result *DescribeSuspEventUserSettingResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSuspEventUserSetting"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSuspEventUserSettingResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of alert events that are generated without aggregation.
//
// @param tmpReq - DescribeSuspEventsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSuspEventsResponse
func (client *Client) DescribeSuspEventsWithContext(ctx context.Context, tmpReq *DescribeSuspEventsRequest, runtime *dara.RuntimeOptions) (_result *DescribeSuspEventsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &DescribeSuspEventsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.SourceAliUids) {
		request.SourceAliUidsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SourceAliUids, dara.String("SourceAliUids"), dara.String("simple"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.AlarmUniqueInfo) {
		query["AlarmUniqueInfo"] = request.AlarmUniqueInfo
	}

	if !dara.IsNil(request.AssetsTypeList) {
		query["AssetsTypeList"] = request.AssetsTypeList
	}

	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.ContainerFieldName) {
		query["ContainerFieldName"] = request.ContainerFieldName
	}

	if !dara.IsNil(request.ContainerFieldValue) {
		query["ContainerFieldValue"] = request.ContainerFieldValue
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Dealed) {
		query["Dealed"] = request.Dealed
	}

	if !dara.IsNil(request.EventNames) {
		query["EventNames"] = request.EventNames
	}

	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Levels) {
		query["Levels"] = request.Levels
	}

	if !dara.IsNil(request.MultiAccountActionType) {
		query["MultiAccountActionType"] = request.MultiAccountActionType
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.OperateErrorCodeList) {
		query["OperateErrorCodeList"] = request.OperateErrorCodeList
	}

	if !dara.IsNil(request.OperateTimeEnd) {
		query["OperateTimeEnd"] = request.OperateTimeEnd
	}

	if !dara.IsNil(request.OperateTimeStart) {
		query["OperateTimeStart"] = request.OperateTimeStart
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.ParentEventTypes) {
		query["ParentEventTypes"] = request.ParentEventTypes
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.SortColumn) {
		query["SortColumn"] = request.SortColumn
	}

	if !dara.IsNil(request.SortType) {
		query["SortType"] = request.SortType
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	if !dara.IsNil(request.SourceAliUidsShrink) {
		query["SourceAliUids"] = request.SourceAliUidsShrink
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	if !dara.IsNil(request.StrictMode) {
		query["StrictMode"] = request.StrictMode
	}

	if !dara.IsNil(request.SupportOperateCodeList) {
		query["SupportOperateCodeList"] = request.SupportOperateCodeList
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	if !dara.IsNil(request.TimeEnd) {
		query["TimeEnd"] = request.TimeEnd
	}

	if !dara.IsNil(request.TimeStart) {
		query["TimeStart"] = request.TimeStart
	}

	if !dara.IsNil(request.UniqueInfo) {
		query["UniqueInfo"] = request.UniqueInfo
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.TacticId) {
		body["TacticId"] = request.TacticId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSuspEvents"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSuspEventsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configuration of a specified feature.
//
// @param request - DescribeSuspiciousOverallConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSuspiciousOverallConfigResponse
func (client *Client) DescribeSuspiciousOverallConfigWithContext(ctx context.Context, request *DescribeSuspiciousOverallConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeSuspiciousOverallConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSuspiciousOverallConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSuspiciousOverallConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the UUIDs of servers on which proactive defense of a specified type takes effect.
//
// @param request - DescribeSuspiciousUUIDConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSuspiciousUUIDConfigResponse
func (client *Client) DescribeSuspiciousUUIDConfigWithContext(ctx context.Context, request *DescribeSuspiciousUUIDConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeSuspiciousUUIDConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSuspiciousUUIDConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSuspiciousUUIDConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of IDC scan tasks.
//
// @param request - DescribeSyncAssetTaskListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSyncAssetTaskListResponse
func (client *Client) DescribeSyncAssetTaskListWithContext(ctx context.Context, request *DescribeSyncAssetTaskListRequest, runtime *dara.RuntimeOptions) (_result *DescribeSyncAssetTaskListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.TaskName) {
		query["TaskName"] = request.TaskName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSyncAssetTaskList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSyncAssetTaskListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of an IDC scan task.
//
// @param request - DescribeSyncAssetTaskLogDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSyncAssetTaskLogDetailResponse
func (client *Client) DescribeSyncAssetTaskLogDetailWithContext(ctx context.Context, request *DescribeSyncAssetTaskLogDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribeSyncAssetTaskLogDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RootTaskId) {
		query["RootTaskId"] = request.RootTaskId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.TaskName) {
		query["TaskName"] = request.TaskName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSyncAssetTaskLogDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeSyncAssetTaskLogDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the servers on which vulnerability scan is enabled.
//
// @param request - DescribeTargetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTargetResponse
func (client *Client) DescribeTargetWithContext(ctx context.Context, request *DescribeTargetRequest, runtime *dara.RuntimeOptions) (_result *DescribeTargetResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Config) {
		query["Config"] = request.Config
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeTarget"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeTargetResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the error logs on a task that failed to fix image vulnerabilities.
//
// @param request - DescribeTaskErrorLogRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTaskErrorLogResponse
func (client *Client) DescribeTaskErrorLogWithContext(ctx context.Context, request *DescribeTaskErrorLogRequest, runtime *dara.RuntimeOptions) (_result *DescribeTaskErrorLogResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BuildTaskId) {
		query["BuildTaskId"] = request.BuildTaskId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeTaskErrorLog"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeTaskErrorLogResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries event statistics.
//
// @param request - DescribeTotalStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTotalStatisticsResponse
func (client *Client) DescribeTotalStatisticsWithContext(ctx context.Context, request *DescribeTotalStatisticsRequest, runtime *dara.RuntimeOptions) (_result *DescribeTotalStatisticsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeTotalStatistics"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeTotalStatisticsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the trace information about alerts.
//
// @param request - DescribeTraceInfoDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTraceInfoDetailResponse
func (client *Client) DescribeTraceInfoDetailWithContext(ctx context.Context, request *DescribeTraceInfoDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribeTraceInfoDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.IncidentTime) {
		query["IncidentTime"] = request.IncidentTime
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	if !dara.IsNil(request.VertexId) {
		query["VertexId"] = request.VertexId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeTraceInfoDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeTraceInfoDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details about a trace node.
//
// @param request - DescribeTraceInfoNodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTraceInfoNodeResponse
func (client *Client) DescribeTraceInfoNodeWithContext(ctx context.Context, request *DescribeTraceInfoNodeRequest, runtime *dara.RuntimeOptions) (_result *DescribeTraceInfoNodeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.EventName) {
		query["EventName"] = request.EventName
	}

	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.IncidentTime) {
		query["IncidentTime"] = request.IncidentTime
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	if !dara.IsNil(request.VertexId) {
		query["VertexId"] = request.VertexId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeTraceInfoNode"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeTraceInfoNodeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about databases for which anti-ransomware policies are created.
//
// @param request - DescribeUniBackupDatabaseRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeUniBackupDatabaseResponse
func (client *Client) DescribeUniBackupDatabaseWithContext(ctx context.Context, request *DescribeUniBackupDatabaseRequest, runtime *dara.RuntimeOptions) (_result *DescribeUniBackupDatabaseResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.DatabaseType) {
		query["DatabaseType"] = request.DatabaseType
	}

	if !dara.IsNil(request.InstanceName) {
		query["InstanceName"] = request.InstanceName
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.QueryType) {
		query["QueryType"] = request.QueryType
	}

	if !dara.IsNil(request.UniRegionId) {
		query["UniRegionId"] = request.UniRegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeUniBackupDatabase"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeUniBackupDatabaseResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the anti-ransomware policies that are created for databases.
//
// @param request - DescribeUniBackupPoliciesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeUniBackupPoliciesResponse
func (client *Client) DescribeUniBackupPoliciesWithContext(ctx context.Context, request *DescribeUniBackupPoliciesRequest, runtime *dara.RuntimeOptions) (_result *DescribeUniBackupPoliciesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.PolicyName) {
		query["PolicyName"] = request.PolicyName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeUniBackupPolicies"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeUniBackupPoliciesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of an anti-ransomware policy for databases.
//
// @param request - DescribeUniBackupPolicyDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeUniBackupPolicyDetailResponse
func (client *Client) DescribeUniBackupPolicyDetailWithContext(ctx context.Context, request *DescribeUniBackupPolicyDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribeUniBackupPolicyDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.PolicyId) {
		query["PolicyId"] = request.PolicyId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeUniBackupPolicyDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeUniBackupPolicyDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the backup snapshots from which the data of a database can be restored.
//
// @param request - DescribeUniRecoverableListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeUniRecoverableListResponse
func (client *Client) DescribeUniRecoverableListWithContext(ctx context.Context, request *DescribeUniRecoverableListRequest, runtime *dara.RuntimeOptions) (_result *DescribeUniRecoverableListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Database) {
		query["Database"] = request.Database
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.PolicyId) {
		query["PolicyId"] = request.PolicyId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeUniRecoverableList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeUniRecoverableListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// The source IP address of the request.
//
// @param request - DescribeUserBaselineAuthorizationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeUserBaselineAuthorizationResponse
func (client *Client) DescribeUserBaselineAuthorizationWithContext(ctx context.Context, request *DescribeUserBaselineAuthorizationRequest, runtime *dara.RuntimeOptions) (_result *DescribeUserBaselineAuthorizationResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeUserBaselineAuthorization"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeUserBaselineAuthorizationResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the settings of a custom baseline check policy.
//
// @param request - DescribeUserSettingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeUserSettingResponse
func (client *Client) DescribeUserSettingWithContext(ctx context.Context, request *DescribeUserSettingRequest, runtime *dara.RuntimeOptions) (_result *DescribeUserSettingResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeUserSetting"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeUserSettingResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of assets that support fixing based on vulnerability names.
//
// @param request - DescribeUuidsByVulNamesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeUuidsByVulNamesResponse
func (client *Client) DescribeUuidsByVulNamesWithContext(ctx context.Context, request *DescribeUuidsByVulNamesRequest, runtime *dara.RuntimeOptions) (_result *DescribeUuidsByVulNamesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Dealed) {
		query["Dealed"] = request.Dealed
	}

	if !dara.IsNil(request.FieldName) {
		query["FieldName"] = request.FieldName
	}

	if !dara.IsNil(request.FieldValue) {
		query["FieldValue"] = request.FieldValue
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Level) {
		query["Level"] = request.Level
	}

	if !dara.IsNil(request.Necessity) {
		query["Necessity"] = request.Necessity
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.SearchTags) {
		query["SearchTags"] = request.SearchTags
	}

	if !dara.IsNil(request.StatusList) {
		query["StatusList"] = request.StatusList
	}

	if !dara.IsNil(request.Tag) {
		query["Tag"] = request.Tag
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	if !dara.IsNil(request.VpcInstanceIds) {
		query["VpcInstanceIds"] = request.VpcInstanceIds
	}

	if !dara.IsNil(request.VulNames) {
		query["VulNames"] = request.VulNames
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeUuidsByVulNames"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeUuidsByVulNamesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details about the edition of purchased Security Center.
//
// @param request - DescribeVersionConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVersionConfigResponse
func (client *Client) DescribeVersionConfigWithContext(ctx context.Context, request *DescribeVersionConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeVersionConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeVersionConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeVersionConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the QR code address of a DingTalk group.
//
// @param request - DescribeVolDingdingMessageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVolDingdingMessageResponse
func (client *Client) DescribeVolDingdingMessageWithContext(ctx context.Context, request *DescribeVolDingdingMessageRequest, runtime *dara.RuntimeOptions) (_result *DescribeVolDingdingMessageResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeVolDingdingMessage"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeVolDingdingMessageResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the search conditions that can be used to query honeypots.
//
// @param request - DescribeVpcHoneyPotCriteriaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVpcHoneyPotCriteriaResponse
func (client *Client) DescribeVpcHoneyPotCriteriaWithContext(ctx context.Context, request *DescribeVpcHoneyPotCriteriaRequest, runtime *dara.RuntimeOptions) (_result *DescribeVpcHoneyPotCriteriaResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeVpcHoneyPotCriteria"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeVpcHoneyPotCriteriaResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries virtual private clouds (VPCs) on which honeypots are deployed.
//
// Description:
//
// If you specify only the Action request parameter in your request, Security Center returns the list of all VPCs regardless of whether a honeypot is deployed on a VPC.
//
// @param request - DescribeVpcHoneyPotListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVpcHoneyPotListResponse
func (client *Client) DescribeVpcHoneyPotListWithContext(ctx context.Context, request *DescribeVpcHoneyPotListRequest, runtime *dara.RuntimeOptions) (_result *DescribeVpcHoneyPotListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.HoneyPotExistence) {
		query["HoneyPotExistence"] = request.HoneyPotExistence
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.VpcId) {
		query["VpcId"] = request.VpcId
	}

	if !dara.IsNil(request.VpcName) {
		query["VpcName"] = request.VpcName
	}

	if !dara.IsNil(request.VpcRegionId) {
		query["VpcRegionId"] = request.VpcRegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeVpcHoneyPotList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeVpcHoneyPotListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the status information about vulnerability scan tasks on a server.
//
// @param request - DescribeVulCheckTaskStatusDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVulCheckTaskStatusDetailResponse
func (client *Client) DescribeVulCheckTaskStatusDetailWithContext(ctx context.Context, request *DescribeVulCheckTaskStatusDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribeVulCheckTaskStatusDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.TaskIds) {
		query["TaskIds"] = request.TaskIds
	}

	if !dara.IsNil(request.Types) {
		query["Types"] = request.Types
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeVulCheckTaskStatusDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeVulCheckTaskStatusDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configurations of vulnerability management.
//
// @param request - DescribeVulConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVulConfigResponse
func (client *Client) DescribeVulConfigWithContext(ctx context.Context, request *DescribeVulConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeVulConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeVulConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeVulConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the vulnerability defense statistics in Security Center.
//
// @param request - DescribeVulDefendCountStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVulDefendCountStatisticsResponse
func (client *Client) DescribeVulDefendCountStatisticsWithContext(ctx context.Context, request *DescribeVulDefendCountStatisticsRequest, runtime *dara.RuntimeOptions) (_result *DescribeVulDefendCountStatisticsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.VulType) {
		query["VulType"] = request.VulType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeVulDefendCountStatistics"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeVulDefendCountStatisticsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details about a vulnerability.
//
// @param request - DescribeVulDetailsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVulDetailsResponse
func (client *Client) DescribeVulDetailsWithContext(ctx context.Context, request *DescribeVulDetailsRequest, runtime *dara.RuntimeOptions) (_result *DescribeVulDetailsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AliasName) {
		query["AliasName"] = request.AliasName
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeVulDetails"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeVulDetailsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the progress of a task that exports vulnerabilities.
//
// Description:
//
// If the value of ExportStatus is success, the URL at which you can download the exported Excel file is returned.
//
// @param request - DescribeVulExportInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVulExportInfoResponse
func (client *Client) DescribeVulExportInfoWithContext(ctx context.Context, request *DescribeVulExportInfoRequest, runtime *dara.RuntimeOptions) (_result *DescribeVulExportInfoResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ExportId) {
		query["ExportId"] = request.ExportId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeVulExportInfo"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeVulExportInfoResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries vulnerabilities by type.
//
// @param request - DescribeVulListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVulListResponse
func (client *Client) DescribeVulListWithContext(ctx context.Context, request *DescribeVulListRequest, runtime *dara.RuntimeOptions) (_result *DescribeVulListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AliasName) {
		query["AliasName"] = request.AliasName
	}

	if !dara.IsNil(request.AttachTypes) {
		query["AttachTypes"] = request.AttachTypes
	}

	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Dealed) {
		query["Dealed"] = request.Dealed
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.Ids) {
		query["Ids"] = request.Ids
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.Necessity) {
		query["Necessity"] = request.Necessity
	}

	if !dara.IsNil(request.NextToken) {
		query["NextToken"] = request.NextToken
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RaspDefend) {
		query["RaspDefend"] = request.RaspDefend
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.StatusList) {
		query["StatusList"] = request.StatusList
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	if !dara.IsNil(request.UseNextToken) {
		query["UseNextToken"] = request.UseNextToken
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	if !dara.IsNil(request.VpcInstanceIds) {
		query["VpcInstanceIds"] = request.VpcInstanceIds
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeVulList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeVulListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the vulnerabilities that can be detected.
//
// @param request - DescribeVulListPageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVulListPageResponse
func (client *Client) DescribeVulListPageWithContext(ctx context.Context, request *DescribeVulListPageRequest, runtime *dara.RuntimeOptions) (_result *DescribeVulListPageResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.CveId) {
		query["CveId"] = request.CveId
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RaspDefend) {
		query["RaspDefend"] = request.RaspDefend
	}

	if !dara.IsNil(request.VulNameLike) {
		query["VulNameLike"] = request.VulNameLike
	}

	if !dara.IsNil(request.VulType) {
		query["VulType"] = request.VulType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeVulListPage"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeVulListPageResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics of vulnerabilities.
//
// @param request - DescribeVulNumStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVulNumStatisticsResponse
func (client *Client) DescribeVulNumStatisticsWithContext(ctx context.Context, request *DescribeVulNumStatisticsRequest, runtime *dara.RuntimeOptions) (_result *DescribeVulNumStatisticsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeVulNumStatistics"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeVulNumStatisticsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configurations of the vulnerability scan feature for a server.
//
// @param request - DescribeVulTargetConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVulTargetConfigResponse
func (client *Client) DescribeVulTargetConfigWithContext(ctx context.Context, request *DescribeVulTargetConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeVulTargetConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeVulTargetConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeVulTargetConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configurations of the vulnerability scan feature.
//
// @param request - DescribeVulTargetStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVulTargetStatisticsResponse
func (client *Client) DescribeVulTargetStatisticsWithContext(ctx context.Context, request *DescribeVulTargetStatisticsRequest, runtime *dara.RuntimeOptions) (_result *DescribeVulTargetStatisticsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeVulTargetStatistics"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeVulTargetStatisticsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the whitelist of vulnerabilities by page.
//
// @param request - DescribeVulWhitelistRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVulWhitelistResponse
func (client *Client) DescribeVulWhitelistWithContext(ctx context.Context, request *DescribeVulWhitelistRequest, runtime *dara.RuntimeOptions) (_result *DescribeVulWhitelistResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeVulWhitelist"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeVulWhitelistResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the progress of a export task for a baseline check result.
//
// @param request - DescribeWarningExportInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWarningExportInfoResponse
func (client *Client) DescribeWarningExportInfoWithContext(ctx context.Context, request *DescribeWarningExportInfoRequest, runtime *dara.RuntimeOptions) (_result *DescribeWarningExportInfoResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ExportId) {
		query["ExportId"] = request.ExportId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeWarningExportInfo"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeWarningExportInfoResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries information about servers on which a baseline check is performed. The information includes the IDs of the servers, the statistics of a risk item, and the status of the risk item.
//
// @param request - DescribeWarningMachinesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWarningMachinesResponse
func (client *Client) DescribeWarningMachinesWithContext(ctx context.Context, request *DescribeWarningMachinesRequest, runtime *dara.RuntimeOptions) (_result *DescribeWarningMachinesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.ContainerFieldName) {
		query["ContainerFieldName"] = request.ContainerFieldName
	}

	if !dara.IsNil(request.ContainerFieldValue) {
		query["ContainerFieldValue"] = request.ContainerFieldValue
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.HaveRisk) {
		query["HaveRisk"] = request.HaveRisk
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.MachineName) {
		query["MachineName"] = request.MachineName
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RiskId) {
		query["RiskId"] = request.RiskId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.StrategyId) {
		query["StrategyId"] = request.StrategyId
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeWarningMachines"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeWarningMachinesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about the servers that have web tamper proofing enabled.
//
// @param request - DescribeWebLockBindListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWebLockBindListResponse
func (client *Client) DescribeWebLockBindListWithContext(ctx context.Context, request *DescribeWebLockBindListRequest, runtime *dara.RuntimeOptions) (_result *DescribeWebLockBindListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeWebLockBindList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeWebLockBindListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configurations of web tamper proofing for a specified server.
//
// @param request - DescribeWebLockConfigListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWebLockConfigListResponse
func (client *Client) DescribeWebLockConfigListWithContext(ctx context.Context, request *DescribeWebLockConfigListRequest, runtime *dara.RuntimeOptions) (_result *DescribeWebLockConfigListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeWebLockConfigList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeWebLockConfigListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics on changes to the files that are protected by web tamper proofing.
//
// @param request - DescribeWebLockFileChangeStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWebLockFileChangeStatisticsResponse
func (client *Client) DescribeWebLockFileChangeStatisticsWithContext(ctx context.Context, request *DescribeWebLockFileChangeStatisticsRequest, runtime *dara.RuntimeOptions) (_result *DescribeWebLockFileChangeStatisticsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeWebLockFileChangeStatistics"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeWebLockFileChangeStatisticsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries events on web tamper proofing.
//
// @param request - DescribeWebLockFileEventsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWebLockFileEventsResponse
func (client *Client) DescribeWebLockFileEventsWithContext(ctx context.Context, request *DescribeWebLockFileEventsRequest, runtime *dara.RuntimeOptions) (_result *DescribeWebLockFileEventsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Dealed) {
		query["Dealed"] = request.Dealed
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.ProcessName) {
		query["ProcessName"] = request.ProcessName
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.TsBegin) {
		query["TsBegin"] = request.TsBegin
	}

	if !dara.IsNil(request.TsEnd) {
		query["TsEnd"] = request.TsEnd
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeWebLockFileEvents"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeWebLockFileEventsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics on processes for web tamper proofing.
//
// @param request - DescribeWebLockProcessBlockStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWebLockProcessBlockStatisticsResponse
func (client *Client) DescribeWebLockProcessBlockStatisticsWithContext(ctx context.Context, request *DescribeWebLockProcessBlockStatisticsRequest, runtime *dara.RuntimeOptions) (_result *DescribeWebLockProcessBlockStatisticsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeWebLockProcessBlockStatistics"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeWebLockProcessBlockStatisticsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the processes for web tamper proofing.
//
// @param request - DescribeWebLockProcessListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWebLockProcessListResponse
func (client *Client) DescribeWebLockProcessListWithContext(ctx context.Context, request *DescribeWebLockProcessListRequest, runtime *dara.RuntimeOptions) (_result *DescribeWebLockProcessListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.ProcessName) {
		query["ProcessName"] = request.ProcessName
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeWebLockProcessList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeWebLockProcessListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the status of web tamper proofing.
//
// @param request - DescribeWebLockStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWebLockStatusResponse
func (client *Client) DescribeWebLockStatusWithContext(ctx context.Context, request *DescribeWebLockStatusRequest, runtime *dara.RuntimeOptions) (_result *DescribeWebLockStatusResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeWebLockStatus"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeWebLockStatusResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the custom web directories that are scanned based on the alerting feature.
//
// @param request - DescribeWebPathRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWebPathResponse
func (client *Client) DescribeWebPathWithContext(ctx context.Context, request *DescribeWebPathRequest, runtime *dara.RuntimeOptions) (_result *DescribeWebPathResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeWebPath"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeWebPathResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about servers that can be added or are added to application whitelist policies.
//
// Description:
//
// The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
//
// @param request - DescribeWhiteListAssetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWhiteListAssetResponse
func (client *Client) DescribeWhiteListAssetWithContext(ctx context.Context, request *DescribeWhiteListAssetRequest, runtime *dara.RuntimeOptions) (_result *DescribeWhiteListAssetResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.LastMaxId) {
		query["LastMaxId"] = request.LastMaxId
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.StrategyId) {
		query["StrategyId"] = request.StrategyId
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeWhiteListAsset"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeWhiteListAssetResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the available quota for the application whitelist feature.
//
// Description:
//
// The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
//
// @param request - DescribeWhiteListAuthorizeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWhiteListAuthorizeResponse
func (client *Client) DescribeWhiteListAuthorizeWithContext(ctx context.Context, request *DescribeWhiteListAuthorizeRequest, runtime *dara.RuntimeOptions) (_result *DescribeWhiteListAuthorizeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeWhiteListAuthorize"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeWhiteListAuthorizeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the servers on which an application whitelist policy takes effect.
//
// Description:
//
// The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in-use, you can call this operation.
//
// @param request - DescribeWhiteListEffectiveAssetsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWhiteListEffectiveAssetsResponse
func (client *Client) DescribeWhiteListEffectiveAssetsWithContext(ctx context.Context, request *DescribeWhiteListEffectiveAssetsRequest, runtime *dara.RuntimeOptions) (_result *DescribeWhiteListEffectiveAssetsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.NeedStatistics) {
		query["NeedStatistics"] = request.NeedStatistics
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.StrategyId) {
		query["StrategyId"] = request.StrategyId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeWhiteListEffectiveAssets"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeWhiteListEffectiveAssetsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about the processes that are detected in an application whitelist policy.
//
// Description:
//
// The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
//
// @param request - DescribeWhiteListProcessRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWhiteListProcessResponse
func (client *Client) DescribeWhiteListProcessWithContext(ctx context.Context, request *DescribeWhiteListProcessRequest, runtime *dara.RuntimeOptions) (_result *DescribeWhiteListProcessResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Desc) {
		query["Desc"] = request.Desc
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.OrderBy) {
		query["OrderBy"] = request.OrderBy
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.ProcessName) {
		query["ProcessName"] = request.ProcessName
	}

	if !dara.IsNil(request.ProcessType) {
		query["ProcessType"] = request.ProcessType
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.StrategyId) {
		query["StrategyId"] = request.StrategyId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeWhiteListProcess"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeWhiteListProcessResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of application whitelist policies.
//
// Description:
//
// The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
//
// @param request - DescribeWhiteListStrategyListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWhiteListStrategyListResponse
func (client *Client) DescribeWhiteListStrategyListWithContext(ctx context.Context, request *DescribeWhiteListStrategyListRequest, runtime *dara.RuntimeOptions) (_result *DescribeWhiteListStrategyListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.StrategyIds) {
		query["StrategyIds"] = request.StrategyIds
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeWhiteListStrategyList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeWhiteListStrategyListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics of application whitelist policies.
//
// Description:
//
// The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
//
// @param request - DescribeWhiteListStrategyStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWhiteListStrategyStatisticsResponse
func (client *Client) DescribeWhiteListStrategyStatisticsWithContext(ctx context.Context, request *DescribeWhiteListStrategyStatisticsRequest, runtime *dara.RuntimeOptions) (_result *DescribeWhiteListStrategyStatisticsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.StrategyIds) {
		query["StrategyIds"] = request.StrategyIds
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeWhiteListStrategyStatistics"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeWhiteListStrategyStatisticsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of the servers on which an application whitelist policy takes effect.
//
// Description:
//
// The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in-use, you can call this operation.
//
// @param request - DescribeWhiteListStrategyUuidCountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWhiteListStrategyUuidCountResponse
func (client *Client) DescribeWhiteListStrategyUuidCountWithContext(ctx context.Context, request *DescribeWhiteListStrategyUuidCountRequest, runtime *dara.RuntimeOptions) (_result *DescribeWhiteListStrategyUuidCountResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.StrategyId) {
		query["StrategyId"] = request.StrategyId
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeWhiteListStrategyUuidCount"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeWhiteListStrategyUuidCountResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Tests whether DingTalk notification configurations are valid.
//
// @param request - DingTalkOnlineTestRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DingTalkOnlineTestResponse
func (client *Client) DingTalkOnlineTestWithContext(ctx context.Context, request *DingTalkOnlineTestRequest, runtime *dara.RuntimeOptions) (_result *DingTalkOnlineTestResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DingTalkOnlineTest"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DingTalkOnlineTestResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Disables an IP address blocking policy that is in effect.
//
// @param request - DisableBruteForceRecordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DisableBruteForceRecordResponse
func (client *Client) DisableBruteForceRecordWithContext(ctx context.Context, request *DisableBruteForceRecordRequest, runtime *dara.RuntimeOptions) (_result *DisableBruteForceRecordResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BlockIp) {
		query["BlockIp"] = request.BlockIp
	}

	if !dara.IsNil(request.Bound) {
		query["Bound"] = request.Bound
	}

	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.Port) {
		query["Port"] = request.Port
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DisableBruteForceRecord"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DisableBruteForceRecordResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Disables a custom IP address blocking policy for servers.
//
// @param request - DisableCustomBlockRecordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DisableCustomBlockRecordResponse
func (client *Client) DisableCustomBlockRecordWithContext(ctx context.Context, request *DisableCustomBlockRecordRequest, runtime *dara.RuntimeOptions) (_result *DisableCustomBlockRecordResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BlockIp) {
		query["BlockIp"] = request.BlockIp
	}

	if !dara.IsNil(request.Bound) {
		query["Bound"] = request.Bound
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DisableCustomBlockRecord"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DisableCustomBlockRecordResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables an IP address blocking policy for a specified server.
//
// @param request - EnableBruteForceRecordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EnableBruteForceRecordResponse
func (client *Client) EnableBruteForceRecordWithContext(ctx context.Context, request *EnableBruteForceRecordRequest, runtime *dara.RuntimeOptions) (_result *EnableBruteForceRecordResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BlockIp) {
		query["BlockIp"] = request.BlockIp
	}

	if !dara.IsNil(request.Bound) {
		query["Bound"] = request.Bound
	}

	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.Port) {
		query["Port"] = request.Port
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("EnableBruteForceRecord"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &EnableBruteForceRecordResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables a custom IP address blocking policy.
//
// @param request - EnableCustomBlockRecordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EnableCustomBlockRecordResponse
func (client *Client) EnableCustomBlockRecordWithContext(ctx context.Context, request *EnableCustomBlockRecordRequest, runtime *dara.RuntimeOptions) (_result *EnableCustomBlockRecordResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BlockIp) {
		query["BlockIp"] = request.BlockIp
	}

	if !dara.IsNil(request.Bound) {
		query["Bound"] = request.Bound
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("EnableCustomBlockRecord"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &EnableCustomBlockRecordResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables a custom rule for an instance.
//
// @param request - EnableCustomInstanceBlockRecordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EnableCustomInstanceBlockRecordResponse
func (client *Client) EnableCustomInstanceBlockRecordWithContext(ctx context.Context, request *EnableCustomInstanceBlockRecordRequest, runtime *dara.RuntimeOptions) (_result *EnableCustomInstanceBlockRecordResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BlockIp) {
		query["BlockIp"] = request.BlockIp
	}

	if !dara.IsNil(request.Bound) {
		query["Bound"] = request.Bound
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("EnableCustomInstanceBlockRecord"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &EnableCustomInstanceBlockRecordResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Performs a baseline check on servers to which a specified baseline check policy is applied.
//
// @param request - ExecStrategyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExecStrategyResponse
func (client *Client) ExecStrategyWithContext(ctx context.Context, request *ExecStrategyRequest, runtime *dara.RuntimeOptions) (_result *ExecStrategyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ExecAction) {
		query["ExecAction"] = request.ExecAction
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.StrategyId) {
		query["StrategyId"] = request.StrategyId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ExecStrategy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ExecStrategyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Exports a security report.
//
// @param request - ExportCustomizeReportRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportCustomizeReportResponse
func (client *Client) ExportCustomizeReportWithContext(ctx context.Context, request *ExportCustomizeReportRequest, runtime *dara.RuntimeOptions) (_result *ExportCustomizeReportResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ExportType) {
		query["ExportType"] = request.ExportType
	}

	if !dara.IsNil(request.ReportId) {
		query["ReportId"] = request.ReportId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ExportCustomizeReport"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ExportCustomizeReportResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Exports the check results on the Host, Cloud Platform Configuration Assessment, Image Security, Attack Awareness, and AK leak detection pages to Excel files.
//
// Description:
//
// You can call the operation to export the following check result lists:
//
//   - The list of servers on the Host page.
//
//   - The lists of image system vulnerabilities, image application vulnerabilities, image baseline check results, and malicious image samples on the Image Security page.
//
//   - The list of attack analysis data on the Attack Awareness page.
//
//   - The list of check results for AccessKey pair leaks on the AK leak detection page.
//
// @param request - ExportRecordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportRecordResponse
func (client *Client) ExportRecordWithContext(ctx context.Context, request *ExportRecordRequest, runtime *dara.RuntimeOptions) (_result *ExportRecordResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ExportFileType) {
		query["ExportFileType"] = request.ExportFileType
	}

	if !dara.IsNil(request.ExportType) {
		query["ExportType"] = request.ExportType
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Params) {
		query["Params"] = request.Params
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ExportRecord"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ExportRecordResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Exports the information about exceptions to a file.
//
// @param request - ExportSuspEventsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportSuspEventsResponse
func (client *Client) ExportSuspEventsWithContext(ctx context.Context, request *ExportSuspEventsRequest, runtime *dara.RuntimeOptions) (_result *ExportSuspEventsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AssetsTypeList) {
		query["AssetsTypeList"] = request.AssetsTypeList
	}

	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.ContainerFieldName) {
		query["ContainerFieldName"] = request.ContainerFieldName
	}

	if !dara.IsNil(request.ContainerFieldValue) {
		query["ContainerFieldValue"] = request.ContainerFieldValue
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Dealed) {
		query["Dealed"] = request.Dealed
	}

	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Levels) {
		query["Levels"] = request.Levels
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.OperateErrorCodeList) {
		query["OperateErrorCodeList"] = request.OperateErrorCodeList
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.ParentEventTypes) {
		query["ParentEventTypes"] = request.ParentEventTypes
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	if !dara.IsNil(request.TimeEnd) {
		query["TimeEnd"] = request.TimeEnd
	}

	if !dara.IsNil(request.TimeStart) {
		query["TimeStart"] = request.TimeStart
	}

	if !dara.IsNil(request.UniqueInfo) {
		query["UniqueInfo"] = request.UniqueInfo
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ExportSuspEvents"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ExportSuspEventsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Exports vulnerabilities.
//
// Description:
//
// You can call the ExportVul operation to export the following types of vulnerabilities: Linux software vulnerabilities, Windows system vulnerabilities, Web-CMS vulnerabilities, application vulnerabilities, and urgent vulnerabilities.
//
// You can use this operation together with the DescribeVulExportInfo operation. After you call the ExportVul operation to create a vulnerability export task, you can call the DescribeVulExportInfo operation to query the progress of the task by specifying the ID of the task.
//
// ### Limits
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ExportVulRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportVulResponse
func (client *Client) ExportVulWithContext(ctx context.Context, request *ExportVulRequest, runtime *dara.RuntimeOptions) (_result *ExportVulResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AliasName) {
		query["AliasName"] = request.AliasName
	}

	if !dara.IsNil(request.AttachTypes) {
		query["AttachTypes"] = request.AttachTypes
	}

	if !dara.IsNil(request.ContainerName) {
		query["ContainerName"] = request.ContainerName
	}

	if !dara.IsNil(request.CreateTsEnd) {
		query["CreateTsEnd"] = request.CreateTsEnd
	}

	if !dara.IsNil(request.CreateTsStart) {
		query["CreateTsStart"] = request.CreateTsStart
	}

	if !dara.IsNil(request.CveId) {
		query["CveId"] = request.CveId
	}

	if !dara.IsNil(request.Dealed) {
		query["Dealed"] = request.Dealed
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.ImageName) {
		query["ImageName"] = request.ImageName
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Necessity) {
		query["Necessity"] = request.Necessity
	}

	if !dara.IsNil(request.Path) {
		query["Path"] = request.Path
	}

	if !dara.IsNil(request.RaspDefend) {
		query["RaspDefend"] = request.RaspDefend
	}

	if !dara.IsNil(request.SearchTags) {
		query["SearchTags"] = request.SearchTags
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	if !dara.IsNil(request.VpcInstanceIds) {
		query["VpcInstanceIds"] = request.VpcInstanceIds
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ExportVul"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ExportVulResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI ExportWarning is deprecated, please use Sas::2018-12-03::ExportRecord instead.
//
// Summary:
//
// Exports baseline check results.
//
// @param request - ExportWarningRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportWarningResponse
func (client *Client) ExportWarningWithContext(ctx context.Context, request *ExportWarningRequest, runtime *dara.RuntimeOptions) (_result *ExportWarningResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Dealed) {
		query["Dealed"] = request.Dealed
	}

	if !dara.IsNil(request.ExportType) {
		query["ExportType"] = request.ExportType
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.IsCleartextPwd) {
		query["IsCleartextPwd"] = request.IsCleartextPwd
	}

	if !dara.IsNil(request.IsSummaryExport) {
		query["IsSummaryExport"] = request.IsSummaryExport
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.RiskIds) {
		query["RiskIds"] = request.RiskIds
	}

	if !dara.IsNil(request.RiskLevels) {
		query["RiskLevels"] = request.RiskLevels
	}

	if !dara.IsNil(request.RiskName) {
		query["RiskName"] = request.RiskName
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.StatusList) {
		query["StatusList"] = request.StatusList
	}

	if !dara.IsNil(request.StrategyId) {
		query["StrategyId"] = request.StrategyId
	}

	if !dara.IsNil(request.SubTypeNames) {
		query["SubTypeNames"] = request.SubTypeNames
	}

	if !dara.IsNil(request.TypeName) {
		query["TypeName"] = request.TypeName
	}

	if !dara.IsNil(request.TypeNames) {
		query["TypeNames"] = request.TypeNames
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ExportWarning"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ExportWarningResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 容器网络连接
//
// @param tmpReq - FindContainerNetworkConnectRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return FindContainerNetworkConnectResponse
func (client *Client) FindContainerNetworkConnectWithContext(ctx context.Context, tmpReq *FindContainerNetworkConnectRequest, runtime *dara.RuntimeOptions) (_result *FindContainerNetworkConnectResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &FindContainerNetworkConnectShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.DstNode) {
		request.DstNodeShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DstNode, dara.String("DstNode"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.SrcNode) {
		request.SrcNodeShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SrcNode, dara.String("SrcNode"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.CriteriaType) {
		query["CriteriaType"] = request.CriteriaType
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.DstNodeShrink) {
		query["DstNode"] = request.DstNodeShrink
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.SrcNodeShrink) {
		query["SrcNode"] = request.SrcNodeShrink
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("FindContainerNetworkConnect"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &FindContainerNetworkConnectResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Completes guidance tasks for beginners to earn rewards.
//
// @param request - FinishGuidTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return FinishGuidTaskResponse
func (client *Client) FinishGuidTaskWithContext(ctx context.Context, request *FinishGuidTaskRequest, runtime *dara.RuntimeOptions) (_result *FinishGuidTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.TaskTypeName) {
		query["TaskTypeName"] = request.TaskTypeName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("FinishGuidTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &FinishGuidTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Fixes a baseline risk item.
//
// @param request - FixCheckWarningsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return FixCheckWarningsResponse
func (client *Client) FixCheckWarningsWithContext(ctx context.Context, request *FixCheckWarningsRequest, runtime *dara.RuntimeOptions) (_result *FixCheckWarningsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckParams) {
		query["CheckParams"] = request.CheckParams
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.RetentionDays) {
		query["RetentionDays"] = request.RetentionDays
	}

	if !dara.IsNil(request.RiskId) {
		query["RiskId"] = request.RiskId
	}

	if !dara.IsNil(request.SnapshotName) {
		query["SnapshotName"] = request.SnapshotName
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("FixCheckWarnings"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &FixCheckWarningsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Generates a custom dictionary of weak passwords for the baseline check feature.
//
// @param request - GenerateDynamicDictRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GenerateDynamicDictResponse
func (client *Client) GenerateDynamicDictWithContext(ctx context.Context, request *GenerateDynamicDictRequest, runtime *dara.RuntimeOptions) (_result *GenerateDynamicDictResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ArgKeywords) {
		query["ArgKeywords"] = request.ArgKeywords
	}

	if !dara.IsNil(request.Domains) {
		query["Domains"] = request.Domains
	}

	if !dara.IsNil(request.Names) {
		query["Names"] = request.Names
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GenerateDynamicDict"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GenerateDynamicDictResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Generates a command that is used to add a self-managed Kubernetes cluster.
//
// @param request - GenerateK8sAccessInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GenerateK8sAccessInfoResponse
func (client *Client) GenerateK8sAccessInfoWithContext(ctx context.Context, request *GenerateK8sAccessInfoRequest, runtime *dara.RuntimeOptions) (_result *GenerateK8sAccessInfoResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AliyunYundunGatewayApiName) {
		query["AliyunYundunGatewayApiName"] = request.AliyunYundunGatewayApiName
	}

	if !dara.IsNil(request.AliyunYundunGatewayPopName) {
		query["AliyunYundunGatewayPopName"] = request.AliyunYundunGatewayPopName
	}

	if !dara.IsNil(request.AliyunYundunGatewayProjectName) {
		query["AliyunYundunGatewayProjectName"] = request.AliyunYundunGatewayProjectName
	}

	if !dara.IsNil(request.AuditLogStore) {
		query["AuditLogStore"] = request.AuditLogStore
	}

	if !dara.IsNil(request.AuditProject) {
		query["AuditProject"] = request.AuditProject
	}

	if !dara.IsNil(request.AuditRegionId) {
		query["AuditRegionId"] = request.AuditRegionId
	}

	if !dara.IsNil(request.ClusterName) {
		query["ClusterName"] = request.ClusterName
	}

	if !dara.IsNil(request.CpuArch) {
		query["CpuArch"] = request.CpuArch
	}

	if !dara.IsNil(request.ExpireDate) {
		query["ExpireDate"] = request.ExpireDate
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.Vendor) {
		query["Vendor"] = request.Vendor
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GenerateK8sAccessInfo"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GenerateK8sAccessInfoResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a one-time scan task.
//
// @param request - GenerateOnceTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GenerateOnceTaskResponse
func (client *Client) GenerateOnceTaskWithContext(ctx context.Context, request *GenerateOnceTaskRequest, runtime *dara.RuntimeOptions) (_result *GenerateOnceTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Param) {
		query["Param"] = request.Param
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	if !dara.IsNil(request.TaskName) {
		query["TaskName"] = request.TaskName
	}

	if !dara.IsNil(request.TaskType) {
		query["TaskType"] = request.TaskType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GenerateOnceTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GenerateOnceTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains account tags.
//
// @param request - GetAccountLabelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAccountLabelResponse
func (client *Client) GetAccountLabelWithContext(ctx context.Context, request *GetAccountLabelRequest, runtime *dara.RuntimeOptions) (_result *GetAccountLabelResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.LabelList) {
		query["LabelList"] = request.LabelList
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetAccountLabel"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetAccountLabelResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a defense rule against container escapes.
//
// Description:
//
// Only the Ultimate edition of Security Center supports this operation.
//
// @param request - GetAegisContainerPluginRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAegisContainerPluginRuleResponse
func (client *Client) GetAegisContainerPluginRuleWithContext(ctx context.Context, request *GetAegisContainerPluginRuleRequest, runtime *dara.RuntimeOptions) (_result *GetAegisContainerPluginRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.RuleType) {
		query["RuleType"] = request.RuleType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetAegisContainerPluginRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetAegisContainerPluginRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries search conditions that can be used to search for container file protection rules.
//
// @param request - GetAegisContainerPluginRuleCriteriaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAegisContainerPluginRuleCriteriaResponse
func (client *Client) GetAegisContainerPluginRuleCriteriaWithContext(ctx context.Context, request *GetAegisContainerPluginRuleCriteriaRequest, runtime *dara.RuntimeOptions) (_result *GetAegisContainerPluginRuleCriteriaResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Value) {
		query["Value"] = request.Value
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetAegisContainerPluginRuleCriteria"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetAegisContainerPluginRuleCriteriaResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of agentless detection tasks.
//
// @param request - GetAgentlessTaskCountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAgentlessTaskCountResponse
func (client *Client) GetAgentlessTaskCountWithContext(ctx context.Context, request *GetAgentlessTaskCountRequest, runtime *dara.RuntimeOptions) (_result *GetAgentlessTaskCountResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Target) {
		query["Target"] = request.Target
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetAgentlessTaskCount"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetAgentlessTaskCountResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of servers on which alerts are generated.
//
// @param request - GetAlarmMachineCountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAlarmMachineCountResponse
func (client *Client) GetAlarmMachineCountWithContext(ctx context.Context, request *GetAlarmMachineCountRequest, runtime *dara.RuntimeOptions) (_result *GetAlarmMachineCountResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetAlarmMachineCount"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetAlarmMachineCountResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the network topology between containerized applications.
//
// @param request - GetAppNetworkRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAppNetworkResponse
func (client *Client) GetAppNetworkWithContext(ctx context.Context, request *GetAppNetworkRequest, runtime *dara.RuntimeOptions) (_result *GetAppNetworkResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetAppNetwork"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetAppNetworkResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a server and the extended information about the server by using the UUID of the server.
//
// @param request - GetAssetDetailByUuidRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAssetDetailByUuidResponse
func (client *Client) GetAssetDetailByUuidWithContext(ctx context.Context, request *GetAssetDetailByUuidRequest, runtime *dara.RuntimeOptions) (_result *GetAssetDetailByUuidResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetAssetDetailByUuid"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetAssetDetailByUuidResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries asset selection configurations.
//
// @param request - GetAssetSelectionConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAssetSelectionConfigResponse
func (client *Client) GetAssetSelectionConfigWithContext(ctx context.Context, request *GetAssetSelectionConfigRequest, runtime *dara.RuntimeOptions) (_result *GetAssetSelectionConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BusinessType) {
		query["BusinessType"] = request.BusinessType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetAssetSelectionConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetAssetSelectionConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details about the asset fingerprints of the startup item, kernel module, or website type.
//
// @param request - GetAssetsPropertyDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAssetsPropertyDetailResponse
func (client *Client) GetAssetsPropertyDetailWithContext(ctx context.Context, request *GetAssetsPropertyDetailRequest, runtime *dara.RuntimeOptions) (_result *GetAssetsPropertyDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Biz) {
		query["Biz"] = request.Biz
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.ItemName) {
		query["ItemName"] = request.ItemName
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.SearchCriteriaList) {
		query["SearchCriteriaList"] = request.SearchCriteriaList
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetAssetsPropertyDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetAssetsPropertyDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the aggregation information about the asset fingerprints of the startup item, kernel module, or website type.
//
// @param request - GetAssetsPropertyItemRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAssetsPropertyItemResponse
func (client *Client) GetAssetsPropertyItemWithContext(ctx context.Context, request *GetAssetsPropertyItemRequest, runtime *dara.RuntimeOptions) (_result *GetAssetsPropertyItemResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Biz) {
		query["Biz"] = request.Biz
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.ForceFlush) {
		query["ForceFlush"] = request.ForceFlush
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.SearchInfo) {
		query["SearchInfo"] = request.SearchInfo
	}

	if !dara.IsNil(request.SearchItem) {
		query["SearchItem"] = request.SearchItem
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetAssetsPropertyItem"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetAssetsPropertyItemResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Query Attack Path Event Details.
//
// @param request - GetAttackPathEventDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAttackPathEventDetailResponse
func (client *Client) GetAttackPathEventDetailWithContext(ctx context.Context, request *GetAttackPathEventDetailRequest, runtime *dara.RuntimeOptions) (_result *GetAttackPathEventDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.EventId) {
		query["EventId"] = request.EventId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetAttackPathEventDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetAttackPathEventDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Query Attack Path Sensitive Assets.
//
// @param request - GetAttackPathSensitiveAssetConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAttackPathSensitiveAssetConfigResponse
func (client *Client) GetAttackPathSensitiveAssetConfigWithContext(ctx context.Context, request *GetAttackPathSensitiveAssetConfigRequest, runtime *dara.RuntimeOptions) (_result *GetAttackPathSensitiveAssetConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AttackPathSensitiveAssetConfigId) {
		query["AttackPathSensitiveAssetConfigId"] = request.AttackPathSensitiveAssetConfigId
	}

	if !dara.IsNil(request.ConfigType) {
		query["ConfigType"] = request.ConfigType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetAttackPathSensitiveAssetConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetAttackPathSensitiveAssetConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Query Attack Path Whitelist Details.
//
// @param request - GetAttackPathWhitelistRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAttackPathWhitelistResponse
func (client *Client) GetAttackPathWhitelistWithContext(ctx context.Context, request *GetAttackPathWhitelistRequest, runtime *dara.RuntimeOptions) (_result *GetAttackPathWhitelistResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AttackPathWhitelistId) {
		query["AttackPathWhitelistId"] = request.AttackPathWhitelistId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetAttackPathWhitelist"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetAttackPathWhitelistResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries configurations for scanning image build command risks.
//
// @param request - GetBuildRiskDefineRuleConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetBuildRiskDefineRuleConfigResponse
func (client *Client) GetBuildRiskDefineRuleConfigWithContext(ctx context.Context, request *GetBuildRiskDefineRuleConfigRequest, runtime *dara.RuntimeOptions) (_result *GetBuildRiskDefineRuleConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetBuildRiskDefineRuleConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetBuildRiskDefineRuleConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Checks whether the current user is qualified for the trial use of Security Center.
//
// @param request - GetCanTrySasRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCanTrySasResponse
func (client *Client) GetCanTrySasWithContext(ctx context.Context, request *GetCanTrySasRequest, runtime *dara.RuntimeOptions) (_result *GetCanTrySasResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	body := map[string]interface{}{}
	if !dara.IsNil(request.FromEcs) {
		body["FromEcs"] = request.FromEcs
	}

	if !dara.IsNil(request.Lang) {
		body["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetCanTrySas"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetCanTrySasResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries statistics on the number of risk items in cloud security posture management (CSPM) for cloud services.
//
// @param request - GetCheckCountStatisticRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCheckCountStatisticResponse
func (client *Client) GetCheckCountStatisticWithContext(ctx context.Context, request *GetCheckCountStatisticRequest, runtime *dara.RuntimeOptions) (_result *GetCheckCountStatisticResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.StatisticType) {
		query["StatisticType"] = request.StatisticType
	}

	if !dara.IsNil(request.TaskSources) {
		query["TaskSources"] = request.TaskSources
	}

	if !dara.IsNil(request.Vendors) {
		query["Vendors"] = request.Vendors
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetCheckCountStatistic"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetCheckCountStatisticResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details about a check item that is used for configuration assessment.
//
// @param request - GetCheckDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCheckDetailResponse
func (client *Client) GetCheckDetailWithContext(ctx context.Context, request *GetCheckDetailRequest, runtime *dara.RuntimeOptions) (_result *GetCheckDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckId) {
		query["CheckId"] = request.CheckId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetCheckDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetCheckDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the progress of a configuration check task on cloud services.
//
// @param request - GetCheckProcessRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCheckProcessResponse
func (client *Client) GetCheckProcessWithContext(ctx context.Context, request *GetCheckProcessRequest, runtime *dara.RuntimeOptions) (_result *GetCheckProcessResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetCheckProcess"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetCheckProcessResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics on risk scenarios and check items that are used in the risk scenarios, including the statistics on low-risk, medium-risk, and high-risk items by baseline type.
//
// @param request - GetCheckRiskStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCheckRiskStatisticsResponse
func (client *Client) GetCheckRiskStatisticsWithContext(ctx context.Context, request *GetCheckRiskStatisticsRequest, runtime *dara.RuntimeOptions) (_result *GetCheckRiskStatisticsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetCheckRiskStatistics"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetCheckRiskStatisticsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the sales information about the configuration assessment feature, including the purchased quota and the consumed quota.
//
// @param request - GetCheckSaleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCheckSaleResponse
func (client *Client) GetCheckSaleWithContext(ctx context.Context, request *GetCheckSaleRequest, runtime *dara.RuntimeOptions) (_result *GetCheckSaleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetCheckSale"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetCheckSaleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains the structure information about check items provided by the configuration assessment feature.
//
// Description:
//
// You must purchase the configuration assessment feature before you can use the feature.
//
// @param request - GetCheckStructureRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCheckStructureResponse
func (client *Client) GetCheckStructureWithContext(ctx context.Context, request *GetCheckStructureRequest, runtime *dara.RuntimeOptions) (_result *GetCheckStructureResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.TaskSources) {
		query["TaskSources"] = request.TaskSources
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetCheckStructure"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetCheckStructureResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the summary information about the configuration checks on cloud services.
//
// @param request - GetCheckSummaryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCheckSummaryResponse
func (client *Client) GetCheckSummaryWithContext(ctx context.Context, request *GetCheckSummaryRequest, runtime *dara.RuntimeOptions) (_result *GetCheckSummaryResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.IsItemStatistic) {
		query["IsItemStatistic"] = request.IsItemStatistic
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.TaskSources) {
		query["TaskSources"] = request.TaskSources
	}

	if !dara.IsNil(request.Vendors) {
		query["Vendors"] = request.Vendors
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetCheckSummary"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetCheckSummaryResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Get time trend statistics data
//
// @param request - GetCheckTimeDimensionStatisticRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCheckTimeDimensionStatisticResponse
func (client *Client) GetCheckTimeDimensionStatisticWithContext(ctx context.Context, request *GetCheckTimeDimensionStatisticRequest, runtime *dara.RuntimeOptions) (_result *GetCheckTimeDimensionStatisticResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.EndTimeStamp) {
		query["EndTimeStamp"] = request.EndTimeStamp
	}

	if !dara.IsNil(request.StartTimeStamp) {
		query["StartTimeStamp"] = request.StartTimeStamp
	}

	if !dara.IsNil(request.StatisticType) {
		query["StatisticType"] = request.StatisticType
	}

	if !dara.IsNil(request.Vendors) {
		query["Vendors"] = request.Vendors
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetCheckTimeDimensionStatistic"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetCheckTimeDimensionStatisticResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the installation rate and online rate of the agent.
//
// @param request - GetClientRatioStatisticRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetClientRatioStatisticResponse
func (client *Client) GetClientRatioStatisticWithContext(ctx context.Context, request *GetClientRatioStatisticRequest, runtime *dara.RuntimeOptions) (_result *GetClientRatioStatisticResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.StatisticTypes) {
		query["StatisticTypes"] = request.StatisticTypes
	}

	if !dara.IsNil(request.TimeEnd) {
		query["TimeEnd"] = request.TimeEnd
	}

	if !dara.IsNil(request.TimeStart) {
		query["TimeStart"] = request.TimeStart
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetClientRatioStatistic"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetClientRatioStatisticResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a custom defense rule.
//
// @param request - GetClientUserDefineRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetClientUserDefineRuleResponse
func (client *Client) GetClientUserDefineRuleWithContext(ctx context.Context, request *GetClientUserDefineRuleRequest, runtime *dara.RuntimeOptions) (_result *GetClientUserDefineRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetClientUserDefineRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetClientUserDefineRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the filter conditions that are used to search for cloud assets.
//
// @param request - GetCloudAssetCriteriaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCloudAssetCriteriaResponse
func (client *Client) GetCloudAssetCriteriaWithContext(ctx context.Context, request *GetCloudAssetCriteriaRequest, runtime *dara.RuntimeOptions) (_result *GetCloudAssetCriteriaResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CloudAssetTypes) {
		query["CloudAssetTypes"] = request.CloudAssetTypes
	}

	if !dara.IsNil(request.Value) {
		query["Value"] = request.Value
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetCloudAssetCriteria"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetCloudAssetCriteriaResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains the details of cloud assets.
//
// @param request - GetCloudAssetDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCloudAssetDetailResponse
func (client *Client) GetCloudAssetDetailWithContext(ctx context.Context, request *GetCloudAssetDetailRequest, runtime *dara.RuntimeOptions) (_result *GetCloudAssetDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AssetSubType) {
		query["AssetSubType"] = request.AssetSubType
	}

	if !dara.IsNil(request.AssetType) {
		query["AssetType"] = request.AssetType
	}

	if !dara.IsNil(request.CloudAssetInstances) {
		query["CloudAssetInstances"] = request.CloudAssetInstances
	}

	if !dara.IsNil(request.Vendor) {
		query["Vendor"] = request.Vendor
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetCloudAssetDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetCloudAssetDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// The total number of instances that are at risk.
//
// @param request - GetCloudAssetSummaryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCloudAssetSummaryResponse
func (client *Client) GetCloudAssetSummaryWithContext(ctx context.Context, request *GetCloudAssetSummaryRequest, runtime *dara.RuntimeOptions) (_result *GetCloudAssetSummaryResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CloudAssetTypes) {
		query["CloudAssetTypes"] = request.CloudAssetTypes
	}

	if !dara.IsNil(request.Vendors) {
		query["Vendors"] = request.Vendors
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetCloudAssetSummary"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetCloudAssetSummaryResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics on baseline risk items of container clusters.
//
// @param request - GetClusterCheckItemWarningStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetClusterCheckItemWarningStatisticsResponse
func (client *Client) GetClusterCheckItemWarningStatisticsWithContext(ctx context.Context, request *GetClusterCheckItemWarningStatisticsRequest, runtime *dara.RuntimeOptions) (_result *GetClusterCheckItemWarningStatisticsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetClusterCheckItemWarningStatistics"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetClusterCheckItemWarningStatisticsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the overall information about cluster defense rules that are configured for the container firewall feature.
//
// @param request - GetClusterRuleSummaryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetClusterRuleSummaryResponse
func (client *Client) GetClusterRuleSummaryWithContext(ctx context.Context, request *GetClusterRuleSummaryRequest, runtime *dara.RuntimeOptions) (_result *GetClusterRuleSummaryResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetClusterRuleSummary"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetClusterRuleSummaryResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics on alert events that are generated for containers.
//
// @param request - GetClusterSuspEventStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetClusterSuspEventStatisticsResponse
func (client *Client) GetClusterSuspEventStatisticsWithContext(ctx context.Context, request *GetClusterSuspEventStatisticsRequest, runtime *dara.RuntimeOptions) (_result *GetClusterSuspEventStatisticsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetClusterSuspEventStatistics"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetClusterSuspEventStatisticsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configuration of a common switch.
//
// @param request - GetCommonSwitchConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCommonSwitchConfigResponse
func (client *Client) GetCommonSwitchConfigWithContext(ctx context.Context, request *GetCommonSwitchConfigRequest, runtime *dara.RuntimeOptions) (_result *GetCommonSwitchConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetCommonSwitchConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetCommonSwitchConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Query whether the core function\\"s gray switch is hit
//
// @param request - GetConsoleFuncGrayStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetConsoleFuncGrayStatusResponse
func (client *Client) GetConsoleFuncGrayStatusWithContext(ctx context.Context, request *GetConsoleFuncGrayStatusRequest, runtime *dara.RuntimeOptions) (_result *GetConsoleFuncGrayStatusResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Condition) {
		query["Condition"] = request.Condition
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetConsoleFuncGrayStatus"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetConsoleFuncGrayStatusResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a rule for non-image program defense.
//
// @param request - GetContainerDefenseRuleDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetContainerDefenseRuleDetailResponse
func (client *Client) GetContainerDefenseRuleDetailWithContext(ctx context.Context, request *GetContainerDefenseRuleDetailRequest, runtime *dara.RuntimeOptions) (_result *GetContainerDefenseRuleDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.RuleId) {
		query["RuleId"] = request.RuleId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetContainerDefenseRuleDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetContainerDefenseRuleDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the security operations trends of the vulnerabilities, alerts, and baseline risks.
//
// @param request - GetDataTrendRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDataTrendResponse
func (client *Client) GetDataTrendWithContext(ctx context.Context, request *GetDataTrendRequest, runtime *dara.RuntimeOptions) (_result *GetDataTrendResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BizTypes) {
		query["BizTypes"] = request.BizTypes
	}

	if !dara.IsNil(request.EndTimestamp) {
		query["EndTimestamp"] = request.EndTimestamp
	}

	if !dara.IsNil(request.Interval) {
		query["Interval"] = request.Interval
	}

	if !dara.IsNil(request.StartTimestamp) {
		query["StartTimestamp"] = request.StartTimestamp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetDataTrend"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetDataTrendResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the ranking of images in each dimension.
//
// @param request - GetDockerhubImageRiskRankInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDockerhubImageRiskRankInfoResponse
func (client *Client) GetDockerhubImageRiskRankInfoWithContext(ctx context.Context, request *GetDockerhubImageRiskRankInfoRequest, runtime *dara.RuntimeOptions) (_result *GetDockerhubImageRiskRankInfoResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Types) {
		query["Types"] = request.Types
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetDockerhubImageRiskRankInfo"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetDockerhubImageRiskRankInfoResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Query the statistical counts of images across various dimensions.
//
// @param request - GetDockerhubImageRiskStatisticRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDockerhubImageRiskStatisticResponse
func (client *Client) GetDockerhubImageRiskStatisticWithContext(ctx context.Context, request *GetDockerhubImageRiskStatisticRequest, runtime *dara.RuntimeOptions) (_result *GetDockerhubImageRiskStatisticResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Types) {
		query["Types"] = request.Types
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetDockerhubImageRiskStatistic"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetDockerhubImageRiskStatisticResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the cloud sandbox check results of malicious files.
//
// @param request - GetFileDetectReportRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetFileDetectReportResponse
func (client *Client) GetFileDetectReportWithContext(ctx context.Context, request *GetFileDetectReportRequest, runtime *dara.RuntimeOptions) (_result *GetFileDetectReportResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.EventId) {
		query["EventId"] = request.EventId
	}

	if !dara.IsNil(request.Field) {
		query["Field"] = request.Field
	}

	if !dara.IsNil(request.FileHash) {
		query["FileHash"] = request.FileHash
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceType) {
		query["SourceType"] = request.SourceType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetFileDetectReport"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetFileDetectReportResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains file detection results.
//
// Description:
//
// The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
//
// @param request - GetFileDetectResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetFileDetectResultResponse
func (client *Client) GetFileDetectResultWithContext(ctx context.Context, request *GetFileDetectResultRequest, runtime *dara.RuntimeOptions) (_result *GetFileDetectResultResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.HashKeyList) {
		query["HashKeyList"] = request.HashKeyList
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetFileDetectResult"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetFileDetectResultResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries information about core file monitoring events.
//
// @param request - GetFileProtectEventRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetFileProtectEventResponse
func (client *Client) GetFileProtectEventWithContext(ctx context.Context, request *GetFileProtectEventRequest, runtime *dara.RuntimeOptions) (_result *GetFileProtectEventResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetFileProtectEvent"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetFileProtectEventResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the total number of core file monitoring events by filter condition.
//
// @param request - GetFileProtectEventCountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetFileProtectEventCountResponse
func (client *Client) GetFileProtectEventCountWithContext(ctx context.Context, request *GetFileProtectEventCountRequest, runtime *dara.RuntimeOptions) (_result *GetFileProtectEventCountResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetFileProtectEventCount"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetFileProtectEventCountResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a core file monitoring rule based on the ID of the rule.
//
// @param request - GetFileProtectRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetFileProtectRuleResponse
func (client *Client) GetFileProtectRuleWithContext(ctx context.Context, request *GetFileProtectRuleRequest, runtime *dara.RuntimeOptions) (_result *GetFileProtectRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetFileProtectRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetFileProtectRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Get Trial Status
//
// @param request - GetFunctionTrialStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetFunctionTrialStatusResponse
func (client *Client) GetFunctionTrialStatusWithContext(ctx context.Context, request *GetFunctionTrialStatusRequest, runtime *dara.RuntimeOptions) (_result *GetFunctionTrialStatusResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.FunctionName) {
		query["FunctionName"] = request.FunctionName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetFunctionTrialStatus"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetFunctionTrialStatusResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains the URL that is used to upload a file to a honeypot.
//
// @param request - GetHoneyPotUploadPolicyInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetHoneyPotUploadPolicyInfoResponse
func (client *Client) GetHoneyPotUploadPolicyInfoWithContext(ctx context.Context, request *GetHoneyPotUploadPolicyInfoRequest, runtime *dara.RuntimeOptions) (_result *GetHoneyPotUploadPolicyInfoResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetHoneyPotUploadPolicyInfo"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetHoneyPotUploadPolicyInfoResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取蜜罐攻击统计数据
//
// @param request - GetHoneypotAttackStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetHoneypotAttackStatisticsResponse
func (client *Client) GetHoneypotAttackStatisticsWithContext(ctx context.Context, request *GetHoneypotAttackStatisticsRequest, runtime *dara.RuntimeOptions) (_result *GetHoneypotAttackStatisticsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.EndTimeStamp) {
		query["EndTimeStamp"] = request.EndTimeStamp
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RiskLevelList) {
		query["RiskLevelList"] = request.RiskLevelList
	}

	if !dara.IsNil(request.SrcIp) {
		query["SrcIp"] = request.SrcIp
	}

	if !dara.IsNil(request.StartTimeStamp) {
		query["StartTimeStamp"] = request.StartTimeStamp
	}

	if !dara.IsNil(request.StatisticsType) {
		query["StatisticsType"] = request.StatisticsType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetHoneypotAttackStatistics"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetHoneypotAttackStatisticsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtain attack trend statistics for a single attack source.
//
// @param request - GetHoneypotEventTrendRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetHoneypotEventTrendResponse
func (client *Client) GetHoneypotEventTrendWithContext(ctx context.Context, request *GetHoneypotEventTrendRequest, runtime *dara.RuntimeOptions) (_result *GetHoneypotEventTrendResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.EndTimeStamp) {
		query["EndTimeStamp"] = request.EndTimeStamp
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.RiskLevelList) {
		query["RiskLevelList"] = request.RiskLevelList
	}

	if !dara.IsNil(request.SrcIp) {
		query["SrcIp"] = request.SrcIp
	}

	if !dara.IsNil(request.StartTimeStamp) {
		query["StartTimeStamp"] = request.StartTimeStamp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetHoneypotEventTrend"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetHoneypotEventTrendResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a specified management node.
//
// @param request - GetHoneypotNodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetHoneypotNodeResponse
func (client *Client) GetHoneypotNodeWithContext(ctx context.Context, request *GetHoneypotNodeRequest, runtime *dara.RuntimeOptions) (_result *GetHoneypotNodeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.NodeId) {
		query["NodeId"] = request.NodeId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetHoneypotNode"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetHoneypotNodeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the monitoring data of management nodes to which the cloud honeypot belongs.
//
// @param request - GetHoneypotNodeMetricListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetHoneypotNodeMetricListResponse
func (client *Client) GetHoneypotNodeMetricListWithContext(ctx context.Context, request *GetHoneypotNodeMetricListRequest, runtime *dara.RuntimeOptions) (_result *GetHoneypotNodeMetricListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Express) {
		query["Express"] = request.Express
	}

	if !dara.IsNil(request.Length) {
		query["Length"] = request.Length
	}

	if !dara.IsNil(request.MetricName) {
		query["MetricName"] = request.MetricName
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NodeId) {
		query["NodeId"] = request.NodeId
	}

	if !dara.IsNil(request.Period) {
		query["Period"] = request.Period
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetHoneypotNodeMetricList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetHoneypotNodeMetricListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configurations of a specified honeypot template.
//
// @param request - GetHoneypotPresetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetHoneypotPresetResponse
func (client *Client) GetHoneypotPresetWithContext(ctx context.Context, request *GetHoneypotPresetRequest, runtime *dara.RuntimeOptions) (_result *GetHoneypotPresetResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.HoneypotPresetId) {
		query["HoneypotPresetId"] = request.HoneypotPresetId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetHoneypotPreset"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetHoneypotPresetResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details about a specified probe.
//
// @param request - GetHoneypotProbeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetHoneypotProbeResponse
func (client *Client) GetHoneypotProbeWithContext(ctx context.Context, request *GetHoneypotProbeRequest, runtime *dara.RuntimeOptions) (_result *GetHoneypotProbeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.ProbeId) {
		query["ProbeId"] = request.ProbeId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetHoneypotProbe"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetHoneypotProbeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取蜜罐使用量的统计数据
//
// @param request - GetHoneypotStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetHoneypotStatisticsResponse
func (client *Client) GetHoneypotStatisticsWithContext(ctx context.Context, request *GetHoneypotStatisticsRequest, runtime *dara.RuntimeOptions) (_result *GetHoneypotStatisticsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetHoneypotStatistics"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetHoneypotStatisticsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries alert handling rules.
//
// @param request - GetImageEventOperationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetImageEventOperationResponse
func (client *Client) GetImageEventOperationWithContext(ctx context.Context, request *GetImageEventOperationRequest, runtime *dara.RuntimeOptions) (_result *GetImageEventOperationResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetImageEventOperation"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetImageEventOperationResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of image scans that are performed within the last several days.
//
// @param request - GetImageScanNumInPeriodRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetImageScanNumInPeriodResponse
func (client *Client) GetImageScanNumInPeriodWithContext(ctx context.Context, request *GetImageScanNumInPeriodRequest, runtime *dara.RuntimeOptions) (_result *GetImageScanNumInPeriodResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.PastDay) {
		query["PastDay"] = request.PastDay
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetImageScanNumInPeriod"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetImageScanNumInPeriodResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Query Asset Installation Code
//
// @param request - GetInstallCodeForUuidRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetInstallCodeForUuidResponse
func (client *Client) GetInstallCodeForUuidWithContext(ctx context.Context, request *GetInstallCodeForUuidRequest, runtime *dara.RuntimeOptions) (_result *GetInstallCodeForUuidResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetInstallCodeForUuid"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetInstallCodeForUuidResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Count the number of security events for a single instance
//
// @param request - GetInstanceAlarmStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetInstanceAlarmStatisticsResponse
func (client *Client) GetInstanceAlarmStatisticsWithContext(ctx context.Context, request *GetInstanceAlarmStatisticsRequest, runtime *dara.RuntimeOptions) (_result *GetInstanceAlarmStatisticsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetInstanceAlarmStatistics"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetInstanceAlarmStatisticsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a microsegmentation defense rule.
//
// @param request - GetInterceptionRuleDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetInterceptionRuleDetailResponse
func (client *Client) GetInterceptionRuleDetailWithContext(ctx context.Context, request *GetInterceptionRuleDetailRequest, runtime *dara.RuntimeOptions) (_result *GetInterceptionRuleDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.RuleId) {
		query["RuleId"] = request.RuleId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetInterceptionRuleDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetInterceptionRuleDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics of the container firewall feature.
//
// @param request - GetInterceptionSummaryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetInterceptionSummaryResponse
func (client *Client) GetInterceptionSummaryWithContext(ctx context.Context, request *GetInterceptionSummaryRequest, runtime *dara.RuntimeOptions) (_result *GetInterceptionSummaryResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetInterceptionSummary"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetInterceptionSummaryResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a specified network object that is protected by the container firewall feature.
//
// @param request - GetInterceptionTargetDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetInterceptionTargetDetailResponse
func (client *Client) GetInterceptionTargetDetailWithContext(ctx context.Context, request *GetInterceptionTargetDetailRequest, runtime *dara.RuntimeOptions) (_result *GetInterceptionTargetDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.TargetId) {
		query["TargetId"] = request.TargetId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetInterceptionTargetDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetInterceptionTargetDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries information about the latest scan task to determine whether the task is complete.
//
// @param request - GetLastOnceTaskInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetLastOnceTaskInfoResponse
func (client *Client) GetLastOnceTaskInfoWithContext(ctx context.Context, request *GetLastOnceTaskInfoRequest, runtime *dara.RuntimeOptions) (_result *GetLastOnceTaskInfoResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	if !dara.IsNil(request.TaskName) {
		query["TaskName"] = request.TaskName
	}

	if !dara.IsNil(request.TaskType) {
		query["TaskType"] = request.TaskType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetLastOnceTaskInfo"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetLastOnceTaskInfoResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains the default region for synchronizing assets outside Alibaba Cloud.
//
// @param request - GetLocalDefaultRegionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetLocalDefaultRegionResponse
func (client *Client) GetLocalDefaultRegionWithContext(ctx context.Context, request *GetLocalDefaultRegionRequest, runtime *dara.RuntimeOptions) (_result *GetLocalDefaultRegionResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Vendor) {
		query["Vendor"] = request.Vendor
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetLocalDefaultRegion"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetLocalDefaultRegionResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the status of a data shipping task of a log.
//
// @param request - GetLogMetaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetLogMetaResponse
func (client *Client) GetLogMetaWithContext(ctx context.Context, request *GetLogMetaRequest, runtime *dara.RuntimeOptions) (_result *GetLogMetaResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.LogStore) {
		query["LogStore"] = request.LogStore
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetLogMeta"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetLogMetaResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
//
// @param request - GetMaliciousFileWhitelistConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMaliciousFileWhitelistConfigResponse
func (client *Client) GetMaliciousFileWhitelistConfigWithContext(ctx context.Context, request *GetMaliciousFileWhitelistConfigRequest, runtime *dara.RuntimeOptions) (_result *GetMaliciousFileWhitelistConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ConfigId) {
		query["ConfigId"] = request.ConfigId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetMaliciousFileWhitelistConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetMaliciousFileWhitelistConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configurations of a module.
//
// @param request - GetModuleConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetModuleConfigResponse
func (client *Client) GetModuleConfigWithContext(ctx context.Context, request *GetModuleConfigRequest, runtime *dara.RuntimeOptions) (_result *GetModuleConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetModuleConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetModuleConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Checks whether the purchased Security Center features are enabled and whether related configurations take effect.
//
// @param tmpReq - GetModuleConfigStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetModuleConfigStatusResponse
func (client *Client) GetModuleConfigStatusWithContext(ctx context.Context, tmpReq *GetModuleConfigStatusRequest, runtime *dara.RuntimeOptions) (_result *GetModuleConfigStatusResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &GetModuleConfigStatusShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.ModuleNames) {
		request.ModuleNamesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ModuleNames, dara.String("ModuleNames"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.ModuleNamesShrink) {
		query["ModuleNames"] = request.ModuleNamesShrink
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetModuleConfigStatus"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetModuleConfigStatusResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the qualification information about the trial use of Security Center value-added features, including vulnerability fixing and threat analysis and response.
//
// @param request - GetModuleTrialAuthInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetModuleTrialAuthInfoResponse
func (client *Client) GetModuleTrialAuthInfoWithContext(ctx context.Context, request *GetModuleTrialAuthInfoRequest, runtime *dara.RuntimeOptions) (_result *GetModuleTrialAuthInfoResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.ModuleCode) {
		query["ModuleCode"] = request.ModuleCode
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetModuleTrialAuthInfo"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetModuleTrialAuthInfoResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of an alert event that is generated for a malicious object.
//
// @param request - GetObjectScanEventRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetObjectScanEventResponse
func (client *Client) GetObjectScanEventWithContext(ctx context.Context, request *GetObjectScanEventRequest, runtime *dara.RuntimeOptions) (_result *GetObjectScanEventResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.EventId) {
		query["EventId"] = request.EventId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetObjectScanEvent"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetObjectScanEventResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the execution result of a one-time scan task, such as asset fingerprint collection, vulnerability scan, and image security scan.
//
// @param request - GetOnceTaskResultInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetOnceTaskResultInfoResponse
func (client *Client) GetOnceTaskResultInfoWithContext(ctx context.Context, request *GetOnceTaskResultInfoRequest, runtime *dara.RuntimeOptions) (_result *GetOnceTaskResultInfoResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	if !dara.IsNil(request.TaskName) {
		query["TaskName"] = request.TaskName
	}

	if !dara.IsNil(request.TaskType) {
		query["TaskType"] = request.TaskType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetOnceTaskResultInfo"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetOnceTaskResultInfoResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询集群镜像
//
// @param request - GetOpaClusterImageListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetOpaClusterImageListResponse
func (client *Client) GetOpaClusterImageListWithContext(ctx context.Context, request *GetOpaClusterImageListRequest, runtime *dara.RuntimeOptions) (_result *GetOpaClusterImageListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.ImageName) {
		query["ImageName"] = request.ImageName
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetOpaClusterImageList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetOpaClusterImageListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries information about the tags that are added to containers based on the feature of proactive defense for containers.
//
// @param request - GetOpaClusterLabelListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetOpaClusterLabelListResponse
func (client *Client) GetOpaClusterLabelListWithContext(ctx context.Context, request *GetOpaClusterLabelListRequest, runtime *dara.RuntimeOptions) (_result *GetOpaClusterLabelListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.TagName) {
		query["TagName"] = request.TagName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetOpaClusterLabelList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetOpaClusterLabelListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries information about the namespaces of clusters for which the rules of the at-risk image blocking type are configured in proactive defense for containers.
//
// @param request - GetOpaClusterNamespaceListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetOpaClusterNamespaceListResponse
func (client *Client) GetOpaClusterNamespaceListWithContext(ctx context.Context, request *GetOpaClusterNamespaceListRequest, runtime *dara.RuntimeOptions) (_result *GetOpaClusterNamespaceListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.NameSpaceName) {
		query["NameSpaceName"] = request.NameSpaceName
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetOpaClusterNamespaceList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetOpaClusterNamespaceListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the installation status of the components that are required for clusters protected by proactive defense for containers.
//
// @param request - GetOpaPluginStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetOpaPluginStatusResponse
func (client *Client) GetOpaPluginStatusWithContext(ctx context.Context, request *GetOpaPluginStatusRequest, runtime *dara.RuntimeOptions) (_result *GetOpaPluginStatusResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterIds) {
		query["ClusterIds"] = request.ClusterIds
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetOpaPluginStatus"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetOpaPluginStatusResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of the rule that is used to block at-risk images.
//
// @param request - GetOpaStrategyDetailNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetOpaStrategyDetailNewResponse
func (client *Client) GetOpaStrategyDetailNewWithContext(ctx context.Context, request *GetOpaStrategyDetailNewRequest, runtime *dara.RuntimeOptions) (_result *GetOpaStrategyDetailNewResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.StrategyId) {
		query["StrategyId"] = request.StrategyId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetOpaStrategyDetailNew"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetOpaStrategyDetailNewResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics about an Object Storage Service (OSS) bucket check.
//
// @param request - GetOssBucketScanStatisticRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetOssBucketScanStatisticResponse
func (client *Client) GetOssBucketScanStatisticWithContext(ctx context.Context, request *GetOssBucketScanStatisticRequest, runtime *dara.RuntimeOptions) (_result *GetOssBucketScanStatisticResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BucketNameList) {
		query["BucketNameList"] = request.BucketNameList
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetOssBucketScanStatistic"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetOssBucketScanStatisticResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configurations of an Object Storage Service (OSS) bucket check policy.
//
// @param request - GetOssScanConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetOssScanConfigResponse
func (client *Client) GetOssScanConfigWithContext(ctx context.Context, request *GetOssScanConfigRequest, runtime *dara.RuntimeOptions) (_result *GetOssScanConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BucketName) {
		query["BucketName"] = request.BucketName
	}

	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetOssScanConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetOssScanConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configurations for the collection frequency of asset fingerprints.
//
// @param request - GetPropertyScheduleConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPropertyScheduleConfigResponse
func (client *Client) GetPropertyScheduleConfigWithContext(ctx context.Context, request *GetPropertyScheduleConfigRequest, runtime *dara.RuntimeOptions) (_result *GetPropertyScheduleConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetPropertyScheduleConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetPropertyScheduleConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Get Container File Defense Rule Details.
//
// @param request - GetSasContainerWebDefenseRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSasContainerWebDefenseRuleResponse
func (client *Client) GetSasContainerWebDefenseRuleWithContext(ctx context.Context, request *GetSasContainerWebDefenseRuleRequest, runtime *dara.RuntimeOptions) (_result *GetSasContainerWebDefenseRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.RuleId) {
		query["RuleId"] = request.RuleId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetSasContainerWebDefenseRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetSasContainerWebDefenseRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the applications that are specified in a rule for container tamper-proofing.
//
// @param request - GetSasContainerWebDefenseRuleApplicationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSasContainerWebDefenseRuleApplicationResponse
func (client *Client) GetSasContainerWebDefenseRuleApplicationWithContext(ctx context.Context, request *GetSasContainerWebDefenseRuleApplicationRequest, runtime *dara.RuntimeOptions) (_result *GetSasContainerWebDefenseRuleApplicationResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.RuleId) {
		query["RuleId"] = request.RuleId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetSasContainerWebDefenseRuleApplication"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetSasContainerWebDefenseRuleApplicationResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries search conditions that can be used to search for container file protection rules.
//
// @param request - GetSasContainerWebDefenseRuleCriteriaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSasContainerWebDefenseRuleCriteriaResponse
func (client *Client) GetSasContainerWebDefenseRuleCriteriaWithContext(ctx context.Context, request *GetSasContainerWebDefenseRuleCriteriaRequest, runtime *dara.RuntimeOptions) (_result *GetSasContainerWebDefenseRuleCriteriaResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Value) {
		query["Value"] = request.Value
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetSasContainerWebDefenseRuleCriteria"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetSasContainerWebDefenseRuleCriteriaResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of the deduction modules of the security score feature, including custom settings.
//
// @param request - GetSecurityScoreRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSecurityScoreRuleResponse
func (client *Client) GetSecurityScoreRuleWithContext(ctx context.Context, request *GetSecurityScoreRuleRequest, runtime *dara.RuntimeOptions) (_result *GetSecurityScoreRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CalType) {
		query["CalType"] = request.CalType
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetSecurityScoreRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetSecurityScoreRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the check rules of sensitive files.
//
// @param request - GetSensitiveDefineRuleConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSensitiveDefineRuleConfigResponse
func (client *Client) GetSensitiveDefineRuleConfigWithContext(ctx context.Context, request *GetSensitiveDefineRuleConfigRequest, runtime *dara.RuntimeOptions) (_result *GetSensitiveDefineRuleConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetSensitiveDefineRuleConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetSensitiveDefineRuleConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Get Serverless Application Authorization Details
//
// @param request - GetServerlessAppAuthDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetServerlessAppAuthDetailResponse
func (client *Client) GetServerlessAppAuthDetailWithContext(ctx context.Context, request *GetServerlessAppAuthDetailRequest, runtime *dara.RuntimeOptions) (_result *GetServerlessAppAuthDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.AppRegionId) {
		query["AppRegionId"] = request.AppRegionId
	}

	if !dara.IsNil(request.MachineType) {
		query["MachineType"] = request.MachineType
	}

	if !dara.IsNil(request.VendorType) {
		query["VendorType"] = request.VendorType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetServerlessAppAuthDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetServerlessAppAuthDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Get Serverless Authorization Overview
//
// @param request - GetServerlessAuthSummaryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetServerlessAuthSummaryResponse
func (client *Client) GetServerlessAuthSummaryWithContext(ctx context.Context, request *GetServerlessAuthSummaryRequest, runtime *dara.RuntimeOptions) (_result *GetServerlessAuthSummaryResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppRegionId) {
		query["AppRegionId"] = request.AppRegionId
	}

	if !dara.IsNil(request.MachineType) {
		query["MachineType"] = request.MachineType
	}

	if !dara.IsNil(request.VendorType) {
		query["VendorType"] = request.VendorType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetServerlessAuthSummary"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetServerlessAuthSummaryResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the service trail that was delivered to ActionTrail.
//
// @param request - GetServiceTrailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetServiceTrailResponse
func (client *Client) GetServiceTrailWithContext(ctx context.Context, request *GetServiceTrailRequest, runtime *dara.RuntimeOptions) (_result *GetServiceTrailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetServiceTrail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetServiceTrailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the usage details of templates provided in the feature of proactive defense for containers for rules.
//
// @param request - GetStrategyTemplateDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetStrategyTemplateDetailResponse
func (client *Client) GetStrategyTemplateDetailWithContext(ctx context.Context, request *GetStrategyTemplateDetailRequest, runtime *dara.RuntimeOptions) (_result *GetStrategyTemplateDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.StrategyId) {
		query["StrategyId"] = request.StrategyId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetStrategyTemplateDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetStrategyTemplateDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Get the list of modules supported by authorization.
//
// @param request - GetSupportedModulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSupportedModulesResponse
func (client *Client) GetSupportedModulesWithContext(ctx context.Context, request *GetSupportedModulesRequest, runtime *dara.RuntimeOptions) (_result *GetSupportedModulesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetSupportedModules"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetSupportedModulesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics on alerts in one or more asset groups.
//
// @param request - GetSuspiciousStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSuspiciousStatisticsResponse
func (client *Client) GetSuspiciousStatisticsWithContext(ctx context.Context, request *GetSuspiciousStatisticsRequest, runtime *dara.RuntimeOptions) (_result *GetSuspiciousStatisticsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.GroupIdList) {
		query["GroupIdList"] = request.GroupIdList
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetSuspiciousStatistics"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetSuspiciousStatisticsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a migration operation. For example, you can query the progress and status of a migration operation after you migrate a server from a region in the Chinese mainland to the Singapore region.
//
// @param request - GetSwitchRegionDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSwitchRegionDetailResponse
func (client *Client) GetSwitchRegionDetailWithContext(ctx context.Context, request *GetSwitchRegionDetailRequest, runtime *dara.RuntimeOptions) (_result *GetSwitchRegionDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetSwitchRegionDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetSwitchRegionDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configurations of a periodic virus scan task.
//
// @param request - GetVirusScanConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetVirusScanConfigResponse
func (client *Client) GetVirusScanConfigWithContext(ctx context.Context, request *GetVirusScanConfigRequest, runtime *dara.RuntimeOptions) (_result *GetVirusScanConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.TaskType) {
		query["TaskType"] = request.TaskType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetVirusScanConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetVirusScanConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics on vulnerabilities in asset groups.
//
// @param request - GetVulStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetVulStatisticsResponse
func (client *Client) GetVulStatisticsWithContext(ctx context.Context, request *GetVulStatisticsRequest, runtime *dara.RuntimeOptions) (_result *GetVulStatisticsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.GroupIdList) {
		query["GroupIdList"] = request.GroupIdList
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.TypeList) {
		query["TypeList"] = request.TypeList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetVulStatistics"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetVulStatisticsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries information about a vulnerability whitelist.
//
// @param request - GetVulWhitelistRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetVulWhitelistResponse
func (client *Client) GetVulWhitelistWithContext(ctx context.Context, request *GetVulWhitelistRequest, runtime *dara.RuntimeOptions) (_result *GetVulWhitelistResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.VulWhitelistId) {
		query["VulWhitelistId"] = request.VulWhitelistId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetVulWhitelist"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetVulWhitelistResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Authorization for Switching Migration
//
// @param request - GrantSwitchAgreementRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GrantSwitchAgreementResponse
func (client *Client) GrantSwitchAgreementWithContext(ctx context.Context, request *GrantSwitchAgreementRequest, runtime *dara.RuntimeOptions) (_result *GrantSwitchAgreementResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.IsAgree) {
		query["IsAgree"] = request.IsAgree
	}

	if !dara.IsNil(request.IsImmediate) {
		query["IsImmediate"] = request.IsImmediate
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GrantSwitchAgreement"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GrantSwitchAgreementResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Handle Malicious Files
//
// @param request - HandleMaliciousFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return HandleMaliciousFilesResponse
func (client *Client) HandleMaliciousFilesWithContext(ctx context.Context, request *HandleMaliciousFilesRequest, runtime *dara.RuntimeOptions) (_result *HandleMaliciousFilesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.FileIdList) {
		query["FileIdList"] = request.FileIdList
	}

	if !dara.IsNil(request.Operation) {
		query["Operation"] = request.Operation
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("HandleMaliciousFiles"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &HandleMaliciousFilesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Handles alert events.
//
// @param request - HandleSecurityEventsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return HandleSecurityEventsResponse
func (client *Client) HandleSecurityEventsWithContext(ctx context.Context, request *HandleSecurityEventsRequest, runtime *dara.RuntimeOptions) (_result *HandleSecurityEventsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.MarkBatch) {
		query["MarkBatch"] = request.MarkBatch
	}

	if !dara.IsNil(request.MarkMissParam) {
		query["MarkMissParam"] = request.MarkMissParam
	}

	if !dara.IsNil(request.OperationCode) {
		query["OperationCode"] = request.OperationCode
	}

	if !dara.IsNil(request.OperationParams) {
		query["OperationParams"] = request.OperationParams
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.SecurityEventIds) {
		query["SecurityEventIds"] = request.SecurityEventIds
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("HandleSecurityEvents"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &HandleSecurityEventsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Handles multiple alert events that are triggered by the same IP address rule or IP address rules of the same type at a time.
//
// @param request - HandleSimilarSecurityEventsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return HandleSimilarSecurityEventsResponse
func (client *Client) HandleSimilarSecurityEventsWithContext(ctx context.Context, request *HandleSimilarSecurityEventsRequest, runtime *dara.RuntimeOptions) (_result *HandleSimilarSecurityEventsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.MarkMissParam) {
		query["MarkMissParam"] = request.MarkMissParam
	}

	if !dara.IsNil(request.OperationCode) {
		query["OperationCode"] = request.OperationCode
	}

	if !dara.IsNil(request.OperationParams) {
		query["OperationParams"] = request.OperationParams
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("HandleSimilarSecurityEvents"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &HandleSimilarSecurityEventsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds risk items to the whitelist or removes risk items from the whitelist by specifying servers and risk items.
//
// @param request - IgnoreCheckItemsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return IgnoreCheckItemsResponse
func (client *Client) IgnoreCheckItemsWithContext(ctx context.Context, request *IgnoreCheckItemsRequest, runtime *dara.RuntimeOptions) (_result *IgnoreCheckItemsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckAndRiskTypeList) {
		query["CheckAndRiskTypeList"] = request.CheckAndRiskTypeList
	}

	if !dara.IsNil(request.CheckIds) {
		query["CheckIds"] = request.CheckIds
	}

	if !dara.IsNil(request.ContainerItems) {
		query["ContainerItems"] = request.ContainerItems
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Reason) {
		query["Reason"] = request.Reason
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	if !dara.IsNil(request.UuidList) {
		query["UuidList"] = request.UuidList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("IgnoreCheckItems"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &IgnoreCheckItemsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI IgnoreHcCheckWarnings is deprecated, please use Sas::2018-12-03::IgnoreCheckItems instead.
//
// Summary:
//
// Ignores multiple baseline risk items at a time or cancels the ignore action that is performed on multiple baseline risk items at a time.
//
// @param request - IgnoreHcCheckWarningsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return IgnoreHcCheckWarningsResponse
func (client *Client) IgnoreHcCheckWarningsWithContext(ctx context.Context, request *IgnoreHcCheckWarningsRequest, runtime *dara.RuntimeOptions) (_result *IgnoreHcCheckWarningsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckIds) {
		query["CheckIds"] = request.CheckIds
	}

	if !dara.IsNil(request.CheckWarningIds) {
		query["CheckWarningIds"] = request.CheckWarningIds
	}

	if !dara.IsNil(request.Reason) {
		query["Reason"] = request.Reason
	}

	if !dara.IsNil(request.RiskId) {
		query["RiskId"] = request.RiskId
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("IgnoreHcCheckWarnings"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &IgnoreHcCheckWarningsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds the result scanned by an IDC probe to the whitelist or ignores the scan result.
//
// @param request - IgnoreIdcProbeScanResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return IgnoreIdcProbeScanResultResponse
func (client *Client) IgnoreIdcProbeScanResultWithContext(ctx context.Context, request *IgnoreIdcProbeScanResultRequest, runtime *dara.RuntimeOptions) (_result *IgnoreIdcProbeScanResultResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.IgnoreAction) {
		query["IgnoreAction"] = request.IgnoreAction
	}

	if !dara.IsNil(request.ScanResultIds) {
		query["ScanResultIds"] = request.ScanResultIds
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("IgnoreIdcProbeScanResult"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &IgnoreIdcProbeScanResultResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Install Aegis client on Lingjun bare metal.
//
// @param tmpReq - InstallAegisForLingjunRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InstallAegisForLingjunResponse
func (client *Client) InstallAegisForLingjunWithContext(ctx context.Context, tmpReq *InstallAegisForLingjunRequest, runtime *dara.RuntimeOptions) (_result *InstallAegisForLingjunResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &InstallAegisForLingjunShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.Uuids) {
		request.UuidsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Uuids, dara.String("Uuids"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.UuidsShrink) {
		query["Uuids"] = request.UuidsShrink
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("InstallAegisForLingjun"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &InstallAegisForLingjunResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Installs the anti-ransomware agent.
//
// @param request - InstallBackupClientRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InstallBackupClientResponse
func (client *Client) InstallBackupClientWithContext(ctx context.Context, request *InstallBackupClientRequest, runtime *dara.RuntimeOptions) (_result *InstallBackupClientResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.PolicyVersion) {
		query["PolicyVersion"] = request.PolicyVersion
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	if !dara.IsNil(request.UuidList) {
		query["UuidList"] = request.UuidList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("InstallBackupClient"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &InstallBackupClientResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Installs the CloudMonitor agent on specified servers.
//
// Description:
//
// > Before you call this operation, make sure that the Security Center agent on your servers is online and the servers can access Alibaba Cloud services.
//
// @param request - InstallCloudMonitorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InstallCloudMonitorResponse
func (client *Client) InstallCloudMonitorWithContext(ctx context.Context, request *InstallCloudMonitorRequest, runtime *dara.RuntimeOptions) (_result *InstallCloudMonitorResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AgentAccessKey) {
		query["AgentAccessKey"] = request.AgentAccessKey
	}

	if !dara.IsNil(request.AgentSecretKey) {
		query["AgentSecretKey"] = request.AgentSecretKey
	}

	if !dara.IsNil(request.ArgusVersion) {
		query["ArgusVersion"] = request.ArgusVersion
	}

	if !dara.IsNil(request.InstanceIdList) {
		query["InstanceIdList"] = request.InstanceIdList
	}

	if !dara.IsNil(request.UuidList) {
		query["UuidList"] = request.UuidList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("InstallCloudMonitor"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &InstallCloudMonitorResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Installs the Security Center agent on a proxy server in a hybrid cloud.
//
// @param request - InstallHybridProxyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InstallHybridProxyResponse
func (client *Client) InstallHybridProxyWithContext(ctx context.Context, request *InstallHybridProxyRequest, runtime *dara.RuntimeOptions) (_result *InstallHybridProxyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterName) {
		query["ClusterName"] = request.ClusterName
	}

	if !dara.IsNil(request.InstallCode) {
		query["InstallCode"] = request.InstallCode
	}

	if !dara.IsNil(request.YundunUuids) {
		query["YundunUuids"] = request.YundunUuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("InstallHybridProxy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &InstallHybridProxyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Installs the CloudMonitor agent on a server that is not deployed on Alibaba Cloud.
//
// @param request - InstallPmAgentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InstallPmAgentResponse
func (client *Client) InstallPmAgentWithContext(ctx context.Context, request *InstallPmAgentRequest, runtime *dara.RuntimeOptions) (_result *InstallPmAgentResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("InstallPmAgent"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &InstallPmAgentResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Installs the anti-ransomware agent for databases.
//
// @param request - InstallUniBackupAgentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InstallUniBackupAgentResponse
func (client *Client) InstallUniBackupAgentWithContext(ctx context.Context, request *InstallUniBackupAgentRequest, runtime *dara.RuntimeOptions) (_result *InstallUniBackupAgentResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.PolicyId) {
		query["PolicyId"] = request.PolicyId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("InstallUniBackupAgent"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &InstallUniBackupAgentResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds processes to the process whitelist of web tamper proofing.
//
// @param request - JoinWebLockProcessWhiteListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return JoinWebLockProcessWhiteListResponse
func (client *Client) JoinWebLockProcessWhiteListWithContext(ctx context.Context, request *JoinWebLockProcessWhiteListRequest, runtime *dara.RuntimeOptions) (_result *JoinWebLockProcessWhiteListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ProcessPaths) {
		query["ProcessPaths"] = request.ProcessPaths
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("JoinWebLockProcessWhiteList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &JoinWebLockProcessWhiteListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries defense rules against container escapes.
//
// @param request - ListAegisContainerPluginRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAegisContainerPluginRuleResponse
func (client *Client) ListAegisContainerPluginRuleWithContext(ctx context.Context, request *ListAegisContainerPluginRuleRequest, runtime *dara.RuntimeOptions) (_result *ListAegisContainerPluginRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Criteria) {
		query["Criteria"] = request.Criteria
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RuleType) {
		query["RuleType"] = request.RuleType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListAegisContainerPluginRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListAegisContainerPluginRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Query the Aegis client installation result for Lingjun bare metal.
//
// @param tmpReq - ListAegisForLingjunStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAegisForLingjunStatusResponse
func (client *Client) ListAegisForLingjunStatusWithContext(ctx context.Context, tmpReq *ListAegisForLingjunStatusRequest, runtime *dara.RuntimeOptions) (_result *ListAegisForLingjunStatusResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &ListAegisForLingjunStatusShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.Uuids) {
		request.UuidsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Uuids, dara.String("Uuids"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.UuidsShrink) {
		query["Uuids"] = request.UuidsShrink
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListAegisForLingjunStatus"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListAegisForLingjunStatusResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Query agentless detection assets.
//
// @param request - ListAgentlessAssetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAgentlessAssetResponse
func (client *Client) ListAgentlessAssetWithContext(ctx context.Context, request *ListAgentlessAssetRequest, runtime *dara.RuntimeOptions) (_result *ListAgentlessAssetResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.DiskType) {
		query["DiskType"] = request.DiskType
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.InstanceName) {
		query["InstanceName"] = request.InstanceName
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Platform) {
		query["Platform"] = request.Platform
	}

	if !dara.IsNil(request.ScanRegionId) {
		query["ScanRegionId"] = request.ScanRegionId
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListAgentlessAsset"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListAgentlessAssetResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries malicious files that are detected by agentless detection tasks.
//
// @param request - ListAgentlessMaliciousFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAgentlessMaliciousFilesResponse
func (client *Client) ListAgentlessMaliciousFilesWithContext(ctx context.Context, request *ListAgentlessMaliciousFilesRequest, runtime *dara.RuntimeOptions) (_result *ListAgentlessMaliciousFilesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Dealed) {
		query["Dealed"] = request.Dealed
	}

	if !dara.IsNil(request.EventId) {
		query["EventId"] = request.EventId
	}

	if !dara.IsNil(request.FuzzyMaliciousName) {
		query["FuzzyMaliciousName"] = request.FuzzyMaliciousName
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Levels) {
		query["Levels"] = request.Levels
	}

	if !dara.IsNil(request.MaliciousMd5) {
		query["MaliciousMd5"] = request.MaliciousMd5
	}

	if !dara.IsNil(request.MaliciousType) {
		query["MaliciousType"] = request.MaliciousType
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.ScanRange) {
		query["ScanRange"] = request.ScanRange
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListAgentlessMaliciousFiles"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListAgentlessMaliciousFilesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains the risks associated with an agentless detection event.
//
// @param request - ListAgentlessRelateMaliciousRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAgentlessRelateMaliciousResponse
func (client *Client) ListAgentlessRelateMaliciousWithContext(ctx context.Context, request *ListAgentlessRelateMaliciousRequest, runtime *dara.RuntimeOptions) (_result *ListAgentlessRelateMaliciousResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.EventId) {
		query["EventId"] = request.EventId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Scenario) {
		query["Scenario"] = request.Scenario
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListAgentlessRelateMalicious"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListAgentlessRelateMaliciousResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries at-risk hosts that are detected by the agentless detection feature.
//
// @param request - ListAgentlessRiskUuidRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAgentlessRiskUuidResponse
func (client *Client) ListAgentlessRiskUuidWithContext(ctx context.Context, request *ListAgentlessRiskUuidRequest, runtime *dara.RuntimeOptions) (_result *ListAgentlessRiskUuidResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.InstanceName) {
		query["InstanceName"] = request.InstanceName
	}

	if !dara.IsNil(request.InternetIp) {
		query["InternetIp"] = request.InternetIp
	}

	if !dara.IsNil(request.IntranetIp) {
		query["IntranetIp"] = request.IntranetIp
	}

	if !dara.IsNil(request.MachineName) {
		query["MachineName"] = request.MachineName
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Risk) {
		query["Risk"] = request.Risk
	}

	if !dara.IsNil(request.TargetName) {
		query["TargetName"] = request.TargetName
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListAgentlessRiskUuid"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListAgentlessRiskUuidResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries agentless detection tasks.
//
// @param request - ListAgentlessTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAgentlessTaskResponse
func (client *Client) ListAgentlessTaskWithContext(ctx context.Context, request *ListAgentlessTaskRequest, runtime *dara.RuntimeOptions) (_result *ListAgentlessTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.InternetIp) {
		query["InternetIp"] = request.InternetIp
	}

	if !dara.IsNil(request.IntranetIp) {
		query["IntranetIp"] = request.IntranetIp
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.MachineName) {
		query["MachineName"] = request.MachineName
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RootTask) {
		query["RootTask"] = request.RootTask
	}

	if !dara.IsNil(request.RootTaskId) {
		query["RootTaskId"] = request.RootTaskId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	if !dara.IsNil(request.TargetName) {
		query["TargetName"] = request.TargetName
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListAgentlessTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListAgentlessTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the custom upgrade information about assets.
//
// @param request - ListAssetInfoPublishRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAssetInfoPublishResponse
func (client *Client) ListAssetInfoPublishWithContext(ctx context.Context, request *ListAssetInfoPublishRequest, runtime *dara.RuntimeOptions) (_result *ListAssetInfoPublishResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.UuidList) {
		query["UuidList"] = request.UuidList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListAssetInfoPublish"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListAssetInfoPublishResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configurations of asset synchronization.
//
// @param request - ListAssetRefreshTaskConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAssetRefreshTaskConfigResponse
func (client *Client) ListAssetRefreshTaskConfigWithContext(ctx context.Context, request *ListAssetRefreshTaskConfigRequest, runtime *dara.RuntimeOptions) (_result *ListAssetRefreshTaskConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.RefreshConfigType) {
		query["RefreshConfigType"] = request.RefreshConfigType
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.TargetId) {
		query["TargetId"] = request.TargetId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListAssetRefreshTaskConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListAssetRefreshTaskConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the selected assets.
//
// @param request - ListAssetSelectionSelectedTargetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAssetSelectionSelectedTargetResponse
func (client *Client) ListAssetSelectionSelectedTargetWithContext(ctx context.Context, request *ListAssetSelectionSelectedTargetRequest, runtime *dara.RuntimeOptions) (_result *ListAssetSelectionSelectedTargetResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SelectionKey) {
		query["SelectionKey"] = request.SelectionKey
	}

	if !dara.IsNil(request.TargetList) {
		query["TargetList"] = request.TargetList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListAssetSelectionSelectedTarget"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListAssetSelectionSelectedTargetResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the required asset.
//
// @param request - ListAssetSelectionTargetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAssetSelectionTargetResponse
func (client *Client) ListAssetSelectionTargetWithContext(ctx context.Context, request *ListAssetSelectionTargetRequest, runtime *dara.RuntimeOptions) (_result *ListAssetSelectionTargetResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.SelectionKey) {
		query["SelectionKey"] = request.SelectionKey
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListAssetSelectionTarget"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListAssetSelectionTargetResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Query Attack Path Events.
//
// @param request - ListAttackPathEventRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAttackPathEventResponse
func (client *Client) ListAttackPathEventWithContext(ctx context.Context, request *ListAttackPathEventRequest, runtime *dara.RuntimeOptions) (_result *ListAttackPathEventResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AttackPathAssetList) {
		query["AttackPathAssetList"] = request.AttackPathAssetList
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.PathNameDesc) {
		query["PathNameDesc"] = request.PathNameDesc
	}

	if !dara.IsNil(request.PathType) {
		query["PathType"] = request.PathType
	}

	if !dara.IsNil(request.RiskLevelList) {
		query["RiskLevelList"] = request.RiskLevelList
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListAttackPathEvent"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListAttackPathEventResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Query Attack Path Whitelist List.
//
// @param request - ListAttackPathWhitelistRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAttackPathWhitelistResponse
func (client *Client) ListAttackPathWhitelistWithContext(ctx context.Context, request *ListAttackPathWhitelistRequest, runtime *dara.RuntimeOptions) (_result *ListAttackPathWhitelistResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.PathNameDesc) {
		query["PathNameDesc"] = request.PathNameDesc
	}

	if !dara.IsNil(request.PathType) {
		query["PathType"] = request.PathType
	}

	if !dara.IsNil(request.WhitelistName) {
		query["WhitelistName"] = request.WhitelistName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListAttackPathWhitelist"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListAttackPathWhitelistResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries asset auto-tagging rules that are created by using the feature of asset management rules. You can create rules on the System Configuration > Feature Settings > Multi-cloud Configuration Management > Asset Management Rule page in the Security Center console.
//
// @param request - ListAutoTagRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAutoTagRulesResponse
func (client *Client) ListAutoTagRulesWithContext(ctx context.Context, request *ListAutoTagRulesRequest, runtime *dara.RuntimeOptions) (_result *ListAutoTagRulesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RuleName) {
		query["RuleName"] = request.RuleName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListAutoTagRules"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListAutoTagRulesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Query Attack Path List.
//
// @param request - ListAvailableAttackPathRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAvailableAttackPathResponse
func (client *Client) ListAvailableAttackPathWithContext(ctx context.Context, request *ListAvailableAttackPathRequest, runtime *dara.RuntimeOptions) (_result *ListAvailableAttackPathResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListAvailableAttackPath"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListAvailableAttackPathResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about available honeypot templates.
//
// @param request - ListAvailableHoneypotRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAvailableHoneypotResponse
func (client *Client) ListAvailableHoneypotWithContext(ctx context.Context, request *ListAvailableHoneypotRequest, runtime *dara.RuntimeOptions) (_result *ListAvailableHoneypotResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.NodeId) {
		query["NodeId"] = request.NodeId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListAvailableHoneypot"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListAvailableHoneypotResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries backup records.
//
// @param request - ListBackupRecordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListBackupRecordResponse
func (client *Client) ListBackupRecordWithContext(ctx context.Context, request *ListBackupRecordRequest, runtime *dara.RuntimeOptions) (_result *ListBackupRecordResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BackupEndTime) {
		query["BackupEndTime"] = request.BackupEndTime
	}

	if !dara.IsNil(request.BackupStartTime) {
		query["BackupStartTime"] = request.BackupStartTime
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.MachineRemark) {
		query["MachineRemark"] = request.MachineRemark
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.StatusList) {
		query["StatusList"] = request.StatusList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListBackupRecord"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListBackupRecordResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the whitelist rules for a baseline check item.
//
// @param tmpReq - ListBaselineCheckWhiteRecordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListBaselineCheckWhiteRecordResponse
func (client *Client) ListBaselineCheckWhiteRecordWithContext(ctx context.Context, tmpReq *ListBaselineCheckWhiteRecordRequest, runtime *dara.RuntimeOptions) (_result *ListBaselineCheckWhiteRecordResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &ListBaselineCheckWhiteRecordShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.CheckIds) {
		request.CheckIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CheckIds, dara.String("CheckIds"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.RecordIds) {
		request.RecordIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RecordIds, dara.String("RecordIds"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckIdsShrink) {
		query["CheckIds"] = request.CheckIdsShrink
	}

	if !dara.IsNil(request.CheckItemFuzzy) {
		query["CheckItemFuzzy"] = request.CheckItemFuzzy
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RecordIdsShrink) {
		query["RecordIds"] = request.RecordIdsShrink
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListBaselineCheckWhiteRecord"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListBaselineCheckWhiteRecordResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the instances that failed a specified check item of configuration assessment.
//
// @param request - ListCheckInstanceResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCheckInstanceResultResponse
func (client *Client) ListCheckInstanceResultWithContext(ctx context.Context, request *ListCheckInstanceResultRequest, runtime *dara.RuntimeOptions) (_result *ListCheckInstanceResultResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckId) {
		query["CheckId"] = request.CheckId
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.InstanceIdKey) {
		query["InstanceIdKey"] = request.InstanceIdKey
	}

	if !dara.IsNil(request.InstanceIds) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !dara.IsNil(request.InstanceNameKey) {
		query["InstanceNameKey"] = request.InstanceNameKey
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionIdKey) {
		query["RegionIdKey"] = request.RegionIdKey
	}

	if !dara.IsNil(request.SortTypes) {
		query["SortTypes"] = request.SortTypes
	}

	if !dara.IsNil(request.Statuses) {
		query["Statuses"] = request.Statuses
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListCheckInstanceResult"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListCheckInstanceResultResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the check items that can be customized.
//
// @param request - ListCheckItemRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCheckItemResponse
func (client *Client) ListCheckItemWithContext(ctx context.Context, request *ListCheckItemRequest, runtime *dara.RuntimeOptions) (_result *ListCheckItemResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.TaskSources) {
		query["TaskSources"] = request.TaskSources
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListCheckItem"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListCheckItemResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the servers that are affected by baseline risks.
//
// @param request - ListCheckItemWarningMachineRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCheckItemWarningMachineResponse
func (client *Client) ListCheckItemWarningMachineWithContext(ctx context.Context, request *ListCheckItemWarningMachineRequest, runtime *dara.RuntimeOptions) (_result *ListCheckItemWarningMachineResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckId) {
		query["CheckId"] = request.CheckId
	}

	if !dara.IsNil(request.ContainerFieldName) {
		query["ContainerFieldName"] = request.ContainerFieldName
	}

	if !dara.IsNil(request.ContainerFieldValue) {
		query["ContainerFieldValue"] = request.ContainerFieldValue
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.RiskType) {
		query["RiskType"] = request.RiskType
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	if !dara.IsNil(request.UuidList) {
		query["UuidList"] = request.UuidList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListCheckItemWarningMachine"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListCheckItemWarningMachineResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the risk statistics of check items by page.
//
// @param request - ListCheckItemWarningSummaryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCheckItemWarningSummaryResponse
func (client *Client) ListCheckItemWarningSummaryWithContext(ctx context.Context, request *ListCheckItemWarningSummaryRequest, runtime *dara.RuntimeOptions) (_result *ListCheckItemWarningSummaryResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckItemFuzzy) {
		query["CheckItemFuzzy"] = request.CheckItemFuzzy
	}

	if !dara.IsNil(request.CheckLevel) {
		query["CheckLevel"] = request.CheckLevel
	}

	if !dara.IsNil(request.CheckType) {
		query["CheckType"] = request.CheckType
	}

	if !dara.IsNil(request.CheckWarningStatus) {
		query["CheckWarningStatus"] = request.CheckWarningStatus
	}

	if !dara.IsNil(request.CheckWarningStatusList) {
		query["CheckWarningStatusList"] = request.CheckWarningStatusList
	}

	if !dara.IsNil(request.ContainerFieldName) {
		query["ContainerFieldName"] = request.ContainerFieldName
	}

	if !dara.IsNil(request.ContainerFieldValue) {
		query["ContainerFieldValue"] = request.ContainerFieldValue
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RiskType) {
		query["RiskType"] = request.RiskType
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.UuidList) {
		query["UuidList"] = request.UuidList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListCheckItemWarningSummary"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListCheckItemWarningSummaryResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of the risk items that are detected in the configuration checks on cloud services.
//
// @param request - ListCheckResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCheckResultResponse
func (client *Client) ListCheckResultWithContext(ctx context.Context, request *ListCheckResultRequest, runtime *dara.RuntimeOptions) (_result *ListCheckResultResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckIds) {
		query["CheckIds"] = request.CheckIds
	}

	if !dara.IsNil(request.CheckKey) {
		query["CheckKey"] = request.CheckKey
	}

	if !dara.IsNil(request.CheckTypes) {
		query["CheckTypes"] = request.CheckTypes
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.CustomParam) {
		query["CustomParam"] = request.CustomParam
	}

	if !dara.IsNil(request.InstanceIds) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !dara.IsNil(request.InstanceTypes) {
		query["InstanceTypes"] = request.InstanceTypes
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.OperationTypes) {
		query["OperationTypes"] = request.OperationTypes
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.RequirementIds) {
		query["RequirementIds"] = request.RequirementIds
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.RiskLevels) {
		query["RiskLevels"] = request.RiskLevels
	}

	if !dara.IsNil(request.SortTypes) {
		query["SortTypes"] = request.SortTypes
	}

	if !dara.IsNil(request.StandardIds) {
		query["StandardIds"] = request.StandardIds
	}

	if !dara.IsNil(request.Statuses) {
		query["Statuses"] = request.Statuses
	}

	if !dara.IsNil(request.TaskSources) {
		query["TaskSources"] = request.TaskSources
	}

	if !dara.IsNil(request.Types) {
		query["Types"] = request.Types
	}

	if !dara.IsNil(request.Vendors) {
		query["Vendors"] = request.Vendors
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListCheckResult"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListCheckResultResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Display cloud product configuration check rules
//
// @param request - ListCheckRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCheckRuleResponse
func (client *Client) ListCheckRuleWithContext(ctx context.Context, request *ListCheckRuleRequest, runtime *dara.RuntimeOptions) (_result *ListCheckRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListCheckRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListCheckRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # List all effective machines under the rule
//
// @param request - ListCheckRuleInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCheckRuleInstanceResponse
func (client *Client) ListCheckRuleInstanceWithContext(ctx context.Context, request *ListCheckRuleInstanceRequest, runtime *dara.RuntimeOptions) (_result *ListCheckRuleInstanceResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListCheckRuleInstance"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListCheckRuleInstanceResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the standards of configuration checks.
//
// @param request - ListCheckStandardRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCheckStandardResponse
func (client *Client) ListCheckStandardWithContext(ctx context.Context, request *ListCheckStandardRequest, runtime *dara.RuntimeOptions) (_result *ListCheckStandardResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.InstanceIds) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !dara.IsNil(request.InstanceSubTypes) {
		query["InstanceSubTypes"] = request.InstanceSubTypes
	}

	if !dara.IsNil(request.InstanceTypes) {
		query["InstanceTypes"] = request.InstanceTypes
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.TaskSources) {
		query["TaskSources"] = request.TaskSources
	}

	if !dara.IsNil(request.Vendors) {
		query["Vendors"] = request.Vendors
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListCheckStandard"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListCheckStandardResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the types of check items that meet the specified conditions based on the ID of a baseline.
//
// @param request - ListCheckTypesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCheckTypesResponse
func (client *Client) ListCheckTypesWithContext(ctx context.Context, request *ListCheckTypesRequest, runtime *dara.RuntimeOptions) (_result *ListCheckTypesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RiskId) {
		query["RiskId"] = request.RiskId
	}

	if !dara.IsNil(request.ShowChecks) {
		query["ShowChecks"] = request.ShowChecks
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListCheckTypes"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListCheckTypesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the alert settings of assets. By default, the balanced mode is enabled. A detected list of assets can be returned only in strict mode.
//
// @param request - ListClientAlertModeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListClientAlertModeResponse
func (client *Client) ListClientAlertModeWithContext(ctx context.Context, request *ListClientAlertModeRequest, runtime *dara.RuntimeOptions) (_result *ListClientAlertModeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListClientAlertMode"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListClientAlertModeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries custom defense rules.
//
// @param request - ListClientUserDefineRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListClientUserDefineRulesResponse
func (client *Client) ListClientUserDefineRulesWithContext(ctx context.Context, request *ListClientUserDefineRulesRequest, runtime *dara.RuntimeOptions) (_result *ListClientUserDefineRulesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListClientUserDefineRules"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListClientUserDefineRulesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries cloud service assets.
//
// @param request - ListCloudAssetInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCloudAssetInstancesResponse
func (client *Client) ListCloudAssetInstancesWithContext(ctx context.Context, request *ListCloudAssetInstancesRequest, runtime *dara.RuntimeOptions) (_result *ListCloudAssetInstancesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CloudAssetTypes) {
		query["CloudAssetTypes"] = request.CloudAssetTypes
	}

	if !dara.IsNil(request.Criteria) {
		query["Criteria"] = request.Criteria
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.LogicalExp) {
		query["LogicalExp"] = request.LogicalExp
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListCloudAssetInstances"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListCloudAssetInstancesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the synchronization region configurations of other clouds on a site.
//
// @param request - ListCloudVendorRegionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCloudVendorRegionsResponse
func (client *Client) ListCloudVendorRegionsWithContext(ctx context.Context, request *ListCloudVendorRegionsRequest, runtime *dara.RuntimeOptions) (_result *ListCloudVendorRegionsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Vendor) {
		query["Vendor"] = request.Vendor
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListCloudVendorRegions"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListCloudVendorRegionsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the protection status of the container firewall.
//
// @param request - ListClusterCnnfStatusDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListClusterCnnfStatusDetailResponse
func (client *Client) ListClusterCnnfStatusDetailWithContext(ctx context.Context, request *ListClusterCnnfStatusDetailRequest, runtime *dara.RuntimeOptions) (_result *ListClusterCnnfStatusDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterIds) {
		query["ClusterIds"] = request.ClusterIds
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListClusterCnnfStatusDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListClusterCnnfStatusDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the defense rules that are created for a cluster.
//
// @param request - ListClusterInterceptionConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListClusterInterceptionConfigResponse
func (client *Client) ListClusterInterceptionConfigWithContext(ctx context.Context, request *ListClusterInterceptionConfigRequest, runtime *dara.RuntimeOptions) (_result *ListClusterInterceptionConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterCNNFStatus) {
		query["ClusterCNNFStatus"] = request.ClusterCNNFStatus
	}

	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.ClusterName) {
		query["ClusterName"] = request.ClusterName
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListClusterInterceptionConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListClusterInterceptionConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the status of plug-ins on clusters.
//
// @param request - ListClusterPluginInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListClusterPluginInfoResponse
func (client *Client) ListClusterPluginInfoWithContext(ctx context.Context, request *ListClusterPluginInfoRequest, runtime *dara.RuntimeOptions) (_result *ListClusterPluginInfoResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterIds) {
		query["ClusterIds"] = request.ClusterIds
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PluginName) {
		query["PluginName"] = request.PluginName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListClusterPluginInfo"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListClusterPluginInfoResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the detection results of the files extracted from a package.
//
// Description:
//
// You can call this operation to query the detection results of files only if the files are pushed to the cloud for detection and in the form of packages. You can repeatedly query the detection results of files within 5 hours because the results are retained for 5 hours. For more information about how to push a file to the cloud for detection, see the CreateFileDetect operation. For more information about how to query file detection results, see the GetFileDetectResult operation.
//
// The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only hexadecimal MD5 hash values of complete file content are supported. You must calculate the required MD5 hash value before you call this operation.
//
// To calculate the hexadecimal MD5 hash value for a file, you can perform the following steps:
//
// 1\\. Use the MD5 algorithm to encrypt data and generate a 128-bit hash value. You can use a tool such as MessageDigest for Java and the hashlib module for Python.
//
// 2\\. Convert the hash value to a hexadecimal string. You can use a tool such as Codec for Java and the hex() function for Python.
//
// @param request - ListCompressFileDetectResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCompressFileDetectResultResponse
func (client *Client) ListCompressFileDetectResultWithContext(ctx context.Context, request *ListCompressFileDetectResultRequest, runtime *dara.RuntimeOptions) (_result *ListCompressFileDetectResultResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.HashKey) {
		query["HashKey"] = request.HashKey
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListCompressFileDetectResult"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListCompressFileDetectResultResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of rules for non-image program defense.
//
// @param request - ListContainerDefenseRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListContainerDefenseRuleResponse
func (client *Client) ListContainerDefenseRuleWithContext(ctx context.Context, request *ListContainerDefenseRuleRequest, runtime *dara.RuntimeOptions) (_result *ListContainerDefenseRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Conditions) {
		query["Conditions"] = request.Conditions
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.IsDefaultRule) {
		query["IsDefaultRule"] = request.IsDefaultRule
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RuleType) {
		query["RuleType"] = request.RuleType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListContainerDefenseRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListContainerDefenseRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the IDs and names of rules configured for proactive defense for containers.
//
// @param request - ListCriteriaStrategyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCriteriaStrategyResponse
func (client *Client) ListCriteriaStrategyWithContext(ctx context.Context, request *ListCriteriaStrategyRequest, runtime *dara.RuntimeOptions) (_result *ListCriteriaStrategyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.ImageName) {
		query["ImageName"] = request.ImageName
	}

	if !dara.IsNil(request.Label) {
		query["Label"] = request.Label
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.StrategyName) {
		query["StrategyName"] = request.StrategyName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListCriteriaStrategy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListCriteriaStrategyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the risk overview of official Docker Hub images.
//
// @param request - ListDockerhubImageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDockerhubImageResponse
func (client *Client) ListDockerhubImageWithContext(ctx context.Context, request *ListDockerhubImageRequest, runtime *dara.RuntimeOptions) (_result *ListDockerhubImageResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Query) {
		query["Query"] = request.Query
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListDockerhubImage"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListDockerhubImageResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries core file monitoring rules that meet the specified filter condition.
//
// @param request - ListFileProtectEventRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListFileProtectEventResponse
func (client *Client) ListFileProtectEventWithContext(ctx context.Context, request *ListFileProtectEventRequest, runtime *dara.RuntimeOptions) (_result *ListFileProtectEventResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AlertLevels) {
		query["AlertLevels"] = request.AlertLevels
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.InstanceName) {
		query["InstanceName"] = request.InstanceName
	}

	if !dara.IsNil(request.InternetIp) {
		query["InternetIp"] = request.InternetIp
	}

	if !dara.IsNil(request.IntranetIp) {
		query["IntranetIp"] = request.IntranetIp
	}

	if !dara.IsNil(request.Operation) {
		query["Operation"] = request.Operation
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RuleName) {
		query["RuleName"] = request.RuleName
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListFileProtectEvent"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListFileProtectEventResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries information about the Security Center agent installed on servers on which core file monitoring rules take effect. The information includes the installation status of the Security Center agent and whether the core file monitoring feature is supported.
//
// @param request - ListFileProtectPluginStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListFileProtectPluginStatusResponse
func (client *Client) ListFileProtectPluginStatusWithContext(ctx context.Context, request *ListFileProtectPluginStatusRequest, runtime *dara.RuntimeOptions) (_result *ListFileProtectPluginStatusResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.SwitchId) {
		query["SwitchId"] = request.SwitchId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListFileProtectPluginStatus"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListFileProtectPluginStatusResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries core file monitoring rules.
//
// @param request - ListFileProtectRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListFileProtectRuleResponse
func (client *Client) ListFileProtectRuleWithContext(ctx context.Context, request *ListFileProtectRuleRequest, runtime *dara.RuntimeOptions) (_result *ListFileProtectRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AlertLevel) {
		query["AlertLevel"] = request.AlertLevel
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Platform) {
		query["Platform"] = request.Platform
	}

	if !dara.IsNil(request.RuleAction) {
		query["RuleAction"] = request.RuleAction
	}

	if !dara.IsNil(request.RuleName) {
		query["RuleName"] = request.RuleName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListFileProtectRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListFileProtectRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the server groups.
//
// @param request - ListGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListGroupsResponse
func (client *Client) ListGroupsWithContext(ctx context.Context, request *ListGroupsRequest, runtime *dara.RuntimeOptions) (_result *ListGroupsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.NextToken) {
		query["NextToken"] = request.NextToken
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.UseNextToken) {
		query["UseNextToken"] = request.UseNextToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListGroups"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListGroupsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about honeypots.
//
// @param request - ListHoneypotRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHoneypotResponse
func (client *Client) ListHoneypotWithContext(ctx context.Context, request *ListHoneypotRequest, runtime *dara.RuntimeOptions) (_result *ListHoneypotResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.HoneypotIds) {
		query["HoneypotIds"] = request.HoneypotIds
	}

	if !dara.IsNil(request.HoneypotName) {
		query["HoneypotName"] = request.HoneypotName
	}

	if !dara.IsNil(request.NodeId) {
		query["NodeId"] = request.NodeId
	}

	if !dara.IsNil(request.NodeName) {
		query["NodeName"] = request.NodeName
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListHoneypot"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListHoneypotResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about alert events that are generated.
//
// @param request - ListHoneypotAlarmEventsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHoneypotAlarmEventsResponse
func (client *Client) ListHoneypotAlarmEventsWithContext(ctx context.Context, request *ListHoneypotAlarmEventsRequest, runtime *dara.RuntimeOptions) (_result *ListHoneypotAlarmEventsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListHoneypotAlarmEvents"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListHoneypotAlarmEventsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the attacker profile based on the source IP address of the attack.
//
// @param request - ListHoneypotAttackerPortraitRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHoneypotAttackerPortraitResponse
func (client *Client) ListHoneypotAttackerPortraitWithContext(ctx context.Context, request *ListHoneypotAttackerPortraitRequest, runtime *dara.RuntimeOptions) (_result *ListHoneypotAttackerPortraitResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.EndTimeStamp) {
		query["EndTimeStamp"] = request.EndTimeStamp
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.SrcIp) {
		query["SrcIp"] = request.SrcIp
	}

	if !dara.IsNil(request.StartTimeStamp) {
		query["StartTimeStamp"] = request.StartTimeStamp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListHoneypotAttackerPortrait"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListHoneypotAttackerPortraitResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the attack source IP addresses that are used to attack a honeypot.
//
// @param request - ListHoneypotAttackerSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHoneypotAttackerSourceResponse
func (client *Client) ListHoneypotAttackerSourceWithContext(ctx context.Context, request *ListHoneypotAttackerSourceRequest, runtime *dara.RuntimeOptions) (_result *ListHoneypotAttackerSourceResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.EndTimeStamp) {
		query["EndTimeStamp"] = request.EndTimeStamp
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RiskLevelList) {
		query["RiskLevelList"] = request.RiskLevelList
	}

	if !dara.IsNil(request.SrcIp) {
		query["SrcIp"] = request.SrcIp
	}

	if !dara.IsNil(request.StartTimeStamp) {
		query["StartTimeStamp"] = request.StartTimeStamp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListHoneypotAttackerSource"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListHoneypotAttackerSourceResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of an intrusion event in a honeypot.
//
// @param request - ListHoneypotEventFlowsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHoneypotEventFlowsResponse
func (client *Client) ListHoneypotEventFlowsWithContext(ctx context.Context, request *ListHoneypotEventFlowsRequest, runtime *dara.RuntimeOptions) (_result *ListHoneypotEventFlowsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Dealed) {
		query["Dealed"] = request.Dealed
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RequestId) {
		query["RequestId"] = request.RequestId
	}

	if !dara.IsNil(request.SecurityEventId) {
		query["SecurityEventId"] = request.SecurityEventId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListHoneypotEventFlows"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListHoneypotEventFlowsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the intrusion events detected by honeypots.
//
// @param request - ListHoneypotEventsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHoneypotEventsResponse
func (client *Client) ListHoneypotEventsWithContext(ctx context.Context, request *ListHoneypotEventsRequest, runtime *dara.RuntimeOptions) (_result *ListHoneypotEventsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListHoneypotEvents"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListHoneypotEventsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about management nodes.
//
// @param request - ListHoneypotNodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHoneypotNodeResponse
func (client *Client) ListHoneypotNodeWithContext(ctx context.Context, request *ListHoneypotNodeRequest, runtime *dara.RuntimeOptions) (_result *ListHoneypotNodeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.NodeId) {
		query["NodeId"] = request.NodeId
	}

	if !dara.IsNil(request.NodeName) {
		query["NodeName"] = request.NodeName
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListHoneypotNode"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListHoneypotNodeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries honeypot templates.
//
// @param request - ListHoneypotPresetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHoneypotPresetResponse
func (client *Client) ListHoneypotPresetWithContext(ctx context.Context, request *ListHoneypotPresetRequest, runtime *dara.RuntimeOptions) (_result *ListHoneypotPresetResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.HoneypotImageName) {
		query["HoneypotImageName"] = request.HoneypotImageName
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.NodeId) {
		query["NodeId"] = request.NodeId
	}

	if !dara.IsNil(request.NodeName) {
		query["NodeName"] = request.NodeName
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.PresetName) {
		query["PresetName"] = request.PresetName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListHoneypotPreset"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListHoneypotPresetResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries probes.
//
// @param request - ListHoneypotProbeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHoneypotProbeResponse
func (client *Client) ListHoneypotProbeWithContext(ctx context.Context, request *ListHoneypotProbeRequest, runtime *dara.RuntimeOptions) (_result *ListHoneypotProbeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.DisplayName) {
		query["DisplayName"] = request.DisplayName
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.ProbeStatus) {
		query["ProbeStatus"] = request.ProbeStatus
	}

	if !dara.IsNil(request.ProbeType) {
		query["ProbeType"] = request.ProbeType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListHoneypotProbe"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListHoneypotProbeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询已安装的探针
//
// @param request - ListHoneypotProbeUuidRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHoneypotProbeUuidResponse
func (client *Client) ListHoneypotProbeUuidWithContext(ctx context.Context, request *ListHoneypotProbeUuidRequest, runtime *dara.RuntimeOptions) (_result *ListHoneypotProbeUuidResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ControlNodeId) {
		query["ControlNodeId"] = request.ControlNodeId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.ProbeType) {
		query["ProbeType"] = request.ProbeType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListHoneypotProbeUuid"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListHoneypotProbeUuidResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the types of risky image build commands.
//
// @param request - ListImageBuildRiskItemRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListImageBuildRiskItemResponse
func (client *Client) ListImageBuildRiskItemWithContext(ctx context.Context, request *ListImageBuildRiskItemRequest, runtime *dara.RuntimeOptions) (_result *ListImageBuildRiskItemResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListImageBuildRiskItem"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListImageBuildRiskItemResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Query Image Registry Extended Information.
//
// @param request - ListImageRegistryExtraRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListImageRegistryExtraResponse
func (client *Client) ListImageRegistryExtraWithContext(ctx context.Context, request *ListImageRegistryExtraRequest, runtime *dara.RuntimeOptions) (_result *ListImageRegistryExtraResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.RegistryId) {
		query["RegistryId"] = request.RegistryId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListImageRegistryExtra"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListImageRegistryExtraResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// The region ID of the image.
//
// @param request - ListImageRegistryRegionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListImageRegistryRegionResponse
func (client *Client) ListImageRegistryRegionWithContext(ctx context.Context, request *ListImageRegistryRegionRequest, runtime *dara.RuntimeOptions) (_result *ListImageRegistryRegionResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListImageRegistryRegion"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListImageRegistryRegionResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries security information about a container image.
//
// @param request - ListImageRiskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListImageRiskResponse
func (client *Client) ListImageRiskWithContext(ctx context.Context, request *ListImageRiskRequest, runtime *dara.RuntimeOptions) (_result *ListImageRiskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.ImageName) {
		query["ImageName"] = request.ImageName
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListImageRisk"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListImageRiskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the asset types and asset subtypes for configuration assessment.
//
// @param request - ListInstanceCatalogRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListInstanceCatalogResponse
func (client *Client) ListInstanceCatalogWithContext(ctx context.Context, request *ListInstanceCatalogRequest, runtime *dara.RuntimeOptions) (_result *ListInstanceCatalogResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.OnlyCustom) {
		query["OnlyCustom"] = request.OnlyCustom
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.RequirementIds) {
		query["RequirementIds"] = request.RequirementIds
	}

	if !dara.IsNil(request.StandardIds) {
		query["StandardIds"] = request.StandardIds
	}

	if !dara.IsNil(request.TaskSources) {
		query["TaskSources"] = request.TaskSources
	}

	if !dara.IsNil(request.Types) {
		query["Types"] = request.Types
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListInstanceCatalog"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListInstanceCatalogResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the risk levels of instances.
//
// @param request - ListInstanceRiskLevelsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListInstanceRiskLevelsResponse
func (client *Client) ListInstanceRiskLevelsWithContext(ctx context.Context, request *ListInstanceRiskLevelsRequest, runtime *dara.RuntimeOptions) (_result *ListInstanceRiskLevelsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.InstanceList) {
		query["InstanceList"] = request.InstanceList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListInstanceRiskLevels"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListInstanceRiskLevelsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics about risks in instances.
//
// @param request - ListInstanceRiskNumRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListInstanceRiskNumResponse
func (client *Client) ListInstanceRiskNumWithContext(ctx context.Context, request *ListInstanceRiskNumRequest, runtime *dara.RuntimeOptions) (_result *ListInstanceRiskNumResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.InstanceList) {
		query["InstanceList"] = request.InstanceList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListInstanceRiskNum"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListInstanceRiskNumResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the alerts generated by defense rules.
//
// @param request - ListInterceptionHistoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListInterceptionHistoryResponse
func (client *Client) ListInterceptionHistoryWithContext(ctx context.Context, request *ListInterceptionHistoryRequest, runtime *dara.RuntimeOptions) (_result *ListInterceptionHistoryResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.HistoryName) {
		query["HistoryName"] = request.HistoryName
	}

	if !dara.IsNil(request.InterceptionTypes) {
		query["InterceptionTypes"] = request.InterceptionTypes
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListInterceptionHistory"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListInterceptionHistoryResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries defense rules that are configured for the container firewall feature.
//
// @param request - ListInterceptionRulePageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListInterceptionRulePageResponse
func (client *Client) ListInterceptionRulePageWithContext(ctx context.Context, request *ListInterceptionRulePageRequest, runtime *dara.RuntimeOptions) (_result *ListInterceptionRulePageResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.Criteria) {
		query["Criteria"] = request.Criteria
	}

	if !dara.IsNil(request.CriteriaType) {
		query["CriteriaType"] = request.CriteriaType
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListInterceptionRulePage"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListInterceptionRulePageResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the network objects that are protected by the container firewall feature.
//
// @param request - ListInterceptionTargetPageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListInterceptionTargetPageResponse
func (client *Client) ListInterceptionTargetPageWithContext(ctx context.Context, request *ListInterceptionTargetPageRequest, runtime *dara.RuntimeOptions) (_result *ListInterceptionTargetPageResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.ImageList) {
		query["ImageList"] = request.ImageList
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.TagList) {
		query["TagList"] = request.TagList
	}

	if !dara.IsNil(request.TargetName) {
		query["TargetName"] = request.TargetName
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListInterceptionTargetPage"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListInterceptionTargetPageResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about Kubernetes clusters that are added to Security Center.
//
// Description:
//
// You can use this operation to query the access information about Kubernetes clusters.
//
// @param request - ListK8sAccessInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListK8sAccessInfoResponse
func (client *Client) ListK8sAccessInfoWithContext(ctx context.Context, request *ListK8sAccessInfoRequest, runtime *dara.RuntimeOptions) (_result *ListK8sAccessInfoResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AliyunYundunGatewayApiName) {
		query["AliyunYundunGatewayApiName"] = request.AliyunYundunGatewayApiName
	}

	if !dara.IsNil(request.AliyunYundunGatewayPopName) {
		query["AliyunYundunGatewayPopName"] = request.AliyunYundunGatewayPopName
	}

	if !dara.IsNil(request.AliyunYundunGatewayProjectName) {
		query["AliyunYundunGatewayProjectName"] = request.AliyunYundunGatewayProjectName
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListK8sAccessInfo"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListK8sAccessInfoResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Paginate to query the application list.
//
// @param request - ListMachineAppsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMachineAppsResponse
func (client *Client) ListMachineAppsWithContext(ctx context.Context, request *ListMachineAppsRequest, runtime *dara.RuntimeOptions) (_result *ListMachineAppsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.AppRegionId) {
		query["AppRegionId"] = request.AppRegionId
	}

	if !dara.IsNil(request.AuthVersion) {
		query["AuthVersion"] = request.AuthVersion
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.ResourceDirectoryUid) {
		query["ResourceDirectoryUid"] = request.ResourceDirectoryUid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListMachineApps"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListMachineAppsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the alert whitelist rules of sensitive files that are detected by using the agentless detection feature.
//
// @param request - ListMaliciousFileWhitelistConfigsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMaliciousFileWhitelistConfigsResponse
func (client *Client) ListMaliciousFileWhitelistConfigsWithContext(ctx context.Context, request *ListMaliciousFileWhitelistConfigsRequest, runtime *dara.RuntimeOptions) (_result *ListMaliciousFileWhitelistConfigsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.EventName) {
		query["EventName"] = request.EventName
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListMaliciousFileWhitelistConfigs"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListMaliciousFileWhitelistConfigsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries alerts that are generated for malicious files.
//
// @param request - ListObjectScanEventRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListObjectScanEventResponse
func (client *Client) ListObjectScanEventWithContext(ctx context.Context, request *ListObjectScanEventRequest, runtime *dara.RuntimeOptions) (_result *ListObjectScanEventResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BucketName) {
		query["BucketName"] = request.BucketName
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.EventName) {
		query["EventName"] = request.EventName
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Md5) {
		query["Md5"] = request.Md5
	}

	if !dara.IsNil(request.OssKey) {
		query["OssKey"] = request.OssKey
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.ParentEventId) {
		query["ParentEventId"] = request.ParentEventId
	}

	if !dara.IsNil(request.RiskLevel) {
		query["RiskLevel"] = request.RiskLevel
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	if !dara.IsNil(request.TimeEnd) {
		query["TimeEnd"] = request.TimeEnd
	}

	if !dara.IsNil(request.TimeStart) {
		query["TimeStart"] = request.TimeStart
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListObjectScanEvent"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListObjectScanEventResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries at-risk image blocking rules.
//
// @param request - ListOpaClusterStrategyNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListOpaClusterStrategyNewResponse
func (client *Client) ListOpaClusterStrategyNewWithContext(ctx context.Context, request *ListOpaClusterStrategyNewRequest, runtime *dara.RuntimeOptions) (_result *ListOpaClusterStrategyNewResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.ImageName) {
		query["ImageName"] = request.ImageName
	}

	if !dara.IsNil(request.Label) {
		query["Label"] = request.Label
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.StrategyName) {
		query["StrategyName"] = request.StrategyName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListOpaClusterStrategyNew"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListOpaClusterStrategyNewResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Query the list of instance results under the operation check item
//
// Description:
//
// This interface is only available to users who have purchased the cloud platform configuration check authorization or enabled the pay-as-you-go service for cloud platform configuration checks.
//
// @param request - ListOperationCheckRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListOperationCheckResponse
func (client *Client) ListOperationCheckWithContext(ctx context.Context, request *ListOperationCheckRequest, runtime *dara.RuntimeOptions) (_result *ListOperationCheckResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListOperationCheck"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListOperationCheckResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of operation tasks.
//
// Description:
//
// You can query only operation tasks.
//
// @param request - ListOperationProcessRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListOperationProcessResponse
func (client *Client) ListOperationProcessWithContext(ctx context.Context, request *ListOperationProcessRequest, runtime *dara.RuntimeOptions) (_result *ListOperationProcessResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.StatusCodes) {
		query["StatusCodes"] = request.StatusCodes
	}

	if !dara.IsNil(request.TaskIds) {
		query["TaskIds"] = request.TaskIds
	}

	if !dara.IsNil(request.TaskSources) {
		query["TaskSources"] = request.TaskSources
	}

	if !dara.IsNil(request.TaskTypes) {
		query["TaskTypes"] = request.TaskTypes
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListOperationProcess"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListOperationProcessResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Query operation task sub-task list.
//
// Description:
//
// You can query only operation subtasks.
//
// @param request - ListOperationProcessDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListOperationProcessDetailResponse
func (client *Client) ListOperationProcessDetailWithContext(ctx context.Context, request *ListOperationProcessDetailRequest, runtime *dara.RuntimeOptions) (_result *ListOperationProcessDetailResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.StatusCodes) {
		query["StatusCodes"] = request.StatusCodes
	}

	if !dara.IsNil(request.TaskIds) {
		query["TaskIds"] = request.TaskIds
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListOperationProcessDetail"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListOperationProcessDetailResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Display the list of cloud product configuration check, repair, and rollback tasks
//
// @param request - ListOperationTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListOperationTaskResponse
func (client *Client) ListOperationTaskWithContext(ctx context.Context, request *ListOperationTaskRequest, runtime *dara.RuntimeOptions) (_result *ListOperationTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListOperationTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListOperationTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries Object Storage Service (OSS) buckets.
//
// @param request - ListOssBucketRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListOssBucketResponse
func (client *Client) ListOssBucketWithContext(ctx context.Context, request *ListOssBucketRequest, runtime *dara.RuntimeOptions) (_result *ListOssBucketResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BucketName) {
		query["BucketName"] = request.BucketName
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListOssBucket"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListOssBucketResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the risk information of an Object Storage Service (OSS) bucket.
//
// @param request - ListOssBucketScanInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListOssBucketScanInfoResponse
func (client *Client) ListOssBucketScanInfoWithContext(ctx context.Context, request *ListOssBucketScanInfoRequest, runtime *dara.RuntimeOptions) (_result *ListOssBucketScanInfoResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BucketName) {
		query["BucketName"] = request.BucketName
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.FuzzBucketName) {
		query["FuzzBucketName"] = request.FuzzBucketName
	}

	if !dara.IsNil(request.HasRisk) {
		query["HasRisk"] = request.HasRisk
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListOssBucketScanInfo"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListOssBucketScanInfoResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configuration of an Object Storage Service (OSS) file detection policy.
//
// @param request - ListOssScanConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListOssScanConfigResponse
func (client *Client) ListOssScanConfigWithContext(ctx context.Context, request *ListOssScanConfigRequest, runtime *dara.RuntimeOptions) (_result *ListOssScanConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListOssScanConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListOssScanConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about plug-ins on a server.
//
// @param tmpReq - ListPluginForUuidRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPluginForUuidResponse
func (client *Client) ListPluginForUuidWithContext(ctx context.Context, tmpReq *ListPluginForUuidRequest, runtime *dara.RuntimeOptions) (_result *ListPluginForUuidResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &ListPluginForUuidShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.Types) {
		request.TypesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Types, dara.String("Types"), dara.String("simple"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.TypesShrink) {
		query["Types"] = request.TypesShrink
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListPluginForUuid"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListPluginForUuidResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the security risks of a pod.
//
// @param request - ListPodRiskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPodRiskResponse
func (client *Client) ListPodRiskWithContext(ctx context.Context, request *ListPodRiskRequest, runtime *dara.RuntimeOptions) (_result *ListPodRiskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.PodName) {
		query["PodName"] = request.PodName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListPodRisk"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListPodRiskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries image repositories.
//
// @param request - ListPrivateRegistryListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPrivateRegistryListResponse
func (client *Client) ListPrivateRegistryListWithContext(ctx context.Context, request *ListPrivateRegistryListRequest, runtime *dara.RuntimeOptions) (_result *ListPrivateRegistryListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.RegistryType) {
		query["RegistryType"] = request.RegistryType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListPrivateRegistryList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListPrivateRegistryListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of image repositories of each type.
//
// @param request - ListPrivateRegistryTypeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPrivateRegistryTypeResponse
func (client *Client) ListPrivateRegistryTypeWithContext(ctx context.Context, request *ListPrivateRegistryTypeRequest, runtime *dara.RuntimeOptions) (_result *ListPrivateRegistryTypeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListPrivateRegistryType"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListPrivateRegistryTypeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Query the details of a release batch for upgrade.
//
// @param request - ListPublishBatchRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPublishBatchResponse
func (client *Client) ListPublishBatchWithContext(ctx context.Context, request *ListPublishBatchRequest, runtime *dara.RuntimeOptions) (_result *ListPublishBatchResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BatchName) {
		query["BatchName"] = request.BatchName
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.UpgradeVersion) {
		query["UpgradeVersion"] = request.UpgradeVersion
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListPublishBatch"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListPublishBatchResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the network objects based on which a specified cluster is protected.
//
// @param request - ListRuleTargetAllRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRuleTargetAllResponse
func (client *Client) ListRuleTargetAllWithContext(ctx context.Context, request *ListRuleTargetAllRequest, runtime *dara.RuntimeOptions) (_result *ListRuleTargetAllResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListRuleTargetAll"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListRuleTargetAllResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries rules for container tamper-proofing.
//
// @param request - ListSasContainerWebDefenseRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSasContainerWebDefenseRuleResponse
func (client *Client) ListSasContainerWebDefenseRuleWithContext(ctx context.Context, request *ListSasContainerWebDefenseRuleRequest, runtime *dara.RuntimeOptions) (_result *ListSasContainerWebDefenseRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Criteria) {
		query["Criteria"] = request.Criteria
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.LogicalExp) {
		query["LogicalExp"] = request.LogicalExp
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListSasContainerWebDefenseRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListSasContainerWebDefenseRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Query the list of supported cloud products for attacks.
//
// @param request - ListSupportAttackPathAssetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSupportAttackPathAssetResponse
func (client *Client) ListSupportAttackPathAssetWithContext(ctx context.Context, request *ListSupportAttackPathAssetRequest, runtime *dara.RuntimeOptions) (_result *ListSupportAttackPathAssetResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.NodeType) {
		query["NodeType"] = request.NodeType
	}

	if !dara.IsNil(request.PathName) {
		query["PathName"] = request.PathName
	}

	if !dara.IsNil(request.PathType) {
		query["PathType"] = request.PathType
	}

	if !dara.IsNil(request.SupportType) {
		query["SupportType"] = request.SupportType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListSupportAttackPathAsset"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListSupportAttackPathAssetResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details about the aggregation types of system defense rules.
//
// @param request - ListSystemAggregationRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSystemAggregationRulesResponse
func (client *Client) ListSystemAggregationRulesWithContext(ctx context.Context, request *ListSystemAggregationRulesRequest, runtime *dara.RuntimeOptions) (_result *ListSystemAggregationRulesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListSystemAggregationRules"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListSystemAggregationRulesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries system defense rules.
//
// @param request - ListSystemClientRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSystemClientRulesResponse
func (client *Client) ListSystemClientRulesWithContext(ctx context.Context, request *ListSystemClientRulesRequest, runtime *dara.RuntimeOptions) (_result *ListSystemClientRulesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AggregationIds) {
		query["AggregationIds"] = request.AggregationIds
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.IsContainer) {
		query["IsContainer"] = request.IsContainer
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RuleName) {
		query["RuleName"] = request.RuleName
	}

	if !dara.IsNil(request.RuleTypes) {
		query["RuleTypes"] = request.RuleTypes
	}

	if !dara.IsNil(request.SystemType) {
		query["SystemType"] = request.SystemType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListSystemClientRules"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListSystemClientRulesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the aggregation types of system defense rules.
//
// @param request - ListSystemRuleAggregationTypesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSystemRuleAggregationTypesResponse
func (client *Client) ListSystemRuleAggregationTypesWithContext(ctx context.Context, request *ListSystemRuleAggregationTypesRequest, runtime *dara.RuntimeOptions) (_result *ListSystemRuleAggregationTypesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListSystemRuleAggregationTypes"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListSystemRuleAggregationTypesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Query Targets by Batch
//
// @param request - ListTargetByBatchRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTargetByBatchResponse
func (client *Client) ListTargetByBatchWithContext(ctx context.Context, request *ListTargetByBatchRequest, runtime *dara.RuntimeOptions) (_result *ListTargetByBatchResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BatchId) {
		query["BatchId"] = request.BatchId
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.OperationBase) {
		query["OperationBase"] = request.OperationBase
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListTargetByBatch"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListTargetByBatchResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries tasks that are not complete by task type.
//
// @param request - ListUnfinishedOnceTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListUnfinishedOnceTaskResponse
func (client *Client) ListUnfinishedOnceTaskWithContext(ctx context.Context, request *ListUnfinishedOnceTaskRequest, runtime *dara.RuntimeOptions) (_result *ListUnfinishedOnceTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Target) {
		query["Target"] = request.Target
	}

	if !dara.IsNil(request.TaskType) {
		query["TaskType"] = request.TaskType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListUnfinishedOnceTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListUnfinishedOnceTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about the servers whose Security Center agent is not installed.
//
// @param request - ListUninstallAegisMachinesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListUninstallAegisMachinesResponse
func (client *Client) ListUninstallAegisMachinesWithContext(ctx context.Context, request *ListUninstallAegisMachinesRequest, runtime *dara.RuntimeOptions) (_result *ListUninstallAegisMachinesResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Os) {
		query["Os"] = request.Os
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionIdStr) {
		query["RegionIdStr"] = request.RegionIdStr
	}

	if !dara.IsNil(request.RegionNo) {
		query["RegionNo"] = request.RegionNo
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Vendor) {
		query["Vendor"] = request.Vendor
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListUninstallAegisMachines"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListUninstallAegisMachinesResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Get VPC Data
//
// @param request - ListUserVpcRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListUserVpcResponse
func (client *Client) ListUserVpcWithContext(ctx context.Context, request *ListUserVpcRequest, runtime *dara.RuntimeOptions) (_result *ListUserVpcResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.K8sRegionId) {
		query["K8sRegionId"] = request.K8sRegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListUserVpc"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListUserVpcResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Query the list of instance UUIDs based on the application ID.
//
// @param request - ListUuidsByAppIdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListUuidsByAppIdResponse
func (client *Client) ListUuidsByAppIdWithContext(ctx context.Context, request *ListUuidsByAppIdRequest, runtime *dara.RuntimeOptions) (_result *ListUuidsByAppIdResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.AppRegionId) {
		query["AppRegionId"] = request.AppRegionId
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.ResourceDirectoryUid) {
		query["ResourceDirectoryUid"] = request.ResourceDirectoryUid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListUuidsByAppId"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListUuidsByAppIdResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries protected assets by using the paths to specific web directories.
//
// @param request - ListUuidsByWebPathRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListUuidsByWebPathResponse
func (client *Client) ListUuidsByWebPathWithContext(ctx context.Context, request *ListUuidsByWebPathRequest, runtime *dara.RuntimeOptions) (_result *ListUuidsByWebPathResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	if !dara.IsNil(request.WebPath) {
		query["WebPath"] = request.WebPath
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListUuidsByWebPath"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListUuidsByWebPathResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries servers on which virus detection and removal tasks are performed.
//
// @param request - ListVirusScanMachineRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListVirusScanMachineResponse
func (client *Client) ListVirusScanMachineWithContext(ctx context.Context, request *ListVirusScanMachineRequest, runtime *dara.RuntimeOptions) (_result *ListVirusScanMachineResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListVirusScanMachine"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListVirusScanMachineResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the alert events that are generated for viruses detected on a server.
//
// @param request - ListVirusScanMachineEventRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListVirusScanMachineEventResponse
func (client *Client) ListVirusScanMachineEventWithContext(ctx context.Context, request *ListVirusScanMachineEventRequest, runtime *dara.RuntimeOptions) (_result *ListVirusScanMachineEventResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.OperateTaskId) {
		query["OperateTaskId"] = request.OperateTaskId
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListVirusScanMachineEvent"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListVirusScanMachineEventResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries virus scan tasks based on conditions such as the task type, task status, and server information.
//
// @param request - ListVirusScanTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListVirusScanTaskResponse
func (client *Client) ListVirusScanTaskWithContext(ctx context.Context, request *ListVirusScanTaskRequest, runtime *dara.RuntimeOptions) (_result *ListVirusScanTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.InternetIp) {
		query["InternetIp"] = request.InternetIp
	}

	if !dara.IsNil(request.IntranetIp) {
		query["IntranetIp"] = request.IntranetIp
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.MachineName) {
		query["MachineName"] = request.MachineName
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RootTask) {
		query["RootTask"] = request.RootTask
	}

	if !dara.IsNil(request.RootTaskId) {
		query["RootTaskId"] = request.RootTaskId
	}

	if !dara.IsNil(request.ScanType) {
		query["ScanType"] = request.ScanType
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	if !dara.IsNil(request.StatusList) {
		query["StatusList"] = request.StatusList
	}

	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListVirusScanTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListVirusScanTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the existing configurations of vulnerabilities that can be automatically fixed.
//
// @param request - ListVulAutoRepairConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListVulAutoRepairConfigResponse
func (client *Client) ListVulAutoRepairConfigWithContext(ctx context.Context, request *ListVulAutoRepairConfigRequest, runtime *dara.RuntimeOptions) (_result *ListVulAutoRepairConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AliasName) {
		query["AliasName"] = request.AliasName
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListVulAutoRepairConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListVulAutoRepairConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the global configurations of vulnerability detection.
//
// @param request - ListVulGlobalConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListVulGlobalConfigResponse
func (client *Client) ListVulGlobalConfigWithContext(ctx context.Context, request *ListVulGlobalConfigRequest, runtime *dara.RuntimeOptions) (_result *ListVulGlobalConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ConfigKey) {
		query["ConfigKey"] = request.ConfigKey
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListVulGlobalConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListVulGlobalConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Marks members for multi-account management. You can call this operation to mark selected members as followed. In the Security Center console, the drop-down list above the left-side navigation pane displays the followed members.
//
// @param request - MarkMonitorAccountsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return MarkMonitorAccountsResponse
func (client *Client) MarkMonitorAccountsWithContext(ctx context.Context, request *MarkMonitorAccountsRequest, runtime *dara.RuntimeOptions) (_result *MarkMonitorAccountsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AccountIds) {
		query["AccountIds"] = request.AccountIds
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("MarkMonitorAccounts"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &MarkMonitorAccountsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Handles AccessKey pair leaks.
//
// @param request - ModifyAccessKeyLeakDealRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyAccessKeyLeakDealResponse
func (client *Client) ModifyAccessKeyLeakDealWithContext(ctx context.Context, request *ModifyAccessKeyLeakDealRequest, runtime *dara.RuntimeOptions) (_result *ModifyAccessKeyLeakDealResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.IdList) {
		query["IdList"] = request.IdList
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyAccessKeyLeakDeal"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyAccessKeyLeakDealResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a defense rule against brute-force attacks.
//
// @param tmpReq - ModifyAntiBruteForceRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyAntiBruteForceRuleResponse
func (client *Client) ModifyAntiBruteForceRuleWithContext(ctx context.Context, tmpReq *ModifyAntiBruteForceRuleRequest, runtime *dara.RuntimeOptions) (_result *ModifyAntiBruteForceRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &ModifyAntiBruteForceRuleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.ProtocolType) {
		request.ProtocolTypeShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ProtocolType, dara.String("ProtocolType"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.DefaultRule) {
		query["DefaultRule"] = request.DefaultRule
	}

	if !dara.IsNil(request.FailCount) {
		query["FailCount"] = request.FailCount
	}

	if !dara.IsNil(request.ForbiddenTime) {
		query["ForbiddenTime"] = request.ForbiddenTime
	}

	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.ProtocolTypeShrink) {
		query["ProtocolType"] = request.ProtocolTypeShrink
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Span) {
		query["Span"] = request.Span
	}

	if !dara.IsNil(request.UuidList) {
		query["UuidList"] = request.UuidList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyAntiBruteForceRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyAntiBruteForceRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures a scan cycle for application vulnerabilities.
//
// @param request - ModifyAppVulScanCycleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyAppVulScanCycleResponse
func (client *Client) ModifyAppVulScanCycleWithContext(ctx context.Context, request *ModifyAppVulScanCycleRequest, runtime *dara.RuntimeOptions) (_result *ModifyAppVulScanCycleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Cycle) {
		query["Cycle"] = request.Cycle
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyAppVulScanCycle"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyAppVulScanCycleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the configurations for cleaning offline hosts whose provider cannot be identified.
//
// @param request - ModifyAssetCleanConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyAssetCleanConfigResponse
func (client *Client) ModifyAssetCleanConfigWithContext(ctx context.Context, request *ModifyAssetCleanConfigRequest, runtime *dara.RuntimeOptions) (_result *ModifyAssetCleanConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AssetCleanConfigs) {
		query["AssetCleanConfigs"] = request.AssetCleanConfigs
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyAssetCleanConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyAssetCleanConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Changes the server group to which specified servers belong.
//
// Description:
//
// You can call the ModifyAssetGroup operation to change the server group to which one or more servers belong. After you create a server group by calling the [CreateOrUpdateAssetGroup](~~CreateOrUpdateAssetGroup~~) operation, you can call the ModifyAssetGroup operation to change the server group to which your servers belong.
//
// ### Limits
//
// You can call this API operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ModifyAssetGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyAssetGroupResponse
func (client *Client) ModifyAssetGroupWithContext(ctx context.Context, request *ModifyAssetGroupRequest, runtime *dara.RuntimeOptions) (_result *ModifyAssetGroupResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyAssetGroup"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyAssetGroupResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the importance of an asset.
//
// @param request - ModifyAssetImportantRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyAssetImportantResponse
func (client *Client) ModifyAssetImportantWithContext(ctx context.Context, request *ModifyAssetImportantRequest, runtime *dara.RuntimeOptions) (_result *ModifyAssetImportantResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ImportantCode) {
		query["ImportantCode"] = request.ImportantCode
	}

	if !dara.IsNil(request.UuidList) {
		query["UuidList"] = request.UuidList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyAssetImportant"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyAssetImportantResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the information about a witness that is created by using the container signature feature.
//
// @param request - ModifyAttestorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyAttestorResponse
func (client *Client) ModifyAttestorWithContext(ctx context.Context, request *ModifyAttestorRequest, runtime *dara.RuntimeOptions) (_result *ModifyAttestorResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.KeyId) {
		query["KeyId"] = request.KeyId
	}

	if !dara.IsNil(request.KeyRegionId) {
		query["KeyRegionId"] = request.KeyRegionId
	}

	if !dara.IsNil(request.KeyVersionId) {
		query["KeyVersionId"] = request.KeyVersionId
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyAttestor"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyAttestorResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Specifies the number of days after which a detected vulnerability is automatically deleted.
//
// @param request - ModifyAutoDelConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyAutoDelConfigResponse
func (client *Client) ModifyAutoDelConfigWithContext(ctx context.Context, request *ModifyAutoDelConfigRequest, runtime *dara.RuntimeOptions) (_result *ModifyAutoDelConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Days) {
		query["Days"] = request.Days
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyAutoDelConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyAutoDelConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies an anti-ransomware policy.
//
// @param tmpReq - ModifyBackupPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyBackupPolicyResponse
func (client *Client) ModifyBackupPolicyWithContext(ctx context.Context, tmpReq *ModifyBackupPolicyRequest, runtime *dara.RuntimeOptions) (_result *ModifyBackupPolicyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &ModifyBackupPolicyShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.Policy) {
		request.PolicyShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Policy, dara.String("Policy"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.PolicyShrink) {
		query["Policy"] = request.PolicyShrink
	}

	if !dara.IsNil(request.PolicyRegionId) {
		query["PolicyRegionId"] = request.PolicyRegionId
	}

	if !dara.IsNil(request.PolicyVersion) {
		query["PolicyVersion"] = request.PolicyVersion
	}

	if !dara.IsNil(request.UuidList) {
		query["UuidList"] = request.UuidList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyBackupPolicy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyBackupPolicyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables or disables an anti-ransomware policy.
//
// @param request - ModifyBackupPolicyStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyBackupPolicyStatusResponse
func (client *Client) ModifyBackupPolicyStatusWithContext(ctx context.Context, request *ModifyBackupPolicyStatusRequest, runtime *dara.RuntimeOptions) (_result *ModifyBackupPolicyStatusResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.PolicyVersion) {
		query["PolicyVersion"] = request.PolicyVersion
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyBackupPolicyStatus"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyBackupPolicyStatusResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modify Container Image Signature Security Policy.
//
// @param request - ModifyBinarySecurityPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyBinarySecurityPolicyResponse
func (client *Client) ModifyBinarySecurityPolicyWithContext(ctx context.Context, request *ModifyBinarySecurityPolicyRequest, runtime *dara.RuntimeOptions) (_result *ModifyBinarySecurityPolicyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Clusters) {
		query["Clusters"] = request.Clusters
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.Policy) {
		query["Policy"] = request.Policy
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyBinarySecurityPolicy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyBinarySecurityPolicyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Modify the rule settings for cloud product configuration checks
//
// @param request - ModifyCheckRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyCheckRuleResponse
func (client *Client) ModifyCheckRuleWithContext(ctx context.Context, request *ModifyCheckRuleRequest, runtime *dara.RuntimeOptions) (_result *ModifyCheckRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AddInstanceList) {
		query["AddInstanceList"] = request.AddInstanceList
	}

	if !dara.IsNil(request.DeleteInstanceList) {
		query["DeleteInstanceList"] = request.DeleteInstanceList
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.RuleId) {
		query["RuleId"] = request.RuleId
	}

	if !dara.IsNil(request.RuleType) {
		query["RuleType"] = request.RuleType
	}

	if !dara.IsNil(request.ScopeType) {
		query["ScopeType"] = request.ScopeType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyCheckRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyCheckRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes all logs that occupy your log storage.
//
// Description:
//
// Deleted logs cannot be restored. Before you call this operation to delete all logs and free up log storage, we recommend that you export and save your logs to your computer.
//
// @param request - ModifyClearLogstoreStorageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyClearLogstoreStorageResponse
func (client *Client) ModifyClearLogstoreStorageWithContext(ctx context.Context, request *ModifyClearLogstoreStorageRequest, runtime *dara.RuntimeOptions) (_result *ModifyClearLogstoreStorageResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.UserLogStore) {
		query["UserLogStore"] = request.UserLogStore
	}

	if !dara.IsNil(request.UserProject) {
		query["UserProject"] = request.UserProject
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyClearLogstoreStorage"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyClearLogstoreStorageResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the resource configurations of the Security Center agent.
//
// @param request - ModifyClientConfSetupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyClientConfSetupResponse
func (client *Client) ModifyClientConfSetupWithContext(ctx context.Context, request *ModifyClientConfSetupRequest, runtime *dara.RuntimeOptions) (_result *ModifyClientConfSetupResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.StrategyConfig) {
		query["StrategyConfig"] = request.StrategyConfig
	}

	if !dara.IsNil(request.StrategyTag) {
		query["StrategyTag"] = request.StrategyTag
	}

	if !dara.IsNil(request.StrategyTagValue) {
		query["StrategyTagValue"] = request.StrategyTagValue
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyClientConfSetup"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyClientConfSetupResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies an agent configuration policy.
//
// @param request - ModifyClientConfStrategyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyClientConfStrategyResponse
func (client *Client) ModifyClientConfStrategyWithContext(ctx context.Context, request *ModifyClientConfStrategyRequest, runtime *dara.RuntimeOptions) (_result *ModifyClientConfStrategyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Tag) {
		query["Tag"] = request.Tag
	}

	if !dara.IsNil(request.TagExt) {
		query["TagExt"] = request.TagExt
	}

	if !dara.IsNil(request.TagValue) {
		query["TagValue"] = request.TagValue
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyClientConfStrategy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyClientConfStrategyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a custom defense rule.
//
// @param request - ModifyClientUserDefineRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyClientUserDefineRuleResponse
func (client *Client) ModifyClientUserDefineRuleWithContext(ctx context.Context, request *ModifyClientUserDefineRuleRequest, runtime *dara.RuntimeOptions) (_result *ModifyClientUserDefineRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ActionType) {
		query["ActionType"] = request.ActionType
	}

	if !dara.IsNil(request.Cmdline) {
		query["Cmdline"] = request.Cmdline
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.FilePath) {
		query["FilePath"] = request.FilePath
	}

	if !dara.IsNil(request.IP) {
		query["IP"] = request.IP
	}

	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.Md5List) {
		query["Md5List"] = request.Md5List
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.NewFilePath) {
		query["NewFilePath"] = request.NewFilePath
	}

	if !dara.IsNil(request.ParentCmdline) {
		query["ParentCmdline"] = request.ParentCmdline
	}

	if !dara.IsNil(request.ParentProcPath) {
		query["ParentProcPath"] = request.ParentProcPath
	}

	if !dara.IsNil(request.Platform) {
		query["Platform"] = request.Platform
	}

	if !dara.IsNil(request.Port) {
		query["Port"] = request.Port
	}

	if !dara.IsNil(request.PortStr) {
		query["PortStr"] = request.PortStr
	}

	if !dara.IsNil(request.ProcPath) {
		query["ProcPath"] = request.ProcPath
	}

	if !dara.IsNil(request.RegistryContent) {
		query["RegistryContent"] = request.RegistryContent
	}

	if !dara.IsNil(request.RegistryKey) {
		query["RegistryKey"] = request.RegistryKey
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyClientUserDefineRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyClientUserDefineRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the configuration of the AccessKey pair for a third-party account.
//
// @param request - ModifyCloudVendorAccountAKRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyCloudVendorAccountAKResponse
func (client *Client) ModifyCloudVendorAccountAKWithContext(ctx context.Context, request *ModifyCloudVendorAccountAKRequest, runtime *dara.RuntimeOptions) (_result *ModifyCloudVendorAccountAKResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AuthIds) {
		query["AuthIds"] = request.AuthIds
	}

	if !dara.IsNil(request.AuthModules) {
		query["AuthModules"] = request.AuthModules
	}

	if !dara.IsNil(request.CtdrCloudUserId) {
		query["CtdrCloudUserId"] = request.CtdrCloudUserId
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.ExtendInfo) {
		query["ExtendInfo"] = request.ExtendInfo
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Regions) {
		query["Regions"] = request.Regions
	}

	if !dara.IsNil(request.SecretId) {
		query["SecretId"] = request.SecretId
	}

	if !dara.IsNil(request.SecretKey) {
		query["SecretKey"] = request.SecretKey
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	if !dara.IsNil(request.SubscriptionIds) {
		query["SubscriptionIds"] = request.SubscriptionIds
	}

	if !dara.IsNil(request.TenantId) {
		query["TenantId"] = request.TenantId
	}

	if !dara.IsNil(request.VendorAuthAlias) {
		query["VendorAuthAlias"] = request.VendorAuthAlias
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyCloudVendorAccountAK"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyCloudVendorAccountAKResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Modify the Trail configuration information for the AK
//
// @param request - ModifyCloudVendorTrialConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyCloudVendorTrialConfigResponse
func (client *Client) ModifyCloudVendorTrialConfigWithContext(ctx context.Context, request *ModifyCloudVendorTrialConfigRequest, runtime *dara.RuntimeOptions) (_result *ModifyCloudVendorTrialConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AuthId) {
		query["AuthId"] = request.AuthId
	}

	if !dara.IsNil(request.AuthInfo) {
		query["AuthInfo"] = request.AuthInfo
	}

	if !dara.IsNil(request.DeleteTrail) {
		query["DeleteTrail"] = request.DeleteTrail
	}

	if !dara.IsNil(request.Vendor) {
		query["Vendor"] = request.Vendor
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyCloudVendorTrialConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyCloudVendorTrialConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Fixes the blocking status of clusters whose status is Normal to be confirmed.
//
// @param request - ModifyClusterCnnfStatusUserConfirmRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyClusterCnnfStatusUserConfirmResponse
func (client *Client) ModifyClusterCnnfStatusUserConfirmWithContext(ctx context.Context, request *ModifyClusterCnnfStatusUserConfirmRequest, runtime *dara.RuntimeOptions) (_result *ModifyClusterCnnfStatusUserConfirmResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterIds) {
		query["ClusterIds"] = request.ClusterIds
	}

	if !dara.IsNil(request.UserConfirm) {
		query["UserConfirm"] = request.UserConfirm
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyClusterCnnfStatusUserConfirm"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyClusterCnnfStatusUserConfirmResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the priority to fix vulnerabilities.
//
// @param request - ModifyConcernNecessityRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyConcernNecessityResponse
func (client *Client) ModifyConcernNecessityWithContext(ctx context.Context, request *ModifyConcernNecessityRequest, runtime *dara.RuntimeOptions) (_result *ModifyConcernNecessityResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ConcernNecessity) {
		query["ConcernNecessity"] = request.ConcernNecessity
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyConcernNecessity"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyConcernNecessityResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a rule for non-image program defense.
//
// @param tmpReq - ModifyContainerDefenseRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyContainerDefenseRuleResponse
func (client *Client) ModifyContainerDefenseRuleWithContext(ctx context.Context, tmpReq *ModifyContainerDefenseRuleRequest, runtime *dara.RuntimeOptions) (_result *ModifyContainerDefenseRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &ModifyContainerDefenseRuleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.Whitelist) {
		request.WhitelistShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Whitelist, dara.String("Whitelist"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.Description) {
		query["Description"] = request.Description
	}

	if !dara.IsNil(request.RuleAction) {
		query["RuleAction"] = request.RuleAction
	}

	if !dara.IsNil(request.RuleId) {
		query["RuleId"] = request.RuleId
	}

	if !dara.IsNil(request.RuleName) {
		query["RuleName"] = request.RuleName
	}

	if !dara.IsNil(request.RuleSwitch) {
		query["RuleSwitch"] = request.RuleSwitch
	}

	if !dara.IsNil(request.RuleType) {
		query["RuleType"] = request.RuleType
	}

	if !dara.IsNil(request.Scope) {
		query["Scope"] = request.Scope
	}

	if !dara.IsNil(request.WhitelistShrink) {
		query["Whitelist"] = request.WhitelistShrink
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyContainerDefenseRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyContainerDefenseRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Changes the status of non-image program defense rules.
//
// @param request - ModifyContainerDefenseRuleSwitchRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyContainerDefenseRuleSwitchResponse
func (client *Client) ModifyContainerDefenseRuleSwitchWithContext(ctx context.Context, request *ModifyContainerDefenseRuleSwitchRequest, runtime *dara.RuntimeOptions) (_result *ModifyContainerDefenseRuleSwitchResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.RuleIds) {
		query["RuleIds"] = request.RuleIds
	}

	if !dara.IsNil(request.RuleSwitch) {
		query["RuleSwitch"] = request.RuleSwitch
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyContainerDefenseRuleSwitch"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyContainerDefenseRuleSwitchResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the defense rule against container escapes.
//
// @param request - ModifyContainerPluginRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyContainerPluginRuleResponse
func (client *Client) ModifyContainerPluginRuleWithContext(ctx context.Context, request *ModifyContainerPluginRuleRequest, runtime *dara.RuntimeOptions) (_result *ModifyContainerPluginRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Mode) {
		query["Mode"] = request.Mode
	}

	if !dara.IsNil(request.RuleId) {
		query["RuleId"] = request.RuleId
	}

	if !dara.IsNil(request.RuleName) {
		query["RuleName"] = request.RuleName
	}

	if !dara.IsNil(request.RuleType) {
		query["RuleType"] = request.RuleType
	}

	if !dara.IsNil(request.SelectedPolicy) {
		query["SelectedPolicy"] = request.SelectedPolicy
	}

	if !dara.IsNil(request.WhiteImages) {
		query["WhiteImages"] = request.WhiteImages
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyContainerPluginRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyContainerPluginRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the configurations of vulnerability scan for a running container.
//
// @param request - ModifyContainerScanConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyContainerScanConfigResponse
func (client *Client) ModifyContainerScanConfigWithContext(ctx context.Context, request *ModifyContainerScanConfigRequest, runtime *dara.RuntimeOptions) (_result *ModifyContainerScanConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppNames) {
		query["AppNames"] = request.AppNames
	}

	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyContainerScanConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyContainerScanConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds vulnerabilities to the whitelist. After you add the vulnerabilities to the whitelist, Security Center no longer generates alerts for the vulnerabilities.
//
// @param request - ModifyCreateVulWhitelistRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyCreateVulWhitelistResponse
func (client *Client) ModifyCreateVulWhitelistWithContext(ctx context.Context, request *ModifyCreateVulWhitelistRequest, runtime *dara.RuntimeOptions) (_result *ModifyCreateVulWhitelistResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Reason) {
		query["Reason"] = request.Reason
	}

	if !dara.IsNil(request.TargetInfo) {
		query["TargetInfo"] = request.TargetInfo
	}

	if !dara.IsNil(request.Whitelist) {
		query["Whitelist"] = request.Whitelist
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyCreateVulWhitelist"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyCreateVulWhitelistResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a custom IP address blocking policy.
//
// @param request - ModifyCustomBlockRecordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyCustomBlockRecordResponse
func (client *Client) ModifyCustomBlockRecordWithContext(ctx context.Context, request *ModifyCustomBlockRecordRequest, runtime *dara.RuntimeOptions) (_result *ModifyCustomBlockRecordResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BlockIp) {
		query["BlockIp"] = request.BlockIp
	}

	if !dara.IsNil(request.Bound) {
		query["Bound"] = request.Bound
	}

	if !dara.IsNil(request.ExpireTime) {
		query["ExpireTime"] = request.ExpireTime
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyCustomBlockRecord"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyCustomBlockRecordResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the execution cycle of periodic tasks, including image scan, urgent vulnerability scan, and virus detection tasks.
//
// @param request - ModifyCycleTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyCycleTaskResponse
func (client *Client) ModifyCycleTaskWithContext(ctx context.Context, request *ModifyCycleTaskRequest, runtime *dara.RuntimeOptions) (_result *ModifyCycleTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ConfigId) {
		query["ConfigId"] = request.ConfigId
	}

	if !dara.IsNil(request.Enable) {
		query["Enable"] = request.Enable
	}

	if !dara.IsNil(request.FirstDateStr) {
		query["FirstDateStr"] = request.FirstDateStr
	}

	if !dara.IsNil(request.IntervalPeriod) {
		query["IntervalPeriod"] = request.IntervalPeriod
	}

	if !dara.IsNil(request.Param) {
		query["Param"] = request.Param
	}

	if !dara.IsNil(request.PeriodUnit) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !dara.IsNil(request.TargetEndTime) {
		query["TargetEndTime"] = request.TargetEndTime
	}

	if !dara.IsNil(request.TargetStartTime) {
		query["TargetStartTime"] = request.TargetStartTime
	}

	if !dara.IsNil(request.TaskName) {
		query["TaskName"] = request.TaskName
	}

	if !dara.IsNil(request.TaskType) {
		query["TaskType"] = request.TaskType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyCycleTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyCycleTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Changes the notification status of a DingTalk chatbot.
//
// Description:
//
// You can call this operation only if you use Security Center Enterprise.
//
// @param request - ModifyDingTalkStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDingTalkStatusResponse
func (client *Client) ModifyDingTalkStatusWithContext(ctx context.Context, request *ModifyDingTalkStatusRequest, runtime *dara.RuntimeOptions) (_result *ModifyDingTalkStatusResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Ids) {
		query["Ids"] = request.Ids
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyDingTalkStatus"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyDingTalkStatusResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Runs a scan task for urgent vulnerabilities.
//
// @param request - ModifyEmgVulSubmitRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyEmgVulSubmitResponse
func (client *Client) ModifyEmgVulSubmitWithContext(ctx context.Context, request *ModifyEmgVulSubmitRequest, runtime *dara.RuntimeOptions) (_result *ModifyEmgVulSubmitResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.UserAgreement) {
		query["UserAgreement"] = request.UserAgreement
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyEmgVulSubmit"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyEmgVulSubmitResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Changes the name of a server group.
//
// @param request - ModifyGroupPropertyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyGroupPropertyResponse
func (client *Client) ModifyGroupPropertyWithContext(ctx context.Context, request *ModifyGroupPropertyRequest, runtime *dara.RuntimeOptions) (_result *ModifyGroupPropertyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Data) {
		query["Data"] = request.Data
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyGroupProperty"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyGroupPropertyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改代理集群
//
// @param request - ModifyHybridProxyClusterRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyHybridProxyClusterResponse
func (client *Client) ModifyHybridProxyClusterWithContext(ctx context.Context, request *ModifyHybridProxyClusterRequest, runtime *dara.RuntimeOptions) (_result *ModifyHybridProxyClusterResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterName) {
		query["ClusterName"] = request.ClusterName
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyHybridProxyCluster"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyHybridProxyClusterResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改代理策略
//
// @param request - ModifyHybridProxyPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyHybridProxyPolicyResponse
func (client *Client) ModifyHybridProxyPolicyWithContext(ctx context.Context, request *ModifyHybridProxyPolicyRequest, runtime *dara.RuntimeOptions) (_result *ModifyHybridProxyPolicyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterName) {
		query["ClusterName"] = request.ClusterName
	}

	if !dara.IsNil(request.PolicyInfo) {
		query["PolicyInfo"] = request.PolicyInfo
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyHybridProxyPolicy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyHybridProxyPolicyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the configurations of an IDC probe.
//
// @param request - ModifyIdcProbeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyIdcProbeResponse
func (client *Client) ModifyIdcProbeWithContext(ctx context.Context, request *ModifyIdcProbeRequest, runtime *dara.RuntimeOptions) (_result *ModifyIdcProbeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.IdcName) {
		query["IdcName"] = request.IdcName
	}

	if !dara.IsNil(request.IdcRegion) {
		query["IdcRegion"] = request.IdcRegion
	}

	if !dara.IsNil(request.IntervalPeriod) {
		query["IntervalPeriod"] = request.IntervalPeriod
	}

	if !dara.IsNil(request.IpSegments) {
		query["IpSegments"] = request.IpSegments
	}

	if !dara.IsNil(request.LinuxPort) {
		query["LinuxPort"] = request.LinuxPort
	}

	if !dara.IsNil(request.PeriodUnit) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	if !dara.IsNil(request.WinPort) {
		query["WinPort"] = request.WinPort
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyIdcProbe"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyIdcProbeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the configurations of a scheduled image fix.
//
// @param request - ModifyImageFixCycleConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyImageFixCycleConfigResponse
func (client *Client) ModifyImageFixCycleConfigWithContext(ctx context.Context, request *ModifyImageFixCycleConfigRequest, runtime *dara.RuntimeOptions) (_result *ModifyImageFixCycleConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	body := map[string]interface{}{}
	if !dara.IsNil(request.ImageFixCycle) {
		body["ImageFixCycle"] = request.ImageFixCycle
	}

	if !dara.IsNil(request.ImageFixSwitch) {
		body["ImageFixSwitch"] = request.ImageFixSwitch
	}

	if !dara.IsNil(request.ImageFixTarget) {
		body["ImageFixTarget"] = request.ImageFixTarget
	}

	if !dara.IsNil(request.ImageTimeRange) {
		body["ImageTimeRange"] = request.ImageTimeRange
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyImageFixCycleConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyImageFixCycleConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the transfer time of an image repository.
//
// @param request - ModifyImageRegistryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyImageRegistryResponse
func (client *Client) ModifyImageRegistryWithContext(ctx context.Context, request *ModifyImageRegistryRequest, runtime *dara.RuntimeOptions) (_result *ModifyImageRegistryResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	body := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		body["Id"] = request.Id
	}

	if !dara.IsNil(request.Password) {
		body["Password"] = request.Password
	}

	if !dara.IsNil(request.TransPerHour) {
		body["TransPerHour"] = request.TransPerHour
	}

	if !dara.IsNil(request.UserName) {
		body["UserName"] = request.UserName
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyImageRegistry"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyImageRegistryResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the defense rule against brute-force attacks that is applied to a specified server.
//
// @param request - ModifyInstanceAntiBruteForceRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyInstanceAntiBruteForceRuleResponse
func (client *Client) ModifyInstanceAntiBruteForceRuleWithContext(ctx context.Context, request *ModifyInstanceAntiBruteForceRuleRequest, runtime *dara.RuntimeOptions) (_result *ModifyInstanceAntiBruteForceRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.NewRuleId) {
		query["NewRuleId"] = request.NewRuleId
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyInstanceAntiBruteForceRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyInstanceAntiBruteForceRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a proactive defense rule for containers.
//
// @param tmpReq - ModifyInterceptionRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyInterceptionRuleResponse
func (client *Client) ModifyInterceptionRuleWithContext(ctx context.Context, tmpReq *ModifyInterceptionRuleRequest, runtime *dara.RuntimeOptions) (_result *ModifyInterceptionRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &ModifyInterceptionRuleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.DstTarget) {
		request.DstTargetShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DstTarget, dara.String("DstTarget"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.SrcTarget) {
		request.SrcTargetShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SrcTarget, dara.String("SrcTarget"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.DstTargetShrink) {
		query["DstTarget"] = request.DstTargetShrink
	}

	if !dara.IsNil(request.InterceptType) {
		query["InterceptType"] = request.InterceptType
	}

	if !dara.IsNil(request.OrderIndex) {
		query["OrderIndex"] = request.OrderIndex
	}

	if !dara.IsNil(request.RuleId) {
		query["RuleId"] = request.RuleId
	}

	if !dara.IsNil(request.RuleName) {
		query["RuleName"] = request.RuleName
	}

	if !dara.IsNil(request.RuleSwitch) {
		query["RuleSwitch"] = request.RuleSwitch
	}

	if !dara.IsNil(request.SrcTargetShrink) {
		query["SrcTarget"] = request.SrcTargetShrink
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyInterceptionRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyInterceptionRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables or disables a proactive defense rule for containers.
//
// @param request - ModifyInterceptionRuleSwitchRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyInterceptionRuleSwitchResponse
func (client *Client) ModifyInterceptionRuleSwitchWithContext(ctx context.Context, request *ModifyInterceptionRuleSwitchRequest, runtime *dara.RuntimeOptions) (_result *ModifyInterceptionRuleSwitchResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.RuleIds) {
		query["RuleIds"] = request.RuleIds
	}

	if !dara.IsNil(request.RuleSwitch) {
		query["RuleSwitch"] = request.RuleSwitch
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyInterceptionRuleSwitch"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyInterceptionRuleSwitchResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the information about a network object of the container firewall feature.
//
// @param request - ModifyInterceptionTargetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyInterceptionTargetResponse
func (client *Client) ModifyInterceptionTargetWithContext(ctx context.Context, request *ModifyInterceptionTargetRequest, runtime *dara.RuntimeOptions) (_result *ModifyInterceptionTargetResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.ImageList) {
		query["ImageList"] = request.ImageList
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.TagList) {
		query["TagList"] = request.TagList
	}

	if !dara.IsNil(request.TargetId) {
		query["TargetId"] = request.TargetId
	}

	if !dara.IsNil(request.TargetName) {
		query["TargetName"] = request.TargetName
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyInterceptionTarget"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyInterceptionTargetResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables or disables the log analysis feature.
//
// @param request - ModifyLogMetaStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyLogMetaStatusResponse
func (client *Client) ModifyLogMetaStatusWithContext(ctx context.Context, request *ModifyLogMetaStatusRequest, runtime *dara.RuntimeOptions) (_result *ModifyLogMetaStatusResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.LogStore) {
		query["LogStore"] = request.LogStore
	}

	if !dara.IsNil(request.Project) {
		query["Project"] = request.Project
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyLogMetaStatus"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyLogMetaStatusResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the logon configuration for a specified asset.
//
// @param request - ModifyLoginBaseConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyLoginBaseConfigResponse
func (client *Client) ModifyLoginBaseConfigWithContext(ctx context.Context, request *ModifyLoginBaseConfigRequest, runtime *dara.RuntimeOptions) (_result *ModifyLoginBaseConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Config) {
		query["Config"] = request.Config
	}

	if !dara.IsNil(request.Target) {
		query["Target"] = request.Target
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyLoginBaseConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyLoginBaseConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables or disables the logon security settings for an asset.
//
// @param request - ModifyLoginSwitchConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyLoginSwitchConfigResponse
func (client *Client) ModifyLoginSwitchConfigWithContext(ctx context.Context, request *ModifyLoginSwitchConfigRequest, runtime *dara.RuntimeOptions) (_result *ModifyLoginSwitchConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Item) {
		query["Item"] = request.Item
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyLoginSwitchConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyLoginSwitchConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies notification settings.
//
// @param request - ModifyNoticeConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyNoticeConfigResponse
func (client *Client) ModifyNoticeConfigWithContext(ctx context.Context, request *ModifyNoticeConfigRequest, runtime *dara.RuntimeOptions) (_result *ModifyNoticeConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Project) {
		query["Project"] = request.Project
	}

	if !dara.IsNil(request.Route) {
		query["Route"] = request.Route
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.TimeLimit) {
		query["TimeLimit"] = request.TimeLimit
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyNoticeConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyNoticeConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Activates Simple Log Service.
//
// Description:
//
// *Prerequisites*	- [Simple Log Service](https://www.alibabacloud.com/help/en/log-service/latest/billable-items) is activated. A service-linked role for Security Center is created, and Security Center is authorized to access cloud resources. You can call the [CreateServiceLinkedRole](~~CreateServiceLinkedRole~~) operation to create a service-linked role for Security Center and authorize Security Center to access cloud resources. **Scenarios*	- Before you use the log analysis feature of Security Center, you must call the [ModifyOpenLogShipper](~~ModifyOpenLogShipper~~) operation to activate Simple Log Service.
//
// @param request - ModifyOpenLogShipperRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyOpenLogShipperResponse
func (client *Client) ModifyOpenLogShipperWithContext(ctx context.Context, request *ModifyOpenLogShipperRequest, runtime *dara.RuntimeOptions) (_result *ModifyOpenLogShipperResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.ResourceDirectoryAccountId) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyOpenLogShipper"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyOpenLogShipperResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Handles detected vulnerabilities. You can fix, check, or ignore the vulnerabilities.
//
// @param request - ModifyOperateVulRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyOperateVulResponse
func (client *Client) ModifyOperateVulWithContext(ctx context.Context, request *ModifyOperateVulRequest, runtime *dara.RuntimeOptions) (_result *ModifyOperateVulResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.Info) {
		query["Info"] = request.Info
	}

	if !dara.IsNil(request.OperateType) {
		query["OperateType"] = request.OperateType
	}

	if !dara.IsNil(request.Reason) {
		query["Reason"] = request.Reason
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyOperateVul"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyOperateVulResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the switch settings of pay-as-you-go modules.
//
// @param request - ModifyPostPayModuleSwitchRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyPostPayModuleSwitchResponse
func (client *Client) ModifyPostPayModuleSwitchWithContext(ctx context.Context, request *ModifyPostPayModuleSwitchRequest, runtime *dara.RuntimeOptions) (_result *ModifyPostPayModuleSwitchResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.PostPayInstanceId) {
		query["PostPayInstanceId"] = request.PostPayInstanceId
	}

	if !dara.IsNil(request.PostPayModuleSwitch) {
		query["PostPayModuleSwitch"] = request.PostPayModuleSwitch
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyPostPayModuleSwitch"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyPostPayModuleSwitchResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a process to or removes a process from the whitelist by using the application whitelist feature.
//
// Description:
//
// The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
//
// @param request - ModifyProcessWhiteListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyProcessWhiteListResponse
func (client *Client) ModifyProcessWhiteListWithContext(ctx context.Context, request *ModifyProcessWhiteListRequest, runtime *dara.RuntimeOptions) (_result *ModifyProcessWhiteListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Md5s) {
		query["Md5s"] = request.Md5s
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	if !dara.IsNil(request.StrategyId) {
		query["StrategyId"] = request.StrategyId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyProcessWhiteList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyProcessWhiteListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the collection frequency of asset fingerprints for an automatic periodic collection task.
//
// @param request - ModifyPropertyScheduleConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyPropertyScheduleConfigResponse
func (client *Client) ModifyPropertyScheduleConfigWithContext(ctx context.Context, request *ModifyPropertyScheduleConfigRequest, runtime *dara.RuntimeOptions) (_result *ModifyPropertyScheduleConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ScheduleTime) {
		query["ScheduleTime"] = request.ScheduleTime
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyPropertyScheduleConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyPropertyScheduleConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Performs security check tasks on servers with a few clicks.
//
// @param request - ModifyPushAllTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyPushAllTaskResponse
func (client *Client) ModifyPushAllTaskWithContext(ctx context.Context, request *ModifyPushAllTaskRequest, runtime *dara.RuntimeOptions) (_result *ModifyPushAllTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Tasks) {
		query["Tasks"] = request.Tasks
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyPushAllTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyPushAllTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Refreshes the list of processes that are associated with a Linux software vulnerability.
//
// @param request - ModifyRefreshProcessInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyRefreshProcessInfoResponse
func (client *Client) ModifyRefreshProcessInfoWithContext(ctx context.Context, request *ModifyRefreshProcessInfoRequest, runtime *dara.RuntimeOptions) (_result *ModifyRefreshProcessInfoResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyRefreshProcessInfo"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyRefreshProcessInfoResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a rule for container tamper-proofing.
//
// @param request - ModifySasContainerWebDefenseRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifySasContainerWebDefenseRuleResponse
func (client *Client) ModifySasContainerWebDefenseRuleWithContext(ctx context.Context, request *ModifySasContainerWebDefenseRuleRequest, runtime *dara.RuntimeOptions) (_result *ModifySasContainerWebDefenseRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.PathConfDTOList) {
		query["PathConfDTOList"] = request.PathConfDTOList
	}

	if !dara.IsNil(request.RuleId) {
		query["RuleId"] = request.RuleId
	}

	if !dara.IsNil(request.RuleName) {
		query["RuleName"] = request.RuleName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifySasContainerWebDefenseRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifySasContainerWebDefenseRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies common filter conditions to search for assets.
//
// @param request - ModifySearchConditionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifySearchConditionResponse
func (client *Client) ModifySearchConditionWithContext(ctx context.Context, request *ModifySearchConditionRequest, runtime *dara.RuntimeOptions) (_result *ModifySearchConditionResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.FilterConditions) {
		query["FilterConditions"] = request.FilterConditions
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifySearchCondition"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifySearchConditionResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI ModifySecurityCheckScheduleConfig is deprecated, please use Sas::2018-12-03::ChangeCheckConfig instead.
//
// Summary:
//
// Specifies the time when an automatic configuration check is performed on cloud services.
//
// Description:
//
// This operation is phased out. You can use the ChangeCheckConfig operation.
//
// @param request - ModifySecurityCheckScheduleConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifySecurityCheckScheduleConfigResponse
func (client *Client) ModifySecurityCheckScheduleConfigWithContext(ctx context.Context, request *ModifySecurityCheckScheduleConfigRequest, runtime *dara.RuntimeOptions) (_result *ModifySecurityCheckScheduleConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DaysOfWeek) {
		query["DaysOfWeek"] = request.DaysOfWeek
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifySecurityCheckScheduleConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifySecurityCheckScheduleConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the alert handling rule for alerts that are added to the whitelist by asset.
//
// @param request - ModifySecurityEventMarkMissIndividuallyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifySecurityEventMarkMissIndividuallyResponse
func (client *Client) ModifySecurityEventMarkMissIndividuallyWithContext(ctx context.Context, request *ModifySecurityEventMarkMissIndividuallyRequest, runtime *dara.RuntimeOptions) (_result *ModifySecurityEventMarkMissIndividuallyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.DeleteMarkMissParam) {
		body["DeleteMarkMissParam"] = request.DeleteMarkMissParam
	}

	if !dara.IsNil(request.From) {
		body["From"] = request.From
	}

	if !dara.IsNil(request.InsertMarkMissParam) {
		body["InsertMarkMissParam"] = request.InsertMarkMissParam
	}

	if !dara.IsNil(request.Lang) {
		body["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifySecurityEventMarkMissIndividually"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifySecurityEventMarkMissIndividuallyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Manage Serverless Asset Authorization
//
// @param request - ModifyServerlessAuthToMachineRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyServerlessAuthToMachineResponse
func (client *Client) ModifyServerlessAuthToMachineWithContext(ctx context.Context, request *ModifyServerlessAuthToMachineRequest, runtime *dara.RuntimeOptions) (_result *ModifyServerlessAuthToMachineResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppCriteria) {
		query["AppCriteria"] = request.AppCriteria
	}

	if !dara.IsNil(request.AuthItem) {
		query["AuthItem"] = request.AuthItem
	}

	if !dara.IsNil(request.AutoBind) {
		query["AutoBind"] = request.AutoBind
	}

	if !dara.IsNil(request.BindAll) {
		query["BindAll"] = request.BindAll
	}

	if !dara.IsNil(request.BindAppList) {
		query["BindAppList"] = request.BindAppList
	}

	if !dara.IsNil(request.BindAssetType) {
		query["BindAssetType"] = request.BindAssetType
	}

	if !dara.IsNil(request.BindUuidList) {
		query["BindUuidList"] = request.BindUuidList
	}

	if !dara.IsNil(request.Criteria) {
		query["Criteria"] = request.Criteria
	}

	if !dara.IsNil(request.LogicalExp) {
		query["LogicalExp"] = request.LogicalExp
	}

	if !dara.IsNil(request.NtmVersion) {
		query["NtmVersion"] = request.NtmVersion
	}

	if !dara.IsNil(request.PreBind) {
		query["PreBind"] = request.PreBind
	}

	if !dara.IsNil(request.PreBindOrderId) {
		query["PreBindOrderId"] = request.PreBindOrderId
	}

	if !dara.IsNil(request.ResourceDirectoryUid) {
		query["ResourceDirectoryUid"] = request.ResourceDirectoryUid
	}

	if !dara.IsNil(request.UnBindAppList) {
		query["UnBindAppList"] = request.UnBindAppList
	}

	if !dara.IsNil(request.UnBindUuidList) {
		query["UnBindUuidList"] = request.UnBindUuidList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyServerlessAuthToMachine"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyServerlessAuthToMachineResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates or deletes a policy template on the My Policies tab of the Playbook page.
//
// Description:
//
// Only the Enterprise and Ultimate editions of Security Center support this API operation.
//
// @param request - ModifySoarStrategySubscribeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifySoarStrategySubscribeResponse
func (client *Client) ModifySoarStrategySubscribeWithContext(ctx context.Context, request *ModifySoarStrategySubscribeRequest, runtime *dara.RuntimeOptions) (_result *ModifySoarStrategySubscribeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.StrategyId) {
		query["StrategyId"] = request.StrategyId
	}

	if !dara.IsNil(request.SubscribeStatus) {
		query["SubscribeStatus"] = request.SubscribeStatus
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifySoarStrategySubscribe"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifySoarStrategySubscribeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables the quick scan feature. You can also enable the feature on the Vulnerabilities page of the Security Center console.
//
// @param request - ModifyStartVulScanRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyStartVulScanResponse
func (client *Client) ModifyStartVulScanWithContext(ctx context.Context, request *ModifyStartVulScanRequest, runtime *dara.RuntimeOptions) (_result *ModifyStartVulScanResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Types) {
		query["Types"] = request.Types
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyStartVulScan"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyStartVulScanResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a baseline check policy.
//
// @param request - ModifyStrategyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyStrategyResponse
func (client *Client) ModifyStrategyWithContext(ctx context.Context, request *ModifyStrategyRequest, runtime *dara.RuntimeOptions) (_result *ModifyStrategyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CustomType) {
		query["CustomType"] = request.CustomType
	}

	if !dara.IsNil(request.CycleDays) {
		query["CycleDays"] = request.CycleDays
	}

	if !dara.IsNil(request.CycleStartTime) {
		query["CycleStartTime"] = request.CycleStartTime
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.RiskCustomParams) {
		query["RiskCustomParams"] = request.RiskCustomParams
	}

	if !dara.IsNil(request.RiskSubTypeName) {
		query["RiskSubTypeName"] = request.RiskSubTypeName
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyStrategy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyStrategyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the servers to which a baseline check policy is applied.
//
// @param request - ModifyStrategyTargetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyStrategyTargetResponse
func (client *Client) ModifyStrategyTargetWithContext(ctx context.Context, request *ModifyStrategyTargetRequest, runtime *dara.RuntimeOptions) (_result *ModifyStrategyTargetResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Config) {
		query["Config"] = request.Config
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Target) {
		query["Target"] = request.Target
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyStrategyTarget"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyStrategyTargetResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the names of the tags that are added to assets, or modifies the tags for assets.
//
// @param request - ModifyTagWithUuidRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyTagWithUuidResponse
func (client *Client) ModifyTagWithUuidWithContext(ctx context.Context, request *ModifyTagWithUuidRequest, runtime *dara.RuntimeOptions) (_result *ModifyTagWithUuidResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.MachineTypes) {
		query["MachineTypes"] = request.MachineTypes
	}

	if !dara.IsNil(request.TagId) {
		query["TagId"] = request.TagId
	}

	if !dara.IsNil(request.TagList) {
		query["TagList"] = request.TagList
	}

	if !dara.IsNil(request.Target) {
		query["Target"] = request.Target
	}

	if !dara.IsNil(request.UuidList) {
		query["UuidList"] = request.UuidList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyTagWithUuid"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyTagWithUuidResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies an anti-ransomware policy for databases.
//
// @param tmpReq - ModifyUniBackupPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyUniBackupPolicyResponse
func (client *Client) ModifyUniBackupPolicyWithContext(ctx context.Context, tmpReq *ModifyUniBackupPolicyRequest, runtime *dara.RuntimeOptions) (_result *ModifyUniBackupPolicyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &ModifyUniBackupPolicyShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.FullPlan) {
		request.FullPlanShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.FullPlan, dara.String("FullPlan"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.IncPlan) {
		request.IncPlanShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.IncPlan, dara.String("IncPlan"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.AccountName) {
		query["AccountName"] = request.AccountName
	}

	if !dara.IsNil(request.AccountPassword) {
		query["AccountPassword"] = request.AccountPassword
	}

	if !dara.IsNil(request.FullPlanShrink) {
		query["FullPlan"] = request.FullPlanShrink
	}

	if !dara.IsNil(request.IncPlanShrink) {
		query["IncPlan"] = request.IncPlanShrink
	}

	if !dara.IsNil(request.PolicyId) {
		query["PolicyId"] = request.PolicyId
	}

	if !dara.IsNil(request.PolicyName) {
		query["PolicyName"] = request.PolicyName
	}

	if !dara.IsNil(request.PolicyStatus) {
		query["PolicyStatus"] = request.PolicyStatus
	}

	if !dara.IsNil(request.Retention) {
		query["Retention"] = request.Retention
	}

	if !dara.IsNil(request.SpeedLimiter) {
		query["SpeedLimiter"] = request.SpeedLimiter
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyUniBackupPolicy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyUniBackupPolicyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI ModifyVpcHoneyPot is deprecated
//
// Summary:
//
// Enables or disables a honeypot.
//
// @param request - ModifyVpcHoneyPotRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyVpcHoneyPotResponse
func (client *Client) ModifyVpcHoneyPotWithContext(ctx context.Context, request *ModifyVpcHoneyPotRequest, runtime *dara.RuntimeOptions) (_result *ModifyVpcHoneyPotResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.HoneyPotAction) {
		query["HoneyPotAction"] = request.HoneyPotAction
	}

	if !dara.IsNil(request.VpcId) {
		query["VpcId"] = request.VpcId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyVpcHoneyPot"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyVpcHoneyPotResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the configurations of the vulnerability scan feature.
//
// @param request - ModifyVulConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyVulConfigResponse
func (client *Client) ModifyVulConfigWithContext(ctx context.Context, request *ModifyVulConfigRequest, runtime *dara.RuntimeOptions) (_result *ModifyVulConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Config) {
		query["Config"] = request.Config
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyVulConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyVulConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the configurations of the vulnerability scan feature for a server.
//
// @param request - ModifyVulTargetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyVulTargetResponse
func (client *Client) ModifyVulTargetWithContext(ctx context.Context, request *ModifyVulTargetRequest, runtime *dara.RuntimeOptions) (_result *ModifyVulTargetResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Config) {
		query["Config"] = request.Config
	}

	if !dara.IsNil(request.Target) {
		query["Target"] = request.Target
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyVulTarget"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyVulTargetResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures vulnerability scan for a server.
//
// @param request - ModifyVulTargetConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyVulTargetConfigResponse
func (client *Client) ModifyVulTargetConfigWithContext(ctx context.Context, request *ModifyVulTargetConfigRequest, runtime *dara.RuntimeOptions) (_result *ModifyVulTargetConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Config) {
		query["Config"] = request.Config
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyVulTargetConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyVulTargetConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the servers that are added to a vulnerability whitelist.
//
// @param request - ModifyVulWhitelistTargetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyVulWhitelistTargetResponse
func (client *Client) ModifyVulWhitelistTargetWithContext(ctx context.Context, request *ModifyVulWhitelistTargetRequest, runtime *dara.RuntimeOptions) (_result *ModifyVulWhitelistTargetResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.Reason) {
		query["Reason"] = request.Reason
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.TargetInfo) {
		query["TargetInfo"] = request.TargetInfo
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyVulWhitelistTarget"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyVulWhitelistTargetResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a directory to protect for a specified server.
//
// @param request - ModifyWebLockCreateConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyWebLockCreateConfigResponse
func (client *Client) ModifyWebLockCreateConfigWithContext(ctx context.Context, request *ModifyWebLockCreateConfigRequest, runtime *dara.RuntimeOptions) (_result *ModifyWebLockCreateConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DefenceMode) {
		query["DefenceMode"] = request.DefenceMode
	}

	if !dara.IsNil(request.Dir) {
		query["Dir"] = request.Dir
	}

	if !dara.IsNil(request.ExclusiveDir) {
		query["ExclusiveDir"] = request.ExclusiveDir
	}

	if !dara.IsNil(request.ExclusiveFile) {
		query["ExclusiveFile"] = request.ExclusiveFile
	}

	if !dara.IsNil(request.ExclusiveFileType) {
		query["ExclusiveFileType"] = request.ExclusiveFileType
	}

	if !dara.IsNil(request.InclusiveFile) {
		query["InclusiveFile"] = request.InclusiveFile
	}

	if !dara.IsNil(request.InclusiveFileType) {
		query["InclusiveFileType"] = request.InclusiveFileType
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.LocalBackupDir) {
		query["LocalBackupDir"] = request.LocalBackupDir
	}

	if !dara.IsNil(request.Mode) {
		query["Mode"] = request.Mode
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyWebLockCreateConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyWebLockCreateConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a directory on a specified server from the protected directories of web tamper proofing.
//
// Description:
//
// After you delete a directory that has web tamper proofing enabled on a server, files in the directory are no longer protected by web tamper proofing. The information about the websites that are hosted on the server may be maliciously modified by attackers. Proceed with caution.
//
// @param request - ModifyWebLockDeleteConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyWebLockDeleteConfigResponse
func (client *Client) ModifyWebLockDeleteConfigWithContext(ctx context.Context, request *ModifyWebLockDeleteConfigRequest, runtime *dara.RuntimeOptions) (_result *ModifyWebLockDeleteConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyWebLockDeleteConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyWebLockDeleteConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Changes the status of processes for web tamper proofing.
//
// @param request - ModifyWebLockProcessStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyWebLockProcessStatusResponse
func (client *Client) ModifyWebLockProcessStatusWithContext(ctx context.Context, request *ModifyWebLockProcessStatusRequest, runtime *dara.RuntimeOptions) (_result *ModifyWebLockProcessStatusResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DealAll) {
		query["DealAll"] = request.DealAll
	}

	if !dara.IsNil(request.OperateInfo) {
		query["OperateInfo"] = request.OperateInfo
	}

	if !dara.IsNil(request.ProcessPath) {
		query["ProcessPath"] = request.ProcessPath
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyWebLockProcessStatus"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyWebLockProcessStatusResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Refreshes the status of the web tamper proofing feature for a server.
//
// Description:
//
// If an exception occurs when you enable or disable the web tamper proofing feature for a server, you can call this operation to refresh the status of the web tamper proofing feature.
//
// @param request - ModifyWebLockRefreshRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyWebLockRefreshResponse
func (client *Client) ModifyWebLockRefreshWithContext(ctx context.Context, request *ModifyWebLockRefreshRequest, runtime *dara.RuntimeOptions) (_result *ModifyWebLockRefreshResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyWebLockRefresh"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyWebLockRefreshResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables web tamper proofing for a specified server.
//
// @param request - ModifyWebLockStartRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyWebLockStartResponse
func (client *Client) ModifyWebLockStartWithContext(ctx context.Context, request *ModifyWebLockStartRequest, runtime *dara.RuntimeOptions) (_result *ModifyWebLockStartResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DefenceMode) {
		query["DefenceMode"] = request.DefenceMode
	}

	if !dara.IsNil(request.Dir) {
		query["Dir"] = request.Dir
	}

	if !dara.IsNil(request.ExclusiveDir) {
		query["ExclusiveDir"] = request.ExclusiveDir
	}

	if !dara.IsNil(request.ExclusiveFile) {
		query["ExclusiveFile"] = request.ExclusiveFile
	}

	if !dara.IsNil(request.ExclusiveFileType) {
		query["ExclusiveFileType"] = request.ExclusiveFileType
	}

	if !dara.IsNil(request.InclusiveFileType) {
		query["InclusiveFileType"] = request.InclusiveFileType
	}

	if !dara.IsNil(request.LocalBackupDir) {
		query["LocalBackupDir"] = request.LocalBackupDir
	}

	if !dara.IsNil(request.Mode) {
		query["Mode"] = request.Mode
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyWebLockStart"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyWebLockStartResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables or disables web tamper proofing for a server.
//
// @param request - ModifyWebLockStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyWebLockStatusResponse
func (client *Client) ModifyWebLockStatusWithContext(ctx context.Context, request *ModifyWebLockStatusRequest, runtime *dara.RuntimeOptions) (_result *ModifyWebLockStatusResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyWebLockStatus"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyWebLockStatusResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Disables web tamper proofing for a specified server.
//
// @param request - ModifyWebLockUnbindRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyWebLockUnbindResponse
func (client *Client) ModifyWebLockUnbindWithContext(ctx context.Context, request *ModifyWebLockUnbindRequest, runtime *dara.RuntimeOptions) (_result *ModifyWebLockUnbindResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyWebLockUnbind"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyWebLockUnbindResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the protection policy for a specified server.
//
// @param request - ModifyWebLockUpdateConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyWebLockUpdateConfigResponse
func (client *Client) ModifyWebLockUpdateConfigWithContext(ctx context.Context, request *ModifyWebLockUpdateConfigRequest, runtime *dara.RuntimeOptions) (_result *ModifyWebLockUpdateConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DefenceMode) {
		query["DefenceMode"] = request.DefenceMode
	}

	if !dara.IsNil(request.Dir) {
		query["Dir"] = request.Dir
	}

	if !dara.IsNil(request.ExclusiveDir) {
		query["ExclusiveDir"] = request.ExclusiveDir
	}

	if !dara.IsNil(request.ExclusiveFile) {
		query["ExclusiveFile"] = request.ExclusiveFile
	}

	if !dara.IsNil(request.ExclusiveFileType) {
		query["ExclusiveFileType"] = request.ExclusiveFileType
	}

	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.InclusiveFile) {
		query["InclusiveFile"] = request.InclusiveFile
	}

	if !dara.IsNil(request.InclusiveFileType) {
		query["InclusiveFileType"] = request.InclusiveFileType
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.LocalBackupDir) {
		query["LocalBackupDir"] = request.LocalBackupDir
	}

	if !dara.IsNil(request.Mode) {
		query["Mode"] = request.Mode
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyWebLockUpdateConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyWebLockUpdateConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a custom web directory.
//
// @param request - ModifyWebPathRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyWebPathResponse
func (client *Client) ModifyWebPathWithContext(ctx context.Context, request *ModifyWebPathRequest, runtime *dara.RuntimeOptions) (_result *ModifyWebPathResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Config) {
		query["Config"] = request.Config
	}

	if !dara.IsNil(request.Target) {
		query["Target"] = request.Target
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyWebPath"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyWebPathResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables the automatic configuration of anti-ransomware policies for servers in the managed anti-ransomware feature. You can call this operation only after you purchase the managed anti-ransomware feature.
//
// @param request - OpenBackupAutoConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OpenBackupAutoConfigResponse
func (client *Client) OpenBackupAutoConfigWithContext(ctx context.Context, request *OpenBackupAutoConfigRequest, runtime *dara.RuntimeOptions) (_result *OpenBackupAutoConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.MaxBatchSize) {
		query["MaxBatchSize"] = request.MaxBatchSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("OpenBackupAutoConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &OpenBackupAutoConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 开启按量购买
//
// @param request - OpenPartialBuyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OpenPartialBuyResponse
func (client *Client) OpenPartialBuyWithContext(ctx context.Context, request *OpenPartialBuyRequest, runtime *dara.RuntimeOptions) (_result *OpenPartialBuyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("OpenPartialBuy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &OpenPartialBuyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables or disables sensitive file scan.
//
// @param request - OpenSensitiveFileScanRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OpenSensitiveFileScanResponse
func (client *Client) OpenSensitiveFileScanWithContext(ctx context.Context, request *OpenSensitiveFileScanRequest, runtime *dara.RuntimeOptions) (_result *OpenSensitiveFileScanResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SwitchOn) {
		query["SwitchOn"] = request.SwitchOn
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("OpenSensitiveFileScan"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &OpenSensitiveFileScanResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Installs the Security Center agent on servers.
//
// @param request - OperateAgentClientInstallRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OperateAgentClientInstallResponse
func (client *Client) OperateAgentClientInstallWithContext(ctx context.Context, request *OperateAgentClientInstallRequest, runtime *dara.RuntimeOptions) (_result *OperateAgentClientInstallResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.InstanceIds) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Os) {
		query["Os"] = request.Os
	}

	if !dara.IsNil(request.Region) {
		query["Region"] = request.Region
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("OperateAgentClientInstall"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &OperateAgentClientInstallResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds or deletes container applications for tamper proofing.
//
// @param request - OperateApplicationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OperateApplicationResponse
func (client *Client) OperateApplicationWithContext(ctx context.Context, request *OperateApplicationRequest, runtime *dara.RuntimeOptions) (_result *OperateApplicationResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ContainerWebDefenseApplicationDTOS) {
		query["ContainerWebDefenseApplicationDTOS"] = request.ContainerWebDefenseApplicationDTOS
	}

	if !dara.IsNil(request.RuleId) {
		query["RuleId"] = request.RuleId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("OperateApplication"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &OperateApplicationResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Manages an Object Storage Service (OSS) bucket check task.
//
// @param request - OperateBucketScanTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OperateBucketScanTaskResponse
func (client *Client) OperateBucketScanTaskWithContext(ctx context.Context, request *OperateBucketScanTaskRequest, runtime *dara.RuntimeOptions) (_result *OperateBucketScanTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BucketName) {
		query["BucketName"] = request.BucketName
	}

	if !dara.IsNil(request.OperateCode) {
		query["OperateCode"] = request.OperateCode
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("OperateBucketScanTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &OperateBucketScanTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables or disables a feature by type.
//
// @param request - OperateCommonOverallConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OperateCommonOverallConfigResponse
func (client *Client) OperateCommonOverallConfigWithContext(ctx context.Context, request *OperateCommonOverallConfigRequest, runtime *dara.RuntimeOptions) (_result *OperateCommonOverallConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Config) {
		query["Config"] = request.Config
	}

	if !dara.IsNil(request.NoTargetAsOn) {
		query["NoTargetAsOn"] = request.NoTargetAsOn
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("OperateCommonOverallConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &OperateCommonOverallConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures features by type. The features include container image scan, local file detection, container network visualization, and container escape prevention.
//
// @param request - OperateCommonTargetConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OperateCommonTargetConfigResponse
func (client *Client) OperateCommonTargetConfigWithContext(ctx context.Context, request *OperateCommonTargetConfigRequest, runtime *dara.RuntimeOptions) (_result *OperateCommonTargetConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.FieldName) {
		query["FieldName"] = request.FieldName
	}

	if !dara.IsNil(request.FieldValue) {
		query["FieldValue"] = request.FieldValue
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.TargetOperations) {
		query["TargetOperations"] = request.TargetOperations
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("OperateCommonTargetConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &OperateCommonTargetConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a check item of an image baseline to the whitelist, or removes a check item of an image baseline from the whitelist.
//
// @param request - OperateImageBaselineWhitelistRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OperateImageBaselineWhitelistResponse
func (client *Client) OperateImageBaselineWhitelistWithContext(ctx context.Context, request *OperateImageBaselineWhitelistRequest, runtime *dara.RuntimeOptions) (_result *OperateImageBaselineWhitelistResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BaselineItemKeyList) {
		query["BaselineItemKeyList"] = request.BaselineItemKeyList
	}

	if !dara.IsNil(request.ImageUuid) {
		query["ImageUuid"] = request.ImageUuid
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Operation) {
		query["Operation"] = request.Operation
	}

	if !dara.IsNil(request.ScanRange) {
		query["ScanRange"] = request.ScanRange
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("OperateImageBaselineWhitelist"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &OperateImageBaselineWhitelistResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Handles an image vulnerability, such as fixing the image vulnerability, verifying the fix of the image vulnerability, ignoring the image vulnerability, or canceling ignoring the image vulnerability.
//
// @param request - OperateImageVulRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OperateImageVulResponse
func (client *Client) OperateImageVulWithContext(ctx context.Context, request *OperateImageVulRequest, runtime *dara.RuntimeOptions) (_result *OperateImageVulResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Info) {
		query["Info"] = request.Info
	}

	if !dara.IsNil(request.OperateType) {
		query["OperateType"] = request.OperateType
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("OperateImageVul"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &OperateImageVulResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables or disables a feature that detects exceptions.
//
// @param request - OperateSuspiciousOverallConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OperateSuspiciousOverallConfigResponse
func (client *Client) OperateSuspiciousOverallConfigWithContext(ctx context.Context, request *OperateSuspiciousOverallConfigRequest, runtime *dara.RuntimeOptions) (_result *OperateSuspiciousOverallConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Config) {
		query["Config"] = request.Config
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.NoTargetAsOn) {
		query["NoTargetAsOn"] = request.NoTargetAsOn
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("OperateSuspiciousOverallConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &OperateSuspiciousOverallConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures the scope on which proactive defense takes effect.
//
// @param request - OperateSuspiciousTargetConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OperateSuspiciousTargetConfigResponse
func (client *Client) OperateSuspiciousTargetConfigWithContext(ctx context.Context, request *OperateSuspiciousTargetConfigRequest, runtime *dara.RuntimeOptions) (_result *OperateSuspiciousTargetConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.TargetOperations) {
		query["TargetOperations"] = request.TargetOperations
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("OperateSuspiciousTargetConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &OperateSuspiciousTargetConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Changes the status of a rule for container tamper-proofing.
//
// @param request - OperateSwitchStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OperateSwitchStatusResponse
func (client *Client) OperateSwitchStatusWithContext(ctx context.Context, request *OperateSwitchStatusRequest, runtime *dara.RuntimeOptions) (_result *OperateSwitchStatusResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.RuleId) {
		query["RuleId"] = request.RuleId
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("OperateSwitchStatus"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &OperateSwitchStatusResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Handles alert events that are generated by the antivirus feature. You can perform in-depth detection and removal, add alert events to the whitelist, ignore alert events, or manually handle alert events.
//
// @param request - OperateVirusEventsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OperateVirusEventsResponse
func (client *Client) OperateVirusEventsWithContext(ctx context.Context, request *OperateVirusEventsRequest, runtime *dara.RuntimeOptions) (_result *OperateVirusEventsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OperationAll) {
		query["OperationAll"] = request.OperationAll
	}

	if !dara.IsNil(request.OperationCode) {
		query["OperationCode"] = request.OperationCode
	}

	if !dara.IsNil(request.OperationRange) {
		query["OperationRange"] = request.OperationRange
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("OperateVirusEvents"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &OperateVirusEventsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Fixes Linux software vulnerabilities.
//
// @param request - OperateVulsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OperateVulsResponse
func (client *Client) OperateVulsWithContext(ctx context.Context, request *OperateVulsRequest, runtime *dara.RuntimeOptions) (_result *OperateVulsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OperateType) {
		query["OperateType"] = request.OperateType
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	if !dara.IsNil(request.VulNames) {
		query["VulNames"] = request.VulNames
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("OperateVuls"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &OperateVulsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Handles alert events that are generated for web tamper proofing.
//
// @param request - OperateWebLockFileEventsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OperateWebLockFileEventsResponse
func (client *Client) OperateWebLockFileEventsWithContext(ctx context.Context, request *OperateWebLockFileEventsRequest, runtime *dara.RuntimeOptions) (_result *OperateWebLockFileEventsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DealAll) {
		query["DealAll"] = request.DealAll
	}

	if !dara.IsNil(request.EventIds) {
		query["EventIds"] = request.EventIds
	}

	if !dara.IsNil(request.OperationCode) {
		query["OperationCode"] = request.OperationCode
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("OperateWebLockFileEvents"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &OperateWebLockFileEventsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Cancels ignoring alert events.
//
// @param request - OperationCancelIgnoreSuspEventRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OperationCancelIgnoreSuspEventResponse
func (client *Client) OperationCancelIgnoreSuspEventWithContext(ctx context.Context, request *OperationCancelIgnoreSuspEventRequest, runtime *dara.RuntimeOptions) (_result *OperationCancelIgnoreSuspEventResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.SecurityEventIds) {
		query["SecurityEventIds"] = request.SecurityEventIds
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("OperationCancelIgnoreSuspEvent"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &OperationCancelIgnoreSuspEventResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the chart of a security report.
//
// @param request - OperationCustomizeReportChartRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OperationCustomizeReportChartResponse
func (client *Client) OperationCustomizeReportChartWithContext(ctx context.Context, request *OperationCustomizeReportChartRequest, runtime *dara.RuntimeOptions) (_result *OperationCustomizeReportChartResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ChartIds) {
		query["ChartIds"] = request.ChartIds
	}

	if !dara.IsNil(request.ReportId) {
		query["ReportId"] = request.ReportId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("OperationCustomizeReportChart"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &OperationCustomizeReportChartResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Handles multiple exceptions at a time.
//
// @param request - OperationSuspEventsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OperationSuspEventsResponse
func (client *Client) OperationSuspEventsWithContext(ctx context.Context, request *OperationSuspEventsRequest, runtime *dara.RuntimeOptions) (_result *OperationSuspEventsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.Operation) {
		query["Operation"] = request.Operation
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.SubOperation) {
		query["SubOperation"] = request.SubOperation
	}

	if !dara.IsNil(request.SuspiciousEventIds) {
		query["SuspiciousEventIds"] = request.SuspiciousEventIds
	}

	if !dara.IsNil(request.WarnType) {
		query["WarnType"] = request.WarnType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("OperationSuspEvents"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &OperationSuspEventsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries image repositories by page.
//
// @param request - PageImageRegistryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PageImageRegistryResponse
func (client *Client) PageImageRegistryWithContext(ctx context.Context, request *PageImageRegistryRequest, runtime *dara.RuntimeOptions) (_result *PageImageRegistryResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		body["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.PageSize) {
		body["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegistryNameLike) {
		body["RegistryNameLike"] = request.RegistryNameLike
	}

	if !dara.IsNil(request.RegistryTypeInList) {
		body["RegistryTypeInList"] = request.RegistryTypeInList
	}

	if !dara.IsNil(request.RegistryTypeNotInList) {
		body["RegistryTypeNotInList"] = request.RegistryTypeNotInList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("PageImageRegistry"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &PageImageRegistryResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables or disables the Security Center agent.
//
// @param request - PauseClientRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PauseClientResponse
func (client *Client) PauseClientWithContext(ctx context.Context, request *PauseClientRequest, runtime *dara.RuntimeOptions) (_result *PauseClientResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	if !dara.IsNil(request.Value) {
		query["Value"] = request.Value
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("PauseClient"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &PauseClientResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Modify the status of strategy tasks
//
// Description:
//
// This API call is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.
//
// @param request - ProcessSoarStrategyTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ProcessSoarStrategyTaskResponse
func (client *Client) ProcessSoarStrategyTaskWithContext(ctx context.Context, request *ProcessSoarStrategyTaskRequest, runtime *dara.RuntimeOptions) (_result *ProcessSoarStrategyTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.StrategyTaskId) {
		query["StrategyTaskId"] = request.StrategyTaskId
	}

	if !dara.IsNil(request.TaskAction) {
		query["TaskAction"] = request.TaskAction
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ProcessSoarStrategyTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ProcessSoarStrategyTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an image scan task.
//
// Description:
//
// Before you call the PublicCreateImageScanTask operation, we recommend that you call the [PublicPreCheckImageScanTask](~~PublicPreCheckImageScanTask~~) operation to query the number of images to scan and the quota for container image scan to be consumed by the image scan task. Make sure that the remaining quota for container image scan is sufficient. This prevents the task from being stopped due to an insufficient quota.
//
// @param request - PublicCreateImageScanTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PublicCreateImageScanTaskResponse
func (client *Client) PublicCreateImageScanTaskWithContext(ctx context.Context, request *PublicCreateImageScanTaskRequest, runtime *dara.RuntimeOptions) (_result *PublicCreateImageScanTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Digests) {
		query["Digests"] = request.Digests
	}

	if !dara.IsNil(request.InstanceIds) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !dara.IsNil(request.RegionIds) {
		query["RegionIds"] = request.RegionIds
	}

	if !dara.IsNil(request.RegistryTypes) {
		query["RegistryTypes"] = request.RegistryTypes
	}

	if !dara.IsNil(request.RepoIds) {
		query["RepoIds"] = request.RepoIds
	}

	if !dara.IsNil(request.RepoNames) {
		query["RepoNames"] = request.RepoNames
	}

	if !dara.IsNil(request.RepoNamespaces) {
		query["RepoNamespaces"] = request.RepoNamespaces
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Tags) {
		query["Tags"] = request.Tags
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("PublicCreateImageScanTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &PublicCreateImageScanTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of images to scan in an image scan task and the quota for container image scan to be consumed by the task.
//
// Description:
//
// You can call the PublicPreCheckImageScanTask operation to estimate the quota for container image scan to be consumed by the task. This ensures that you know the quota to be consumed before you perform the task. If the remaining quota for container image scan is less than the quota to be consumed by the task, you must purchase a sufficient quota. This prevents the task from being stopped due to an insufficient quota.
//
// If you do not specify the optional parameters when you call this operation, the total number of protected images and the quota for container image scan to be consumed by scanning all the protected images are queried. If you specify the optional parameters, the number of images that meet the specified conditions and the quota for container image scan to be consumed by scanning the images are queried.
//
// @param request - PublicPreCheckImageScanTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PublicPreCheckImageScanTaskResponse
func (client *Client) PublicPreCheckImageScanTaskWithContext(ctx context.Context, request *PublicPreCheckImageScanTaskRequest, runtime *dara.RuntimeOptions) (_result *PublicPreCheckImageScanTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Digests) {
		query["Digests"] = request.Digests
	}

	if !dara.IsNil(request.InstanceIds) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !dara.IsNil(request.RegionIds) {
		query["RegionIds"] = request.RegionIds
	}

	if !dara.IsNil(request.RegistryTypes) {
		query["RegistryTypes"] = request.RegistryTypes
	}

	if !dara.IsNil(request.RepoIds) {
		query["RepoIds"] = request.RepoIds
	}

	if !dara.IsNil(request.RepoNames) {
		query["RepoNames"] = request.RepoNames
	}

	if !dara.IsNil(request.RepoNamespaces) {
		query["RepoNamespaces"] = request.RepoNamespaces
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Tags) {
		query["Tags"] = request.Tags
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("PublicPreCheckImageScanTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &PublicPreCheckImageScanTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds images to Security Center and creates an image scan task to scan the images.
//
// @param request - PublicSyncAndCreateImageScanTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PublicSyncAndCreateImageScanTaskResponse
func (client *Client) PublicSyncAndCreateImageScanTaskWithContext(ctx context.Context, request *PublicSyncAndCreateImageScanTaskRequest, runtime *dara.RuntimeOptions) (_result *PublicSyncAndCreateImageScanTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Images) {
		query["Images"] = request.Images
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("PublicSyncAndCreateImageScanTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &PublicSyncAndCreateImageScanTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of alert events in each attack phase.
//
// @param request - QueryAttackCountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryAttackCountResponse
func (client *Client) QueryAttackCountWithContext(ctx context.Context, request *QueryAttackCountRequest, runtime *dara.RuntimeOptions) (_result *QueryAttackCountResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.From) {
		body["From"] = request.From
	}

	if !dara.IsNil(request.Lang) {
		body["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("QueryAttackCount"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &QueryAttackCountResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the progress of a database scan task.
//
// @param request - QueryDiscoverDatabaseRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryDiscoverDatabaseResponse
func (client *Client) QueryDiscoverDatabaseWithContext(ctx context.Context, request *QueryDiscoverDatabaseRequest, runtime *dara.RuntimeOptions) (_result *QueryDiscoverDatabaseResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CreateMark) {
		query["CreateMark"] = request.CreateMark
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("QueryDiscoverDatabase"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &QueryDiscoverDatabaseResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the ID of an asset group by using the name of the asset group.
//
// Description:
//
// You can call the QueryGroupIdByGroupName operation to query the ID of an asset group to which your assets belong by using the name of the asset group. When you call operations such as [GetSuspiciousStatistics](~~GetSuspiciousStatistics~~) and [DeleteGroup](~~DeleteGroup~~), you must specify the ID of the asset group. To query the ID of an asset group, call the QueryGroupIdByGroupName operation.
//
// ### Limits
//
// You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - QueryGroupIdByGroupNameRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryGroupIdByGroupNameResponse
func (client *Client) QueryGroupIdByGroupNameWithContext(ctx context.Context, request *QueryGroupIdByGroupNameRequest, runtime *dara.RuntimeOptions) (_result *QueryGroupIdByGroupNameResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.GroupName) {
		query["GroupName"] = request.GroupName
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("QueryGroupIdByGroupName"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &QueryGroupIdByGroupNameResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries whitelist rules.
//
// @param request - QueryGroupedSecurityEventMarkMissListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryGroupedSecurityEventMarkMissListResponse
func (client *Client) QueryGroupedSecurityEventMarkMissListWithContext(ctx context.Context, request *QueryGroupedSecurityEventMarkMissListRequest, runtime *dara.RuntimeOptions) (_result *QueryGroupedSecurityEventMarkMissListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DisposalWay) {
		query["DisposalWay"] = request.DisposalWay
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.CurrentPage) {
		body["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.EventName) {
		body["EventName"] = request.EventName
	}

	if !dara.IsNil(request.From) {
		body["From"] = request.From
	}

	if !dara.IsNil(request.Lang) {
		body["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		body["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Remark) {
		body["Remark"] = request.Remark
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("QueryGroupedSecurityEventMarkMissList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &QueryGroupedSecurityEventMarkMissListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the retention period of images that are stored in a Jenkins image repository.
//
// @param request - QueryJenkinsImageRegistryPersistenceDayRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryJenkinsImageRegistryPersistenceDayResponse
func (client *Client) QueryJenkinsImageRegistryPersistenceDayWithContext(ctx context.Context, request *QueryJenkinsImageRegistryPersistenceDayRequest, runtime *dara.RuntimeOptions) (_result *QueryJenkinsImageRegistryPersistenceDayResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("QueryJenkinsImageRegistryPersistenceDay"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &QueryJenkinsImageRegistryPersistenceDayResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the result of a database precheck task.
//
// @param request - QueryPreCheckDatabaseRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryPreCheckDatabaseResponse
func (client *Client) QueryPreCheckDatabaseWithContext(ctx context.Context, request *QueryPreCheckDatabaseRequest, runtime *dara.RuntimeOptions) (_result *QueryPreCheckDatabaseResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.InstanceUuid) {
		query["InstanceUuid"] = request.InstanceUuid
	}

	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	if !dara.IsNil(request.UniRegionId) {
		query["UniRegionId"] = request.UniRegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("QueryPreCheckDatabase"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &QueryPreCheckDatabaseResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Restarts a server. Only Windows servers are supported.
//
// @param request - RebootMachineRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RebootMachineResponse
func (client *Client) RebootMachineWithContext(ctx context.Context, request *RebootMachineRequest, runtime *dara.RuntimeOptions) (_result *RebootMachineResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("RebootMachine"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &RebootMachineResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Receives a reward that allows you to enable a free trial of the cloud honeypot feature or the feature of SDK for malicious file detection. You can receive a reward after you complete the required task.
//
// @param request - ReceiveFunctionTrialRewardByAliUidRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ReceiveFunctionTrialRewardByAliUidResponse
func (client *Client) ReceiveFunctionTrialRewardByAliUidWithContext(ctx context.Context, request *ReceiveFunctionTrialRewardByAliUidRequest, runtime *dara.RuntimeOptions) (_result *ReceiveFunctionTrialRewardByAliUidResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.FunctionName) {
		query["FunctionName"] = request.FunctionName
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ReceiveFunctionTrialRewardByAliUid"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ReceiveFunctionTrialRewardByAliUidResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Synchronizes assets.
//
// @param request - RefreshAssetsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RefreshAssetsResponse
func (client *Client) RefreshAssetsWithContext(ctx context.Context, request *RefreshAssetsRequest, runtime *dara.RuntimeOptions) (_result *RefreshAssetsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AssetType) {
		query["AssetType"] = request.AssetType
	}

	if !dara.IsNil(request.CloudAssetSubType) {
		query["CloudAssetSubType"] = request.CloudAssetSubType
	}

	if !dara.IsNil(request.CloudAssetType) {
		query["CloudAssetType"] = request.CloudAssetType
	}

	if !dara.IsNil(request.Vendor) {
		query["Vendor"] = request.Vendor
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("RefreshAssets"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &RefreshAssetsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Refreshes the statistics of container assets in the Assets module.
//
// @param request - RefreshContainerAssetsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RefreshContainerAssetsResponse
func (client *Client) RefreshContainerAssetsWithContext(ctx context.Context, request *RefreshContainerAssetsRequest, runtime *dara.RuntimeOptions) (_result *RefreshContainerAssetsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AssetType) {
		query["AssetType"] = request.AssetType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("RefreshContainerAssets"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &RefreshContainerAssetsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates an image token.
//
// @param request - RefreshRegistryTokenRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RefreshRegistryTokenResponse
func (client *Client) RefreshRegistryTokenWithContext(ctx context.Context, request *RefreshRegistryTokenRequest, runtime *dara.RuntimeOptions) (_result *RefreshRegistryTokenResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.RegistryId) {
		query["RegistryId"] = request.RegistryId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("RefreshRegistryToken"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &RefreshRegistryTokenResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 释放云安全中心实例
//
// @param request - ReleaseSasInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ReleaseSasInstanceResponse
func (client *Client) ReleaseSasInstanceWithContext(ctx context.Context, request *ReleaseSasInstanceRequest, runtime *dara.RuntimeOptions) (_result *ReleaseSasInstanceResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	body := map[string]interface{}{}
	if !dara.IsNil(request.ChargeType) {
		body["ChargeType"] = request.ChargeType
	}

	if !dara.IsNil(request.InstanceId) {
		body["InstanceId"] = request.InstanceId
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ReleaseSasInstance"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ReleaseSasInstanceResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes an instance from the whitelist.
//
// @param request - RemoveCheckInstanceResultWhiteListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveCheckInstanceResultWhiteListResponse
func (client *Client) RemoveCheckInstanceResultWhiteListWithContext(ctx context.Context, request *RemoveCheckInstanceResultWhiteListRequest, runtime *dara.RuntimeOptions) (_result *RemoveCheckInstanceResultWhiteListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckId) {
		query["CheckId"] = request.CheckId
	}

	if !dara.IsNil(request.InstanceIds) {
		query["InstanceIds"] = request.InstanceIds
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("RemoveCheckInstanceResultWhiteList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &RemoveCheckInstanceResultWhiteListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes the check items of the configuration assessment feature from the whitelist.
//
// @param request - RemoveCheckResultWhiteListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveCheckResultWhiteListResponse
func (client *Client) RemoveCheckResultWhiteListWithContext(ctx context.Context, request *RemoveCheckResultWhiteListRequest, runtime *dara.RuntimeOptions) (_result *RemoveCheckResultWhiteListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckGroupId) {
		query["CheckGroupId"] = request.CheckGroupId
	}

	if !dara.IsNil(request.CheckIds) {
		query["CheckIds"] = request.CheckIds
	}

	if !dara.IsNil(request.RuleId) {
		query["RuleId"] = request.RuleId
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("RemoveCheckResultWhiteList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &RemoveCheckResultWhiteListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Resets a honeypot.
//
// @param request - ResetHoneypotRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResetHoneypotResponse
func (client *Client) ResetHoneypotWithContext(ctx context.Context, request *ResetHoneypotRequest, runtime *dara.RuntimeOptions) (_result *ResetHoneypotResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.HoneypotId) {
		query["HoneypotId"] = request.HoneypotId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ResetHoneypot"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ResetHoneypotResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Resets and upgrades the log analysis feature. You can call this operation only when the log analysis feature uses the pay-as-you-go billing method.
//
// @param request - ResetLogShipperRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResetLogShipperResponse
func (client *Client) ResetLogShipperWithContext(ctx context.Context, request *ResetLogShipperRequest, runtime *dara.RuntimeOptions) (_result *ResetLogShipperResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.HotTtl) {
		query["HotTtl"] = request.HotTtl
	}

	if !dara.IsNil(request.LogMetaList) {
		query["LogMetaList"] = request.LogMetaList
	}

	if !dara.IsNil(request.Ttl) {
		query["Ttl"] = request.Ttl
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ResetLogShipper"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ResetLogShipperResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Retries agentless detection tasks.
//
// @param request - RetryAgentlessTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RetryAgentlessTaskResponse
func (client *Client) RetryAgentlessTaskWithContext(ctx context.Context, request *RetryAgentlessTaskRequest, runtime *dara.RuntimeOptions) (_result *RetryAgentlessTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("RetryAgentlessTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &RetryAgentlessTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Retry installing the honeypot probe.
//
// @param request - RetryInstallProbeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RetryInstallProbeResponse
func (client *Client) RetryInstallProbeWithContext(ctx context.Context, request *RetryInstallProbeRequest, runtime *dara.RuntimeOptions) (_result *RetryInstallProbeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ProbeId) {
		query["ProbeId"] = request.ProbeId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("RetryInstallProbe"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &RetryInstallProbeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Restores a quarantined file.
//
// @param request - RollbackSuspEventQuaraFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RollbackSuspEventQuaraFileResponse
func (client *Client) RollbackSuspEventQuaraFileWithContext(ctx context.Context, request *RollbackSuspEventQuaraFileRequest, runtime *dara.RuntimeOptions) (_result *RollbackSuspEventQuaraFileResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.QuaraFileId) {
		query["QuaraFileId"] = request.QuaraFileId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("RollbackSuspEventQuaraFile"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &RollbackSuspEventQuaraFileResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the installation verification code that is used to run the installation command of the Security Center agent.
//
// @param request - SasInstallCodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SasInstallCodeResponse
func (client *Client) SasInstallCodeWithContext(ctx context.Context, request *SasInstallCodeRequest, runtime *dara.RuntimeOptions) (_result *SasInstallCodeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SasInstallCode"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SasInstallCodeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Saves the configurations of a custom security report.
//
// @param request - SaveCustomizeReportConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SaveCustomizeReportConfigResponse
func (client *Client) SaveCustomizeReportConfigWithContext(ctx context.Context, request *SaveCustomizeReportConfigRequest, runtime *dara.RuntimeOptions) (_result *SaveCustomizeReportConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.GroupType) {
		query["GroupType"] = request.GroupType
	}

	if !dara.IsNil(request.MemberAccountSyncFlag) {
		query["MemberAccountSyncFlag"] = request.MemberAccountSyncFlag
	}

	if !dara.IsNil(request.PinnedTime) {
		query["PinnedTime"] = request.PinnedTime
	}

	if !dara.IsNil(request.Recipients) {
		query["Recipients"] = request.Recipients
	}

	if !dara.IsNil(request.ReportDays) {
		query["ReportDays"] = request.ReportDays
	}

	if !dara.IsNil(request.ReportEndDate) {
		query["ReportEndDate"] = request.ReportEndDate
	}

	if !dara.IsNil(request.ReportId) {
		query["ReportId"] = request.ReportId
	}

	if !dara.IsNil(request.ReportLang) {
		query["ReportLang"] = request.ReportLang
	}

	if !dara.IsNil(request.ReportSendType) {
		query["ReportSendType"] = request.ReportSendType
	}

	if !dara.IsNil(request.ReportStartDate) {
		query["ReportStartDate"] = request.ReportStartDate
	}

	if !dara.IsNil(request.ReportStatus) {
		query["ReportStatus"] = request.ReportStatus
	}

	if !dara.IsNil(request.ReportType) {
		query["ReportType"] = request.ReportType
	}

	if !dara.IsNil(request.ReportVersion) {
		query["ReportVersion"] = request.ReportVersion
	}

	if !dara.IsNil(request.SendEndTime) {
		query["SendEndTime"] = request.SendEndTime
	}

	if !dara.IsNil(request.SendPeriodDays) {
		query["SendPeriodDays"] = request.SendPeriodDays
	}

	if !dara.IsNil(request.SendPeriodType) {
		query["SendPeriodType"] = request.SendPeriodType
	}

	if !dara.IsNil(request.SendStartTime) {
		query["SendStartTime"] = request.SendStartTime
	}

	if !dara.IsNil(request.TargetGroups) {
		query["TargetGroups"] = request.TargetGroups
	}

	if !dara.IsNil(request.TargetUids) {
		query["TargetUids"] = request.TargetUids
	}

	if !dara.IsNil(request.Title) {
		query["Title"] = request.Title
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SaveCustomizeReportConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SaveCustomizeReportConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Saves a baseline check policy for images.
//
// @param request - SaveImageBaselineStrategyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SaveImageBaselineStrategyResponse
func (client *Client) SaveImageBaselineStrategyWithContext(ctx context.Context, request *SaveImageBaselineStrategyRequest, runtime *dara.RuntimeOptions) (_result *SaveImageBaselineStrategyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BaselineItemList) {
		query["BaselineItemList"] = request.BaselineItemList
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	if !dara.IsNil(request.StrategyId) {
		query["StrategyId"] = request.StrategyId
	}

	if !dara.IsNil(request.StrategyName) {
		query["StrategyName"] = request.StrategyName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SaveImageBaselineStrategy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SaveImageBaselineStrategyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Saves alert settings.
//
// @param request - SaveSuspEventUserSettingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SaveSuspEventUserSettingResponse
func (client *Client) SaveSuspEventUserSettingWithContext(ctx context.Context, request *SaveSuspEventUserSettingRequest, runtime *dara.RuntimeOptions) (_result *SaveSuspEventUserSettingResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.From) {
		query["From"] = request.From
	}

	if !dara.IsNil(request.LevelsOn) {
		query["LevelsOn"] = request.LevelsOn
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SaveSuspEventUserSetting"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SaveSuspEventUserSettingResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an application whitelist policy.
//
// Description:
//
// The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or enabled the feature, you can call this operation.
//
// @param request - SaveWhiteListStrategyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SaveWhiteListStrategyResponse
func (client *Client) SaveWhiteListStrategyWithContext(ctx context.Context, request *SaveWhiteListStrategyRequest, runtime *dara.RuntimeOptions) (_result *SaveWhiteListStrategyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.StrategyId) {
		query["StrategyId"] = request.StrategyId
	}

	if !dara.IsNil(request.StrategyName) {
		query["StrategyName"] = request.StrategyName
	}

	if !dara.IsNil(request.StudyTime) {
		query["StudyTime"] = request.StudyTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SaveWhiteListStrategy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SaveWhiteListStrategyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Manages the servers to which an application whitelist policy is applied.
//
// @param request - SaveWhiteListStrategyAssetsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SaveWhiteListStrategyAssetsResponse
func (client *Client) SaveWhiteListStrategyAssetsWithContext(ctx context.Context, request *SaveWhiteListStrategyAssetsRequest, runtime *dara.RuntimeOptions) (_result *SaveWhiteListStrategyAssetsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Operations) {
		query["Operations"] = request.Operations
	}

	if !dara.IsNil(request.RelationType) {
		query["RelationType"] = request.RelationType
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.StrategyId) {
		query["StrategyId"] = request.StrategyId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SaveWhiteListStrategyAssets"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SaveWhiteListStrategyAssetsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Sends a security report to an email address that you specify. You can send only a security report whose statistics are collected in a custom time range.
//
// @param request - SendCustomizeReportRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SendCustomizeReportResponse
func (client *Client) SendCustomizeReportWithContext(ctx context.Context, request *SendCustomizeReportRequest, runtime *dara.RuntimeOptions) (_result *SendCustomizeReportResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ReportId) {
		query["ReportId"] = request.ReportId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SendCustomizeReport"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SendCustomizeReportResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies configurations for scanning image build command risks.
//
// @param request - SetBuildRiskDefineRuleConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetBuildRiskDefineRuleConfigResponse
func (client *Client) SetBuildRiskDefineRuleConfigWithContext(ctx context.Context, request *SetBuildRiskDefineRuleConfigRequest, runtime *dara.RuntimeOptions) (_result *SetBuildRiskDefineRuleConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Config) {
		query["Config"] = request.Config
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SetBuildRiskDefineRuleConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SetBuildRiskDefineRuleConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures the status of the container firewall feature.
//
// @param request - SetClusterInterceptionConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetClusterInterceptionConfigResponse
func (client *Client) SetClusterInterceptionConfigWithContext(ctx context.Context, request *SetClusterInterceptionConfigRequest, runtime *dara.RuntimeOptions) (_result *SetClusterInterceptionConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterIds) {
		query["ClusterIds"] = request.ClusterIds
	}

	if !dara.IsNil(request.SwitchOn) {
		query["SwitchOn"] = request.SwitchOn
	}

	if !dara.IsNil(request.SwitchType) {
		query["SwitchType"] = request.SwitchType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SetClusterInterceptionConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SetClusterInterceptionConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Specifies the status of an image build command risk.
//
// @param request - SetImageBuildRiskStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetImageBuildRiskStatusResponse
func (client *Client) SetImageBuildRiskStatusWithContext(ctx context.Context, request *SetImageBuildRiskStatusRequest, runtime *dara.RuntimeOptions) (_result *SetImageBuildRiskStatusResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ImageUuids) {
		query["ImageUuids"] = request.ImageUuids
	}

	if !dara.IsNil(request.RiskKey) {
		query["RiskKey"] = request.RiskKey
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SetImageBuildRiskStatus"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SetImageBuildRiskStatusResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the status of sensitive files in an image.
//
// @param tmpReq - SetImageSensitiveFileStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetImageSensitiveFileStatusResponse
func (client *Client) SetImageSensitiveFileStatusWithContext(ctx context.Context, tmpReq *SetImageSensitiveFileStatusRequest, runtime *dara.RuntimeOptions) (_result *SetImageSensitiveFileStatusResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &SetImageSensitiveFileStatusShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.ScanRange) {
		request.ScanRangeShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScanRange, dara.String("ScanRange"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.IdList) {
		query["IdList"] = request.IdList
	}

	if !dara.IsNil(request.ImageUuids) {
		query["ImageUuids"] = request.ImageUuids
	}

	if !dara.IsNil(request.ScanRangeShrink) {
		query["ScanRange"] = request.ScanRangeShrink
	}

	if !dara.IsNil(request.SensitiveFileKey) {
		query["SensitiveFileKey"] = request.SensitiveFileKey
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SetImageSensitiveFileStatus"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SetImageSensitiveFileStatusResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Specifies a cycle to scan images for image repositories. Unit: days.
//
// @param request - SetRegistryScanDayNumRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetRegistryScanDayNumResponse
func (client *Client) SetRegistryScanDayNumWithContext(ctx context.Context, request *SetRegistryScanDayNumRequest, runtime *dara.RuntimeOptions) (_result *SetRegistryScanDayNumResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ScanDayNum) {
		query["ScanDayNum"] = request.ScanDayNum
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SetRegistryScanDayNum"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SetRegistryScanDayNumResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configure the check rules of sensitive files.
//
// @param request - SetSensitiveDefineRuleConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetSensitiveDefineRuleConfigResponse
func (client *Client) SetSensitiveDefineRuleConfigWithContext(ctx context.Context, request *SetSensitiveDefineRuleConfigRequest, runtime *dara.RuntimeOptions) (_result *SetSensitiveDefineRuleConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Config) {
		query["Config"] = request.Config
	}

	if !dara.IsNil(request.EnableNewRule) {
		query["EnableNewRule"] = request.EnableNewRule
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SetSensitiveDefineRuleConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SetSensitiveDefineRuleConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures the regions from which you want to synchronize assets.
//
// @param request - SetSyncRefreshRegionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetSyncRefreshRegionResponse
func (client *Client) SetSyncRefreshRegionWithContext(ctx context.Context, request *SetSyncRefreshRegionRequest, runtime *dara.RuntimeOptions) (_result *SetSyncRefreshRegionResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DefaultRegion) {
		query["DefaultRegion"] = request.DefaultRegion
	}

	if !dara.IsNil(request.RegionIds) {
		query["RegionIds"] = request.RegionIds
	}

	if !dara.IsNil(request.Vendor) {
		query["Vendor"] = request.Vendor
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SetSyncRefreshRegion"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SetSyncRefreshRegionResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI StartBaselineSecurityCheck is deprecated, please use Sas::2018-12-03::SubmitCheck instead.
//
// Summary:
//
// Checks cloud service configurations. You can check all items or a single item and verify whether an item is checked.
//
// @param request - StartBaselineSecurityCheckRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartBaselineSecurityCheckResponse
func (client *Client) StartBaselineSecurityCheckWithContext(ctx context.Context, request *StartBaselineSecurityCheckRequest, runtime *dara.RuntimeOptions) (_result *StartBaselineSecurityCheckResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ItemIds) {
		query["ItemIds"] = request.ItemIds
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StartBaselineSecurityCheck"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &StartBaselineSecurityCheckResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Starts a honeypot.
//
// @param request - StartHoneypotRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartHoneypotResponse
func (client *Client) StartHoneypotWithContext(ctx context.Context, request *StartHoneypotRequest, runtime *dara.RuntimeOptions) (_result *StartHoneypotResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.HoneypotId) {
		query["HoneypotId"] = request.HoneypotId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StartHoneypot"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &StartHoneypotResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Starts a database precheck task.
//
// @param request - StartPreCheckDatabaseRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartPreCheckDatabaseResponse
func (client *Client) StartPreCheckDatabaseWithContext(ctx context.Context, request *StartPreCheckDatabaseRequest, runtime *dara.RuntimeOptions) (_result *StartPreCheckDatabaseResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DatabaseType) {
		query["DatabaseType"] = request.DatabaseType
	}

	if !dara.IsNil(request.InstanceUuid) {
		query["InstanceUuid"] = request.InstanceUuid
	}

	if !dara.IsNil(request.UniRegionId) {
		query["UniRegionId"] = request.UniRegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StartPreCheckDatabase"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &StartPreCheckDatabaseResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Performs a virus scan task on a server or multiple servers.
//
// @param request - StartVirusScanTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartVirusScanTaskResponse
func (client *Client) StartVirusScanTaskWithContext(ctx context.Context, request *StartVirusScanTaskRequest, runtime *dara.RuntimeOptions) (_result *StartVirusScanTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.TargetInfo) {
		query["TargetInfo"] = request.TargetInfo
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StartVirusScanTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &StartVirusScanTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Stops a honeypot.
//
// @param request - StopHoneypotRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopHoneypotResponse
func (client *Client) StopHoneypotWithContext(ctx context.Context, request *StopHoneypotRequest, runtime *dara.RuntimeOptions) (_result *StopHoneypotResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.HoneypotId) {
		query["HoneypotId"] = request.HoneypotId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StopHoneypot"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &StopHoneypotResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a configuration assessment task.
//
// @param request - SubmitCheckRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitCheckResponse
func (client *Client) SubmitCheckWithContext(ctx context.Context, request *SubmitCheckRequest, runtime *dara.RuntimeOptions) (_result *SubmitCheckResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ScanRange) {
		query["ScanRange"] = request.ScanRange
	}

	if !dara.IsNil(request.TaskSource) {
		query["TaskSource"] = request.TaskSource
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SubmitCheck"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SubmitCheckResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Submits a repair task of risk items detected in configuration assessment or rolls back a repair task that is executed.
//
// @param request - SubmitOperationTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitOperationTaskResponse
func (client *Client) SubmitOperationTaskWithContext(ctx context.Context, request *SubmitOperationTaskRequest, runtime *dara.RuntimeOptions) (_result *SubmitOperationTaskResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckId) {
		query["CheckId"] = request.CheckId
	}

	if !dara.IsNil(request.DimensionType) {
		query["DimensionType"] = request.DimensionType
	}

	if !dara.IsNil(request.OperationTaskInstances) {
		query["OperationTaskInstances"] = request.OperationTaskInstances
	}

	if !dara.IsNil(request.RelationKey) {
		query["RelationKey"] = request.RelationKey
	}

	if !dara.IsNil(request.RepairTempParam) {
		query["RepairTempParam"] = request.RepairTempParam
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SubmitOperationTask"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SubmitOperationTaskResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes servers from a proxy cluster.
//
// @param request - UnBindHybridProxyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnBindHybridProxyResponse
func (client *Client) UnBindHybridProxyWithContext(ctx context.Context, request *UnBindHybridProxyRequest, runtime *dara.RuntimeOptions) (_result *UnBindHybridProxyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterName) {
		query["ClusterName"] = request.ClusterName
	}

	if !dara.IsNil(request.YundunUuids) {
		query["YundunUuids"] = request.YundunUuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UnBindHybridProxy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UnBindHybridProxyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Cancel marking for members. You can call this operation to remove followed members from the list. In the Security Center console, the drop-down list above the left-side navigation pane no longer displays the members.
//
// @param request - UnMarkMonitorAccountsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnMarkMonitorAccountsResponse
func (client *Client) UnMarkMonitorAccountsWithContext(ctx context.Context, request *UnMarkMonitorAccountsRequest, runtime *dara.RuntimeOptions) (_result *UnMarkMonitorAccountsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AccountIds) {
		query["AccountIds"] = request.AccountIds
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UnMarkMonitorAccounts"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UnMarkMonitorAccountsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Unbinds servers that are not deployed on Alibaba Cloud from Security Center.
//
// Description:
//
// If you no longer require protection for servers that are not deployed on Alibaba Cloud, you can call this operation to unbind the servers from Security Center. After you unbind a server that is not deployed on Alibaba Cloud from Security Center, the server no longer consumes the quota of protected servers or protected server vCPUs. This way, you can install the Security Center agent on other servers to meet your business requirements.
//
// > You can unbind only the servers that are not deployed on Alibaba Cloud from Security Center. If you use an Alibaba Cloud Elastic Compute Service (ECS) instance, you do not need to unbind the ECS instance. If you uninstall the Security Center agent from an ECS instance, the ECS instance still exists as a disconnected server in the asset list of the Security Center console. The ECS instance is not removed from the asset list.
//
// **Prerequisites**
//
//   - The server that you want to unbind from Security Center is not deployed on Alibaba Cloud and the Security Center agent is disabled for the server. In this case, the agent is in the Close state and Security Center does not protect the server. You can call the [PauseClient](~~PauseClient~~) operation to disable the agent.
//
//   - The client protection feature is disabled for the server that you want to unbind from Security Center. For more information about how to disable the client protection feature, see [Use the client protection feature](https://www.alibabacloud.com/help/en/security-center/latest/local-file-detection-engine).
//
// @param request - UnbindAegisRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnbindAegisResponse
func (client *Client) UnbindAegisWithContext(ctx context.Context, request *UnbindAegisRequest, runtime *dara.RuntimeOptions) (_result *UnbindAegisResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UnbindAegis"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UnbindAegisResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Uninstalls the anti-ransomware agent.
//
// @param request - UninstallBackupClientRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UninstallBackupClientResponse
func (client *Client) UninstallBackupClientWithContext(ctx context.Context, request *UninstallBackupClientRequest, runtime *dara.RuntimeOptions) (_result *UninstallBackupClientResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.PolicyVersion) {
		query["PolicyVersion"] = request.PolicyVersion
	}

	if !dara.IsNil(request.Uuid) {
		query["Uuid"] = request.Uuid
	}

	if !dara.IsNil(request.UuidList) {
		query["UuidList"] = request.UuidList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UninstallBackupClient"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UninstallBackupClientResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Uninstalls the database backup agent.
//
// @param request - UninstallUniBackupAgentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UninstallUniBackupAgentResponse
func (client *Client) UninstallUniBackupAgentWithContext(ctx context.Context, request *UninstallUniBackupAgentRequest, runtime *dara.RuntimeOptions) (_result *UninstallUniBackupAgentResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.PolicyId) {
		query["PolicyId"] = request.PolicyId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UninstallUniBackupAgent"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UninstallUniBackupAgentResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the status of the honeypot installation time.
//
// @param request - UpdateAlarmEventRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateAlarmEventResponse
func (client *Client) UpdateAlarmEventWithContext(ctx context.Context, request *UpdateAlarmEventRequest, runtime *dara.RuntimeOptions) (_result *UpdateAlarmEventResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	body := map[string]interface{}{}
	if !dara.IsNil(request.AlarmEventIdList) {
		body["AlarmEventIdList"] = request.AlarmEventIdList
	}

	if !dara.IsNil(request.Lang) {
		body["Lang"] = request.Lang
	}

	if !dara.IsNil(request.OperationCode) {
		body["OperationCode"] = request.OperationCode
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateAlarmEvent"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateAlarmEventResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Update the configuration of sensitive assets in the attack path.
//
// @param request - UpdateAttackPathSensitiveAssetConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateAttackPathSensitiveAssetConfigResponse
func (client *Client) UpdateAttackPathSensitiveAssetConfigWithContext(ctx context.Context, request *UpdateAttackPathSensitiveAssetConfigRequest, runtime *dara.RuntimeOptions) (_result *UpdateAttackPathSensitiveAssetConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AttackPathAssetList) {
		query["AttackPathAssetList"] = request.AttackPathAssetList
	}

	if !dara.IsNil(request.AttackPathSensitiveAssetConfigId) {
		query["AttackPathSensitiveAssetConfigId"] = request.AttackPathSensitiveAssetConfigId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateAttackPathSensitiveAssetConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateAttackPathSensitiveAssetConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Update Attack Path Whitelist.
//
// @param request - UpdateAttackPathWhitelistRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateAttackPathWhitelistResponse
func (client *Client) UpdateAttackPathWhitelistWithContext(ctx context.Context, request *UpdateAttackPathWhitelistRequest, runtime *dara.RuntimeOptions) (_result *UpdateAttackPathWhitelistResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AttackPathAssetList) {
		query["AttackPathAssetList"] = request.AttackPathAssetList
	}

	if !dara.IsNil(request.AttackPathWhitelistId) {
		query["AttackPathWhitelistId"] = request.AttackPathWhitelistId
	}

	if !dara.IsNil(request.PathName) {
		query["PathName"] = request.PathName
	}

	if !dara.IsNil(request.PathType) {
		query["PathType"] = request.PathType
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	if !dara.IsNil(request.WhitelistName) {
		query["WhitelistName"] = request.WhitelistName
	}

	if !dara.IsNil(request.WhitelistType) {
		query["WhitelistType"] = request.WhitelistType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateAttackPathWhitelist"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateAttackPathWhitelistResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the whitelist rule for a baseline check item.
//
// @param request - UpdateBaselineCheckWhiteRecordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateBaselineCheckWhiteRecordResponse
func (client *Client) UpdateBaselineCheckWhiteRecordWithContext(ctx context.Context, request *UpdateBaselineCheckWhiteRecordRequest, runtime *dara.RuntimeOptions) (_result *UpdateBaselineCheckWhiteRecordResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckId) {
		query["CheckId"] = request.CheckId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Reason) {
		query["Reason"] = request.Reason
	}

	if !dara.IsNil(request.RecordId) {
		query["RecordId"] = request.RecordId
	}

	if !dara.IsNil(request.RemoveContainerUuids) {
		query["RemoveContainerUuids"] = request.RemoveContainerUuids
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateBaselineCheckWhiteRecord"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateBaselineCheckWhiteRecordResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies alerting settings for servers.
//
// @param request - UpdateClientAlertModeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateClientAlertModeResponse
func (client *Client) UpdateClientAlertModeWithContext(ctx context.Context, request *UpdateClientAlertModeRequest, runtime *dara.RuntimeOptions) (_result *UpdateClientAlertModeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Mode) {
		query["Mode"] = request.Mode
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateClientAlertMode"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateClientAlertModeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the settings of common switches.
//
// @param request - UpdateCommonSwitchConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateCommonSwitchConfigResponse
func (client *Client) UpdateCommonSwitchConfigWithContext(ctx context.Context, request *UpdateCommonSwitchConfigRequest, runtime *dara.RuntimeOptions) (_result *UpdateCommonSwitchConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.TargetDefault) {
		query["TargetDefault"] = request.TargetDefault
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateCommonSwitchConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateCommonSwitchConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Changes the status of a security report.
//
// @param request - UpdateCustomizeReportStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateCustomizeReportStatusResponse
func (client *Client) UpdateCustomizeReportStatusWithContext(ctx context.Context, request *UpdateCustomizeReportStatusRequest, runtime *dara.RuntimeOptions) (_result *UpdateCustomizeReportStatusResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.PinnedTime) {
		query["PinnedTime"] = request.PinnedTime
	}

	if !dara.IsNil(request.ReportId) {
		query["ReportId"] = request.ReportId
	}

	if !dara.IsNil(request.ReportStatus) {
		query["ReportStatus"] = request.ReportStatus
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateCustomizeReportStatus"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateCustomizeReportStatusResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the status of core file monitoring events reported by the Security Center agent.
//
// @param request - UpdateFileProtectEventStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateFileProtectEventStatusResponse
func (client *Client) UpdateFileProtectEventStatusWithContext(ctx context.Context, request *UpdateFileProtectEventStatusRequest, runtime *dara.RuntimeOptions) (_result *UpdateFileProtectEventStatusResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateFileProtectEventStatus"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateFileProtectEventStatusResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds remarks to core file monitoring events reported by the Security Center agent.
//
// @param request - UpdateFileProtectRemarkRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateFileProtectRemarkResponse
func (client *Client) UpdateFileProtectRemarkWithContext(ctx context.Context, request *UpdateFileProtectRemarkRequest, runtime *dara.RuntimeOptions) (_result *UpdateFileProtectRemarkResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.Remark) {
		query["Remark"] = request.Remark
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateFileProtectRemark"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateFileProtectRemarkResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the content of a core file monitoring rule based on the ID of the rule.
//
// @param request - UpdateFileProtectRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateFileProtectRuleResponse
func (client *Client) UpdateFileProtectRuleWithContext(ctx context.Context, request *UpdateFileProtectRuleRequest, runtime *dara.RuntimeOptions) (_result *UpdateFileProtectRuleResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AlertLevel) {
		query["AlertLevel"] = request.AlertLevel
	}

	if !dara.IsNil(request.FileOps) {
		query["FileOps"] = request.FileOps
	}

	if !dara.IsNil(request.FilePaths) {
		query["FilePaths"] = request.FilePaths
	}

	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.ProcPaths) {
		query["ProcPaths"] = request.ProcPaths
	}

	if !dara.IsNil(request.RuleAction) {
		query["RuleAction"] = request.RuleAction
	}

	if !dara.IsNil(request.RuleName) {
		query["RuleName"] = request.RuleName
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateFileProtectRule"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateFileProtectRuleResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the queries per second (QPS) limit on the files uploaded from the client.
//
// @param request - UpdateFileUploadLimitRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateFileUploadLimitResponse
func (client *Client) UpdateFileUploadLimitWithContext(ctx context.Context, request *UpdateFileUploadLimitRequest, runtime *dara.RuntimeOptions) (_result *UpdateFileUploadLimitResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Limit) {
		query["Limit"] = request.Limit
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateFileUploadLimit"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateFileUploadLimitResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the configuration of a specified honeypot.
//
// @param request - UpdateHoneypotRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateHoneypotResponse
func (client *Client) UpdateHoneypotWithContext(ctx context.Context, request *UpdateHoneypotRequest, runtime *dara.RuntimeOptions) (_result *UpdateHoneypotResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.HoneypotId) {
		query["HoneypotId"] = request.HoneypotId
	}

	if !dara.IsNil(request.HoneypotName) {
		query["HoneypotName"] = request.HoneypotName
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Meta) {
		query["Meta"] = request.Meta
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateHoneypot"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateHoneypotResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the configuration of a specified management node.
//
// @param request - UpdateHoneypotNodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateHoneypotNodeResponse
func (client *Client) UpdateHoneypotNodeWithContext(ctx context.Context, request *UpdateHoneypotNodeRequest, runtime *dara.RuntimeOptions) (_result *UpdateHoneypotNodeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AvailableProbeNum) {
		query["AvailableProbeNum"] = request.AvailableProbeNum
	}

	if !dara.IsNil(request.NodeId) {
		query["NodeId"] = request.NodeId
	}

	if !dara.IsNil(request.NodeName) {
		query["NodeName"] = request.NodeName
	}

	if !dara.IsNil(request.SecurityGroupProbeIpList) {
		query["SecurityGroupProbeIpList"] = request.SecurityGroupProbeIpList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateHoneypotNode"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateHoneypotNodeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the configurations of the specified honeypot template.
//
// @param request - UpdateHoneypotPresetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateHoneypotPresetResponse
func (client *Client) UpdateHoneypotPresetWithContext(ctx context.Context, request *UpdateHoneypotPresetRequest, runtime *dara.RuntimeOptions) (_result *UpdateHoneypotPresetResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.HoneypotImageName) {
		query["HoneypotImageName"] = request.HoneypotImageName
	}

	if !dara.IsNil(request.HoneypotPresetId) {
		query["HoneypotPresetId"] = request.HoneypotPresetId
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Meta) {
		query["Meta"] = request.Meta
	}

	if !dara.IsNil(request.PresetName) {
		query["PresetName"] = request.PresetName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateHoneypotPreset"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateHoneypotPresetResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the attributes of a specified probe.
//
// @param request - UpdateHoneypotProbeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateHoneypotProbeResponse
func (client *Client) UpdateHoneypotProbeWithContext(ctx context.Context, request *UpdateHoneypotProbeRequest, runtime *dara.RuntimeOptions) (_result *UpdateHoneypotProbeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Arp) {
		query["Arp"] = request.Arp
	}

	if !dara.IsNil(request.DisplayName) {
		query["DisplayName"] = request.DisplayName
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Ping) {
		query["Ping"] = request.Ping
	}

	if !dara.IsNil(request.ProbeId) {
		query["ProbeId"] = request.ProbeId
	}

	if !dara.IsNil(request.ServiceIpList) {
		query["ServiceIpList"] = request.ServiceIpList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateHoneypotProbe"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateHoneypotProbeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a probe service.
//
// @param request - UpdateHoneypotProbeBindRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateHoneypotProbeBindResponse
func (client *Client) UpdateHoneypotProbeBindWithContext(ctx context.Context, request *UpdateHoneypotProbeBindRequest, runtime *dara.RuntimeOptions) (_result *UpdateHoneypotProbeBindResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BindId) {
		query["BindId"] = request.BindId
	}

	if !dara.IsNil(request.BindPortList) {
		query["BindPortList"] = request.BindPortList
	}

	if !dara.IsNil(request.BindType) {
		query["BindType"] = request.BindType
	}

	if !dara.IsNil(request.CurrentPage) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !dara.IsNil(request.HoneypotId) {
		query["HoneypotId"] = request.HoneypotId
	}

	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Ports) {
		query["Ports"] = request.Ports
	}

	if !dara.IsNil(request.ProbeId) {
		query["ProbeId"] = request.ProbeId
	}

	if !dara.IsNil(request.ServiceIpList) {
		query["ServiceIpList"] = request.ServiceIpList
	}

	if !dara.IsNil(request.SetStatus) {
		query["SetStatus"] = request.SetStatus
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateHoneypotProbeBind"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateHoneypotProbeBindResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the Security Center agent that is installed on a proxy server in a hybrid cloud.
//
// @param request - UpdateHybridProxyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateHybridProxyResponse
func (client *Client) UpdateHybridProxyWithContext(ctx context.Context, request *UpdateHybridProxyRequest, runtime *dara.RuntimeOptions) (_result *UpdateHybridProxyResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ProxyUuid) {
		query["ProxyUuid"] = request.ProxyUuid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateHybridProxy"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateHybridProxyResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates an alert handling rule.
//
// @param request - UpdateImageEventOperationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateImageEventOperationResponse
func (client *Client) UpdateImageEventOperationWithContext(ctx context.Context, request *UpdateImageEventOperationRequest, runtime *dara.RuntimeOptions) (_result *UpdateImageEventOperationResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Conditions) {
		query["Conditions"] = request.Conditions
	}

	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.Note) {
		query["Note"] = request.Note
	}

	if !dara.IsNil(request.Scenarios) {
		query["Scenarios"] = request.Scenarios
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateImageEventOperation"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateImageEventOperationResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the vulnerability whitelist of an image.
//
// @param request - UpdateImageVulWhitelistTargetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateImageVulWhitelistTargetResponse
func (client *Client) UpdateImageVulWhitelistTargetWithContext(ctx context.Context, request *UpdateImageVulWhitelistTargetRequest, runtime *dara.RuntimeOptions) (_result *UpdateImageVulWhitelistTargetResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Reason) {
		query["Reason"] = request.Reason
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	if !dara.IsNil(request.Target) {
		query["Target"] = request.Target
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateImageVulWhitelistTarget"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateImageVulWhitelistTargetResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the name of a Jenkins image repository.
//
// @param request - UpdateJenkinsImageRegistryNameRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateJenkinsImageRegistryNameResponse
func (client *Client) UpdateJenkinsImageRegistryNameWithContext(ctx context.Context, request *UpdateJenkinsImageRegistryNameRequest, runtime *dara.RuntimeOptions) (_result *UpdateJenkinsImageRegistryNameResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.RegistryId) {
		body["RegistryId"] = request.RegistryId
	}

	if !dara.IsNil(request.RegistryName) {
		body["RegistryName"] = request.RegistryName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateJenkinsImageRegistryName"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateJenkinsImageRegistryNameResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the retention period of images that are stored in a Jenkins image repository.
//
// @param request - UpdateJenkinsImageRegistryPersistenceDayRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateJenkinsImageRegistryPersistenceDayResponse
func (client *Client) UpdateJenkinsImageRegistryPersistenceDayWithContext(ctx context.Context, request *UpdateJenkinsImageRegistryPersistenceDayRequest, runtime *dara.RuntimeOptions) (_result *UpdateJenkinsImageRegistryPersistenceDayResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.PersistenceDay) {
		body["PersistenceDay"] = request.PersistenceDay
	}

	if !dara.IsNil(request.RegistryId) {
		body["RegistryId"] = request.RegistryId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateJenkinsImageRegistryPersistenceDay"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateJenkinsImageRegistryPersistenceDayResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
//
// @param request - UpdateMaliciousFileWhitelistConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMaliciousFileWhitelistConfigResponse
func (client *Client) UpdateMaliciousFileWhitelistConfigWithContext(ctx context.Context, request *UpdateMaliciousFileWhitelistConfigRequest, runtime *dara.RuntimeOptions) (_result *UpdateMaliciousFileWhitelistConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ConfigId) {
		query["ConfigId"] = request.ConfigId
	}

	if !dara.IsNil(request.EventName) {
		query["EventName"] = request.EventName
	}

	if !dara.IsNil(request.Field) {
		query["Field"] = request.Field
	}

	if !dara.IsNil(request.FieldValue) {
		query["FieldValue"] = request.FieldValue
	}

	if !dara.IsNil(request.Operator) {
		query["Operator"] = request.Operator
	}

	if !dara.IsNil(request.Source) {
		query["Source"] = request.Source
	}

	if !dara.IsNil(request.TargetType) {
		query["TargetType"] = request.TargetType
	}

	if !dara.IsNil(request.TargetValue) {
		query["TargetValue"] = request.TargetValue
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateMaliciousFileWhitelistConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateMaliciousFileWhitelistConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the blocking rule for at-risk images.
//
// @param tmpReq - UpdateOpaStrategyNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateOpaStrategyNewResponse
func (client *Client) UpdateOpaStrategyNewWithContext(ctx context.Context, tmpReq *UpdateOpaStrategyNewRequest, runtime *dara.RuntimeOptions) (_result *UpdateOpaStrategyNewResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &UpdateOpaStrategyNewShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.AlarmDetail) {
		request.AlarmDetailShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AlarmDetail, dara.String("AlarmDetail"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.AlarmDetailShrink) {
		query["AlarmDetail"] = request.AlarmDetailShrink
	}

	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.ClusterName) {
		query["ClusterName"] = request.ClusterName
	}

	if !dara.IsNil(request.Description) {
		query["Description"] = request.Description
	}

	if !dara.IsNil(request.ImageName) {
		query["ImageName"] = request.ImageName
	}

	if !dara.IsNil(request.Label) {
		query["Label"] = request.Label
	}

	if !dara.IsNil(request.MaliciousImage) {
		query["MaliciousImage"] = request.MaliciousImage
	}

	if !dara.IsNil(request.RuleAction) {
		query["RuleAction"] = request.RuleAction
	}

	if !dara.IsNil(request.Scopes) {
		query["Scopes"] = request.Scopes
	}

	if !dara.IsNil(request.StrategyId) {
		query["StrategyId"] = request.StrategyId
	}

	if !dara.IsNil(request.StrategyName) {
		query["StrategyName"] = request.StrategyName
	}

	if !dara.IsNil(request.StrategyTemplateId) {
		query["StrategyTemplateId"] = request.StrategyTemplateId
	}

	if !dara.IsNil(request.UnScanedImage) {
		query["UnScanedImage"] = request.UnScanedImage
	}

	if !dara.IsNil(request.WhiteList) {
		query["WhiteList"] = request.WhiteList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateOpaStrategyNew"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateOpaStrategyNewResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a policy of detecting Object Storage Service (OSS) objects by using the SDK for malicious file detection feature.
//
// @param request - UpdateOssScanConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateOssScanConfigResponse
func (client *Client) UpdateOssScanConfigWithContext(ctx context.Context, request *UpdateOssScanConfigRequest, runtime *dara.RuntimeOptions) (_result *UpdateOssScanConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AllKeyPrefix) {
		query["AllKeyPrefix"] = request.AllKeyPrefix
	}

	if !dara.IsNil(request.BucketNameList) {
		query["BucketNameList"] = request.BucketNameList
	}

	if !dara.IsNil(request.DecompressMaxFileCount) {
		query["DecompressMaxFileCount"] = request.DecompressMaxFileCount
	}

	if !dara.IsNil(request.DecompressMaxLayer) {
		query["DecompressMaxLayer"] = request.DecompressMaxLayer
	}

	if !dara.IsNil(request.DecryptionList) {
		query["DecryptionList"] = request.DecryptionList
	}

	if !dara.IsNil(request.Enable) {
		query["Enable"] = request.Enable
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.KeyPrefixList) {
		query["KeyPrefixList"] = request.KeyPrefixList
	}

	if !dara.IsNil(request.KeySuffixList) {
		query["KeySuffixList"] = request.KeySuffixList
	}

	if !dara.IsNil(request.LastModifiedStartTime) {
		query["LastModifiedStartTime"] = request.LastModifiedStartTime
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.RealTimeIncr) {
		query["RealTimeIncr"] = request.RealTimeIncr
	}

	if !dara.IsNil(request.ScanDayList) {
		query["ScanDayList"] = request.ScanDayList
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateOssScanConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateOssScanConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Change Postpaid Asset Authorization Version
//
// @param request - UpdatePostPaidBindRelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdatePostPaidBindRelResponse
func (client *Client) UpdatePostPaidBindRelWithContext(ctx context.Context, request *UpdatePostPaidBindRelRequest, runtime *dara.RuntimeOptions) (_result *UpdatePostPaidBindRelResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AutoBind) {
		query["AutoBind"] = request.AutoBind
	}

	if !dara.IsNil(request.AutoBindVersion) {
		query["AutoBindVersion"] = request.AutoBindVersion
	}

	if !dara.IsNil(request.BindAction) {
		query["BindAction"] = request.BindAction
	}

	if !dara.IsNil(request.UpdateIfNecessary) {
		query["UpdateIfNecessary"] = request.UpdateIfNecessary
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdatePostPaidBindRel"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdatePostPaidBindRelResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables or disables automatic upgrade.
//
// @param request - UpdatePublishAutoUpgradeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdatePublishAutoUpgradeResponse
func (client *Client) UpdatePublishAutoUpgradeWithContext(ctx context.Context, request *UpdatePublishAutoUpgradeRequest, runtime *dara.RuntimeOptions) (_result *UpdatePublishAutoUpgradeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AutoUpgrade) {
		query["AutoUpgrade"] = request.AutoUpgrade
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdatePublishAutoUpgrade"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdatePublishAutoUpgradeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a release batch.
//
// @param request - UpdatePublishBatchRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdatePublishBatchResponse
func (client *Client) UpdatePublishBatchWithContext(ctx context.Context, request *UpdatePublishBatchRequest, runtime *dara.RuntimeOptions) (_result *UpdatePublishBatchResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BatchId) {
		query["BatchId"] = request.BatchId
	}

	if !dara.IsNil(request.BatchName) {
		query["BatchName"] = request.BatchName
	}

	if !dara.IsNil(request.Interval) {
		query["Interval"] = request.Interval
	}

	if !dara.IsNil(request.OperationBase) {
		query["OperationBase"] = request.OperationBase
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdatePublishBatch"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdatePublishBatchResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the configuration of the client upgrade time. If you want to call this operation, contact technical support.
//
// @param request - UpdatePublishCronRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdatePublishCronResponse
func (client *Client) UpdatePublishCronWithContext(ctx context.Context, request *UpdatePublishCronRequest, runtime *dara.RuntimeOptions) (_result *UpdatePublishCronResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Cron) {
		query["Cron"] = request.Cron
	}

	if !dara.IsNil(request.CronDay) {
		query["CronDay"] = request.CronDay
	}

	if !dara.IsNil(request.CronTime) {
		query["CronTime"] = request.CronTime
	}

	if !dara.IsNil(request.CronType) {
		query["CronType"] = request.CronType
	}

	if !dara.IsNil(request.Duration) {
		query["Duration"] = request.Duration
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdatePublishCron"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdatePublishCronResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the settings of the canary release feature for agent upgrade. If you want to use the feature, contact technical support.
//
// @param request - UpdatePublishGraySwitchRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdatePublishGraySwitchResponse
func (client *Client) UpdatePublishGraySwitchWithContext(ctx context.Context, request *UpdatePublishGraySwitchRequest, runtime *dara.RuntimeOptions) (_result *UpdatePublishGraySwitchResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.GraySwitchStatus) {
		query["GraySwitchStatus"] = request.GraySwitchStatus
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdatePublishGraySwitch"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdatePublishGraySwitchResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the unique identifier of an asset selection.
//
// @param request - UpdateSelectionKeyByTypeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateSelectionKeyByTypeResponse
func (client *Client) UpdateSelectionKeyByTypeWithContext(ctx context.Context, request *UpdateSelectionKeyByTypeRequest, runtime *dara.RuntimeOptions) (_result *UpdateSelectionKeyByTypeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BusinessType) {
		query["BusinessType"] = request.BusinessType
	}

	if !dara.IsNil(request.SelectionKey) {
		query["SelectionKey"] = request.SelectionKey
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateSelectionKeyByType"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateSelectionKeyByTypeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Update the selected strict events in strict mode
//
// @param request - UpdateStrictEventNameRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateStrictEventNameResponse
func (client *Client) UpdateStrictEventNameWithContext(ctx context.Context, request *UpdateStrictEventNameRequest, runtime *dara.RuntimeOptions) (_result *UpdateStrictEventNameResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.EventNameList) {
		query["EventNameList"] = request.EventNameList
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.Operator) {
		query["Operator"] = request.Operator
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateStrictEventName"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateStrictEventNameResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates machines in a release batch.
//
// @param request - UpdateTargetListByBatchRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateTargetListByBatchResponse
func (client *Client) UpdateTargetListByBatchWithContext(ctx context.Context, request *UpdateTargetListByBatchRequest, runtime *dara.RuntimeOptions) (_result *UpdateTargetListByBatchResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BatchId) {
		query["BatchId"] = request.BatchId
	}

	if !dara.IsNil(request.OperationList) {
		query["OperationList"] = request.OperationList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateTargetListByBatch"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateTargetListByBatchResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modify Image Service Whitelist.
//
// @param request - UpdateWhiteListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateWhiteListResponse
func (client *Client) UpdateWhiteListWithContext(ctx context.Context, request *UpdateWhiteListRequest, runtime *dara.RuntimeOptions) (_result *UpdateWhiteListResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.RegistryId) {
		query["RegistryId"] = request.RegistryId
	}

	if !dara.IsNil(request.WhiteList) {
		query["WhiteList"] = request.WhiteList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateWhiteList"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateWhiteListResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the status of an application whitelist policy.
//
// Description:
//
// The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
//
// @param request - UpdateWhiteListStrategyStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateWhiteListStrategyStatusResponse
func (client *Client) UpdateWhiteListStrategyStatusWithContext(ctx context.Context, request *UpdateWhiteListStrategyStatusRequest, runtime *dara.RuntimeOptions) (_result *UpdateWhiteListStrategyStatusResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.SourceIp) {
		query["SourceIp"] = request.SourceIp
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	if !dara.IsNil(request.StrategyIds) {
		query["StrategyIds"] = request.StrategyIds
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateWhiteListStrategyStatus"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateWhiteListStrategyStatusResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Upgrades the version of an anti-ransomware policy.
//
// @param request - UpgradeBackupPolicyVersionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpgradeBackupPolicyVersionResponse
func (client *Client) UpgradeBackupPolicyVersionWithContext(ctx context.Context, request *UpgradeBackupPolicyVersionRequest, runtime *dara.RuntimeOptions) (_result *UpgradeBackupPolicyVersionResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpgradeBackupPolicyVersion"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpgradeBackupPolicyVersionResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Upgrades the version of the management node to which a honeypot belongs.
//
// @param request - UpgradeHoneypotNodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpgradeHoneypotNodeResponse
func (client *Client) UpgradeHoneypotNodeWithContext(ctx context.Context, request *UpgradeHoneypotNodeRequest, runtime *dara.RuntimeOptions) (_result *UpgradeHoneypotNodeResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AllowHoneypotAccessInternet) {
		query["AllowHoneypotAccessInternet"] = request.AllowHoneypotAccessInternet
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.NodeId) {
		query["NodeId"] = request.NodeId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpgradeHoneypotNode"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpgradeHoneypotNodeResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Manually upgrades the client version on assets.
//
// @param request - UpgradeVersionByUuidsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpgradeVersionByUuidsResponse
func (client *Client) UpgradeVersionByUuidsWithContext(ctx context.Context, request *UpgradeVersionByUuidsRequest, runtime *dara.RuntimeOptions) (_result *UpgradeVersionByUuidsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.UpgradeVersion) {
		query["UpgradeVersion"] = request.UpgradeVersion
	}

	if !dara.IsNil(request.UuidList) {
		query["UuidList"] = request.UuidList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpgradeVersionByUuids"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpgradeVersionByUuidsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Uploads a honeypot file.
//
// @param request - UploadedHoneyPotFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UploadedHoneyPotFileResponse
func (client *Client) UploadedHoneyPotFileWithContext(ctx context.Context, request *UploadedHoneyPotFileRequest, runtime *dara.RuntimeOptions) (_result *UploadedHoneyPotFileResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.FileKey) {
		query["FileKey"] = request.FileKey
	}

	if !dara.IsNil(request.FileName) {
		query["FileName"] = request.FileName
	}

	if !dara.IsNil(request.FileType) {
		query["FileType"] = request.FileType
	}

	if !dara.IsNil(request.HoneypotImageName) {
		query["HoneypotImageName"] = request.HoneypotImageName
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.NodeId) {
		query["NodeId"] = request.NodeId
	}

	if !dara.IsNil(request.TemplateExtra) {
		query["TemplateExtra"] = request.TemplateExtra
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UploadedHoneyPotFile"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UploadedHoneyPotFileResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Verifies whether risk items are fixed. If a risk item is fixed, the status of the related check item is updated to Passed.
//
// @param request - ValidateHcWarningsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ValidateHcWarningsResponse
func (client *Client) ValidateHcWarningsWithContext(ctx context.Context, request *ValidateHcWarningsRequest, runtime *dara.RuntimeOptions) (_result *ValidateHcWarningsResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckIds) {
		query["CheckIds"] = request.CheckIds
	}

	if !dara.IsNil(request.RiskIds) {
		query["RiskIds"] = request.RiskIds
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	if !dara.IsNil(request.Uuids) {
		query["Uuids"] = request.Uuids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ValidateHcWarnings"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ValidateHcWarningsResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Customization and validation of check items and repair parameters
//
// @param tmpReq - VerifyCheckCustomConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return VerifyCheckCustomConfigResponse
func (client *Client) VerifyCheckCustomConfigWithContext(ctx context.Context, tmpReq *VerifyCheckCustomConfigRequest, runtime *dara.RuntimeOptions) (_result *VerifyCheckCustomConfigResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = tmpReq.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	request := &VerifyCheckCustomConfigShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.CustomCheckConfig) {
		request.CustomCheckConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CustomCheckConfig, dara.String("CustomCheckConfig"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckId) {
		query["CheckId"] = request.CheckId
	}

	if !dara.IsNil(request.CustomCheckConfigShrink) {
		query["CustomCheckConfig"] = request.CustomCheckConfigShrink
	}

	if !dara.IsNil(request.CustomConfigs) {
		query["CustomConfigs"] = request.CustomConfigs
	}

	if !dara.IsNil(request.RepairConfigs) {
		query["RepairConfigs"] = request.RepairConfigs
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("VerifyCheckCustomConfig"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &VerifyCheckCustomConfigResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Verifies the instances on which risks are detected based on a check item.
//
// @param request - VerifyCheckInstanceResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return VerifyCheckInstanceResultResponse
func (client *Client) VerifyCheckInstanceResultWithContext(ctx context.Context, request *VerifyCheckInstanceResultRequest, runtime *dara.RuntimeOptions) (_result *VerifyCheckInstanceResultResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckId) {
		query["CheckId"] = request.CheckId
	}

	if !dara.IsNil(request.InstanceIds) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !dara.IsNil(request.TaskSource) {
		query["TaskSource"] = request.TaskSource
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("VerifyCheckInstanceResult"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &VerifyCheckInstanceResultResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Verifies risk items that are detected based on check items.
//
// @param request - VerifyCheckResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return VerifyCheckResultResponse
func (client *Client) VerifyCheckResultWithContext(ctx context.Context, request *VerifyCheckResultRequest, runtime *dara.RuntimeOptions) (_result *VerifyCheckResultResponse, _err error) {
	if dara.BoolValue(client.EnableValidate) == true {
		_err = request.Validate()
		if _err != nil {
			return _result, _err
		}
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckIds) {
		query["CheckIds"] = request.CheckIds
	}

	if !dara.IsNil(request.TaskSource) {
		query["TaskSource"] = request.TaskSource
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("VerifyCheckResult"),
		Version:     dara.String("2018-12-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &VerifyCheckResultResponse{}
	_body, _err := client.CallApiWithCtx(ctx, params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}
